
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fe68  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011fc  0801ffa8  0801ffa8  00020fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  080211a4  080211a4  000221a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802127c  0802127c  00023308  2**0
                  CONTENTS
  5 .ARM          00000008  0802127c  0802127c  0002227c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08021284  08021284  00023308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08021284  08021284  00022284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08021288  08021288  00022288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000308  20000000  0802128c  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002384  20000308  08021594  00023308  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000268c  08021594  0002368c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00023308  2**0
                  CONTENTS, READONLY
 13 .debug_info   00044a99  00000000  00000000  00023332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a93c  00000000  00000000  00067dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000036a0  00000000  00000000  00072708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000029c7  00000000  00000000  00075da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a8f6  00000000  00000000  0007876f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000444bf  00000000  00000000  000a3065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0219  00000000  00000000  000e7524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b773d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f130  00000000  00000000  001b7780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001c68b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	0801ff90 	.word	0x0801ff90

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	0801ff90 	.word	0x0801ff90

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b988 	b.w	80013c8 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9d08      	ldr	r5, [sp, #32]
 80010d6:	468e      	mov	lr, r1
 80010d8:	4604      	mov	r4, r0
 80010da:	4688      	mov	r8, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14a      	bne.n	8001176 <__udivmoddi4+0xa6>
 80010e0:	428a      	cmp	r2, r1
 80010e2:	4617      	mov	r7, r2
 80010e4:	d962      	bls.n	80011ac <__udivmoddi4+0xdc>
 80010e6:	fab2 f682 	clz	r6, r2
 80010ea:	b14e      	cbz	r6, 8001100 <__udivmoddi4+0x30>
 80010ec:	f1c6 0320 	rsb	r3, r6, #32
 80010f0:	fa01 f806 	lsl.w	r8, r1, r6
 80010f4:	fa20 f303 	lsr.w	r3, r0, r3
 80010f8:	40b7      	lsls	r7, r6
 80010fa:	ea43 0808 	orr.w	r8, r3, r8
 80010fe:	40b4      	lsls	r4, r6
 8001100:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001104:	fa1f fc87 	uxth.w	ip, r7
 8001108:	fbb8 f1fe 	udiv	r1, r8, lr
 800110c:	0c23      	lsrs	r3, r4, #16
 800110e:	fb0e 8811 	mls	r8, lr, r1, r8
 8001112:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001116:	fb01 f20c 	mul.w	r2, r1, ip
 800111a:	429a      	cmp	r2, r3
 800111c:	d909      	bls.n	8001132 <__udivmoddi4+0x62>
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	f101 30ff 	add.w	r0, r1, #4294967295
 8001124:	f080 80ea 	bcs.w	80012fc <__udivmoddi4+0x22c>
 8001128:	429a      	cmp	r2, r3
 800112a:	f240 80e7 	bls.w	80012fc <__udivmoddi4+0x22c>
 800112e:	3902      	subs	r1, #2
 8001130:	443b      	add	r3, r7
 8001132:	1a9a      	subs	r2, r3, r2
 8001134:	b2a3      	uxth	r3, r4
 8001136:	fbb2 f0fe 	udiv	r0, r2, lr
 800113a:	fb0e 2210 	mls	r2, lr, r0, r2
 800113e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001142:	fb00 fc0c 	mul.w	ip, r0, ip
 8001146:	459c      	cmp	ip, r3
 8001148:	d909      	bls.n	800115e <__udivmoddi4+0x8e>
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001150:	f080 80d6 	bcs.w	8001300 <__udivmoddi4+0x230>
 8001154:	459c      	cmp	ip, r3
 8001156:	f240 80d3 	bls.w	8001300 <__udivmoddi4+0x230>
 800115a:	443b      	add	r3, r7
 800115c:	3802      	subs	r0, #2
 800115e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001162:	eba3 030c 	sub.w	r3, r3, ip
 8001166:	2100      	movs	r1, #0
 8001168:	b11d      	cbz	r5, 8001172 <__udivmoddi4+0xa2>
 800116a:	40f3      	lsrs	r3, r6
 800116c:	2200      	movs	r2, #0
 800116e:	e9c5 3200 	strd	r3, r2, [r5]
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d905      	bls.n	8001186 <__udivmoddi4+0xb6>
 800117a:	b10d      	cbz	r5, 8001180 <__udivmoddi4+0xb0>
 800117c:	e9c5 0100 	strd	r0, r1, [r5]
 8001180:	2100      	movs	r1, #0
 8001182:	4608      	mov	r0, r1
 8001184:	e7f5      	b.n	8001172 <__udivmoddi4+0xa2>
 8001186:	fab3 f183 	clz	r1, r3
 800118a:	2900      	cmp	r1, #0
 800118c:	d146      	bne.n	800121c <__udivmoddi4+0x14c>
 800118e:	4573      	cmp	r3, lr
 8001190:	d302      	bcc.n	8001198 <__udivmoddi4+0xc8>
 8001192:	4282      	cmp	r2, r0
 8001194:	f200 8105 	bhi.w	80013a2 <__udivmoddi4+0x2d2>
 8001198:	1a84      	subs	r4, r0, r2
 800119a:	eb6e 0203 	sbc.w	r2, lr, r3
 800119e:	2001      	movs	r0, #1
 80011a0:	4690      	mov	r8, r2
 80011a2:	2d00      	cmp	r5, #0
 80011a4:	d0e5      	beq.n	8001172 <__udivmoddi4+0xa2>
 80011a6:	e9c5 4800 	strd	r4, r8, [r5]
 80011aa:	e7e2      	b.n	8001172 <__udivmoddi4+0xa2>
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	f000 8090 	beq.w	80012d2 <__udivmoddi4+0x202>
 80011b2:	fab2 f682 	clz	r6, r2
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	f040 80a4 	bne.w	8001304 <__udivmoddi4+0x234>
 80011bc:	1a8a      	subs	r2, r1, r2
 80011be:	0c03      	lsrs	r3, r0, #16
 80011c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011c4:	b280      	uxth	r0, r0
 80011c6:	b2bc      	uxth	r4, r7
 80011c8:	2101      	movs	r1, #1
 80011ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80011ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80011d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011d6:	fb04 f20c 	mul.w	r2, r4, ip
 80011da:	429a      	cmp	r2, r3
 80011dc:	d907      	bls.n	80011ee <__udivmoddi4+0x11e>
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80011e4:	d202      	bcs.n	80011ec <__udivmoddi4+0x11c>
 80011e6:	429a      	cmp	r2, r3
 80011e8:	f200 80e0 	bhi.w	80013ac <__udivmoddi4+0x2dc>
 80011ec:	46c4      	mov	ip, r8
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80011f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80011f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011fc:	fb02 f404 	mul.w	r4, r2, r4
 8001200:	429c      	cmp	r4, r3
 8001202:	d907      	bls.n	8001214 <__udivmoddi4+0x144>
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	f102 30ff 	add.w	r0, r2, #4294967295
 800120a:	d202      	bcs.n	8001212 <__udivmoddi4+0x142>
 800120c:	429c      	cmp	r4, r3
 800120e:	f200 80ca 	bhi.w	80013a6 <__udivmoddi4+0x2d6>
 8001212:	4602      	mov	r2, r0
 8001214:	1b1b      	subs	r3, r3, r4
 8001216:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800121a:	e7a5      	b.n	8001168 <__udivmoddi4+0x98>
 800121c:	f1c1 0620 	rsb	r6, r1, #32
 8001220:	408b      	lsls	r3, r1
 8001222:	fa22 f706 	lsr.w	r7, r2, r6
 8001226:	431f      	orrs	r7, r3
 8001228:	fa0e f401 	lsl.w	r4, lr, r1
 800122c:	fa20 f306 	lsr.w	r3, r0, r6
 8001230:	fa2e fe06 	lsr.w	lr, lr, r6
 8001234:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001238:	4323      	orrs	r3, r4
 800123a:	fa00 f801 	lsl.w	r8, r0, r1
 800123e:	fa1f fc87 	uxth.w	ip, r7
 8001242:	fbbe f0f9 	udiv	r0, lr, r9
 8001246:	0c1c      	lsrs	r4, r3, #16
 8001248:	fb09 ee10 	mls	lr, r9, r0, lr
 800124c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001250:	fb00 fe0c 	mul.w	lr, r0, ip
 8001254:	45a6      	cmp	lr, r4
 8001256:	fa02 f201 	lsl.w	r2, r2, r1
 800125a:	d909      	bls.n	8001270 <__udivmoddi4+0x1a0>
 800125c:	193c      	adds	r4, r7, r4
 800125e:	f100 3aff 	add.w	sl, r0, #4294967295
 8001262:	f080 809c 	bcs.w	800139e <__udivmoddi4+0x2ce>
 8001266:	45a6      	cmp	lr, r4
 8001268:	f240 8099 	bls.w	800139e <__udivmoddi4+0x2ce>
 800126c:	3802      	subs	r0, #2
 800126e:	443c      	add	r4, r7
 8001270:	eba4 040e 	sub.w	r4, r4, lr
 8001274:	fa1f fe83 	uxth.w	lr, r3
 8001278:	fbb4 f3f9 	udiv	r3, r4, r9
 800127c:	fb09 4413 	mls	r4, r9, r3, r4
 8001280:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001284:	fb03 fc0c 	mul.w	ip, r3, ip
 8001288:	45a4      	cmp	ip, r4
 800128a:	d908      	bls.n	800129e <__udivmoddi4+0x1ce>
 800128c:	193c      	adds	r4, r7, r4
 800128e:	f103 3eff 	add.w	lr, r3, #4294967295
 8001292:	f080 8082 	bcs.w	800139a <__udivmoddi4+0x2ca>
 8001296:	45a4      	cmp	ip, r4
 8001298:	d97f      	bls.n	800139a <__udivmoddi4+0x2ca>
 800129a:	3b02      	subs	r3, #2
 800129c:	443c      	add	r4, r7
 800129e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80012a2:	eba4 040c 	sub.w	r4, r4, ip
 80012a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80012aa:	4564      	cmp	r4, ip
 80012ac:	4673      	mov	r3, lr
 80012ae:	46e1      	mov	r9, ip
 80012b0:	d362      	bcc.n	8001378 <__udivmoddi4+0x2a8>
 80012b2:	d05f      	beq.n	8001374 <__udivmoddi4+0x2a4>
 80012b4:	b15d      	cbz	r5, 80012ce <__udivmoddi4+0x1fe>
 80012b6:	ebb8 0203 	subs.w	r2, r8, r3
 80012ba:	eb64 0409 	sbc.w	r4, r4, r9
 80012be:	fa04 f606 	lsl.w	r6, r4, r6
 80012c2:	fa22 f301 	lsr.w	r3, r2, r1
 80012c6:	431e      	orrs	r6, r3
 80012c8:	40cc      	lsrs	r4, r1
 80012ca:	e9c5 6400 	strd	r6, r4, [r5]
 80012ce:	2100      	movs	r1, #0
 80012d0:	e74f      	b.n	8001172 <__udivmoddi4+0xa2>
 80012d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80012d6:	0c01      	lsrs	r1, r0, #16
 80012d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012dc:	b280      	uxth	r0, r0
 80012de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012e2:	463b      	mov	r3, r7
 80012e4:	4638      	mov	r0, r7
 80012e6:	463c      	mov	r4, r7
 80012e8:	46b8      	mov	r8, r7
 80012ea:	46be      	mov	lr, r7
 80012ec:	2620      	movs	r6, #32
 80012ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80012f2:	eba2 0208 	sub.w	r2, r2, r8
 80012f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012fa:	e766      	b.n	80011ca <__udivmoddi4+0xfa>
 80012fc:	4601      	mov	r1, r0
 80012fe:	e718      	b.n	8001132 <__udivmoddi4+0x62>
 8001300:	4610      	mov	r0, r2
 8001302:	e72c      	b.n	800115e <__udivmoddi4+0x8e>
 8001304:	f1c6 0220 	rsb	r2, r6, #32
 8001308:	fa2e f302 	lsr.w	r3, lr, r2
 800130c:	40b7      	lsls	r7, r6
 800130e:	40b1      	lsls	r1, r6
 8001310:	fa20 f202 	lsr.w	r2, r0, r2
 8001314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001318:	430a      	orrs	r2, r1
 800131a:	fbb3 f8fe 	udiv	r8, r3, lr
 800131e:	b2bc      	uxth	r4, r7
 8001320:	fb0e 3318 	mls	r3, lr, r8, r3
 8001324:	0c11      	lsrs	r1, r2, #16
 8001326:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800132a:	fb08 f904 	mul.w	r9, r8, r4
 800132e:	40b0      	lsls	r0, r6
 8001330:	4589      	cmp	r9, r1
 8001332:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001336:	b280      	uxth	r0, r0
 8001338:	d93e      	bls.n	80013b8 <__udivmoddi4+0x2e8>
 800133a:	1879      	adds	r1, r7, r1
 800133c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001340:	d201      	bcs.n	8001346 <__udivmoddi4+0x276>
 8001342:	4589      	cmp	r9, r1
 8001344:	d81f      	bhi.n	8001386 <__udivmoddi4+0x2b6>
 8001346:	eba1 0109 	sub.w	r1, r1, r9
 800134a:	fbb1 f9fe 	udiv	r9, r1, lr
 800134e:	fb09 f804 	mul.w	r8, r9, r4
 8001352:	fb0e 1119 	mls	r1, lr, r9, r1
 8001356:	b292      	uxth	r2, r2
 8001358:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800135c:	4542      	cmp	r2, r8
 800135e:	d229      	bcs.n	80013b4 <__udivmoddi4+0x2e4>
 8001360:	18ba      	adds	r2, r7, r2
 8001362:	f109 31ff 	add.w	r1, r9, #4294967295
 8001366:	d2c4      	bcs.n	80012f2 <__udivmoddi4+0x222>
 8001368:	4542      	cmp	r2, r8
 800136a:	d2c2      	bcs.n	80012f2 <__udivmoddi4+0x222>
 800136c:	f1a9 0102 	sub.w	r1, r9, #2
 8001370:	443a      	add	r2, r7
 8001372:	e7be      	b.n	80012f2 <__udivmoddi4+0x222>
 8001374:	45f0      	cmp	r8, lr
 8001376:	d29d      	bcs.n	80012b4 <__udivmoddi4+0x1e4>
 8001378:	ebbe 0302 	subs.w	r3, lr, r2
 800137c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001380:	3801      	subs	r0, #1
 8001382:	46e1      	mov	r9, ip
 8001384:	e796      	b.n	80012b4 <__udivmoddi4+0x1e4>
 8001386:	eba7 0909 	sub.w	r9, r7, r9
 800138a:	4449      	add	r1, r9
 800138c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001390:	fbb1 f9fe 	udiv	r9, r1, lr
 8001394:	fb09 f804 	mul.w	r8, r9, r4
 8001398:	e7db      	b.n	8001352 <__udivmoddi4+0x282>
 800139a:	4673      	mov	r3, lr
 800139c:	e77f      	b.n	800129e <__udivmoddi4+0x1ce>
 800139e:	4650      	mov	r0, sl
 80013a0:	e766      	b.n	8001270 <__udivmoddi4+0x1a0>
 80013a2:	4608      	mov	r0, r1
 80013a4:	e6fd      	b.n	80011a2 <__udivmoddi4+0xd2>
 80013a6:	443b      	add	r3, r7
 80013a8:	3a02      	subs	r2, #2
 80013aa:	e733      	b.n	8001214 <__udivmoddi4+0x144>
 80013ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80013b0:	443b      	add	r3, r7
 80013b2:	e71c      	b.n	80011ee <__udivmoddi4+0x11e>
 80013b4:	4649      	mov	r1, r9
 80013b6:	e79c      	b.n	80012f2 <__udivmoddi4+0x222>
 80013b8:	eba1 0109 	sub.w	r1, r1, r9
 80013bc:	46c4      	mov	ip, r8
 80013be:	fbb1 f9fe 	udiv	r9, r1, lr
 80013c2:	fb09 f804 	mul.w	r8, r9, r4
 80013c6:	e7c4      	b.n	8001352 <__udivmoddi4+0x282>

080013c8 <__aeabi_idiv0>:
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013f0:	68fb      	ldr	r3, [r7, #12]
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001408:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800140a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4313      	orrs	r3, r2
 8001412:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001418:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001420:	68fb      	ldr	r3, [r7, #12]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001438:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	43db      	mvns	r3, r3
 800143e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001442:	4013      	ands	r3, r2
 8001444:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001454:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <MX_ADC_Init+0x94>)
 8001456:	4a24      	ldr	r2, [pc, #144]	@ (80014e8 <MX_ADC_Init+0x98>)
 8001458:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800145a:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <MX_ADC_Init+0x94>)
 800145c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001460:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001462:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <MX_ADC_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <MX_ADC_Init+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800146e:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <MX_ADC_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_ADC_Init+0x94>)
 8001476:	2204      	movs	r2, #4
 8001478:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_ADC_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001480:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_ADC_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <MX_ADC_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_ADC_Init+0x94>)
 800148e:	2201      	movs	r2, #1
 8001490:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_ADC_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_ADC_Init+0x94>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a0:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <MX_ADC_Init+0x94>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_ADC_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <MX_ADC_Init+0x94>)
 80014b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_ADC_Init+0x94>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_ADC_Init+0x94>)
 80014be:	2207      	movs	r2, #7
 80014c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_ADC_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_ADC_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_ADC_Init+0x94>)
 80014d2:	f002 fb85 	bl	8003be0 <HAL_ADC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80014dc:	f000 fe1c 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000324 	.word	0x20000324
 80014e8:	40012400 	.word	0x40012400

080014ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0d      	ldr	r2, [pc, #52]	@ (8001540 <HAL_ADC_MspInit+0x54>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d113      	bne.n	8001536 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800150e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001512:	f7ff ff73 	bl	80013fc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2002      	movs	r0, #2
 8001518:	f7ff ff58 	bl	80013cc <LL_AHB2_GRP1_EnableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin;
 800151c:	f246 0318 	movw	r3, #24600	@ 0x6018
 8001520:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001522:	2303      	movs	r3, #3
 8001524:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <HAL_ADC_MspInit+0x58>)
 8001532:	f004 f955 	bl	80057e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40012400 	.word	0x40012400
 8001544:	48000400 	.word	0x48000400

08001548 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <HAL_ADC_MspDeInit+0x2c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d108      	bne.n	800156c <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800155a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800155e:	f7ff ff65 	bl	800142c <LL_APB2_GRP1_DisableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin);
 8001562:	f246 0118 	movw	r1, #24600	@ 0x6018
 8001566:	4804      	ldr	r0, [pc, #16]	@ (8001578 <HAL_ADC_MspDeInit+0x30>)
 8001568:	f004 fa9a 	bl	8005aa0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40012400 	.word	0x40012400
 8001578:	48000400 	.word	0x48000400

0800157c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <SYS_InitMeasurement+0x14>)
 8001582:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <SYS_InitMeasurement+0x18>)
 8001584:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000324 	.word	0x20000324
 8001594:	40012400 	.word	0x40012400

08001598 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80015a6:	f000 f869 	bl	800167c <SYS_GetBatteryLevel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80015ae:	482d      	ldr	r0, [pc, #180]	@ (8001664 <SYS_GetTemperatureLevel+0xcc>)
 80015b0:	f000 f8e6 	bl	8001780 <ADC_ReadChannels>
 80015b4:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80015b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <SYS_GetTemperatureLevel+0xd0>)
 80015b8:	881a      	ldrh	r2, [r3, #0]
 80015ba:	4b2c      	ldr	r3, [pc, #176]	@ (800166c <SYS_GetTemperatureLevel+0xd4>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d026      	beq.n	8001610 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80015c2:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <SYS_GetTemperatureLevel+0xd0>)
 80015c4:	881a      	ldrh	r2, [r3, #0]
 80015c6:	4b29      	ldr	r3, [pc, #164]	@ (800166c <SYS_GetTemperatureLevel+0xd4>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d01c      	beq.n	8001608 <SYS_GetTemperatureLevel+0x70>
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	4a25      	ldr	r2, [pc, #148]	@ (8001670 <SYS_GetTemperatureLevel+0xd8>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b22      	ldr	r3, [pc, #136]	@ (800166c <SYS_GetTemperatureLevel+0xd4>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2264      	movs	r2, #100	@ 0x64
 80015ea:	fb03 f202 	mul.w	r2, r3, r2
 80015ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <SYS_GetTemperatureLevel+0xd0>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <SYS_GetTemperatureLevel+0xd4>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	1acb      	subs	r3, r1, r3
 80015fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80015fe:	b29b      	uxth	r3, r3
 8001600:	331e      	adds	r3, #30
 8001602:	b29b      	uxth	r3, r3
 8001604:	b21b      	sxth	r3, r3
 8001606:	e001      	b.n	800160c <SYS_GetTemperatureLevel+0x74>
 8001608:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800160c:	803b      	strh	r3, [r7, #0]
 800160e:	e01d      	b.n	800164c <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	fb03 f202 	mul.w	r2, r3, r2
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <SYS_GetTemperatureLevel+0xdc>)
 800161a:	fba3 1302 	umull	r1, r3, r3, r2
 800161e:	1ad2      	subs	r2, r2, r3
 8001620:	0852      	lsrs	r2, r2, #1
 8001622:	4413      	add	r3, r2
 8001624:	0adb      	lsrs	r3, r3, #11
 8001626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8001632:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8001636:	4a10      	ldr	r2, [pc, #64]	@ (8001678 <SYS_GetTemperatureLevel+0xe0>)
 8001638:	fb82 1203 	smull	r1, r2, r2, r3
 800163c:	1292      	asrs	r2, r2, #10
 800163e:	17db      	asrs	r3, r3, #31
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	b29b      	uxth	r3, r3
 8001644:	331e      	adds	r3, #30
 8001646:	b29b      	uxth	r3, r3
 8001648:	b21b      	sxth	r3, r3
 800164a:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 800164c:	883b      	ldrh	r3, [r7, #0]
 800164e:	b21b      	sxth	r3, r3
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21b      	sxth	r3, r3
 8001654:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8001656:	883b      	ldrh	r3, [r7, #0]
 8001658:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	b0001000 	.word	0xb0001000
 8001668:	1fff75c8 	.word	0x1fff75c8
 800166c:	1fff75a8 	.word	0x1fff75a8
 8001670:	09ee009f 	.word	0x09ee009f
 8001674:	00100101 	.word	0x00100101
 8001678:	68db8bad 	.word	0x68db8bad

0800167c <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800168a:	4813      	ldr	r0, [pc, #76]	@ (80016d8 <SYS_GetBatteryLevel+0x5c>)
 800168c:	f000 f878 	bl	8001780 <ADC_ReadChannels>
 8001690:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	80fb      	strh	r3, [r7, #6]
 800169c:	e016      	b.n	80016cc <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <SYS_GetBatteryLevel+0x60>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00b      	beq.n	80016c2 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <SYS_GetBatteryLevel+0x60>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80016b4:	fb03 f202 	mul.w	r2, r3, r2
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	e004      	b.n	80016cc <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80016c2:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <SYS_GetBatteryLevel+0x64>)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	b4002000 	.word	0xb4002000
 80016dc:	1fff75aa 	.word	0x1fff75aa
 80016e0:	004c08d8 	.word	0x004c08d8

080016e4 <SYS_GetADC0>:

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */
uint16_t SYS_GetADC0(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_0);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f000 f844 	bl	8001780 <ADC_ReadChannels>
 80016f8:	4603      	mov	r3, r0
 80016fa:	80fb      	strh	r3, [r7, #6]
	return voltage;
 80016fc:	88fb      	ldrh	r3, [r7, #6]
	//outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
	//return outvoltage;
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <SYS_GetADC1>:

uint16_t SYS_GetADC1(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_1);
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <SYS_GetADC1+0x24>)
 8001718:	f000 f832 	bl	8001780 <ADC_ReadChannels>
 800171c:	4603      	mov	r3, r0
 800171e:	80fb      	strh	r3, [r7, #6]
	return voltage;
 8001720:	88fb      	ldrh	r3, [r7, #6]
	//outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
	//return outvoltage;
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	04000002 	.word	0x04000002

08001730 <SYS_GetADC2>:

uint16_t SYS_GetADC2(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_2);
 800173e:	4805      	ldr	r0, [pc, #20]	@ (8001754 <SYS_GetADC2+0x24>)
 8001740:	f000 f81e 	bl	8001780 <ADC_ReadChannels>
 8001744:	4603      	mov	r3, r0
 8001746:	80fb      	strh	r3, [r7, #6]
	return voltage;
 8001748:	88fb      	ldrh	r3, [r7, #6]
	//outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
	//return outvoltage;
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	08000004 	.word	0x08000004

08001758 <SYS_GetADC3>:

uint16_t SYS_GetADC3(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_3);
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <SYS_GetADC3+0x24>)
 8001768:	f000 f80a 	bl	8001780 <ADC_ReadChannels>
 800176c:	4603      	mov	r3, r0
 800176e:	80fb      	strh	r3, [r7, #6]
	return voltage;
 8001770:	88fb      	ldrh	r3, [r7, #6]
	//outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
	//return outvoltage;
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	0c000008 	.word	0x0c000008

08001780 <ADC_ReadChannels>:
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001798:	f7ff fe5a 	bl	8001450 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800179c:	481a      	ldr	r0, [pc, #104]	@ (8001808 <ADC_ReadChannels+0x88>)
 800179e:	f003 f83e 	bl	800481e <HAL_ADCEx_Calibration_Start>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80017a8:	f000 fcb6 	bl	8002118 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4619      	mov	r1, r3
 80017be:	4812      	ldr	r0, [pc, #72]	@ (8001808 <ADC_ReadChannels+0x88>)
 80017c0:	f002 fd4a 	bl	8004258 <HAL_ADC_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80017ca:	f000 fca5 	bl	8002118 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80017ce:	480e      	ldr	r0, [pc, #56]	@ (8001808 <ADC_ReadChannels+0x88>)
 80017d0:	f002 fc26 	bl	8004020 <HAL_ADC_Start>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80017da:	f000 fc9d 	bl	8002118 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	4809      	ldr	r0, [pc, #36]	@ (8001808 <ADC_ReadChannels+0x88>)
 80017e4:	f002 fc94 	bl	8004110 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80017e8:	4807      	ldr	r0, [pc, #28]	@ (8001808 <ADC_ReadChannels+0x88>)
 80017ea:	f002 fc5f 	bl	80040ac <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80017ee:	4806      	ldr	r0, [pc, #24]	@ (8001808 <ADC_ReadChannels+0x88>)
 80017f0:	f002 fd25 	bl	800423e <HAL_ADC_GetValue>
 80017f4:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80017f6:	4804      	ldr	r0, [pc, #16]	@ (8001808 <ADC_ReadChannels+0x88>)
 80017f8:	f002 fb86 	bl	8003f08 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80017fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000324 	.word	0x20000324

0800180c <LL_AHB1_GRP1_EnableClock>:
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001818:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800181a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001828:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001830:	68fb      	ldr	r3, [r7, #12]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001840:	2004      	movs	r0, #4
 8001842:	f7ff ffe3 	bl	800180c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff ffe0 	bl	800180c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2102      	movs	r1, #2
 8001850:	200b      	movs	r0, #11
 8001852:	f003 f98a 	bl	8004b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001856:	200b      	movs	r0, #11
 8001858:	f003 f9a1 	bl	8004b9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200c      	movs	r0, #12
 8001862:	f003 f982 	bl	8004b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001866:	200c      	movs	r0, #12
 8001868:	f003 f999 	bl	8004b9e <HAL_NVIC_EnableIRQ>

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800187c:	23ff      	movs	r3, #255	@ 0xff
 800187e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001886:	d311      	bcc.n	80018ac <FLASH_IF_Write+0x3c>
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <FLASH_IF_Write+0x48>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	029a      	lsls	r2, r3, #10
 800188e:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <FLASH_IF_Write+0x4c>)
 8001890:	4013      	ands	r3, r2
 8001892:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001896:	3b01      	subs	r3, #1
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4293      	cmp	r3, r2
 800189c:	d306      	bcc.n	80018ac <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f85a 	bl	800195c <FLASH_IF_INT_Write>
 80018a8:	4603      	mov	r3, r0
 80018aa:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80018ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	1fff75e0 	.word	0x1fff75e0
 80018bc:	03fffc00 	.word	0x03fffc00

080018c0 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80018cc:	23ff      	movs	r3, #255	@ 0xff
 80018ce:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80018d6:	d311      	bcc.n	80018fc <FLASH_IF_Read+0x3c>
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <FLASH_IF_Read+0x48>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	029a      	lsls	r2, r3, #10
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <FLASH_IF_Read+0x4c>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80018e6:	3b01      	subs	r3, #1
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d306      	bcc.n	80018fc <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f93a 	bl	8001b6c <FLASH_IF_INT_Read>
 80018f8:	4603      	mov	r3, r0
 80018fa:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80018fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	1fff75e0 	.word	0x1fff75e0
 800190c:	03fffc00 	.word	0x03fffc00

08001910 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800191a:	23ff      	movs	r3, #255	@ 0xff
 800191c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001924:	d310      	bcc.n	8001948 <FLASH_IF_Erase+0x38>
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <FLASH_IF_Erase+0x44>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	029a      	lsls	r2, r3, #10
 800192c:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <FLASH_IF_Erase+0x48>)
 800192e:	4013      	ands	r3, r2
 8001930:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001934:	3b01      	subs	r3, #1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4293      	cmp	r3, r2
 800193a:	d305      	bcc.n	8001948 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800193c:	6839      	ldr	r1, [r7, #0]
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f932 	bl	8001ba8 <FLASH_IF_INT_Erase>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	1fff75e0 	.word	0x1fff75e0
 8001958:	03fffc00 	.word	0x03fffc00

0800195c <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b090      	sub	sp, #64	@ 0x40
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00c      	beq.n	800199a <FLASH_IF_INT_Write+0x3e>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <FLASH_IF_INT_Write+0x3e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	2b00      	cmp	r3, #0
 800198e:	d104      	bne.n	800199a <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 800199a:	f06f 0305 	mvn.w	r3, #5
 800199e:	e0da      	b.n	8001b56 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80019a0:	f000 f992 	bl	8001cc8 <FLASH_IF_INT_Clear_Error>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 80019aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 80cf 	bne.w	8001b52 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80019b4:	f003 fd3e 	bl	8005434 <HAL_FLASH_Unlock>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 80c6 	bne.w	8001b4c <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 80019c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019c2:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80019c6:	4b66      	ldr	r3, [pc, #408]	@ (8001b60 <FLASH_IF_INT_Write+0x204>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0299      	lsls	r1, r3, #10
 80019cc:	4b65      	ldr	r3, [pc, #404]	@ (8001b64 <FLASH_IF_INT_Write+0x208>)
 80019ce:	400b      	ands	r3, r1
 80019d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	0adb      	lsrs	r3, r3, #11
 80019dc:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80019de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80019e8:	3b01      	subs	r3, #1
 80019ea:	4a5d      	ldr	r2, [pc, #372]	@ (8001b60 <FLASH_IF_INT_Write+0x204>)
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	0291      	lsls	r1, r2, #10
 80019f0:	4a5c      	ldr	r2, [pc, #368]	@ (8001b64 <FLASH_IF_INT_Write+0x208>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80019f8:	fb01 f202 	mul.w	r2, r1, r2
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	0ada      	lsrs	r2, r3, #11
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d905      	bls.n	8001a1a <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a14:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a1e:	e089      	b.n	8001b34 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a22:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001a26:	02db      	lsls	r3, r3, #11
 8001a28:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001a2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f925 	bl	8001c7c <FLASH_IF_INT_IsEmpty>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d031      	beq.n	8001a9c <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001a38:	4b4b      	ldr	r3, [pc, #300]	@ (8001b68 <FLASH_IF_INT_Write+0x20c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001a40:	23fa      	movs	r3, #250	@ 0xfa
 8001a42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001a46:	e07e      	b.n	8001b46 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001a48:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <FLASH_IF_INT_Write+0x20c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6939      	ldr	r1, [r7, #16]
 8001a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f88a 	bl	8001b6c <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001a58:	4b43      	ldr	r3, [pc, #268]	@ (8001b68 <FLASH_IF_INT_Write+0x20c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a62:	4413      	add	r3, r2
 8001a64:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f01a fbbe 	bl	801c1ec <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f896 	bl	8001ba8 <FLASH_IF_INT_Erase>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001a82:	23fe      	movs	r3, #254	@ 0xfe
 8001a84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001a88:	e05d      	b.n	8001b46 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001a8e:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <FLASH_IF_INT_Write+0x20c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001a94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	e005      	b.n	8001aa8 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 8001aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa2:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa6:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aac:	e026      	b.n	8001afc <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001aae:	6a3a      	ldr	r2, [r7, #32]
 8001ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab2:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001aba:	2001      	movs	r0, #1
 8001abc:	f003 fc76 	bl	80053ac <HAL_FLASH_Program>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d113      	bne.n	8001aee <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad0:	4413      	add	r3, r2
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	4299      	cmp	r1, r3
 8001ad8:	bf08      	it	eq
 8001ada:	4290      	cmpeq	r0, r2
 8001adc:	d003      	beq.n	8001ae6 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001ade:	23fc      	movs	r3, #252	@ 0xfc
 8001ae0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 8001ae4:	e00e      	b.n	8001b04 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	3308      	adds	r3, #8
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aec:	e003      	b.n	8001af6 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001aee:	23fc      	movs	r3, #252	@ 0xfc
 8001af0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001af4:	e006      	b.n	8001b04 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af8:	3308      	adds	r3, #8
 8001afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d3d4      	bcc.n	8001aae <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001b04:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d11b      	bne.n	8001b44 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001b0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b10:	4413      	add	r3, r2
 8001b12:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 8001b14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b18:	4413      	add	r3, r2
 8001b1a:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b26:	bf28      	it	cs
 8001b28:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001b2c:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b30:	3301      	adds	r3, #1
 8001b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	4413      	add	r3, r2
 8001b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f4ff af6f 	bcc.w	8001a20 <FLASH_IF_INT_Write+0xc4>
 8001b42:	e000      	b.n	8001b46 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001b44:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001b46:	f003 fc97 	bl	8005478 <HAL_FLASH_Lock>
 8001b4a:	e002      	b.n	8001b52 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001b4c:	23fb      	movs	r3, #251	@ 0xfb
 8001b4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001b52:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3740      	adds	r7, #64	@ 0x40
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	1fff75e0 	.word	0x1fff75e0
 8001b64:	03fffc00 	.word	0x03fffc00
 8001b68:	20000388 	.word	0x20000388

08001b6c <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <FLASH_IF_INT_Read+0x1c>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001b88:	f06f 0305 	mvn.w	r3, #5
 8001b8c:	e008      	b.n	8001ba0 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f01a fb28 	bl	801c1ec <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001bc8:	f06f 0305 	mvn.w	r3, #5
 8001bcc:	e04e      	b.n	8001c6c <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001bce:	f000 f87b 	bl	8001cc8 <FLASH_IF_INT_Clear_Error>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001bd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d144      	bne.n	8001c68 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001bde:	f003 fc29 	bl	8005434 <HAL_FLASH_Unlock>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d13d      	bne.n	8001c64 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001be8:	2302      	movs	r3, #2
 8001bea:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <FLASH_IF_INT_Erase+0xcc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0299      	lsls	r1, r3, #10
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <FLASH_IF_INT_Erase+0xd0>)
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001c14:	3b01      	subs	r3, #1
 8001c16:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <FLASH_IF_INT_Erase+0xcc>)
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	0291      	lsls	r1, r2, #10
 8001c1c:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <FLASH_IF_INT_Erase+0xd0>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c24:	fb01 f202 	mul.w	r2, r1, r2
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	0ada      	lsrs	r2, r3, #11
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001c34:	f107 0214 	add.w	r2, r7, #20
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fcfa 	bl	8005638 <HAL_FLASHEx_Erase>
 8001c44:	4603      	mov	r3, r0
 8001c46:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001c48:	7fbb      	ldrb	r3, [r7, #30]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001c4e:	7fbb      	ldrb	r3, [r7, #30]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d101      	bne.n	8001c58 <FLASH_IF_INT_Erase+0xb0>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e001      	b.n	8001c5c <FLASH_IF_INT_Erase+0xb4>
 8001c58:	f06f 0301 	mvn.w	r3, #1
 8001c5c:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001c5e:	f003 fc0b 	bl	8005478 <HAL_FLASH_Lock>
 8001c62:	e001      	b.n	8001c68 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001c64:	23fb      	movs	r3, #251	@ 0xfb
 8001c66:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001c68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	1fff75e0 	.word	0x1fff75e0
 8001c78:	03fffc00 	.word	0x03fffc00

08001c7c <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	e011      	b.n	8001cb4 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9a:	bf08      	it	eq
 8001c9c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001ca0:	d002      	beq.n	8001ca8 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
      break;
 8001ca6:	e009      	b.n	8001cbc <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3308      	adds	r3, #8
 8001cac:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d3e9      	bcc.n	8001c90 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001cce:	23fb      	movs	r3, #251	@ 0xfb
 8001cd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001cd2:	f003 fbaf 	bl	8005434 <HAL_FLASH_Unlock>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d110      	bne.n	8001cfe <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <FLASH_IF_INT_Clear_Error+0x44>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <FLASH_IF_INT_Clear_Error+0x44>)
 8001ce2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <FLASH_IF_INT_Clear_Error+0x44>)
 8001cea:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001cee:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001cf0:	f003 fbc2 	bl	8005478 <HAL_FLASH_Lock>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	58004000 	.word	0x58004000

08001d10 <LL_AHB2_GRP1_EnableClock>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d34:	68fb      	ldr	r3, [r7, #12]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d54:	2001      	movs	r0, #1
 8001d56:	f7ff ffdb 	bl	8001d10 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f7ff ffd8 	bl	8001d10 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d60:	2004      	movs	r0, #4
 8001d62:	f7ff ffd5 	bl	8001d10 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d66:	2080      	movs	r0, #128	@ 0x80
 8001d68:	f7ff ffd2 	bl	8001d10 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|VCC_OUT_EN_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f248 0131 	movw	r1, #32817	@ 0x8031
 8001d72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d76:	f003 ff61 	bl	8005c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d80:	483c      	ldr	r0, [pc, #240]	@ (8001e74 <MX_GPIO_Init+0x134>)
 8001d82:	f003 ff5b 	bl	8005c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_RE_GPIO_Port, RS485_RE_Pin, GPIO_PIN_SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2102      	movs	r1, #2
 8001d8a:	483b      	ldr	r0, [pc, #236]	@ (8001e78 <MX_GPIO_Init+0x138>)
 8001d8c:	f003 ff56 	bl	8005c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2101      	movs	r1, #1
 8001d94:	4838      	ldr	r0, [pc, #224]	@ (8001e78 <MX_GPIO_Init+0x138>)
 8001d96:	f003 ff51 	bl	8005c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA12 PA11 PA6 PA1
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_6|GPIO_PIN_1
 8001d9a:	f641 13c2 	movw	r3, #6594	@ 0x19c2
 8001d9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da0:	2303      	movs	r3, #3
 8001da2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001db0:	f003 fd16 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001db4:	f248 0330 	movw	r3, #32816	@ 0x8030
 8001db8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dce:	f003 fd07 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4822      	ldr	r0, [pc, #136]	@ (8001e74 <MX_GPIO_Init+0x134>)
 8001dea:	f003 fcf9 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB5 PB8 PB2
                           PB12 PB1 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_2
 8001dee:	f641 7326 	movw	r3, #7974	@ 0x1f26
 8001df2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df4:	2303      	movs	r3, #3
 8001df6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481c      	ldr	r0, [pc, #112]	@ (8001e74 <MX_GPIO_Init+0x134>)
 8001e02:	f003 fced 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC2 PC3 PC5
                           PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8001e06:	f242 037c 	movw	r3, #8316	@ 0x207c
 8001e0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4817      	ldr	r0, [pc, #92]	@ (8001e78 <MX_GPIO_Init+0x138>)
 8001e1a:	f003 fce1 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_EN_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_EN_Pin;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VCC_OUT_EN_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e36:	f003 fcd3 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_RE_Pin RS485_DE_Pin */
  GPIO_InitStruct.Pin = RS485_RE_Pin|RS485_DE_Pin;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480a      	ldr	r0, [pc, #40]	@ (8001e78 <MX_GPIO_Init+0x138>)
 8001e50:	f003 fcc6 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e54:	2308      	movs	r3, #8
 8001e56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <MX_GPIO_Init+0x13c>)
 8001e66:	f003 fcbb 	bl	80057e0 <HAL_GPIO_Init>

}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	48001c00 	.word	0x48001c00

08001e80 <LL_AHB2_GRP1_EnableClock>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <LL_APB1_GRP1_EnableClock>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ebc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ecc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f58 <MX_I2C1_Init+0x78>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001eec:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <MX_I2C1_Init+0x7c>)
 8001eee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 136;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001ef2:	2288      	movs	r2, #136	@ 0x88
 8001ef4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001efc:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f1a:	480e      	ldr	r0, [pc, #56]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001f1c:	f003 febe 	bl	8005c9c <HAL_I2C_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f26:	f000 f8f7 	bl	8002118 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001f2e:	f004 fc01 	bl	8006734 <HAL_I2CEx_ConfigAnalogFilter>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f38:	f000 f8ee 	bl	8002118 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_I2C1_Init+0x74>)
 8001f40:	f004 fc42 	bl	80067c8 <HAL_I2CEx_ConfigDigitalFilter>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f4a:	f000 f8e5 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000038c 	.word	0x2000038c
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	10805d88 	.word	0x10805d88

08001f60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b096      	sub	sp, #88	@ 0x58
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	2238      	movs	r2, #56	@ 0x38
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f01b fec1 	bl	801dd08 <memset>
  if(i2cHandle->Instance==I2C1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a21      	ldr	r2, [pc, #132]	@ (8002010 <HAL_I2C_MspInit+0xb0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d13a      	bne.n	8002006 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f90:	2340      	movs	r3, #64	@ 0x40
 8001f92:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f94:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001f98:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f005 fece 	bl	8007d40 <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001faa:	f000 f8b5 	bl	8002118 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f7ff ff66 	bl	8001e80 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f7ff ff63 	bl	8001e80 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = HDC_SDA_Pin;
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fbe:	2312      	movs	r3, #18
 8001fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SDA_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480f      	ldr	r0, [pc, #60]	@ (8002014 <HAL_I2C_MspInit+0xb4>)
 8001fd6:	f003 fc03 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HDC_SCL_Pin;
 8001fda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fde:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe0:	2312      	movs	r3, #18
 8001fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fec:	2304      	movs	r3, #4
 8001fee:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ff0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ffa:	f003 fbf1 	bl	80057e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ffe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002002:	f7ff ff55 	bl	8001eb0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002006:	bf00      	nop
 8002008:	3758      	adds	r7, #88	@ 0x58
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40005400 	.word	0x40005400
 8002014:	48000400 	.word	0x48000400

08002018 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002028:	f023 0218 	bic.w	r2, r3, #24
 800202c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002046:	f001 fbdd 	bl	8003804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800204a:	f000 f80b 	bl	8002064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800204e:	f7ff fe77 	bl	8001d40 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8002052:	f009 fa1f 	bl	800b494 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8002056:	f001 f84f 	bl	80030f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800205a:	f7ff ff41 	bl	8001ee0 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800205e:	f009 fa21 	bl	800b4a4 <MX_LoRaWAN_Process>
 8002062:	e7fc      	b.n	800205e <main+0x1c>

08002064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b09a      	sub	sp, #104	@ 0x68
 8002068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800206a:	f107 0320 	add.w	r3, r7, #32
 800206e:	2248      	movs	r2, #72	@ 0x48
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f01b fe48 	bl	801dd08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
 8002088:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800208a:	f004 fbe9 	bl	8006860 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff ffc2 	bl	8002018 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002094:	4b1f      	ldr	r3, [pc, #124]	@ (8002114 <SystemClock_Config+0xb0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <SystemClock_Config+0xb0>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <SystemClock_Config+0xb0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80020b0:	2324      	movs	r3, #36	@ 0x24
 80020b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020b4:	2381      	movs	r3, #129	@ 0x81
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020b8:	2301      	movs	r3, #1
 80020ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80020bc:	2300      	movs	r3, #0
 80020be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80020c0:	23b0      	movs	r3, #176	@ 0xb0
 80020c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c8:	f107 0320 	add.w	r3, r7, #32
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 ff13 	bl	8006ef8 <HAL_RCC_OscConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80020d8:	f000 f81e 	bl	8002118 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80020dc:	234f      	movs	r3, #79	@ 0x4f
 80020de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	2102      	movs	r1, #2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f005 fa7e 	bl	80075fc <HAL_RCC_ClockConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002106:	f000 f807 	bl	8002118 <Error_Handler>
  }
}
 800210a:	bf00      	nop
 800210c:	3768      	adds	r7, #104	@ 0x68
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	58000400 	.word	0x58000400

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <Error_Handler+0x8>

08002124 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <LL_APB1_GRP1_EnableClock>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002150:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002152:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4313      	orrs	r3, r2
 800215a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002160:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4013      	ands	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002168:	68fb      	ldr	r3, [r7, #12]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	@ 0x30
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	222c      	movs	r2, #44	@ 0x2c
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f01b fdc1 	bl	801dd08 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <MX_RTC_Init+0x9c>)
 8002188:	4a22      	ldr	r2, [pc, #136]	@ (8002214 <MX_RTC_Init+0xa0>)
 800218a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800218c:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <MX_RTC_Init+0x9c>)
 800218e:	221f      	movs	r2, #31
 8002190:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002192:	4b1f      	ldr	r3, [pc, #124]	@ (8002210 <MX_RTC_Init+0x9c>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002198:	4b1d      	ldr	r3, [pc, #116]	@ (8002210 <MX_RTC_Init+0x9c>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800219e:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <MX_RTC_Init+0x9c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <MX_RTC_Init+0x9c>)
 80021a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <MX_RTC_Init+0x9c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <MX_RTC_Init+0x9c>)
 80021b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021ba:	4815      	ldr	r0, [pc, #84]	@ (8002210 <MX_RTC_Init+0x9c>)
 80021bc:	f005 feda 	bl	8007f74 <HAL_RTC_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80021c6:	f7ff ffa7 	bl	8002118 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80021ca:	4811      	ldr	r0, [pc, #68]	@ (8002210 <MX_RTC_Init+0x9c>)
 80021cc:	f006 f9d0 	bl	8008570 <HAL_RTCEx_SetSSRU_IT>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80021d6:	f7ff ff9f 	bl	8002118 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80021e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80021ea:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80021ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <MX_RTC_Init+0x9c>)
 80021fa:	f005 ff3d 	bl	8008078 <HAL_RTC_SetAlarm_IT>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002204:	f7ff ff88 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	3730      	adds	r7, #48	@ 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200003e0 	.word	0x200003e0
 8002214:	40002800 	.word	0x40002800

08002218 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b090      	sub	sp, #64	@ 0x40
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	2238      	movs	r2, #56	@ 0x38
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f01b fd6d 	bl	801dd08 <memset>
  if(rtcHandle->Instance==RTC)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a16      	ldr	r2, [pc, #88]	@ (800228c <HAL_RTC_MspInit+0x74>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d125      	bne.n	8002284 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800223c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800223e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002242:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002244:	f107 0308 	add.w	r3, r7, #8
 8002248:	4618      	mov	r0, r3
 800224a:	f005 fd79 	bl	8007d40 <HAL_RCCEx_PeriphCLKConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002254:	f7ff ff60 	bl	8002118 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002258:	f7ff ff64 	bl	8002124 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800225c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002260:	f7ff ff70 	bl	8002144 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2002      	movs	r0, #2
 800226a:	f002 fc7e 	bl	8004b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800226e:	2002      	movs	r0, #2
 8002270:	f002 fc95 	bl	8004b9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	202a      	movs	r0, #42	@ 0x2a
 800227a:	f002 fc76 	bl	8004b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800227e:	202a      	movs	r0, #42	@ 0x2a
 8002280:	f002 fc8d 	bl	8004b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002284:	bf00      	nop
 8002286:	3740      	adds	r7, #64	@ 0x40
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40002800 	.word	0x40002800

08002290 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002296:	2201      	movs	r2, #1
 8002298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	58000400 	.word	0x58000400

080022a8 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80022c4:	f001 fabe 	bl	8003844 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80022c8:	f7ff ffe2 	bl	8002290 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f004 fb59 	bl	8006984 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80022da:	f001 fac1 	bl	8003860 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80022de:	f001 f941 	bl	8003564 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80022ea:	f001 faab 	bl	8003844 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80022ee:	2101      	movs	r1, #1
 80022f0:	2000      	movs	r0, #0
 80022f2:	f004 fac3 	bl	800687c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}

080022fa <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80022fe:	f001 faaf 	bl	8003860 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002316:	bf00      	nop
 8002318:	e7fd      	b.n	8002316 <NMI_Handler+0x4>

0800231a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231e:	bf00      	nop
 8002320:	e7fd      	b.n	800231e <HardFault_Handler+0x4>

08002322 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002326:	bf00      	nop
 8002328:	e7fd      	b.n	8002326 <MemManage_Handler+0x4>

0800232a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232e:	bf00      	nop
 8002330:	e7fd      	b.n	800232e <BusFault_Handler+0x4>

08002332 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002336:	bf00      	nop
 8002338:	e7fd      	b.n	8002336 <UsageFault_Handler+0x4>

0800233a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
	...

0800236c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002372:	f006 f939 	bl	80085e8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200003e0 	.word	0x200003e0

08002380 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002384:	4802      	ldr	r0, [pc, #8]	@ (8002390 <DMA1_Channel1_IRQHandler+0x10>)
 8002386:	f002 fea1 	bl	80050cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000055c 	.word	0x2000055c

08002394 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <DMA1_Channel2_IRQHandler+0x10>)
 800239a:	f002 fe97 	bl	80050cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200005bc 	.word	0x200005bc

080023a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023ac:	4802      	ldr	r0, [pc, #8]	@ (80023b8 <USART1_IRQHandler+0x10>)
 80023ae:	f006 ff75 	bl	800929c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000434 	.word	0x20000434

080023bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023c0:	4802      	ldr	r0, [pc, #8]	@ (80023cc <USART2_IRQHandler+0x10>)
 80023c2:	f006 ff6b 	bl	800929c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200004c8 	.word	0x200004c8

080023d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80023d4:	4802      	ldr	r0, [pc, #8]	@ (80023e0 <RTC_Alarm_IRQHandler+0x10>)
 80023d6:	f005 ffb7 	bl	8008348 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200003e0 	.word	0x200003e0

080023e4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80023e8:	4802      	ldr	r0, [pc, #8]	@ (80023f4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80023ea:	f006 fc6b 	bl	8008cc4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000418 	.word	0x20000418

080023f8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002404:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002414:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800241c:	68fb      	ldr	r3, [r7, #12]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <MX_SUBGHZ_Init+0x20>)
 800242e:	2208      	movs	r2, #8
 8002430:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <MX_SUBGHZ_Init+0x20>)
 8002434:	f006 f9c4 	bl	80087c0 <HAL_SUBGHZ_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800243e:	f7ff fe6b 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000418 	.word	0x20000418

0800244c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002454:	2001      	movs	r0, #1
 8002456:	f7ff ffcf 	bl	80023f8 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2032      	movs	r0, #50	@ 0x32
 8002460:	f002 fb83 	bl	8004b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002464:	2032      	movs	r0, #50	@ 0x32
 8002466:	f002 fb9a 	bl	8004b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002484:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800249c:	4b02      	ldr	r3, [pc, #8]	@ (80024a8 <LL_FLASH_GetUDN+0x10>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	1fff7580 	.word	0x1fff7580

080024ac <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <LL_FLASH_GetDeviceID+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	1fff7584 	.word	0x1fff7584

080024c4 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <LL_FLASH_GetSTCompanyID+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0a1b      	lsrs	r3, r3, #8
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	1fff7584 	.word	0x1fff7584

080024dc <sht40>:
#define SHT40_CMD_HEATER_01S_110MW	0x24
#define SHT40_CMD_HEATER_1S_20MW	0x1E
#define SHT40_CMD_HEATER_01S_20MW	0x15

uint32_t sht40(void)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b08f      	sub	sp, #60	@ 0x3c
 80024e0:	af02      	add	r7, sp, #8
	uint8_t tx_data[10]={0};
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	811a      	strh	r2, [r3, #8]
	uint8_t rx_data[10]={0};
 80024ee:	463b      	mov	r3, r7
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	811a      	strh	r2, [r3, #8]
	float t_ticks=0, checksum_t=0, rh_ticks=0, checksum_rh=0;
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	623b      	str	r3, [r7, #32]
	uint32_t t_degC=0, rh_pRH=0;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
	tx_data[0] = SHT40_CMD_HPR;
 8002518:	23fd      	movs	r3, #253	@ 0xfd
 800251a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, SHT40_ADR, tx_data, 1, 10);
 800251c:	f107 020c 	add.w	r2, r7, #12
 8002520:	230a      	movs	r3, #10
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2301      	movs	r3, #1
 8002526:	2188      	movs	r1, #136	@ 0x88
 8002528:	4841      	ldr	r0, [pc, #260]	@ (8002630 <sht40+0x154>)
 800252a:	f003 fc53 	bl	8005dd4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800252e:	200a      	movs	r0, #10
 8002530:	f000 fa06 	bl	8002940 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, (SHT40_ADR | 0x01), rx_data, 6, 10);
 8002534:	463a      	mov	r2, r7
 8002536:	230a      	movs	r3, #10
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2306      	movs	r3, #6
 800253c:	2189      	movs	r1, #137	@ 0x89
 800253e:	483c      	ldr	r0, [pc, #240]	@ (8002630 <sht40+0x154>)
 8002540:	f003 fd60 	bl	8006004 <HAL_I2C_Master_Receive>
	t_ticks = (float) rx_data[0] * 256 + (float) rx_data[1];
 8002544:	783b      	ldrb	r3, [r7, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fbbc 	bl	8000cc4 <__aeabi_ui2f>
 800254c:	4603      	mov	r3, r0
 800254e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fc0e 	bl	8000d74 <__aeabi_fmul>
 8002558:	4603      	mov	r3, r0
 800255a:	461c      	mov	r4, r3
 800255c:	787b      	ldrb	r3, [r7, #1]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fbb0 	bl	8000cc4 <__aeabi_ui2f>
 8002564:	4603      	mov	r3, r0
 8002566:	4619      	mov	r1, r3
 8002568:	4620      	mov	r0, r4
 800256a:	f7fe fafb 	bl	8000b64 <__addsf3>
 800256e:	4603      	mov	r3, r0
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
	checksum_t = (float) rx_data[2];
 8002572:	78bb      	ldrb	r3, [r7, #2]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fba5 	bl	8000cc4 <__aeabi_ui2f>
 800257a:	4603      	mov	r3, r0
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
	rh_ticks = (float) rx_data[3] * 256 + rx_data[4];
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fb9f 	bl	8000cc4 <__aeabi_ui2f>
 8002586:	4603      	mov	r3, r0
 8002588:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fbf1 	bl	8000d74 <__aeabi_fmul>
 8002592:	4603      	mov	r3, r0
 8002594:	461c      	mov	r4, r3
 8002596:	793b      	ldrb	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fb97 	bl	8000ccc <__aeabi_i2f>
 800259e:	4603      	mov	r3, r0
 80025a0:	4619      	mov	r1, r3
 80025a2:	4620      	mov	r0, r4
 80025a4:	f7fe fade 	bl	8000b64 <__addsf3>
 80025a8:	4603      	mov	r3, r0
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
	checksum_rh = (float) rx_data[5];
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fb88 	bl	8000cc4 <__aeabi_ui2f>
 80025b4:	4603      	mov	r3, r0
 80025b6:	623b      	str	r3, [r7, #32]
	t_degC = (-45 + 175 * t_ticks/65535) * 100;
 80025b8:	491e      	ldr	r1, [pc, #120]	@ (8002634 <sht40+0x158>)
 80025ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025bc:	f7fe fbda 	bl	8000d74 <__aeabi_fmul>
 80025c0:	4603      	mov	r3, r0
 80025c2:	491d      	ldr	r1, [pc, #116]	@ (8002638 <sht40+0x15c>)
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fc89 	bl	8000edc <__aeabi_fdiv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	491b      	ldr	r1, [pc, #108]	@ (800263c <sht40+0x160>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fac6 	bl	8000b60 <__aeabi_fsub>
 80025d4:	4603      	mov	r3, r0
 80025d6:	491a      	ldr	r1, [pc, #104]	@ (8002640 <sht40+0x164>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fbcb 	bl	8000d74 <__aeabi_fmul>
 80025de:	4603      	mov	r3, r0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fd3d 	bl	8001060 <__aeabi_f2uiz>
 80025e6:	4603      	mov	r3, r0
 80025e8:	61fb      	str	r3, [r7, #28]
	rh_pRH = (-6 + 125 * rh_ticks/65535) * 100;
 80025ea:	4916      	ldr	r1, [pc, #88]	@ (8002644 <sht40+0x168>)
 80025ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025ee:	f7fe fbc1 	bl	8000d74 <__aeabi_fmul>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4910      	ldr	r1, [pc, #64]	@ (8002638 <sht40+0x15c>)
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fc70 	bl	8000edc <__aeabi_fdiv>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4912      	ldr	r1, [pc, #72]	@ (8002648 <sht40+0x16c>)
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe faad 	bl	8000b60 <__aeabi_fsub>
 8002606:	4603      	mov	r3, r0
 8002608:	490d      	ldr	r1, [pc, #52]	@ (8002640 <sht40+0x164>)
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fbb2 	bl	8000d74 <__aeabi_fmul>
 8002610:	4603      	mov	r3, r0
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fd24 	bl	8001060 <__aeabi_f2uiz>
 8002618:	4603      	mov	r3, r0
 800261a:	61bb      	str	r3, [r7, #24]
	return (uint32_t)((t_degC << 16) | (rh_pRH & 0xFFFF));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	041a      	lsls	r2, r3, #16
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4313      	orrs	r3, r2
		rh_pRH = 100;
	if (rh_pRH < 0)
		rh_pRH = 0;
	*/

}
 8002626:	4618      	mov	r0, r3
 8002628:	3734      	adds	r7, #52	@ 0x34
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	2000038c 	.word	0x2000038c
 8002634:	432f0000 	.word	0x432f0000
 8002638:	477fff00 	.word	0x477fff00
 800263c:	42340000 	.word	0x42340000
 8002640:	42c80000 	.word	0x42c80000
 8002644:	42fa0000 	.word	0x42fa0000
 8002648:	40c00000 	.word	0x40c00000

0800264c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002650:	2000      	movs	r0, #0
 8002652:	f7ff ff0e 	bl	8002472 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002656:	f01a f889 	bl	801c76c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <SystemApp_Init+0x50>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002660:	f000 f98e 	bl	8002980 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002664:	f01a fb12 	bl	801cc8c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002668:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <SystemApp_Init+0x54>)
 800266a:	f01a fbbd 	bl	801cde8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <SystemApp_Init+0x58>)
 8002670:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002674:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002676:	2003      	movs	r0, #3
 8002678:	f01a fbc4 	bl	801ce04 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800267c:	f7fe ff7e 	bl	800157c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002680:	f000 f9be 	bl	8002a00 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002684:	f019 fd0c 	bl	801c0a0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002688:	2101      	movs	r1, #1
 800268a:	2001      	movs	r0, #1
 800268c:	f019 fd48 	bl	801c120 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002690:	2101      	movs	r1, #1
 8002692:	2001      	movs	r0, #1
 8002694:	f019 fd14 	bl	801c0c0 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000424 	.word	0x20000424
 80026a0:	08002879 	.word	0x08002879
 80026a4:	58004000 	.word	0x58004000

080026a8 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80026ac:	f019 fd68 	bl	801c180 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80026be:	f7fe ffdd 	bl	800167c <SYS_GetBatteryLevel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80026c6:	88bb      	ldrh	r3, [r7, #4]
 80026c8:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d902      	bls.n	80026d6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80026d0:	23fe      	movs	r3, #254	@ 0xfe
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	e014      	b.n	8002700 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80026d6:	88bb      	ldrh	r3, [r7, #4]
 80026d8:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80026dc:	d202      	bcs.n	80026e4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	71fb      	strb	r3, [r7, #7]
 80026e2:	e00d      	b.n	8002700 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80026e4:	88bb      	ldrh	r3, [r7, #4]
 80026e6:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80026ea:	461a      	mov	r2, r3
 80026ec:	4613      	mov	r3, r2
 80026ee:	01db      	lsls	r3, r3, #7
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	4a05      	ldr	r2, [pc, #20]	@ (800270c <GetBatteryLevel+0x58>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002700:	79fb      	ldrb	r3, [r7, #7]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	134679ad 	.word	0x134679ad

08002710 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b092      	sub	sp, #72	@ 0x48
 8002714:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f93c 	bl	800299c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fc74 	bl	8001014 <__aeabi_f2iz>
 800272c:	4603      	mov	r3, r0
 800272e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002732:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
}
 8002736:	4618      	mov	r0, r3
 8002738:	3748      	adds	r7, #72	@ 0x48
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800273e:	b590      	push	{r4, r7, lr}
 8002740:	b087      	sub	sp, #28
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800274a:	f7ff fea5 	bl	8002498 <LL_FLASH_GetUDN>
 800274e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d138      	bne.n	80027ca <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002758:	f001 f890 	bl	800387c <HAL_GetUIDw0>
 800275c:	4604      	mov	r4, r0
 800275e:	f001 f8a1 	bl	80038a4 <HAL_GetUIDw2>
 8002762:	4603      	mov	r3, r0
 8002764:	4423      	add	r3, r4
 8002766:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002768:	f001 f892 	bl	8003890 <HAL_GetUIDw1>
 800276c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	0e1a      	lsrs	r2, r3, #24
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3307      	adds	r3, #7
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	0c1a      	lsrs	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3306      	adds	r3, #6
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	0a1a      	lsrs	r2, r3, #8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3305      	adds	r3, #5
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0e1a      	lsrs	r2, r3, #24
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3303      	adds	r3, #3
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	0c1a      	lsrs	r2, r3, #16
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3302      	adds	r3, #2
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	0a1a      	lsrs	r2, r3, #8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3301      	adds	r3, #1
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80027c8:	e031      	b.n	800282e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3307      	adds	r3, #7
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	0a1a      	lsrs	r2, r3, #8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3306      	adds	r3, #6
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	0c1a      	lsrs	r2, r3, #16
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3305      	adds	r3, #5
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	0e1a      	lsrs	r2, r3, #24
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80027f8:	f7ff fe58 	bl	80024ac <LL_FLASH_GetDeviceID>
 80027fc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3303      	adds	r3, #3
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002808:	f7ff fe5c 	bl	80024c4 <LL_FLASH_GetSTCompanyID>
 800280c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3302      	adds	r3, #2
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	0a1a      	lsrs	r2, r3, #8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3301      	adds	r3, #1
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	0c1b      	lsrs	r3, r3, #16
 8002828:	b2da      	uxtb	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	701a      	strb	r2, [r3, #0]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd90      	pop	{r4, r7, pc}

08002836 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002836:	b590      	push	{r4, r7, lr}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800283e:	f7ff fe2b 	bl	8002498 <LL_FLASH_GetUDN>
 8002842:	4602      	mov	r2, r0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d10d      	bne.n	800286e <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002852:	f001 f813 	bl	800387c <HAL_GetUIDw0>
 8002856:	4604      	mov	r4, r0
 8002858:	f001 f81a 	bl	8003890 <HAL_GetUIDw1>
 800285c:	4603      	mov	r3, r0
 800285e:	405c      	eors	r4, r3
 8002860:	f001 f820 	bl	80038a4 <HAL_GetUIDw2>
 8002864:	4603      	mov	r3, r0
 8002866:	ea84 0203 	eor.w	r2, r4, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bd90      	pop	{r4, r7, pc}
	...

08002878 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af02      	add	r7, sp, #8
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	4618      	mov	r0, r3
 8002888:	f019 fd8a 	bl	801c3a0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002892:	9200      	str	r2, [sp, #0]
 8002894:	4a07      	ldr	r2, [pc, #28]	@ (80028b4 <TimestampNow+0x3c>)
 8002896:	2110      	movs	r1, #16
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f81d 	bl	80028d8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fd fcbe 	bl	8000220 <strlen>
 80028a4:	4603      	mov	r3, r0
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	0801ffa8 	.word	0x0801ffa8

080028b8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80028bc:	2101      	movs	r1, #1
 80028be:	2002      	movs	r0, #2
 80028c0:	f019 fbfe 	bl	801c0c0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80028cc:	2100      	movs	r1, #0
 80028ce:	2002      	movs	r0, #2
 80028d0:	f019 fbf6 	bl	801c0c0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80028d8:	b40c      	push	{r2, r3}
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	6839      	ldr	r1, [r7, #0]
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f01b f9fb 	bl	801dcec <vsniprintf>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002900:	b002      	add	sp, #8
 8002902:	4770      	bx	lr

08002904 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_GetTick+0x24>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800292a:	f000 f9f7 	bl	8002d1c <TIMER_IF_GetTimerValue>
 800292e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002930:	687b      	ldr	r3, [r7, #4]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000424 	.word	0x20000424

08002940 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fa6d 	bl	8002e2a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <LL_EXTI_EnableIT_32_63+0x24>)
 8002962:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002966:	4905      	ldr	r1, [pc, #20]	@ (800297c <LL_EXTI_EnableIT_32_63+0x24>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	58000800 	.word	0x58000800

08002980 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002984:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002988:	f7ff ffe6 	bl	8002958 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 800298c:	f000 ff94 	bl	80038b8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002990:	f000 ff98 	bl	80038c4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002994:	f000 ff9c 	bl	80038d0 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}

0800299c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <EnvSensors_Read+0x50>)
 80029a6:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <EnvSensors_Read+0x54>)
 80029aa:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <EnvSensors_Read+0x58>)
 80029ae:	60fb      	str	r3, [r7, #12]

  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 80029b0:	f7fe fdf2 	bl	8001598 <SYS_GetTemperatureLevel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	121b      	asrs	r3, r3, #8
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f986 	bl	8000ccc <__aeabi_i2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	613b      	str	r3, [r7, #16]

  sensor_data->humidity    = HUMIDITY_Value;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a07      	ldr	r2, [pc, #28]	@ (80029f8 <EnvSensors_Read+0x5c>)
 80029da:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a07      	ldr	r2, [pc, #28]	@ (80029fc <EnvSensors_Read+0x60>)
 80029e0:	611a      	str	r2, [r3, #16]

  return 0;
 80029e2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	42480000 	.word	0x42480000
 80029f0:	41900000 	.word	0x41900000
 80029f4:	447a0000 	.word	0x447a0000
 80029f8:	003e090d 	.word	0x003e090d
 80029fc:	000503ab 	.word	0x000503ab

08002a00 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002a0a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
	return 1;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <_kill>:

int _kill(int pid, int sig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a2e:	f01b f9bd 	bl	801ddac <__errno>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2216      	movs	r2, #22
 8002a36:	601a      	str	r2, [r3, #0]
	return -1;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_exit>:

void _exit (int status)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ffe7 	bl	8002a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a56:	bf00      	nop
 8002a58:	e7fd      	b.n	8002a56 <_exit+0x12>

08002a5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e00a      	b.n	8002a82 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a6c:	f3af 8000 	nop.w
 8002a70:	4601      	mov	r1, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	60ba      	str	r2, [r7, #8]
 8002a78:	b2ca      	uxtb	r2, r1
 8002a7a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	dbf0      	blt.n	8002a6c <_read+0x12>
	}

return len;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e009      	b.n	8002aba <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	60ba      	str	r2, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	dbf1      	blt.n	8002aa6 <_write+0x12>
	}
	return len;
 8002ac2:	687b      	ldr	r3, [r7, #4]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_close>:

int _close(int file)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af2:	605a      	str	r2, [r3, #4]
	return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <_isatty>:

int _isatty(int file)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	return 1;
 8002b08:	2301      	movs	r3, #1
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b34:	4a14      	ldr	r2, [pc, #80]	@ (8002b88 <_sbrk+0x5c>)
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <_sbrk+0x60>)
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b40:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <_sbrk+0x64>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b48:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <_sbrk+0x64>)
 8002b4a:	4a12      	ldr	r2, [pc, #72]	@ (8002b94 <_sbrk+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <_sbrk+0x64>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d207      	bcs.n	8002b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b5c:	f01b f926 	bl	801ddac <__errno>
 8002b60:	4603      	mov	r3, r0
 8002b62:	220c      	movs	r2, #12
 8002b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	e009      	b.n	8002b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b6c:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b72:	4b07      	ldr	r3, [pc, #28]	@ (8002b90 <_sbrk+0x64>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a05      	ldr	r2, [pc, #20]	@ (8002b90 <_sbrk+0x64>)
 8002b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20010000 	.word	0x20010000
 8002b8c:	00000400 	.word	0x00000400
 8002b90:	20000428 	.word	0x20000428
 8002b94:	20002690 	.word	0x20002690

08002b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
	...

08002bbc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002bc6:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <TIMER_IF_Init+0x5c>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01b      	beq.n	8002c0c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <TIMER_IF_Init+0x60>)
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002bdc:	f7ff faca 	bl	8002174 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002be0:	f000 f856 	bl	8002c90 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002be4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002be8:	480c      	ldr	r0, [pc, #48]	@ (8002c1c <TIMER_IF_Init+0x60>)
 8002bea:	f005 fb51 	bl	8008290 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <TIMER_IF_Init+0x60>)
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf4:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002bf6:	4809      	ldr	r0, [pc, #36]	@ (8002c1c <TIMER_IF_Init+0x60>)
 8002bf8:	f005 fc88 	bl	800850c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f000 f9d3 	bl	8002fa8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002c02:	f000 f85f 	bl	8002cc4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002c06:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <TIMER_IF_Init+0x5c>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000042c 	.word	0x2000042c
 8002c1c:	200003e0 	.word	0x200003e0

08002c20 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08e      	sub	sp, #56	@ 0x38
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002c2e:	f107 0308 	add.w	r3, r7, #8
 8002c32:	222c      	movs	r2, #44	@ 0x2c
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f01b f866 	bl	801dd08 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002c3c:	f000 f828 	bl	8002c90 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <TIMER_IF_StartTimer+0x68>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002c58:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c5c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c62:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4807      	ldr	r0, [pc, #28]	@ (8002c8c <TIMER_IF_StartTimer+0x6c>)
 8002c6e:	f005 fa03 	bl	8008078 <HAL_RTC_SetAlarm_IT>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002c78:	f7ff fa4e 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002c7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3738      	adds	r7, #56	@ 0x38
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000430 	.word	0x20000430
 8002c8c:	200003e0 	.word	0x200003e0

08002c90 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002c9a:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <TIMER_IF_StopTimer+0x2c>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ca0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ca4:	4806      	ldr	r0, [pc, #24]	@ (8002cc0 <TIMER_IF_StopTimer+0x30>)
 8002ca6:	f005 faf3 	bl	8008290 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002caa:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <TIMER_IF_StopTimer+0x30>)
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40002800 	.word	0x40002800
 8002cc0:	200003e0 	.word	0x200003e0

08002cc4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002cc8:	f000 f98e 	bl	8002fe8 <GetTimerTicks>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4a03      	ldr	r2, [pc, #12]	@ (8002cdc <TIMER_IF_SetTimerContext+0x18>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002cd2:	4b02      	ldr	r3, [pc, #8]	@ (8002cdc <TIMER_IF_SetTimerContext+0x18>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000430 	.word	0x20000430

08002ce0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002ce4:	4b02      	ldr	r3, [pc, #8]	@ (8002cf0 <TIMER_IF_GetTimerContext+0x10>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr
 8002cf0:	20000430 	.word	0x20000430

08002cf4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002cfe:	f000 f973 	bl	8002fe8 <GetTimerTicks>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002d0c:	687b      	ldr	r3, [r7, #4]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000430 	.word	0x20000430

08002d1c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <TIMER_IF_GetTimerValue+0x24>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002d2e:	f000 f95b 	bl	8002fe8 <GetTimerTicks>
 8002d32:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000042c 	.word	0x2000042c

08002d44 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002d4e:	2303      	movs	r3, #3
 8002d50:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002d52:	687b      	ldr	r3, [r7, #4]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002d5e:	b5b0      	push	{r4, r5, r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d66:	2100      	movs	r1, #0
 8002d68:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	460a      	mov	r2, r1
 8002d70:	4603      	mov	r3, r0
 8002d72:	0d95      	lsrs	r5, r2, #22
 8002d74:	0294      	lsls	r4, r2, #10
 8002d76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	f7fe f98d 	bl	80010a0 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bdb0      	pop	{r4, r5, r7, pc}

08002d98 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002d98:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002da2:	2100      	movs	r1, #0
 8002da4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	2000      	movs	r0, #0
 8002daa:	460c      	mov	r4, r1
 8002dac:	4605      	mov	r5, r0
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f04f 0a00 	mov.w	sl, #0
 8002db6:	f04f 0b00 	mov.w	fp, #0
 8002dba:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002dbe:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002dc2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002dc6:	4650      	mov	r0, sl
 8002dc8:	4659      	mov	r1, fp
 8002dca:	1b02      	subs	r2, r0, r4
 8002dcc:	eb61 0305 	sbc.w	r3, r1, r5
 8002dd0:	f04f 0000 	mov.w	r0, #0
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	0099      	lsls	r1, r3, #2
 8002dda:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002dde:	0090      	lsls	r0, r2, #2
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	eb12 0804 	adds.w	r8, r2, r4
 8002de8:	eb43 0905 	adc.w	r9, r3, r5
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e00:	4690      	mov	r8, r2
 8002e02:	4699      	mov	r9, r3
 8002e04:	4640      	mov	r0, r8
 8002e06:	4649      	mov	r1, r9
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	0a82      	lsrs	r2, r0, #10
 8002e12:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002e16:	0a8b      	lsrs	r3, r1, #10
 8002e18:	4613      	mov	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e28:	4770      	bx	lr

08002e2a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff93 	bl	8002d5e <TIMER_IF_Convert_ms2Tick>
 8002e38:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002e3a:	f000 f8d5 	bl	8002fe8 <GetTimerTicks>
 8002e3e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002e40:	e000      	b.n	8002e44 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002e42:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002e44:	f000 f8d0 	bl	8002fe8 <GetTimerTicks>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d8f6      	bhi.n	8002e42 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002e66:	f019 fdcf 	bl	801ca08 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002e7a:	f000 f8a5 	bl	8002fc8 <TIMER_IF_BkUp_Read_MSBticks>
 8002e7e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f88f 	bl	8002fa8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002e92:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e96:	b08c      	sub	sp, #48	@ 0x30
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002ea0:	f000 f8a2 	bl	8002fe8 <GetTimerTicks>
 8002ea4:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002ea6:	f000 f88f 	bl	8002fc8 <TIMER_IF_BkUp_Read_MSBticks>
 8002eaa:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	000b      	movs	r3, r1
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	4605      	mov	r5, r0
 8002eca:	eb12 0804 	adds.w	r8, r2, r4
 8002ece:	eb43 0905 	adc.w	r9, r3, r5
 8002ed2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002ed6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	0a82      	lsrs	r2, r0, #10
 8002ee4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ee8:	0a8b      	lsrs	r3, r1, #10
 8002eea:	4613      	mov	r3, r2
 8002eec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002efc:	f04f 0b00 	mov.w	fp, #0
 8002f00:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff46 	bl	8002d98 <TIMER_IF_Convert_Tick2ms>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3730      	adds	r7, #48	@ 0x30
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f20 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4803      	ldr	r0, [pc, #12]	@ (8002f3c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002f2e:	f005 fb7f 	bl	8008630 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200003e0 	.word	0x200003e0

08002f40 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	4803      	ldr	r0, [pc, #12]	@ (8002f5c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002f4e:	f005 fb6f 	bl	8008630 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200003e0 	.word	0x200003e0

08002f60 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4804      	ldr	r0, [pc, #16]	@ (8002f80 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002f6e:	f005 fb77 	bl	8008660 <HAL_RTCEx_BKUPRead>
 8002f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002f74:	687b      	ldr	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200003e0 	.word	0x200003e0

08002f84 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002f8e:	2101      	movs	r1, #1
 8002f90:	4804      	ldr	r0, [pc, #16]	@ (8002fa4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002f92:	f005 fb65 	bl	8008660 <HAL_RTCEx_BKUPRead>
 8002f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002f98:	687b      	ldr	r3, [r7, #4]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200003e0 	.word	0x200003e0

08002fa8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4803      	ldr	r0, [pc, #12]	@ (8002fc4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002fb6:	f005 fb3b 	bl	8008630 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200003e0 	.word	0x200003e0

08002fc8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4804      	ldr	r0, [pc, #16]	@ (8002fe4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002fd2:	f005 fb45 	bl	8008660 <HAL_RTCEx_BKUPRead>
 8002fd6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002fd8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200003e0 	.word	0x200003e0

08002fe8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002fee:	480b      	ldr	r0, [pc, #44]	@ (800301c <GetTimerTicks+0x34>)
 8002ff0:	f7ff fdd8 	bl	8002ba4 <LL_RTC_TIME_GetSubSecond>
 8002ff4:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002ff6:	e003      	b.n	8003000 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ff8:	4808      	ldr	r0, [pc, #32]	@ (800301c <GetTimerTicks+0x34>)
 8002ffa:	f7ff fdd3 	bl	8002ba4 <LL_RTC_TIME_GetSubSecond>
 8002ffe:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003000:	4806      	ldr	r0, [pc, #24]	@ (800301c <GetTimerTicks+0x34>)
 8003002:	f7ff fdcf 	bl	8002ba4 <LL_RTC_TIME_GetSubSecond>
 8003006:	4602      	mov	r2, r0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4293      	cmp	r3, r2
 800300c:	d1f4      	bne.n	8002ff8 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40002800 	.word	0x40002800

08003020 <LL_AHB2_GRP1_EnableClock>:
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800302e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800303c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003044:	68fb      	ldr	r3, [r7, #12]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <LL_APB1_GRP1_EnableClock>:
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800305e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4313      	orrs	r3, r2
 8003066:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003074:	68fb      	ldr	r3, [r7, #12]
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <LL_APB1_GRP1_DisableClock>:
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800308c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	43db      	mvns	r3, r3
 8003092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003096:	4013      	ands	r3, r2
 8003098:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <LL_APB2_GRP1_EnableClock>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030c8:	68fb      	ldr	r3, [r7, #12]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <LL_APB2_GRP1_DisableClock>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ea:	4013      	ands	r3, r2
 80030ec:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030fc:	4b22      	ldr	r3, [pc, #136]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 80030fe:	4a23      	ldr	r2, [pc, #140]	@ (800318c <MX_USART2_UART_Init+0x94>)
 8003100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003102:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003104:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800310a:	4b1f      	ldr	r3, [pc, #124]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003110:	4b1d      	ldr	r3, [pc, #116]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003116:	4b1c      	ldr	r3, [pc, #112]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800311c:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 800311e:	220c      	movs	r2, #12
 8003120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003122:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003128:	4b17      	ldr	r3, [pc, #92]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800312e:	4b16      	ldr	r3, [pc, #88]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003130:	2200      	movs	r2, #0
 8003132:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003134:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003136:	2200      	movs	r2, #0
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800313a:	4b13      	ldr	r3, [pc, #76]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 800313c:	2200      	movs	r2, #0
 800313e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003140:	4811      	ldr	r0, [pc, #68]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003142:	f005 ff8e 	bl	8009062 <HAL_UART_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800314c:	f7fe ffe4 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003150:	2100      	movs	r1, #0
 8003152:	480d      	ldr	r0, [pc, #52]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003154:	f008 f8b4 	bl	800b2c0 <HAL_UARTEx_SetTxFifoThreshold>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800315e:	f7fe ffdb 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003162:	2100      	movs	r1, #0
 8003164:	4808      	ldr	r0, [pc, #32]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003166:	f008 f8e9 	bl	800b33c <HAL_UARTEx_SetRxFifoThreshold>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003170:	f7fe ffd2 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003174:	4804      	ldr	r0, [pc, #16]	@ (8003188 <MX_USART2_UART_Init+0x90>)
 8003176:	f008 f86b 	bl	800b250 <HAL_UARTEx_DisableFifoMode>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003180:	f7fe ffca 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200004c8 	.word	0x200004c8
 800318c:	40004400 	.word	0x40004400

08003190 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b096      	sub	sp, #88	@ 0x58
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	2238      	movs	r2, #56	@ 0x38
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f01a fda9 	bl	801dd08 <memset>
  if(uartHandle->Instance==USART1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a68      	ldr	r2, [pc, #416]	@ (800335c <HAL_UART_MspInit+0x1cc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d16c      	bne.n	800329a <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031c0:	2301      	movs	r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031c4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80031c8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	4618      	mov	r0, r3
 80031d0:	f004 fdb6 	bl	8007d40 <HAL_RCCEx_PeriphCLKConfig>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80031da:	f7fe ff9d 	bl	8002118 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031de:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80031e2:	f7ff ff5f 	bl	80030a4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7ff ff1a 	bl	8003020 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ec:	2002      	movs	r0, #2
 80031ee:	f7ff ff17 	bl	8003020 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 80031f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031f6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003200:	2303      	movs	r3, #3
 8003202:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003204:	2307      	movs	r3, #7
 8003206:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8003208:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800320c:	4619      	mov	r1, r3
 800320e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003212:	f002 fae5 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8003216:	2340      	movs	r3, #64	@ 0x40
 8003218:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003226:	2307      	movs	r3, #7
 8003228:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 800322a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800322e:	4619      	mov	r1, r3
 8003230:	484b      	ldr	r0, [pc, #300]	@ (8003360 <HAL_UART_MspInit+0x1d0>)
 8003232:	f002 fad5 	bl	80057e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003236:	4b4b      	ldr	r3, [pc, #300]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 8003238:	4a4b      	ldr	r2, [pc, #300]	@ (8003368 <HAL_UART_MspInit+0x1d8>)
 800323a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800323c:	4b49      	ldr	r3, [pc, #292]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 800323e:	2212      	movs	r2, #18
 8003240:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003242:	4b48      	ldr	r3, [pc, #288]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 8003244:	2210      	movs	r2, #16
 8003246:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003248:	4b46      	ldr	r3, [pc, #280]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800324e:	4b45      	ldr	r3, [pc, #276]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 8003250:	2280      	movs	r2, #128	@ 0x80
 8003252:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003254:	4b43      	ldr	r3, [pc, #268]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 8003256:	2200      	movs	r2, #0
 8003258:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800325a:	4b42      	ldr	r3, [pc, #264]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003260:	4b40      	ldr	r3, [pc, #256]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 8003262:	2200      	movs	r2, #0
 8003264:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003266:	4b3f      	ldr	r3, [pc, #252]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 8003268:	2200      	movs	r2, #0
 800326a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800326c:	483d      	ldr	r0, [pc, #244]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 800326e:	f001 fcb3 	bl	8004bd8 <HAL_DMA_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8003278:	f7fe ff4e 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a39      	ldr	r2, [pc, #228]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 8003280:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003282:	4a38      	ldr	r2, [pc, #224]	@ (8003364 <HAL_UART_MspInit+0x1d4>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2102      	movs	r1, #2
 800328c:	2024      	movs	r0, #36	@ 0x24
 800328e:	f001 fc6c 	bl	8004b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003292:	2024      	movs	r0, #36	@ 0x24
 8003294:	f001 fc83 	bl	8004b9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003298:	e05c      	b.n	8003354 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a33      	ldr	r2, [pc, #204]	@ (800336c <HAL_UART_MspInit+0x1dc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d157      	bne.n	8003354 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032a4:	2302      	movs	r3, #2
 80032a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032a8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80032ac:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	4618      	mov	r0, r3
 80032b4:	f004 fd44 	bl	8007d40 <HAL_RCCEx_PeriphCLKConfig>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80032be:	f7fe ff2b 	bl	8002118 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80032c6:	f7ff fec3 	bl	8003050 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	2001      	movs	r0, #1
 80032cc:	f7ff fea8 	bl	8003020 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80032d0:	230c      	movs	r3, #12
 80032d2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032d8:	2301      	movs	r3, #1
 80032da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032dc:	2300      	movs	r3, #0
 80032de:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032e0:	2307      	movs	r3, #7
 80032e2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032e8:	4619      	mov	r1, r3
 80032ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ee:	f002 fa77 	bl	80057e0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80032f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 80032f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <HAL_UART_MspInit+0x1e4>)
 80032f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80032f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 80032fa:	2214      	movs	r2, #20
 80032fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 8003300:	2210      	movs	r2, #16
 8003302:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003304:	4b1a      	ldr	r3, [pc, #104]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 8003306:	2200      	movs	r2, #0
 8003308:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800330a:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 800330c:	2280      	movs	r2, #128	@ 0x80
 800330e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003310:	4b17      	ldr	r3, [pc, #92]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 8003312:	2200      	movs	r2, #0
 8003314:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003316:	4b16      	ldr	r3, [pc, #88]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003322:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 8003324:	2200      	movs	r2, #0
 8003326:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003328:	4811      	ldr	r0, [pc, #68]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 800332a:	f001 fc55 	bl	8004bd8 <HAL_DMA_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003334:	f7fe fef0 	bl	8002118 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0d      	ldr	r2, [pc, #52]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 800333c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800333e:	4a0c      	ldr	r2, [pc, #48]	@ (8003370 <HAL_UART_MspInit+0x1e0>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	2025      	movs	r0, #37	@ 0x25
 800334a:	f001 fc0e 	bl	8004b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800334e:	2025      	movs	r0, #37	@ 0x25
 8003350:	f001 fc25 	bl	8004b9e <HAL_NVIC_EnableIRQ>
}
 8003354:	bf00      	nop
 8003356:	3758      	adds	r7, #88	@ 0x58
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40013800 	.word	0x40013800
 8003360:	48000400 	.word	0x48000400
 8003364:	2000055c 	.word	0x2000055c
 8003368:	40020008 	.word	0x40020008
 800336c:	40004400 	.word	0x40004400
 8003370:	200005bc 	.word	0x200005bc
 8003374:	4002001c 	.word	0x4002001c

08003378 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a19      	ldr	r2, [pc, #100]	@ (80033ec <HAL_UART_MspDeInit+0x74>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d116      	bne.n	80033b8 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800338a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800338e:	f7ff fea1 	bl	80030d4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(RS485_RX_GPIO_Port, RS485_RX_Pin);
 8003392:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800339a:	f002 fb81 	bl	8005aa0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(RS485_TX_GPIO_Port, RS485_TX_Pin);
 800339e:	2140      	movs	r1, #64	@ 0x40
 80033a0:	4813      	ldr	r0, [pc, #76]	@ (80033f0 <HAL_UART_MspDeInit+0x78>)
 80033a2:	f002 fb7d 	bl	8005aa0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 fcbc 	bl	8004d28 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80033b0:	2024      	movs	r0, #36	@ 0x24
 80033b2:	f001 fc02 	bl	8004bba <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80033b6:	e015      	b.n	80033e4 <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0d      	ldr	r2, [pc, #52]	@ (80033f4 <HAL_UART_MspDeInit+0x7c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d110      	bne.n	80033e4 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 80033c2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80033c6:	f7ff fe5b 	bl	8003080 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80033ca:	210c      	movs	r1, #12
 80033cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033d0:	f002 fb66 	bl	8005aa0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fca5 	bl	8004d28 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80033de:	2025      	movs	r0, #37	@ 0x25
 80033e0:	f001 fbeb 	bl	8004bba <HAL_NVIC_DisableIRQ>
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40013800 	.word	0x40013800
 80033f0:	48000400 	.word	0x48000400
 80033f4:	40004400 	.word	0x40004400

080033f8 <LL_APB1_GRP1_ForceReset>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4313      	orrs	r3, r2
 800340e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <LL_APB1_GRP1_ReleaseReset>:
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	43db      	mvns	r3, r3
 800342c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003430:	4013      	ands	r3, r2
 8003432:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
	...

08003440 <LL_EXTI_EnableIT_0_31>:
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <LL_EXTI_EnableIT_0_31+0x24>)
 800344a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800344e:	4905      	ldr	r1, [pc, #20]	@ (8003464 <LL_EXTI_EnableIT_0_31+0x24>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	58000800 	.word	0x58000800

08003468 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003470:	4a07      	ldr	r2, [pc, #28]	@ (8003490 <vcom_Init+0x28>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003476:	f7fe f9e1 	bl	800183c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800347a:	f7ff fe3d 	bl	80030f8 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800347e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003482:	f7ff ffdd 	bl	8003440 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003486:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000620 	.word	0x20000620

08003494 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8003498:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800349c:	f7ff ffac 	bl	80033f8 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 80034a0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80034a4:	f7ff ffb9 	bl	800341a <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80034a8:	4804      	ldr	r0, [pc, #16]	@ (80034bc <vcom_DeInit+0x28>)
 80034aa:	f7ff ff65 	bl	8003378 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80034ae:	200f      	movs	r0, #15
 80034b0:	f001 fb83 	bl	8004bba <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80034b4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200004c8 	.word	0x200004c8

080034c0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80034cc:	887b      	ldrh	r3, [r7, #2]
 80034ce:	461a      	mov	r2, r3
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4804      	ldr	r0, [pc, #16]	@ (80034e4 <vcom_Trace_DMA+0x24>)
 80034d4:	f005 fe62 	bl	800919c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80034d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200004c8 	.word	0x200004c8

080034e8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80034f0:	4a19      	ldr	r2, [pc, #100]	@ (8003558 <vcom_ReceiveInit+0x70>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80034f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034fa:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003504:	4815      	ldr	r0, [pc, #84]	@ (800355c <vcom_ReceiveInit+0x74>)
 8003506:	f007 fe16 	bl	800b136 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800350a:	bf00      	nop
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <vcom_ReceiveInit+0x74>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800351a:	d0f7      	beq.n	800350c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800351c:	bf00      	nop
 800351e:	4b0f      	ldr	r3, [pc, #60]	@ (800355c <vcom_ReceiveInit+0x74>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003528:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800352c:	d1f7      	bne.n	800351e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800352e:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <vcom_ReceiveInit+0x74>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	4b09      	ldr	r3, [pc, #36]	@ (800355c <vcom_ReceiveInit+0x74>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800353c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800353e:	4807      	ldr	r0, [pc, #28]	@ (800355c <vcom_ReceiveInit+0x74>)
 8003540:	f007 fe54 	bl	800b1ec <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8003544:	2201      	movs	r2, #1
 8003546:	4906      	ldr	r1, [pc, #24]	@ (8003560 <vcom_ReceiveInit+0x78>)
 8003548:	4804      	ldr	r0, [pc, #16]	@ (800355c <vcom_ReceiveInit+0x74>)
 800354a:	f005 fddb 	bl	8009104 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800354e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000624 	.word	0x20000624
 800355c:	200004c8 	.word	0x200004c8
 8003560:	2000061c 	.word	0x2000061c

08003564 <vcom_Resume>:

void vcom_Resume(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003568:	4808      	ldr	r0, [pc, #32]	@ (800358c <vcom_Resume+0x28>)
 800356a:	f005 fd7a 	bl	8009062 <HAL_UART_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003574:	f7fe fdd0 	bl	8002118 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003578:	4805      	ldr	r0, [pc, #20]	@ (8003590 <vcom_Resume+0x2c>)
 800357a:	f001 fb2d 	bl	8004bd8 <HAL_DMA_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003584:	f7fe fdc8 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200004c8 	.word	0x200004c8
 8003590:	200005bc 	.word	0x200005bc

08003594 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a05      	ldr	r2, [pc, #20]	@ (80035b8 <HAL_UART_TxCpltCallback+0x24>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d103      	bne.n	80035ae <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80035a6:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_UART_TxCpltCallback+0x28>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2000      	movs	r0, #0
 80035ac:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40004400 	.word	0x40004400
 80035bc:	20000620 	.word	0x20000620

080035c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003604 <HAL_UART_RxCpltCallback+0x44>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d113      	bne.n	80035fa <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <HAL_UART_RxCpltCallback+0x48>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_UART_RxCpltCallback+0x30>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80035e4:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <HAL_UART_RxCpltCallback+0x48>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2101      	movs	r1, #1
 80035ec:	4807      	ldr	r0, [pc, #28]	@ (800360c <HAL_UART_RxCpltCallback+0x4c>)
 80035ee:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80035f0:	2201      	movs	r2, #1
 80035f2:	4906      	ldr	r1, [pc, #24]	@ (800360c <HAL_UART_RxCpltCallback+0x4c>)
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f005 fd85 	bl	8009104 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40004400 	.word	0x40004400
 8003608:	20000624 	.word	0x20000624
 800360c:	2000061c 	.word	0x2000061c

08003610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003610:	480d      	ldr	r0, [pc, #52]	@ (8003648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003612:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003614:	f7ff fac0 	bl	8002b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003618:	480c      	ldr	r0, [pc, #48]	@ (800364c <LoopForever+0x6>)
  ldr r1, =_edata
 800361a:	490d      	ldr	r1, [pc, #52]	@ (8003650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800361c:	4a0d      	ldr	r2, [pc, #52]	@ (8003654 <LoopForever+0xe>)
  movs r3, #0
 800361e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003620:	e002      	b.n	8003628 <LoopCopyDataInit>

08003622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003626:	3304      	adds	r3, #4

08003628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800362a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800362c:	d3f9      	bcc.n	8003622 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362e:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003630:	4c0a      	ldr	r4, [pc, #40]	@ (800365c <LoopForever+0x16>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003634:	e001      	b.n	800363a <LoopFillZerobss>

08003636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003638:	3204      	adds	r2, #4

0800363a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800363a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800363c:	d3fb      	bcc.n	8003636 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800363e:	f01a fbbb 	bl	801ddb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003642:	f7fe fcfe 	bl	8002042 <main>

08003646 <LoopForever>:

LoopForever:
    b LoopForever
 8003646:	e7fe      	b.n	8003646 <LoopForever>
  ldr   r0, =_estack
 8003648:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800364c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003650:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8003654:	0802128c 	.word	0x0802128c
  ldr r2, =_sbss
 8003658:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 800365c:	2000268c 	.word	0x2000268c

08003660 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003660:	e7fe      	b.n	8003660 <ADC_IRQHandler>

08003662 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	60da      	str	r2, [r3, #12]
 8003674:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003676:	2310      	movs	r3, #16
 8003678:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
 800367c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	4619      	mov	r1, r3
 800368a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800368e:	f002 f8a7 	bl	80057e0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003692:	2320      	movs	r3, #32
 8003694:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	4619      	mov	r1, r3
 800369a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800369e:	f002 f89f 	bl	80057e0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80036a2:	2200      	movs	r2, #0
 80036a4:	2120      	movs	r1, #32
 80036a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036aa:	f002 fac7 	bl	8005c3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80036ae:	2200      	movs	r2, #0
 80036b0:	2110      	movs	r1, #16
 80036b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036b6:	f002 fac1 	bl	8005c3c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d83f      	bhi.n	8003754 <BSP_RADIO_ConfigRFSwitch+0x90>
 80036d4:	a201      	add	r2, pc, #4	@ (adr r2, 80036dc <BSP_RADIO_ConfigRFSwitch+0x18>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	08003707 	.word	0x08003707
 80036e4:	08003721 	.word	0x08003721
 80036e8:	0800373b 	.word	0x0800373b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80036ec:	2200      	movs	r2, #0
 80036ee:	2110      	movs	r1, #16
 80036f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036f4:	f002 faa2 	bl	8005c3c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80036f8:	2200      	movs	r2, #0
 80036fa:	2120      	movs	r1, #32
 80036fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003700:	f002 fa9c 	bl	8005c3c <HAL_GPIO_WritePin>
      break;      
 8003704:	e027      	b.n	8003756 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003706:	2201      	movs	r2, #1
 8003708:	2110      	movs	r1, #16
 800370a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800370e:	f002 fa95 	bl	8005c3c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003712:	2200      	movs	r2, #0
 8003714:	2120      	movs	r1, #32
 8003716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800371a:	f002 fa8f 	bl	8005c3c <HAL_GPIO_WritePin>
      break;
 800371e:	e01a      	b.n	8003756 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003720:	2201      	movs	r2, #1
 8003722:	2110      	movs	r1, #16
 8003724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003728:	f002 fa88 	bl	8005c3c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800372c:	2201      	movs	r2, #1
 800372e:	2120      	movs	r1, #32
 8003730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003734:	f002 fa82 	bl	8005c3c <HAL_GPIO_WritePin>
      break;
 8003738:	e00d      	b.n	8003756 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800373a:	2200      	movs	r2, #0
 800373c:	2110      	movs	r1, #16
 800373e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003742:	f002 fa7b 	bl	8005c3c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003746:	2201      	movs	r2, #1
 8003748:	2120      	movs	r1, #32
 800374a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800374e:	f002 fa75 	bl	8005c3c <HAL_GPIO_WritePin>
      break;
 8003752:	e000      	b.n	8003756 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003754:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003764:	2302      	movs	r3, #2
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800376e:	b480      	push	{r7}
 8003770:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003772:	2301      	movs	r3, #1
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003780:	2301      	movs	r3, #1
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800379a:	230f      	movs	r3, #15
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e001      	b.n	80037a4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80037a0:	2316      	movs	r3, #22
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80037a4:	68fb      	ldr	r3, [r7, #12]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80037b4:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a03      	ldr	r2, [pc, #12]	@ (80037c8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6053      	str	r3, [r2, #4]
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	e0042000 	.word	0xe0042000

080037cc <LL_DBGMCU_EnableDBGStopMode>:
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80037d0:	4b04      	ldr	r3, [pc, #16]	@ (80037e4 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a03      	ldr	r2, [pc, #12]	@ (80037e4 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80037d6:	f043 0302 	orr.w	r3, r3, #2
 80037da:	6053      	str	r3, [r2, #4]
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	e0042000 	.word	0xe0042000

080037e8 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80037ec:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a03      	ldr	r2, [pc, #12]	@ (8003800 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	6053      	str	r3, [r2, #4]
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	e0042000 	.word	0xe0042000

08003804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800380e:	2003      	movs	r0, #3
 8003810:	f001 f9a0 	bl	8004b54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003814:	f004 f8b6 	bl	8007984 <HAL_RCC_GetHCLKFreq>
 8003818:	4603      	mov	r3, r0
 800381a:	4a09      	ldr	r2, [pc, #36]	@ (8003840 <HAL_Init+0x3c>)
 800381c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800381e:	200f      	movs	r0, #15
 8003820:	f7ff f870 	bl	8002904 <HAL_InitTick>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	71fb      	strb	r3, [r7, #7]
 800382e:	e001      	b.n	8003834 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003830:	f7fe fd69 	bl	8002306 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003834:	79fb      	ldrb	r3, [r7, #7]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000000 	.word	0x20000000

08003844 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003848:	4b04      	ldr	r3, [pc, #16]	@ (800385c <HAL_SuspendTick+0x18>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a03      	ldr	r2, [pc, #12]	@ (800385c <HAL_SuspendTick+0x18>)
 800384e:	f023 0302 	bic.w	r3, r3, #2
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	e000e010 	.word	0xe000e010

08003860 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003864:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <HAL_ResumeTick+0x18>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a03      	ldr	r2, [pc, #12]	@ (8003878 <HAL_ResumeTick+0x18>)
 800386a:	f043 0302 	orr.w	r3, r3, #2
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	e000e010 	.word	0xe000e010

0800387c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003880:	4b02      	ldr	r3, [pc, #8]	@ (800388c <HAL_GetUIDw0+0x10>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	1fff7590 	.word	0x1fff7590

08003890 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003894:	4b02      	ldr	r3, [pc, #8]	@ (80038a0 <HAL_GetUIDw1+0x10>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	1fff7594 	.word	0x1fff7594

080038a4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80038a8:	4b02      	ldr	r3, [pc, #8]	@ (80038b4 <HAL_GetUIDw2+0x10>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	1fff7598 	.word	0x1fff7598

080038b8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80038bc:	f7ff ff78 	bl	80037b0 <LL_DBGMCU_EnableDBGSleepMode>
}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80038c8:	f7ff ff80 	bl	80037cc <LL_DBGMCU_EnableDBGStopMode>
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80038d4:	f7ff ff88 	bl	80037e8 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80038d8:	bf00      	nop
 80038da:	bd80      	pop	{r7, pc}

080038dc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2107      	movs	r1, #7
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	401a      	ands	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	431a      	orrs	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr

08003956 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2107      	movs	r1, #7
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	210f      	movs	r1, #15
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	401a      	ands	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0e9b      	lsrs	r3, r3, #26
 80039ce:	f003 010f 	and.w	r1, r3, #15
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	431a      	orrs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a24:	43db      	mvns	r3, r3
 8003a26:	401a      	ands	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	0219      	lsls	r1, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	400b      	ands	r3, r1
 8003a56:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003a5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr

08003a6e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003a7e:	f023 0317 	bic.w	r3, r3, #23
 8003a82:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003aa4:	f023 0317 	bic.w	r3, r3, #23
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6093      	str	r3, [r2, #8]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aca:	d101      	bne.n	8003ad0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003aec:	f023 0317 	bic.w	r3, r3, #23
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b12:	f023 0317 	bic.w	r3, r3, #23
 8003b16:	f043 0202 	orr.w	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <LL_ADC_IsEnabled+0x18>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <LL_ADC_IsEnabled+0x1a>
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d101      	bne.n	8003b64 <LL_ADC_IsDisableOngoing+0x18>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <LL_ADC_IsDisableOngoing+0x1a>
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b80:	f023 0317 	bic.w	r3, r3, #23
 8003b84:	f043 0204 	orr.w	r2, r3, #4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ba6:	f023 0317 	bic.w	r3, r3, #23
 8003baa:	f043 0210 	orr.w	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d101      	bne.n	8003bd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e17e      	b.n	8003f00 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fd fc6b 	bl	80014ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff44 	bl	8003ab6 <LL_ADC_IsInternalRegulatorEnabled>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d115      	bne.n	8003c60 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff18 	bl	8003a6e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c3e:	4b9e      	ldr	r3, [pc, #632]	@ (8003eb8 <HAL_ADC_Init+0x2d8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	4a9d      	ldr	r2, [pc, #628]	@ (8003ebc <HAL_ADC_Init+0x2dc>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c52:	e002      	b.n	8003c5a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f9      	bne.n	8003c54 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff26 	bl	8003ab6 <LL_ADC_IsInternalRegulatorEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10d      	bne.n	8003c8c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	f043 0210 	orr.w	r2, r3, #16
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c80:	f043 0201 	orr.w	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff93 	bl	8003bbc <LL_ADC_REG_IsConversionOngoing>
 8003c96:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 8124 	bne.w	8003eee <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f040 8120 	bne.w	8003eee <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003cb6:	f043 0202 	orr.w	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff30 	bl	8003b28 <LL_ADC_IsEnabled>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 80a7 	bne.w	8003e1e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7e1b      	ldrb	r3, [r3, #24]
 8003cd8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003cda:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7e5b      	ldrb	r3, [r3, #25]
 8003ce0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ce2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7e9b      	ldrb	r3, [r3, #26]
 8003ce8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003cea:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_ADC_Init+0x11a>
 8003cf4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cf8:	e000      	b.n	8003cfc <HAL_ADC_Init+0x11c>
 8003cfa:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003cfc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d02:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	da04      	bge.n	8003d16 <HAL_ADC_Init+0x136>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d14:	e001      	b.n	8003d1a <HAL_ADC_Init+0x13a>
 8003d16:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003d1a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003d22:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d24:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d114      	bne.n	8003d60 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7e9b      	ldrb	r3, [r3, #26]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e00b      	b.n	8003d60 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d58:	f043 0201 	orr.w	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d74:	4313      	orrs	r3, r2
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003d86:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	69b9      	ldr	r1, [r7, #24]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003da0:	4313      	orrs	r3, r2
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d111      	bne.n	8003dd6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003dbe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003dc4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003dca:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	4b38      	ldr	r3, [pc, #224]	@ (8003ec0 <HAL_ADC_Init+0x2e0>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	6979      	ldr	r1, [r7, #20]
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003df2:	d014      	beq.n	8003e1e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfc:	d00f      	beq.n	8003e1e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e06:	d00a      	beq.n	8003e1e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003e08:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec4 <HAL_ADC_Init+0x2e4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003e18:	492a      	ldr	r1, [pc, #168]	@ (8003ec4 <HAL_ADC_Init+0x2e4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e26:	461a      	mov	r2, r3
 8003e28:	2100      	movs	r1, #0
 8003e2a:	f7ff fd76 	bl	800391a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	461a      	mov	r2, r3
 8003e38:	4923      	ldr	r1, [pc, #140]	@ (8003ec8 <HAL_ADC_Init+0x2e8>)
 8003e3a:	f7ff fd6e 	bl	800391a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d108      	bne.n	8003e58 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f062 020f 	orn	r2, r2, #15
 8003e54:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e56:	e017      	b.n	8003e88 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e60:	d112      	bne.n	8003e88 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	f003 031c 	and.w	r3, r3, #28
 8003e74:	f06f 020f 	mvn.w	r2, #15
 8003e78:	fa02 f103 	lsl.w	r1, r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fd61 	bl	8003956 <LL_ADC_GetSamplingTimeCommonChannels>
 8003e94:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d116      	bne.n	8003ecc <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea8:	f023 0303 	bic.w	r3, r3, #3
 8003eac:	f043 0201 	orr.w	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003eb4:	e023      	b.n	8003efe <HAL_ADC_Init+0x31e>
 8003eb6:	bf00      	nop
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	053e2d63 	.word	0x053e2d63
 8003ec0:	1ffffc02 	.word	0x1ffffc02
 8003ec4:	40012708 	.word	0x40012708
 8003ec8:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed0:	f023 0312 	bic.w	r3, r3, #18
 8003ed4:	f043 0210 	orr.w	r2, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003eec:	e007      	b.n	8003efe <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	f043 0210 	orr.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003efe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e07a      	b.n	8004010 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	f043 0202 	orr.w	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 face 	bl	80044c8 <ADC_ConversionStop>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb92 	bl	8004660 <ADC_Disable>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d102      	bne.n	8003f4c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fd9f 	bl	8003a94 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003f64:	f023 0303 	bic.w	r3, r3, #3
 8003f68:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f240 329f 	movw	r2, #927	@ 0x39f
 8003f72:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68d9      	ldr	r1, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b26      	ldr	r3, [pc, #152]	@ (8004018 <HAL_ADC_DeInit+0x110>)
 8003f80:	400b      	ands	r3, r1
 8003f82:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695a      	ldr	r2, [r3, #20]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0207 	bic.w	r2, r2, #7
 8003f92:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003fb0:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003fe0:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800401c <HAL_ADC_DeInit+0x114>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800401c <HAL_ADC_DeInit+0x114>)
 8003fe8:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003fec:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd faaa 	bl	8001548 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	833e0200 	.word	0x833e0200
 800401c:	40012708 	.word	0x40012708

08004020 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fdc5 	bl	8003bbc <LL_ADC_REG_IsConversionOngoing>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d132      	bne.n	800409e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_ADC_Start+0x26>
 8004042:	2302      	movs	r3, #2
 8004044:	e02e      	b.n	80040a4 <HAL_ADC_Start+0x84>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa80 	bl	8004554 <ADC_Enable>
 8004054:	4603      	mov	r3, r0
 8004056:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d11a      	bne.n	8004094 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	221c      	movs	r2, #28
 800407e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fd6f 	bl	8003b70 <LL_ADC_REG_StartConversion>
 8004092:	e006      	b.n	80040a2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800409c:	e001      	b.n	80040a2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800409e:	2302      	movs	r3, #2
 80040a0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_ADC_Stop+0x16>
 80040be:	2302      	movs	r3, #2
 80040c0:	e022      	b.n	8004108 <HAL_ADC_Stop+0x5c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9fc 	bl	80044c8 <ADC_ConversionStop>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d111      	bne.n	80040fe <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fac0 	bl	8004660 <ADC_Disable>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d102      	bne.n	8004128 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004122:	2308      	movs	r3, #8
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e010      	b.n	800414a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e077      	b.n	8004236 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004146:	2304      	movs	r3, #4
 8004148:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800414a:	f7fe fbe5 	bl	8002918 <HAL_GetTick>
 800414e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004150:	e021      	b.n	8004196 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d01d      	beq.n	8004196 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800415a:	f7fe fbdd 	bl	8002918 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <HAL_ADC_PollForConversion+0x60>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d112      	bne.n	8004196 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10b      	bne.n	8004196 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	f043 0204 	orr.w	r2, r3, #4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e04f      	b.n	8004236 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0d6      	beq.n	8004152 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fbe6 	bl	8003986 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d031      	beq.n	8004224 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7e9b      	ldrb	r3, [r3, #26]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d12d      	bne.n	8004224 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d126      	bne.n	8004224 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fcee 	bl	8003bbc <LL_ADC_REG_IsConversionOngoing>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d112      	bne.n	800420c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 020c 	bic.w	r2, r2, #12
 80041f4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	659a      	str	r2, [r3, #88]	@ 0x58
 800420a:	e00b      	b.n	8004224 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	7e1b      	ldrb	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	220c      	movs	r2, #12
 8004232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
	...

08004258 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x28>
 800427c:	2302      	movs	r3, #2
 800427e:	e110      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x24a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fc95 	bl	8003bbc <LL_ADC_REG_IsConversionOngoing>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	f040 80f7 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	f000 80b1 	beq.w	8004406 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042ac:	d004      	beq.n	80042b8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80042b2:	4a7e      	ldr	r2, [pc, #504]	@ (80044ac <HAL_ADC_ConfigChannel+0x254>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7ff fb92 	bl	80039ec <LL_ADC_REG_SetSequencerChAdd>
 80042c8:	e041      	b.n	800434e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	210f      	movs	r1, #15
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	401a      	ands	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0xa0>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0e9b      	lsrs	r3, r3, #26
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	e011      	b.n	800431c <HAL_ADC_ConfigChannel+0xc4>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	fa93 f3a3 	rbit	r3, r3
 8004304:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004310:	2320      	movs	r3, #32
 8004312:	e003      	b.n	800431c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	fab3 f383 	clz	r3, r3
 800431a:	b2db      	uxtb	r3, r3
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	6849      	ldr	r1, [r1, #4]
 8004320:	f001 011f 	and.w	r1, r1, #31
 8004324:	408b      	lsls	r3, r1
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	d808      	bhi.n	800434e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	f7ff fb2e 	bl	80039aa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	461a      	mov	r2, r3
 800435c:	f7ff fb6b 	bl	8003a36 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f280 8097 	bge.w	8004498 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800436a:	4851      	ldr	r0, [pc, #324]	@ (80044b0 <HAL_ADC_ConfigChannel+0x258>)
 800436c:	f7ff fac8 	bl	8003900 <LL_ADC_GetCommonPathInternalCh>
 8004370:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a4f      	ldr	r2, [pc, #316]	@ (80044b4 <HAL_ADC_ConfigChannel+0x25c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d120      	bne.n	80043be <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004382:	2b00      	cmp	r3, #0
 8004384:	d11b      	bne.n	80043be <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800438c:	4619      	mov	r1, r3
 800438e:	4848      	ldr	r0, [pc, #288]	@ (80044b0 <HAL_ADC_ConfigChannel+0x258>)
 8004390:	f7ff faa4 	bl	80038dc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004394:	4b48      	ldr	r3, [pc, #288]	@ (80044b8 <HAL_ADC_ConfigChannel+0x260>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	4a48      	ldr	r2, [pc, #288]	@ (80044bc <HAL_ADC_ConfigChannel+0x264>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	4613      	mov	r3, r2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80043ae:	e002      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f9      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043bc:	e06c      	b.n	8004498 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3f      	ldr	r2, [pc, #252]	@ (80044c0 <HAL_ADC_ConfigChannel+0x268>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10c      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d107      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043d8:	4619      	mov	r1, r3
 80043da:	4835      	ldr	r0, [pc, #212]	@ (80044b0 <HAL_ADC_ConfigChannel+0x258>)
 80043dc:	f7ff fa7e 	bl	80038dc <LL_ADC_SetCommonPathInternalCh>
 80043e0:	e05a      	b.n	8004498 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a37      	ldr	r2, [pc, #220]	@ (80044c4 <HAL_ADC_ConfigChannel+0x26c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d155      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d150      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043fc:	4619      	mov	r1, r3
 80043fe:	482c      	ldr	r0, [pc, #176]	@ (80044b0 <HAL_ADC_ConfigChannel+0x258>)
 8004400:	f7ff fa6c 	bl	80038dc <LL_ADC_SetCommonPathInternalCh>
 8004404:	e048      	b.n	8004498 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800440e:	d004      	beq.n	800441a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004414:	4a25      	ldr	r2, [pc, #148]	@ (80044ac <HAL_ADC_ConfigChannel+0x254>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d107      	bne.n	800442a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7ff faf3 	bl	8003a10 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	da32      	bge.n	8004498 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004432:	481f      	ldr	r0, [pc, #124]	@ (80044b0 <HAL_ADC_ConfigChannel+0x258>)
 8004434:	f7ff fa64 	bl	8003900 <LL_ADC_GetCommonPathInternalCh>
 8004438:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1d      	ldr	r2, [pc, #116]	@ (80044b4 <HAL_ADC_ConfigChannel+0x25c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d107      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800444a:	4619      	mov	r1, r3
 800444c:	4818      	ldr	r0, [pc, #96]	@ (80044b0 <HAL_ADC_ConfigChannel+0x258>)
 800444e:	f7ff fa45 	bl	80038dc <LL_ADC_SetCommonPathInternalCh>
 8004452:	e021      	b.n	8004498 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <HAL_ADC_ConfigChannel+0x268>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d107      	bne.n	800446e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004464:	4619      	mov	r1, r3
 8004466:	4812      	ldr	r0, [pc, #72]	@ (80044b0 <HAL_ADC_ConfigChannel+0x258>)
 8004468:	f7ff fa38 	bl	80038dc <LL_ADC_SetCommonPathInternalCh>
 800446c:	e014      	b.n	8004498 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a14      	ldr	r2, [pc, #80]	@ (80044c4 <HAL_ADC_ConfigChannel+0x26c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10f      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800447e:	4619      	mov	r1, r3
 8004480:	480b      	ldr	r0, [pc, #44]	@ (80044b0 <HAL_ADC_ConfigChannel+0x258>)
 8004482:	f7ff fa2b 	bl	80038dc <LL_ADC_SetCommonPathInternalCh>
 8004486:	e007      	b.n	8004498 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80044a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	80000004 	.word	0x80000004
 80044b0:	40012708 	.word	0x40012708
 80044b4:	b0001000 	.word	0xb0001000
 80044b8:	20000000 	.word	0x20000000
 80044bc:	053e2d63 	.word	0x053e2d63
 80044c0:	b8004000 	.word	0xb8004000
 80044c4:	b4002000 	.word	0xb4002000

080044c8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fb71 	bl	8003bbc <LL_ADC_REG_IsConversionOngoing>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d033      	beq.n	8004548 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fb31 	bl	8003b4c <LL_ADC_IsDisableOngoing>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fb4e 	bl	8003b96 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044fa:	f7fe fa0d 	bl	8002918 <HAL_GetTick>
 80044fe:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004500:	e01b      	b.n	800453a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004502:	f7fe fa09 	bl	8002918 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d914      	bls.n	800453a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00d      	beq.n	800453a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004522:	f043 0210 	orr.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452e:	f043 0201 	orr.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e007      	b.n	800454a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1dc      	bne.n	8004502 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800455c:	2300      	movs	r3, #0
 800455e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fadf 	bl	8003b28 <LL_ADC_IsEnabled>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d169      	bne.n	8004644 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	4b36      	ldr	r3, [pc, #216]	@ (8004650 <ADC_Enable+0xfc>)
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e055      	b.n	8004646 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fa9c 	bl	8003adc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80045a4:	482b      	ldr	r0, [pc, #172]	@ (8004654 <ADC_Enable+0x100>)
 80045a6:	f7ff f9ab 	bl	8003900 <LL_ADC_GetCommonPathInternalCh>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00f      	beq.n	80045d4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b4:	4b28      	ldr	r3, [pc, #160]	@ (8004658 <ADC_Enable+0x104>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	4a28      	ldr	r2, [pc, #160]	@ (800465c <ADC_Enable+0x108>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80045c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045c6:	e002      	b.n	80045ce <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f9      	bne.n	80045c8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	7e5b      	ldrb	r3, [r3, #25]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d033      	beq.n	8004644 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80045dc:	f7fe f99c 	bl	8002918 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045e2:	e028      	b.n	8004636 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fa9d 	bl	8003b28 <LL_ADC_IsEnabled>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d104      	bne.n	80045fe <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fa6f 	bl	8003adc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045fe:	f7fe f98b 	bl	8002918 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d914      	bls.n	8004636 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b01      	cmp	r3, #1
 8004618:	d00d      	beq.n	8004636 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461e:	f043 0210 	orr.w	r2, r3, #16
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e007      	b.n	8004646 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d1cf      	bne.n	80045e4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	80000017 	.word	0x80000017
 8004654:	40012708 	.word	0x40012708
 8004658:	20000000 	.word	0x20000000
 800465c:	053e2d63 	.word	0x053e2d63

08004660 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fa6d 	bl	8003b4c <LL_ADC_IsDisableOngoing>
 8004672:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fa55 	bl	8003b28 <LL_ADC_IsEnabled>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d047      	beq.n	8004714 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d144      	bne.n	8004714 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0305 	and.w	r3, r3, #5
 8004694:	2b01      	cmp	r3, #1
 8004696:	d10c      	bne.n	80046b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fa30 	bl	8003b02 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2203      	movs	r2, #3
 80046a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046aa:	f7fe f935 	bl	8002918 <HAL_GetTick>
 80046ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046b0:	e029      	b.n	8004706 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b6:	f043 0210 	orr.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e023      	b.n	8004716 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046ce:	f7fe f923 	bl	8002918 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d914      	bls.n	8004706 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00d      	beq.n	8004706 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	f043 0210 	orr.w	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	f043 0201 	orr.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e007      	b.n	8004716 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1dc      	bne.n	80046ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <LL_ADC_SetCalibrationFactor>:
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800472e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <LL_ADC_GetCalibrationFactor>:
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <LL_ADC_Enable>:
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004772:	f023 0317 	bic.w	r3, r3, #23
 8004776:	f043 0201 	orr.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	609a      	str	r2, [r3, #8]
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <LL_ADC_Disable>:
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004798:	f023 0317 	bic.w	r3, r3, #23
 800479c:	f043 0202 	orr.w	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr

080047ae <LL_ADC_IsEnabled>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <LL_ADC_IsEnabled+0x18>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <LL_ADC_IsEnabled+0x1a>
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <LL_ADC_StartCalibration>:
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047e2:	f023 0317 	bic.w	r3, r3, #23
 80047e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	609a      	str	r2, [r3, #8]
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800480c:	d101      	bne.n	8004812 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b088      	sub	sp, #32
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_ADCEx_Calibration_Start+0x1e>
 8004838:	2302      	movs	r3, #2
 800483a:	e0b9      	b.n	80049b0 <HAL_ADCEx_Calibration_Start+0x192>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff0b 	bl	8004660 <ADC_Disable>
 800484a:	4603      	mov	r3, r0
 800484c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff ffab 	bl	80047ae <LL_ADC_IsEnabled>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 809d 	bne.w	800499a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004864:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004868:	f043 0202 	orr.w	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	f248 0303 	movw	r3, #32771	@ 0x8003
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800488c:	f023 0303 	bic.w	r3, r3, #3
 8004890:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	e02e      	b.n	80048f6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ff98 	bl	80047d2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048a2:	e014      	b.n	80048ce <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	3301      	adds	r3, #1
 80048a8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80048b0:	d30d      	bcc.n	80048ce <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b6:	f023 0312 	bic.w	r3, r3, #18
 80048ba:	f043 0210 	orr.w	r2, r3, #16
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e070      	b.n	80049b0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff ff90 	bl	80047f8 <LL_ADC_IsCalibrationOnGoing>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e2      	bne.n	80048a4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff ff2f 	bl	8004746 <LL_ADC_GetCalibrationFactor>
 80048e8:	4602      	mov	r2, r0
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	4413      	add	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	2b07      	cmp	r3, #7
 80048fa:	d9cd      	bls.n	8004898 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ff29 	bl	8004762 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff ff01 	bl	800471e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff31 	bl	8004788 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004926:	f7fd fff7 	bl	8002918 <HAL_GetTick>
 800492a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800492c:	e01c      	b.n	8004968 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800492e:	f7fd fff3 	bl	8002918 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d915      	bls.n	8004968 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ff34 	bl	80047ae <LL_ADC_IsEnabled>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00d      	beq.n	8004968 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004950:	f043 0210 	orr.w	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495c:	f043 0201 	orr.w	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e023      	b.n	80049b0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff ff1e 	bl	80047ae <LL_ADC_IsEnabled>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1da      	bne.n	800492e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68d9      	ldr	r1, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498c:	f023 0303 	bic.w	r3, r3, #3
 8004990:	f043 0201 	orr.w	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	659a      	str	r2, [r3, #88]	@ 0x58
 8004998:	e005      	b.n	80049a6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	f043 0210 	orr.w	r2, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c8:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <__NVIC_SetPriorityGrouping+0x44>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049d4:	4013      	ands	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ea:	4a04      	ldr	r2, [pc, #16]	@ (80049fc <__NVIC_SetPriorityGrouping+0x44>)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	60d3      	str	r3, [r2, #12]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a04:	4b04      	ldr	r3, [pc, #16]	@ (8004a18 <__NVIC_GetPriorityGrouping+0x18>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	f003 0307 	and.w	r3, r3, #7
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	db0b      	blt.n	8004a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	f003 021f 	and.w	r2, r3, #31
 8004a34:	4906      	ldr	r1, [pc, #24]	@ (8004a50 <__NVIC_EnableIRQ+0x34>)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr
 8004a50:	e000e100 	.word	0xe000e100

08004a54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	db12      	blt.n	8004a8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	f003 021f 	and.w	r2, r3, #31
 8004a6c:	490a      	ldr	r1, [pc, #40]	@ (8004a98 <__NVIC_DisableIRQ+0x44>)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2001      	movs	r0, #1
 8004a76:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7a:	3320      	adds	r3, #32
 8004a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a80:	f3bf 8f4f 	dsb	sy
}
 8004a84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a86:	f3bf 8f6f 	isb	sy
}
 8004a8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	e000e100 	.word	0xe000e100

08004a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	6039      	str	r1, [r7, #0]
 8004aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	db0a      	blt.n	8004ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	490c      	ldr	r1, [pc, #48]	@ (8004ae8 <__NVIC_SetPriority+0x4c>)
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	0112      	lsls	r2, r2, #4
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	440b      	add	r3, r1
 8004ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ac4:	e00a      	b.n	8004adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4908      	ldr	r1, [pc, #32]	@ (8004aec <__NVIC_SetPriority+0x50>)
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	3b04      	subs	r3, #4
 8004ad4:	0112      	lsls	r2, r2, #4
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	440b      	add	r3, r1
 8004ada:	761a      	strb	r2, [r3, #24]
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	e000e100 	.word	0xe000e100
 8004aec:	e000ed00 	.word	0xe000ed00

08004af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	@ 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f1c3 0307 	rsb	r3, r3, #7
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	bf28      	it	cs
 8004b0e:	2304      	movcs	r3, #4
 8004b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3304      	adds	r3, #4
 8004b16:	2b06      	cmp	r3, #6
 8004b18:	d902      	bls.n	8004b20 <NVIC_EncodePriority+0x30>
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3b03      	subs	r3, #3
 8004b1e:	e000      	b.n	8004b22 <NVIC_EncodePriority+0x32>
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b24:	f04f 32ff 	mov.w	r2, #4294967295
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43da      	mvns	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	401a      	ands	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b38:	f04f 31ff 	mov.w	r1, #4294967295
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b42:	43d9      	mvns	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b48:	4313      	orrs	r3, r2
         );
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3724      	adds	r7, #36	@ 0x24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff2b 	bl	80049b8 <__NVIC_SetPriorityGrouping>
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	4603      	mov	r3, r0
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b78:	f7ff ff42 	bl	8004a00 <__NVIC_GetPriorityGrouping>
 8004b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7ff ffb4 	bl	8004af0 <NVIC_EncodePriority>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff83 	bl	8004a9c <__NVIC_SetPriority>
}
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff ff35 	bl	8004a1c <__NVIC_EnableIRQ>
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff43 	bl	8004a54 <__NVIC_DisableIRQ>
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e08e      	b.n	8004d08 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b47      	ldr	r3, [pc, #284]	@ (8004d10 <HAL_DMA_Init+0x138>)
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d80f      	bhi.n	8004c16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4b45      	ldr	r3, [pc, #276]	@ (8004d14 <HAL_DMA_Init+0x13c>)
 8004bfe:	4413      	add	r3, r2
 8004c00:	4a45      	ldr	r2, [pc, #276]	@ (8004d18 <HAL_DMA_Init+0x140>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	009a      	lsls	r2, r3, #2
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a42      	ldr	r2, [pc, #264]	@ (8004d1c <HAL_DMA_Init+0x144>)
 8004c12:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c14:	e00e      	b.n	8004c34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b40      	ldr	r3, [pc, #256]	@ (8004d20 <HAL_DMA_Init+0x148>)
 8004c1e:	4413      	add	r3, r2
 8004c20:	4a3d      	ldr	r2, [pc, #244]	@ (8004d18 <HAL_DMA_Init+0x140>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	009a      	lsls	r2, r3, #2
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a3c      	ldr	r2, [pc, #240]	@ (8004d24 <HAL_DMA_Init+0x14c>)
 8004c32:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6819      	ldr	r1, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb24 	bl	80052d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c94:	d102      	bne.n	8004c9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ca8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cb2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d010      	beq.n	8004cde <HAL_DMA_Init+0x106>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d80c      	bhi.n	8004cde <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fb4d 	bl	8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	e008      	b.n	8004cf0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40020407 	.word	0x40020407
 8004d14:	bffdfff8 	.word	0xbffdfff8
 8004d18:	cccccccd 	.word	0xcccccccd
 8004d1c:	40020000 	.word	0x40020000
 8004d20:	bffdfbf8 	.word	0xbffdfbf8
 8004d24:	40020400 	.word	0x40020400

08004d28 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07b      	b.n	8004e32 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4b3a      	ldr	r3, [pc, #232]	@ (8004e3c <HAL_DMA_DeInit+0x114>)
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d80f      	bhi.n	8004d76 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <HAL_DMA_DeInit+0x118>)
 8004d5e:	4413      	add	r3, r2
 8004d60:	4a38      	ldr	r2, [pc, #224]	@ (8004e44 <HAL_DMA_DeInit+0x11c>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	091b      	lsrs	r3, r3, #4
 8004d68:	009a      	lsls	r2, r3, #2
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a35      	ldr	r2, [pc, #212]	@ (8004e48 <HAL_DMA_DeInit+0x120>)
 8004d72:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d74:	e00e      	b.n	8004d94 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b33      	ldr	r3, [pc, #204]	@ (8004e4c <HAL_DMA_DeInit+0x124>)
 8004d7e:	4413      	add	r3, r2
 8004d80:	4a30      	ldr	r2, [pc, #192]	@ (8004e44 <HAL_DMA_DeInit+0x11c>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	009a      	lsls	r2, r3, #2
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2f      	ldr	r2, [pc, #188]	@ (8004e50 <HAL_DMA_DeInit+0x128>)
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da0:	f003 021c 	and.w	r2, r3, #28
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da8:	2101      	movs	r1, #1
 8004daa:	fa01 f202 	lsl.w	r2, r1, r2
 8004dae:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fa8f 	bl	80052d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00f      	beq.n	8004df0 <HAL_DMA_DeInit+0xc8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d80b      	bhi.n	8004df0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fac3 	bl	8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004dee:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40020407 	.word	0x40020407
 8004e40:	bffdfff8 	.word	0xbffdfff8
 8004e44:	cccccccd 	.word	0xcccccccd
 8004e48:	40020000 	.word	0x40020000
 8004e4c:	bffdfbf8 	.word	0xbffdfbf8
 8004e50:	40020400 	.word	0x40020400

08004e54 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_DMA_Start_IT+0x20>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e069      	b.n	8004f48 <HAL_DMA_Start_IT+0xf4>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d155      	bne.n	8004f34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f9d3 	bl	8005258 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d008      	beq.n	8004ecc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 020e 	orr.w	r2, r2, #14
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e00f      	b.n	8004eec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0204 	bic.w	r2, r2, #4
 8004eda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 020a 	orr.w	r2, r2, #10
 8004eea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e008      	b.n	8004f46 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2280      	movs	r2, #128	@ 0x80
 8004f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e04f      	b.n	8005002 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d008      	beq.n	8004f80 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2204      	movs	r2, #4
 8004f72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e040      	b.n	8005002 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 020e 	bic.w	r2, r2, #14
 8004f8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb4:	f003 021c 	and.w	r2, r3, #28
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fcc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d005      	beq.n	8005030 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2204      	movs	r2, #4
 8005028:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
 800502e:	e047      	b.n	80050c0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 020e 	bic.w	r2, r2, #14
 800503e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800505e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005064:	f003 021c 	and.w	r2, r3, #28
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	2101      	movs	r1, #1
 800506e:	fa01 f202 	lsl.w	r2, r1, r2
 8005072:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800507c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00c      	beq.n	80050a0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005090:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005094:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800509e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
    }
  }
  return status;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e8:	f003 031c 	and.w	r3, r3, #28
 80050ec:	2204      	movs	r2, #4
 80050ee:	409a      	lsls	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d027      	beq.n	8005148 <HAL_DMA_IRQHandler+0x7c>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d022      	beq.n	8005148 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0204 	bic.w	r2, r2, #4
 800511e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005124:	f003 021c 	and.w	r2, r3, #28
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	2104      	movs	r1, #4
 800512e:	fa01 f202 	lsl.w	r2, r1, r2
 8005132:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8081 	beq.w	8005240 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005146:	e07b      	b.n	8005240 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514c:	f003 031c 	and.w	r3, r3, #28
 8005150:	2202      	movs	r2, #2
 8005152:	409a      	lsls	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d03d      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x10c>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d038      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10b      	bne.n	800518c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 020a 	bic.w	r2, r2, #10
 8005182:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	4b2e      	ldr	r3, [pc, #184]	@ (800524c <HAL_DMA_IRQHandler+0x180>)
 8005194:	429a      	cmp	r2, r3
 8005196:	d909      	bls.n	80051ac <HAL_DMA_IRQHandler+0xe0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519c:	f003 031c 	and.w	r3, r3, #28
 80051a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005250 <HAL_DMA_IRQHandler+0x184>)
 80051a2:	2102      	movs	r1, #2
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	6053      	str	r3, [r2, #4]
 80051aa:	e008      	b.n	80051be <HAL_DMA_IRQHandler+0xf2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b0:	f003 031c 	and.w	r3, r3, #28
 80051b4:	4a27      	ldr	r2, [pc, #156]	@ (8005254 <HAL_DMA_IRQHandler+0x188>)
 80051b6:	2102      	movs	r1, #2
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d038      	beq.n	8005240 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80051d6:	e033      	b.n	8005240 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051dc:	f003 031c 	and.w	r3, r3, #28
 80051e0:	2208      	movs	r2, #8
 80051e2:	409a      	lsls	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d02a      	beq.n	8005242 <HAL_DMA_IRQHandler+0x176>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d025      	beq.n	8005242 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 020e 	bic.w	r2, r2, #14
 8005204:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520a:	f003 021c 	and.w	r2, r3, #28
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	2101      	movs	r1, #1
 8005214:	fa01 f202 	lsl.w	r2, r1, r2
 8005218:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005240:	bf00      	nop
 8005242:	bf00      	nop
}
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40020080 	.word	0x40020080
 8005250:	40020400 	.word	0x40020400
 8005254:	40020000 	.word	0x40020000

08005258 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800526e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005280:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f003 021c 	and.w	r2, r3, #28
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f202 	lsl.w	r2, r1, r2
 8005294:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d108      	bne.n	80052b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052b6:	e007      	b.n	80052c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
	...

080052d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005354 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d813      	bhi.n	8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052f4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	3b08      	subs	r3, #8
 8005304:	4a14      	ldr	r2, [pc, #80]	@ (8005358 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e011      	b.n	8005334 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005314:	089b      	lsrs	r3, r3, #2
 8005316:	009a      	lsls	r2, r3, #2
 8005318:	4b10      	ldr	r3, [pc, #64]	@ (800535c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800531a:	4413      	add	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	3b08      	subs	r3, #8
 8005328:	4a0b      	ldr	r2, [pc, #44]	@ (8005358 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	3307      	adds	r3, #7
 8005332:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a0a      	ldr	r2, [pc, #40]	@ (8005360 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005338:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40020407 	.word	0x40020407
 8005358:	cccccccd 	.word	0xcccccccd
 800535c:	4002081c 	.word	0x4002081c
 8005360:	40020880 	.word	0x40020880

08005364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005374:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4b0a      	ldr	r3, [pc, #40]	@ (80053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	461a      	mov	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a08      	ldr	r2, [pc, #32]	@ (80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005388:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3b01      	subs	r3, #1
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2201      	movs	r2, #1
 8005394:	409a      	lsls	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr
 80053a4:	1000823f 	.word	0x1000823f
 80053a8:	40020940 	.word	0x40020940

080053ac <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053ba:	4b1c      	ldr	r3, [pc, #112]	@ (800542c <HAL_FLASH_Program+0x80>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_FLASH_Program+0x1a>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e02d      	b.n	8005422 <HAL_FLASH_Program+0x76>
 80053c6:	4b19      	ldr	r3, [pc, #100]	@ (800542c <HAL_FLASH_Program+0x80>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80053cc:	4b17      	ldr	r3, [pc, #92]	@ (800542c <HAL_FLASH_Program+0x80>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053d6:	f000 f869 	bl	80054ac <FLASH_WaitForLastOperation>
 80053da:	4603      	mov	r3, r0
 80053dc:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80053de:	7dfb      	ldrb	r3, [r7, #23]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d11a      	bne.n	800541a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d105      	bne.n	80053f6 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80053ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ee:	68b8      	ldr	r0, [r7, #8]
 80053f0:	f000 f8be 	bl	8005570 <FLASH_Program_DoubleWord>
 80053f4:	e004      	b.n	8005400 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	4619      	mov	r1, r3
 80053fa:	68b8      	ldr	r0, [r7, #8]
 80053fc:	f000 f8de 	bl	80055bc <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005400:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005404:	f000 f852 	bl	80054ac <FLASH_WaitForLastOperation>
 8005408:	4603      	mov	r3, r0
 800540a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800540c:	4b08      	ldr	r3, [pc, #32]	@ (8005430 <HAL_FLASH_Program+0x84>)
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	4906      	ldr	r1, [pc, #24]	@ (8005430 <HAL_FLASH_Program+0x84>)
 8005416:	4013      	ands	r3, r2
 8005418:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800541a:	4b04      	ldr	r3, [pc, #16]	@ (800542c <HAL_FLASH_Program+0x80>)
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005420:	7dfb      	ldrb	r3, [r7, #23]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000628 	.word	0x20000628
 8005430:	58004000 	.word	0x58004000

08005434 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800543e:	4b0b      	ldr	r3, [pc, #44]	@ (800546c <HAL_FLASH_Unlock+0x38>)
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	da0b      	bge.n	800545e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_FLASH_Unlock+0x38>)
 8005448:	4a09      	ldr	r2, [pc, #36]	@ (8005470 <HAL_FLASH_Unlock+0x3c>)
 800544a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800544c:	4b07      	ldr	r3, [pc, #28]	@ (800546c <HAL_FLASH_Unlock+0x38>)
 800544e:	4a09      	ldr	r2, [pc, #36]	@ (8005474 <HAL_FLASH_Unlock+0x40>)
 8005450:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_FLASH_Unlock+0x38>)
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	da01      	bge.n	800545e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800545e:	79fb      	ldrb	r3, [r7, #7]
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	58004000 	.word	0x58004000
 8005470:	45670123 	.word	0x45670123
 8005474:	cdef89ab 	.word	0xcdef89ab

08005478 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005482:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <HAL_FLASH_Lock+0x30>)
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	4a08      	ldr	r2, [pc, #32]	@ (80054a8 <HAL_FLASH_Lock+0x30>)
 8005488:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800548c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800548e:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <HAL_FLASH_Lock+0x30>)
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	db01      	blt.n	800549a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800549a:	79fb      	ldrb	r3, [r7, #7]
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	58004000 	.word	0x58004000

080054ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80054b4:	f7fd fa30 	bl	8002918 <HAL_GetTick>
 80054b8:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80054ba:	e009      	b.n	80054d0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80054bc:	f7fd fa2c 	bl	8002918 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d801      	bhi.n	80054d0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e046      	b.n	800555e <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80054d0:	4b25      	ldr	r3, [pc, #148]	@ (8005568 <FLASH_WaitForLastOperation+0xbc>)
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054dc:	d0ee      	beq.n	80054bc <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80054de:	4b22      	ldr	r3, [pc, #136]	@ (8005568 <FLASH_WaitForLastOperation+0xbc>)
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80054ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005568 <FLASH_WaitForLastOperation+0xbc>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80054fa:	4013      	ands	r3, r2
 80054fc:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005504:	d307      	bcc.n	8005516 <FLASH_WaitForLastOperation+0x6a>
 8005506:	4b18      	ldr	r3, [pc, #96]	@ (8005568 <FLASH_WaitForLastOperation+0xbc>)
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005510:	4915      	ldr	r1, [pc, #84]	@ (8005568 <FLASH_WaitForLastOperation+0xbc>)
 8005512:	4313      	orrs	r3, r2
 8005514:	618b      	str	r3, [r1, #24]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <FLASH_WaitForLastOperation+0x7e>
 8005520:	4a11      	ldr	r2, [pc, #68]	@ (8005568 <FLASH_WaitForLastOperation+0xbc>)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005528:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00e      	beq.n	800554e <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005530:	4a0e      	ldr	r2, [pc, #56]	@ (800556c <FLASH_WaitForLastOperation+0xc0>)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e011      	b.n	800555e <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800553a:	f7fd f9ed 	bl	8002918 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d801      	bhi.n	800554e <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e007      	b.n	800555e <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800554e:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <FLASH_WaitForLastOperation+0xbc>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005556:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800555a:	d0ee      	beq.n	800553a <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	58004000 	.word	0x58004000
 800556c:	20000628 	.word	0x20000628

08005570 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800557c:	4b0e      	ldr	r3, [pc, #56]	@ (80055b8 <FLASH_Program_DoubleWord+0x48>)
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	4a0d      	ldr	r2, [pc, #52]	@ (80055b8 <FLASH_Program_DoubleWord+0x48>)
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800558e:	f3bf 8f6f 	isb	sy
}
 8005592:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	000a      	movs	r2, r1
 80055a2:	2300      	movs	r3, #0
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	3104      	adds	r1, #4
 80055a8:	4613      	mov	r3, r2
 80055aa:	600b      	str	r3, [r1, #0]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	58004000 	.word	0x58004000

080055bc <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	@ 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80055c6:	2340      	movs	r3, #64	@ 0x40
 80055c8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80055d2:	4b18      	ldr	r3, [pc, #96]	@ (8005634 <FLASH_Program_Fast+0x78>)
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	4a17      	ldr	r2, [pc, #92]	@ (8005634 <FLASH_Program_Fast+0x78>)
 80055d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055de:	f3ef 8310 	mrs	r3, PRIMASK
 80055e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80055e4:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80055e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80055e8:	b672      	cpsid	i
}
 80055ea:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	3304      	adds	r3, #4
 80055f8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3304      	adds	r3, #4
 80055fe:	617b      	str	r3, [r7, #20]
    row_index--;
 8005600:	7ffb      	ldrb	r3, [r7, #31]
 8005602:	3b01      	subs	r3, #1
 8005604:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005606:	7ffb      	ldrb	r3, [r7, #31]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ef      	bne.n	80055ec <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800560c:	bf00      	nop
 800560e:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <FLASH_Program_Fast+0x78>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800561a:	d0f8      	beq.n	800560e <FLASH_Program_Fast+0x52>
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f383 8810 	msr	PRIMASK, r3
}
 8005626:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005628:	bf00      	nop
 800562a:	3724      	adds	r7, #36	@ 0x24
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	58004000 	.word	0x58004000

08005638 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005642:	4b28      	ldr	r3, [pc, #160]	@ (80056e4 <HAL_FLASHEx_Erase+0xac>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_FLASHEx_Erase+0x16>
 800564a:	2302      	movs	r3, #2
 800564c:	e046      	b.n	80056dc <HAL_FLASHEx_Erase+0xa4>
 800564e:	4b25      	ldr	r3, [pc, #148]	@ (80056e4 <HAL_FLASHEx_Erase+0xac>)
 8005650:	2201      	movs	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005654:	4b23      	ldr	r3, [pc, #140]	@ (80056e4 <HAL_FLASHEx_Erase+0xac>)
 8005656:	2200      	movs	r2, #0
 8005658:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800565a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800565e:	f7ff ff25 	bl	80054ac <FLASH_WaitForLastOperation>
 8005662:	4603      	mov	r3, r0
 8005664:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d133      	bne.n	80056d4 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b04      	cmp	r3, #4
 8005672:	d108      	bne.n	8005686 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005674:	f000 f838 	bl	80056e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005678:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800567c:	f7ff ff16 	bl	80054ac <FLASH_WaitForLastOperation>
 8005680:	4603      	mov	r3, r0
 8005682:	73fb      	strb	r3, [r7, #15]
 8005684:	e024      	b.n	80056d0 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f04f 32ff 	mov.w	r2, #4294967295
 800568c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	60bb      	str	r3, [r7, #8]
 8005694:	e012      	b.n	80056bc <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005696:	68b8      	ldr	r0, [r7, #8]
 8005698:	f000 f836 	bl	8005708 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800569c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056a0:	f7ff ff04 	bl	80054ac <FLASH_WaitForLastOperation>
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	601a      	str	r2, [r3, #0]
          break;
 80056b4:	e00a      	b.n	80056cc <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3301      	adds	r3, #1
 80056ba:	60bb      	str	r3, [r7, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	4413      	add	r3, r2
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d3e4      	bcc.n	8005696 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80056cc:	f000 f878 	bl	80057c0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80056d0:	f000 f832 	bl	8005738 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <HAL_FLASHEx_Erase+0xac>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]

  return status;
 80056da:	7bfb      	ldrb	r3, [r7, #15]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000628 	.word	0x20000628

080056e8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80056ec:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <FLASH_MassErase+0x1c>)
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	4a04      	ldr	r2, [pc, #16]	@ (8005704 <FLASH_MassErase+0x1c>)
 80056f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056f6:	f043 0304 	orr.w	r3, r3, #4
 80056fa:	6153      	str	r3, [r2, #20]
#endif
}
 80056fc:	bf00      	nop
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	58004000 	.word	0x58004000

08005708 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005710:	4b08      	ldr	r3, [pc, #32]	@ (8005734 <FLASH_PageErase+0x2c>)
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4313      	orrs	r3, r2
 800571e:	4a05      	ldr	r2, [pc, #20]	@ (8005734 <FLASH_PageErase+0x2c>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005724:	f043 0302 	orr.w	r3, r3, #2
 8005728:	6153      	str	r3, [r2, #20]
#endif
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr
 8005734:	58004000 	.word	0x58004000

08005738 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800573c:	4b1f      	ldr	r3, [pc, #124]	@ (80057bc <FLASH_FlushCaches+0x84>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005744:	2b01      	cmp	r3, #1
 8005746:	d117      	bne.n	8005778 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005748:	4b1c      	ldr	r3, [pc, #112]	@ (80057bc <FLASH_FlushCaches+0x84>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1b      	ldr	r2, [pc, #108]	@ (80057bc <FLASH_FlushCaches+0x84>)
 800574e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005752:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005754:	4b19      	ldr	r3, [pc, #100]	@ (80057bc <FLASH_FlushCaches+0x84>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a18      	ldr	r2, [pc, #96]	@ (80057bc <FLASH_FlushCaches+0x84>)
 800575a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	4b16      	ldr	r3, [pc, #88]	@ (80057bc <FLASH_FlushCaches+0x84>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a15      	ldr	r2, [pc, #84]	@ (80057bc <FLASH_FlushCaches+0x84>)
 8005766:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800576a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800576c:	4b13      	ldr	r3, [pc, #76]	@ (80057bc <FLASH_FlushCaches+0x84>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a12      	ldr	r2, [pc, #72]	@ (80057bc <FLASH_FlushCaches+0x84>)
 8005772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005776:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005778:	4b10      	ldr	r3, [pc, #64]	@ (80057bc <FLASH_FlushCaches+0x84>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005780:	2b01      	cmp	r3, #1
 8005782:	d117      	bne.n	80057b4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005784:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <FLASH_FlushCaches+0x84>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a0c      	ldr	r2, [pc, #48]	@ (80057bc <FLASH_FlushCaches+0x84>)
 800578a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800578e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005790:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <FLASH_FlushCaches+0x84>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a09      	ldr	r2, [pc, #36]	@ (80057bc <FLASH_FlushCaches+0x84>)
 8005796:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	4b07      	ldr	r3, [pc, #28]	@ (80057bc <FLASH_FlushCaches+0x84>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a06      	ldr	r2, [pc, #24]	@ (80057bc <FLASH_FlushCaches+0x84>)
 80057a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80057a8:	4b04      	ldr	r3, [pc, #16]	@ (80057bc <FLASH_FlushCaches+0x84>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a03      	ldr	r2, [pc, #12]	@ (80057bc <FLASH_FlushCaches+0x84>)
 80057ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057b2:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr
 80057bc:	58004000 	.word	0x58004000

080057c0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80057c4:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <FLASH_AcknowledgePageErase+0x1c>)
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	4a04      	ldr	r2, [pc, #16]	@ (80057dc <FLASH_AcknowledgePageErase+0x1c>)
 80057ca:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80057ce:	f023 0302 	bic.w	r3, r3, #2
 80057d2:	6153      	str	r3, [r2, #20]
#endif
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	58004000 	.word	0x58004000

080057e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057ee:	e140      	b.n	8005a72 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	2101      	movs	r1, #1
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	fa01 f303 	lsl.w	r3, r1, r3
 80057fc:	4013      	ands	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8132 	beq.w	8005a6c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	2b01      	cmp	r3, #1
 8005812:	d005      	beq.n	8005820 <HAL_GPIO_Init+0x40>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d130      	bne.n	8005882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	2203      	movs	r2, #3
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4013      	ands	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005856:	2201      	movs	r2, #1
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	43db      	mvns	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4013      	ands	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	091b      	lsrs	r3, r3, #4
 800586c:	f003 0201 	and.w	r2, r3, #1
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b03      	cmp	r3, #3
 800588c:	d017      	beq.n	80058be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	2203      	movs	r2, #3
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4013      	ands	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d123      	bne.n	8005912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	08da      	lsrs	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3208      	adds	r2, #8
 80058d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	220f      	movs	r2, #15
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4013      	ands	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	08da      	lsrs	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3208      	adds	r2, #8
 800590c:	6939      	ldr	r1, [r7, #16]
 800590e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	2203      	movs	r2, #3
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 0203 	and.w	r2, r3, #3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 808c 	beq.w	8005a6c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005954:	4a4e      	ldr	r2, [pc, #312]	@ (8005a90 <HAL_GPIO_Init+0x2b0>)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	089b      	lsrs	r3, r3, #2
 800595a:	3302      	adds	r3, #2
 800595c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	2207      	movs	r2, #7
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4013      	ands	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800597e:	d00d      	beq.n	800599c <HAL_GPIO_Init+0x1bc>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a44      	ldr	r2, [pc, #272]	@ (8005a94 <HAL_GPIO_Init+0x2b4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <HAL_GPIO_Init+0x1b8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a43      	ldr	r2, [pc, #268]	@ (8005a98 <HAL_GPIO_Init+0x2b8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d101      	bne.n	8005994 <HAL_GPIO_Init+0x1b4>
 8005990:	2302      	movs	r3, #2
 8005992:	e004      	b.n	800599e <HAL_GPIO_Init+0x1be>
 8005994:	2307      	movs	r3, #7
 8005996:	e002      	b.n	800599e <HAL_GPIO_Init+0x1be>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_GPIO_Init+0x1be>
 800599c:	2300      	movs	r3, #0
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	f002 0203 	and.w	r2, r2, #3
 80059a4:	0092      	lsls	r2, r2, #2
 80059a6:	4093      	lsls	r3, r2
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80059ae:	4938      	ldr	r1, [pc, #224]	@ (8005a90 <HAL_GPIO_Init+0x2b0>)
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	3302      	adds	r3, #2
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059bc:	4b37      	ldr	r3, [pc, #220]	@ (8005a9c <HAL_GPIO_Init+0x2bc>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4013      	ands	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059e0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a9c <HAL_GPIO_Init+0x2bc>)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059e6:	4b2d      	ldr	r3, [pc, #180]	@ (8005a9c <HAL_GPIO_Init+0x2bc>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	43db      	mvns	r3, r3
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4013      	ands	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a0a:	4a24      	ldr	r2, [pc, #144]	@ (8005a9c <HAL_GPIO_Init+0x2bc>)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005a10:	4b22      	ldr	r3, [pc, #136]	@ (8005a9c <HAL_GPIO_Init+0x2bc>)
 8005a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a16:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005a36:	4a19      	ldr	r2, [pc, #100]	@ (8005a9c <HAL_GPIO_Init+0x2bc>)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005a3e:	4b17      	ldr	r3, [pc, #92]	@ (8005a9c <HAL_GPIO_Init+0x2bc>)
 8005a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a44:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005a64:	4a0d      	ldr	r2, [pc, #52]	@ (8005a9c <HAL_GPIO_Init+0x2bc>)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f47f aeb7 	bne.w	80057f0 <HAL_GPIO_Init+0x10>
  }
}
 8005a82:	bf00      	nop
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000
 8005a94:	48000400 	.word	0x48000400
 8005a98:	48000800 	.word	0x48000800
 8005a9c:	58000800 	.word	0x58000800

08005aa0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005aae:	e0af      	b.n	8005c10 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a2 	beq.w	8005c0a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005ac6:	4a59      	ldr	r2, [pc, #356]	@ (8005c2c <HAL_GPIO_DeInit+0x18c>)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	089b      	lsrs	r3, r3, #2
 8005acc:	3302      	adds	r3, #2
 8005ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	2207      	movs	r2, #7
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005aee:	d00d      	beq.n	8005b0c <HAL_GPIO_DeInit+0x6c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a4f      	ldr	r2, [pc, #316]	@ (8005c30 <HAL_GPIO_DeInit+0x190>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d007      	beq.n	8005b08 <HAL_GPIO_DeInit+0x68>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a4e      	ldr	r2, [pc, #312]	@ (8005c34 <HAL_GPIO_DeInit+0x194>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <HAL_GPIO_DeInit+0x64>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e004      	b.n	8005b0e <HAL_GPIO_DeInit+0x6e>
 8005b04:	2307      	movs	r3, #7
 8005b06:	e002      	b.n	8005b0e <HAL_GPIO_DeInit+0x6e>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_GPIO_DeInit+0x6e>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	f002 0203 	and.w	r2, r2, #3
 8005b14:	0092      	lsls	r2, r2, #2
 8005b16:	4093      	lsls	r3, r2
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d136      	bne.n	8005b8c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005b1e:	4b46      	ldr	r3, [pc, #280]	@ (8005c38 <HAL_GPIO_DeInit+0x198>)
 8005b20:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	43db      	mvns	r3, r3
 8005b28:	4943      	ldr	r1, [pc, #268]	@ (8005c38 <HAL_GPIO_DeInit+0x198>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005b30:	4b41      	ldr	r3, [pc, #260]	@ (8005c38 <HAL_GPIO_DeInit+0x198>)
 8005b32:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	493f      	ldr	r1, [pc, #252]	@ (8005c38 <HAL_GPIO_DeInit+0x198>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005b42:	4b3d      	ldr	r3, [pc, #244]	@ (8005c38 <HAL_GPIO_DeInit+0x198>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	493b      	ldr	r1, [pc, #236]	@ (8005c38 <HAL_GPIO_DeInit+0x198>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005b50:	4b39      	ldr	r3, [pc, #228]	@ (8005c38 <HAL_GPIO_DeInit+0x198>)
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	43db      	mvns	r3, r3
 8005b58:	4937      	ldr	r1, [pc, #220]	@ (8005c38 <HAL_GPIO_DeInit+0x198>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	2207      	movs	r2, #7
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8005c2c <HAL_GPIO_DeInit+0x18c>)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	089b      	lsrs	r3, r3, #2
 8005b74:	3302      	adds	r3, #2
 8005b76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	43da      	mvns	r2, r3
 8005b7e:	482b      	ldr	r0, [pc, #172]	@ (8005c2c <HAL_GPIO_DeInit+0x18c>)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	089b      	lsrs	r3, r3, #2
 8005b84:	400a      	ands	r2, r1
 8005b86:	3302      	adds	r3, #2
 8005b88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	2103      	movs	r1, #3
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	08da      	lsrs	r2, r3, #3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3208      	adds	r2, #8
 8005ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	220f      	movs	r2, #15
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	08d2      	lsrs	r2, r2, #3
 8005bc0:	4019      	ands	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3208      	adds	r2, #8
 8005bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	2103      	movs	r1, #3
 8005bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	401a      	ands	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	2101      	movs	r1, #1
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	401a      	ands	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	2103      	movs	r1, #3
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	401a      	ands	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f af49 	bne.w	8005ab0 <HAL_GPIO_DeInit+0x10>
  }
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	48000400 	.word	0x48000400
 8005c34:	48000800 	.word	0x48000800
 8005c38:	58000800 	.word	0x58000800

08005c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c4c:	787b      	ldrb	r3, [r7, #1]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c52:	887a      	ldrh	r2, [r7, #2]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c58:	e002      	b.n	8005c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c5a:	887a      	ldrh	r2, [r7, #2]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr

08005c6a <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c7c:	887a      	ldrh	r2, [r7, #2]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4013      	ands	r3, r2
 8005c82:	041a      	lsls	r2, r3, #16
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	43d9      	mvns	r1, r3
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	400b      	ands	r3, r1
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	619a      	str	r2, [r3, #24]
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e08d      	b.n	8005dca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc f94c 	bl	8001f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2224      	movs	r2, #36	@ 0x24
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d107      	bne.n	8005d16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	e006      	b.n	8005d24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d108      	bne.n	8005d3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	e007      	b.n	8005d4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69d9      	ldr	r1, [r3, #28]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	461a      	mov	r2, r3
 8005de0:	460b      	mov	r3, r1
 8005de2:	817b      	strh	r3, [r7, #10]
 8005de4:	4613      	mov	r3, r2
 8005de6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	f040 80fd 	bne.w	8005ff0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_I2C_Master_Transmit+0x30>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e0f6      	b.n	8005ff2 <HAL_I2C_Master_Transmit+0x21e>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e0c:	f7fc fd84 	bl	8002918 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	2319      	movs	r3, #25
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fa09 	bl	8006236 <I2C_WaitOnFlagUntilTimeout>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e0e1      	b.n	8005ff2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2221      	movs	r2, #33	@ 0x21
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2210      	movs	r2, #16
 8005e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	893a      	ldrh	r2, [r7, #8]
 8005e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2bff      	cmp	r3, #255	@ 0xff
 8005e5e:	d906      	bls.n	8005e6e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	22ff      	movs	r2, #255	@ 0xff
 8005e64:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005e66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e007      	b.n	8005e7e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005e78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e7c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d024      	beq.n	8005ed0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	8979      	ldrh	r1, [r7, #10]
 8005ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8005ffc <HAL_I2C_Master_Transmit+0x228>)
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fc03 	bl	80066d4 <I2C_TransferConfig>
 8005ece:	e066      	b.n	8005f9e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	8979      	ldrh	r1, [r7, #10]
 8005ed8:	4b48      	ldr	r3, [pc, #288]	@ (8005ffc <HAL_I2C_Master_Transmit+0x228>)
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fbf8 	bl	80066d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005ee4:	e05b      	b.n	8005f9e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	6a39      	ldr	r1, [r7, #32]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f9fc 	bl	80062e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e07b      	b.n	8005ff2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	781a      	ldrb	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d034      	beq.n	8005f9e <HAL_I2C_Master_Transmit+0x1ca>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d130      	bne.n	8005f9e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	2200      	movs	r2, #0
 8005f44:	2180      	movs	r1, #128	@ 0x80
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 f975 	bl	8006236 <I2C_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e04d      	b.n	8005ff2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2bff      	cmp	r3, #255	@ 0xff
 8005f5e:	d90e      	bls.n	8005f7e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	22ff      	movs	r2, #255	@ 0xff
 8005f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	8979      	ldrh	r1, [r7, #10]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fbac 	bl	80066d4 <I2C_TransferConfig>
 8005f7c:	e00f      	b.n	8005f9e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	8979      	ldrh	r1, [r7, #10]
 8005f90:	2300      	movs	r3, #0
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 fb9b 	bl	80066d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d19e      	bne.n	8005ee6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	6a39      	ldr	r1, [r7, #32]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f9e2 	bl	8006376 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e01a      	b.n	8005ff2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6859      	ldr	r1, [r3, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b0c      	ldr	r3, [pc, #48]	@ (8006000 <HAL_I2C_Master_Transmit+0x22c>)
 8005fd0:	400b      	ands	r3, r1
 8005fd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	80002000 	.word	0x80002000
 8006000:	fe00e800 	.word	0xfe00e800

08006004 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	461a      	mov	r2, r3
 8006010:	460b      	mov	r3, r1
 8006012:	817b      	strh	r3, [r7, #10]
 8006014:	4613      	mov	r3, r2
 8006016:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b20      	cmp	r3, #32
 8006022:	f040 80db 	bne.w	80061dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_I2C_Master_Receive+0x30>
 8006030:	2302      	movs	r3, #2
 8006032:	e0d4      	b.n	80061de <HAL_I2C_Master_Receive+0x1da>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800603c:	f7fc fc6c 	bl	8002918 <HAL_GetTick>
 8006040:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	2319      	movs	r3, #25
 8006048:	2201      	movs	r2, #1
 800604a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f8f1 	bl	8006236 <I2C_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e0bf      	b.n	80061de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2222      	movs	r2, #34	@ 0x22
 8006062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2210      	movs	r2, #16
 800606a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	893a      	ldrh	r2, [r7, #8]
 800607e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	2bff      	cmp	r3, #255	@ 0xff
 800608e:	d90e      	bls.n	80060ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	22ff      	movs	r2, #255	@ 0xff
 8006094:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609a:	b2da      	uxtb	r2, r3
 800609c:	8979      	ldrh	r1, [r7, #10]
 800609e:	4b52      	ldr	r3, [pc, #328]	@ (80061e8 <HAL_I2C_Master_Receive+0x1e4>)
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fb14 	bl	80066d4 <I2C_TransferConfig>
 80060ac:	e06d      	b.n	800618a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	8979      	ldrh	r1, [r7, #10]
 80060c0:	4b49      	ldr	r3, [pc, #292]	@ (80061e8 <HAL_I2C_Master_Receive+0x1e4>)
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fb03 	bl	80066d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80060ce:	e05c      	b.n	800618a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	6a39      	ldr	r1, [r7, #32]
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f991 	bl	80063fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e07c      	b.n	80061de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d034      	beq.n	800618a <HAL_I2C_Master_Receive+0x186>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006124:	2b00      	cmp	r3, #0
 8006126:	d130      	bne.n	800618a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	2200      	movs	r2, #0
 8006130:	2180      	movs	r1, #128	@ 0x80
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f87f 	bl	8006236 <I2C_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e04d      	b.n	80061de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	2bff      	cmp	r3, #255	@ 0xff
 800614a:	d90e      	bls.n	800616a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	22ff      	movs	r2, #255	@ 0xff
 8006150:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006156:	b2da      	uxtb	r2, r3
 8006158:	8979      	ldrh	r1, [r7, #10]
 800615a:	2300      	movs	r3, #0
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fab6 	bl	80066d4 <I2C_TransferConfig>
 8006168:	e00f      	b.n	800618a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006178:	b2da      	uxtb	r2, r3
 800617a:	8979      	ldrh	r1, [r7, #10]
 800617c:	2300      	movs	r3, #0
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 faa5 	bl	80066d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d19d      	bne.n	80060d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	6a39      	ldr	r1, [r7, #32]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f8ec 	bl	8006376 <I2C_WaitOnSTOPFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e01a      	b.n	80061de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2220      	movs	r2, #32
 80061ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6859      	ldr	r1, [r3, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b0c      	ldr	r3, [pc, #48]	@ (80061ec <HAL_I2C_Master_Receive+0x1e8>)
 80061bc:	400b      	ands	r3, r1
 80061be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	80002400 	.word	0x80002400
 80061ec:	fe00e800 	.word	0xfe00e800

080061f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d103      	bne.n	800620e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b01      	cmp	r3, #1
 800621a:	d007      	beq.n	800622c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	619a      	str	r2, [r3, #24]
  }
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr

08006236 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006246:	e03b      	b.n	80062c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f961 	bl	8006514 <I2C_IsErrorOccurred>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e041      	b.n	80062e0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d02d      	beq.n	80062c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006264:	f7fc fb58 	bl	8002918 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d302      	bcc.n	800627a <I2C_WaitOnFlagUntilTimeout+0x44>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d122      	bne.n	80062c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699a      	ldr	r2, [r3, #24]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	429a      	cmp	r2, r3
 8006288:	bf0c      	ite	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	2300      	movne	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	429a      	cmp	r2, r3
 8006296:	d113      	bne.n	80062c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e00f      	b.n	80062e0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d0b4      	beq.n	8006248 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062f4:	e033      	b.n	800635e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f90a 	bl	8006514 <I2C_IsErrorOccurred>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e031      	b.n	800636e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d025      	beq.n	800635e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006312:	f7fc fb01 	bl	8002918 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	429a      	cmp	r2, r3
 8006320:	d302      	bcc.n	8006328 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d11a      	bne.n	800635e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b02      	cmp	r3, #2
 8006334:	d013      	beq.n	800635e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e007      	b.n	800636e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b02      	cmp	r3, #2
 800636a:	d1c4      	bne.n	80062f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006382:	e02f      	b.n	80063e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f8c3 	bl	8006514 <I2C_IsErrorOccurred>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e02d      	b.n	80063f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006398:	f7fc fabe 	bl	8002918 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d302      	bcc.n	80063ae <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11a      	bne.n	80063e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d013      	beq.n	80063e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c0:	f043 0220 	orr.w	r2, r3, #32
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e007      	b.n	80063f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d1c8      	bne.n	8006384 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800640c:	e071      	b.n	80064f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 f87e 	bl	8006514 <I2C_IsErrorOccurred>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b20      	cmp	r3, #32
 800642e:	d13b      	bne.n	80064a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d138      	bne.n	80064a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b04      	cmp	r3, #4
 8006442:	d105      	bne.n	8006450 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b10      	cmp	r3, #16
 800645c:	d121      	bne.n	80064a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2210      	movs	r2, #16
 8006464:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2204      	movs	r2, #4
 800646a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2220      	movs	r2, #32
 8006472:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6859      	ldr	r1, [r3, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4b24      	ldr	r3, [pc, #144]	@ (8006510 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006480:	400b      	ands	r3, r1
 8006482:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	75fb      	strb	r3, [r7, #23]
 80064a0:	e002      	b.n	80064a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80064a8:	f7fc fa36 	bl	8002918 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d119      	bne.n	80064f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d116      	bne.n	80064f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d00f      	beq.n	80064f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d6:	f043 0220 	orr.w	r2, r3, #32
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d002      	beq.n	8006506 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d083      	beq.n	800640e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006506:	7dfb      	ldrb	r3, [r7, #23]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	fe00e800 	.word	0xfe00e800

08006514 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	@ 0x28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	d068      	beq.n	8006612 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2210      	movs	r2, #16
 8006546:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006548:	e049      	b.n	80065de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d045      	beq.n	80065de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006552:	f7fc f9e1 	bl	8002918 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	429a      	cmp	r2, r3
 8006560:	d302      	bcc.n	8006568 <I2C_IsErrorOccurred+0x54>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d13a      	bne.n	80065de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006572:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800657a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800658a:	d121      	bne.n	80065d0 <I2C_IsErrorOccurred+0xbc>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006592:	d01d      	beq.n	80065d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006594:	7cfb      	ldrb	r3, [r7, #19]
 8006596:	2b20      	cmp	r3, #32
 8006598:	d01a      	beq.n	80065d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065aa:	f7fc f9b5 	bl	8002918 <HAL_GetTick>
 80065ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065b0:	e00e      	b.n	80065d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065b2:	f7fc f9b1 	bl	8002918 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b19      	cmp	r3, #25
 80065be:	d907      	bls.n	80065d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	f043 0320 	orr.w	r3, r3, #32
 80065c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80065ce:	e006      	b.n	80065de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d1e9      	bne.n	80065b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d003      	beq.n	80065f4 <I2C_IsErrorOccurred+0xe0>
 80065ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0aa      	beq.n	800654a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d103      	bne.n	8006604 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2220      	movs	r2, #32
 8006602:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	f043 0304 	orr.w	r3, r3, #4
 800660a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	f043 0308 	orr.w	r3, r3, #8
 800664c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006656:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	f043 0302 	orr.w	r3, r3, #2
 800666e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01c      	beq.n	80066c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff fdb1 	bl	80061f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <I2C_IsErrorOccurred+0x1bc>)
 800669a:	400b      	ands	r3, r1
 800669c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80066c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3728      	adds	r7, #40	@ 0x28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	fe00e800 	.word	0xfe00e800

080066d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	817b      	strh	r3, [r7, #10]
 80066e2:	4613      	mov	r3, r2
 80066e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066e6:	897b      	ldrh	r3, [r7, #10]
 80066e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066ec:	7a7b      	ldrb	r3, [r7, #9]
 80066ee:	041b      	lsls	r3, r3, #16
 80066f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006702:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	0d5b      	lsrs	r3, r3, #21
 800670e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006712:	4b07      	ldr	r3, [pc, #28]	@ (8006730 <I2C_TransferConfig+0x5c>)
 8006714:	430b      	orrs	r3, r1
 8006716:	43db      	mvns	r3, r3
 8006718:	ea02 0103 	and.w	r1, r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr
 8006730:	03ff63ff 	.word	0x03ff63ff

08006734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b20      	cmp	r3, #32
 8006748:	d138      	bne.n	80067bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006754:	2302      	movs	r3, #2
 8006756:	e032      	b.n	80067be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	@ 0x24
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0201 	bic.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6819      	ldr	r1, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	e000      	b.n	80067be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067bc:	2302      	movs	r3, #2
  }
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bc80      	pop	{r7}
 80067c6:	4770      	bx	lr

080067c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d139      	bne.n	8006852 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e033      	b.n	8006854 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2224      	movs	r2, #36	@ 0x24
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800681a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	e000      	b.n	8006854 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006852:	2302      	movs	r3, #2
  }
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr
	...

08006860 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006864:	4b04      	ldr	r3, [pc, #16]	@ (8006878 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a03      	ldr	r2, [pc, #12]	@ (8006878 <HAL_PWR_EnableBkUpAccess+0x18>)
 800686a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr
 8006878:	58000400 	.word	0x58000400

0800687c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10c      	bne.n	80068a8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800688e:	4b13      	ldr	r3, [pc, #76]	@ (80068dc <HAL_PWR_EnterSLEEPMode+0x60>)
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800689a:	d10d      	bne.n	80068b8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800689c:	f000 f83c 	bl	8006918 <HAL_PWREx_DisableLowPowerRunMode>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80068a6:	e015      	b.n	80068d4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80068a8:	4b0c      	ldr	r3, [pc, #48]	@ (80068dc <HAL_PWR_EnterSLEEPMode+0x60>)
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80068b4:	f000 f822 	bl	80068fc <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80068b8:	4b09      	ldr	r3, [pc, #36]	@ (80068e0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	4a08      	ldr	r2, [pc, #32]	@ (80068e0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80068be:	f023 0304 	bic.w	r3, r3, #4
 80068c2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80068ca:	bf30      	wfi
 80068cc:	e002      	b.n	80068d4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80068ce:	bf40      	sev
    __WFE();
 80068d0:	bf20      	wfe
    __WFE();
 80068d2:	bf20      	wfe
  }
}
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	58000400 	.word	0x58000400
 80068e0:	e000ed00 	.word	0xe000ed00

080068e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80068e8:	4b03      	ldr	r3, [pc, #12]	@ (80068f8 <HAL_PWREx_GetVoltageRange+0x14>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr
 80068f8:	58000400 	.word	0x58000400

080068fc <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006900:	4b04      	ldr	r3, [pc, #16]	@ (8006914 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a03      	ldr	r2, [pc, #12]	@ (8006914 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800690a:	6013      	str	r3, [r2, #0]
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr
 8006914:	58000400 	.word	0x58000400

08006918 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800691e:	4b16      	ldr	r3, [pc, #88]	@ (8006978 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a15      	ldr	r2, [pc, #84]	@ (8006978 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006924:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006928:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800692a:	4b14      	ldr	r3, [pc, #80]	@ (800697c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2232      	movs	r2, #50	@ 0x32
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	4a12      	ldr	r2, [pc, #72]	@ (8006980 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006936:	fba2 2303 	umull	r2, r3, r2, r3
 800693a:	0c9b      	lsrs	r3, r3, #18
 800693c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800693e:	e002      	b.n	8006946 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3b01      	subs	r3, #1
 8006944:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006946:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800694e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006952:	d102      	bne.n	800695a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f2      	bne.n	8006940 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800695a:	4b07      	ldr	r3, [pc, #28]	@ (8006978 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006966:	d101      	bne.n	800696c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e000      	b.n	800696e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr
 8006978:	58000400 	.word	0x58000400
 800697c:	20000000 	.word	0x20000000
 8006980:	431bde83 	.word	0x431bde83

08006984 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800698e:	4b10      	ldr	r3, [pc, #64]	@ (80069d0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f023 0307 	bic.w	r3, r3, #7
 8006996:	4a0e      	ldr	r2, [pc, #56]	@ (80069d0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006998:	f043 0302 	orr.w	r3, r3, #2
 800699c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800699e:	4b0d      	ldr	r3, [pc, #52]	@ (80069d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	4a0c      	ldr	r2, [pc, #48]	@ (80069d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80069a4:	f043 0304 	orr.w	r3, r3, #4
 80069a8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80069b0:	bf30      	wfi
 80069b2:	e002      	b.n	80069ba <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80069b4:	bf40      	sev
    __WFE();
 80069b6:	bf20      	wfe
    __WFE();
 80069b8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80069ba:	4b06      	ldr	r3, [pc, #24]	@ (80069d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	4a05      	ldr	r2, [pc, #20]	@ (80069d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80069c0:	f023 0304 	bic.w	r3, r3, #4
 80069c4:	6113      	str	r3, [r2, #16]
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr
 80069d0:	58000400 	.word	0x58000400
 80069d4:	e000ed00 	.word	0xe000ed00

080069d8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80069dc:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e8:	d101      	bne.n	80069ee <LL_PWR_IsEnabledBkUpAccess+0x16>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr
 80069f8:	58000400 	.word	0x58000400

080069fc <LL_RCC_HSE_EnableTcxo>:
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a0e:	6013      	str	r3, [r2, #0]
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr

08006a18 <LL_RCC_HSE_DisableTcxo>:
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a2a:	6013      	str	r3, [r2, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a46:	d101      	bne.n	8006a4c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <LL_RCC_HSE_Enable>:
{
 8006a56:	b480      	push	{r7}
 8006a58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a68:	6013      	str	r3, [r2, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr

08006a72 <LL_RCC_HSE_Disable>:
{
 8006a72:	b480      	push	{r7}
 8006a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a84:	6013      	str	r3, [r2, #0]
}
 8006a86:	bf00      	nop
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr

08006a8e <LL_RCC_HSE_IsReady>:
{
 8006a8e:	b480      	push	{r7}
 8006a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aa0:	d101      	bne.n	8006aa6 <LL_RCC_HSE_IsReady+0x18>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <LL_RCC_HSE_IsReady+0x1a>
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <LL_RCC_HSI_Enable>:
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ac2:	6013      	str	r3, [r2, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <LL_RCC_HSI_Disable>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ada:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ade:	6013      	str	r3, [r2, #0]
}
 8006ae0:	bf00      	nop
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <LL_RCC_HSI_IsReady>:
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006afa:	d101      	bne.n	8006b00 <LL_RCC_HSI_IsReady+0x18>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <LL_RCC_HSI_IsReady+0x1a>
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr

08006b0a <LL_RCC_HSI_SetCalibTrimming>:
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	061b      	lsls	r3, r3, #24
 8006b20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b24:	4313      	orrs	r3, r2
 8006b26:	604b      	str	r3, [r1, #4]
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <LL_RCC_LSE_IsReady>:
{
 8006b32:	b480      	push	{r7}
 8006b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d101      	bne.n	8006b4a <LL_RCC_LSE_IsReady+0x18>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <LL_RCC_LSE_IsReady+0x1a>
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <LL_RCC_LSI_Enable>:
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b6c:	bf00      	nop
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr

08006b74 <LL_RCC_LSI_Disable>:
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b8c:	bf00      	nop
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <LL_RCC_LSI_IsReady>:
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d101      	bne.n	8006bac <LL_RCC_LSI_IsReady+0x18>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <LL_RCC_LSI_IsReady+0x1a>
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr

08006bb6 <LL_RCC_MSI_Enable>:
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6013      	str	r3, [r2, #0]
}
 8006bca:	bf00      	nop
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <LL_RCC_MSI_Disable>:
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	6013      	str	r3, [r2, #0]
}
 8006be6:	bf00      	nop
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <LL_RCC_MSI_IsReady>:
{
 8006bee:	b480      	push	{r7}
 8006bf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d101      	bne.n	8006c04 <LL_RCC_MSI_IsReady+0x16>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <LL_RCC_MSI_IsReady+0x18>
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr

08006c0e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006c0e:	b480      	push	{r7}
 8006c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0308 	and.w	r3, r3, #8
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d101      	bne.n	8006c24 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <LL_RCC_MSI_GetRange>:
{
 8006c2e:	b480      	push	{r7}
 8006c30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr

08006c44 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <LL_RCC_MSI_SetCalibTrimming>:
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c76:	4313      	orrs	r3, r2
 8006c78:	604b      	str	r3, [r1, #4]
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr

08006c84 <LL_RCC_SetSysClkSource>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f023 0203 	bic.w	r2, r3, #3
 8006c96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	608b      	str	r3, [r1, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr

08006caa <LL_RCC_GetSysClkSource>:
{
 8006caa:	b480      	push	{r7}
 8006cac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 030c 	and.w	r3, r3, #12
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <LL_RCC_SetAHBPrescaler>:
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	608b      	str	r3, [r1, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <LL_RCC_SetAHB3Prescaler>:
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006cf6:	f023 020f 	bic.w	r2, r3, #15
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <LL_RCC_SetAPB1Prescaler>:
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	608b      	str	r3, [r1, #8]
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <LL_RCC_SetAPB2Prescaler>:
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	608b      	str	r3, [r1, #8]
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr

08006d5e <LL_RCC_GetAHBPrescaler>:
{
 8006d5e:	b480      	push	{r7}
 8006d60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <LL_RCC_GetAHB3Prescaler>:
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr

08006d8e <LL_RCC_GetAPB1Prescaler>:
{
 8006d8e:	b480      	push	{r7}
 8006d90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <LL_RCC_GetAPB2Prescaler>:
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dcc:	6013      	str	r3, [r2, #0]
}
 8006dce:	bf00      	nop
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006de4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006de8:	6013      	str	r3, [r2, #0]
}
 8006dea:	bf00      	nop
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006df2:	b480      	push	{r7}
 8006df4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e04:	d101      	bne.n	8006e0a <LL_RCC_PLL_IsReady+0x18>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <LL_RCC_PLL_IsReady+0x1a>
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	0a1b      	lsrs	r3, r3, #8
 8006e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr

08006e2c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006e42:	b480      	push	{r7}
 8006e44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f003 0303 	and.w	r3, r3, #3
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr

08006e6e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e80:	d101      	bne.n	8006e86 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e98:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea4:	d101      	bne.n	8006eaa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ec6:	d101      	bne.n	8006ecc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ee4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ee8:	d101      	bne.n	8006eee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e36f      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f0a:	f7ff fece 	bl	8006caa <LL_RCC_GetSysClkSource>
 8006f0e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f10:	f7ff ffa2 	bl	8006e58 <LL_RCC_PLL_GetMainSource>
 8006f14:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 80c4 	beq.w	80070ac <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_RCC_OscConfig+0x3e>
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	2b0c      	cmp	r3, #12
 8006f2e:	d176      	bne.n	800701e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d173      	bne.n	800701e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e353      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_RCC_OscConfig+0x68>
 8006f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f5e:	e006      	b.n	8006f6e <HAL_RCC_OscConfig+0x76>
 8006f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f68:	091b      	lsrs	r3, r3, #4
 8006f6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d222      	bcs.n	8006fb8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fd3c 	bl	80079f4 <RCC_SetFlashLatencyFromMSIRange>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e331      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f90:	f043 0308 	orr.w	r3, r3, #8
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fe53 	bl	8006c5c <LL_RCC_MSI_SetCalibTrimming>
 8006fb6:	e021      	b.n	8006ffc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fc2:	f043 0308 	orr.w	r3, r3, #8
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff fe3a 	bl	8006c5c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fd01 	bl	80079f4 <RCC_SetFlashLatencyFromMSIRange>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e2f6      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006ffc:	f000 fcc2 	bl	8007984 <HAL_RCC_GetHCLKFreq>
 8007000:	4603      	mov	r3, r0
 8007002:	4aa7      	ldr	r2, [pc, #668]	@ (80072a0 <HAL_RCC_OscConfig+0x3a8>)
 8007004:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8007006:	4ba7      	ldr	r3, [pc, #668]	@ (80072a4 <HAL_RCC_OscConfig+0x3ac>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4618      	mov	r0, r3
 800700c:	f7fb fc7a 	bl	8002904 <HAL_InitTick>
 8007010:	4603      	mov	r3, r0
 8007012:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007014:	7cfb      	ldrb	r3, [r7, #19]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d047      	beq.n	80070aa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800701a:	7cfb      	ldrb	r3, [r7, #19]
 800701c:	e2e5      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d02c      	beq.n	8007080 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007026:	f7ff fdc6 	bl	8006bb6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800702a:	f7fb fc75 	bl	8002918 <HAL_GetTick>
 800702e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007030:	e008      	b.n	8007044 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007032:	f7fb fc71 	bl	8002918 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e2d2      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007044:	f7ff fdd3 	bl	8006bee <LL_RCC_MSI_IsReady>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f1      	beq.n	8007032 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800704e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007058:	f043 0308 	orr.w	r3, r3, #8
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007070:	4313      	orrs	r3, r2
 8007072:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff fdef 	bl	8006c5c <LL_RCC_MSI_SetCalibTrimming>
 800707e:	e015      	b.n	80070ac <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007080:	f7ff fda7 	bl	8006bd2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007084:	f7fb fc48 	bl	8002918 <HAL_GetTick>
 8007088:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800708c:	f7fb fc44 	bl	8002918 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e2a5      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800709e:	f7ff fda6 	bl	8006bee <LL_RCC_MSI_IsReady>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f1      	bne.n	800708c <HAL_RCC_OscConfig+0x194>
 80070a8:	e000      	b.n	80070ac <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80070aa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d058      	beq.n	800716a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d005      	beq.n	80070ca <HAL_RCC_OscConfig+0x1d2>
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b0c      	cmp	r3, #12
 80070c2:	d108      	bne.n	80070d6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d105      	bne.n	80070d6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d14b      	bne.n	800716a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e289      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80070d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070e8:	4313      	orrs	r3, r2
 80070ea:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070f4:	d102      	bne.n	80070fc <HAL_RCC_OscConfig+0x204>
 80070f6:	f7ff fcae 	bl	8006a56 <LL_RCC_HSE_Enable>
 80070fa:	e00d      	b.n	8007118 <HAL_RCC_OscConfig+0x220>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8007104:	d104      	bne.n	8007110 <HAL_RCC_OscConfig+0x218>
 8007106:	f7ff fc79 	bl	80069fc <LL_RCC_HSE_EnableTcxo>
 800710a:	f7ff fca4 	bl	8006a56 <LL_RCC_HSE_Enable>
 800710e:	e003      	b.n	8007118 <HAL_RCC_OscConfig+0x220>
 8007110:	f7ff fcaf 	bl	8006a72 <LL_RCC_HSE_Disable>
 8007114:	f7ff fc80 	bl	8006a18 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d012      	beq.n	8007146 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007120:	f7fb fbfa 	bl	8002918 <HAL_GetTick>
 8007124:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007128:	f7fb fbf6 	bl	8002918 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b64      	cmp	r3, #100	@ 0x64
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e257      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800713a:	f7ff fca8 	bl	8006a8e <LL_RCC_HSE_IsReady>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0f1      	beq.n	8007128 <HAL_RCC_OscConfig+0x230>
 8007144:	e011      	b.n	800716a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7fb fbe7 	bl	8002918 <HAL_GetTick>
 800714a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714e:	f7fb fbe3 	bl	8002918 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b64      	cmp	r3, #100	@ 0x64
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e244      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007160:	f7ff fc95 	bl	8006a8e <LL_RCC_HSE_IsReady>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f1      	bne.n	800714e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d046      	beq.n	8007204 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	2b04      	cmp	r3, #4
 800717a:	d005      	beq.n	8007188 <HAL_RCC_OscConfig+0x290>
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b0c      	cmp	r3, #12
 8007180:	d10e      	bne.n	80071a0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d10b      	bne.n	80071a0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e22a      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff fcb6 	bl	8006b0a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800719e:	e031      	b.n	8007204 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d019      	beq.n	80071dc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071a8:	f7ff fc82 	bl	8006ab0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ac:	f7fb fbb4 	bl	8002918 <HAL_GetTick>
 80071b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b4:	f7fb fbb0 	bl	8002918 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e211      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80071c6:	f7ff fc8f 	bl	8006ae8 <LL_RCC_HSI_IsReady>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f1      	beq.n	80071b4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff fc98 	bl	8006b0a <LL_RCC_HSI_SetCalibTrimming>
 80071da:	e013      	b.n	8007204 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071dc:	f7ff fc76 	bl	8006acc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e0:	f7fb fb9a 	bl	8002918 <HAL_GetTick>
 80071e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e8:	f7fb fb96 	bl	8002918 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e1f7      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80071fa:	f7ff fc75 	bl	8006ae8 <LL_RCC_HSI_IsReady>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1f1      	bne.n	80071e8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d06e      	beq.n	80072ee <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d056      	beq.n	80072c6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8007218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800721c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007220:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69da      	ldr	r2, [r3, #28]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	429a      	cmp	r2, r3
 800722e:	d031      	beq.n	8007294 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d006      	beq.n	8007248 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e1d0      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d013      	beq.n	800727a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8007252:	f7ff fc8f 	bl	8006b74 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007256:	f7fb fb5f 	bl	8002918 <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800725c:	e008      	b.n	8007270 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800725e:	f7fb fb5b 	bl	8002918 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b11      	cmp	r3, #17
 800726a:	d901      	bls.n	8007270 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e1bc      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8007270:	f7ff fc90 	bl	8006b94 <LL_RCC_LSI_IsReady>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f1      	bne.n	800725e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800727a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800727e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007282:	f023 0210 	bic.w	r2, r3, #16
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007294:	f7ff fc5e 	bl	8006b54 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007298:	f7fb fb3e 	bl	8002918 <HAL_GetTick>
 800729c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800729e:	e00c      	b.n	80072ba <HAL_RCC_OscConfig+0x3c2>
 80072a0:	20000000 	.word	0x20000000
 80072a4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a8:	f7fb fb36 	bl	8002918 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b11      	cmp	r3, #17
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e197      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80072ba:	f7ff fc6b 	bl	8006b94 <LL_RCC_LSI_IsReady>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f1      	beq.n	80072a8 <HAL_RCC_OscConfig+0x3b0>
 80072c4:	e013      	b.n	80072ee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072c6:	f7ff fc55 	bl	8006b74 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ca:	f7fb fb25 	bl	8002918 <HAL_GetTick>
 80072ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80072d0:	e008      	b.n	80072e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d2:	f7fb fb21 	bl	8002918 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b11      	cmp	r3, #17
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e182      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80072e4:	f7ff fc56 	bl	8006b94 <LL_RCC_LSI_IsReady>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1f1      	bne.n	80072d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 80d8 	beq.w	80074ac <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80072fc:	f7ff fb6c 	bl	80069d8 <LL_PWR_IsEnabledBkUpAccess>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d113      	bne.n	800732e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007306:	f7ff faab 	bl	8006860 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800730a:	f7fb fb05 	bl	8002918 <HAL_GetTick>
 800730e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007312:	f7fb fb01 	bl	8002918 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e162      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007324:	f7ff fb58 	bl	80069d8 <LL_PWR_IsEnabledBkUpAccess>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0f1      	beq.n	8007312 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d07b      	beq.n	800742e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2b85      	cmp	r3, #133	@ 0x85
 800733c:	d003      	beq.n	8007346 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	2b05      	cmp	r3, #5
 8007344:	d109      	bne.n	800735a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007352:	f043 0304 	orr.w	r3, r3, #4
 8007356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800735a:	f7fb fadd 	bl	8002918 <HAL_GetTick>
 800735e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007368:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007374:	e00a      	b.n	800738c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007376:	f7fb facf 	bl	8002918 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007384:	4293      	cmp	r3, r2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e12e      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800738c:	f7ff fbd1 	bl	8006b32 <LL_RCC_LSE_IsReady>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0ef      	beq.n	8007376 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2b81      	cmp	r3, #129	@ 0x81
 800739c:	d003      	beq.n	80073a6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b85      	cmp	r3, #133	@ 0x85
 80073a4:	d121      	bne.n	80073ea <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a6:	f7fb fab7 	bl	8002918 <HAL_GetTick>
 80073aa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80073c0:	e00a      	b.n	80073d8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c2:	f7fb faa9 	bl	8002918 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e108      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80073d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0ec      	beq.n	80073c2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80073e8:	e060      	b.n	80074ac <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ea:	f7fb fa95 	bl	8002918 <HAL_GetTick>
 80073ee:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007404:	e00a      	b.n	800741c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007406:	f7fb fa87 	bl	8002918 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007414:	4293      	cmp	r3, r2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e0e6      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800741c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1ec      	bne.n	8007406 <HAL_RCC_OscConfig+0x50e>
 800742c:	e03e      	b.n	80074ac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800742e:	f7fb fa73 	bl	8002918 <HAL_GetTick>
 8007432:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007448:	e00a      	b.n	8007460 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800744a:	f7fb fa65 	bl	8002918 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007458:	4293      	cmp	r3, r2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e0c4      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1ec      	bne.n	800744a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007470:	f7fb fa52 	bl	8002918 <HAL_GetTick>
 8007474:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007482:	f023 0301 	bic.w	r3, r3, #1
 8007486:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800748a:	e00a      	b.n	80074a2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748c:	f7fb fa44 	bl	8002918 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800749a:	4293      	cmp	r3, r2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e0a3      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80074a2:	f7ff fb46 	bl	8006b32 <LL_RCC_LSE_IsReady>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1ef      	bne.n	800748c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8099 	beq.w	80075e8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	2b0c      	cmp	r3, #12
 80074ba:	d06c      	beq.n	8007596 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d14b      	bne.n	800755c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074c4:	f7ff fc87 	bl	8006dd6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c8:	f7fb fa26 	bl	8002918 <HAL_GetTick>
 80074cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d0:	f7fb fa22 	bl	8002918 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b0a      	cmp	r3, #10
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e083      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80074e2:	f7ff fc86 	bl	8006df2 <LL_RCC_PLL_IsReady>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f1      	bne.n	80074d0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	4b40      	ldr	r3, [pc, #256]	@ (80075f4 <HAL_RCC_OscConfig+0x6fc>)
 80074f4:	4013      	ands	r3, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80074fe:	4311      	orrs	r1, r2
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007504:	0212      	lsls	r2, r2, #8
 8007506:	4311      	orrs	r1, r2
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800750c:	4311      	orrs	r1, r2
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007512:	4311      	orrs	r1, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007518:	430a      	orrs	r2, r1
 800751a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800751e:	4313      	orrs	r3, r2
 8007520:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007522:	f7ff fc4a 	bl	8006dba <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007534:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007536:	f7fb f9ef 	bl	8002918 <HAL_GetTick>
 800753a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800753c:	e008      	b.n	8007550 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800753e:	f7fb f9eb 	bl	8002918 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b0a      	cmp	r3, #10
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e04c      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007550:	f7ff fc4f 	bl	8006df2 <LL_RCC_PLL_IsReady>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0f1      	beq.n	800753e <HAL_RCC_OscConfig+0x646>
 800755a:	e045      	b.n	80075e8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800755c:	f7ff fc3b 	bl	8006dd6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007560:	f7fb f9da 	bl	8002918 <HAL_GetTick>
 8007564:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007566:	e008      	b.n	800757a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007568:	f7fb f9d6 	bl	8002918 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b0a      	cmp	r3, #10
 8007574:	d901      	bls.n	800757a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e037      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800757a:	f7ff fc3a 	bl	8006df2 <LL_RCC_PLL_IsReady>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f1      	bne.n	8007568 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800758e:	4b1a      	ldr	r3, [pc, #104]	@ (80075f8 <HAL_RCC_OscConfig+0x700>)
 8007590:	4013      	ands	r3, r2
 8007592:	60cb      	str	r3, [r1, #12]
 8007594:	e028      	b.n	80075e8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e023      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f003 0203 	and.w	r2, r3, #3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d115      	bne.n	80075e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d10e      	bne.n	80075e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d106      	bne.n	80075e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e000      	b.n	80075ea <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3720      	adds	r7, #32
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	11c1808c 	.word	0x11c1808c
 80075f8:	eefefffc 	.word	0xeefefffc

080075fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e10f      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007610:	4b89      	ldr	r3, [pc, #548]	@ (8007838 <HAL_RCC_ClockConfig+0x23c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d91b      	bls.n	8007656 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761e:	4b86      	ldr	r3, [pc, #536]	@ (8007838 <HAL_RCC_ClockConfig+0x23c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f023 0207 	bic.w	r2, r3, #7
 8007626:	4984      	ldr	r1, [pc, #528]	@ (8007838 <HAL_RCC_ClockConfig+0x23c>)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	4313      	orrs	r3, r2
 800762c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800762e:	f7fb f973 	bl	8002918 <HAL_GetTick>
 8007632:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007634:	e008      	b.n	8007648 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007636:	f7fb f96f 	bl	8002918 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e0f3      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007648:	4b7b      	ldr	r3, [pc, #492]	@ (8007838 <HAL_RCC_ClockConfig+0x23c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d1ef      	bne.n	8007636 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d016      	beq.n	8007690 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fb2a 	bl	8006cc0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800766c:	f7fb f954 	bl	8002918 <HAL_GetTick>
 8007670:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007672:	e008      	b.n	8007686 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007674:	f7fb f950 	bl	8002918 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e0d4      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007686:	f7ff fbf2 	bl	8006e6e <LL_RCC_IsActiveFlag_HPRE>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0f1      	beq.n	8007674 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d016      	beq.n	80076ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fb20 	bl	8006ce6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076a6:	f7fb f937 	bl	8002918 <HAL_GetTick>
 80076aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80076ac:	e008      	b.n	80076c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076ae:	f7fb f933 	bl	8002918 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e0b7      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80076c0:	f7ff fbe6 	bl	8006e90 <LL_RCC_IsActiveFlag_SHDHPRE>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0f1      	beq.n	80076ae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d016      	beq.n	8007704 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff fb19 	bl	8006d12 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076e0:	f7fb f91a 	bl	8002918 <HAL_GetTick>
 80076e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80076e6:	e008      	b.n	80076fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076e8:	f7fb f916 	bl	8002918 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e09a      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80076fa:	f7ff fbdb 	bl	8006eb4 <LL_RCC_IsActiveFlag_PPRE1>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f1      	beq.n	80076e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	2b00      	cmp	r3, #0
 800770e:	d017      	beq.n	8007740 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fb0e 	bl	8006d38 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800771c:	f7fb f8fc 	bl	8002918 <HAL_GetTick>
 8007720:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007722:	e008      	b.n	8007736 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007724:	f7fb f8f8 	bl	8002918 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e07c      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007736:	f7ff fbce 	bl	8006ed6 <LL_RCC_IsActiveFlag_PPRE2>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0f1      	beq.n	8007724 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d043      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b02      	cmp	r3, #2
 8007752:	d106      	bne.n	8007762 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007754:	f7ff f99b 	bl	8006a8e <LL_RCC_HSE_IsReady>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d11e      	bne.n	800779c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e066      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b03      	cmp	r3, #3
 8007768:	d106      	bne.n	8007778 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800776a:	f7ff fb42 	bl	8006df2 <LL_RCC_PLL_IsReady>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d113      	bne.n	800779c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e05b      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007780:	f7ff fa35 	bl	8006bee <LL_RCC_MSI_IsReady>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d108      	bne.n	800779c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e050      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800778e:	f7ff f9ab 	bl	8006ae8 <LL_RCC_HSI_IsReady>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e049      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff fa6f 	bl	8006c84 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077a6:	f7fb f8b7 	bl	8002918 <HAL_GetTick>
 80077aa:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ac:	e00a      	b.n	80077c4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ae:	f7fb f8b3 	bl	8002918 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077bc:	4293      	cmp	r3, r2
 80077be:	d901      	bls.n	80077c4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e035      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c4:	f7ff fa71 	bl	8006caa <LL_RCC_GetSysClkSource>
 80077c8:	4602      	mov	r2, r0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d1ec      	bne.n	80077ae <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077d4:	4b18      	ldr	r3, [pc, #96]	@ (8007838 <HAL_RCC_ClockConfig+0x23c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d21b      	bcs.n	800781a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e2:	4b15      	ldr	r3, [pc, #84]	@ (8007838 <HAL_RCC_ClockConfig+0x23c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 0207 	bic.w	r2, r3, #7
 80077ea:	4913      	ldr	r1, [pc, #76]	@ (8007838 <HAL_RCC_ClockConfig+0x23c>)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077f2:	f7fb f891 	bl	8002918 <HAL_GetTick>
 80077f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f8:	e008      	b.n	800780c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80077fa:	f7fb f88d 	bl	8002918 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e011      	b.n	8007830 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800780c:	4b0a      	ldr	r3, [pc, #40]	@ (8007838 <HAL_RCC_ClockConfig+0x23c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d1ef      	bne.n	80077fa <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800781a:	f000 f8b3 	bl	8007984 <HAL_RCC_GetHCLKFreq>
 800781e:	4603      	mov	r3, r0
 8007820:	4a06      	ldr	r2, [pc, #24]	@ (800783c <HAL_RCC_ClockConfig+0x240>)
 8007822:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007824:	4b06      	ldr	r3, [pc, #24]	@ (8007840 <HAL_RCC_ClockConfig+0x244>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4618      	mov	r0, r3
 800782a:	f7fb f86b 	bl	8002904 <HAL_InitTick>
 800782e:	4603      	mov	r3, r0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	58004000 	.word	0x58004000
 800783c:	20000000 	.word	0x20000000
 8007840:	20000004 	.word	0x20000004

08007844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007852:	f7ff fa2a 	bl	8006caa <LL_RCC_GetSysClkSource>
 8007856:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007858:	f7ff fafe 	bl	8006e58 <LL_RCC_PLL_GetMainSource>
 800785c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0x2c>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b0c      	cmp	r3, #12
 8007868:	d139      	bne.n	80078de <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d136      	bne.n	80078de <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007870:	f7ff f9cd 	bl	8006c0e <LL_RCC_MSI_IsEnabledRangeSelect>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d115      	bne.n	80078a6 <HAL_RCC_GetSysClockFreq+0x62>
 800787a:	f7ff f9c8 	bl	8006c0e <LL_RCC_MSI_IsEnabledRangeSelect>
 800787e:	4603      	mov	r3, r0
 8007880:	2b01      	cmp	r3, #1
 8007882:	d106      	bne.n	8007892 <HAL_RCC_GetSysClockFreq+0x4e>
 8007884:	f7ff f9d3 	bl	8006c2e <LL_RCC_MSI_GetRange>
 8007888:	4603      	mov	r3, r0
 800788a:	0a1b      	lsrs	r3, r3, #8
 800788c:	f003 030f 	and.w	r3, r3, #15
 8007890:	e005      	b.n	800789e <HAL_RCC_GetSysClockFreq+0x5a>
 8007892:	f7ff f9d7 	bl	8006c44 <LL_RCC_MSI_GetRangeAfterStandby>
 8007896:	4603      	mov	r3, r0
 8007898:	0a1b      	lsrs	r3, r3, #8
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	4a36      	ldr	r2, [pc, #216]	@ (8007978 <HAL_RCC_GetSysClockFreq+0x134>)
 80078a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a4:	e014      	b.n	80078d0 <HAL_RCC_GetSysClockFreq+0x8c>
 80078a6:	f7ff f9b2 	bl	8006c0e <LL_RCC_MSI_IsEnabledRangeSelect>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d106      	bne.n	80078be <HAL_RCC_GetSysClockFreq+0x7a>
 80078b0:	f7ff f9bd 	bl	8006c2e <LL_RCC_MSI_GetRange>
 80078b4:	4603      	mov	r3, r0
 80078b6:	091b      	lsrs	r3, r3, #4
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	e005      	b.n	80078ca <HAL_RCC_GetSysClockFreq+0x86>
 80078be:	f7ff f9c1 	bl	8006c44 <LL_RCC_MSI_GetRangeAfterStandby>
 80078c2:	4603      	mov	r3, r0
 80078c4:	091b      	lsrs	r3, r3, #4
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	4a2b      	ldr	r2, [pc, #172]	@ (8007978 <HAL_RCC_GetSysClockFreq+0x134>)
 80078cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d115      	bne.n	8007904 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078dc:	e012      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d102      	bne.n	80078ea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078e4:	4b25      	ldr	r3, [pc, #148]	@ (800797c <HAL_RCC_GetSysClockFreq+0x138>)
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e00c      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d109      	bne.n	8007904 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80078f0:	f7ff f8a0 	bl	8006a34 <LL_RCC_HSE_IsEnabledDiv2>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d102      	bne.n	8007900 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80078fa:	4b20      	ldr	r3, [pc, #128]	@ (800797c <HAL_RCC_GetSysClockFreq+0x138>)
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	e001      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007900:	4b1f      	ldr	r3, [pc, #124]	@ (8007980 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007902:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007904:	f7ff f9d1 	bl	8006caa <LL_RCC_GetSysClkSource>
 8007908:	4603      	mov	r3, r0
 800790a:	2b0c      	cmp	r3, #12
 800790c:	d12f      	bne.n	800796e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800790e:	f7ff faa3 	bl	8006e58 <LL_RCC_PLL_GetMainSource>
 8007912:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b02      	cmp	r3, #2
 8007918:	d003      	beq.n	8007922 <HAL_RCC_GetSysClockFreq+0xde>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b03      	cmp	r3, #3
 800791e:	d003      	beq.n	8007928 <HAL_RCC_GetSysClockFreq+0xe4>
 8007920:	e00d      	b.n	800793e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007922:	4b16      	ldr	r3, [pc, #88]	@ (800797c <HAL_RCC_GetSysClockFreq+0x138>)
 8007924:	60fb      	str	r3, [r7, #12]
        break;
 8007926:	e00d      	b.n	8007944 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007928:	f7ff f884 	bl	8006a34 <LL_RCC_HSE_IsEnabledDiv2>
 800792c:	4603      	mov	r3, r0
 800792e:	2b01      	cmp	r3, #1
 8007930:	d102      	bne.n	8007938 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007932:	4b12      	ldr	r3, [pc, #72]	@ (800797c <HAL_RCC_GetSysClockFreq+0x138>)
 8007934:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007936:	e005      	b.n	8007944 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007938:	4b11      	ldr	r3, [pc, #68]	@ (8007980 <HAL_RCC_GetSysClockFreq+0x13c>)
 800793a:	60fb      	str	r3, [r7, #12]
        break;
 800793c:	e002      	b.n	8007944 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	60fb      	str	r3, [r7, #12]
        break;
 8007942:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007944:	f7ff fa66 	bl	8006e14 <LL_RCC_PLL_GetN>
 8007948:	4602      	mov	r2, r0
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	fb03 f402 	mul.w	r4, r3, r2
 8007950:	f7ff fa77 	bl	8006e42 <LL_RCC_PLL_GetDivider>
 8007954:	4603      	mov	r3, r0
 8007956:	091b      	lsrs	r3, r3, #4
 8007958:	3301      	adds	r3, #1
 800795a:	fbb4 f4f3 	udiv	r4, r4, r3
 800795e:	f7ff fa65 	bl	8006e2c <LL_RCC_PLL_GetR>
 8007962:	4603      	mov	r3, r0
 8007964:	0f5b      	lsrs	r3, r3, #29
 8007966:	3301      	adds	r3, #1
 8007968:	fbb4 f3f3 	udiv	r3, r4, r3
 800796c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800796e:	697b      	ldr	r3, [r7, #20]
}
 8007970:	4618      	mov	r0, r3
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	bd90      	pop	{r4, r7, pc}
 8007978:	0802085c 	.word	0x0802085c
 800797c:	00f42400 	.word	0x00f42400
 8007980:	01e84800 	.word	0x01e84800

08007984 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007984:	b598      	push	{r3, r4, r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007988:	f7ff ff5c 	bl	8007844 <HAL_RCC_GetSysClockFreq>
 800798c:	4604      	mov	r4, r0
 800798e:	f7ff f9e6 	bl	8006d5e <LL_RCC_GetAHBPrescaler>
 8007992:	4603      	mov	r3, r0
 8007994:	091b      	lsrs	r3, r3, #4
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	4a03      	ldr	r2, [pc, #12]	@ (80079a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800799c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	bd98      	pop	{r3, r4, r7, pc}
 80079a8:	080207fc 	.word	0x080207fc

080079ac <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079ac:	b598      	push	{r3, r4, r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80079b0:	f7ff ffe8 	bl	8007984 <HAL_RCC_GetHCLKFreq>
 80079b4:	4604      	mov	r4, r0
 80079b6:	f7ff f9ea 	bl	8006d8e <LL_RCC_GetAPB1Prescaler>
 80079ba:	4603      	mov	r3, r0
 80079bc:	0a1b      	lsrs	r3, r3, #8
 80079be:	4a03      	ldr	r2, [pc, #12]	@ (80079cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80079c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	bd98      	pop	{r3, r4, r7, pc}
 80079cc:	0802083c 	.word	0x0802083c

080079d0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079d0:	b598      	push	{r3, r4, r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80079d4:	f7ff ffd6 	bl	8007984 <HAL_RCC_GetHCLKFreq>
 80079d8:	4604      	mov	r4, r0
 80079da:	f7ff f9e3 	bl	8006da4 <LL_RCC_GetAPB2Prescaler>
 80079de:	4603      	mov	r3, r0
 80079e0:	0adb      	lsrs	r3, r3, #11
 80079e2:	4a03      	ldr	r2, [pc, #12]	@ (80079f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	bd98      	pop	{r3, r4, r7, pc}
 80079f0:	0802083c 	.word	0x0802083c

080079f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	091b      	lsrs	r3, r3, #4
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	4a10      	ldr	r2, [pc, #64]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a0a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007a0c:	f7ff f9b2 	bl	8006d74 <LL_RCC_GetAHB3Prescaler>
 8007a10:	4603      	mov	r3, r0
 8007a12:	091b      	lsrs	r3, r3, #4
 8007a14:	f003 030f 	and.w	r3, r3, #15
 8007a18:	4a0c      	ldr	r2, [pc, #48]	@ (8007a4c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a24:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4a09      	ldr	r2, [pc, #36]	@ (8007a50 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2e:	0c9c      	lsrs	r4, r3, #18
 8007a30:	f7fe ff58 	bl	80068e4 <HAL_PWREx_GetVoltageRange>
 8007a34:	4603      	mov	r3, r0
 8007a36:	4619      	mov	r1, r3
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 f80b 	bl	8007a54 <RCC_SetFlashLatency>
 8007a3e:	4603      	mov	r3, r0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd90      	pop	{r4, r7, pc}
 8007a48:	0802085c 	.word	0x0802085c
 8007a4c:	080207fc 	.word	0x080207fc
 8007a50:	431bde83 	.word	0x431bde83

08007a54 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08e      	sub	sp, #56	@ 0x38
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007a5e:	4a3a      	ldr	r2, [pc, #232]	@ (8007b48 <RCC_SetFlashLatency+0xf4>)
 8007a60:	f107 0320 	add.w	r3, r7, #32
 8007a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a68:	6018      	str	r0, [r3, #0]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007a6e:	4a37      	ldr	r2, [pc, #220]	@ (8007b4c <RCC_SetFlashLatency+0xf8>)
 8007a70:	f107 0318 	add.w	r3, r7, #24
 8007a74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a78:	6018      	str	r0, [r3, #0]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007a7e:	4a34      	ldr	r2, [pc, #208]	@ (8007b50 <RCC_SetFlashLatency+0xfc>)
 8007a80:	f107 030c 	add.w	r3, r7, #12
 8007a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a94:	d11b      	bne.n	8007ace <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a96:	2300      	movs	r3, #0
 8007a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a9a:	e014      	b.n	8007ac6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	3338      	adds	r3, #56	@ 0x38
 8007aa2:	443b      	add	r3, r7
 8007aa4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d807      	bhi.n	8007ac0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	3338      	adds	r3, #56	@ 0x38
 8007ab6:	443b      	add	r3, r7
 8007ab8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007abe:	e021      	b.n	8007b04 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d9e7      	bls.n	8007a9c <RCC_SetFlashLatency+0x48>
 8007acc:	e01a      	b.n	8007b04 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ace:	2300      	movs	r3, #0
 8007ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ad2:	e014      	b.n	8007afe <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	3338      	adds	r3, #56	@ 0x38
 8007ada:	443b      	add	r3, r7
 8007adc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d807      	bhi.n	8007af8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	3338      	adds	r3, #56	@ 0x38
 8007aee:	443b      	add	r3, r7
 8007af0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007af4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007af6:	e005      	b.n	8007b04 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007afa:	3301      	adds	r3, #1
 8007afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d9e7      	bls.n	8007ad4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b04:	4b13      	ldr	r3, [pc, #76]	@ (8007b54 <RCC_SetFlashLatency+0x100>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f023 0207 	bic.w	r2, r3, #7
 8007b0c:	4911      	ldr	r1, [pc, #68]	@ (8007b54 <RCC_SetFlashLatency+0x100>)
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b10:	4313      	orrs	r3, r2
 8007b12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b14:	f7fa ff00 	bl	8002918 <HAL_GetTick>
 8007b18:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b1a:	e008      	b.n	8007b2e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b1c:	f7fa fefc 	bl	8002918 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d901      	bls.n	8007b2e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e007      	b.n	8007b3e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b2e:	4b09      	ldr	r3, [pc, #36]	@ (8007b54 <RCC_SetFlashLatency+0x100>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d1ef      	bne.n	8007b1c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3738      	adds	r7, #56	@ 0x38
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	0801ffb4 	.word	0x0801ffb4
 8007b4c:	0801ffbc 	.word	0x0801ffbc
 8007b50:	0801ffc4 	.word	0x0801ffc4
 8007b54:	58004000 	.word	0x58004000

08007b58 <LL_RCC_LSE_IsReady>:
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d101      	bne.n	8007b70 <LL_RCC_LSE_IsReady+0x18>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <LL_RCC_LSE_IsReady+0x1a>
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr

08007b7a <LL_RCC_SetUSARTClockSource>:
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	43db      	mvns	r3, r3
 8007b90:	401a      	ands	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr

08007baa <LL_RCC_SetI2SClockSource>:
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr

08007bd4 <LL_RCC_SetLPUARTClockSource>:
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007be8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <LL_RCC_SetI2CClockSource>:
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	091b      	lsrs	r3, r3, #4
 8007c12:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007c16:	43db      	mvns	r3, r3
 8007c18:	401a      	ands	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr

08007c36 <LL_RCC_SetLPTIMClockSource>:
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c42:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	0c1b      	lsrs	r3, r3, #16
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	401a      	ands	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bc80      	pop	{r7}
 8007c66:	4770      	bx	lr

08007c68 <LL_RCC_SetRNGClockSource>:
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c78:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007c7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <LL_RCC_SetADCClockSource>:
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007ca6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr

08007cbc <LL_RCC_SetRTCClockSource>:
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ccc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr

08007ce6 <LL_RCC_GetRTCClockSource>:
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr

08007cfe <LL_RCC_ForceBackupDomainReset>:
{
 8007cfe:	b480      	push	{r7}
 8007d00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007d16:	bf00      	nop
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <LL_RCC_ReleaseBackupDomainReset>:
{
 8007d1e:	b480      	push	{r7}
 8007d20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007d36:	bf00      	nop
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr
	...

08007d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007d50:	2300      	movs	r3, #0
 8007d52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d058      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007d60:	f7fe fd7e 	bl	8006860 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d64:	f7fa fdd8 	bl	8002918 <HAL_GetTick>
 8007d68:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007d6a:	e009      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d6c:	f7fa fdd4 	bl	8002918 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d902      	bls.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	74fb      	strb	r3, [r7, #19]
        break;
 8007d7e:	e006      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007d80:	4b7b      	ldr	r3, [pc, #492]	@ (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d8c:	d1ee      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007d8e:	7cfb      	ldrb	r3, [r7, #19]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d13c      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007d94:	f7ff ffa7 	bl	8007ce6 <LL_RCC_GetRTCClockSource>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d00f      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007db0:	f7ff ffa5 	bl	8007cfe <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007db4:	f7ff ffb3 	bl	8007d1e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007db8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d014      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dcc:	f7fa fda4 	bl	8002918 <HAL_GetTick>
 8007dd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007dd2:	e00b      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd4:	f7fa fda0 	bl	8002918 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d902      	bls.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	74fb      	strb	r3, [r7, #19]
            break;
 8007dea:	e004      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007dec:	f7ff feb4 	bl	8007b58 <LL_RCC_LSE_IsReady>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d1ee      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007df6:	7cfb      	ldrb	r3, [r7, #19]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d105      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff ff5b 	bl	8007cbc <LL_RCC_SetRTCClockSource>
 8007e06:	e004      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e08:	7cfb      	ldrb	r3, [r7, #19]
 8007e0a:	74bb      	strb	r3, [r7, #18]
 8007e0c:	e001      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0e:	7cfb      	ldrb	r3, [r7, #19]
 8007e10:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff fea9 	bl	8007b7a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff fe9e 	bl	8007b7a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff fec0 	bl	8007bd4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d004      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff fee6 	bl	8007c36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d004      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff fedb 	bl	8007c36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d004      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fed0 	bl	8007c36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff fea9 	bl	8007bfe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d004      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff fe9e 	bl	8007bfe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fe93 	bl	8007bfe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d011      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff fe5e 	bl	8007baa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef6:	d107      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d010      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7ff fea5 	bl	8007c68 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f34:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d011      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fea3 	bl	8007c92 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f54:	d107      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f64:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007f66:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	58000400 	.word	0x58000400

08007f74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d071      	beq.n	800806a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7fa f93c 	bl	8002218 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007fa8:	4b32      	ldr	r3, [pc, #200]	@ (8008074 <HAL_RTC_Init+0x100>)
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d051      	beq.n	8008058 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8008074 <HAL_RTC_Init+0x100>)
 8007fb6:	22ca      	movs	r2, #202	@ 0xca
 8007fb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fba:	4b2e      	ldr	r3, [pc, #184]	@ (8008074 <HAL_RTC_Init+0x100>)
 8007fbc:	2253      	movs	r2, #83	@ 0x53
 8007fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa11 	bl	80083e8 <RTC_EnterInitMode>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d13f      	bne.n	8008050 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007fd0:	4b28      	ldr	r3, [pc, #160]	@ (8008074 <HAL_RTC_Init+0x100>)
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	4a27      	ldr	r2, [pc, #156]	@ (8008074 <HAL_RTC_Init+0x100>)
 8007fd6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fde:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007fe0:	4b24      	ldr	r3, [pc, #144]	@ (8008074 <HAL_RTC_Init+0x100>)
 8007fe2:	699a      	ldr	r2, [r3, #24]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6859      	ldr	r1, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	4319      	orrs	r1, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	430b      	orrs	r3, r1
 8007ff4:	491f      	ldr	r1, [pc, #124]	@ (8008074 <HAL_RTC_Init+0x100>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	041b      	lsls	r3, r3, #16
 8008004:	491b      	ldr	r1, [pc, #108]	@ (8008074 <HAL_RTC_Init+0x100>)
 8008006:	4313      	orrs	r3, r2
 8008008:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800800a:	4b1a      	ldr	r3, [pc, #104]	@ (8008074 <HAL_RTC_Init+0x100>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801a:	430b      	orrs	r3, r1
 800801c:	4915      	ldr	r1, [pc, #84]	@ (8008074 <HAL_RTC_Init+0x100>)
 800801e:	4313      	orrs	r3, r2
 8008020:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa14 	bl	8008450 <RTC_ExitInitMode>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10e      	bne.n	8008050 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008032:	4b10      	ldr	r3, [pc, #64]	@ (8008074 <HAL_RTC_Init+0x100>)
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a19      	ldr	r1, [r3, #32]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	4319      	orrs	r1, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	430b      	orrs	r3, r1
 800804a:	490a      	ldr	r1, [pc, #40]	@ (8008074 <HAL_RTC_Init+0x100>)
 800804c:	4313      	orrs	r3, r2
 800804e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008050:	4b08      	ldr	r3, [pc, #32]	@ (8008074 <HAL_RTC_Init+0x100>)
 8008052:	22ff      	movs	r2, #255	@ 0xff
 8008054:	625a      	str	r2, [r3, #36]	@ 0x24
 8008056:	e001      	b.n	800805c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d103      	bne.n	800806a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40002800 	.word	0x40002800

08008078 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008078:	b590      	push	{r4, r7, lr}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_RTC_SetAlarm_IT+0x1e>
 8008092:	2302      	movs	r3, #2
 8008094:	e0f3      	b.n	800827e <HAL_RTC_SetAlarm_IT+0x206>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80080a6:	4b78      	ldr	r3, [pc, #480]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ae:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b6:	d06a      	beq.n	800818e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d13a      	bne.n	8008134 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80080be:	4b72      	ldr	r3, [pc, #456]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2200      	movs	r2, #0
 80080ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f9f5 	bl	80084cc <RTC_ByteToBcd2>
 80080e2:	4603      	mov	r3, r0
 80080e4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 f9ee 	bl	80084cc <RTC_ByteToBcd2>
 80080f0:	4603      	mov	r3, r0
 80080f2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080f4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	789b      	ldrb	r3, [r3, #2]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f9e6 	bl	80084cc <RTC_ByteToBcd2>
 8008100:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008102:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	78db      	ldrb	r3, [r3, #3]
 800810a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800810c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008116:	4618      	mov	r0, r3
 8008118:	f000 f9d8 	bl	80084cc <RTC_ByteToBcd2>
 800811c:	4603      	mov	r3, r0
 800811e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008120:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008128:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	e02c      	b.n	800818e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 800813c:	d00d      	beq.n	800815a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008146:	d008      	beq.n	800815a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008148:	4b4f      	ldr	r3, [pc, #316]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	785b      	ldrb	r3, [r3, #1]
 8008164:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008166:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800816c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	78db      	ldrb	r3, [r3, #3]
 8008172:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008174:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800817c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800817e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008184:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800818e:	4b3e      	ldr	r3, [pc, #248]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 8008190:	22ca      	movs	r2, #202	@ 0xca
 8008192:	625a      	str	r2, [r3, #36]	@ 0x24
 8008194:	4b3c      	ldr	r3, [pc, #240]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 8008196:	2253      	movs	r2, #83	@ 0x53
 8008198:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081a2:	d12c      	bne.n	80081fe <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80081a4:	4b38      	ldr	r3, [pc, #224]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	4a37      	ldr	r2, [pc, #220]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80081aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80081ae:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80081b0:	4b35      	ldr	r3, [pc, #212]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081bc:	d107      	bne.n	80081ce <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	4930      	ldr	r1, [pc, #192]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	644b      	str	r3, [r1, #68]	@ 0x44
 80081cc:	e006      	b.n	80081dc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80081ce:	4a2e      	ldr	r2, [pc, #184]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80081d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80081dc:	4a2a      	ldr	r2, [pc, #168]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e8:	f043 0201 	orr.w	r2, r3, #1
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80081f0:	4b25      	ldr	r3, [pc, #148]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	4a24      	ldr	r2, [pc, #144]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 80081f6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80081fa:	6193      	str	r3, [r2, #24]
 80081fc:	e02b      	b.n	8008256 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80081fe:	4b22      	ldr	r3, [pc, #136]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	4a21      	ldr	r2, [pc, #132]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 8008204:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8008208:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800820a:	4b1f      	ldr	r3, [pc, #124]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 800820c:	2202      	movs	r2, #2
 800820e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008216:	d107      	bne.n	8008228 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	699a      	ldr	r2, [r3, #24]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	4919      	ldr	r1, [pc, #100]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 8008222:	4313      	orrs	r3, r2
 8008224:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8008226:	e006      	b.n	8008236 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8008228:	4a17      	ldr	r2, [pc, #92]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800822e:	4a16      	ldr	r2, [pc, #88]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8008236:	4a14      	ldr	r2, [pc, #80]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008242:	f043 0202 	orr.w	r2, r3, #2
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800824a:	4b0f      	ldr	r3, [pc, #60]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	4a0e      	ldr	r2, [pc, #56]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 8008250:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8008254:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008256:	4b0d      	ldr	r3, [pc, #52]	@ (800828c <HAL_RTC_SetAlarm_IT+0x214>)
 8008258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800825c:	4a0b      	ldr	r2, [pc, #44]	@ (800828c <HAL_RTC_SetAlarm_IT+0x214>)
 800825e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008262:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008266:	4b08      	ldr	r3, [pc, #32]	@ (8008288 <HAL_RTC_SetAlarm_IT+0x210>)
 8008268:	22ff      	movs	r2, #255	@ 0xff
 800826a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	bd90      	pop	{r4, r7, pc}
 8008286:	bf00      	nop
 8008288:	40002800 	.word	0x40002800
 800828c:	58000800 	.word	0x58000800

08008290 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_RTC_DeactivateAlarm+0x18>
 80082a4:	2302      	movs	r3, #2
 80082a6:	e048      	b.n	800833a <HAL_RTC_DeactivateAlarm+0xaa>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082b8:	4b22      	ldr	r3, [pc, #136]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082ba:	22ca      	movs	r2, #202	@ 0xca
 80082bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80082be:	4b21      	ldr	r3, [pc, #132]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082c0:	2253      	movs	r2, #83	@ 0x53
 80082c2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ca:	d115      	bne.n	80082f8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80082cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80082d6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80082d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082dc:	4a19      	ldr	r2, [pc, #100]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082e2:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e8:	f023 0201 	bic.w	r2, r3, #1
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80082f0:	4b14      	ldr	r3, [pc, #80]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80082f6:	e014      	b.n	8008322 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80082f8:	4b12      	ldr	r3, [pc, #72]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	4a11      	ldr	r2, [pc, #68]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082fe:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8008302:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008304:	4b0f      	ldr	r3, [pc, #60]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008308:	4a0e      	ldr	r2, [pc, #56]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 800830a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800830e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008314:	f023 0202 	bic.w	r2, r3, #2
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800831c:	4b09      	ldr	r3, [pc, #36]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 800831e:	2202      	movs	r2, #2
 8008320:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008322:	4b08      	ldr	r3, [pc, #32]	@ (8008344 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008324:	22ff      	movs	r2, #255	@ 0xff
 8008326:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr
 8008344:	40002800 	.word	0x40002800

08008348 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008350:	4b11      	ldr	r3, [pc, #68]	@ (8008398 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008352:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008358:	4013      	ands	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008366:	4b0c      	ldr	r3, [pc, #48]	@ (8008398 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008368:	2201      	movs	r2, #1
 800836a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7fa fd76 	bl	8002e5e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800837c:	4b06      	ldr	r3, [pc, #24]	@ (8008398 <HAL_RTC_AlarmIRQHandler+0x50>)
 800837e:	2202      	movs	r2, #2
 8008380:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f94a 	bl	800861c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40002800 	.word	0x40002800

0800839c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80083a4:	4b0f      	ldr	r3, [pc, #60]	@ (80083e4 <HAL_RTC_WaitForSynchro+0x48>)
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	4a0e      	ldr	r2, [pc, #56]	@ (80083e4 <HAL_RTC_WaitForSynchro+0x48>)
 80083aa:	f023 0320 	bic.w	r3, r3, #32
 80083ae:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80083b0:	f7fa fab2 	bl	8002918 <HAL_GetTick>
 80083b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80083b6:	e009      	b.n	80083cc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083b8:	f7fa faae 	bl	8002918 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083c6:	d901      	bls.n	80083cc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e006      	b.n	80083da <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <HAL_RTC_WaitForSynchro+0x48>)
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f003 0320 	and.w	r3, r3, #32
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0ef      	beq.n	80083b8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	40002800 	.word	0x40002800

080083e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80083f4:	4b15      	ldr	r3, [pc, #84]	@ (800844c <RTC_EnterInitMode+0x64>)
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d120      	bne.n	8008442 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008400:	4b12      	ldr	r3, [pc, #72]	@ (800844c <RTC_EnterInitMode+0x64>)
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	4a11      	ldr	r2, [pc, #68]	@ (800844c <RTC_EnterInitMode+0x64>)
 8008406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800840a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800840c:	f7fa fa84 	bl	8002918 <HAL_GetTick>
 8008410:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008412:	e00d      	b.n	8008430 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008414:	f7fa fa80 	bl	8002918 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008422:	d905      	bls.n	8008430 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2203      	movs	r2, #3
 800842c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008430:	4b06      	ldr	r3, [pc, #24]	@ (800844c <RTC_EnterInitMode+0x64>)
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <RTC_EnterInitMode+0x5a>
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b03      	cmp	r3, #3
 8008440:	d1e8      	bne.n	8008414 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40002800 	.word	0x40002800

08008450 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800845c:	4b1a      	ldr	r3, [pc, #104]	@ (80084c8 <RTC_ExitInitMode+0x78>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	4a19      	ldr	r2, [pc, #100]	@ (80084c8 <RTC_ExitInitMode+0x78>)
 8008462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008466:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008468:	4b17      	ldr	r3, [pc, #92]	@ (80084c8 <RTC_ExitInitMode+0x78>)
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10c      	bne.n	800848e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff ff91 	bl	800839c <HAL_RTC_WaitForSynchro>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01e      	beq.n	80084be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2203      	movs	r2, #3
 8008484:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	73fb      	strb	r3, [r7, #15]
 800848c:	e017      	b.n	80084be <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800848e:	4b0e      	ldr	r3, [pc, #56]	@ (80084c8 <RTC_ExitInitMode+0x78>)
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	4a0d      	ldr	r2, [pc, #52]	@ (80084c8 <RTC_ExitInitMode+0x78>)
 8008494:	f023 0320 	bic.w	r3, r3, #32
 8008498:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff ff7e 	bl	800839c <HAL_RTC_WaitForSynchro>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d005      	beq.n	80084b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2203      	movs	r2, #3
 80084aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084b2:	4b05      	ldr	r3, [pc, #20]	@ (80084c8 <RTC_ExitInitMode+0x78>)
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	4a04      	ldr	r2, [pc, #16]	@ (80084c8 <RTC_ExitInitMode+0x78>)
 80084b8:	f043 0320 	orr.w	r3, r3, #32
 80084bc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	40002800 	.word	0x40002800

080084cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80084de:	e005      	b.n	80084ec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3301      	adds	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	3b0a      	subs	r3, #10
 80084ea:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	d8f6      	bhi.n	80084e0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	b2db      	uxtb	r3, r3
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	bc80      	pop	{r7}
 8008508:	4770      	bx	lr
	...

0800850c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_RTCEx_EnableBypassShadow+0x16>
 800851e:	2302      	movs	r3, #2
 8008520:	e01f      	b.n	8008562 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2202      	movs	r2, #2
 800852e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008532:	4b0e      	ldr	r3, [pc, #56]	@ (800856c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008534:	22ca      	movs	r2, #202	@ 0xca
 8008536:	625a      	str	r2, [r3, #36]	@ 0x24
 8008538:	4b0c      	ldr	r3, [pc, #48]	@ (800856c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800853a:	2253      	movs	r2, #83	@ 0x53
 800853c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800853e:	4b0b      	ldr	r3, [pc, #44]	@ (800856c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	4a0a      	ldr	r2, [pc, #40]	@ (800856c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008544:	f043 0320 	orr.w	r3, r3, #32
 8008548:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800854a:	4b08      	ldr	r3, [pc, #32]	@ (800856c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800854c:	22ff      	movs	r2, #255	@ 0xff
 800854e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	bc80      	pop	{r7}
 800856a:	4770      	bx	lr
 800856c:	40002800 	.word	0x40002800

08008570 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_RTCEx_SetSSRU_IT+0x16>
 8008582:	2302      	movs	r3, #2
 8008584:	e027      	b.n	80085d6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2202      	movs	r2, #2
 8008592:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008596:	4b12      	ldr	r3, [pc, #72]	@ (80085e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008598:	22ca      	movs	r2, #202	@ 0xca
 800859a:	625a      	str	r2, [r3, #36]	@ 0x24
 800859c:	4b10      	ldr	r3, [pc, #64]	@ (80085e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800859e:	2253      	movs	r2, #83	@ 0x53
 80085a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80085a2:	4b0f      	ldr	r3, [pc, #60]	@ (80085e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	4a0e      	ldr	r2, [pc, #56]	@ (80085e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80085a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ac:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80085ae:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80085b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b4:	4a0b      	ldr	r2, [pc, #44]	@ (80085e4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80085b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085ba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085be:	4b08      	ldr	r3, [pc, #32]	@ (80085e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80085c0:	22ff      	movs	r2, #255	@ 0xff
 80085c2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr
 80085e0:	40002800 	.word	0x40002800
 80085e4:	58000800 	.word	0x58000800

080085e8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80085f0:	4b09      	ldr	r3, [pc, #36]	@ (8008618 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80085f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d005      	beq.n	8008608 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80085fc:	4b06      	ldr	r3, [pc, #24]	@ (8008618 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80085fe:	2240      	movs	r2, #64	@ 0x40
 8008600:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fa fc35 	bl	8002e72 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40002800 	.word	0x40002800

0800861c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr
	...

08008630 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800863c:	4b07      	ldr	r3, [pc, #28]	@ (800865c <HAL_RTCEx_BKUPWrite+0x2c>)
 800863e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4413      	add	r3, r2
 8008648:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	601a      	str	r2, [r3, #0]
}
 8008650:	bf00      	nop
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	bc80      	pop	{r7}
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	4000b100 	.word	0x4000b100

08008660 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800866a:	4b07      	ldr	r3, [pc, #28]	@ (8008688 <HAL_RTCEx_BKUPRead+0x28>)
 800866c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	4000b100 	.word	0x4000b100

0800868c <LL_PWR_SetRadioBusyTrigger>:
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008694:	4b06      	ldr	r3, [pc, #24]	@ (80086b0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800869c:	4904      	ldr	r1, [pc, #16]	@ (80086b0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	608b      	str	r3, [r1, #8]
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	58000400 	.word	0x58000400

080086b4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80086b4:	b480      	push	{r7}
 80086b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80086b8:	4b05      	ldr	r3, [pc, #20]	@ (80086d0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80086ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086be:	4a04      	ldr	r2, [pc, #16]	@ (80086d0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80086c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80086c8:	bf00      	nop
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bc80      	pop	{r7}
 80086ce:	4770      	bx	lr
 80086d0:	58000400 	.word	0x58000400

080086d4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80086d8:	4b05      	ldr	r3, [pc, #20]	@ (80086f0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80086da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086de:	4a04      	ldr	r2, [pc, #16]	@ (80086f0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80086e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr
 80086f0:	58000400 	.word	0x58000400

080086f4 <LL_PWR_ClearFlag_RFBUSY>:
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80086f8:	4b03      	ldr	r3, [pc, #12]	@ (8008708 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80086fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086fe:	619a      	str	r2, [r3, #24]
}
 8008700:	bf00      	nop
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr
 8008708:	58000400 	.word	0x58000400

0800870c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008710:	4b06      	ldr	r3, [pc, #24]	@ (800872c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b02      	cmp	r3, #2
 800871a:	d101      	bne.n	8008720 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800871c:	2301      	movs	r3, #1
 800871e:	e000      	b.n	8008722 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	58000400 	.word	0x58000400

08008730 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008734:	4b06      	ldr	r3, [pc, #24]	@ (8008750 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b04      	cmp	r3, #4
 800873e:	d101      	bne.n	8008744 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008740:	2301      	movs	r3, #1
 8008742:	e000      	b.n	8008746 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	58000400 	.word	0x58000400

08008754 <LL_RCC_RF_DisableReset>:
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800875c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008760:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008764:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008768:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800876c:	bf00      	nop
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <LL_RCC_IsRFUnderReset>:
{
 8008774:	b480      	push	{r7}
 8008776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800877c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008788:	d101      	bne.n	800878e <LL_RCC_IsRFUnderReset+0x1a>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <LL_RCC_IsRFUnderReset+0x1c>
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	bc80      	pop	{r7}
 8008796:	4770      	bx	lr

08008798 <LL_EXTI_EnableIT_32_63>:
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80087a0:	4b06      	ldr	r3, [pc, #24]	@ (80087bc <LL_EXTI_EnableIT_32_63+0x24>)
 80087a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80087a6:	4905      	ldr	r1, [pc, #20]	@ (80087bc <LL_EXTI_EnableIT_32_63+0x24>)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	58000800 	.word	0x58000800

080087c0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d103      	bne.n	80087d6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	73fb      	strb	r3, [r7, #15]
    return status;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	e052      	b.n	800887c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	799b      	ldrb	r3, [r3, #6]
 80087de:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <HAL_SUBGHZ_Init+0x2c>
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d109      	bne.n	8008800 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7f9 fe2a 	bl	800244c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80087f8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80087fc:	f7ff ffcc 	bl	8008798 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d126      	bne.n	8008854 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2202      	movs	r2, #2
 800880a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800880c:	f7ff ffa2 	bl	8008754 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008810:	4b1c      	ldr	r3, [pc, #112]	@ (8008884 <HAL_SUBGHZ_Init+0xc4>)
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	4613      	mov	r3, r2
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	1a9b      	subs	r3, r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	0cdb      	lsrs	r3, r3, #19
 800881e:	2264      	movs	r2, #100	@ 0x64
 8008820:	fb02 f303 	mul.w	r3, r2, r3
 8008824:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d105      	bne.n	8008838 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	609a      	str	r2, [r3, #8]
        break;
 8008836:	e007      	b.n	8008848 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	3b01      	subs	r3, #1
 800883c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800883e:	f7ff ff99 	bl	8008774 <LL_RCC_IsRFUnderReset>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1ee      	bne.n	8008826 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008848:	f7ff ff34 	bl	80086b4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800884c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008850:	f7ff ff1c 	bl	800868c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008854:	f7ff ff4e 	bl	80086f4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fabc 	bl	8008de0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	719a      	strb	r2, [r3, #6]

  return status;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000000 	.word	0x20000000

08008888 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	461a      	mov	r2, r3
 8008894:	460b      	mov	r3, r1
 8008896:	817b      	strh	r3, [r7, #10]
 8008898:	4613      	mov	r3, r2
 800889a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	799b      	ldrb	r3, [r3, #6]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d14a      	bne.n	800893c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	795b      	ldrb	r3, [r3, #5]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e045      	b.n	800893e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2202      	movs	r2, #2
 80088bc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 fb5c 	bl	8008f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80088c4:	f7ff ff06 	bl	80086d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80088c8:	210d      	movs	r1, #13
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 faa8 	bl	8008e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80088d0:	897b      	ldrh	r3, [r7, #10]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	4619      	mov	r1, r3
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 faa0 	bl	8008e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80088e0:	897b      	ldrh	r3, [r7, #10]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	4619      	mov	r1, r3
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fa9a 	bl	8008e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80088ec:	2300      	movs	r3, #0
 80088ee:	82bb      	strh	r3, [r7, #20]
 80088f0:	e00a      	b.n	8008908 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80088f2:	8abb      	ldrh	r3, [r7, #20]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	4413      	add	r3, r2
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	4619      	mov	r1, r3
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 fa8f 	bl	8008e20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008902:	8abb      	ldrh	r3, [r7, #20]
 8008904:	3301      	adds	r3, #1
 8008906:	82bb      	strh	r3, [r7, #20]
 8008908:	8aba      	ldrh	r2, [r7, #20]
 800890a:	893b      	ldrh	r3, [r7, #8]
 800890c:	429a      	cmp	r2, r3
 800890e:	d3f0      	bcc.n	80088f2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008910:	f7ff fed0 	bl	80086b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 fb55 	bl	8008fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	75fb      	strb	r3, [r7, #23]
 8008926:	e001      	b.n	800892c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2201      	movs	r2, #1
 8008930:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	715a      	strb	r2, [r3, #5]

    return status;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	e000      	b.n	800893e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800893c:	2302      	movs	r3, #2
  }
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b088      	sub	sp, #32
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	461a      	mov	r2, r3
 8008952:	460b      	mov	r3, r1
 8008954:	817b      	strh	r3, [r7, #10]
 8008956:	4613      	mov	r3, r2
 8008958:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	799b      	ldrb	r3, [r3, #6]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	d14a      	bne.n	80089fe <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	795b      	ldrb	r3, [r3, #5]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008970:	2302      	movs	r3, #2
 8008972:	e045      	b.n	8008a00 <HAL_SUBGHZ_ReadRegisters+0xba>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fafe 	bl	8008f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008980:	f7ff fea8 	bl	80086d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008984:	211d      	movs	r1, #29
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 fa4a 	bl	8008e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800898c:	897b      	ldrh	r3, [r7, #10]
 800898e:	0a1b      	lsrs	r3, r3, #8
 8008990:	b29b      	uxth	r3, r3
 8008992:	b2db      	uxtb	r3, r3
 8008994:	4619      	mov	r1, r3
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 fa42 	bl	8008e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800899c:	897b      	ldrh	r3, [r7, #10]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	4619      	mov	r1, r3
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 fa3c 	bl	8008e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80089a8:	2100      	movs	r1, #0
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 fa38 	bl	8008e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80089b0:	2300      	movs	r3, #0
 80089b2:	82fb      	strh	r3, [r7, #22]
 80089b4:	e009      	b.n	80089ca <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80089b6:	69b9      	ldr	r1, [r7, #24]
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fa87 	bl	8008ecc <SUBGHZSPI_Receive>
      pData++;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	3301      	adds	r3, #1
 80089c2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80089c4:	8afb      	ldrh	r3, [r7, #22]
 80089c6:	3301      	adds	r3, #1
 80089c8:	82fb      	strh	r3, [r7, #22]
 80089ca:	8afa      	ldrh	r2, [r7, #22]
 80089cc:	893b      	ldrh	r3, [r7, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d3f1      	bcc.n	80089b6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80089d2:	f7ff fe6f 	bl	80086b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 faf4 	bl	8008fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	77fb      	strb	r3, [r7, #31]
 80089e8:	e001      	b.n	80089ee <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2201      	movs	r2, #1
 80089f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	715a      	strb	r2, [r3, #5]

    return status;
 80089fa:	7ffb      	ldrb	r3, [r7, #31]
 80089fc:	e000      	b.n	8008a00 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80089fe:	2302      	movs	r3, #2
  }
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3720      	adds	r7, #32
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	461a      	mov	r2, r3
 8008a14:	460b      	mov	r3, r1
 8008a16:	72fb      	strb	r3, [r7, #11]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	799b      	ldrb	r3, [r3, #6]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d14a      	bne.n	8008abc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	795b      	ldrb	r3, [r3, #5]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e045      	b.n	8008abe <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fa9f 	bl	8008f7c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008a3e:	7afb      	ldrb	r3, [r7, #11]
 8008a40:	2b84      	cmp	r3, #132	@ 0x84
 8008a42:	d002      	beq.n	8008a4a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008a44:	7afb      	ldrb	r3, [r7, #11]
 8008a46:	2b94      	cmp	r3, #148	@ 0x94
 8008a48:	d103      	bne.n	8008a52 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	711a      	strb	r2, [r3, #4]
 8008a50:	e002      	b.n	8008a58 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a58:	f7ff fe3c 	bl	80086d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008a5c:	7afb      	ldrb	r3, [r7, #11]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f9dd 	bl	8008e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a66:	2300      	movs	r3, #0
 8008a68:	82bb      	strh	r3, [r7, #20]
 8008a6a:	e00a      	b.n	8008a82 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008a6c:	8abb      	ldrh	r3, [r7, #20]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	4413      	add	r3, r2
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	4619      	mov	r1, r3
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 f9d2 	bl	8008e20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008a7c:	8abb      	ldrh	r3, [r7, #20]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	82bb      	strh	r3, [r7, #20]
 8008a82:	8aba      	ldrh	r2, [r7, #20]
 8008a84:	893b      	ldrh	r3, [r7, #8]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d3f0      	bcc.n	8008a6c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008a8a:	f7ff fe13 	bl	80086b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008a8e:	7afb      	ldrb	r3, [r7, #11]
 8008a90:	2b84      	cmp	r3, #132	@ 0x84
 8008a92:	d002      	beq.n	8008a9a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fa95 	bl	8008fc4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	75fb      	strb	r3, [r7, #23]
 8008aa6:	e001      	b.n	8008aac <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	715a      	strb	r2, [r3, #5]

    return status;
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	e000      	b.n	8008abe <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008abc:	2302      	movs	r3, #2
  }
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b088      	sub	sp, #32
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	72fb      	strb	r3, [r7, #11]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	799b      	ldrb	r3, [r3, #6]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d13d      	bne.n	8008b64 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	795b      	ldrb	r3, [r3, #5]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e038      	b.n	8008b66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 fa3e 	bl	8008f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b00:	f7ff fde8 	bl	80086d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	4619      	mov	r1, r3
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f989 	bl	8008e20 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008b0e:	2100      	movs	r1, #0
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 f985 	bl	8008e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b16:	2300      	movs	r3, #0
 8008b18:	82fb      	strh	r3, [r7, #22]
 8008b1a:	e009      	b.n	8008b30 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008b1c:	69b9      	ldr	r1, [r7, #24]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f9d4 	bl	8008ecc <SUBGHZSPI_Receive>
      pData++;
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	3301      	adds	r3, #1
 8008b28:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008b2a:	8afb      	ldrh	r3, [r7, #22]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	82fb      	strh	r3, [r7, #22]
 8008b30:	8afa      	ldrh	r2, [r7, #22]
 8008b32:	893b      	ldrh	r3, [r7, #8]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d3f1      	bcc.n	8008b1c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b38:	f7ff fdbc 	bl	80086b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fa41 	bl	8008fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	77fb      	strb	r3, [r7, #31]
 8008b4e:	e001      	b.n	8008b54 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	715a      	strb	r2, [r3, #5]

    return status;
 8008b60:	7ffb      	ldrb	r3, [r7, #31]
 8008b62:	e000      	b.n	8008b66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008b64:	2302      	movs	r3, #2
  }
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b086      	sub	sp, #24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	72fb      	strb	r3, [r7, #11]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	799b      	ldrb	r3, [r3, #6]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d13e      	bne.n	8008c0a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	795b      	ldrb	r3, [r3, #5]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e039      	b.n	8008c0c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 f9ec 	bl	8008f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008ba4:	f7ff fd96 	bl	80086d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008ba8:	210e      	movs	r1, #14
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f938 	bl	8008e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 f933 	bl	8008e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008bba:	2300      	movs	r3, #0
 8008bbc:	82bb      	strh	r3, [r7, #20]
 8008bbe:	e00a      	b.n	8008bd6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008bc0:	8abb      	ldrh	r3, [r7, #20]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 f928 	bl	8008e20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008bd0:	8abb      	ldrh	r3, [r7, #20]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	82bb      	strh	r3, [r7, #20]
 8008bd6:	8aba      	ldrh	r2, [r7, #20]
 8008bd8:	893b      	ldrh	r3, [r7, #8]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d3f0      	bcc.n	8008bc0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008bde:	f7ff fd69 	bl	80086b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 f9ee 	bl	8008fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	75fb      	strb	r3, [r7, #23]
 8008bf4:	e001      	b.n	8008bfa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	715a      	strb	r2, [r3, #5]

    return status;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	e000      	b.n	8008c0c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008c0a:	2302      	movs	r3, #2
  }
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b088      	sub	sp, #32
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	607a      	str	r2, [r7, #4]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	460b      	mov	r3, r1
 8008c22:	72fb      	strb	r3, [r7, #11]
 8008c24:	4613      	mov	r3, r2
 8008c26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	799b      	ldrb	r3, [r3, #6]
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d141      	bne.n	8008cba <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	795b      	ldrb	r3, [r3, #5]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d101      	bne.n	8008c42 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e03c      	b.n	8008cbc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 f997 	bl	8008f7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008c4e:	f7ff fd41 	bl	80086d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008c52:	211e      	movs	r1, #30
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 f8e3 	bl	8008e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008c5a:	7afb      	ldrb	r3, [r7, #11]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 f8de 	bl	8008e20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008c64:	2100      	movs	r1, #0
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 f8da 	bl	8008e20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	82fb      	strh	r3, [r7, #22]
 8008c70:	e009      	b.n	8008c86 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008c72:	69b9      	ldr	r1, [r7, #24]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f929 	bl	8008ecc <SUBGHZSPI_Receive>
      pData++;
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008c80:	8afb      	ldrh	r3, [r7, #22]
 8008c82:	3301      	adds	r3, #1
 8008c84:	82fb      	strh	r3, [r7, #22]
 8008c86:	8afa      	ldrh	r2, [r7, #22]
 8008c88:	893b      	ldrh	r3, [r7, #8]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d3f1      	bcc.n	8008c72 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008c8e:	f7ff fd11 	bl	80086b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f996 	bl	8008fc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	77fb      	strb	r3, [r7, #31]
 8008ca4:	e001      	b.n	8008caa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2201      	movs	r2, #1
 8008cae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	715a      	strb	r2, [r3, #5]

    return status;
 8008cb6:	7ffb      	ldrb	r3, [r7, #31]
 8008cb8:	e000      	b.n	8008cbc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008cba:	2302      	movs	r3, #2
  }
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3720      	adds	r7, #32
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008ccc:	2300      	movs	r3, #0
 8008cce:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008cd0:	f107 020c 	add.w	r2, r7, #12
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	2112      	movs	r1, #18
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff fef4 	bl	8008ac6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008cde:	7b3b      	ldrb	r3, [r7, #12]
 8008ce0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008ce2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	b21a      	sxth	r2, r3
 8008cea:	7b7b      	ldrb	r3, [r7, #13]
 8008cec:	b21b      	sxth	r3, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	b21b      	sxth	r3, r3
 8008cf2:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8008cf4:	f107 020c 	add.w	r2, r7, #12
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	2102      	movs	r1, #2
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff fe83 	bl	8008a08 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008d02:	89fb      	ldrh	r3, [r7, #14]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f012 ffeb 	bl	801bce8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8008d12:	89fb      	ldrh	r3, [r7, #14]
 8008d14:	085b      	lsrs	r3, r3, #1
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d008      	beq.n	8008d30 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8008d1e:	89fb      	ldrh	r3, [r7, #14]
 8008d20:	099b      	lsrs	r3, r3, #6
 8008d22:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d102      	bne.n	8008d30 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f012 ffea 	bl	801bd04 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008d30:	89fb      	ldrh	r3, [r7, #14]
 8008d32:	089b      	lsrs	r3, r3, #2
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f013 f839 	bl	801bdb4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008d42:	89fb      	ldrh	r3, [r7, #14]
 8008d44:	08db      	lsrs	r3, r3, #3
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f013 f83e 	bl	801bdd0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008d54:	89fb      	ldrh	r3, [r7, #14]
 8008d56:	091b      	lsrs	r3, r3, #4
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f013 f843 	bl	801bdec <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008d66:	89fb      	ldrh	r3, [r7, #14]
 8008d68:	095b      	lsrs	r3, r3, #5
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f013 f810 	bl	801bd98 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008d78:	89fb      	ldrh	r3, [r7, #14]
 8008d7a:	099b      	lsrs	r3, r3, #6
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f012 ffcb 	bl	801bd20 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008d8a:	89fb      	ldrh	r3, [r7, #14]
 8008d8c:	09db      	lsrs	r3, r3, #7
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00e      	beq.n	8008db4 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008d96:	89fb      	ldrh	r3, [r7, #14]
 8008d98:	0a1b      	lsrs	r3, r3, #8
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008da2:	2101      	movs	r1, #1
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f012 ffc9 	bl	801bd3c <HAL_SUBGHZ_CADStatusCallback>
 8008daa:	e003      	b.n	8008db4 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008dac:	2100      	movs	r1, #0
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f012 ffc4 	bl	801bd3c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008db4:	89fb      	ldrh	r3, [r7, #14]
 8008db6:	0a5b      	lsrs	r3, r3, #9
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f012 ffd9 	bl	801bd78 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8008dc6:	89fb      	ldrh	r3, [r7, #14]
 8008dc8:	0b9b      	lsrs	r3, r3, #14
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f013 f818 	bl	801be08 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008de8:	4b0c      	ldr	r3, [pc, #48]	@ (8008e1c <SUBGHZSPI_Init+0x3c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a0b      	ldr	r2, [pc, #44]	@ (8008e1c <SUBGHZSPI_Init+0x3c>)
 8008dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008df2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008df4:	4a09      	ldr	r2, [pc, #36]	@ (8008e1c <SUBGHZSPI_Init+0x3c>)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8008dfc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008dfe:	4b07      	ldr	r3, [pc, #28]	@ (8008e1c <SUBGHZSPI_Init+0x3c>)
 8008e00:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8008e04:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008e06:	4b05      	ldr	r3, [pc, #20]	@ (8008e1c <SUBGHZSPI_Init+0x3c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a04      	ldr	r2, [pc, #16]	@ (8008e1c <SUBGHZSPI_Init+0x3c>)
 8008e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e10:	6013      	str	r3, [r2, #0]
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr
 8008e1c:	58010000 	.word	0x58010000

08008e20 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e30:	4b23      	ldr	r3, [pc, #140]	@ (8008ec0 <SUBGHZSPI_Transmit+0xa0>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	0cdb      	lsrs	r3, r3, #19
 8008e3e:	2264      	movs	r2, #100	@ 0x64
 8008e40:	fb02 f303 	mul.w	r3, r2, r3
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d105      	bne.n	8008e58 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	609a      	str	r2, [r3, #8]
      break;
 8008e56:	e008      	b.n	8008e6a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008e5e:	4b19      	ldr	r3, [pc, #100]	@ (8008ec4 <SUBGHZSPI_Transmit+0xa4>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d1ed      	bne.n	8008e46 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008e6a:	4b17      	ldr	r3, [pc, #92]	@ (8008ec8 <SUBGHZSPI_Transmit+0xa8>)
 8008e6c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	78fa      	ldrb	r2, [r7, #3]
 8008e72:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e74:	4b12      	ldr	r3, [pc, #72]	@ (8008ec0 <SUBGHZSPI_Transmit+0xa0>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	1a9b      	subs	r3, r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	0cdb      	lsrs	r3, r3, #19
 8008e82:	2264      	movs	r2, #100	@ 0x64
 8008e84:	fb02 f303 	mul.w	r3, r2, r3
 8008e88:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d105      	bne.n	8008e9c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	609a      	str	r2, [r3, #8]
      break;
 8008e9a:	e008      	b.n	8008eae <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008ea2:	4b08      	ldr	r3, [pc, #32]	@ (8008ec4 <SUBGHZSPI_Transmit+0xa4>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d1ed      	bne.n	8008e8a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008eae:	4b05      	ldr	r3, [pc, #20]	@ (8008ec4 <SUBGHZSPI_Transmit+0xa4>)
 8008eb0:	68db      	ldr	r3, [r3, #12]

  return status;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bc80      	pop	{r7}
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000000 	.word	0x20000000
 8008ec4:	58010000 	.word	0x58010000
 8008ec8:	5801000c 	.word	0x5801000c

08008ecc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008eda:	4b25      	ldr	r3, [pc, #148]	@ (8008f70 <SUBGHZSPI_Receive+0xa4>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	1a9b      	subs	r3, r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	0cdb      	lsrs	r3, r3, #19
 8008ee8:	2264      	movs	r2, #100	@ 0x64
 8008eea:	fb02 f303 	mul.w	r3, r2, r3
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d105      	bne.n	8008f02 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	609a      	str	r2, [r3, #8]
      break;
 8008f00:	e008      	b.n	8008f14 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008f08:	4b1a      	ldr	r3, [pc, #104]	@ (8008f74 <SUBGHZSPI_Receive+0xa8>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 0302 	and.w	r3, r3, #2
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d1ed      	bne.n	8008ef0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008f14:	4b18      	ldr	r3, [pc, #96]	@ (8008f78 <SUBGHZSPI_Receive+0xac>)
 8008f16:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	22ff      	movs	r2, #255	@ 0xff
 8008f1c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008f1e:	4b14      	ldr	r3, [pc, #80]	@ (8008f70 <SUBGHZSPI_Receive+0xa4>)
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4613      	mov	r3, r2
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	0cdb      	lsrs	r3, r3, #19
 8008f2c:	2264      	movs	r2, #100	@ 0x64
 8008f2e:	fb02 f303 	mul.w	r3, r2, r3
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d105      	bne.n	8008f46 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	609a      	str	r2, [r3, #8]
      break;
 8008f44:	e008      	b.n	8008f58 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008f4c:	4b09      	ldr	r3, [pc, #36]	@ (8008f74 <SUBGHZSPI_Receive+0xa8>)
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d1ed      	bne.n	8008f34 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008f58:	4b06      	ldr	r3, [pc, #24]	@ (8008f74 <SUBGHZSPI_Receive+0xa8>)
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	701a      	strb	r2, [r3, #0]

  return status;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	371c      	adds	r7, #28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bc80      	pop	{r7}
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	20000000 	.word	0x20000000
 8008f74:	58010000 	.word	0x58010000
 8008f78:	5801000c 	.word	0x5801000c

08008f7c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	791b      	ldrb	r3, [r3, #4]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d111      	bne.n	8008fb0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <SUBGHZ_CheckDeviceReady+0x44>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	4613      	mov	r3, r2
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	4413      	add	r3, r2
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	0c1b      	lsrs	r3, r3, #16
 8008f9a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008f9c:	f7ff fb9a 	bl	80086d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1f9      	bne.n	8008fa0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008fac:	f7ff fb82 	bl	80086b4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f807 	bl	8008fc4 <SUBGHZ_WaitOnBusy>
 8008fb6:	4603      	mov	r3, r0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20000000 	.word	0x20000000

08008fc4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008fd0:	4b12      	ldr	r3, [pc, #72]	@ (800901c <SUBGHZ_WaitOnBusy+0x58>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	4413      	add	r3, r2
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	0d1b      	lsrs	r3, r3, #20
 8008fde:	2264      	movs	r2, #100	@ 0x64
 8008fe0:	fb02 f303 	mul.w	r3, r2, r3
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008fe6:	f7ff fba3 	bl	8008730 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008fea:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d105      	bne.n	8008ffe <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	609a      	str	r2, [r3, #8]
      break;
 8008ffc:	e009      	b.n	8009012 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3b01      	subs	r3, #1
 8009002:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009004:	f7ff fb82 	bl	800870c <LL_PWR_IsActiveFlag_RFBUSYS>
 8009008:	4602      	mov	r2, r0
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	4013      	ands	r3, r2
 800900e:	2b01      	cmp	r3, #1
 8009010:	d0e9      	beq.n	8008fe6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000000 	.word	0x20000000

08009020 <LL_RCC_GetUSARTClockSource>:
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800902c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	401a      	ands	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	041b      	lsls	r3, r3, #16
 8009038:	4313      	orrs	r3, r2
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr

08009044 <LL_RCC_GetLPUARTClockSource>:
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800904c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009050:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4013      	ands	r3, r2
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	bc80      	pop	{r7}
 8009060:	4770      	bx	lr

08009062 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e042      	b.n	80090fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800907a:	2b00      	cmp	r3, #0
 800907c:	d106      	bne.n	800908c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7fa f882 	bl	8003190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2224      	movs	r2, #36	@ 0x24
 8009090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0201 	bic.w	r2, r2, #1
 80090a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 feab 	bl	8009e08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fc34 	bl	8009920 <UART_SetConfig>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d101      	bne.n	80090c2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e01b      	b.n	80090fa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0201 	orr.w	r2, r2, #1
 80090f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 ff29 	bl	8009f4a <UART_CheckIdleState>
 80090f8:	4603      	mov	r3, r0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	@ 0x28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009118:	2b20      	cmp	r3, #32
 800911a:	d137      	bne.n	800918c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <HAL_UART_Receive_IT+0x24>
 8009122:	88fb      	ldrh	r3, [r7, #6]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e030      	b.n	800918e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a18      	ldr	r2, [pc, #96]	@ (8009198 <HAL_UART_Receive_IT+0x94>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d01f      	beq.n	800917c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d018      	beq.n	800917c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	613b      	str	r3, [r7, #16]
   return(result);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800915e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	623b      	str	r3, [r7, #32]
 800916a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	69f9      	ldr	r1, [r7, #28]
 800916e:	6a3a      	ldr	r2, [r7, #32]
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	61bb      	str	r3, [r7, #24]
   return(result);
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e6      	bne.n	800914a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800917c:	88fb      	ldrh	r3, [r7, #6]
 800917e:	461a      	mov	r2, r3
 8009180:	68b9      	ldr	r1, [r7, #8]
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f000 fffe 	bl	800a184 <UART_Start_Receive_IT>
 8009188:	4603      	mov	r3, r0
 800918a:	e000      	b.n	800918e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800918c:	2302      	movs	r3, #2
  }
}
 800918e:	4618      	mov	r0, r3
 8009190:	3728      	adds	r7, #40	@ 0x28
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	40008000 	.word	0x40008000

0800919c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b08a      	sub	sp, #40	@ 0x28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b0:	2b20      	cmp	r3, #32
 80091b2:	d167      	bne.n	8009284 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <HAL_UART_Transmit_DMA+0x24>
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e060      	b.n	8009286 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	88fa      	ldrh	r2, [r7, #6]
 80091ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2221      	movs	r2, #33	@ 0x21
 80091e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d028      	beq.n	8009244 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091f6:	4a26      	ldr	r2, [pc, #152]	@ (8009290 <HAL_UART_Transmit_DMA+0xf4>)
 80091f8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091fe:	4a25      	ldr	r2, [pc, #148]	@ (8009294 <HAL_UART_Transmit_DMA+0xf8>)
 8009200:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009206:	4a24      	ldr	r2, [pc, #144]	@ (8009298 <HAL_UART_Transmit_DMA+0xfc>)
 8009208:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800920e:	2200      	movs	r2, #0
 8009210:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800921a:	4619      	mov	r1, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3328      	adds	r3, #40	@ 0x28
 8009222:	461a      	mov	r2, r3
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	f7fb fe15 	bl	8004e54 <HAL_DMA_Start_IT>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d009      	beq.n	8009244 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2210      	movs	r2, #16
 8009234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2220      	movs	r2, #32
 800923c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e020      	b.n	8009286 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2240      	movs	r2, #64	@ 0x40
 800924a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3308      	adds	r3, #8
 8009252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	613b      	str	r3, [r7, #16]
   return(result);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800926c:	623a      	str	r2, [r7, #32]
 800926e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	69f9      	ldr	r1, [r7, #28]
 8009272:	6a3a      	ldr	r2, [r7, #32]
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	61bb      	str	r3, [r7, #24]
   return(result);
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e5      	bne.n	800924c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	e000      	b.n	8009286 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009284:	2302      	movs	r3, #2
  }
}
 8009286:	4618      	mov	r0, r3
 8009288:	3728      	adds	r7, #40	@ 0x28
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	0800a50f 	.word	0x0800a50f
 8009294:	0800a5a9 	.word	0x0800a5a9
 8009298:	0800a5c5 	.word	0x0800a5c5

0800929c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b0ba      	sub	sp, #232	@ 0xe8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80092c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80092ca:	4013      	ands	r3, r2
 80092cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80092d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d11b      	bne.n	8009310 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092dc:	f003 0320 	and.w	r3, r3, #32
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d015      	beq.n	8009310 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d105      	bne.n	80092fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d009      	beq.n	8009310 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 82e3 	beq.w	80098cc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
      }
      return;
 800930e:	e2dd      	b.n	80098cc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8123 	beq.w	8009560 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800931a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800931e:	4b8d      	ldr	r3, [pc, #564]	@ (8009554 <HAL_UART_IRQHandler+0x2b8>)
 8009320:	4013      	ands	r3, r2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800932a:	4b8b      	ldr	r3, [pc, #556]	@ (8009558 <HAL_UART_IRQHandler+0x2bc>)
 800932c:	4013      	ands	r3, r2
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 8116 	beq.w	8009560 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	d011      	beq.n	8009364 <HAL_UART_IRQHandler+0xc8>
 8009340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2201      	movs	r2, #1
 8009352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935a:	f043 0201 	orr.w	r2, r3, #1
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d011      	beq.n	8009394 <HAL_UART_IRQHandler+0xf8>
 8009370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00b      	beq.n	8009394 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2202      	movs	r2, #2
 8009382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938a:	f043 0204 	orr.w	r2, r3, #4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d011      	beq.n	80093c4 <HAL_UART_IRQHandler+0x128>
 80093a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2204      	movs	r2, #4
 80093b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ba:	f043 0202 	orr.w	r2, r3, #2
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d017      	beq.n	8009400 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d105      	bne.n	80093e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80093dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80093e0:	4b5c      	ldr	r3, [pc, #368]	@ (8009554 <HAL_UART_IRQHandler+0x2b8>)
 80093e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2208      	movs	r2, #8
 80093ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f6:	f043 0208 	orr.w	r2, r3, #8
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009408:	2b00      	cmp	r3, #0
 800940a:	d012      	beq.n	8009432 <HAL_UART_IRQHandler+0x196>
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009410:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00c      	beq.n	8009432 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009428:	f043 0220 	orr.w	r2, r3, #32
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 8249 	beq.w	80098d0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800943e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009442:	f003 0320 	and.w	r3, r3, #32
 8009446:	2b00      	cmp	r3, #0
 8009448:	d013      	beq.n	8009472 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800944a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800944e:	f003 0320 	and.w	r3, r3, #32
 8009452:	2b00      	cmp	r3, #0
 8009454:	d105      	bne.n	8009462 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800945a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009478:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009486:	2b40      	cmp	r3, #64	@ 0x40
 8009488:	d005      	beq.n	8009496 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800948a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800948e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009492:	2b00      	cmp	r3, #0
 8009494:	d054      	beq.n	8009540 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 ffd4 	bl	800a444 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a6:	2b40      	cmp	r3, #64	@ 0x40
 80094a8:	d146      	bne.n	8009538 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3308      	adds	r3, #8
 80094b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80094c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3308      	adds	r3, #8
 80094d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80094d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80094da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80094e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80094ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1d9      	bne.n	80094aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d017      	beq.n	8009530 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009506:	4a15      	ldr	r2, [pc, #84]	@ (800955c <HAL_UART_IRQHandler+0x2c0>)
 8009508:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009510:	4618      	mov	r0, r3
 8009512:	f7fb fd7b 	bl	800500c <HAL_DMA_Abort_IT>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d019      	beq.n	8009550 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800952a:	4610      	mov	r0, r2
 800952c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952e:	e00f      	b.n	8009550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f9e0 	bl	80098f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009536:	e00b      	b.n	8009550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f9dc 	bl	80098f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800953e:	e007      	b.n	8009550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f9d8 	bl	80098f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800954e:	e1bf      	b.n	80098d0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009550:	bf00      	nop
    return;
 8009552:	e1bd      	b.n	80098d0 <HAL_UART_IRQHandler+0x634>
 8009554:	10000001 	.word	0x10000001
 8009558:	04000120 	.word	0x04000120
 800955c:	0800a645 	.word	0x0800a645

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009564:	2b01      	cmp	r3, #1
 8009566:	f040 8153 	bne.w	8009810 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800956a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800956e:	f003 0310 	and.w	r3, r3, #16
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 814c 	beq.w	8009810 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8145 	beq.w	8009810 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2210      	movs	r2, #16
 800958c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009598:	2b40      	cmp	r3, #64	@ 0x40
 800959a:	f040 80bb 	bne.w	8009714 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 818f 	beq.w	80098d4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095c0:	429a      	cmp	r2, r3
 80095c2:	f080 8187 	bcs.w	80098d4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f040 8087 	bne.w	80096f2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80095f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800960e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009612:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800961a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1da      	bne.n	80095e4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800963e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009652:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009656:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800965a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e1      	bne.n	800962e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800967a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800967c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800968e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009690:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009694:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800969c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e3      	bne.n	800966a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c0:	f023 0310 	bic.w	r3, r3, #16
 80096c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e4      	bne.n	80096b0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fb fc2f 	bl	8004f50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2202      	movs	r2, #2
 80096f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009704:	b29b      	uxth	r3, r3
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	b29b      	uxth	r3, r3
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f8fb 	bl	8009908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009712:	e0df      	b.n	80098d4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009720:	b29b      	uxth	r3, r3
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800972e:	b29b      	uxth	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 80d1 	beq.w	80098d8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009736:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 80cc 	beq.w	80098d8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800974e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009762:	647b      	str	r3, [r7, #68]	@ 0x44
 8009764:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e4      	bne.n	8009740 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3308      	adds	r3, #8
 800977c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	623b      	str	r3, [r7, #32]
   return(result);
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800979e:	633a      	str	r2, [r7, #48]	@ 0x30
 80097a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e1      	bne.n	8009776 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0310 	bic.w	r3, r3, #16
 80097da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	69b9      	ldr	r1, [r7, #24]
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	617b      	str	r3, [r7, #20]
   return(result);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e4      	bne.n	80097c6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009802:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f87d 	bl	8009908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800980e:	e063      	b.n	80098d8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009814:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00e      	beq.n	800983a <HAL_UART_IRQHandler+0x59e>
 800981c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009820:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d008      	beq.n	800983a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009830:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f001 fc64 	bl	800b100 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009838:	e051      	b.n	80098de <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800983a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800983e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009842:	2b00      	cmp	r3, #0
 8009844:	d014      	beq.n	8009870 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800984a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800984e:	2b00      	cmp	r3, #0
 8009850:	d105      	bne.n	800985e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d008      	beq.n	8009870 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009862:	2b00      	cmp	r3, #0
 8009864:	d03a      	beq.n	80098dc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	4798      	blx	r3
    }
    return;
 800986e:	e035      	b.n	80098dc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	d009      	beq.n	8009890 <HAL_UART_IRQHandler+0x5f4>
 800987c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fef1 	bl	800a670 <UART_EndTransmit_IT>
    return;
 800988e:	e026      	b.n	80098de <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d009      	beq.n	80098b0 <HAL_UART_IRQHandler+0x614>
 800989c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 fc3b 	bl	800b124 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ae:	e016      	b.n	80098de <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d010      	beq.n	80098de <HAL_UART_IRQHandler+0x642>
 80098bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	da0c      	bge.n	80098de <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f001 fc24 	bl	800b112 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ca:	e008      	b.n	80098de <HAL_UART_IRQHandler+0x642>
      return;
 80098cc:	bf00      	nop
 80098ce:	e006      	b.n	80098de <HAL_UART_IRQHandler+0x642>
    return;
 80098d0:	bf00      	nop
 80098d2:	e004      	b.n	80098de <HAL_UART_IRQHandler+0x642>
      return;
 80098d4:	bf00      	nop
 80098d6:	e002      	b.n	80098de <HAL_UART_IRQHandler+0x642>
      return;
 80098d8:	bf00      	nop
 80098da:	e000      	b.n	80098de <HAL_UART_IRQHandler+0x642>
    return;
 80098dc:	bf00      	nop
  }
}
 80098de:	37e8      	adds	r7, #232	@ 0xe8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bc80      	pop	{r7}
 80098f4:	4770      	bx	lr

080098f6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098fe:	bf00      	nop
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	bc80      	pop	{r7}
 8009906:	4770      	bx	lr

08009908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	bc80      	pop	{r7}
 800991c:	4770      	bx	lr
	...

08009920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009924:	b08c      	sub	sp, #48	@ 0x30
 8009926:	af00      	add	r7, sp, #0
 8009928:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	431a      	orrs	r2, r3
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	431a      	orrs	r2, r3
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	4313      	orrs	r3, r2
 8009946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	4b94      	ldr	r3, [pc, #592]	@ (8009ba0 <UART_SetConfig+0x280>)
 8009950:	4013      	ands	r3, r2
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	6812      	ldr	r2, [r2, #0]
 8009956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009958:	430b      	orrs	r3, r1
 800995a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a89      	ldr	r2, [pc, #548]	@ (8009ba4 <UART_SetConfig+0x284>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d004      	beq.n	800998c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009988:	4313      	orrs	r3, r2
 800998a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009996:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099a0:	430b      	orrs	r3, r1
 80099a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099aa:	f023 010f 	bic.w	r1, r3, #15
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a7a      	ldr	r2, [pc, #488]	@ (8009ba8 <UART_SetConfig+0x288>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d127      	bne.n	8009a14 <UART_SetConfig+0xf4>
 80099c4:	2003      	movs	r0, #3
 80099c6:	f7ff fb2b 	bl	8009020 <LL_RCC_GetUSARTClockSource>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d81b      	bhi.n	8009a0c <UART_SetConfig+0xec>
 80099d4:	a201      	add	r2, pc, #4	@ (adr r2, 80099dc <UART_SetConfig+0xbc>)
 80099d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099da:	bf00      	nop
 80099dc:	080099ed 	.word	0x080099ed
 80099e0:	080099fd 	.word	0x080099fd
 80099e4:	080099f5 	.word	0x080099f5
 80099e8:	08009a05 	.word	0x08009a05
 80099ec:	2301      	movs	r3, #1
 80099ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099f2:	e080      	b.n	8009af6 <UART_SetConfig+0x1d6>
 80099f4:	2302      	movs	r3, #2
 80099f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099fa:	e07c      	b.n	8009af6 <UART_SetConfig+0x1d6>
 80099fc:	2304      	movs	r3, #4
 80099fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a02:	e078      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009a04:	2308      	movs	r3, #8
 8009a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a0a:	e074      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a12:	e070      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a64      	ldr	r2, [pc, #400]	@ (8009bac <UART_SetConfig+0x28c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d138      	bne.n	8009a90 <UART_SetConfig+0x170>
 8009a1e:	200c      	movs	r0, #12
 8009a20:	f7ff fafe 	bl	8009020 <LL_RCC_GetUSARTClockSource>
 8009a24:	4603      	mov	r3, r0
 8009a26:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8009a2a:	2b0c      	cmp	r3, #12
 8009a2c:	d82c      	bhi.n	8009a88 <UART_SetConfig+0x168>
 8009a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <UART_SetConfig+0x114>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a69 	.word	0x08009a69
 8009a38:	08009a89 	.word	0x08009a89
 8009a3c:	08009a89 	.word	0x08009a89
 8009a40:	08009a89 	.word	0x08009a89
 8009a44:	08009a79 	.word	0x08009a79
 8009a48:	08009a89 	.word	0x08009a89
 8009a4c:	08009a89 	.word	0x08009a89
 8009a50:	08009a89 	.word	0x08009a89
 8009a54:	08009a71 	.word	0x08009a71
 8009a58:	08009a89 	.word	0x08009a89
 8009a5c:	08009a89 	.word	0x08009a89
 8009a60:	08009a89 	.word	0x08009a89
 8009a64:	08009a81 	.word	0x08009a81
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a6e:	e042      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009a70:	2302      	movs	r3, #2
 8009a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a76:	e03e      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a7e:	e03a      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a86:	e036      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a8e:	e032      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a43      	ldr	r2, [pc, #268]	@ (8009ba4 <UART_SetConfig+0x284>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d12a      	bne.n	8009af0 <UART_SetConfig+0x1d0>
 8009a9a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8009a9e:	f7ff fad1 	bl	8009044 <LL_RCC_GetLPUARTClockSource>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aa8:	d01a      	beq.n	8009ae0 <UART_SetConfig+0x1c0>
 8009aaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aae:	d81b      	bhi.n	8009ae8 <UART_SetConfig+0x1c8>
 8009ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ab4:	d00c      	beq.n	8009ad0 <UART_SetConfig+0x1b0>
 8009ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aba:	d815      	bhi.n	8009ae8 <UART_SetConfig+0x1c8>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d003      	beq.n	8009ac8 <UART_SetConfig+0x1a8>
 8009ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ac4:	d008      	beq.n	8009ad8 <UART_SetConfig+0x1b8>
 8009ac6:	e00f      	b.n	8009ae8 <UART_SetConfig+0x1c8>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ace:	e012      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ad6:	e00e      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ade:	e00a      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae6:	e006      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009ae8:	2310      	movs	r3, #16
 8009aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aee:	e002      	b.n	8009af6 <UART_SetConfig+0x1d6>
 8009af0:	2310      	movs	r3, #16
 8009af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a2a      	ldr	r2, [pc, #168]	@ (8009ba4 <UART_SetConfig+0x284>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	f040 80a4 	bne.w	8009c4a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b06:	2b08      	cmp	r3, #8
 8009b08:	d823      	bhi.n	8009b52 <UART_SetConfig+0x232>
 8009b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b10 <UART_SetConfig+0x1f0>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009b35 	.word	0x08009b35
 8009b14:	08009b53 	.word	0x08009b53
 8009b18:	08009b3d 	.word	0x08009b3d
 8009b1c:	08009b53 	.word	0x08009b53
 8009b20:	08009b43 	.word	0x08009b43
 8009b24:	08009b53 	.word	0x08009b53
 8009b28:	08009b53 	.word	0x08009b53
 8009b2c:	08009b53 	.word	0x08009b53
 8009b30:	08009b4b 	.word	0x08009b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b34:	f7fd ff3a 	bl	80079ac <HAL_RCC_GetPCLK1Freq>
 8009b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b3a:	e010      	b.n	8009b5e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb0 <UART_SetConfig+0x290>)
 8009b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b40:	e00d      	b.n	8009b5e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b42:	f7fd fe7f 	bl	8007844 <HAL_RCC_GetSysClockFreq>
 8009b46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b48:	e009      	b.n	8009b5e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b50:	e005      	b.n	8009b5e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 8137 	beq.w	8009dd4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6a:	4a12      	ldr	r2, [pc, #72]	@ (8009bb4 <UART_SetConfig+0x294>)
 8009b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	4413      	add	r3, r2
 8009b84:	69ba      	ldr	r2, [r7, #24]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d305      	bcc.n	8009b96 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d910      	bls.n	8009bb8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b9c:	e11a      	b.n	8009dd4 <UART_SetConfig+0x4b4>
 8009b9e:	bf00      	nop
 8009ba0:	cfff69f3 	.word	0xcfff69f3
 8009ba4:	40008000 	.word	0x40008000
 8009ba8:	40013800 	.word	0x40013800
 8009bac:	40004400 	.word	0x40004400
 8009bb0:	00f42400 	.word	0x00f42400
 8009bb4:	080208ec 	.word	0x080208ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	2200      	movs	r2, #0
 8009bbc:	60bb      	str	r3, [r7, #8]
 8009bbe:	60fa      	str	r2, [r7, #12]
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc4:	4a8e      	ldr	r2, [pc, #568]	@ (8009e00 <UART_SetConfig+0x4e0>)
 8009bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	2200      	movs	r2, #0
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bda:	f7f7 fa61 	bl	80010a0 <__aeabi_uldivmod>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4610      	mov	r0, r2
 8009be4:	4619      	mov	r1, r3
 8009be6:	f04f 0200 	mov.w	r2, #0
 8009bea:	f04f 0300 	mov.w	r3, #0
 8009bee:	020b      	lsls	r3, r1, #8
 8009bf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bf4:	0202      	lsls	r2, r0, #8
 8009bf6:	6979      	ldr	r1, [r7, #20]
 8009bf8:	6849      	ldr	r1, [r1, #4]
 8009bfa:	0849      	lsrs	r1, r1, #1
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	4605      	mov	r5, r0
 8009c02:	eb12 0804 	adds.w	r8, r2, r4
 8009c06:	eb43 0905 	adc.w	r9, r3, r5
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	469a      	mov	sl, r3
 8009c12:	4693      	mov	fp, r2
 8009c14:	4652      	mov	r2, sl
 8009c16:	465b      	mov	r3, fp
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f7 fa40 	bl	80010a0 <__aeabi_uldivmod>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4613      	mov	r3, r2
 8009c26:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c2e:	d308      	bcc.n	8009c42 <UART_SetConfig+0x322>
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c36:	d204      	bcs.n	8009c42 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6a3a      	ldr	r2, [r7, #32]
 8009c3e:	60da      	str	r2, [r3, #12]
 8009c40:	e0c8      	b.n	8009dd4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c48:	e0c4      	b.n	8009dd4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c52:	d167      	bne.n	8009d24 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009c54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d828      	bhi.n	8009cae <UART_SetConfig+0x38e>
 8009c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c64 <UART_SetConfig+0x344>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009c89 	.word	0x08009c89
 8009c68:	08009c91 	.word	0x08009c91
 8009c6c:	08009c99 	.word	0x08009c99
 8009c70:	08009caf 	.word	0x08009caf
 8009c74:	08009c9f 	.word	0x08009c9f
 8009c78:	08009caf 	.word	0x08009caf
 8009c7c:	08009caf 	.word	0x08009caf
 8009c80:	08009caf 	.word	0x08009caf
 8009c84:	08009ca7 	.word	0x08009ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c88:	f7fd fe90 	bl	80079ac <HAL_RCC_GetPCLK1Freq>
 8009c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c8e:	e014      	b.n	8009cba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c90:	f7fd fe9e 	bl	80079d0 <HAL_RCC_GetPCLK2Freq>
 8009c94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c96:	e010      	b.n	8009cba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c98:	4b5a      	ldr	r3, [pc, #360]	@ (8009e04 <UART_SetConfig+0x4e4>)
 8009c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c9c:	e00d      	b.n	8009cba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c9e:	f7fd fdd1 	bl	8007844 <HAL_RCC_GetSysClockFreq>
 8009ca2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ca4:	e009      	b.n	8009cba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cac:	e005      	b.n	8009cba <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 8089 	beq.w	8009dd4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc6:	4a4e      	ldr	r2, [pc, #312]	@ (8009e00 <UART_SetConfig+0x4e0>)
 8009cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cd4:	005a      	lsls	r2, r3, #1
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	441a      	add	r2, r3
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	2b0f      	cmp	r3, #15
 8009cec:	d916      	bls.n	8009d1c <UART_SetConfig+0x3fc>
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cf4:	d212      	bcs.n	8009d1c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	f023 030f 	bic.w	r3, r3, #15
 8009cfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	085b      	lsrs	r3, r3, #1
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	8bfb      	ldrh	r3, [r7, #30]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	8bfa      	ldrh	r2, [r7, #30]
 8009d18:	60da      	str	r2, [r3, #12]
 8009d1a:	e05b      	b.n	8009dd4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d22:	e057      	b.n	8009dd4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d828      	bhi.n	8009d7e <UART_SetConfig+0x45e>
 8009d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d34 <UART_SetConfig+0x414>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d59 	.word	0x08009d59
 8009d38:	08009d61 	.word	0x08009d61
 8009d3c:	08009d69 	.word	0x08009d69
 8009d40:	08009d7f 	.word	0x08009d7f
 8009d44:	08009d6f 	.word	0x08009d6f
 8009d48:	08009d7f 	.word	0x08009d7f
 8009d4c:	08009d7f 	.word	0x08009d7f
 8009d50:	08009d7f 	.word	0x08009d7f
 8009d54:	08009d77 	.word	0x08009d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d58:	f7fd fe28 	bl	80079ac <HAL_RCC_GetPCLK1Freq>
 8009d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d5e:	e014      	b.n	8009d8a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d60:	f7fd fe36 	bl	80079d0 <HAL_RCC_GetPCLK2Freq>
 8009d64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d66:	e010      	b.n	8009d8a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d68:	4b26      	ldr	r3, [pc, #152]	@ (8009e04 <UART_SetConfig+0x4e4>)
 8009d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d6c:	e00d      	b.n	8009d8a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d6e:	f7fd fd69 	bl	8007844 <HAL_RCC_GetSysClockFreq>
 8009d72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d74:	e009      	b.n	8009d8a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d7c:	e005      	b.n	8009d8a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d88:	bf00      	nop
    }

    if (pclk != 0U)
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d021      	beq.n	8009dd4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d94:	4a1a      	ldr	r2, [pc, #104]	@ (8009e00 <UART_SetConfig+0x4e0>)
 8009d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	085b      	lsrs	r3, r3, #1
 8009da8:	441a      	add	r2, r3
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	2b0f      	cmp	r3, #15
 8009db8:	d909      	bls.n	8009dce <UART_SetConfig+0x4ae>
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dc0:	d205      	bcs.n	8009dce <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60da      	str	r2, [r3, #12]
 8009dcc:	e002      	b.n	8009dd4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2200      	movs	r2, #0
 8009de8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	2200      	movs	r2, #0
 8009dee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009df0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3730      	adds	r7, #48	@ 0x30
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dfe:	bf00      	nop
 8009e00:	080208ec 	.word	0x080208ec
 8009e04:	00f42400 	.word	0x00f42400

08009e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e14:	f003 0308 	and.w	r3, r3, #8
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00a      	beq.n	8009e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00a      	beq.n	8009e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	430a      	orrs	r2, r1
 8009e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e58:	f003 0302 	and.w	r3, r3, #2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00a      	beq.n	8009e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7a:	f003 0304 	and.w	r3, r3, #4
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00a      	beq.n	8009e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	430a      	orrs	r2, r1
 8009e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9c:	f003 0310 	and.w	r3, r3, #16
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00a      	beq.n	8009eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebe:	f003 0320 	and.w	r3, r3, #32
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00a      	beq.n	8009edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01a      	beq.n	8009f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f06:	d10a      	bne.n	8009f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00a      	beq.n	8009f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	605a      	str	r2, [r3, #4]
  }
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bc80      	pop	{r7}
 8009f48:	4770      	bx	lr

08009f4a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b086      	sub	sp, #24
 8009f4e:	af02      	add	r7, sp, #8
 8009f50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f5a:	f7f8 fcdd 	bl	8002918 <HAL_GetTick>
 8009f5e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0308 	and.w	r3, r3, #8
 8009f6a:	2b08      	cmp	r3, #8
 8009f6c:	d10e      	bne.n	8009f8c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f832 	bl	8009fe6 <UART_WaitOnFlagUntilTimeout>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e028      	b.n	8009fde <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d10e      	bne.n	8009fb8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f81c 	bl	8009fe6 <UART_WaitOnFlagUntilTimeout>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e012      	b.n	8009fde <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b09c      	sub	sp, #112	@ 0x70
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	603b      	str	r3, [r7, #0]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff6:	e0af      	b.n	800a158 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	f000 80ab 	beq.w	800a158 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a002:	f7f8 fc89 	bl	8002918 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a00e:	429a      	cmp	r2, r3
 800a010:	d302      	bcc.n	800a018 <UART_WaitOnFlagUntilTimeout+0x32>
 800a012:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a014:	2b00      	cmp	r3, #0
 800a016:	d140      	bne.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a028:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a02c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	461a      	mov	r2, r3
 800a034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a036:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a038:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a03c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e6      	bne.n	800a018 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3308      	adds	r3, #8
 800a050:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a054:	e853 3f00 	ldrex	r3, [r3]
 800a058:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05c:	f023 0301 	bic.w	r3, r3, #1
 800a060:	663b      	str	r3, [r7, #96]	@ 0x60
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3308      	adds	r3, #8
 800a068:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a06a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a06c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e5      	bne.n	800a04a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2220      	movs	r2, #32
 800a082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2220      	movs	r2, #32
 800a08a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e06f      	b.n	800a17a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0304 	and.w	r3, r3, #4
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d057      	beq.n	800a158 <UART_WaitOnFlagUntilTimeout+0x172>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b80      	cmp	r3, #128	@ 0x80
 800a0ac:	d054      	beq.n	800a158 <UART_WaitOnFlagUntilTimeout+0x172>
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b40      	cmp	r3, #64	@ 0x40
 800a0b2:	d051      	beq.n	800a158 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0c2:	d149      	bne.n	800a158 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d6:	e853 3f00 	ldrex	r3, [r3]
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0de:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a0e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ee:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0f4:	e841 2300 	strex	r3, r2, [r1]
 800a0f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e6      	bne.n	800a0ce <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3308      	adds	r3, #8
 800a106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	e853 3f00 	ldrex	r3, [r3]
 800a10e:	613b      	str	r3, [r7, #16]
   return(result);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	f023 0301 	bic.w	r3, r3, #1
 800a116:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3308      	adds	r3, #8
 800a11e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a120:	623a      	str	r2, [r7, #32]
 800a122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a124:	69f9      	ldr	r1, [r7, #28]
 800a126:	6a3a      	ldr	r2, [r7, #32]
 800a128:	e841 2300 	strex	r3, r2, [r1]
 800a12c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1e5      	bne.n	800a100 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2220      	movs	r2, #32
 800a138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2220      	movs	r2, #32
 800a140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2220      	movs	r2, #32
 800a148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	e010      	b.n	800a17a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	69da      	ldr	r2, [r3, #28]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	4013      	ands	r3, r2
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	429a      	cmp	r2, r3
 800a166:	bf0c      	ite	eq
 800a168:	2301      	moveq	r3, #1
 800a16a:	2300      	movne	r3, #0
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	461a      	mov	r2, r3
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	429a      	cmp	r2, r3
 800a174:	f43f af40 	beq.w	8009ff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3770      	adds	r7, #112	@ 0x70
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
	...

0800a184 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a184:	b480      	push	{r7}
 800a186:	b0a3      	sub	sp, #140	@ 0x8c
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	88fa      	ldrh	r2, [r7, #6]
 800a19c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	88fa      	ldrh	r2, [r7, #6]
 800a1a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1b6:	d10e      	bne.n	800a1d6 <UART_Start_Receive_IT+0x52>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d105      	bne.n	800a1cc <UART_Start_Receive_IT+0x48>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a1c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1ca:	e02d      	b.n	800a228 <UART_Start_Receive_IT+0xa4>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	22ff      	movs	r2, #255	@ 0xff
 800a1d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1d4:	e028      	b.n	800a228 <UART_Start_Receive_IT+0xa4>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10d      	bne.n	800a1fa <UART_Start_Receive_IT+0x76>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d104      	bne.n	800a1f0 <UART_Start_Receive_IT+0x6c>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	22ff      	movs	r2, #255	@ 0xff
 800a1ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1ee:	e01b      	b.n	800a228 <UART_Start_Receive_IT+0xa4>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	227f      	movs	r2, #127	@ 0x7f
 800a1f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a1f8:	e016      	b.n	800a228 <UART_Start_Receive_IT+0xa4>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a202:	d10d      	bne.n	800a220 <UART_Start_Receive_IT+0x9c>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d104      	bne.n	800a216 <UART_Start_Receive_IT+0x92>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	227f      	movs	r2, #127	@ 0x7f
 800a210:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a214:	e008      	b.n	800a228 <UART_Start_Receive_IT+0xa4>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	223f      	movs	r2, #63	@ 0x3f
 800a21a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a21e:	e003      	b.n	800a228 <UART_Start_Receive_IT+0xa4>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2222      	movs	r2, #34	@ 0x22
 800a234:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3308      	adds	r3, #8
 800a23e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a242:	e853 3f00 	ldrex	r3, [r3]
 800a246:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a248:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a24a:	f043 0301 	orr.w	r3, r3, #1
 800a24e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3308      	adds	r3, #8
 800a258:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a25c:	673a      	str	r2, [r7, #112]	@ 0x70
 800a25e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a260:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a262:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a264:	e841 2300 	strex	r3, r2, [r1]
 800a268:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a26a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e3      	bne.n	800a238 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a278:	d14f      	bne.n	800a31a <UART_Start_Receive_IT+0x196>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a280:	88fa      	ldrh	r2, [r7, #6]
 800a282:	429a      	cmp	r2, r3
 800a284:	d349      	bcc.n	800a31a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a28e:	d107      	bne.n	800a2a0 <UART_Start_Receive_IT+0x11c>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d103      	bne.n	800a2a0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4a46      	ldr	r2, [pc, #280]	@ (800a3b4 <UART_Start_Receive_IT+0x230>)
 800a29c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a29e:	e002      	b.n	800a2a6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4a45      	ldr	r2, [pc, #276]	@ (800a3b8 <UART_Start_Receive_IT+0x234>)
 800a2a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d01a      	beq.n	800a2e4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a2bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2d2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a2d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a2de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e4      	bne.n	800a2ae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ee:	e853 3f00 	ldrex	r3, [r3]
 800a2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3308      	adds	r3, #8
 800a302:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a304:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a306:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a30a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a30c:	e841 2300 	strex	r3, r2, [r1]
 800a310:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e5      	bne.n	800a2e4 <UART_Start_Receive_IT+0x160>
 800a318:	e046      	b.n	800a3a8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a322:	d107      	bne.n	800a334 <UART_Start_Receive_IT+0x1b0>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d103      	bne.n	800a334 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4a23      	ldr	r2, [pc, #140]	@ (800a3bc <UART_Start_Receive_IT+0x238>)
 800a330:	675a      	str	r2, [r3, #116]	@ 0x74
 800a332:	e002      	b.n	800a33a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4a22      	ldr	r2, [pc, #136]	@ (800a3c0 <UART_Start_Receive_IT+0x23c>)
 800a338:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d019      	beq.n	800a376 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34a:	e853 3f00 	ldrex	r3, [r3]
 800a34e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a356:	677b      	str	r3, [r7, #116]	@ 0x74
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a360:	637b      	str	r3, [r7, #52]	@ 0x34
 800a362:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e6      	bne.n	800a342 <UART_Start_Receive_IT+0x1be>
 800a374:	e018      	b.n	800a3a8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	e853 3f00 	ldrex	r3, [r3]
 800a382:	613b      	str	r3, [r7, #16]
   return(result);
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f043 0320 	orr.w	r3, r3, #32
 800a38a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	461a      	mov	r2, r3
 800a392:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a394:	623b      	str	r3, [r7, #32]
 800a396:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a398:	69f9      	ldr	r1, [r7, #28]
 800a39a:	6a3a      	ldr	r2, [r7, #32]
 800a39c:	e841 2300 	strex	r3, r2, [r1]
 800a3a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e6      	bne.n	800a376 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	378c      	adds	r7, #140	@ 0x8c
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bc80      	pop	{r7}
 800a3b2:	4770      	bx	lr
 800a3b4:	0800ad99 	.word	0x0800ad99
 800a3b8:	0800aa39 	.word	0x0800aa39
 800a3bc:	0800a881 	.word	0x0800a881
 800a3c0:	0800a6c9 	.word	0x0800a6c9

0800a3c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b08f      	sub	sp, #60	@ 0x3c
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	e853 3f00 	ldrex	r3, [r3]
 800a3d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e6      	bne.n	800a3cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3308      	adds	r3, #8
 800a404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a414:	633b      	str	r3, [r7, #48]	@ 0x30
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3308      	adds	r3, #8
 800a41c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a41e:	61ba      	str	r2, [r7, #24]
 800a420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	6979      	ldr	r1, [r7, #20]
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	613b      	str	r3, [r7, #16]
   return(result);
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e5      	bne.n	800a3fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2220      	movs	r2, #32
 800a436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a43a:	bf00      	nop
 800a43c:	373c      	adds	r7, #60	@ 0x3c
 800a43e:	46bd      	mov	sp, r7
 800a440:	bc80      	pop	{r7}
 800a442:	4770      	bx	lr

0800a444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a444:	b480      	push	{r7}
 800a446:	b095      	sub	sp, #84	@ 0x54
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a454:	e853 3f00 	ldrex	r3, [r3]
 800a458:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a46a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a46c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a470:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e6      	bne.n	800a44c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3308      	adds	r3, #8
 800a484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a486:	6a3b      	ldr	r3, [r7, #32]
 800a488:	e853 3f00 	ldrex	r3, [r3]
 800a48c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a494:	f023 0301 	bic.w	r3, r3, #1
 800a498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e3      	bne.n	800a47e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d118      	bne.n	800a4f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f023 0310 	bic.w	r3, r3, #16
 800a4d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4dc:	61bb      	str	r3, [r7, #24]
 800a4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6979      	ldr	r1, [r7, #20]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e6      	bne.n	800a4be <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a504:	bf00      	nop
 800a506:	3754      	adds	r7, #84	@ 0x54
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr

0800a50e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b090      	sub	sp, #64	@ 0x40
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0320 	and.w	r3, r3, #32
 800a526:	2b00      	cmp	r3, #0
 800a528:	d137      	bne.n	800a59a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a52c:	2200      	movs	r2, #0
 800a52e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	3308      	adds	r3, #8
 800a538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53c:	e853 3f00 	ldrex	r3, [r3]
 800a540:	623b      	str	r3, [r7, #32]
   return(result);
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a548:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3308      	adds	r3, #8
 800a550:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a552:	633a      	str	r2, [r7, #48]	@ 0x30
 800a554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a55a:	e841 2300 	strex	r3, r2, [r1]
 800a55e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1e5      	bne.n	800a532 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	60fb      	str	r3, [r7, #12]
   return(result);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a57a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	461a      	mov	r2, r3
 800a582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a584:	61fb      	str	r3, [r7, #28]
 800a586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	69b9      	ldr	r1, [r7, #24]
 800a58a:	69fa      	ldr	r2, [r7, #28]
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	617b      	str	r3, [r7, #20]
   return(result);
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e6      	bne.n	800a566 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a598:	e002      	b.n	800a5a0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a59a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a59c:	f7f8 fffa 	bl	8003594 <HAL_UART_TxCpltCallback>
}
 800a5a0:	bf00      	nop
 800a5a2:	3740      	adds	r7, #64	@ 0x40
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f7ff f994 	bl	80098e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5bc:	bf00      	nop
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ec:	2b80      	cmp	r3, #128	@ 0x80
 800a5ee:	d109      	bne.n	800a604 <UART_DMAError+0x40>
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	2b21      	cmp	r3, #33	@ 0x21
 800a5f4:	d106      	bne.n	800a604 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a5fe:	6978      	ldr	r0, [r7, #20]
 800a600:	f7ff fee0 	bl	800a3c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a60e:	2b40      	cmp	r3, #64	@ 0x40
 800a610:	d109      	bne.n	800a626 <UART_DMAError+0x62>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2b22      	cmp	r3, #34	@ 0x22
 800a616:	d106      	bne.n	800a626 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a620:	6978      	ldr	r0, [r7, #20]
 800a622:	f7ff ff0f 	bl	800a444 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a62c:	f043 0210 	orr.w	r2, r3, #16
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a636:	6978      	ldr	r0, [r7, #20]
 800a638:	f7ff f95d 	bl	80098f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a63c:	bf00      	nop
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f7ff f947 	bl	80098f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a668:	bf00      	nop
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b088      	sub	sp, #32
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	e853 3f00 	ldrex	r3, [r3]
 800a684:	60bb      	str	r3, [r7, #8]
   return(result);
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a68c:	61fb      	str	r3, [r7, #28]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	61bb      	str	r3, [r7, #24]
 800a698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69a:	6979      	ldr	r1, [r7, #20]
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	e841 2300 	strex	r3, r2, [r1]
 800a6a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e6      	bne.n	800a678 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7f8 ff6b 	bl	8003594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6be:	bf00      	nop
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
	...

0800a6c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b09c      	sub	sp, #112	@ 0x70
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a6d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6e0:	2b22      	cmp	r3, #34	@ 0x22
 800a6e2:	f040 80be 	bne.w	800a862 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a6f4:	b2d9      	uxtb	r1, r3
 800a6f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a700:	400a      	ands	r2, r1
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a716:	b29b      	uxth	r3, r3
 800a718:	3b01      	subs	r3, #1
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a728:	b29b      	uxth	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f040 80a1 	bne.w	800a872 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a73e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a744:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a74e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a756:	e841 2300 	strex	r3, r2, [r1]
 800a75a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a75c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1e6      	bne.n	800a730 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3308      	adds	r3, #8
 800a768:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a774:	f023 0301 	bic.w	r3, r3, #1
 800a778:	667b      	str	r3, [r7, #100]	@ 0x64
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3308      	adds	r3, #8
 800a780:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a782:	647a      	str	r2, [r7, #68]	@ 0x44
 800a784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a788:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e5      	bne.n	800a762 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2220      	movs	r2, #32
 800a79a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a33      	ldr	r2, [pc, #204]	@ (800a87c <UART_RxISR_8BIT+0x1b4>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d01f      	beq.n	800a7f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d018      	beq.n	800a7f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ca:	e853 3f00 	ldrex	r3, [r3]
 800a7ce:	623b      	str	r3, [r7, #32]
   return(result);
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
 800a7d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a7d6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7e8:	e841 2300 	strex	r3, r2, [r1]
 800a7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e6      	bne.n	800a7c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d12e      	bne.n	800a85a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 0310 	bic.w	r3, r3, #16
 800a816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	461a      	mov	r2, r3
 800a81e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a820:	61fb      	str	r3, [r7, #28]
 800a822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	69b9      	ldr	r1, [r7, #24]
 800a826:	69fa      	ldr	r2, [r7, #28]
 800a828:	e841 2300 	strex	r3, r2, [r1]
 800a82c:	617b      	str	r3, [r7, #20]
   return(result);
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e6      	bne.n	800a802 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	f003 0310 	and.w	r3, r3, #16
 800a83e:	2b10      	cmp	r3, #16
 800a840:	d103      	bne.n	800a84a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2210      	movs	r2, #16
 800a848:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff f858 	bl	8009908 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a858:	e00b      	b.n	800a872 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7f8 feb0 	bl	80035c0 <HAL_UART_RxCpltCallback>
}
 800a860:	e007      	b.n	800a872 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	699a      	ldr	r2, [r3, #24]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f042 0208 	orr.w	r2, r2, #8
 800a870:	619a      	str	r2, [r3, #24]
}
 800a872:	bf00      	nop
 800a874:	3770      	adds	r7, #112	@ 0x70
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	40008000 	.word	0x40008000

0800a880 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b09c      	sub	sp, #112	@ 0x70
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a88e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a898:	2b22      	cmp	r3, #34	@ 0x22
 800a89a:	f040 80be 	bne.w	800aa1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a8ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a8b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8c2:	1c9a      	adds	r2, r3, #2
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f040 80a1 	bne.w	800aa2a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8f0:	e853 3f00 	ldrex	r3, [r3]
 800a8f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a8f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a906:	657b      	str	r3, [r7, #84]	@ 0x54
 800a908:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a90c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a90e:	e841 2300 	strex	r3, r2, [r1]
 800a912:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e6      	bne.n	800a8e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3308      	adds	r3, #8
 800a920:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a924:	e853 3f00 	ldrex	r3, [r3]
 800a928:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92c:	f023 0301 	bic.w	r3, r3, #1
 800a930:	663b      	str	r3, [r7, #96]	@ 0x60
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3308      	adds	r3, #8
 800a938:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a93a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a940:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a942:	e841 2300 	strex	r3, r2, [r1]
 800a946:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e5      	bne.n	800a91a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a33      	ldr	r2, [pc, #204]	@ (800aa34 <UART_RxISR_16BIT+0x1b4>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d01f      	beq.n	800a9ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d018      	beq.n	800a9ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	61fb      	str	r3, [r7, #28]
   return(result);
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a98e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	461a      	mov	r2, r3
 800a996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a99a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a99e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e6      	bne.n	800a97a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d12e      	bne.n	800aa12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	e853 3f00 	ldrex	r3, [r3]
 800a9c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f023 0310 	bic.w	r3, r3, #16
 800a9ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a9d8:	61bb      	str	r3, [r7, #24]
 800a9da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9dc:	6979      	ldr	r1, [r7, #20]
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	e841 2300 	strex	r3, r2, [r1]
 800a9e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1e6      	bne.n	800a9ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	f003 0310 	and.w	r3, r3, #16
 800a9f6:	2b10      	cmp	r3, #16
 800a9f8:	d103      	bne.n	800aa02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2210      	movs	r2, #16
 800aa00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7fe ff7c 	bl	8009908 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa10:	e00b      	b.n	800aa2a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7f8 fdd4 	bl	80035c0 <HAL_UART_RxCpltCallback>
}
 800aa18:	e007      	b.n	800aa2a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	699a      	ldr	r2, [r3, #24]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f042 0208 	orr.w	r2, r2, #8
 800aa28:	619a      	str	r2, [r3, #24]
}
 800aa2a:	bf00      	nop
 800aa2c:	3770      	adds	r7, #112	@ 0x70
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	40008000 	.word	0x40008000

0800aa38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b0ac      	sub	sp, #176	@ 0xb0
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aa46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	69db      	ldr	r3, [r3, #28]
 800aa50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa6e:	2b22      	cmp	r3, #34	@ 0x22
 800aa70:	f040 8182 	bne.w	800ad78 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa7a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa7e:	e125      	b.n	800accc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa86:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aa8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800aa8e:	b2d9      	uxtb	r1, r3
 800aa90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa9a:	400a      	ands	r2, r1
 800aa9c:	b2d2      	uxtb	r2, r2
 800aa9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaa4:	1c5a      	adds	r2, r3, #1
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	69db      	ldr	r3, [r3, #28]
 800aac2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aaca:	f003 0307 	and.w	r3, r3, #7
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d053      	beq.n	800ab7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d011      	beq.n	800ab02 <UART_RxISR_8BIT_FIFOEN+0xca>
 800aade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00b      	beq.n	800ab02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaf8:	f043 0201 	orr.w	r2, r3, #1
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d011      	beq.n	800ab32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ab0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00b      	beq.n	800ab32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab28:	f043 0204 	orr.w	r2, r3, #4
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab36:	f003 0304 	and.w	r3, r3, #4
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d011      	beq.n	800ab62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ab3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00b      	beq.n	800ab62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2204      	movs	r2, #4
 800ab50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab58:	f043 0202 	orr.w	r2, r3, #2
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d006      	beq.n	800ab7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7fe fec2 	bl	80098f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f040 80a2 	bne.w	800accc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab90:	e853 3f00 	ldrex	r3, [r3]
 800ab94:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ab96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	461a      	mov	r2, r3
 800aba6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800abac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800abb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800abb2:	e841 2300 	strex	r3, r2, [r1]
 800abb6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800abb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1e4      	bne.n	800ab88 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3308      	adds	r3, #8
 800abc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abc8:	e853 3f00 	ldrex	r3, [r3]
 800abcc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800abce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800abd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abd4:	f023 0301 	bic.w	r3, r3, #1
 800abd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3308      	adds	r3, #8
 800abe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800abe6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800abe8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800abec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800abee:	e841 2300 	strex	r3, r2, [r1]
 800abf2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800abf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1e1      	bne.n	800abbe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2220      	movs	r2, #32
 800abfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a5f      	ldr	r2, [pc, #380]	@ (800ad90 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d021      	beq.n	800ac5c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d01a      	beq.n	800ac5c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac2e:	e853 3f00 	ldrex	r3, [r3]
 800ac32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ac34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	461a      	mov	r2, r3
 800ac44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac48:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac4a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac50:	e841 2300 	strex	r3, r2, [r1]
 800ac54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ac56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1e4      	bne.n	800ac26 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d130      	bne.n	800acc6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7a:	f023 0310 	bic.w	r3, r3, #16
 800ac7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	461a      	mov	r2, r3
 800ac88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e4      	bne.n	800ac6a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	f003 0310 	and.w	r3, r3, #16
 800acaa:	2b10      	cmp	r3, #16
 800acac:	d103      	bne.n	800acb6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2210      	movs	r2, #16
 800acb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7fe fe22 	bl	8009908 <HAL_UARTEx_RxEventCallback>
 800acc4:	e002      	b.n	800accc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7f8 fc7a 	bl	80035c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800accc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d006      	beq.n	800ace2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800acd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acd8:	f003 0320 	and.w	r3, r3, #32
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f47f aecf 	bne.w	800aa80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ace8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800acec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d049      	beq.n	800ad88 <UART_RxISR_8BIT_FIFOEN+0x350>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800acfa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d242      	bcs.n	800ad88 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	3308      	adds	r3, #8
 800ad08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3308      	adds	r3, #8
 800ad22:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad2e:	e841 2300 	strex	r3, r2, [r1]
 800ad32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1e3      	bne.n	800ad02 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a15      	ldr	r2, [pc, #84]	@ (800ad94 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ad3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f043 0320 	orr.w	r3, r3, #32
 800ad54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	6979      	ldr	r1, [r7, #20]
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e4      	bne.n	800ad40 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad76:	e007      	b.n	800ad88 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f042 0208 	orr.w	r2, r2, #8
 800ad86:	619a      	str	r2, [r3, #24]
}
 800ad88:	bf00      	nop
 800ad8a:	37b0      	adds	r7, #176	@ 0xb0
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	40008000 	.word	0x40008000
 800ad94:	0800a6c9 	.word	0x0800a6c9

0800ad98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b0ae      	sub	sp, #184	@ 0xb8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ada6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adce:	2b22      	cmp	r3, #34	@ 0x22
 800add0:	f040 8186 	bne.w	800b0e0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800adda:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800adde:	e129      	b.n	800b034 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800adf2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800adf6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800adfa:	4013      	ands	r3, r2
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae08:	1c9a      	adds	r2, r3, #2
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	3b01      	subs	r3, #1
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ae2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae2e:	f003 0307 	and.w	r3, r3, #7
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d053      	beq.n	800aede <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d011      	beq.n	800ae66 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ae42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00b      	beq.n	800ae66 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2201      	movs	r2, #1
 800ae54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae5c:	f043 0201 	orr.w	r2, r3, #1
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae6a:	f003 0302 	and.w	r3, r3, #2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d011      	beq.n	800ae96 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ae72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00b      	beq.n	800ae96 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2202      	movs	r2, #2
 800ae84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae8c:	f043 0204 	orr.w	r2, r3, #4
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d011      	beq.n	800aec6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800aea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00b      	beq.n	800aec6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2204      	movs	r2, #4
 800aeb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aebc:	f043 0202 	orr.w	r2, r3, #2
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d006      	beq.n	800aede <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7fe fd10 	bl	80098f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f040 80a4 	bne.w	800b034 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aef4:	e853 3f00 	ldrex	r3, [r3]
 800aef8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aefa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aefc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	461a      	mov	r2, r3
 800af0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af12:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e2      	bne.n	800aeec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3308      	adds	r3, #8
 800af2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af3c:	f023 0301 	bic.w	r3, r3, #1
 800af40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3308      	adds	r3, #8
 800af4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800af4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800af50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800af54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800af5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e1      	bne.n	800af26 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2220      	movs	r2, #32
 800af66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a5f      	ldr	r2, [pc, #380]	@ (800b0f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d021      	beq.n	800afc4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d01a      	beq.n	800afc4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af96:	e853 3f00 	ldrex	r3, [r3]
 800af9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800afa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	461a      	mov	r2, r3
 800afac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800afb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afb2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800afb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800afb8:	e841 2300 	strex	r3, r2, [r1]
 800afbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800afbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1e4      	bne.n	800af8e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d130      	bne.n	800b02e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afda:	e853 3f00 	ldrex	r3, [r3]
 800afde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe2:	f023 0310 	bic.w	r3, r3, #16
 800afe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aff4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aff6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800affa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800affc:	e841 2300 	strex	r3, r2, [r1]
 800b000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1e4      	bne.n	800afd2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	f003 0310 	and.w	r3, r3, #16
 800b012:	2b10      	cmp	r3, #16
 800b014:	d103      	bne.n	800b01e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2210      	movs	r2, #16
 800b01c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7fe fc6e 	bl	8009908 <HAL_UARTEx_RxEventCallback>
 800b02c:	e002      	b.n	800b034 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7f8 fac6 	bl	80035c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b034:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d006      	beq.n	800b04a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800b03c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b040:	f003 0320 	and.w	r3, r3, #32
 800b044:	2b00      	cmp	r3, #0
 800b046:	f47f aecb 	bne.w	800ade0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b050:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b054:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d049      	beq.n	800b0f0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b062:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b066:	429a      	cmp	r2, r3
 800b068:	d242      	bcs.n	800b0f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3308      	adds	r3, #8
 800b070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	623b      	str	r3, [r7, #32]
   return(result);
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3308      	adds	r3, #8
 800b08a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b08e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b096:	e841 2300 	strex	r3, r2, [r1]
 800b09a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1e3      	bne.n	800b06a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a15      	ldr	r2, [pc, #84]	@ (800b0fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b0a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	e853 3f00 	ldrex	r3, [r3]
 800b0b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f043 0320 	orr.w	r3, r3, #32
 800b0bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	69b9      	ldr	r1, [r7, #24]
 800b0d0:	69fa      	ldr	r2, [r7, #28]
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	617b      	str	r3, [r7, #20]
   return(result);
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e4      	bne.n	800b0a8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0de:	e007      	b.n	800b0f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	699a      	ldr	r2, [r3, #24]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f042 0208 	orr.w	r2, r2, #8
 800b0ee:	619a      	str	r2, [r3, #24]
}
 800b0f0:	bf00      	nop
 800b0f2:	37b8      	adds	r7, #184	@ 0xb8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	40008000 	.word	0x40008000
 800b0fc:	0800a881 	.word	0x0800a881

0800b100 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bc80      	pop	{r7}
 800b110:	4770      	bx	lr

0800b112 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b112:	b480      	push	{r7}
 800b114:	b083      	sub	sp, #12
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b11a:	bf00      	nop
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	bc80      	pop	{r7}
 800b122:	4770      	bx	lr

0800b124 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	bc80      	pop	{r7}
 800b134:	4770      	bx	lr

0800b136 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b088      	sub	sp, #32
 800b13a:	af02      	add	r7, sp, #8
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	1d3b      	adds	r3, r7, #4
 800b140:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d101      	bne.n	800b156 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b152:	2302      	movs	r3, #2
 800b154:	e046      	b.n	800b1e4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2201      	movs	r2, #1
 800b15a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2224      	movs	r2, #36	@ 0x24
 800b162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0201 	bic.w	r2, r2, #1
 800b174:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	430a      	orrs	r2, r1
 800b188:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d105      	bne.n	800b19c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b190:	1d3b      	adds	r3, r7, #4
 800b192:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f000 f90e 	bl	800b3b8 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1ac:	f7f7 fbb4 	bl	8002918 <HAL_GetTick>
 800b1b0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7fe ff10 	bl	8009fe6 <UART_WaitOnFlagUntilTimeout>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	75fb      	strb	r3, [r7, #23]
 800b1d0:	e003      	b.n	800b1da <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b089      	sub	sp, #36	@ 0x24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d101      	bne.n	800b202 <HAL_UARTEx_EnableStopMode+0x16>
 800b1fe:	2302      	movs	r3, #2
 800b200:	e021      	b.n	800b246 <HAL_UARTEx_EnableStopMode+0x5a>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2201      	movs	r2, #1
 800b206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	e853 3f00 	ldrex	r3, [r3]
 800b216:	60bb      	str	r3, [r7, #8]
   return(result);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	f043 0302 	orr.w	r3, r3, #2
 800b21e:	61fb      	str	r3, [r7, #28]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	461a      	mov	r2, r3
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	61bb      	str	r3, [r7, #24]
 800b22a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22c:	6979      	ldr	r1, [r7, #20]
 800b22e:	69ba      	ldr	r2, [r7, #24]
 800b230:	e841 2300 	strex	r3, r2, [r1]
 800b234:	613b      	str	r3, [r7, #16]
   return(result);
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1e6      	bne.n	800b20a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3724      	adds	r7, #36	@ 0x24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bc80      	pop	{r7}
 800b24e:	4770      	bx	lr

0800b250 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d101      	bne.n	800b266 <HAL_UARTEx_DisableFifoMode+0x16>
 800b262:	2302      	movs	r3, #2
 800b264:	e027      	b.n	800b2b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2224      	movs	r2, #36	@ 0x24
 800b272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f022 0201 	bic.w	r2, r2, #1
 800b28c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b294:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bc80      	pop	{r7}
 800b2be:	4770      	bx	lr

0800b2c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d101      	bne.n	800b2d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	e02d      	b.n	800b334 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2224      	movs	r2, #36	@ 0x24
 800b2e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f022 0201 	bic.w	r2, r2, #1
 800b2fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	430a      	orrs	r2, r1
 800b312:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f871 	bl	800b3fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2220      	movs	r2, #32
 800b326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d101      	bne.n	800b354 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b350:	2302      	movs	r3, #2
 800b352:	e02d      	b.n	800b3b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2224      	movs	r2, #36	@ 0x24
 800b360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f022 0201 	bic.w	r2, r2, #1
 800b37a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f833 	bl	800b3fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2220      	movs	r2, #32
 800b3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	1d3b      	adds	r3, r7, #4
 800b3c2:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	f023 0210 	bic.w	r2, r3, #16
 800b3d0:	893b      	ldrh	r3, [r7, #8]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	430a      	orrs	r2, r1
 800b3da:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800b3e6:	7abb      	ldrb	r3, [r7, #10]
 800b3e8:	061a      	lsls	r2, r3, #24
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	430a      	orrs	r2, r1
 800b3f0:	605a      	str	r2, [r3, #4]
}
 800b3f2:	bf00      	nop
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bc80      	pop	{r7}
 800b3fa:	4770      	bx	lr

0800b3fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d108      	bne.n	800b41e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b41c:	e031      	b.n	800b482 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b41e:	2308      	movs	r3, #8
 800b420:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b422:	2308      	movs	r3, #8
 800b424:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	0e5b      	lsrs	r3, r3, #25
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	f003 0307 	and.w	r3, r3, #7
 800b434:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	0f5b      	lsrs	r3, r3, #29
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	f003 0307 	and.w	r3, r3, #7
 800b444:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	7b3a      	ldrb	r2, [r7, #12]
 800b44a:	4910      	ldr	r1, [pc, #64]	@ (800b48c <UARTEx_SetNbDataToProcess+0x90>)
 800b44c:	5c8a      	ldrb	r2, [r1, r2]
 800b44e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b452:	7b3a      	ldrb	r2, [r7, #12]
 800b454:	490e      	ldr	r1, [pc, #56]	@ (800b490 <UARTEx_SetNbDataToProcess+0x94>)
 800b456:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b458:	fb93 f3f2 	sdiv	r3, r3, r2
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	7b7a      	ldrb	r2, [r7, #13]
 800b468:	4908      	ldr	r1, [pc, #32]	@ (800b48c <UARTEx_SetNbDataToProcess+0x90>)
 800b46a:	5c8a      	ldrb	r2, [r1, r2]
 800b46c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b470:	7b7a      	ldrb	r2, [r7, #13]
 800b472:	4907      	ldr	r1, [pc, #28]	@ (800b490 <UARTEx_SetNbDataToProcess+0x94>)
 800b474:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b476:	fb93 f3f2 	sdiv	r3, r3, r2
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b482:	bf00      	nop
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	bc80      	pop	{r7}
 800b48a:	4770      	bx	lr
 800b48c:	08020904 	.word	0x08020904
 800b490:	0802090c 	.word	0x0802090c

0800b494 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800b498:	f7f7 f8d8 	bl	800264c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800b49c:	f000 f82e 	bl	800b4fc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800b4a0:	bf00      	nop
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ac:	f010 ffd0 	bl	801c450 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800b4b0:	bf00      	nop
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b4b8:	f3bf 8f4f 	dsb	sy
}
 800b4bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b4be:	4b06      	ldr	r3, [pc, #24]	@ (800b4d8 <__NVIC_SystemReset+0x24>)
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b4c6:	4904      	ldr	r1, [pc, #16]	@ (800b4d8 <__NVIC_SystemReset+0x24>)
 800b4c8:	4b04      	ldr	r3, [pc, #16]	@ (800b4dc <__NVIC_SystemReset+0x28>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b4ce:	f3bf 8f4f 	dsb	sy
}
 800b4d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b4d4:	bf00      	nop
 800b4d6:	e7fd      	b.n	800b4d4 <__NVIC_SystemReset+0x20>
 800b4d8:	e000ed00 	.word	0xe000ed00
 800b4dc:	05fa0004 	.word	0x05fa0004

0800b4e0 <sht40Data>:
    m.Param.Rx2Channel.Datarate  = DR_3;
    LoRaMacMibSetRequestConfirm(&m);
}

static void sht40Data( void )
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	af00      	add	r7, sp, #0
	__NOP();
 800b4e4:	bf00      	nop
}
 800b4e6:	bf00      	nop
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bc80      	pop	{r7}
 800b4ec:	4770      	bx	lr

0800b4ee <rs485Data>:

static void rs485Data( void )
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	af00      	add	r7, sp, #0
	__NOP();
 800b4f2:	bf00      	nop
}
 800b4f4:	bf00      	nop
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bc80      	pop	{r7}
 800b4fa:	4770      	bx	lr

0800b4fc <LoRaWAN_Init>:

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800b502:	2300      	movs	r3, #0
 800b504:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800b506:	2301      	movs	r3, #1
 800b508:	9302      	str	r3, [sp, #8]
 800b50a:	2303      	movs	r3, #3
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	2301      	movs	r3, #1
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	4b5e      	ldr	r3, [pc, #376]	@ (800b68c <LoRaWAN_Init+0x190>)
 800b514:	2200      	movs	r2, #0
 800b516:	2100      	movs	r1, #0
 800b518:	2002      	movs	r0, #2
 800b51a:	f011 fbe5 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800b51e:	2301      	movs	r3, #1
 800b520:	9302      	str	r3, [sp, #8]
 800b522:	2306      	movs	r3, #6
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	2302      	movs	r3, #2
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	4b59      	ldr	r3, [pc, #356]	@ (800b690 <LoRaWAN_Init+0x194>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	2100      	movs	r1, #0
 800b530:	2002      	movs	r0, #2
 800b532:	f011 fbd9 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800b536:	2301      	movs	r3, #1
 800b538:	9302      	str	r3, [sp, #8]
 800b53a:	2303      	movs	r3, #3
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	2301      	movs	r3, #1
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	4b54      	ldr	r3, [pc, #336]	@ (800b694 <LoRaWAN_Init+0x198>)
 800b544:	2200      	movs	r2, #0
 800b546:	2100      	movs	r1, #0
 800b548:	2002      	movs	r0, #2
 800b54a:	f011 fbcd 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800b54e:	1d3b      	adds	r3, r7, #4
 800b550:	4619      	mov	r1, r3
 800b552:	2000      	movs	r0, #0
 800b554:	f003 fa64 	bl	800ea20 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	0e1b      	lsrs	r3, r3, #24
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	461a      	mov	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	0c1b      	lsrs	r3, r3, #16
 800b564:	b2db      	uxtb	r3, r3
 800b566:	4619      	mov	r1, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	0a1b      	lsrs	r3, r3, #8
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	9302      	str	r3, [sp, #8]
 800b570:	9101      	str	r1, [sp, #4]
 800b572:	9200      	str	r2, [sp, #0]
 800b574:	4b48      	ldr	r3, [pc, #288]	@ (800b698 <LoRaWAN_Init+0x19c>)
 800b576:	2200      	movs	r2, #0
 800b578:	2100      	movs	r1, #0
 800b57a:	2002      	movs	r0, #2
 800b57c:	f011 fbb4 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800b580:	1d3b      	adds	r3, r7, #4
 800b582:	4619      	mov	r1, r3
 800b584:	2001      	movs	r0, #1
 800b586:	f003 fa4b 	bl	800ea20 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	0e1b      	lsrs	r3, r3, #24
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	461a      	mov	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	0c1b      	lsrs	r3, r3, #16
 800b596:	b2db      	uxtb	r3, r3
 800b598:	4619      	mov	r1, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	0a1b      	lsrs	r3, r3, #8
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	b2c0      	uxtb	r0, r0
 800b5a4:	9003      	str	r0, [sp, #12]
 800b5a6:	9302      	str	r3, [sp, #8]
 800b5a8:	9101      	str	r1, [sp, #4]
 800b5aa:	9200      	str	r2, [sp, #0]
 800b5ac:	4b3b      	ldr	r3, [pc, #236]	@ (800b69c <LoRaWAN_Init+0x1a0>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	2002      	movs	r0, #2
 800b5b4:	f011 fb98 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	4b38      	ldr	r3, [pc, #224]	@ (800b6a0 <LoRaWAN_Init+0x1a4>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b5c4:	4837      	ldr	r0, [pc, #220]	@ (800b6a4 <LoRaWAN_Init+0x1a8>)
 800b5c6:	f011 f8e1 	bl	801c78c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	4b36      	ldr	r3, [pc, #216]	@ (800b6a8 <LoRaWAN_Init+0x1ac>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b5d6:	4835      	ldr	r0, [pc, #212]	@ (800b6ac <LoRaWAN_Init+0x1b0>)
 800b5d8:	f011 f8d8 	bl	801c78c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800b5dc:	2300      	movs	r3, #0
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	4b33      	ldr	r3, [pc, #204]	@ (800b6b0 <LoRaWAN_Init+0x1b4>)
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b5e8:	4832      	ldr	r0, [pc, #200]	@ (800b6b4 <LoRaWAN_Init+0x1b8>)
 800b5ea:	f011 f8cf 	bl	801c78c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_RS485), UTIL_SEQ_RFU, rs485Data);
 800b5ee:	4a32      	ldr	r2, [pc, #200]	@ (800b6b8 <LoRaWAN_Init+0x1bc>)
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	2010      	movs	r0, #16
 800b5f4:	f011 f828 	bl	801c648 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SHT40), UTIL_SEQ_RFU, sht40Data);
 800b5f8:	4a30      	ldr	r2, [pc, #192]	@ (800b6bc <LoRaWAN_Init+0x1c0>)
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	2020      	movs	r0, #32
 800b5fe:	f011 f823 	bl	801c648 <UTIL_SEQ_RegTask>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800b602:	2300      	movs	r3, #0
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	4b2e      	ldr	r3, [pc, #184]	@ (800b6c0 <LoRaWAN_Init+0x1c4>)
 800b608:	2200      	movs	r2, #0
 800b60a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b60e:	482d      	ldr	r0, [pc, #180]	@ (800b6c4 <LoRaWAN_Init+0x1c8>)
 800b610:	f011 f8bc 	bl	801c78c <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800b614:	4a2c      	ldr	r2, [pc, #176]	@ (800b6c8 <LoRaWAN_Init+0x1cc>)
 800b616:	2100      	movs	r1, #0
 800b618:	2001      	movs	r0, #1
 800b61a:	f011 f815 	bl	801c648 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800b61e:	4a2b      	ldr	r2, [pc, #172]	@ (800b6cc <LoRaWAN_Init+0x1d0>)
 800b620:	2100      	movs	r1, #0
 800b622:	2002      	movs	r0, #2
 800b624:	f011 f810 	bl	801c648 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800b628:	4a29      	ldr	r2, [pc, #164]	@ (800b6d0 <LoRaWAN_Init+0x1d4>)
 800b62a:	2100      	movs	r1, #0
 800b62c:	2004      	movs	r0, #4
 800b62e:	f011 f80b 	bl	801c648 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800b632:	4a28      	ldr	r2, [pc, #160]	@ (800b6d4 <LoRaWAN_Init+0x1d8>)
 800b634:	2100      	movs	r1, #0
 800b636:	2008      	movs	r0, #8
 800b638:	f011 f806 	bl	801c648 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800b63c:	f000 fd40 	bl	800c0c0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b640:	4925      	ldr	r1, [pc, #148]	@ (800b6d8 <LoRaWAN_Init+0x1dc>)
 800b642:	4826      	ldr	r0, [pc, #152]	@ (800b6dc <LoRaWAN_Init+0x1e0>)
 800b644:	f002 fa52 	bl	800daec <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800b648:	4825      	ldr	r0, [pc, #148]	@ (800b6e0 <LoRaWAN_Init+0x1e4>)
 800b64a:	f002 fabd 	bl	800dbc8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800b64e:	4819      	ldr	r0, [pc, #100]	@ (800b6b4 <LoRaWAN_Init+0x1b8>)
 800b650:	f011 f8d2 	bl	801c7f8 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b654:	4b23      	ldr	r3, [pc, #140]	@ (800b6e4 <LoRaWAN_Init+0x1e8>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	4a23      	ldr	r2, [pc, #140]	@ (800b6e8 <LoRaWAN_Init+0x1ec>)
 800b65a:	7812      	ldrb	r2, [r2, #0]
 800b65c:	4611      	mov	r1, r2
 800b65e:	4618      	mov	r0, r3
 800b660:	f002 fc16 	bl	800de90 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b664:	4b21      	ldr	r3, [pc, #132]	@ (800b6ec <LoRaWAN_Init+0x1f0>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <LoRaWAN_Init+0x188>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b66c:	4b20      	ldr	r3, [pc, #128]	@ (800b6f0 <LoRaWAN_Init+0x1f4>)
 800b66e:	6819      	ldr	r1, [r3, #0]
 800b670:	2300      	movs	r3, #0
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	4b1f      	ldr	r3, [pc, #124]	@ (800b6f4 <LoRaWAN_Init+0x1f8>)
 800b676:	2200      	movs	r2, #0
 800b678:	481f      	ldr	r0, [pc, #124]	@ (800b6f8 <LoRaWAN_Init+0x1fc>)
 800b67a:	f011 f887 	bl	801c78c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b67e:	481e      	ldr	r0, [pc, #120]	@ (800b6f8 <LoRaWAN_Init+0x1fc>)
 800b680:	f011 f8ba 	bl	801c7f8 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	0802000c 	.word	0x0802000c
 800b690:	08020030 	.word	0x08020030
 800b694:	08020054 	.word	0x08020054
 800b698:	08020078 	.word	0x08020078
 800b69c:	0802009c 	.word	0x0802009c
 800b6a0:	0800bb81 	.word	0x0800bb81
 800b6a4:	20000768 	.word	0x20000768
 800b6a8:	0800bb9f 	.word	0x0800bb9f
 800b6ac:	20000780 	.word	0x20000780
 800b6b0:	0800bbb1 	.word	0x0800bbb1
 800b6b4:	20000798 	.word	0x20000798
 800b6b8:	0800b4ef 	.word	0x0800b4ef
 800b6bc:	0800b4e1 	.word	0x0800b4e1
 800b6c0:	0800bfa1 	.word	0x0800bfa1
 800b6c4:	2000065c 	.word	0x2000065c
 800b6c8:	0800de25 	.word	0x0800de25
 800b6cc:	0800b859 	.word	0x0800b859
 800b6d0:	0800bfe5 	.word	0x0800bfe5
 800b6d4:	0800bf05 	.word	0x0800bf05
 800b6d8:	01030100 	.word	0x01030100
 800b6dc:	20000024 	.word	0x20000024
 800b6e0:	20000070 	.word	0x20000070
 800b6e4:	20000020 	.word	0x20000020
 800b6e8:	20000021 	.word	0x20000021
 800b6ec:	20000640 	.word	0x20000640
 800b6f0:	20000088 	.word	0x20000088
 800b6f4:	0800bb4d 	.word	0x0800bb4d
 800b6f8:	20000644 	.word	0x20000644

0800b6fc <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b6fc:	b5b0      	push	{r4, r5, r7, lr}
 800b6fe:	b08a      	sub	sp, #40	@ 0x28
 800b700:	af06      	add	r7, sp, #24
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 8090 	beq.w	800b832 <OnRxData+0x136>
  {
#if defined(DBG)   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800b712:	2201      	movs	r2, #1
 800b714:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b718:	4848      	ldr	r0, [pc, #288]	@ (800b83c <OnRxData+0x140>)
 800b71a:	f7fa fa8f 	bl	8005c3c <HAL_GPIO_WritePin>
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800b71e:	4848      	ldr	r0, [pc, #288]	@ (800b840 <OnRxData+0x144>)
 800b720:	f011 f86a 	bl	801c7f8 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d05e      	beq.n	800b7ea <OnRxData+0xee>
    {
      if (appData != NULL)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d05b      	beq.n	800b7ea <OnRxData+0xee>
      {
        RxPort = appData->Port;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d054      	beq.n	800b7ea <OnRxData+0xee>
        {
          switch (appData->Port)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2b02      	cmp	r3, #2
 800b746:	d01f      	beq.n	800b788 <OnRxData+0x8c>
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d149      	bne.n	800b7e0 <OnRxData+0xe4>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	785b      	ldrb	r3, [r3, #1]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d147      	bne.n	800b7e4 <OnRxData+0xe8>
              {
                switch (appData->Buffer[0])
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d00e      	beq.n	800b77c <OnRxData+0x80>
 800b75e:	2b02      	cmp	r3, #2
 800b760:	dc10      	bgt.n	800b784 <OnRxData+0x88>
 800b762:	2b00      	cmp	r3, #0
 800b764:	d002      	beq.n	800b76c <OnRxData+0x70>
 800b766:	2b01      	cmp	r3, #1
 800b768:	d004      	beq.n	800b774 <OnRxData+0x78>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800b76a:	e00b      	b.n	800b784 <OnRxData+0x88>
                    LmHandlerRequestClass(CLASS_A);
 800b76c:	2000      	movs	r0, #0
 800b76e:	f002 fd43 	bl	800e1f8 <LmHandlerRequestClass>
                    break;
 800b772:	e008      	b.n	800b786 <OnRxData+0x8a>
                    LmHandlerRequestClass(CLASS_B);
 800b774:	2001      	movs	r0, #1
 800b776:	f002 fd3f 	bl	800e1f8 <LmHandlerRequestClass>
                    break;
 800b77a:	e004      	b.n	800b786 <OnRxData+0x8a>
                    LmHandlerRequestClass(CLASS_C);
 800b77c:	2002      	movs	r0, #2
 800b77e:	f002 fd3b 	bl	800e1f8 <LmHandlerRequestClass>
                    break;
 800b782:	e000      	b.n	800b786 <OnRxData+0x8a>
                    break;
 800b784:	bf00      	nop
                }
              }
              break;
 800b786:	e02d      	b.n	800b7e4 <OnRxData+0xe8>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	785b      	ldrb	r3, [r3, #1]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d12b      	bne.n	800b7e8 <OnRxData+0xec>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	f003 0301 	and.w	r3, r3, #1
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	4b29      	ldr	r3, [pc, #164]	@ (800b844 <OnRxData+0x148>)
 800b79e:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800b7a0:	4b28      	ldr	r3, [pc, #160]	@ (800b844 <OnRxData+0x148>)
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10d      	bne.n	800b7c4 <OnRxData+0xc8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800b7a8:	4b27      	ldr	r3, [pc, #156]	@ (800b848 <OnRxData+0x14c>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	2003      	movs	r0, #3
 800b7b0:	f011 fa9a 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
				  #if defined(DBG)   // XXX:
                  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b7ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b7be:	f7fa fa3d 	bl	8005c3c <HAL_GPIO_WritePin>
					#if defined(DBG)   // XXX:
                  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
					#endif
                }
              }
              break;
 800b7c2:	e011      	b.n	800b7e8 <OnRxData+0xec>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800b7c4:	4b21      	ldr	r3, [pc, #132]	@ (800b84c <OnRxData+0x150>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	2003      	movs	r0, #3
 800b7cc:	f011 fa8c 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
                  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b7d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b7da:	f7fa fa2f 	bl	8005c3c <HAL_GPIO_WritePin>
              break;
 800b7de:	e003      	b.n	800b7e8 <OnRxData+0xec>

            default:

              break;
 800b7e0:	bf00      	nop
 800b7e2:	e002      	b.n	800b7ea <OnRxData+0xee>
              break;
 800b7e4:	bf00      	nop
 800b7e6:	e000      	b.n	800b7ea <OnRxData+0xee>
              break;
 800b7e8:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	7c1b      	ldrb	r3, [r3, #16]
 800b7ee:	2b05      	cmp	r3, #5
 800b7f0:	d81f      	bhi.n	800b832 <OnRxData+0x136>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	7bfa      	ldrb	r2, [r7, #15]
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800b7fe:	460c      	mov	r4, r1
 800b800:	6839      	ldr	r1, [r7, #0]
 800b802:	7c09      	ldrb	r1, [r1, #16]
 800b804:	4608      	mov	r0, r1
 800b806:	4912      	ldr	r1, [pc, #72]	@ (800b850 <OnRxData+0x154>)
 800b808:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b80c:	6838      	ldr	r0, [r7, #0]
 800b80e:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800b812:	4605      	mov	r5, r0
 800b814:	6838      	ldr	r0, [r7, #0]
 800b816:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800b81a:	9005      	str	r0, [sp, #20]
 800b81c:	9504      	str	r5, [sp, #16]
 800b81e:	9103      	str	r1, [sp, #12]
 800b820:	9402      	str	r4, [sp, #8]
 800b822:	9201      	str	r2, [sp, #4]
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	4b0b      	ldr	r3, [pc, #44]	@ (800b854 <OnRxData+0x158>)
 800b828:	2200      	movs	r2, #0
 800b82a:	2100      	movs	r1, #0
 800b82c:	2003      	movs	r0, #3
 800b82e:	f011 fa5b 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800b832:	bf00      	nop
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bdb0      	pop	{r4, r5, r7, pc}
 800b83a:	bf00      	nop
 800b83c:	48000400 	.word	0x48000400
 800b840:	20000780 	.word	0x20000780
 800b844:	20000766 	.word	0x20000766
 800b848:	080200c0 	.word	0x080200c0
 800b84c:	080200cc 	.word	0x080200cc
 800b850:	20000008 	.word	0x20000008
 800b854:	080200d8 	.word	0x080200d8

0800b858 <SendTxData>:

static void SendTxData(void)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b09e      	sub	sp, #120	@ 0x78
 800b85c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b85e:	23ff      	movs	r3, #255	@ 0xff
 800b860:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  uint8_t batteryLevel = GetBatteryLevel();
 800b864:	f7f6 ff26 	bl	80026b4 <GetBatteryLevel>
 800b868:	4603      	mov	r3, r0
 800b86a:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	66fb      	str	r3, [r7, #108]	@ 0x6c

  uint16_t pressure = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
  int16_t temperature = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
  uint16_t humidity = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  uint32_t i = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	663b      	str	r3, [r7, #96]	@ 0x60
  int32_t latitude = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int32_t longitude = 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	65bb      	str	r3, [r7, #88]	@ 0x58
  uint16_t altitudeGps = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t t_sht=0, rh_sht=0;
 800b896:	2300      	movs	r3, #0
 800b898:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800b89c:	2300      	movs	r3, #0
 800b89e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
  uint32_t data_sht=0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float Rntc = 0;
 800b8a6:	f04f 0300 	mov.w	r3, #0
 800b8aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  EnvSensors_Read(&sensor_data);
 800b8ac:	463b      	mov	r3, r7
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f7 f874 	bl	800299c <EnvSensors_Read>
  uint16_t adc_0 = 0, adc_1 = 0, adc_2 = 0, adc_3 = 0;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

  sensor_data.temperature_mainboard_int = adc_0 = SYS_GetADC0();
 800b8cc:	f7f5 ff0a 	bl	80016e4 <SYS_GetADC0>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b8d6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800b8da:	863b      	strh	r3, [r7, #48]	@ 0x30
  sensor_data.voltage_out_int = adc_1 = SYS_GetADC1();
 800b8dc:	f7f5 ff14 	bl	8001708 <SYS_GetADC1>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b8e6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800b8ea:	873b      	strh	r3, [r7, #56]	@ 0x38
  sensor_data.current_out_int = adc_2 = SYS_GetADC2();
 800b8ec:	f7f5 ff20 	bl	8001730 <SYS_GetADC2>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b8f6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800b8fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
  sensor_data.voltage_in_int = adc_3 = SYS_GetADC3();
 800b8fc:	f7f5 ff2c 	bl	8001758 <SYS_GetADC3>
 800b900:	4603      	mov	r3, r0
 800b902:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b906:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800b90a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  APP_LOG(TS_ON, VLEVEL_M, "ADC1 - Out V: %.3f V\r\n", volt_1/10);
  APP_LOG(TS_ON, VLEVEL_M, "ADC2 - Out A: %.3f A\r\n", volt_2);
  APP_LOG(TS_ON, VLEVEL_M, "ADC3 - In V : %.3f V\r\n", volt_3);
  */
  /* END OF Tohle smazat protože to není potřeba při posílání adc hodnot */
  data_sht = sht40();
 800b90c:	f7f6 fde6 	bl	80024dc <sht40>
 800b910:	64f8      	str	r0, [r7, #76]	@ 0x4c
  sensor_data.temperature_sht40_int = t_sht = (data_sht >> 16);
 800b912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b914:	0c1b      	lsrs	r3, r3, #16
 800b916:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800b91a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800b91e:	867b      	strh	r3, [r7, #50]	@ 0x32
  sensor_data.humidity_sht40_int = rh_sht = (data_sht & 0xFFFF);
 800b920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b922:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800b926:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800b92a:	86bb      	strh	r3, [r7, #52]	@ 0x34

  sensor_data.battery_voltage = (uint16_t) SYS_GetBatteryLevel();
 800b92c:	f7f5 fea6 	bl	800167c <SYS_GetBatteryLevel>
 800b930:	4603      	mov	r3, r0
 800b932:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  /*
  APP_LOG(TS_ON, VLEVEL_M, "TempSHT - In C : %d.%d C\r\n", t_sht/100, t_sht%100);
  APP_LOG(TS_ON, VLEVEL_M, "RH SHT  - In % : %d.%d %\r\n", rh_sht/100, rh_sht%100);
   */

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b934:	4b7b      	ldr	r3, [pc, #492]	@ (800bb24 <SendTxData+0x2cc>)
 800b936:	2202      	movs	r2, #2
 800b938:	701a      	strb	r2, [r3, #0]
  //humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
  //temperature = (int16_t)(sensor_data.temperature);
  //pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */

  // Number of RS485 final nodes, Now its just identification of LED.
  AppData.Buffer[i++] = AppLedStateOn;
 800b93a:	4b7a      	ldr	r3, [pc, #488]	@ (800bb24 <SendTxData+0x2cc>)
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b940:	1c59      	adds	r1, r3, #1
 800b942:	6639      	str	r1, [r7, #96]	@ 0x60
 800b944:	4413      	add	r3, r2
 800b946:	4a78      	ldr	r2, [pc, #480]	@ (800bb28 <SendTxData+0x2d0>)
 800b948:	7812      	ldrb	r2, [r2, #0]
 800b94a:	701a      	strb	r2, [r3, #0]

  // Temperature NTC thermistor on Main Board
  AppData.Buffer[i++] = (uint8_t)((sensor_data.temperature_mainboard_int >> 8) & 0xFF);
 800b94c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b950:	121b      	asrs	r3, r3, #8
 800b952:	b218      	sxth	r0, r3
 800b954:	4b73      	ldr	r3, [pc, #460]	@ (800bb24 <SendTxData+0x2cc>)
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b95a:	1c59      	adds	r1, r3, #1
 800b95c:	6639      	str	r1, [r7, #96]	@ 0x60
 800b95e:	4413      	add	r3, r2
 800b960:	b2c2      	uxtb	r2, r0
 800b962:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(sensor_data.temperature_mainboard_int & 0xFF);
 800b964:	f9b7 0030 	ldrsh.w	r0, [r7, #48]	@ 0x30
 800b968:	4b6e      	ldr	r3, [pc, #440]	@ (800bb24 <SendTxData+0x2cc>)
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b96e:	1c59      	adds	r1, r3, #1
 800b970:	6639      	str	r1, [r7, #96]	@ 0x60
 800b972:	4413      	add	r3, r2
 800b974:	b2c2      	uxtb	r2, r0
 800b976:	701a      	strb	r2, [r3, #0]

  // Temperature SHT40 on Main Board
  AppData.Buffer[i++] = (uint8_t)((sensor_data.temperature_sht40_int >> 8) & 0xFF);
 800b978:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b97c:	121b      	asrs	r3, r3, #8
 800b97e:	b218      	sxth	r0, r3
 800b980:	4b68      	ldr	r3, [pc, #416]	@ (800bb24 <SendTxData+0x2cc>)
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b986:	1c59      	adds	r1, r3, #1
 800b988:	6639      	str	r1, [r7, #96]	@ 0x60
 800b98a:	4413      	add	r3, r2
 800b98c:	b2c2      	uxtb	r2, r0
 800b98e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(sensor_data.temperature_sht40_int & 0xFF);
 800b990:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 800b994:	4b63      	ldr	r3, [pc, #396]	@ (800bb24 <SendTxData+0x2cc>)
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b99a:	1c59      	adds	r1, r3, #1
 800b99c:	6639      	str	r1, [r7, #96]	@ 0x60
 800b99e:	4413      	add	r3, r2
 800b9a0:	b2c2      	uxtb	r2, r0
 800b9a2:	701a      	strb	r2, [r3, #0]
  // Humidity SHT40 on Main Board
  AppData.Buffer[i++] = (uint8_t)((sensor_data.humidity_sht40_int >> 8) & 0xFF);
 800b9a4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800b9a8:	121b      	asrs	r3, r3, #8
 800b9aa:	b218      	sxth	r0, r3
 800b9ac:	4b5d      	ldr	r3, [pc, #372]	@ (800bb24 <SendTxData+0x2cc>)
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9b2:	1c59      	adds	r1, r3, #1
 800b9b4:	6639      	str	r1, [r7, #96]	@ 0x60
 800b9b6:	4413      	add	r3, r2
 800b9b8:	b2c2      	uxtb	r2, r0
 800b9ba:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(sensor_data.humidity_sht40_int & 0xFF);
 800b9bc:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 800b9c0:	4b58      	ldr	r3, [pc, #352]	@ (800bb24 <SendTxData+0x2cc>)
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9c6:	1c59      	adds	r1, r3, #1
 800b9c8:	6639      	str	r1, [r7, #96]	@ 0x60
 800b9ca:	4413      	add	r3, r2
 800b9cc:	b2c2      	uxtb	r2, r0
 800b9ce:	701a      	strb	r2, [r3, #0]

  // Input Voltage for MCU in mV
  AppData.Buffer[i++] = (uint8_t)((sensor_data.battery_voltage >> 8) & 0xFF);
 800b9d0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b9d2:	0a1b      	lsrs	r3, r3, #8
 800b9d4:	b298      	uxth	r0, r3
 800b9d6:	4b53      	ldr	r3, [pc, #332]	@ (800bb24 <SendTxData+0x2cc>)
 800b9d8:	685a      	ldr	r2, [r3, #4]
 800b9da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9dc:	1c59      	adds	r1, r3, #1
 800b9de:	6639      	str	r1, [r7, #96]	@ 0x60
 800b9e0:	4413      	add	r3, r2
 800b9e2:	b2c2      	uxtb	r2, r0
 800b9e4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(sensor_data.battery_voltage & 0xFF);
 800b9e6:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 800b9e8:	4b4e      	ldr	r3, [pc, #312]	@ (800bb24 <SendTxData+0x2cc>)
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9ee:	1c59      	adds	r1, r3, #1
 800b9f0:	6639      	str	r1, [r7, #96]	@ 0x60
 800b9f2:	4413      	add	r3, r2
 800b9f4:	b2c2      	uxtb	r2, r0
 800b9f6:	701a      	strb	r2, [r3, #0]

  // Input Voltage of Battery
  AppData.Buffer[i++] = (uint8_t)((sensor_data.voltage_in_int >> 8) & 0xFF);
 800b9f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b9fc:	121b      	asrs	r3, r3, #8
 800b9fe:	b218      	sxth	r0, r3
 800ba00:	4b48      	ldr	r3, [pc, #288]	@ (800bb24 <SendTxData+0x2cc>)
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba06:	1c59      	adds	r1, r3, #1
 800ba08:	6639      	str	r1, [r7, #96]	@ 0x60
 800ba0a:	4413      	add	r3, r2
 800ba0c:	b2c2      	uxtb	r2, r0
 800ba0e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(sensor_data.voltage_in_int & 0xFF);
 800ba10:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 800ba14:	4b43      	ldr	r3, [pc, #268]	@ (800bb24 <SendTxData+0x2cc>)
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba1a:	1c59      	adds	r1, r3, #1
 800ba1c:	6639      	str	r1, [r7, #96]	@ 0x60
 800ba1e:	4413      	add	r3, r2
 800ba20:	b2c2      	uxtb	r2, r0
 800ba22:	701a      	strb	r2, [r3, #0]

  // Output Voltage of Battery
  AppData.Buffer[i++] = (uint8_t)((sensor_data.voltage_out_int >> 8) & 0xFF);
 800ba24:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800ba28:	121b      	asrs	r3, r3, #8
 800ba2a:	b218      	sxth	r0, r3
 800ba2c:	4b3d      	ldr	r3, [pc, #244]	@ (800bb24 <SendTxData+0x2cc>)
 800ba2e:	685a      	ldr	r2, [r3, #4]
 800ba30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba32:	1c59      	adds	r1, r3, #1
 800ba34:	6639      	str	r1, [r7, #96]	@ 0x60
 800ba36:	4413      	add	r3, r2
 800ba38:	b2c2      	uxtb	r2, r0
 800ba3a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(sensor_data.voltage_out_int & 0xFF);
 800ba3c:	f9b7 0038 	ldrsh.w	r0, [r7, #56]	@ 0x38
 800ba40:	4b38      	ldr	r3, [pc, #224]	@ (800bb24 <SendTxData+0x2cc>)
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba46:	1c59      	adds	r1, r3, #1
 800ba48:	6639      	str	r1, [r7, #96]	@ 0x60
 800ba4a:	4413      	add	r3, r2
 800ba4c:	b2c2      	uxtb	r2, r0
 800ba4e:	701a      	strb	r2, [r3, #0]

  // Input Voltage of Battery
  AppData.Buffer[i++] = (uint8_t)((sensor_data.current_out_int >> 8) & 0xFF);
 800ba50:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800ba54:	121b      	asrs	r3, r3, #8
 800ba56:	b218      	sxth	r0, r3
 800ba58:	4b32      	ldr	r3, [pc, #200]	@ (800bb24 <SendTxData+0x2cc>)
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba5e:	1c59      	adds	r1, r3, #1
 800ba60:	6639      	str	r1, [r7, #96]	@ 0x60
 800ba62:	4413      	add	r3, r2
 800ba64:	b2c2      	uxtb	r2, r0
 800ba66:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(sensor_data.current_out_int & 0xFF);
 800ba68:	f9b7 003a 	ldrsh.w	r0, [r7, #58]	@ 0x3a
 800ba6c:	4b2d      	ldr	r3, [pc, #180]	@ (800bb24 <SendTxData+0x2cc>)
 800ba6e:	685a      	ldr	r2, [r3, #4]
 800ba70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba72:	1c59      	adds	r1, r3, #1
 800ba74:	6639      	str	r1, [r7, #96]	@ 0x60
 800ba76:	4413      	add	r3, r2
 800ba78:	b2c2      	uxtb	r2, r0
 800ba7a:	701a      	strb	r2, [r3, #0]

  AppData.BufferSize = i;
 800ba7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	4b28      	ldr	r3, [pc, #160]	@ (800bb24 <SendTxData+0x2cc>)
 800ba82:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ba84:	4b29      	ldr	r3, [pc, #164]	@ (800bb2c <SendTxData+0x2d4>)
 800ba86:	7a5b      	ldrb	r3, [r3, #9]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d007      	beq.n	800ba9c <SendTxData+0x244>
 800ba8c:	f002 faa2 	bl	800dfd4 <LmHandlerJoinStatus>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d102      	bne.n	800ba9c <SendTxData+0x244>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800ba96:	4825      	ldr	r0, [pc, #148]	@ (800bb2c <SendTxData+0x2d4>)
 800ba98:	f010 ff1c 	bl	801c8d4 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
    //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800ba9c:	4b24      	ldr	r3, [pc, #144]	@ (800bb30 <SendTxData+0x2d8>)
 800ba9e:	78db      	ldrb	r3, [r3, #3]
 800baa0:	2200      	movs	r2, #0
 800baa2:	4619      	mov	r1, r3
 800baa4:	481f      	ldr	r0, [pc, #124]	@ (800bb24 <SendTxData+0x2cc>)
 800baa6:	f002 fab1 	bl	800e00c <LmHandlerSend>
 800baaa:	4603      	mov	r3, r0
 800baac:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  if (LORAMAC_HANDLER_SUCCESS == status)
 800bab0:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d106      	bne.n	800bac6 <SendTxData+0x26e>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800bab8:	4b1e      	ldr	r3, [pc, #120]	@ (800bb34 <SendTxData+0x2dc>)
 800baba:	2201      	movs	r2, #1
 800babc:	2100      	movs	r1, #0
 800babe:	2001      	movs	r0, #1
 800bac0:	f011 f912 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
 800bac4:	e016      	b.n	800baf4 <SendTxData+0x29c>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800bac6:	f997 306b 	ldrsb.w	r3, [r7, #107]	@ 0x6b
 800baca:	f113 0f06 	cmn.w	r3, #6
 800bace:	d111      	bne.n	800baf4 <SendTxData+0x29c>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800bad0:	f002 f9d4 	bl	800de7c <LmHandlerGetDutyCycleWaitTime>
 800bad4:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (nextTxIn > 0)
 800bad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00b      	beq.n	800baf4 <SendTxData+0x29c>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800badc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bade:	4a16      	ldr	r2, [pc, #88]	@ (800bb38 <SendTxData+0x2e0>)
 800bae0:	fba2 2303 	umull	r2, r3, r2, r3
 800bae4:	099b      	lsrs	r3, r3, #6
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	4b14      	ldr	r3, [pc, #80]	@ (800bb3c <SendTxData+0x2e4>)
 800baea:	2201      	movs	r2, #1
 800baec:	2100      	movs	r1, #0
 800baee:	2001      	movs	r0, #1
 800baf0:	f011 f8fa 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800baf4:	4b12      	ldr	r3, [pc, #72]	@ (800bb40 <SendTxData+0x2e8>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10f      	bne.n	800bb1c <SendTxData+0x2c4>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800bafc:	4811      	ldr	r0, [pc, #68]	@ (800bb44 <SendTxData+0x2ec>)
 800bafe:	f010 fee9 	bl	801c8d4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800bb02:	4b11      	ldr	r3, [pc, #68]	@ (800bb48 <SendTxData+0x2f0>)
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	bf38      	it	cc
 800bb0c:	4613      	movcc	r3, r2
 800bb0e:	4619      	mov	r1, r3
 800bb10:	480c      	ldr	r0, [pc, #48]	@ (800bb44 <SendTxData+0x2ec>)
 800bb12:	f010 ff4f 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800bb16:	480b      	ldr	r0, [pc, #44]	@ (800bb44 <SendTxData+0x2ec>)
 800bb18:	f010 fe6e 	bl	801c7f8 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800bb1c:	bf00      	nop
 800bb1e:	3770      	adds	r7, #112	@ 0x70
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	2000008c 	.word	0x2000008c
 800bb28:	20000766 	.word	0x20000766
 800bb2c:	20000798 	.word	0x20000798
 800bb30:	20000070 	.word	0x20000070
 800bb34:	08020120 	.word	0x08020120
 800bb38:	10624dd3 	.word	0x10624dd3
 800bb3c:	08020130 	.word	0x08020130
 800bb40:	20000640 	.word	0x20000640
 800bb44:	20000644 	.word	0x20000644
 800bb48:	20000088 	.word	0x20000088

0800bb4c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */
#warning "Bacha tady na prioritu";

	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RS485), CFG_SEQ_Prio_0);
 800bb54:	2100      	movs	r1, #0
 800bb56:	2010      	movs	r0, #16
 800bb58:	f010 fd98 	bl	801c68c <UTIL_SEQ_SetTask>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT40), CFG_SEQ_Prio_1);
 800bb5c:	2101      	movs	r1, #1
 800bb5e:	2020      	movs	r0, #32
 800bb60:	f010 fd94 	bl	801c68c <UTIL_SEQ_SetTask>

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_2);
 800bb64:	2102      	movs	r1, #2
 800bb66:	2002      	movs	r0, #2
 800bb68:	f010 fd90 	bl	801c68c <UTIL_SEQ_SetTask>


  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800bb6c:	4803      	ldr	r0, [pc, #12]	@ (800bb7c <OnTxTimerEvent+0x30>)
 800bb6e:	f010 fe43 	bl	801c7f8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800bb72:	bf00      	nop
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20000644 	.word	0x20000644

0800bb80 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
#if defined(DBG)	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bb8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bb92:	f7fa f853 	bl	8005c3c <HAL_GPIO_WritePin>
#endif
}
 800bb96:	bf00      	nop
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b083      	sub	sp, #12
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800bba6:	bf00      	nop
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bc80      	pop	{r7}
 800bbae:	4770      	bx	lr

0800bbb0 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_RED */
 800bbb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bbbc:	4803      	ldr	r0, [pc, #12]	@ (800bbcc <OnJoinTimerLedEvent+0x1c>)
 800bbbe:	f7fa f854 	bl	8005c6a <HAL_GPIO_TogglePin>
#endif
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	48000400 	.word	0x48000400

0800bbd0 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af04      	add	r7, sp, #16
 800bbd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d048      	beq.n	800bc70 <OnTxData+0xa0>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d044      	beq.n	800bc70 <OnTxData+0xa0>
    {
#if defined(DBG)	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bbec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bbf0:	f7fa f824 	bl	8005c3c <HAL_GPIO_WritePin>
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800bbf4:	4820      	ldr	r0, [pc, #128]	@ (800bc78 <OnTxData+0xa8>)
 800bbf6:	f010 fdff 	bl	801c7f8 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800bbfa:	4b20      	ldr	r3, [pc, #128]	@ (800bc7c <OnTxData+0xac>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2100      	movs	r1, #0
 800bc00:	2002      	movs	r0, #2
 800bc02:	f011 f871 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	7c12      	ldrb	r2, [r2, #16]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800bc16:	4610      	mov	r0, r2
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800bc1e:	9203      	str	r2, [sp, #12]
 800bc20:	9002      	str	r0, [sp, #8]
 800bc22:	9101      	str	r1, [sp, #4]
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	4b16      	ldr	r3, [pc, #88]	@ (800bc80 <OnTxData+0xb0>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	2003      	movs	r0, #3
 800bc2e:	f011 f85b 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800bc32:	4b14      	ldr	r3, [pc, #80]	@ (800bc84 <OnTxData+0xb4>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	2100      	movs	r1, #0
 800bc38:	2003      	movs	r0, #3
 800bc3a:	f011 f855 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7a1b      	ldrb	r3, [r3, #8]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d10e      	bne.n	800bc64 <OnTxData+0x94>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	7a5b      	ldrb	r3, [r3, #9]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <OnTxData+0x82>
 800bc4e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc88 <OnTxData+0xb8>)
 800bc50:	e000      	b.n	800bc54 <OnTxData+0x84>
 800bc52:	4b0e      	ldr	r3, [pc, #56]	@ (800bc8c <OnTxData+0xbc>)
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	4b0e      	ldr	r3, [pc, #56]	@ (800bc90 <OnTxData+0xc0>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	2003      	movs	r0, #3
 800bc5e:	f011 f843 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800bc62:	e005      	b.n	800bc70 <OnTxData+0xa0>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800bc64:	4b0b      	ldr	r3, [pc, #44]	@ (800bc94 <OnTxData+0xc4>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	2100      	movs	r1, #0
 800bc6a:	2003      	movs	r0, #3
 800bc6c:	f011 f83c 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	20000768 	.word	0x20000768
 800bc7c:	08020150 	.word	0x08020150
 800bc80:	08020184 	.word	0x08020184
 800bc84:	080201b8 	.word	0x080201b8
 800bc88:	080201c8 	.word	0x080201c8
 800bc8c:	080201cc 	.word	0x080201cc
 800bc90:	080201d4 	.word	0x080201d4
 800bc94:	080201e8 	.word	0x080201e8

0800bc98 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d039      	beq.n	800bd1a <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d11e      	bne.n	800bcee <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	2004      	movs	r0, #4
 800bcb4:	f010 fcea 	bl	801c68c <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800bcb8:	481a      	ldr	r0, [pc, #104]	@ (800bd24 <OnJoinRequest+0x8c>)
 800bcba:	f010 fe0b 	bl	801c8d4 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
      //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800bcbe:	4b1a      	ldr	r3, [pc, #104]	@ (800bd28 <OnJoinRequest+0x90>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	2002      	movs	r0, #2
 800bcc6:	f011 f80f 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	79db      	ldrb	r3, [r3, #7]
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d106      	bne.n	800bce0 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800bcd2:	4b16      	ldr	r3, [pc, #88]	@ (800bd2c <OnJoinRequest+0x94>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	2002      	movs	r0, #2
 800bcda:	f011 f805 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800bcde:	e01c      	b.n	800bd1a <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800bce0:	4b13      	ldr	r3, [pc, #76]	@ (800bd30 <OnJoinRequest+0x98>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	2100      	movs	r1, #0
 800bce6:	2002      	movs	r0, #2
 800bce8:	f010 fffe 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 800bcec:	e015      	b.n	800bd1a <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800bcee:	4b11      	ldr	r3, [pc, #68]	@ (800bd34 <OnJoinRequest+0x9c>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	2002      	movs	r0, #2
 800bcf6:	f010 fff7 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	79db      	ldrb	r3, [r3, #7]
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d10b      	bne.n	800bd1a <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800bd02:	4b0d      	ldr	r3, [pc, #52]	@ (800bd38 <OnJoinRequest+0xa0>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	2100      	movs	r1, #0
 800bd08:	2002      	movs	r0, #2
 800bd0a:	f010 ffed 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800bd0e:	4b0b      	ldr	r3, [pc, #44]	@ (800bd3c <OnJoinRequest+0xa4>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2101      	movs	r1, #1
 800bd14:	4618      	mov	r0, r3
 800bd16:	f002 f8bb 	bl	800de90 <LmHandlerJoin>
}
 800bd1a:	bf00      	nop
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20000798 	.word	0x20000798
 800bd28:	080201f8 	.word	0x080201f8
 800bd2c:	08020210 	.word	0x08020210
 800bd30:	08020230 	.word	0x08020230
 800bd34:	08020250 	.word	0x08020250
 800bd38:	0802026c 	.word	0x0802026c
 800bd3c:	20000020 	.word	0x20000020

0800bd40 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800bd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd42:	b093      	sub	sp, #76	@ 0x4c
 800bd44:	af0c      	add	r7, sp, #48	@ 0x30
 800bd46:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d056      	beq.n	800bdfc <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	785b      	ldrb	r3, [r3, #1]
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d008      	beq.n	800bd68 <OnBeaconStatusChange+0x28>
 800bd56:	2b03      	cmp	r3, #3
 800bd58:	d049      	beq.n	800bdee <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800bd5a:	4b2a      	ldr	r3, [pc, #168]	@ (800be04 <OnBeaconStatusChange+0xc4>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2100      	movs	r1, #0
 800bd60:	2002      	movs	r0, #2
 800bd62:	f010 ffc1 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800bd66:	e049      	b.n	800bdfc <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	7c1b      	ldrb	r3, [r3, #16]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bd74:	461c      	mov	r4, r3
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800bd7c:	461d      	mov	r5, r3
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	6852      	ldr	r2, [r2, #4]
 800bd86:	6979      	ldr	r1, [r7, #20]
 800bd88:	7d89      	ldrb	r1, [r1, #22]
 800bd8a:	460e      	mov	r6, r1
 800bd8c:	6979      	ldr	r1, [r7, #20]
 800bd8e:	7dc9      	ldrb	r1, [r1, #23]
 800bd90:	6139      	str	r1, [r7, #16]
 800bd92:	6979      	ldr	r1, [r7, #20]
 800bd94:	7e09      	ldrb	r1, [r1, #24]
 800bd96:	60f9      	str	r1, [r7, #12]
 800bd98:	6979      	ldr	r1, [r7, #20]
 800bd9a:	7e49      	ldrb	r1, [r1, #25]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	6979      	ldr	r1, [r7, #20]
 800bda0:	7e89      	ldrb	r1, [r1, #26]
 800bda2:	6079      	str	r1, [r7, #4]
 800bda4:	6979      	ldr	r1, [r7, #20]
 800bda6:	7ec9      	ldrb	r1, [r1, #27]
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	6979      	ldr	r1, [r7, #20]
 800bdac:	7f09      	ldrb	r1, [r1, #28]
 800bdae:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bdb0:	f8d7 c000 	ldr.w	ip, [r7]
 800bdb4:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800bdb8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800bdbc:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800bdc0:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800bdc4:	f8cd c020 	str.w	ip, [sp, #32]
 800bdc8:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800bdcc:	f8cd c01c 	str.w	ip, [sp, #28]
 800bdd0:	6939      	ldr	r1, [r7, #16]
 800bdd2:	9106      	str	r1, [sp, #24]
 800bdd4:	9605      	str	r6, [sp, #20]
 800bdd6:	9204      	str	r2, [sp, #16]
 800bdd8:	9303      	str	r3, [sp, #12]
 800bdda:	9502      	str	r5, [sp, #8]
 800bddc:	9401      	str	r4, [sp, #4]
 800bdde:	9000      	str	r0, [sp, #0]
 800bde0:	4b09      	ldr	r3, [pc, #36]	@ (800be08 <OnBeaconStatusChange+0xc8>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	2100      	movs	r1, #0
 800bde6:	2002      	movs	r0, #2
 800bde8:	f010 ff7e 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800bdec:	e006      	b.n	800bdfc <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800bdee:	4b07      	ldr	r3, [pc, #28]	@ (800be0c <OnBeaconStatusChange+0xcc>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	2002      	movs	r0, #2
 800bdf6:	f010 ff77 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800bdfa:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800bdfc:	bf00      	nop
 800bdfe:	371c      	adds	r7, #28
 800be00:	46bd      	mov	sp, r7
 800be02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be04:	08020290 	.word	0x08020290
 800be08:	080202a8 	.word	0x080202a8
 800be0c:	0802031c 	.word	0x0802031c

0800be10 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800be10:	b480      	push	{r7}
 800be12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800be14:	bf00      	nop
 800be16:	46bd      	mov	sp, r7
 800be18:	bc80      	pop	{r7}
 800be1a:	4770      	bx	lr

0800be1c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af02      	add	r7, sp, #8
 800be22:	4603      	mov	r3, r0
 800be24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800be26:	79fb      	ldrb	r3, [r7, #7]
 800be28:	4a06      	ldr	r2, [pc, #24]	@ (800be44 <OnClassChange+0x28>)
 800be2a:	5cd3      	ldrb	r3, [r2, r3]
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	4b06      	ldr	r3, [pc, #24]	@ (800be48 <OnClassChange+0x2c>)
 800be30:	2200      	movs	r2, #0
 800be32:	2100      	movs	r1, #0
 800be34:	2002      	movs	r0, #2
 800be36:	f010 ff57 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	08020358 	.word	0x08020358
 800be48:	0802033c 	.word	0x0802033c

0800be4c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800be50:	2100      	movs	r1, #0
 800be52:	2001      	movs	r0, #1
 800be54:	f010 fc1a 	bl	801c68c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800be58:	bf00      	nop
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800be64:	4a0d      	ldr	r2, [pc, #52]	@ (800be9c <OnTxPeriodicityChanged+0x40>)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800be6a:	4b0c      	ldr	r3, [pc, #48]	@ (800be9c <OnTxPeriodicityChanged+0x40>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d103      	bne.n	800be7a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800be72:	4b0a      	ldr	r3, [pc, #40]	@ (800be9c <OnTxPeriodicityChanged+0x40>)
 800be74:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800be78:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800be7a:	4809      	ldr	r0, [pc, #36]	@ (800bea0 <OnTxPeriodicityChanged+0x44>)
 800be7c:	f010 fd2a 	bl	801c8d4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800be80:	4b06      	ldr	r3, [pc, #24]	@ (800be9c <OnTxPeriodicityChanged+0x40>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4619      	mov	r1, r3
 800be86:	4806      	ldr	r0, [pc, #24]	@ (800bea0 <OnTxPeriodicityChanged+0x44>)
 800be88:	f010 fd94 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800be8c:	4804      	ldr	r0, [pc, #16]	@ (800bea0 <OnTxPeriodicityChanged+0x44>)
 800be8e:	f010 fcb3 	bl	801c7f8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20000088 	.word	0x20000088
 800bea0:	20000644 	.word	0x20000644

0800bea4 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800beae:	4a04      	ldr	r2, [pc, #16]	@ (800bec0 <OnTxFrameCtrlChanged+0x1c>)
 800beb0:	79fb      	ldrb	r3, [r7, #7]
 800beb2:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800beb4:	bf00      	nop
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	bc80      	pop	{r7}
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	20000070 	.word	0x20000070

0800bec4 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	4603      	mov	r3, r0
 800becc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800bece:	4a04      	ldr	r2, [pc, #16]	@ (800bee0 <OnPingSlotPeriodicityChanged+0x1c>)
 800bed0:	79fb      	ldrb	r3, [r7, #7]
 800bed2:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	bc80      	pop	{r7}
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	20000070 	.word	0x20000070

0800bee4 <OnSystemReset>:

static void OnSystemReset(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800bee8:	f002 fdcb 	bl	800ea82 <LmHandlerHalt>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d106      	bne.n	800bf00 <OnSystemReset+0x1c>
 800bef2:	f002 f86f 	bl	800dfd4 <LmHandlerJoinStatus>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800befc:	f7ff fada 	bl	800b4b4 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800bf00:	bf00      	nop
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <StopJoin>:

static void StopJoin(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bf0e:	481c      	ldr	r0, [pc, #112]	@ (800bf80 <StopJoin+0x7c>)
 800bf10:	f7f9 fe94 	bl	8005c3c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800bf14:	2201      	movs	r2, #1
 800bf16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bf1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bf1e:	f7f9 fe8d 	bl	8005c3c <HAL_GPIO_WritePin>
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800bf22:	4818      	ldr	r0, [pc, #96]	@ (800bf84 <StopJoin+0x80>)
 800bf24:	f010 fcd6 	bl	801c8d4 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800bf28:	f002 fd9e 	bl	800ea68 <LmHandlerStop>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d006      	beq.n	800bf40 <StopJoin+0x3c>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800bf32:	4b15      	ldr	r3, [pc, #84]	@ (800bf88 <StopJoin+0x84>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	2100      	movs	r1, #0
 800bf38:	2002      	movs	r0, #2
 800bf3a:	f010 fed5 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
 800bf3e:	e01a      	b.n	800bf76 <StopJoin+0x72>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800bf40:	4b12      	ldr	r3, [pc, #72]	@ (800bf8c <StopJoin+0x88>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	2100      	movs	r1, #0
 800bf46:	2002      	movs	r0, #2
 800bf48:	f010 fece 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800bf4c:	4b10      	ldr	r3, [pc, #64]	@ (800bf90 <StopJoin+0x8c>)
 800bf4e:	2201      	movs	r2, #1
 800bf50:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800bf52:	4b10      	ldr	r3, [pc, #64]	@ (800bf94 <StopJoin+0x90>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	2100      	movs	r1, #0
 800bf58:	2002      	movs	r0, #2
 800bf5a:	f010 fec5 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800bf5e:	480e      	ldr	r0, [pc, #56]	@ (800bf98 <StopJoin+0x94>)
 800bf60:	f001 fe32 	bl	800dbc8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800bf64:	4b0a      	ldr	r3, [pc, #40]	@ (800bf90 <StopJoin+0x8c>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2101      	movs	r1, #1
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f001 ff90 	bl	800de90 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800bf70:	4804      	ldr	r0, [pc, #16]	@ (800bf84 <StopJoin+0x80>)
 800bf72:	f010 fc41 	bl	801c7f8 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800bf76:	4809      	ldr	r0, [pc, #36]	@ (800bf9c <StopJoin+0x98>)
 800bf78:	f010 fc3e 	bl	801c7f8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800bf7c:	bf00      	nop
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	48000400 	.word	0x48000400
 800bf84:	20000644 	.word	0x20000644
 800bf88:	0802035c 	.word	0x0802035c
 800bf8c:	0802037c 	.word	0x0802037c
 800bf90:	20000020 	.word	0x20000020
 800bf94:	08020390 	.word	0x08020390
 800bf98:	20000070 	.word	0x20000070
 800bf9c:	2000065c 	.word	0x2000065c

0800bfa0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800bfa8:	4b0c      	ldr	r3, [pc, #48]	@ (800bfdc <OnStopJoinTimerEvent+0x3c>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d103      	bne.n	800bfb8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	2008      	movs	r0, #8
 800bfb4:	f010 fb6a 	bl	801c68c <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bfbe:	4808      	ldr	r0, [pc, #32]	@ (800bfe0 <OnStopJoinTimerEvent+0x40>)
 800bfc0:	f7f9 fe3c 	bl	8005c3c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bfca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bfce:	f7f9 fe35 	bl	8005c3c <HAL_GPIO_WritePin>
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800bfd2:	bf00      	nop
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	20000020 	.word	0x20000020
 800bfe0:	48000400 	.word	0x48000400

0800bfe4 <StoreContext>:

static void StoreContext(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800bfea:	23ff      	movs	r3, #255	@ 0xff
 800bfec:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800bfee:	f002 fd7d 	bl	800eaec <LmHandlerNvmDataStore>
 800bff2:	4603      	mov	r3, r0
 800bff4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800bff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bffa:	f113 0f08 	cmn.w	r3, #8
 800bffe:	d106      	bne.n	800c00e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800c000:	4b0a      	ldr	r3, [pc, #40]	@ (800c02c <StoreContext+0x48>)
 800c002:	2200      	movs	r2, #0
 800c004:	2100      	movs	r1, #0
 800c006:	2002      	movs	r0, #2
 800c008:	f010 fe6e 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c00c:	e00a      	b.n	800c024 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800c00e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c016:	d105      	bne.n	800c024 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800c018:	4b05      	ldr	r3, [pc, #20]	@ (800c030 <StoreContext+0x4c>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	2100      	movs	r1, #0
 800c01e:	2002      	movs	r0, #2
 800c020:	f010 fe62 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	080203b0 	.word	0x080203b0
 800c030:	080203c8 	.word	0x080203c8

0800c034 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	4603      	mov	r3, r0
 800c03c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800c03e:	79fb      	ldrb	r3, [r7, #7]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d106      	bne.n	800c052 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800c044:	4b08      	ldr	r3, [pc, #32]	@ (800c068 <OnNvmDataChange+0x34>)
 800c046:	2200      	movs	r2, #0
 800c048:	2100      	movs	r1, #0
 800c04a:	2002      	movs	r0, #2
 800c04c:	f010 fe4c 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c050:	e005      	b.n	800c05e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800c052:	4b06      	ldr	r3, [pc, #24]	@ (800c06c <OnNvmDataChange+0x38>)
 800c054:	2200      	movs	r2, #0
 800c056:	2100      	movs	r1, #0
 800c058:	2002      	movs	r0, #2
 800c05a:	f010 fe45 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 800c05e:	bf00      	nop
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	080203e0 	.word	0x080203e0
 800c06c:	080203f4 	.word	0x080203f4

0800c070 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800c07a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c07e:	4807      	ldr	r0, [pc, #28]	@ (800c09c <OnStoreContextRequest+0x2c>)
 800c080:	f7f5 fc46 	bl	8001910 <FLASH_IF_Erase>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d104      	bne.n	800c094 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	4803      	ldr	r0, [pc, #12]	@ (800c09c <OnStoreContextRequest+0x2c>)
 800c090:	f7f5 fbee 	bl	8001870 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	0803f000 	.word	0x0803f000

0800c0a0 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	4903      	ldr	r1, [pc, #12]	@ (800c0bc <OnRestoreContextRequest+0x1c>)
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7f5 fc06 	bl	80018c0 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	0803f000 	.word	0x0803f000

0800c0c0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800c0c4:	4b15      	ldr	r3, [pc, #84]	@ (800c11c <LoraInfo_Init+0x5c>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c0ca:	4b14      	ldr	r3, [pc, #80]	@ (800c11c <LoraInfo_Init+0x5c>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c0d0:	4b12      	ldr	r3, [pc, #72]	@ (800c11c <LoraInfo_Init+0x5c>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c0d6:	4b11      	ldr	r3, [pc, #68]	@ (800c11c <LoraInfo_Init+0x5c>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800c0dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c11c <LoraInfo_Init+0x5c>)
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	f043 0320 	orr.w	r3, r3, #32
 800c0e4:	4a0d      	ldr	r2, [pc, #52]	@ (800c11c <LoraInfo_Init+0x5c>)
 800c0e6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c0e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c11c <LoraInfo_Init+0x5c>)
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10d      	bne.n	800c10c <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c0f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c120 <LoraInfo_Init+0x60>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	f010 fdf6 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c0fc:	bf00      	nop
 800c0fe:	f010 fde1 	bl	801ccc4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c102:	4603      	mov	r3, r0
 800c104:	2b01      	cmp	r3, #1
 800c106:	d1fa      	bne.n	800c0fe <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c108:	bf00      	nop
 800c10a:	e7fd      	b.n	800c108 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c10c:	4b03      	ldr	r3, [pc, #12]	@ (800c11c <LoraInfo_Init+0x5c>)
 800c10e:	2200      	movs	r2, #0
 800c110:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800c112:	4b02      	ldr	r3, [pc, #8]	@ (800c11c <LoraInfo_Init+0x5c>)
 800c114:	2201      	movs	r2, #1
 800c116:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c118:	bf00      	nop
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	200007b0 	.word	0x200007b0
 800c120:	08020408 	.word	0x08020408

0800c124 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c124:	b480      	push	{r7}
 800c126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c128:	4b02      	ldr	r3, [pc, #8]	@ (800c134 <LoraInfo_GetPtr+0x10>)
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bc80      	pop	{r7}
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	200007b0 	.word	0x200007b0

0800c138 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c13c:	f7f7 fa91 	bl	8003662 <BSP_RADIO_Init>
 800c140:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c142:	4618      	mov	r0, r3
 800c144:	bd80      	pop	{r7, pc}

0800c146 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b082      	sub	sp, #8
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	4603      	mov	r3, r0
 800c14e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c150:	79fb      	ldrb	r3, [r7, #7]
 800c152:	4618      	mov	r0, r3
 800c154:	f7f7 fab6 	bl	80036c4 <BSP_RADIO_ConfigRFSwitch>
 800c158:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c166:	f7f7 fafb 	bl	8003760 <BSP_RADIO_GetTxConfig>
 800c16a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c174:	f7f7 fafb 	bl	800376e <BSP_RADIO_IsTCXO>
 800c178:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c182:	f7f7 fafb 	bl	800377c <BSP_RADIO_IsDCDC>
 800c186:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c188:	4618      	mov	r0, r3
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	4603      	mov	r3, r0
 800c194:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c196:	79fb      	ldrb	r3, [r7, #7]
 800c198:	4618      	mov	r0, r3
 800c19a:	f7f7 faf6 	bl	800378a <BSP_RADIO_GetRFOMaxPowerConfig>
 800c19e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	33f1      	adds	r3, #241	@ 0xf1
 800c1b4:	2210      	movs	r2, #16
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f00c fcd9 	bl	8018b70 <memset1>
    ctx->M_n = 0;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	22f0      	movs	r2, #240	@ 0xf0
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f00c fccf 	bl	8018b70 <memset1>
}
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b082      	sub	sp, #8
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	2110      	movs	r1, #16
 800c1ea:	6838      	ldr	r0, [r7, #0]
 800c1ec:	f000 fe60 	bl	800ceb0 <lorawan_aes_set_key>
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08c      	sub	sp, #48	@ 0x30
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f000 80a1 	beq.w	800c352 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c216:	f1c3 0310 	rsb	r3, r3, #16
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	4293      	cmp	r3, r2
 800c21e:	bf28      	it	cs
 800c220:	4613      	movcs	r3, r2
 800c222:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c230:	4413      	add	r3, r2
 800c232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c234:	b292      	uxth	r2, r2
 800c236:	68b9      	ldr	r1, [r7, #8]
 800c238:	4618      	mov	r0, r3
 800c23a:	f00c fc5e 	bl	8018afa <memcpy1>
        ctx->M_n += mlen;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800c244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c246:	441a      	add	r2, r3
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c254:	2b0f      	cmp	r3, #15
 800c256:	f240 808d 	bls.w	800c374 <AES_CMAC_Update+0x17c>
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25e:	429a      	cmp	r2, r3
 800c260:	f000 8088 	beq.w	800c374 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800c264:	2300      	movs	r3, #0
 800c266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c268:	e015      	b.n	800c296 <AES_CMAC_Update+0x9e>
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c26e:	4413      	add	r3, r2
 800c270:	33f1      	adds	r3, #241	@ 0xf1
 800c272:	781a      	ldrb	r2, [r3, #0]
 800c274:	68f9      	ldr	r1, [r7, #12]
 800c276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c278:	440b      	add	r3, r1
 800c27a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	4053      	eors	r3, r2
 800c282:	b2d9      	uxtb	r1, r3
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c288:	4413      	add	r3, r2
 800c28a:	33f1      	adds	r3, #241	@ 0xf1
 800c28c:	460a      	mov	r2, r1
 800c28e:	701a      	strb	r2, [r3, #0]
 800c290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c292:	3301      	adds	r3, #1
 800c294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c298:	2b0f      	cmp	r3, #15
 800c29a:	dde6      	ble.n	800c26a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c2a2:	f107 0314 	add.w	r3, r7, #20
 800c2a6:	2210      	movs	r2, #16
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f00c fc26 	bl	8018afa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	f107 0114 	add.w	r1, r7, #20
 800c2b4:	f107 0314 	add.w	r3, r7, #20
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 fed7 	bl	800d06c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	33f1      	adds	r3, #241	@ 0xf1
 800c2c2:	f107 0114 	add.w	r1, r7, #20
 800c2c6:	2210      	movs	r2, #16
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f00c fc16 	bl	8018afa <memcpy1>

        data += mlen;
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d2:	4413      	add	r3, r2
 800c2d4:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c2de:	e038      	b.n	800c352 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2e4:	e013      	b.n	800c30e <AES_CMAC_Update+0x116>
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ea:	4413      	add	r3, r2
 800c2ec:	33f1      	adds	r3, #241	@ 0xf1
 800c2ee:	781a      	ldrb	r2, [r3, #0]
 800c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f2:	68b9      	ldr	r1, [r7, #8]
 800c2f4:	440b      	add	r3, r1
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	4053      	eors	r3, r2
 800c2fa:	b2d9      	uxtb	r1, r3
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c300:	4413      	add	r3, r2
 800c302:	33f1      	adds	r3, #241	@ 0xf1
 800c304:	460a      	mov	r2, r1
 800c306:	701a      	strb	r2, [r3, #0]
 800c308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c30a:	3301      	adds	r3, #1
 800c30c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c310:	2b0f      	cmp	r3, #15
 800c312:	dde8      	ble.n	800c2e6 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c31a:	f107 0314 	add.w	r3, r7, #20
 800c31e:	2210      	movs	r2, #16
 800c320:	4618      	mov	r0, r3
 800c322:	f00c fbea 	bl	8018afa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	f107 0114 	add.w	r1, r7, #20
 800c32c:	f107 0314 	add.w	r3, r7, #20
 800c330:	4618      	mov	r0, r3
 800c332:	f000 fe9b 	bl	800d06c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	33f1      	adds	r3, #241	@ 0xf1
 800c33a:	f107 0114 	add.w	r1, r7, #20
 800c33e:	2210      	movs	r2, #16
 800c340:	4618      	mov	r0, r3
 800c342:	f00c fbda 	bl	8018afa <memcpy1>

        data += 16;
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	3310      	adds	r3, #16
 800c34a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3b10      	subs	r3, #16
 800c350:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b10      	cmp	r3, #16
 800c356:	d8c3      	bhi.n	800c2e0 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	b292      	uxth	r2, r2
 800c362:	68b9      	ldr	r1, [r7, #8]
 800c364:	4618      	mov	r0, r3
 800c366:	f00c fbc8 	bl	8018afa <memcpy1>
    ctx->M_n = len;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c372:	e000      	b.n	800c376 <AES_CMAC_Update+0x17e>
            return;
 800c374:	bf00      	nop
}
 800c376:	3730      	adds	r7, #48	@ 0x30
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b092      	sub	sp, #72	@ 0x48
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c386:	f107 031c 	add.w	r3, r7, #28
 800c38a:	2210      	movs	r2, #16
 800c38c:	2100      	movs	r1, #0
 800c38e:	4618      	mov	r0, r3
 800c390:	f00c fbee 	bl	8018b70 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	f107 011c 	add.w	r1, r7, #28
 800c39a:	f107 031c 	add.w	r3, r7, #28
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 fe64 	bl	800d06c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c3a4:	7f3b      	ldrb	r3, [r7, #28]
 800c3a6:	b25b      	sxtb	r3, r3
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da31      	bge.n	800c410 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3b0:	e01c      	b.n	800c3ec <AES_CMAC_Final+0x70>
 800c3b2:	f107 021c 	add.w	r2, r7, #28
 800c3b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3b8:	4413      	add	r3, r2
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	b25b      	sxtb	r3, r3
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	b25a      	sxtb	r2, r3
 800c3c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	3348      	adds	r3, #72	@ 0x48
 800c3c8:	443b      	add	r3, r7
 800c3ca:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c3ce:	09db      	lsrs	r3, r3, #7
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	b25b      	sxtb	r3, r3
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	b25b      	sxtb	r3, r3
 800c3d8:	b2d9      	uxtb	r1, r3
 800c3da:	f107 021c 	add.w	r2, r7, #28
 800c3de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3e0:	4413      	add	r3, r2
 800c3e2:	460a      	mov	r2, r1
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3ee:	2b0e      	cmp	r3, #14
 800c3f0:	dddf      	ble.n	800c3b2 <AES_CMAC_Final+0x36>
 800c3f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800c3fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c402:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c406:	43db      	mvns	r3, r3
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c40e:	e028      	b.n	800c462 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800c410:	2300      	movs	r3, #0
 800c412:	643b      	str	r3, [r7, #64]	@ 0x40
 800c414:	e01c      	b.n	800c450 <AES_CMAC_Final+0xd4>
 800c416:	f107 021c 	add.w	r2, r7, #28
 800c41a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c41c:	4413      	add	r3, r2
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	b25b      	sxtb	r3, r3
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	b25a      	sxtb	r2, r3
 800c426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c428:	3301      	adds	r3, #1
 800c42a:	3348      	adds	r3, #72	@ 0x48
 800c42c:	443b      	add	r3, r7
 800c42e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c432:	09db      	lsrs	r3, r3, #7
 800c434:	b2db      	uxtb	r3, r3
 800c436:	b25b      	sxtb	r3, r3
 800c438:	4313      	orrs	r3, r2
 800c43a:	b25b      	sxtb	r3, r3
 800c43c:	b2d9      	uxtb	r1, r3
 800c43e:	f107 021c 	add.w	r2, r7, #28
 800c442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c444:	4413      	add	r3, r2
 800c446:	460a      	mov	r2, r1
 800c448:	701a      	strb	r2, [r3, #0]
 800c44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c44c:	3301      	adds	r3, #1
 800c44e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c452:	2b0e      	cmp	r3, #14
 800c454:	dddf      	ble.n	800c416 <AES_CMAC_Final+0x9a>
 800c456:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c468:	2b10      	cmp	r3, #16
 800c46a:	d11d      	bne.n	800c4a8 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c46c:	2300      	movs	r3, #0
 800c46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c470:	e016      	b.n	800c4a0 <AES_CMAC_Final+0x124>
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c476:	4413      	add	r3, r2
 800c478:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c47c:	781a      	ldrb	r2, [r3, #0]
 800c47e:	f107 011c 	add.w	r1, r7, #28
 800c482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c484:	440b      	add	r3, r1
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	4053      	eors	r3, r2
 800c48a:	b2d9      	uxtb	r1, r3
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c490:	4413      	add	r3, r2
 800c492:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c496:	460a      	mov	r2, r1
 800c498:	701a      	strb	r2, [r3, #0]
 800c49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c49c:	3301      	adds	r3, #1
 800c49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a2:	2b0f      	cmp	r3, #15
 800c4a4:	dde5      	ble.n	800c472 <AES_CMAC_Final+0xf6>
 800c4a6:	e098      	b.n	800c5da <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c4a8:	7f3b      	ldrb	r3, [r7, #28]
 800c4aa:	b25b      	sxtb	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	da31      	bge.n	800c514 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4b4:	e01c      	b.n	800c4f0 <AES_CMAC_Final+0x174>
 800c4b6:	f107 021c 	add.w	r2, r7, #28
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4bc:	4413      	add	r3, r2
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	b25b      	sxtb	r3, r3
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	b25a      	sxtb	r2, r3
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	3348      	adds	r3, #72	@ 0x48
 800c4cc:	443b      	add	r3, r7
 800c4ce:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c4d2:	09db      	lsrs	r3, r3, #7
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	b25b      	sxtb	r3, r3
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	b25b      	sxtb	r3, r3
 800c4dc:	b2d9      	uxtb	r1, r3
 800c4de:	f107 021c 	add.w	r2, r7, #28
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e4:	4413      	add	r3, r2
 800c4e6:	460a      	mov	r2, r1
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f2:	2b0e      	cmp	r3, #14
 800c4f4:	dddf      	ble.n	800c4b6 <AES_CMAC_Final+0x13a>
 800c4f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800c502:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c506:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c50a:	43db      	mvns	r3, r3
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c512:	e028      	b.n	800c566 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800c514:	2300      	movs	r3, #0
 800c516:	637b      	str	r3, [r7, #52]	@ 0x34
 800c518:	e01c      	b.n	800c554 <AES_CMAC_Final+0x1d8>
 800c51a:	f107 021c 	add.w	r2, r7, #28
 800c51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c520:	4413      	add	r3, r2
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	b25b      	sxtb	r3, r3
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	b25a      	sxtb	r2, r3
 800c52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c52c:	3301      	adds	r3, #1
 800c52e:	3348      	adds	r3, #72	@ 0x48
 800c530:	443b      	add	r3, r7
 800c532:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c536:	09db      	lsrs	r3, r3, #7
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	b25b      	sxtb	r3, r3
 800c53c:	4313      	orrs	r3, r2
 800c53e:	b25b      	sxtb	r3, r3
 800c540:	b2d9      	uxtb	r1, r3
 800c542:	f107 021c 	add.w	r2, r7, #28
 800c546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c548:	4413      	add	r3, r2
 800c54a:	460a      	mov	r2, r1
 800c54c:	701a      	strb	r2, [r3, #0]
 800c54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c550:	3301      	adds	r3, #1
 800c552:	637b      	str	r3, [r7, #52]	@ 0x34
 800c554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c556:	2b0e      	cmp	r3, #14
 800c558:	dddf      	ble.n	800c51a <AES_CMAC_Final+0x19e>
 800c55a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	b2db      	uxtb	r3, r3
 800c562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	4413      	add	r3, r2
 800c570:	2280      	movs	r2, #128	@ 0x80
 800c572:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c576:	e007      	b.n	800c588 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	4413      	add	r3, r2
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c59c:	2b0f      	cmp	r3, #15
 800c59e:	d9eb      	bls.n	800c578 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5a4:	e016      	b.n	800c5d4 <AES_CMAC_Final+0x258>
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c5b0:	781a      	ldrb	r2, [r3, #0]
 800c5b2:	f107 011c 	add.w	r1, r7, #28
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	440b      	add	r3, r1
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	4053      	eors	r3, r2
 800c5be:	b2d9      	uxtb	r1, r3
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c4:	4413      	add	r3, r2
 800c5c6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c5ca:	460a      	mov	r2, r1
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d6:	2b0f      	cmp	r3, #15
 800c5d8:	dde5      	ble.n	800c5a6 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800c5da:	2300      	movs	r3, #0
 800c5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5de:	e015      	b.n	800c60c <AES_CMAC_Final+0x290>
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e4:	4413      	add	r3, r2
 800c5e6:	33f1      	adds	r3, #241	@ 0xf1
 800c5e8:	781a      	ldrb	r2, [r3, #0]
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ee:	440b      	add	r3, r1
 800c5f0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	4053      	eors	r3, r2
 800c5f8:	b2d9      	uxtb	r1, r3
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fe:	4413      	add	r3, r2
 800c600:	33f1      	adds	r3, #241	@ 0xf1
 800c602:	460a      	mov	r2, r1
 800c604:	701a      	strb	r2, [r3, #0]
 800c606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c608:	3301      	adds	r3, #1
 800c60a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60e:	2b0f      	cmp	r3, #15
 800c610:	dde6      	ble.n	800c5e0 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c618:	f107 030c 	add.w	r3, r7, #12
 800c61c:	2210      	movs	r2, #16
 800c61e:	4618      	mov	r0, r3
 800c620:	f00c fa6b 	bl	8018afa <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c624:	683a      	ldr	r2, [r7, #0]
 800c626:	f107 030c 	add.w	r3, r7, #12
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 fd1d 	bl	800d06c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c632:	f107 031c 	add.w	r3, r7, #28
 800c636:	2210      	movs	r2, #16
 800c638:	2100      	movs	r1, #0
 800c63a:	4618      	mov	r0, r3
 800c63c:	f00c fa98 	bl	8018b70 <memset1>
}
 800c640:	bf00      	nop
 800c642:	3748      	adds	r7, #72	@ 0x48
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	781a      	ldrb	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3301      	adds	r3, #1
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	7852      	ldrb	r2, [r2, #1]
 800c662:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3302      	adds	r3, #2
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	7892      	ldrb	r2, [r2, #2]
 800c66c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	3303      	adds	r3, #3
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	78d2      	ldrb	r2, [r2, #3]
 800c676:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3304      	adds	r3, #4
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	7912      	ldrb	r2, [r2, #4]
 800c680:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3305      	adds	r3, #5
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	7952      	ldrb	r2, [r2, #5]
 800c68a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	3306      	adds	r3, #6
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	7992      	ldrb	r2, [r2, #6]
 800c694:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3307      	adds	r3, #7
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	79d2      	ldrb	r2, [r2, #7]
 800c69e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	7a12      	ldrb	r2, [r2, #8]
 800c6a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	3309      	adds	r3, #9
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	7a52      	ldrb	r2, [r2, #9]
 800c6b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	330a      	adds	r3, #10
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	7a92      	ldrb	r2, [r2, #10]
 800c6bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	330b      	adds	r3, #11
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	7ad2      	ldrb	r2, [r2, #11]
 800c6c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	330c      	adds	r3, #12
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	7b12      	ldrb	r2, [r2, #12]
 800c6d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	330d      	adds	r3, #13
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	7b52      	ldrb	r2, [r2, #13]
 800c6da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	330e      	adds	r3, #14
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	7b92      	ldrb	r2, [r2, #14]
 800c6e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	330f      	adds	r3, #15
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	7bd2      	ldrb	r2, [r2, #15]
 800c6ee:	701a      	strb	r2, [r3, #0]
#endif
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bc80      	pop	{r7}
 800c6f8:	4770      	bx	lr

0800c6fa <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c6fa:	b480      	push	{r7}
 800c6fc:	b085      	sub	sp, #20
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	60f8      	str	r0, [r7, #12]
 800c702:	60b9      	str	r1, [r7, #8]
 800c704:	4613      	mov	r3, r2
 800c706:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c708:	e007      	b.n	800c71a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	1c53      	adds	r3, r2, #1
 800c70e:	60bb      	str	r3, [r7, #8]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	1c59      	adds	r1, r3, #1
 800c714:	60f9      	str	r1, [r7, #12]
 800c716:	7812      	ldrb	r2, [r2, #0]
 800c718:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c71a:	79fb      	ldrb	r3, [r7, #7]
 800c71c:	1e5a      	subs	r2, r3, #1
 800c71e:	71fa      	strb	r2, [r7, #7]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1f2      	bne.n	800c70a <copy_block_nn+0x10>
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bc80      	pop	{r7}
 800c72e:	4770      	bx	lr

0800c730 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	781a      	ldrb	r2, [r3, #0]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	4053      	eors	r3, r2
 800c744:	b2da      	uxtb	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3301      	adds	r3, #1
 800c74e:	7819      	ldrb	r1, [r3, #0]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	3301      	adds	r3, #1
 800c754:	781a      	ldrb	r2, [r3, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	3301      	adds	r3, #1
 800c75a:	404a      	eors	r2, r1
 800c75c:	b2d2      	uxtb	r2, r2
 800c75e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	3302      	adds	r3, #2
 800c764:	7819      	ldrb	r1, [r3, #0]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	3302      	adds	r3, #2
 800c76a:	781a      	ldrb	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	3302      	adds	r3, #2
 800c770:	404a      	eors	r2, r1
 800c772:	b2d2      	uxtb	r2, r2
 800c774:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3303      	adds	r3, #3
 800c77a:	7819      	ldrb	r1, [r3, #0]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	3303      	adds	r3, #3
 800c780:	781a      	ldrb	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	3303      	adds	r3, #3
 800c786:	404a      	eors	r2, r1
 800c788:	b2d2      	uxtb	r2, r2
 800c78a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3304      	adds	r3, #4
 800c790:	7819      	ldrb	r1, [r3, #0]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	3304      	adds	r3, #4
 800c796:	781a      	ldrb	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3304      	adds	r3, #4
 800c79c:	404a      	eors	r2, r1
 800c79e:	b2d2      	uxtb	r2, r2
 800c7a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3305      	adds	r3, #5
 800c7a6:	7819      	ldrb	r1, [r3, #0]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	3305      	adds	r3, #5
 800c7ac:	781a      	ldrb	r2, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3305      	adds	r3, #5
 800c7b2:	404a      	eors	r2, r1
 800c7b4:	b2d2      	uxtb	r2, r2
 800c7b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3306      	adds	r3, #6
 800c7bc:	7819      	ldrb	r1, [r3, #0]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	3306      	adds	r3, #6
 800c7c2:	781a      	ldrb	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	3306      	adds	r3, #6
 800c7c8:	404a      	eors	r2, r1
 800c7ca:	b2d2      	uxtb	r2, r2
 800c7cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3307      	adds	r3, #7
 800c7d2:	7819      	ldrb	r1, [r3, #0]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	3307      	adds	r3, #7
 800c7d8:	781a      	ldrb	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3307      	adds	r3, #7
 800c7de:	404a      	eors	r2, r1
 800c7e0:	b2d2      	uxtb	r2, r2
 800c7e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	7819      	ldrb	r1, [r3, #0]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	781a      	ldrb	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	404a      	eors	r2, r1
 800c7f6:	b2d2      	uxtb	r2, r2
 800c7f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3309      	adds	r3, #9
 800c7fe:	7819      	ldrb	r1, [r3, #0]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	3309      	adds	r3, #9
 800c804:	781a      	ldrb	r2, [r3, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3309      	adds	r3, #9
 800c80a:	404a      	eors	r2, r1
 800c80c:	b2d2      	uxtb	r2, r2
 800c80e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	330a      	adds	r3, #10
 800c814:	7819      	ldrb	r1, [r3, #0]
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	330a      	adds	r3, #10
 800c81a:	781a      	ldrb	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	330a      	adds	r3, #10
 800c820:	404a      	eors	r2, r1
 800c822:	b2d2      	uxtb	r2, r2
 800c824:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	330b      	adds	r3, #11
 800c82a:	7819      	ldrb	r1, [r3, #0]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	330b      	adds	r3, #11
 800c830:	781a      	ldrb	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	330b      	adds	r3, #11
 800c836:	404a      	eors	r2, r1
 800c838:	b2d2      	uxtb	r2, r2
 800c83a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	330c      	adds	r3, #12
 800c840:	7819      	ldrb	r1, [r3, #0]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	330c      	adds	r3, #12
 800c846:	781a      	ldrb	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	330c      	adds	r3, #12
 800c84c:	404a      	eors	r2, r1
 800c84e:	b2d2      	uxtb	r2, r2
 800c850:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	330d      	adds	r3, #13
 800c856:	7819      	ldrb	r1, [r3, #0]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	330d      	adds	r3, #13
 800c85c:	781a      	ldrb	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	330d      	adds	r3, #13
 800c862:	404a      	eors	r2, r1
 800c864:	b2d2      	uxtb	r2, r2
 800c866:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	330e      	adds	r3, #14
 800c86c:	7819      	ldrb	r1, [r3, #0]
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	330e      	adds	r3, #14
 800c872:	781a      	ldrb	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	330e      	adds	r3, #14
 800c878:	404a      	eors	r2, r1
 800c87a:	b2d2      	uxtb	r2, r2
 800c87c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	330f      	adds	r3, #15
 800c882:	7819      	ldrb	r1, [r3, #0]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	330f      	adds	r3, #15
 800c888:	781a      	ldrb	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	330f      	adds	r3, #15
 800c88e:	404a      	eors	r2, r1
 800c890:	b2d2      	uxtb	r2, r2
 800c892:	701a      	strb	r2, [r3, #0]
#endif
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	bc80      	pop	{r7}
 800c89c:	4770      	bx	lr

0800c89e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c89e:	b480      	push	{r7}
 800c8a0:	b085      	sub	sp, #20
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	60f8      	str	r0, [r7, #12]
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	781a      	ldrb	r2, [r3, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	4053      	eors	r3, r2
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	7819      	ldrb	r1, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	781a      	ldrb	r2, [r3, #0]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	404a      	eors	r2, r1
 800c8cc:	b2d2      	uxtb	r2, r2
 800c8ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	3302      	adds	r3, #2
 800c8d4:	7819      	ldrb	r1, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3302      	adds	r3, #2
 800c8da:	781a      	ldrb	r2, [r3, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	3302      	adds	r3, #2
 800c8e0:	404a      	eors	r2, r1
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	3303      	adds	r3, #3
 800c8ea:	7819      	ldrb	r1, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3303      	adds	r3, #3
 800c8f0:	781a      	ldrb	r2, [r3, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	3303      	adds	r3, #3
 800c8f6:	404a      	eors	r2, r1
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	3304      	adds	r3, #4
 800c900:	7819      	ldrb	r1, [r3, #0]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	3304      	adds	r3, #4
 800c906:	781a      	ldrb	r2, [r3, #0]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	3304      	adds	r3, #4
 800c90c:	404a      	eors	r2, r1
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	3305      	adds	r3, #5
 800c916:	7819      	ldrb	r1, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3305      	adds	r3, #5
 800c91c:	781a      	ldrb	r2, [r3, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	3305      	adds	r3, #5
 800c922:	404a      	eors	r2, r1
 800c924:	b2d2      	uxtb	r2, r2
 800c926:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	3306      	adds	r3, #6
 800c92c:	7819      	ldrb	r1, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	3306      	adds	r3, #6
 800c932:	781a      	ldrb	r2, [r3, #0]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	3306      	adds	r3, #6
 800c938:	404a      	eors	r2, r1
 800c93a:	b2d2      	uxtb	r2, r2
 800c93c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	3307      	adds	r3, #7
 800c942:	7819      	ldrb	r1, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	3307      	adds	r3, #7
 800c948:	781a      	ldrb	r2, [r3, #0]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3307      	adds	r3, #7
 800c94e:	404a      	eors	r2, r1
 800c950:	b2d2      	uxtb	r2, r2
 800c952:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	3308      	adds	r3, #8
 800c958:	7819      	ldrb	r1, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	3308      	adds	r3, #8
 800c95e:	781a      	ldrb	r2, [r3, #0]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	3308      	adds	r3, #8
 800c964:	404a      	eors	r2, r1
 800c966:	b2d2      	uxtb	r2, r2
 800c968:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	3309      	adds	r3, #9
 800c96e:	7819      	ldrb	r1, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3309      	adds	r3, #9
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	3309      	adds	r3, #9
 800c97a:	404a      	eors	r2, r1
 800c97c:	b2d2      	uxtb	r2, r2
 800c97e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	330a      	adds	r3, #10
 800c984:	7819      	ldrb	r1, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	330a      	adds	r3, #10
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	330a      	adds	r3, #10
 800c990:	404a      	eors	r2, r1
 800c992:	b2d2      	uxtb	r2, r2
 800c994:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	330b      	adds	r3, #11
 800c99a:	7819      	ldrb	r1, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	330b      	adds	r3, #11
 800c9a0:	781a      	ldrb	r2, [r3, #0]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	330b      	adds	r3, #11
 800c9a6:	404a      	eors	r2, r1
 800c9a8:	b2d2      	uxtb	r2, r2
 800c9aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	330c      	adds	r3, #12
 800c9b0:	7819      	ldrb	r1, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	330c      	adds	r3, #12
 800c9b6:	781a      	ldrb	r2, [r3, #0]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	330c      	adds	r3, #12
 800c9bc:	404a      	eors	r2, r1
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	330d      	adds	r3, #13
 800c9c6:	7819      	ldrb	r1, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	330d      	adds	r3, #13
 800c9cc:	781a      	ldrb	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	330d      	adds	r3, #13
 800c9d2:	404a      	eors	r2, r1
 800c9d4:	b2d2      	uxtb	r2, r2
 800c9d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	330e      	adds	r3, #14
 800c9dc:	7819      	ldrb	r1, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	330e      	adds	r3, #14
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	330e      	adds	r3, #14
 800c9e8:	404a      	eors	r2, r1
 800c9ea:	b2d2      	uxtb	r2, r2
 800c9ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	330f      	adds	r3, #15
 800c9f2:	7819      	ldrb	r1, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	330f      	adds	r3, #15
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	330f      	adds	r3, #15
 800c9fe:	404a      	eors	r2, r1
 800ca00:	b2d2      	uxtb	r2, r2
 800ca02:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ca04:	bf00      	nop
 800ca06:	3714      	adds	r7, #20
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bc80      	pop	{r7}
 800ca0c:	4770      	bx	lr

0800ca0e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800ca18:	6839      	ldr	r1, [r7, #0]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff fe88 	bl	800c730 <xor_block>
}
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	461a      	mov	r2, r3
 800ca36:	4b48      	ldr	r3, [pc, #288]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca38:	5c9a      	ldrb	r2, [r3, r2]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3304      	adds	r3, #4
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	4619      	mov	r1, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4a43      	ldr	r2, [pc, #268]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca4c:	5c52      	ldrb	r2, [r2, r1]
 800ca4e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	3308      	adds	r3, #8
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	4619      	mov	r1, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3308      	adds	r3, #8
 800ca5c:	4a3e      	ldr	r2, [pc, #248]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca5e:	5c52      	ldrb	r2, [r2, r1]
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	330c      	adds	r3, #12
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	330c      	adds	r3, #12
 800ca6e:	4a3a      	ldr	r2, [pc, #232]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca70:	5c52      	ldrb	r2, [r2, r1]
 800ca72:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	785b      	ldrb	r3, [r3, #1]
 800ca78:	73fb      	strb	r3, [r7, #15]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	3305      	adds	r3, #5
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	4619      	mov	r1, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3301      	adds	r3, #1
 800ca86:	4a34      	ldr	r2, [pc, #208]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca88:	5c52      	ldrb	r2, [r2, r1]
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	3309      	adds	r3, #9
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	4619      	mov	r1, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3305      	adds	r3, #5
 800ca98:	4a2f      	ldr	r2, [pc, #188]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca9a:	5c52      	ldrb	r2, [r2, r1]
 800ca9c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	330d      	adds	r3, #13
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	4619      	mov	r1, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3309      	adds	r3, #9
 800caaa:	4a2b      	ldr	r2, [pc, #172]	@ (800cb58 <shift_sub_rows+0x130>)
 800caac:	5c52      	ldrb	r2, [r2, r1]
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	7bfa      	ldrb	r2, [r7, #15]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	330d      	adds	r3, #13
 800cab6:	4928      	ldr	r1, [pc, #160]	@ (800cb58 <shift_sub_rows+0x130>)
 800cab8:	5c8a      	ldrb	r2, [r1, r2]
 800caba:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	789b      	ldrb	r3, [r3, #2]
 800cac0:	73fb      	strb	r3, [r7, #15]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	330a      	adds	r3, #10
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	4619      	mov	r1, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3302      	adds	r3, #2
 800cace:	4a22      	ldr	r2, [pc, #136]	@ (800cb58 <shift_sub_rows+0x130>)
 800cad0:	5c52      	ldrb	r2, [r2, r1]
 800cad2:	701a      	strb	r2, [r3, #0]
 800cad4:	7bfa      	ldrb	r2, [r7, #15]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	330a      	adds	r3, #10
 800cada:	491f      	ldr	r1, [pc, #124]	@ (800cb58 <shift_sub_rows+0x130>)
 800cadc:	5c8a      	ldrb	r2, [r1, r2]
 800cade:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	799b      	ldrb	r3, [r3, #6]
 800cae4:	73fb      	strb	r3, [r7, #15]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	330e      	adds	r3, #14
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	4619      	mov	r1, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3306      	adds	r3, #6
 800caf2:	4a19      	ldr	r2, [pc, #100]	@ (800cb58 <shift_sub_rows+0x130>)
 800caf4:	5c52      	ldrb	r2, [r2, r1]
 800caf6:	701a      	strb	r2, [r3, #0]
 800caf8:	7bfa      	ldrb	r2, [r7, #15]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	330e      	adds	r3, #14
 800cafe:	4916      	ldr	r1, [pc, #88]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb00:	5c8a      	ldrb	r2, [r1, r2]
 800cb02:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	7bdb      	ldrb	r3, [r3, #15]
 800cb08:	73fb      	strb	r3, [r7, #15]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	330b      	adds	r3, #11
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	4619      	mov	r1, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	330f      	adds	r3, #15
 800cb16:	4a10      	ldr	r2, [pc, #64]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb18:	5c52      	ldrb	r2, [r2, r1]
 800cb1a:	701a      	strb	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	3307      	adds	r3, #7
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	4619      	mov	r1, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	330b      	adds	r3, #11
 800cb28:	4a0b      	ldr	r2, [pc, #44]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb2a:	5c52      	ldrb	r2, [r2, r1]
 800cb2c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	3303      	adds	r3, #3
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	4619      	mov	r1, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3307      	adds	r3, #7
 800cb3a:	4a07      	ldr	r2, [pc, #28]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb3c:	5c52      	ldrb	r2, [r2, r1]
 800cb3e:	701a      	strb	r2, [r3, #0]
 800cb40:	7bfa      	ldrb	r2, [r7, #15]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3303      	adds	r3, #3
 800cb46:	4904      	ldr	r1, [pc, #16]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb48:	5c8a      	ldrb	r2, [r1, r2]
 800cb4a:	701a      	strb	r2, [r3, #0]
}
 800cb4c:	bf00      	nop
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bc80      	pop	{r7}
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	08020914 	.word	0x08020914

0800cb5c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b086      	sub	sp, #24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800cb64:	f107 0308 	add.w	r3, r7, #8
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fd6c 	bl	800c648 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800cb70:	7a3b      	ldrb	r3, [r7, #8]
 800cb72:	461a      	mov	r2, r3
 800cb74:	4b9a      	ldr	r3, [pc, #616]	@ (800cde0 <mix_sub_columns+0x284>)
 800cb76:	5c9a      	ldrb	r2, [r3, r2]
 800cb78:	7b7b      	ldrb	r3, [r7, #13]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	4b99      	ldr	r3, [pc, #612]	@ (800cde4 <mix_sub_columns+0x288>)
 800cb7e:	5c5b      	ldrb	r3, [r3, r1]
 800cb80:	4053      	eors	r3, r2
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	7cbb      	ldrb	r3, [r7, #18]
 800cb86:	4619      	mov	r1, r3
 800cb88:	4b97      	ldr	r3, [pc, #604]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cb8a:	5c5b      	ldrb	r3, [r3, r1]
 800cb8c:	4053      	eors	r3, r2
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
 800cb92:	4619      	mov	r1, r3
 800cb94:	4b94      	ldr	r3, [pc, #592]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cb96:	5c5b      	ldrb	r3, [r3, r1]
 800cb98:	4053      	eors	r3, r2
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cba0:	7a3b      	ldrb	r3, [r7, #8]
 800cba2:	461a      	mov	r2, r3
 800cba4:	4b90      	ldr	r3, [pc, #576]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cba6:	5c9a      	ldrb	r2, [r3, r2]
 800cba8:	7b7b      	ldrb	r3, [r7, #13]
 800cbaa:	4619      	mov	r1, r3
 800cbac:	4b8c      	ldr	r3, [pc, #560]	@ (800cde0 <mix_sub_columns+0x284>)
 800cbae:	5c5b      	ldrb	r3, [r3, r1]
 800cbb0:	4053      	eors	r3, r2
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	7cbb      	ldrb	r3, [r7, #18]
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	4b8a      	ldr	r3, [pc, #552]	@ (800cde4 <mix_sub_columns+0x288>)
 800cbba:	5c5b      	ldrb	r3, [r3, r1]
 800cbbc:	4053      	eors	r3, r2
 800cbbe:	b2d9      	uxtb	r1, r3
 800cbc0:	7dfb      	ldrb	r3, [r7, #23]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	4b88      	ldr	r3, [pc, #544]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cbc6:	5c9a      	ldrb	r2, [r3, r2]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	404a      	eors	r2, r1
 800cbce:	b2d2      	uxtb	r2, r2
 800cbd0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cbd2:	7a3b      	ldrb	r3, [r7, #8]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	4b84      	ldr	r3, [pc, #528]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cbd8:	5c9a      	ldrb	r2, [r3, r2]
 800cbda:	7b7b      	ldrb	r3, [r7, #13]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4b82      	ldr	r3, [pc, #520]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cbe0:	5c5b      	ldrb	r3, [r3, r1]
 800cbe2:	4053      	eors	r3, r2
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	7cbb      	ldrb	r3, [r7, #18]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	4b7d      	ldr	r3, [pc, #500]	@ (800cde0 <mix_sub_columns+0x284>)
 800cbec:	5c5b      	ldrb	r3, [r3, r1]
 800cbee:	4053      	eors	r3, r2
 800cbf0:	b2d9      	uxtb	r1, r3
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	4b7b      	ldr	r3, [pc, #492]	@ (800cde4 <mix_sub_columns+0x288>)
 800cbf8:	5c9a      	ldrb	r2, [r3, r2]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	3302      	adds	r3, #2
 800cbfe:	404a      	eors	r2, r1
 800cc00:	b2d2      	uxtb	r2, r2
 800cc02:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cc04:	7a3b      	ldrb	r3, [r7, #8]
 800cc06:	461a      	mov	r2, r3
 800cc08:	4b76      	ldr	r3, [pc, #472]	@ (800cde4 <mix_sub_columns+0x288>)
 800cc0a:	5c9a      	ldrb	r2, [r3, r2]
 800cc0c:	7b7b      	ldrb	r3, [r7, #13]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	4b75      	ldr	r3, [pc, #468]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc12:	5c5b      	ldrb	r3, [r3, r1]
 800cc14:	4053      	eors	r3, r2
 800cc16:	b2da      	uxtb	r2, r3
 800cc18:	7cbb      	ldrb	r3, [r7, #18]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	4b72      	ldr	r3, [pc, #456]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc1e:	5c5b      	ldrb	r3, [r3, r1]
 800cc20:	4053      	eors	r3, r2
 800cc22:	b2d9      	uxtb	r1, r3
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
 800cc26:	461a      	mov	r2, r3
 800cc28:	4b6d      	ldr	r3, [pc, #436]	@ (800cde0 <mix_sub_columns+0x284>)
 800cc2a:	5c9a      	ldrb	r2, [r3, r2]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3303      	adds	r3, #3
 800cc30:	404a      	eors	r2, r1
 800cc32:	b2d2      	uxtb	r2, r2
 800cc34:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cc36:	7b3b      	ldrb	r3, [r7, #12]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	4b69      	ldr	r3, [pc, #420]	@ (800cde0 <mix_sub_columns+0x284>)
 800cc3c:	5c9a      	ldrb	r2, [r3, r2]
 800cc3e:	7c7b      	ldrb	r3, [r7, #17]
 800cc40:	4619      	mov	r1, r3
 800cc42:	4b68      	ldr	r3, [pc, #416]	@ (800cde4 <mix_sub_columns+0x288>)
 800cc44:	5c5b      	ldrb	r3, [r3, r1]
 800cc46:	4053      	eors	r3, r2
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	7dbb      	ldrb	r3, [r7, #22]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	4b66      	ldr	r3, [pc, #408]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc50:	5c5b      	ldrb	r3, [r3, r1]
 800cc52:	4053      	eors	r3, r2
 800cc54:	b2d9      	uxtb	r1, r3
 800cc56:	7afb      	ldrb	r3, [r7, #11]
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4b63      	ldr	r3, [pc, #396]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc5c:	5c9a      	ldrb	r2, [r3, r2]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	3304      	adds	r3, #4
 800cc62:	404a      	eors	r2, r1
 800cc64:	b2d2      	uxtb	r2, r2
 800cc66:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cc68:	7b3b      	ldrb	r3, [r7, #12]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	4b5e      	ldr	r3, [pc, #376]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc6e:	5c9a      	ldrb	r2, [r3, r2]
 800cc70:	7c7b      	ldrb	r3, [r7, #17]
 800cc72:	4619      	mov	r1, r3
 800cc74:	4b5a      	ldr	r3, [pc, #360]	@ (800cde0 <mix_sub_columns+0x284>)
 800cc76:	5c5b      	ldrb	r3, [r3, r1]
 800cc78:	4053      	eors	r3, r2
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	7dbb      	ldrb	r3, [r7, #22]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4b58      	ldr	r3, [pc, #352]	@ (800cde4 <mix_sub_columns+0x288>)
 800cc82:	5c5b      	ldrb	r3, [r3, r1]
 800cc84:	4053      	eors	r3, r2
 800cc86:	b2d9      	uxtb	r1, r3
 800cc88:	7afb      	ldrb	r3, [r7, #11]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	4b56      	ldr	r3, [pc, #344]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc8e:	5c9a      	ldrb	r2, [r3, r2]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	3305      	adds	r3, #5
 800cc94:	404a      	eors	r2, r1
 800cc96:	b2d2      	uxtb	r2, r2
 800cc98:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800cc9a:	7b3b      	ldrb	r3, [r7, #12]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4b52      	ldr	r3, [pc, #328]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cca0:	5c9a      	ldrb	r2, [r3, r2]
 800cca2:	7c7b      	ldrb	r3, [r7, #17]
 800cca4:	4619      	mov	r1, r3
 800cca6:	4b50      	ldr	r3, [pc, #320]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cca8:	5c5b      	ldrb	r3, [r3, r1]
 800ccaa:	4053      	eors	r3, r2
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	7dbb      	ldrb	r3, [r7, #22]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4b4b      	ldr	r3, [pc, #300]	@ (800cde0 <mix_sub_columns+0x284>)
 800ccb4:	5c5b      	ldrb	r3, [r3, r1]
 800ccb6:	4053      	eors	r3, r2
 800ccb8:	b2d9      	uxtb	r1, r3
 800ccba:	7afb      	ldrb	r3, [r7, #11]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	4b49      	ldr	r3, [pc, #292]	@ (800cde4 <mix_sub_columns+0x288>)
 800ccc0:	5c9a      	ldrb	r2, [r3, r2]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3306      	adds	r3, #6
 800ccc6:	404a      	eors	r2, r1
 800ccc8:	b2d2      	uxtb	r2, r2
 800ccca:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800cccc:	7b3b      	ldrb	r3, [r7, #12]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	4b44      	ldr	r3, [pc, #272]	@ (800cde4 <mix_sub_columns+0x288>)
 800ccd2:	5c9a      	ldrb	r2, [r3, r2]
 800ccd4:	7c7b      	ldrb	r3, [r7, #17]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	4b43      	ldr	r3, [pc, #268]	@ (800cde8 <mix_sub_columns+0x28c>)
 800ccda:	5c5b      	ldrb	r3, [r3, r1]
 800ccdc:	4053      	eors	r3, r2
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	7dbb      	ldrb	r3, [r7, #22]
 800cce2:	4619      	mov	r1, r3
 800cce4:	4b40      	ldr	r3, [pc, #256]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cce6:	5c5b      	ldrb	r3, [r3, r1]
 800cce8:	4053      	eors	r3, r2
 800ccea:	b2d9      	uxtb	r1, r3
 800ccec:	7afb      	ldrb	r3, [r7, #11]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	4b3b      	ldr	r3, [pc, #236]	@ (800cde0 <mix_sub_columns+0x284>)
 800ccf2:	5c9a      	ldrb	r2, [r3, r2]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	3307      	adds	r3, #7
 800ccf8:	404a      	eors	r2, r1
 800ccfa:	b2d2      	uxtb	r2, r2
 800ccfc:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ccfe:	7c3b      	ldrb	r3, [r7, #16]
 800cd00:	461a      	mov	r2, r3
 800cd02:	4b37      	ldr	r3, [pc, #220]	@ (800cde0 <mix_sub_columns+0x284>)
 800cd04:	5c9a      	ldrb	r2, [r3, r2]
 800cd06:	7d7b      	ldrb	r3, [r7, #21]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	4b36      	ldr	r3, [pc, #216]	@ (800cde4 <mix_sub_columns+0x288>)
 800cd0c:	5c5b      	ldrb	r3, [r3, r1]
 800cd0e:	4053      	eors	r3, r2
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	7abb      	ldrb	r3, [r7, #10]
 800cd14:	4619      	mov	r1, r3
 800cd16:	4b34      	ldr	r3, [pc, #208]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd18:	5c5b      	ldrb	r3, [r3, r1]
 800cd1a:	4053      	eors	r3, r2
 800cd1c:	b2d9      	uxtb	r1, r3
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
 800cd20:	461a      	mov	r2, r3
 800cd22:	4b31      	ldr	r3, [pc, #196]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd24:	5c9a      	ldrb	r2, [r3, r2]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	3308      	adds	r3, #8
 800cd2a:	404a      	eors	r2, r1
 800cd2c:	b2d2      	uxtb	r2, r2
 800cd2e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800cd30:	7c3b      	ldrb	r3, [r7, #16]
 800cd32:	461a      	mov	r2, r3
 800cd34:	4b2c      	ldr	r3, [pc, #176]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd36:	5c9a      	ldrb	r2, [r3, r2]
 800cd38:	7d7b      	ldrb	r3, [r7, #21]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4b28      	ldr	r3, [pc, #160]	@ (800cde0 <mix_sub_columns+0x284>)
 800cd3e:	5c5b      	ldrb	r3, [r3, r1]
 800cd40:	4053      	eors	r3, r2
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	7abb      	ldrb	r3, [r7, #10]
 800cd46:	4619      	mov	r1, r3
 800cd48:	4b26      	ldr	r3, [pc, #152]	@ (800cde4 <mix_sub_columns+0x288>)
 800cd4a:	5c5b      	ldrb	r3, [r3, r1]
 800cd4c:	4053      	eors	r3, r2
 800cd4e:	b2d9      	uxtb	r1, r3
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	461a      	mov	r2, r3
 800cd54:	4b24      	ldr	r3, [pc, #144]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd56:	5c9a      	ldrb	r2, [r3, r2]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	3309      	adds	r3, #9
 800cd5c:	404a      	eors	r2, r1
 800cd5e:	b2d2      	uxtb	r2, r2
 800cd60:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800cd62:	7c3b      	ldrb	r3, [r7, #16]
 800cd64:	461a      	mov	r2, r3
 800cd66:	4b20      	ldr	r3, [pc, #128]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd68:	5c9a      	ldrb	r2, [r3, r2]
 800cd6a:	7d7b      	ldrb	r3, [r7, #21]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	4b1e      	ldr	r3, [pc, #120]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd70:	5c5b      	ldrb	r3, [r3, r1]
 800cd72:	4053      	eors	r3, r2
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	7abb      	ldrb	r3, [r7, #10]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4b19      	ldr	r3, [pc, #100]	@ (800cde0 <mix_sub_columns+0x284>)
 800cd7c:	5c5b      	ldrb	r3, [r3, r1]
 800cd7e:	4053      	eors	r3, r2
 800cd80:	b2d9      	uxtb	r1, r3
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	461a      	mov	r2, r3
 800cd86:	4b17      	ldr	r3, [pc, #92]	@ (800cde4 <mix_sub_columns+0x288>)
 800cd88:	5c9a      	ldrb	r2, [r3, r2]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	330a      	adds	r3, #10
 800cd8e:	404a      	eors	r2, r1
 800cd90:	b2d2      	uxtb	r2, r2
 800cd92:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800cd94:	7c3b      	ldrb	r3, [r7, #16]
 800cd96:	461a      	mov	r2, r3
 800cd98:	4b12      	ldr	r3, [pc, #72]	@ (800cde4 <mix_sub_columns+0x288>)
 800cd9a:	5c9a      	ldrb	r2, [r3, r2]
 800cd9c:	7d7b      	ldrb	r3, [r7, #21]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	4b11      	ldr	r3, [pc, #68]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cda2:	5c5b      	ldrb	r3, [r3, r1]
 800cda4:	4053      	eors	r3, r2
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	7abb      	ldrb	r3, [r7, #10]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4b0e      	ldr	r3, [pc, #56]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cdae:	5c5b      	ldrb	r3, [r3, r1]
 800cdb0:	4053      	eors	r3, r2
 800cdb2:	b2d9      	uxtb	r1, r3
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	4b09      	ldr	r3, [pc, #36]	@ (800cde0 <mix_sub_columns+0x284>)
 800cdba:	5c9a      	ldrb	r2, [r3, r2]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	330b      	adds	r3, #11
 800cdc0:	404a      	eors	r2, r1
 800cdc2:	b2d2      	uxtb	r2, r2
 800cdc4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cdc6:	7d3b      	ldrb	r3, [r7, #20]
 800cdc8:	461a      	mov	r2, r3
 800cdca:	4b05      	ldr	r3, [pc, #20]	@ (800cde0 <mix_sub_columns+0x284>)
 800cdcc:	5c9a      	ldrb	r2, [r3, r2]
 800cdce:	7a7b      	ldrb	r3, [r7, #9]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4b04      	ldr	r3, [pc, #16]	@ (800cde4 <mix_sub_columns+0x288>)
 800cdd4:	5c5b      	ldrb	r3, [r3, r1]
 800cdd6:	4053      	eors	r3, r2
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	7bbb      	ldrb	r3, [r7, #14]
 800cddc:	4619      	mov	r1, r3
 800cdde:	e005      	b.n	800cdec <mix_sub_columns+0x290>
 800cde0:	08020a14 	.word	0x08020a14
 800cde4:	08020b14 	.word	0x08020b14
 800cde8:	08020914 	.word	0x08020914
 800cdec:	4b2d      	ldr	r3, [pc, #180]	@ (800cea4 <mix_sub_columns+0x348>)
 800cdee:	5c5b      	ldrb	r3, [r3, r1]
 800cdf0:	4053      	eors	r3, r2
 800cdf2:	b2d9      	uxtb	r1, r3
 800cdf4:	7cfb      	ldrb	r3, [r7, #19]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	4b2a      	ldr	r3, [pc, #168]	@ (800cea4 <mix_sub_columns+0x348>)
 800cdfa:	5c9a      	ldrb	r2, [r3, r2]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	330c      	adds	r3, #12
 800ce00:	404a      	eors	r2, r1
 800ce02:	b2d2      	uxtb	r2, r2
 800ce04:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ce06:	7d3b      	ldrb	r3, [r7, #20]
 800ce08:	461a      	mov	r2, r3
 800ce0a:	4b26      	ldr	r3, [pc, #152]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce0c:	5c9a      	ldrb	r2, [r3, r2]
 800ce0e:	7a7b      	ldrb	r3, [r7, #9]
 800ce10:	4619      	mov	r1, r3
 800ce12:	4b25      	ldr	r3, [pc, #148]	@ (800cea8 <mix_sub_columns+0x34c>)
 800ce14:	5c5b      	ldrb	r3, [r3, r1]
 800ce16:	4053      	eors	r3, r2
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	7bbb      	ldrb	r3, [r7, #14]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4b23      	ldr	r3, [pc, #140]	@ (800ceac <mix_sub_columns+0x350>)
 800ce20:	5c5b      	ldrb	r3, [r3, r1]
 800ce22:	4053      	eors	r3, r2
 800ce24:	b2d9      	uxtb	r1, r3
 800ce26:	7cfb      	ldrb	r3, [r7, #19]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	4b1e      	ldr	r3, [pc, #120]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce2c:	5c9a      	ldrb	r2, [r3, r2]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	330d      	adds	r3, #13
 800ce32:	404a      	eors	r2, r1
 800ce34:	b2d2      	uxtb	r2, r2
 800ce36:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ce38:	7d3b      	ldrb	r3, [r7, #20]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	4b19      	ldr	r3, [pc, #100]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce3e:	5c9a      	ldrb	r2, [r3, r2]
 800ce40:	7a7b      	ldrb	r3, [r7, #9]
 800ce42:	4619      	mov	r1, r3
 800ce44:	4b17      	ldr	r3, [pc, #92]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce46:	5c5b      	ldrb	r3, [r3, r1]
 800ce48:	4053      	eors	r3, r2
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	7bbb      	ldrb	r3, [r7, #14]
 800ce4e:	4619      	mov	r1, r3
 800ce50:	4b15      	ldr	r3, [pc, #84]	@ (800cea8 <mix_sub_columns+0x34c>)
 800ce52:	5c5b      	ldrb	r3, [r3, r1]
 800ce54:	4053      	eors	r3, r2
 800ce56:	b2d9      	uxtb	r1, r3
 800ce58:	7cfb      	ldrb	r3, [r7, #19]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	4b13      	ldr	r3, [pc, #76]	@ (800ceac <mix_sub_columns+0x350>)
 800ce5e:	5c9a      	ldrb	r2, [r3, r2]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	330e      	adds	r3, #14
 800ce64:	404a      	eors	r2, r1
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ce6a:	7d3b      	ldrb	r3, [r7, #20]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	4b0f      	ldr	r3, [pc, #60]	@ (800ceac <mix_sub_columns+0x350>)
 800ce70:	5c9a      	ldrb	r2, [r3, r2]
 800ce72:	7a7b      	ldrb	r3, [r7, #9]
 800ce74:	4619      	mov	r1, r3
 800ce76:	4b0b      	ldr	r3, [pc, #44]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce78:	5c5b      	ldrb	r3, [r3, r1]
 800ce7a:	4053      	eors	r3, r2
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	7bbb      	ldrb	r3, [r7, #14]
 800ce80:	4619      	mov	r1, r3
 800ce82:	4b08      	ldr	r3, [pc, #32]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce84:	5c5b      	ldrb	r3, [r3, r1]
 800ce86:	4053      	eors	r3, r2
 800ce88:	b2d9      	uxtb	r1, r3
 800ce8a:	7cfb      	ldrb	r3, [r7, #19]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4b06      	ldr	r3, [pc, #24]	@ (800cea8 <mix_sub_columns+0x34c>)
 800ce90:	5c9a      	ldrb	r2, [r3, r2]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	330f      	adds	r3, #15
 800ce96:	404a      	eors	r2, r1
 800ce98:	b2d2      	uxtb	r2, r2
 800ce9a:	701a      	strb	r2, [r3, #0]
  }
 800ce9c:	bf00      	nop
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	08020914 	.word	0x08020914
 800cea8:	08020a14 	.word	0x08020a14
 800ceac:	08020b14 	.word	0x08020b14

0800ceb0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800cebe:	7afb      	ldrb	r3, [r7, #11]
 800cec0:	3b10      	subs	r3, #16
 800cec2:	2b10      	cmp	r3, #16
 800cec4:	bf8c      	ite	hi
 800cec6:	2201      	movhi	r2, #1
 800cec8:	2200      	movls	r2, #0
 800ceca:	b2d2      	uxtb	r2, r2
 800cecc:	2a00      	cmp	r2, #0
 800cece:	d10b      	bne.n	800cee8 <lorawan_aes_set_key+0x38>
 800ced0:	4a64      	ldr	r2, [pc, #400]	@ (800d064 <lorawan_aes_set_key+0x1b4>)
 800ced2:	fa22 f303 	lsr.w	r3, r2, r3
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bf14      	ite	ne
 800cede:	2301      	movne	r3, #1
 800cee0:	2300      	moveq	r3, #0
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d105      	bne.n	800cef4 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800cef0:	23ff      	movs	r3, #255	@ 0xff
 800cef2:	e0b3      	b.n	800d05c <lorawan_aes_set_key+0x1ac>
        break;
 800cef4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	7afa      	ldrb	r2, [r7, #11]
 800cefa:	68f9      	ldr	r1, [r7, #12]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7ff fbfc 	bl	800c6fa <copy_block_nn>
    hi = (keylen + 28) << 2;
 800cf02:	7afb      	ldrb	r3, [r7, #11]
 800cf04:	331c      	adds	r3, #28
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800cf0c:	7c7b      	ldrb	r3, [r7, #17]
 800cf0e:	091b      	lsrs	r3, r3, #4
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	3b01      	subs	r3, #1
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cf1c:	7afb      	ldrb	r3, [r7, #11]
 800cf1e:	75fb      	strb	r3, [r7, #23]
 800cf20:	2301      	movs	r3, #1
 800cf22:	75bb      	strb	r3, [r7, #22]
 800cf24:	e094      	b.n	800d050 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
 800cf28:	3b04      	subs	r3, #4
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	5cd3      	ldrb	r3, [r2, r3]
 800cf2e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
 800cf32:	3b03      	subs	r3, #3
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	5cd3      	ldrb	r3, [r2, r3]
 800cf38:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
 800cf3c:	3b02      	subs	r3, #2
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	5cd3      	ldrb	r3, [r2, r3]
 800cf42:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800cf44:	7dfb      	ldrb	r3, [r7, #23]
 800cf46:	3b01      	subs	r3, #1
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	5cd3      	ldrb	r3, [r2, r3]
 800cf4c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800cf4e:	7dfb      	ldrb	r3, [r7, #23]
 800cf50:	7afa      	ldrb	r2, [r7, #11]
 800cf52:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf56:	fb01 f202 	mul.w	r2, r1, r2
 800cf5a:	1a9b      	subs	r3, r3, r2
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d128      	bne.n	800cfb4 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800cf62:	7d7b      	ldrb	r3, [r7, #21]
 800cf64:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800cf66:	7d3b      	ldrb	r3, [r7, #20]
 800cf68:	4a3f      	ldr	r2, [pc, #252]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cf6a:	5cd2      	ldrb	r2, [r2, r3]
 800cf6c:	7dbb      	ldrb	r3, [r7, #22]
 800cf6e:	4053      	eors	r3, r2
 800cf70:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800cf72:	7cfb      	ldrb	r3, [r7, #19]
 800cf74:	4a3c      	ldr	r2, [pc, #240]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cf76:	5cd3      	ldrb	r3, [r2, r3]
 800cf78:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800cf7a:	7cbb      	ldrb	r3, [r7, #18]
 800cf7c:	4a3a      	ldr	r2, [pc, #232]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cf7e:	5cd3      	ldrb	r3, [r2, r3]
 800cf80:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800cf82:	7c3b      	ldrb	r3, [r7, #16]
 800cf84:	4a38      	ldr	r2, [pc, #224]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cf86:	5cd3      	ldrb	r3, [r2, r3]
 800cf88:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800cf8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	b25a      	sxtb	r2, r3
 800cf92:	7dbb      	ldrb	r3, [r7, #22]
 800cf94:	09db      	lsrs	r3, r3, #7
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	b25b      	sxtb	r3, r3
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	0049      	lsls	r1, r1, #1
 800cf9e:	440b      	add	r3, r1
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	00c8      	lsls	r0, r1, #3
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	440b      	add	r3, r1
 800cfaa:	b25b      	sxtb	r3, r3
 800cfac:	4053      	eors	r3, r2
 800cfae:	b25b      	sxtb	r3, r3
 800cfb0:	75bb      	strb	r3, [r7, #22]
 800cfb2:	e01c      	b.n	800cfee <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800cfb4:	7afb      	ldrb	r3, [r7, #11]
 800cfb6:	2b18      	cmp	r3, #24
 800cfb8:	d919      	bls.n	800cfee <lorawan_aes_set_key+0x13e>
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	7afa      	ldrb	r2, [r7, #11]
 800cfbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfc2:	fb01 f202 	mul.w	r2, r1, r2
 800cfc6:	1a9b      	subs	r3, r3, r2
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	2b10      	cmp	r3, #16
 800cfcc:	d10f      	bne.n	800cfee <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800cfce:	7d7b      	ldrb	r3, [r7, #21]
 800cfd0:	4a25      	ldr	r2, [pc, #148]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cfd2:	5cd3      	ldrb	r3, [r2, r3]
 800cfd4:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800cfd6:	7d3b      	ldrb	r3, [r7, #20]
 800cfd8:	4a23      	ldr	r2, [pc, #140]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cfda:	5cd3      	ldrb	r3, [r2, r3]
 800cfdc:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800cfde:	7cfb      	ldrb	r3, [r7, #19]
 800cfe0:	4a21      	ldr	r2, [pc, #132]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cfe2:	5cd3      	ldrb	r3, [r2, r3]
 800cfe4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800cfe6:	7cbb      	ldrb	r3, [r7, #18]
 800cfe8:	4a1f      	ldr	r2, [pc, #124]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cfea:	5cd3      	ldrb	r3, [r2, r3]
 800cfec:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800cfee:	7dfa      	ldrb	r2, [r7, #23]
 800cff0:	7afb      	ldrb	r3, [r7, #11]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800cff6:	7c3b      	ldrb	r3, [r7, #16]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	5cd1      	ldrb	r1, [r2, r3]
 800cffc:	7dfb      	ldrb	r3, [r7, #23]
 800cffe:	7d7a      	ldrb	r2, [r7, #21]
 800d000:	404a      	eors	r2, r1
 800d002:	b2d1      	uxtb	r1, r2
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d008:	7c3b      	ldrb	r3, [r7, #16]
 800d00a:	3301      	adds	r3, #1
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	5cd1      	ldrb	r1, [r2, r3]
 800d010:	7dfb      	ldrb	r3, [r7, #23]
 800d012:	3301      	adds	r3, #1
 800d014:	7d3a      	ldrb	r2, [r7, #20]
 800d016:	404a      	eors	r2, r1
 800d018:	b2d1      	uxtb	r1, r2
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d01e:	7c3b      	ldrb	r3, [r7, #16]
 800d020:	3302      	adds	r3, #2
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	5cd1      	ldrb	r1, [r2, r3]
 800d026:	7dfb      	ldrb	r3, [r7, #23]
 800d028:	3302      	adds	r3, #2
 800d02a:	7cfa      	ldrb	r2, [r7, #19]
 800d02c:	404a      	eors	r2, r1
 800d02e:	b2d1      	uxtb	r1, r2
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d034:	7c3b      	ldrb	r3, [r7, #16]
 800d036:	3303      	adds	r3, #3
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	5cd1      	ldrb	r1, [r2, r3]
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
 800d03e:	3303      	adds	r3, #3
 800d040:	7cba      	ldrb	r2, [r7, #18]
 800d042:	404a      	eors	r2, r1
 800d044:	b2d1      	uxtb	r1, r2
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d04a:	7dfb      	ldrb	r3, [r7, #23]
 800d04c:	3304      	adds	r3, #4
 800d04e:	75fb      	strb	r3, [r7, #23]
 800d050:	7dfa      	ldrb	r2, [r7, #23]
 800d052:	7c7b      	ldrb	r3, [r7, #17]
 800d054:	429a      	cmp	r2, r3
 800d056:	f4ff af66 	bcc.w	800cf26 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	00010101 	.word	0x00010101
 800d068:	08020914 	.word	0x08020914

0800d06c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08a      	sub	sp, #40	@ 0x28
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d038      	beq.n	800d0f4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	f107 0314 	add.w	r3, r7, #20
 800d088:	68f9      	ldr	r1, [r7, #12]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7ff fc07 	bl	800c89e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d090:	2301      	movs	r3, #1
 800d092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d096:	e014      	b.n	800d0c2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d098:	f107 0314 	add.w	r3, r7, #20
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff fd5d 	bl	800cb5c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d0a8:	0112      	lsls	r2, r2, #4
 800d0aa:	441a      	add	r2, r3
 800d0ac:	f107 0314 	add.w	r3, r7, #20
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7ff fcab 	bl	800ca0e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d0bc:	3301      	adds	r3, #1
 800d0be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d0c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d3e3      	bcc.n	800d098 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d0d0:	f107 0314 	add.w	r3, r7, #20
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7ff fca7 	bl	800ca28 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d0e0:	0112      	lsls	r2, r2, #4
 800d0e2:	441a      	add	r2, r3
 800d0e4:	f107 0314 	add.w	r3, r7, #20
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	68b8      	ldr	r0, [r7, #8]
 800d0ec:	f7ff fbd7 	bl	800c89e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	e000      	b.n	800d0f6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d0f4:	23ff      	movs	r3, #255	@ 0xff
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3728      	adds	r7, #40	@ 0x28
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
	...

0800d100 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800d100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d102:	b0a1      	sub	sp, #132	@ 0x84
 800d104:	af12      	add	r7, sp, #72	@ 0x48
 800d106:	4603      	mov	r3, r0
 800d108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800d10c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d110:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d114:	4611      	mov	r1, r2
 800d116:	4618      	mov	r0, r3
 800d118:	f000 fa12 	bl	800d540 <SecureElementGetKeyByID>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d174      	bne.n	800d20c <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d122:	2300      	movs	r3, #0
 800d124:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d128:	e06c      	b.n	800d204 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800d12a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d12e:	4939      	ldr	r1, [pc, #228]	@ (800d214 <PrintKey+0x114>)
 800d130:	4613      	mov	r3, r2
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	4413      	add	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	440b      	add	r3, r1
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d140:	429a      	cmp	r2, r3
 800d142:	d15a      	bne.n	800d1fa <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800d144:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d148:	4932      	ldr	r1, [pc, #200]	@ (800d214 <PrintKey+0x114>)
 800d14a:	4613      	mov	r3, r2
 800d14c:	005b      	lsls	r3, r3, #1
 800d14e:	4413      	add	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	440b      	add	r3, r1
 800d154:	3308      	adds	r3, #8
 800d156:	6819      	ldr	r1, [r3, #0]
 800d158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15a:	785b      	ldrb	r3, [r3, #1]
 800d15c:	461d      	mov	r5, r3
 800d15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d160:	789b      	ldrb	r3, [r3, #2]
 800d162:	461e      	mov	r6, r3
 800d164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d166:	78db      	ldrb	r3, [r3, #3]
 800d168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16c:	791b      	ldrb	r3, [r3, #4]
 800d16e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d172:	795b      	ldrb	r3, [r3, #5]
 800d174:	623b      	str	r3, [r7, #32]
 800d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d178:	799b      	ldrb	r3, [r3, #6]
 800d17a:	61fb      	str	r3, [r7, #28]
 800d17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17e:	79db      	ldrb	r3, [r3, #7]
 800d180:	61bb      	str	r3, [r7, #24]
 800d182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d184:	7a1b      	ldrb	r3, [r3, #8]
 800d186:	617b      	str	r3, [r7, #20]
 800d188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d18a:	7a5b      	ldrb	r3, [r3, #9]
 800d18c:	613b      	str	r3, [r7, #16]
 800d18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d190:	7a9b      	ldrb	r3, [r3, #10]
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d196:	7adb      	ldrb	r3, [r3, #11]
 800d198:	60bb      	str	r3, [r7, #8]
 800d19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19c:	7b1b      	ldrb	r3, [r3, #12]
 800d19e:	607b      	str	r3, [r7, #4]
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a2:	7b5b      	ldrb	r3, [r3, #13]
 800d1a4:	461c      	mov	r4, r3
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a8:	7b9b      	ldrb	r3, [r3, #14]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ae:	7bdb      	ldrb	r3, [r3, #15]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b4:	7c1b      	ldrb	r3, [r3, #16]
 800d1b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1b8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d1ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800d1bc:	940d      	str	r4, [sp, #52]	@ 0x34
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	920a      	str	r2, [sp, #40]	@ 0x28
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1ce:	697a      	ldr	r2, [r7, #20]
 800d1d0:	9208      	str	r2, [sp, #32]
 800d1d2:	69ba      	ldr	r2, [r7, #24]
 800d1d4:	9207      	str	r2, [sp, #28]
 800d1d6:	69fa      	ldr	r2, [r7, #28]
 800d1d8:	9206      	str	r2, [sp, #24]
 800d1da:	6a3a      	ldr	r2, [r7, #32]
 800d1dc:	9205      	str	r2, [sp, #20]
 800d1de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1e0:	9204      	str	r2, [sp, #16]
 800d1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e4:	9303      	str	r3, [sp, #12]
 800d1e6:	9602      	str	r6, [sp, #8]
 800d1e8:	9501      	str	r5, [sp, #4]
 800d1ea:	9100      	str	r1, [sp, #0]
 800d1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d218 <PrintKey+0x118>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	2002      	movs	r0, #2
 800d1f4:	f00f fd78 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
 800d1f8:	e008      	b.n	800d20c <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d1fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d1fe:	3301      	adds	r3, #1
 800d200:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d204:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d208:	2b0a      	cmp	r3, #10
 800d20a:	d98e      	bls.n	800d12a <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800d20c:	373c      	adds	r7, #60	@ 0x3c
 800d20e:	46bd      	mov	sp, r7
 800d210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d212:	bf00      	nop
 800d214:	08020c14 	.word	0x08020c14
 800d218:	080204ec 	.word	0x080204ec

0800d21c <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800d21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d21e:	b091      	sub	sp, #68	@ 0x44
 800d220:	af08      	add	r7, sp, #32
 800d222:	4603      	mov	r3, r0
 800d224:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800d22a:	f107 0310 	add.w	r3, r7, #16
 800d22e:	4618      	mov	r0, r3
 800d230:	f000 fbd8 	bl	800d9e4 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800d234:	7c3b      	ldrb	r3, [r7, #16]
 800d236:	7c7a      	ldrb	r2, [r7, #17]
 800d238:	7cb9      	ldrb	r1, [r7, #18]
 800d23a:	7cf8      	ldrb	r0, [r7, #19]
 800d23c:	7d3c      	ldrb	r4, [r7, #20]
 800d23e:	7d7d      	ldrb	r5, [r7, #21]
 800d240:	7dbe      	ldrb	r6, [r7, #22]
 800d242:	f897 c017 	ldrb.w	ip, [r7, #23]
 800d246:	f8cd c01c 	str.w	ip, [sp, #28]
 800d24a:	9606      	str	r6, [sp, #24]
 800d24c:	9505      	str	r5, [sp, #20]
 800d24e:	9404      	str	r4, [sp, #16]
 800d250:	9003      	str	r0, [sp, #12]
 800d252:	9102      	str	r1, [sp, #8]
 800d254:	9201      	str	r2, [sp, #4]
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	4b24      	ldr	r3, [pc, #144]	@ (800d2ec <PrintIds+0xd0>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	2100      	movs	r1, #0
 800d25e:	2002      	movs	r0, #2
 800d260:	f00f fd42 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800d264:	f107 0318 	add.w	r3, r7, #24
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 fbeb 	bl	800da44 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800d26e:	7e3b      	ldrb	r3, [r7, #24]
 800d270:	7e7a      	ldrb	r2, [r7, #25]
 800d272:	7eb9      	ldrb	r1, [r7, #26]
 800d274:	7ef8      	ldrb	r0, [r7, #27]
 800d276:	7f3c      	ldrb	r4, [r7, #28]
 800d278:	7f7d      	ldrb	r5, [r7, #29]
 800d27a:	7fbe      	ldrb	r6, [r7, #30]
 800d27c:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800d280:	f8cd c01c 	str.w	ip, [sp, #28]
 800d284:	9606      	str	r6, [sp, #24]
 800d286:	9505      	str	r5, [sp, #20]
 800d288:	9404      	str	r4, [sp, #16]
 800d28a:	9003      	str	r0, [sp, #12]
 800d28c:	9102      	str	r1, [sp, #8]
 800d28e:	9201      	str	r2, [sp, #4]
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	4b17      	ldr	r3, [pc, #92]	@ (800d2f0 <PrintIds+0xd4>)
 800d294:	2200      	movs	r2, #0
 800d296:	2100      	movs	r1, #0
 800d298:	2002      	movs	r0, #2
 800d29a:	f00f fd25 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800d29e:	f107 020c 	add.w	r2, r7, #12
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 fbfe 	bl	800daa8 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d2ac:	f107 030c 	add.w	r3, r7, #12
 800d2b0:	3303      	adds	r3, #3
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	f107 030c 	add.w	r3, r7, #12
 800d2ba:	3302      	adds	r3, #2
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	f107 030c 	add.w	r3, r7, #12
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f107 030c 	add.w	r3, r7, #12
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	9303      	str	r3, [sp, #12]
 800d2d2:	9002      	str	r0, [sp, #8]
 800d2d4:	9101      	str	r1, [sp, #4]
 800d2d6:	9200      	str	r2, [sp, #0]
 800d2d8:	4b06      	ldr	r3, [pc, #24]	@ (800d2f4 <PrintIds+0xd8>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	2100      	movs	r1, #0
 800d2de:	2002      	movs	r0, #2
 800d2e0:	f00f fd02 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800d2e4:	bf00      	nop
 800d2e6:	3724      	adds	r7, #36	@ 0x24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ec:	08020548 	.word	0x08020548
 800d2f0:	08020588 	.word	0x08020588
 800d2f4:	080205c8 	.word	0x080205c8

0800d2f8 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	6039      	str	r1, [r7, #0]
 800d302:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d304:	2300      	movs	r3, #0
 800d306:	73fb      	strb	r3, [r7, #15]
 800d308:	e01a      	b.n	800d340 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d30a:	4b12      	ldr	r3, [pc, #72]	@ (800d354 <GetKeyByID+0x5c>)
 800d30c:	6819      	ldr	r1, [r3, #0]
 800d30e:	7bfa      	ldrb	r2, [r7, #15]
 800d310:	4613      	mov	r3, r2
 800d312:	011b      	lsls	r3, r3, #4
 800d314:	4413      	add	r3, r2
 800d316:	440b      	add	r3, r1
 800d318:	3318      	adds	r3, #24
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	79fa      	ldrb	r2, [r7, #7]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d10b      	bne.n	800d33a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d322:	4b0c      	ldr	r3, [pc, #48]	@ (800d354 <GetKeyByID+0x5c>)
 800d324:	6819      	ldr	r1, [r3, #0]
 800d326:	7bfa      	ldrb	r2, [r7, #15]
 800d328:	4613      	mov	r3, r2
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	4413      	add	r3, r2
 800d32e:	3318      	adds	r3, #24
 800d330:	18ca      	adds	r2, r1, r3
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d336:	2300      	movs	r3, #0
 800d338:	e006      	b.n	800d348 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	3301      	adds	r3, #1
 800d33e:	73fb      	strb	r3, [r7, #15]
 800d340:	7bfb      	ldrb	r3, [r7, #15]
 800d342:	2b0a      	cmp	r3, #10
 800d344:	d9e1      	bls.n	800d30a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d346:	2303      	movs	r3, #3
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3714      	adds	r7, #20
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bc80      	pop	{r7}
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	200007c0 	.word	0x200007c0

0800d358 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800d358:	b590      	push	{r4, r7, lr}
 800d35a:	b0d1      	sub	sp, #324	@ 0x144
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800d362:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800d366:	6020      	str	r0, [r4, #0]
 800d368:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800d36c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d370:	6001      	str	r1, [r0, #0]
 800d372:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d376:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800d37a:	600a      	str	r2, [r1, #0]
 800d37c:	461a      	mov	r2, r3
 800d37e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d382:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d386:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800d388:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d38c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d003      	beq.n	800d39e <ComputeCmac+0x46>
 800d396:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d101      	bne.n	800d3a2 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d39e:	2302      	movs	r3, #2
 800d3a0:	e05d      	b.n	800d45e <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800d3a2:	f107 0314 	add.w	r3, r7, #20
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe fefe 	bl	800c1a8 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800d3ac:	f107 0210 	add.w	r2, r7, #16
 800d3b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d3b4:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	4611      	mov	r1, r2
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff ff9b 	bl	800d2f8 <GetKeyByID>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d3c8:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d144      	bne.n	800d45a <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800d3d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d3d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	f107 0314 	add.w	r3, r7, #20
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fe fef9 	bl	800c1da <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d3e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d3ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d009      	beq.n	800d40a <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800d3f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d3fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d3fe:	f107 0014 	add.w	r0, r7, #20
 800d402:	2210      	movs	r2, #16
 800d404:	6819      	ldr	r1, [r3, #0]
 800d406:	f7fe fef7 	bl	800c1f8 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d40a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d40e:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800d412:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d416:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d41a:	f107 0014 	add.w	r0, r7, #20
 800d41e:	6812      	ldr	r2, [r2, #0]
 800d420:	6819      	ldr	r1, [r3, #0]
 800d422:	f7fe fee9 	bl	800c1f8 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d426:	f107 0214 	add.w	r2, r7, #20
 800d42a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800d42e:	4611      	mov	r1, r2
 800d430:	4618      	mov	r0, r3
 800d432:	f7fe ffa3 	bl	800c37c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800d436:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800d43a:	461a      	mov	r2, r3
 800d43c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800d440:	021b      	lsls	r3, r3, #8
 800d442:	431a      	orrs	r2, r3
 800d444:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800d448:	041b      	lsls	r3, r3, #16
 800d44a:	431a      	orrs	r2, r3
 800d44c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d450:	061b      	lsls	r3, r3, #24
 800d452:	431a      	orrs	r2, r3
 800d454:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d458:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d45a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800d45e:	4618      	mov	r0, r3
 800d460:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d464:	46bd      	mov	sp, r7
 800d466:	bd90      	pop	{r4, r7, pc}

0800d468 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d476:	2302      	movs	r3, #2
 800d478:	e00a      	b.n	800d490 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800d47a:	4a07      	ldr	r2, [pc, #28]	@ (800d498 <SecureElementInit+0x30>)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800d480:	4b05      	ldr	r3, [pc, #20]	@ (800d498 <SecureElementInit+0x30>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	22d8      	movs	r2, #216	@ 0xd8
 800d486:	4905      	ldr	r1, [pc, #20]	@ (800d49c <SecureElementInit+0x34>)
 800d488:	4618      	mov	r0, r3
 800d48a:	f00b fb36 	bl	8018afa <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	200007c0 	.word	0x200007c0
 800d49c:	080211a4 	.word	0x080211a4

0800d4a0 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800d4ae:	f107 030c 	add.w	r3, r7, #12
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 fa96 	bl	800d9e4 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800d4b8:	f107 0308 	add.w	r3, r7, #8
 800d4bc:	4619      	mov	r1, r3
 800d4be:	2001      	movs	r0, #1
 800d4c0:	f000 faf2 	bl	800daa8 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d024      	beq.n	800d514 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	75bb      	strb	r3, [r7, #22]
 800d4d2:	e00c      	b.n	800d4ee <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800d4d4:	7dbb      	ldrb	r3, [r7, #22]
 800d4d6:	3318      	adds	r3, #24
 800d4d8:	443b      	add	r3, r7
 800d4da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d002      	beq.n	800d4e8 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	75fb      	strb	r3, [r7, #23]
                break;
 800d4e6:	e005      	b.n	800d4f4 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d4e8:	7dbb      	ldrb	r3, [r7, #22]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	75bb      	strb	r3, [r7, #22]
 800d4ee:	7dbb      	ldrb	r3, [r7, #22]
 800d4f0:	2b07      	cmp	r3, #7
 800d4f2:	d9ef      	bls.n	800d4d4 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800d4f4:	7dfb      	ldrb	r3, [r7, #23]
 800d4f6:	f083 0301 	eor.w	r3, r3, #1
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d009      	beq.n	800d514 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800d500:	f107 020c 	add.w	r2, r7, #12
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4610      	mov	r0, r2
 800d508:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800d50a:	f107 030c 	add.w	r3, r7, #12
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 fa50 	bl	800d9b4 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00c      	beq.n	800d534 <SecureElementInitMcuID+0x94>
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d109      	bne.n	800d534 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800d520:	f107 0208 	add.w	r2, r7, #8
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	4610      	mov	r0, r2
 800d528:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	4619      	mov	r1, r3
 800d52e:	2001      	movs	r0, #1
 800d530:	f000 faa0 	bl	800da74 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
	...

0800d540 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	4603      	mov	r3, r0
 800d548:	6039      	str	r1, [r7, #0]
 800d54a:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d54c:	2300      	movs	r3, #0
 800d54e:	73fb      	strb	r3, [r7, #15]
 800d550:	e01a      	b.n	800d588 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d552:	4b12      	ldr	r3, [pc, #72]	@ (800d59c <SecureElementGetKeyByID+0x5c>)
 800d554:	6819      	ldr	r1, [r3, #0]
 800d556:	7bfa      	ldrb	r2, [r7, #15]
 800d558:	4613      	mov	r3, r2
 800d55a:	011b      	lsls	r3, r3, #4
 800d55c:	4413      	add	r3, r2
 800d55e:	440b      	add	r3, r1
 800d560:	3318      	adds	r3, #24
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	79fa      	ldrb	r2, [r7, #7]
 800d566:	429a      	cmp	r2, r3
 800d568:	d10b      	bne.n	800d582 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d56a:	4b0c      	ldr	r3, [pc, #48]	@ (800d59c <SecureElementGetKeyByID+0x5c>)
 800d56c:	6819      	ldr	r1, [r3, #0]
 800d56e:	7bfa      	ldrb	r2, [r7, #15]
 800d570:	4613      	mov	r3, r2
 800d572:	011b      	lsls	r3, r3, #4
 800d574:	4413      	add	r3, r2
 800d576:	3318      	adds	r3, #24
 800d578:	18ca      	adds	r2, r1, r3
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d57e:	2300      	movs	r3, #0
 800d580:	e006      	b.n	800d590 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d582:	7bfb      	ldrb	r3, [r7, #15]
 800d584:	3301      	adds	r3, #1
 800d586:	73fb      	strb	r3, [r7, #15]
 800d588:	7bfb      	ldrb	r3, [r7, #15]
 800d58a:	2b0a      	cmp	r3, #10
 800d58c:	d9e1      	bls.n	800d552 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d58e:	2303      	movs	r3, #3
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	bc80      	pop	{r7}
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	200007c0 	.word	0x200007c0

0800d5a0 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	f7ff fdab 	bl	800d100 <PrintKey>
    PrintKey( NWK_KEY );
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	f7ff fda8 	bl	800d100 <PrintKey>
    PrintKey( APP_S_KEY );
 800d5b0:	2009      	movs	r0, #9
 800d5b2:	f7ff fda5 	bl	800d100 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d5b6:	2008      	movs	r0, #8
 800d5b8:	f7ff fda2 	bl	800d100 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800d5bc:	2000      	movs	r0, #0
 800d5be:	f7ff fe2d 	bl	800d21c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800d5d2:	200b      	movs	r0, #11
 800d5d4:	f7ff fd94 	bl	800d100 <PrintKey>
    PrintKey( MC_KE_KEY );
 800d5d8:	200c      	movs	r0, #12
 800d5da:	f7ff fd91 	bl	800d100 <PrintKey>
    PrintKey( APP_S_KEY );
 800d5de:	2009      	movs	r0, #9
 800d5e0:	f7ff fd8e 	bl	800d100 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d5e4:	2008      	movs	r0, #8
 800d5e6:	f7ff fd8b 	bl	800d100 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800d5ea:	200a      	movs	r0, #10
 800d5ec:	f7ff fd88 	bl	800d100 <PrintKey>
    PrintIds( mode );
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff fe12 	bl	800d21c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
 800d60a:	4603      	mov	r3, r0
 800d60c:	6039      	str	r1, [r7, #0]
 800d60e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d616:	2302      	movs	r3, #2
 800d618:	e04b      	b.n	800d6b2 <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d61a:	2300      	movs	r3, #0
 800d61c:	77fb      	strb	r3, [r7, #31]
 800d61e:	e044      	b.n	800d6aa <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d620:	4b26      	ldr	r3, [pc, #152]	@ (800d6bc <SecureElementSetKey+0xb8>)
 800d622:	6819      	ldr	r1, [r3, #0]
 800d624:	7ffa      	ldrb	r2, [r7, #31]
 800d626:	4613      	mov	r3, r2
 800d628:	011b      	lsls	r3, r3, #4
 800d62a:	4413      	add	r3, r2
 800d62c:	440b      	add	r3, r1
 800d62e:	3318      	adds	r3, #24
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	79fa      	ldrb	r2, [r7, #7]
 800d634:	429a      	cmp	r2, r3
 800d636:	d135      	bne.n	800d6a4 <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800d638:	79fb      	ldrb	r3, [r7, #7]
 800d63a:	2b0d      	cmp	r3, #13
 800d63c:	d122      	bne.n	800d684 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d63e:	2306      	movs	r3, #6
 800d640:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800d642:	f107 030c 	add.w	r3, r7, #12
 800d646:	2200      	movs	r2, #0
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	605a      	str	r2, [r3, #4]
 800d64c:	609a      	str	r2, [r3, #8]
 800d64e:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800d650:	f107 030c 	add.w	r3, r7, #12
 800d654:	220c      	movs	r2, #12
 800d656:	2110      	movs	r1, #16
 800d658:	6838      	ldr	r0, [r7, #0]
 800d65a:	f000 f877 	bl	800d74c <SecureElementAesEncrypt>
 800d65e:	4603      	mov	r3, r0
 800d660:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d662:	4b16      	ldr	r3, [pc, #88]	@ (800d6bc <SecureElementSetKey+0xb8>)
 800d664:	6819      	ldr	r1, [r3, #0]
 800d666:	7ffa      	ldrb	r2, [r7, #31]
 800d668:	4613      	mov	r3, r2
 800d66a:	011b      	lsls	r3, r3, #4
 800d66c:	4413      	add	r3, r2
 800d66e:	3318      	adds	r3, #24
 800d670:	440b      	add	r3, r1
 800d672:	3301      	adds	r3, #1
 800d674:	f107 010c 	add.w	r1, r7, #12
 800d678:	2210      	movs	r2, #16
 800d67a:	4618      	mov	r0, r3
 800d67c:	f00b fa3d 	bl	8018afa <memcpy1>
                return retval;
 800d680:	7fbb      	ldrb	r3, [r7, #30]
 800d682:	e016      	b.n	800d6b2 <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d684:	4b0d      	ldr	r3, [pc, #52]	@ (800d6bc <SecureElementSetKey+0xb8>)
 800d686:	6819      	ldr	r1, [r3, #0]
 800d688:	7ffa      	ldrb	r2, [r7, #31]
 800d68a:	4613      	mov	r3, r2
 800d68c:	011b      	lsls	r3, r3, #4
 800d68e:	4413      	add	r3, r2
 800d690:	3318      	adds	r3, #24
 800d692:	440b      	add	r3, r1
 800d694:	3301      	adds	r3, #1
 800d696:	2210      	movs	r2, #16
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f00b fa2d 	bl	8018afa <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	e006      	b.n	800d6b2 <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d6a4:	7ffb      	ldrb	r3, [r7, #31]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	77fb      	strb	r3, [r7, #31]
 800d6aa:	7ffb      	ldrb	r3, [r7, #31]
 800d6ac:	2b0a      	cmp	r3, #10
 800d6ae:	d9b7      	bls.n	800d620 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d6b0:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3720      	adds	r7, #32
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	200007c0 	.word	0x200007c0

0800d6c0 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af02      	add	r7, sp, #8
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
 800d6cc:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800d6ce:	78fb      	ldrb	r3, [r7, #3]
 800d6d0:	2b0b      	cmp	r3, #11
 800d6d2:	d901      	bls.n	800d6d8 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	e009      	b.n	800d6ec <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d6d8:	78fa      	ldrb	r2, [r7, #3]
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	68b9      	ldr	r1, [r7, #8]
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f7ff fe37 	bl	800d358 <ComputeCmac>
 800d6ea:	4603      	mov	r3, r0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af02      	add	r7, sp, #8
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
 800d700:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d101      	bne.n	800d70c <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d708:	2302      	movs	r3, #2
 800d70a:	e01b      	b.n	800d744 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d70c:	2306      	movs	r3, #6
 800d70e:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800d710:	2300      	movs	r3, #0
 800d712:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	f107 0310 	add.w	r3, r7, #16
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4613      	mov	r3, r2
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	68f9      	ldr	r1, [r7, #12]
 800d722:	2000      	movs	r0, #0
 800d724:	f7ff fe18 	bl	800d358 <ComputeCmac>
 800d728:	4603      	mov	r3, r0
 800d72a:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d72c:	7dfb      	ldrb	r3, [r7, #23]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d001      	beq.n	800d736 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800d732:	7dfb      	ldrb	r3, [r7, #23]
 800d734:	e006      	b.n	800d744 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d001      	beq.n	800d742 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d73e:	2301      	movs	r3, #1
 800d740:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d742:	7dfb      	ldrb	r3, [r7, #23]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b0c2      	sub	sp, #264	@ 0x108
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d758:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800d75c:	6001      	str	r1, [r0, #0]
 800d75e:	4611      	mov	r1, r2
 800d760:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d764:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d768:	6013      	str	r3, [r2, #0]
 800d76a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d76e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d772:	460a      	mov	r2, r1
 800d774:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d006      	beq.n	800d78a <SecureElementAesEncrypt+0x3e>
 800d77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d101      	bne.n	800d78e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d78a:	2302      	movs	r3, #2
 800d78c:	e059      	b.n	800d842 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800d78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d792:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f003 030f 	and.w	r3, r3, #15
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d7a0:	2305      	movs	r3, #5
 800d7a2:	e04e      	b.n	800d842 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d7a4:	f107 0314 	add.w	r3, r7, #20
 800d7a8:	22f0      	movs	r2, #240	@ 0xf0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f00b f9df 	bl	8018b70 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d7b2:	f107 0210 	add.w	r2, r7, #16
 800d7b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ba:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7ff fd98 	bl	800d2f8 <GetKeyByID>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d7ce:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d133      	bne.n	800d83e <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	f107 0214 	add.w	r2, r7, #20
 800d7de:	2110      	movs	r1, #16
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7ff fb65 	bl	800ceb0 <lorawan_aes_set_key>

        uint8_t block = 0;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800d7ec:	e020      	b.n	800d830 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800d7ee:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	18d0      	adds	r0, r2, r3
 800d7f6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d7fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d7fe:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d802:	6812      	ldr	r2, [r2, #0]
 800d804:	4413      	add	r3, r2
 800d806:	f107 0214 	add.w	r2, r7, #20
 800d80a:	4619      	mov	r1, r3
 800d80c:	f7ff fc2e 	bl	800d06c <lorawan_aes_encrypt>
            block = block + 16;
 800d810:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d814:	3310      	adds	r3, #16
 800d816:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800d81a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d81e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d822:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d826:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800d82a:	6812      	ldr	r2, [r2, #0]
 800d82c:	3a10      	subs	r2, #16
 800d82e:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800d830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d834:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1d7      	bne.n	800d7ee <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d83e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800d842:	4618      	mov	r0, r3
 800d844:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b088      	sub	sp, #32
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	460b      	mov	r3, r1
 800d856:	70fb      	strb	r3, [r7, #3]
 800d858:	4613      	mov	r3, r2
 800d85a:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d862:	2302      	movs	r3, #2
 800d864:	e02d      	b.n	800d8c2 <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d866:	2306      	movs	r3, #6
 800d868:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800d86a:	78bb      	ldrb	r3, [r7, #2]
 800d86c:	2b0c      	cmp	r3, #12
 800d86e:	d104      	bne.n	800d87a <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d870:	78fb      	ldrb	r3, [r7, #3]
 800d872:	2b0b      	cmp	r3, #11
 800d874:	d001      	beq.n	800d87a <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d876:	2303      	movs	r3, #3
 800d878:	e023      	b.n	800d8c2 <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800d87a:	f107 030c 	add.w	r3, r7, #12
 800d87e:	2200      	movs	r2, #0
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	605a      	str	r2, [r3, #4]
 800d884:	609a      	str	r2, [r3, #8]
 800d886:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800d888:	f107 030c 	add.w	r3, r7, #12
 800d88c:	78fa      	ldrb	r2, [r7, #3]
 800d88e:	2110      	movs	r1, #16
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff ff5b 	bl	800d74c <SecureElementAesEncrypt>
 800d896:	4603      	mov	r3, r0
 800d898:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d89a:	7ffb      	ldrb	r3, [r7, #31]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d001      	beq.n	800d8a4 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800d8a0:	7ffb      	ldrb	r3, [r7, #31]
 800d8a2:	e00e      	b.n	800d8c2 <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800d8a4:	f107 020c 	add.w	r2, r7, #12
 800d8a8:	78bb      	ldrb	r3, [r7, #2]
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff fea9 	bl	800d604 <SecureElementSetKey>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d8b6:	7ffb      	ldrb	r3, [r7, #31]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d001      	beq.n	800d8c0 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800d8bc:	7ffb      	ldrb	r3, [r7, #31]
 800d8be:	e000      	b.n	800d8c2 <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d8c0:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3720      	adds	r7, #32
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b086      	sub	sp, #24
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607b      	str	r3, [r7, #4]
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	73fb      	strb	r3, [r7, #15]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d005      	beq.n	800d8ee <SecureElementProcessJoinAccept+0x24>
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <SecureElementProcessJoinAccept+0x24>
 800d8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d101      	bne.n	800d8f2 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d8ee:	2302      	movs	r3, #2
 800d8f0:	e05c      	b.n	800d9ac <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d8f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8f6:	2b21      	cmp	r3, #33	@ 0x21
 800d8f8:	d901      	bls.n	800d8fe <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d8fa:	2305      	movs	r3, #5
 800d8fc:	e056      	b.n	800d9ac <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d8fe:	2301      	movs	r3, #1
 800d900:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d902:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d906:	b29b      	uxth	r3, r3
 800d908:	461a      	mov	r2, r3
 800d90a:	6879      	ldr	r1, [r7, #4]
 800d90c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d90e:	f00b f8f4 	bl	8018afa <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	1c58      	adds	r0, r3, #1
 800d916:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	4619      	mov	r1, r3
 800d91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d920:	3301      	adds	r3, #1
 800d922:	7dfa      	ldrb	r2, [r7, #23]
 800d924:	f7ff ff12 	bl	800d74c <SecureElementAesEncrypt>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d92e:	2307      	movs	r3, #7
 800d930:	e03c      	b.n	800d9ac <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d934:	330b      	adds	r3, #11
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	09db      	lsrs	r3, r3, #7
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93e:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800d940:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d944:	3b04      	subs	r3, #4
 800d946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d948:	4413      	add	r3, r2
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	4619      	mov	r1, r3
 800d94e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d952:	3b03      	subs	r3, #3
 800d954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d956:	4413      	add	r3, r2
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	021b      	lsls	r3, r3, #8
 800d95c:	ea41 0203 	orr.w	r2, r1, r3
 800d960:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d964:	3b02      	subs	r3, #2
 800d966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d968:	440b      	add	r3, r1
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	041b      	lsls	r3, r3, #16
 800d96e:	431a      	orrs	r2, r3
 800d970:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d974:	3b01      	subs	r3, #1
 800d976:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d978:	440b      	add	r3, r1
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	061b      	lsls	r3, r3, #24
 800d97e:	4313      	orrs	r3, r2
 800d980:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800d982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d10d      	bne.n	800d9a6 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d98a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d98e:	3b04      	subs	r3, #4
 800d990:	4619      	mov	r1, r3
 800d992:	2301      	movs	r3, #1
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d998:	f7ff feac 	bl	800d6f4 <SecureElementVerifyAesCmac>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d003      	beq.n	800d9aa <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e002      	b.n	800d9ac <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d9a6:	2304      	movs	r3, #4
 800d9a8:	e000      	b.n	800d9ac <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d101      	bne.n	800d9c6 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	e007      	b.n	800d9d6 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800d9c6:	4b06      	ldr	r3, [pc, #24]	@ (800d9e0 <SecureElementSetDevEui+0x2c>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2208      	movs	r2, #8
 800d9cc:	6879      	ldr	r1, [r7, #4]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f00b f893 	bl	8018afa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d9d4:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3708      	adds	r7, #8
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	200007c0 	.word	0x200007c0

0800d9e4 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d101      	bne.n	800d9f6 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9f2:	2302      	movs	r3, #2
 800d9f4:	e007      	b.n	800da06 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800d9f6:	4b06      	ldr	r3, [pc, #24]	@ (800da10 <SecureElementGetDevEui+0x2c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2208      	movs	r2, #8
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f00b f87b 	bl	8018afa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800da04:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800da06:	4618      	mov	r0, r3
 800da08:	3708      	adds	r7, #8
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	200007c0 	.word	0x200007c0

0800da14 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800da22:	2302      	movs	r3, #2
 800da24:	e008      	b.n	800da38 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800da26:	4b06      	ldr	r3, [pc, #24]	@ (800da40 <SecureElementSetJoinEui+0x2c>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	3308      	adds	r3, #8
 800da2c:	2208      	movs	r2, #8
 800da2e:	6879      	ldr	r1, [r7, #4]
 800da30:	4618      	mov	r0, r3
 800da32:	f00b f862 	bl	8018afa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800da36:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3708      	adds	r7, #8
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	200007c0 	.word	0x200007c0

0800da44 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d101      	bne.n	800da56 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800da52:	2302      	movs	r3, #2
 800da54:	e008      	b.n	800da68 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800da56:	4b06      	ldr	r3, [pc, #24]	@ (800da70 <SecureElementGetJoinEui+0x2c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3308      	adds	r3, #8
 800da5c:	2208      	movs	r2, #8
 800da5e:	4619      	mov	r1, r3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f00b f84a 	bl	8018afa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800da66:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	200007c0 	.word	0x200007c0

0800da74 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	6039      	str	r1, [r7, #0]
 800da7e:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800da80:	79fb      	ldrb	r3, [r7, #7]
 800da82:	2b02      	cmp	r3, #2
 800da84:	d104      	bne.n	800da90 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800da86:	4b07      	ldr	r3, [pc, #28]	@ (800daa4 <SecureElementSetDevAddr+0x30>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	683a      	ldr	r2, [r7, #0]
 800da8c:	611a      	str	r2, [r3, #16]
 800da8e:	e003      	b.n	800da98 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800da90:	4b04      	ldr	r3, [pc, #16]	@ (800daa4 <SecureElementSetDevAddr+0x30>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800da98:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	370c      	adds	r7, #12
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bc80      	pop	{r7}
 800daa2:	4770      	bx	lr
 800daa4:	200007c0 	.word	0x200007c0

0800daa8 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	4603      	mov	r3, r0
 800dab0:	6039      	str	r1, [r7, #0]
 800dab2:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d101      	bne.n	800dabe <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800daba:	2302      	movs	r3, #2
 800dabc:	e00e      	b.n	800dadc <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800dabe:	79fb      	ldrb	r3, [r7, #7]
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d105      	bne.n	800dad0 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800dac4:	4b08      	ldr	r3, [pc, #32]	@ (800dae8 <SecureElementGetDevAddr+0x40>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	691a      	ldr	r2, [r3, #16]
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	601a      	str	r2, [r3, #0]
 800dace:	e004      	b.n	800dada <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800dad0:	4b05      	ldr	r3, [pc, #20]	@ (800dae8 <SecureElementGetDevAddr+0x40>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	695a      	ldr	r2, [r3, #20]
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800dada:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800dadc:	4618      	mov	r0, r3
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bc80      	pop	{r7}
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	200007c0 	.word	0x200007c0

0800daec <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800daf6:	4a29      	ldr	r2, [pc, #164]	@ (800db9c <LmHandlerInit+0xb0>)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dafc:	4b28      	ldr	r3, [pc, #160]	@ (800dba0 <LmHandlerInit+0xb4>)
 800dafe:	4a29      	ldr	r2, [pc, #164]	@ (800dba4 <LmHandlerInit+0xb8>)
 800db00:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800db02:	4b27      	ldr	r3, [pc, #156]	@ (800dba0 <LmHandlerInit+0xb4>)
 800db04:	4a28      	ldr	r2, [pc, #160]	@ (800dba8 <LmHandlerInit+0xbc>)
 800db06:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800db08:	4b25      	ldr	r3, [pc, #148]	@ (800dba0 <LmHandlerInit+0xb4>)
 800db0a:	4a28      	ldr	r2, [pc, #160]	@ (800dbac <LmHandlerInit+0xc0>)
 800db0c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800db0e:	4b24      	ldr	r3, [pc, #144]	@ (800dba0 <LmHandlerInit+0xb4>)
 800db10:	4a27      	ldr	r2, [pc, #156]	@ (800dbb0 <LmHandlerInit+0xc4>)
 800db12:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800db14:	4b21      	ldr	r3, [pc, #132]	@ (800db9c <LmHandlerInit+0xb0>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a26      	ldr	r2, [pc, #152]	@ (800dbb4 <LmHandlerInit+0xc8>)
 800db1c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800db1e:	4b1f      	ldr	r3, [pc, #124]	@ (800db9c <LmHandlerInit+0xb0>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	4a23      	ldr	r2, [pc, #140]	@ (800dbb4 <LmHandlerInit+0xc8>)
 800db26:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800db28:	4b1c      	ldr	r3, [pc, #112]	@ (800db9c <LmHandlerInit+0xb0>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	4a21      	ldr	r2, [pc, #132]	@ (800dbb4 <LmHandlerInit+0xc8>)
 800db30:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800db32:	4b1a      	ldr	r3, [pc, #104]	@ (800db9c <LmHandlerInit+0xb0>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	4a1e      	ldr	r2, [pc, #120]	@ (800dbb4 <LmHandlerInit+0xc8>)
 800db3a:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800db3c:	4b1d      	ldr	r3, [pc, #116]	@ (800dbb4 <LmHandlerInit+0xc8>)
 800db3e:	4a1e      	ldr	r2, [pc, #120]	@ (800dbb8 <LmHandlerInit+0xcc>)
 800db40:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800db42:	4b16      	ldr	r3, [pc, #88]	@ (800db9c <LmHandlerInit+0xb0>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	4a1a      	ldr	r2, [pc, #104]	@ (800dbb4 <LmHandlerInit+0xc8>)
 800db4a:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	4a1b      	ldr	r2, [pc, #108]	@ (800dbbc <LmHandlerInit+0xd0>)
 800db50:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800db52:	4b12      	ldr	r3, [pc, #72]	@ (800db9c <LmHandlerInit+0xb0>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db58:	4a18      	ldr	r2, [pc, #96]	@ (800dbbc <LmHandlerInit+0xd0>)
 800db5a:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800db5c:	4b17      	ldr	r3, [pc, #92]	@ (800dbbc <LmHandlerInit+0xd0>)
 800db5e:	4a18      	ldr	r2, [pc, #96]	@ (800dbc0 <LmHandlerInit+0xd4>)
 800db60:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800db62:	4b16      	ldr	r3, [pc, #88]	@ (800dbbc <LmHandlerInit+0xd0>)
 800db64:	4a17      	ldr	r2, [pc, #92]	@ (800dbc4 <LmHandlerInit+0xd8>)
 800db66:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800db68:	4914      	ldr	r1, [pc, #80]	@ (800dbbc <LmHandlerInit+0xd0>)
 800db6a:	2000      	movs	r0, #0
 800db6c:	f000 fdc0 	bl	800e6f0 <LmHandlerPackageRegister>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d002      	beq.n	800db7c <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800db76:	f04f 33ff 	mov.w	r3, #4294967295
 800db7a:	e00a      	b.n	800db92 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800db7c:	463b      	mov	r3, r7
 800db7e:	4618      	mov	r0, r3
 800db80:	f001 fd36 	bl	800f5f0 <LmhpPackagesRegistrationInit>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800db8a:	f04f 33ff 	mov.w	r3, #4294967295
 800db8e:	e000      	b.n	800db92 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	20000818 	.word	0x20000818
 800dba0:	2000081c 	.word	0x2000081c
 800dba4:	0800e3c9 	.word	0x0800e3c9
 800dba8:	0800e43d 	.word	0x0800e43d
 800dbac:	0800e50d 	.word	0x0800e50d
 800dbb0:	0800e65d 	.word	0x0800e65d
 800dbb4:	2000082c 	.word	0x2000082c
 800dbb8:	0800eb9d 	.word	0x0800eb9d
 800dbbc:	200007dc 	.word	0x200007dc
 800dbc0:	0800e9b1 	.word	0x0800e9b1
 800dbc4:	0800e9e9 	.word	0x0800e9e9

0800dbc8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b092      	sub	sp, #72	@ 0x48
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800dbd0:	2218      	movs	r2, #24
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	488a      	ldr	r0, [pc, #552]	@ (800de00 <LmHandlerConfigure+0x238>)
 800dbd6:	f00a ff90 	bl	8018afa <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800dbda:	4b8a      	ldr	r3, [pc, #552]	@ (800de04 <LmHandlerConfigure+0x23c>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800dbe0:	f7fe faa0 	bl	800c124 <LoraInfo_GetPtr>
 800dbe4:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800dbe6:	4b86      	ldr	r3, [pc, #536]	@ (800de00 <LmHandlerConfigure+0x238>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	461a      	mov	r2, r3
 800dbec:	2301      	movs	r3, #1
 800dbee:	4093      	lsls	r3, r2
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d107      	bne.n	800dc0c <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800dbfc:	4b82      	ldr	r3, [pc, #520]	@ (800de08 <LmHandlerConfigure+0x240>)
 800dbfe:	2201      	movs	r2, #1
 800dc00:	2100      	movs	r1, #0
 800dc02:	2000      	movs	r0, #0
 800dc04:	f00f f870 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800dc08:	bf00      	nop
 800dc0a:	e7fd      	b.n	800dc08 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800dc0c:	4b7c      	ldr	r3, [pc, #496]	@ (800de00 <LmHandlerConfigure+0x238>)
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	461a      	mov	r2, r3
 800dc12:	497e      	ldr	r1, [pc, #504]	@ (800de0c <LmHandlerConfigure+0x244>)
 800dc14:	487e      	ldr	r0, [pc, #504]	@ (800de10 <LmHandlerConfigure+0x248>)
 800dc16:	f005 f80d 	bl	8012c34 <LoRaMacInitialization>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc20:	f04f 33ff 	mov.w	r3, #4294967295
 800dc24:	e0e8      	b.n	800ddf8 <LmHandlerConfigure+0x230>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800dc26:	2327      	movs	r3, #39	@ 0x27
 800dc28:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dc2a:	f107 0318 	add.w	r3, r7, #24
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f005 fd8c 	bl	801374c <LoRaMacMibSetRequestConfirm>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d103      	bne.n	800dc42 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800dc3a:	4b76      	ldr	r3, [pc, #472]	@ (800de14 <LmHandlerConfigure+0x24c>)
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	701a      	strb	r2, [r3, #0]
 800dc40:	e02a      	b.n	800dc98 <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800dc42:	2328      	movs	r3, #40	@ 0x28
 800dc44:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800dc46:	4b74      	ldr	r3, [pc, #464]	@ (800de18 <LmHandlerConfigure+0x250>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	691b      	ldr	r3, [r3, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00c      	beq.n	800dc6a <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dc50:	f107 0318 	add.w	r3, r7, #24
 800dc54:	4618      	mov	r0, r3
 800dc56:	f005 fba1 	bl	801339c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800dc5a:	4b6f      	ldr	r3, [pc, #444]	@ (800de18 <LmHandlerConfigure+0x250>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	69fa      	ldr	r2, [r7, #28]
 800dc62:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800dc66:	4610      	mov	r0, r2
 800dc68:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800dc6a:	2327      	movs	r3, #39	@ 0x27
 800dc6c:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dc6e:	f107 0318 	add.w	r3, r7, #24
 800dc72:	4618      	mov	r0, r3
 800dc74:	f005 fd6a 	bl	801374c <LoRaMacMibSetRequestConfirm>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10c      	bne.n	800dc98 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dc82:	f107 0318 	add.w	r3, r7, #24
 800dc86:	4618      	mov	r0, r3
 800dc88:	f005 fb88 	bl	801339c <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dc8c:	7f3b      	ldrb	r3, [r7, #28]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d002      	beq.n	800dc98 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800dc92:	4b60      	ldr	r3, [pc, #384]	@ (800de14 <LmHandlerConfigure+0x24c>)
 800dc94:	2201      	movs	r2, #1
 800dc96:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800dc98:	4b5e      	ldr	r3, [pc, #376]	@ (800de14 <LmHandlerConfigure+0x24c>)
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d02e      	beq.n	800dcfe <LmHandlerConfigure+0x136>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800dca0:	4b5d      	ldr	r3, [pc, #372]	@ (800de18 <LmHandlerConfigure+0x250>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	69db      	ldr	r3, [r3, #28]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800dcaa:	4b5b      	ldr	r3, [pc, #364]	@ (800de18 <LmHandlerConfigure+0x250>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	69db      	ldr	r3, [r3, #28]
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	4798      	blx	r3
        }

        //BZ #156695
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 800dcb4:	f000 f98e 	bl	800dfd4 <LmHandlerJoinStatus>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d106      	bne.n	800dccc <LmHandlerConfigure+0x104>
 800dcbe:	f002 fc99 	bl	80105f4 <LoRaMacIsStopped>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <LmHandlerConfigure+0x104>
        { 
            LoRaMacStart();
 800dcc8:	f005 fa6a 	bl	80131a0 <LoRaMacStart>
        }

        mibReq.Type = MIB_NVM_CTXS;
 800dccc:	2327      	movs	r3, #39	@ 0x27
 800dcce:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800dcd0:	f107 0318 	add.w	r3, r7, #24
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f005 fb61 	bl	801339c <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800dcde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dce0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800dce4:	4b46      	ldr	r3, [pc, #280]	@ (800de00 <LmHandlerConfigure+0x238>)
 800dce6:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800dce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcea:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800dcee:	4b44      	ldr	r3, [pc, #272]	@ (800de00 <LmHandlerConfigure+0x238>)
 800dcf0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800dcf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcf4:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800dcf8:	4b41      	ldr	r3, [pc, #260]	@ (800de00 <LmHandlerConfigure+0x238>)
 800dcfa:	709a      	strb	r2, [r3, #2]
 800dcfc:	e008      	b.n	800dd10 <LmHandlerConfigure+0x148>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800dcfe:	2305      	movs	r3, #5
 800dd00:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800dd02:	2300      	movs	r3, #0
 800dd04:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dd06:	f107 0318 	add.w	r3, r7, #24
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f005 fd1e 	bl	801374c <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800dd10:	4b3e      	ldr	r3, [pc, #248]	@ (800de0c <LmHandlerConfigure+0x244>)
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	4a3d      	ldr	r2, [pc, #244]	@ (800de0c <LmHandlerConfigure+0x244>)
 800dd16:	68d2      	ldr	r2, [r2, #12]
 800dd18:	4611      	mov	r1, r2
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7ff fbc0 	bl	800d4a0 <SecureElementInitMcuID>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d002      	beq.n	800dd2c <LmHandlerConfigure+0x164>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd26:	f04f 33ff 	mov.w	r3, #4294967295
 800dd2a:	e065      	b.n	800ddf8 <LmHandlerConfigure+0x230>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800dd2c:	2306      	movs	r3, #6
 800dd2e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dd30:	f107 0318 	add.w	r3, r7, #24
 800dd34:	4618      	mov	r0, r3
 800dd36:	f005 fb31 	bl	801339c <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	4a37      	ldr	r2, [pc, #220]	@ (800de1c <LmHandlerConfigure+0x254>)
 800dd3e:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dd40:	f107 0318 	add.w	r3, r7, #24
 800dd44:	4618      	mov	r0, r3
 800dd46:	f005 fd01 	bl	801374c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800dd4a:	2302      	movs	r3, #2
 800dd4c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800dd4e:	4b33      	ldr	r3, [pc, #204]	@ (800de1c <LmHandlerConfigure+0x254>)
 800dd50:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dd52:	f107 0318 	add.w	r3, r7, #24
 800dd56:	4618      	mov	r0, r3
 800dd58:	f005 fb20 	bl	801339c <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800dd5c:	2303      	movs	r3, #3
 800dd5e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800dd60:	4b2f      	ldr	r3, [pc, #188]	@ (800de20 <LmHandlerConfigure+0x258>)
 800dd62:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dd64:	f107 0318 	add.w	r3, r7, #24
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f005 fb17 	bl	801339c <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800dd6e:	f7ff fc17 	bl	800d5a0 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800dd72:	230f      	movs	r3, #15
 800dd74:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800dd76:	2301      	movs	r3, #1
 800dd78:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dd7a:	f107 0318 	add.w	r3, r7, #24
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f005 fce4 	bl	801374c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800dd84:	2310      	movs	r3, #16
 800dd86:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dd8c:	f107 0318 	add.w	r3, r7, #24
 800dd90:	4618      	mov	r0, r3
 800dd92:	f005 fcdb 	bl	801374c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800dd96:	2304      	movs	r3, #4
 800dd98:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800dd9a:	4b19      	ldr	r3, [pc, #100]	@ (800de00 <LmHandlerConfigure+0x238>)
 800dd9c:	789b      	ldrb	r3, [r3, #2]
 800dd9e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dda0:	f107 0318 	add.w	r3, r7, #24
 800dda4:	4618      	mov	r0, r3
 800dda6:	f005 fcd1 	bl	801374c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800ddaa:	233a      	movs	r3, #58	@ 0x3a
 800ddac:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800ddae:	4b14      	ldr	r3, [pc, #80]	@ (800de00 <LmHandlerConfigure+0x238>)
 800ddb0:	695b      	ldr	r3, [r3, #20]
 800ddb2:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ddb4:	f107 0318 	add.w	r3, r7, #24
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f005 fcc7 	bl	801374c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ddbe:	230f      	movs	r3, #15
 800ddc0:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800ddc2:	4b0f      	ldr	r3, [pc, #60]	@ (800de00 <LmHandlerConfigure+0x238>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	f107 0210 	add.w	r2, r7, #16
 800ddca:	4611      	mov	r1, r2
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f008 fc69 	bl	80166a4 <RegionGetPhyParam>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	bf14      	ite	ne
 800dddc:	2301      	movne	r3, #1
 800ddde:	2300      	moveq	r3, #0
 800dde0:	b2da      	uxtb	r2, r3
 800dde2:	4b07      	ldr	r3, [pc, #28]	@ (800de00 <LmHandlerConfigure+0x238>)
 800dde4:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800dde6:	2014      	movs	r0, #20
 800dde8:	f000 fad6 	bl	800e398 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800ddec:	4b04      	ldr	r3, [pc, #16]	@ (800de00 <LmHandlerConfigure+0x238>)
 800ddee:	79db      	ldrb	r3, [r3, #7]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f006 fb89 	bl	8014508 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3748      	adds	r7, #72	@ 0x48
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	20000800 	.word	0x20000800
 800de04:	20000848 	.word	0x20000848
 800de08:	080205f4 	.word	0x080205f4
 800de0c:	2000082c 	.word	0x2000082c
 800de10:	2000081c 	.word	0x2000081c
 800de14:	2000093e 	.word	0x2000093e
 800de18:	20000818 	.word	0x20000818
 800de1c:	200007c4 	.word	0x200007c4
 800de20:	200007cc 	.word	0x200007cc

0800de24 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800de2a:	f002 fe61 	bl	8010af0 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800de2e:	f000 fd8b 	bl	800e948 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800de32:	f000 fd5f 	bl	800e8f4 <LmHandlerPackageIsTxPending>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d117      	bne.n	800de6c <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800de3c:	4b0d      	ldr	r3, [pc, #52]	@ (800de74 <LmHandlerProcess+0x50>)
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d014      	beq.n	800de6e <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800de44:	2300      	movs	r3, #0
 800de46:	703b      	strb	r3, [r7, #0]
 800de48:	2300      	movs	r3, #0
 800de4a:	707b      	strb	r3, [r7, #1]
 800de4c:	2300      	movs	r3, #0
 800de4e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800de50:	4b09      	ldr	r3, [pc, #36]	@ (800de78 <LmHandlerProcess+0x54>)
 800de52:	78d9      	ldrb	r1, [r3, #3]
 800de54:	463b      	mov	r3, r7
 800de56:	2200      	movs	r2, #0
 800de58:	4618      	mov	r0, r3
 800de5a:	f000 f8d7 	bl	800e00c <LmHandlerSend>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d104      	bne.n	800de6e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800de64:	4b03      	ldr	r3, [pc, #12]	@ (800de74 <LmHandlerProcess+0x50>)
 800de66:	2200      	movs	r2, #0
 800de68:	701a      	strb	r2, [r3, #0]
 800de6a:	e000      	b.n	800de6e <LmHandlerProcess+0x4a>
        return;
 800de6c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	20000848 	.word	0x20000848
 800de78:	20000800 	.word	0x20000800

0800de7c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800de7c:	b480      	push	{r7}
 800de7e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800de80:	4b02      	ldr	r3, [pc, #8]	@ (800de8c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800de82:	681b      	ldr	r3, [r3, #0]
}
 800de84:	4618      	mov	r0, r3
 800de86:	46bd      	mov	sp, r7
 800de88:	bc80      	pop	{r7}
 800de8a:	4770      	bx	lr
 800de8c:	20000844 	.word	0x20000844

0800de90 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b092      	sub	sp, #72	@ 0x48
 800de94:	af00      	add	r7, sp, #0
 800de96:	4603      	mov	r3, r0
 800de98:	460a      	mov	r2, r1
 800de9a:	71fb      	strb	r3, [r7, #7]
 800de9c:	4613      	mov	r3, r2
 800de9e:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800dea0:	2301      	movs	r3, #1
 800dea2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800dea6:	4b46      	ldr	r3, [pc, #280]	@ (800dfc0 <LmHandlerJoin+0x130>)
 800dea8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800deac:	b2db      	uxtb	r3, r3
 800deae:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800deb2:	4b43      	ldr	r3, [pc, #268]	@ (800dfc0 <LmHandlerJoin+0x130>)
 800deb4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800deb8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800debc:	79fb      	ldrb	r3, [r7, #7]
 800debe:	2b02      	cmp	r3, #2
 800dec0:	d10b      	bne.n	800deda <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dec2:	2302      	movs	r3, #2
 800dec4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800dec8:	4b3e      	ldr	r3, [pc, #248]	@ (800dfc4 <LmHandlerJoin+0x134>)
 800deca:	2202      	movs	r2, #2
 800decc:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800dece:	4a3d      	ldr	r2, [pc, #244]	@ (800dfc4 <LmHandlerJoin+0x134>)
 800ded0:	79bb      	ldrb	r3, [r7, #6]
 800ded2:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800ded4:	f005 f964 	bl	80131a0 <LoRaMacStart>
 800ded8:	e05c      	b.n	800df94 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800deda:	2301      	movs	r3, #1
 800dedc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800dee0:	4b38      	ldr	r3, [pc, #224]	@ (800dfc4 <LmHandlerJoin+0x134>)
 800dee2:	2201      	movs	r2, #1
 800dee4:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800dee6:	4b36      	ldr	r3, [pc, #216]	@ (800dfc0 <LmHandlerJoin+0x130>)
 800dee8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800deec:	4b35      	ldr	r3, [pc, #212]	@ (800dfc4 <LmHandlerJoin+0x134>)
 800deee:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800def0:	4b33      	ldr	r3, [pc, #204]	@ (800dfc0 <LmHandlerJoin+0x130>)
 800def2:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800def6:	4b33      	ldr	r3, [pc, #204]	@ (800dfc4 <LmHandlerJoin+0x134>)
 800def8:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800defa:	4b32      	ldr	r3, [pc, #200]	@ (800dfc4 <LmHandlerJoin+0x134>)
 800defc:	2200      	movs	r2, #0
 800defe:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800df00:	4a30      	ldr	r2, [pc, #192]	@ (800dfc4 <LmHandlerJoin+0x134>)
 800df02:	79bb      	ldrb	r3, [r7, #6]
 800df04:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800df06:	4b30      	ldr	r3, [pc, #192]	@ (800dfc8 <LmHandlerJoin+0x138>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	f083 0301 	eor.w	r3, r3, #1
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b00      	cmp	r3, #0
 800df12:	d034      	beq.n	800df7e <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800df14:	231f      	movs	r3, #31
 800df16:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800df18:	4b29      	ldr	r3, [pc, #164]	@ (800dfc0 <LmHandlerJoin+0x130>)
 800df1a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800df1e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df20:	f107 030c 	add.w	r3, r7, #12
 800df24:	4618      	mov	r0, r3
 800df26:	f005 fc11 	bl	801374c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800df2a:	2320      	movs	r3, #32
 800df2c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800df2e:	4b24      	ldr	r3, [pc, #144]	@ (800dfc0 <LmHandlerJoin+0x130>)
 800df30:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800df34:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df36:	f107 030c 	add.w	r3, r7, #12
 800df3a:	4618      	mov	r0, r3
 800df3c:	f005 fc06 	bl	801374c <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800df40:	2322      	movs	r3, #34	@ 0x22
 800df42:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800df44:	4b1e      	ldr	r3, [pc, #120]	@ (800dfc0 <LmHandlerJoin+0x130>)
 800df46:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800df4a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df4c:	f107 030c 	add.w	r3, r7, #12
 800df50:	4618      	mov	r0, r3
 800df52:	f005 fbfb 	bl	801374c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800df56:	2321      	movs	r3, #33	@ 0x21
 800df58:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800df5a:	4b19      	ldr	r3, [pc, #100]	@ (800dfc0 <LmHandlerJoin+0x130>)
 800df5c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800df60:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df62:	f107 030c 	add.w	r3, r7, #12
 800df66:	4618      	mov	r0, r3
 800df68:	f005 fbf0 	bl	801374c <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800df6c:	2329      	movs	r3, #41	@ 0x29
 800df6e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800df70:	4b16      	ldr	r3, [pc, #88]	@ (800dfcc <LmHandlerJoin+0x13c>)
 800df72:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df74:	f107 030c 	add.w	r3, r7, #12
 800df78:	4618      	mov	r0, r3
 800df7a:	f005 fbe7 	bl	801374c <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800df7e:	f005 f90f 	bl	80131a0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800df82:	2301      	movs	r3, #1
 800df84:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800df86:	2301      	movs	r3, #1
 800df88:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800df8a:	f107 030c 	add.w	r3, r7, #12
 800df8e:	4618      	mov	r0, r3
 800df90:	f005 fbdc 	bl	801374c <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800df94:	4b0c      	ldr	r3, [pc, #48]	@ (800dfc8 <LmHandlerJoin+0x138>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	f083 0301 	eor.w	r3, r3, #1
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d102      	bne.n	800dfa8 <LmHandlerJoin+0x118>
 800dfa2:	79bb      	ldrb	r3, [r7, #6]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d004      	beq.n	800dfb2 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800dfa8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dfac:	4618      	mov	r0, r3
 800dfae:	f005 ffcf 	bl	8013f50 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800dfb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfb4:	4a06      	ldr	r2, [pc, #24]	@ (800dfd0 <LmHandlerJoin+0x140>)
 800dfb6:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800dfb8:	bf00      	nop
 800dfba:	3748      	adds	r7, #72	@ 0x48
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	20000800 	.word	0x20000800
 800dfc4:	20000094 	.word	0x20000094
 800dfc8:	2000093e 	.word	0x2000093e
 800dfcc:	01000400 	.word	0x01000400
 800dfd0:	20000844 	.word	0x20000844

0800dfd4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b08c      	sub	sp, #48	@ 0x30
 800dfd8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800dfde:	1d3b      	adds	r3, r7, #4
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f005 f9db 	bl	801339c <LoRaMacMibGetRequestConfirm>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800dfec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d106      	bne.n	800e002 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dff4:	7a3b      	ldrb	r3, [r7, #8]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d101      	bne.n	800dffe <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800dffa:	2300      	movs	r3, #0
 800dffc:	e002      	b.n	800e004 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800dffe:	2301      	movs	r3, #1
 800e000:	e000      	b.n	800e004 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e002:	2300      	movs	r3, #0
    }
}
 800e004:	4618      	mov	r0, r3
 800e006:	3730      	adds	r7, #48	@ 0x30
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b08a      	sub	sp, #40	@ 0x28
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	460b      	mov	r3, r1
 800e016:	70fb      	strb	r3, [r7, #3]
 800e018:	4613      	mov	r3, r2
 800e01a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e01c:	23ff      	movs	r3, #255	@ 0xff
 800e01e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800e022:	f002 fabf 	bl	80105a4 <LoRaMacIsBusy>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d002      	beq.n	800e032 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e02c:	f06f 0301 	mvn.w	r3, #1
 800e030:	e0ab      	b.n	800e18a <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800e032:	f002 fadf 	bl	80105f4 <LoRaMacIsStopped>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e03c:	f06f 0302 	mvn.w	r3, #2
 800e040:	e0a3      	b.n	800e18a <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e042:	f7ff ffc7 	bl	800dfd4 <LmHandlerJoinStatus>
 800e046:	4603      	mov	r3, r0
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d00a      	beq.n	800e062 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e04c:	4b51      	ldr	r3, [pc, #324]	@ (800e194 <LmHandlerSend+0x188>)
 800e04e:	79db      	ldrb	r3, [r3, #7]
 800e050:	4a50      	ldr	r2, [pc, #320]	@ (800e194 <LmHandlerSend+0x188>)
 800e052:	7a12      	ldrb	r2, [r2, #8]
 800e054:	4611      	mov	r1, r2
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff ff1a 	bl	800de90 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e05c:	f06f 0302 	mvn.w	r3, #2
 800e060:	e093      	b.n	800e18a <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e062:	4a4d      	ldr	r2, [pc, #308]	@ (800e198 <LmHandlerSend+0x18c>)
 800e064:	78fb      	ldrb	r3, [r7, #3]
 800e066:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	bf14      	ite	ne
 800e06e:	2301      	movne	r3, #1
 800e070:	2300      	moveq	r3, #0
 800e072:	b2db      	uxtb	r3, r3
 800e074:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e076:	4b49      	ldr	r3, [pc, #292]	@ (800e19c <LmHandlerSend+0x190>)
 800e078:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e07c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	785b      	ldrb	r3, [r3, #1]
 800e082:	f107 020c 	add.w	r2, r7, #12
 800e086:	4611      	mov	r1, r2
 800e088:	4618      	mov	r0, r3
 800e08a:	f005 f8f7 	bl	801327c <LoRaMacQueryTxPossible>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d009      	beq.n	800e0a8 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e094:	2300      	movs	r3, #0
 800e096:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e098:	2300      	movs	r3, #0
 800e09a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e09c:	2300      	movs	r3, #0
 800e09e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e0a0:	23f9      	movs	r3, #249	@ 0xf9
 800e0a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e0a6:	e008      	b.n	800e0ba <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	785b      	ldrb	r3, [r3, #1]
 800e0b2:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e0ba:	4b37      	ldr	r3, [pc, #220]	@ (800e198 <LmHandlerSend+0x18c>)
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	3310      	adds	r3, #16
 800e0c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0c4:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e0c8:	4b34      	ldr	r3, [pc, #208]	@ (800e19c <LmHandlerSend+0x190>)
 800e0ca:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e0ce:	4b32      	ldr	r3, [pc, #200]	@ (800e198 <LmHandlerSend+0x18c>)
 800e0d0:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800e0d2:	78ba      	ldrb	r2, [r7, #2]
 800e0d4:	f107 0310 	add.w	r3, r7, #16
 800e0d8:	4611      	mov	r1, r2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f006 f8dc 	bl	8014298 <LoRaMacMcpsRequest>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	4a2d      	ldr	r2, [pc, #180]	@ (800e1a0 <LmHandlerSend+0x194>)
 800e0ea:	6013      	str	r3, [r2, #0]

    switch( status )
 800e0ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e0f0:	2b11      	cmp	r3, #17
 800e0f2:	d843      	bhi.n	800e17c <LmHandlerSend+0x170>
 800e0f4:	a201      	add	r2, pc, #4	@ (adr r2, 800e0fc <LmHandlerSend+0xf0>)
 800e0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fa:	bf00      	nop
 800e0fc:	0800e145 	.word	0x0800e145
 800e100:	0800e15d 	.word	0x0800e15d
 800e104:	0800e17d 	.word	0x0800e17d
 800e108:	0800e17d 	.word	0x0800e17d
 800e10c:	0800e17d 	.word	0x0800e17d
 800e110:	0800e17d 	.word	0x0800e17d
 800e114:	0800e17d 	.word	0x0800e17d
 800e118:	0800e165 	.word	0x0800e165
 800e11c:	0800e17d 	.word	0x0800e17d
 800e120:	0800e17d 	.word	0x0800e17d
 800e124:	0800e17d 	.word	0x0800e17d
 800e128:	0800e175 	.word	0x0800e175
 800e12c:	0800e17d 	.word	0x0800e17d
 800e130:	0800e17d 	.word	0x0800e17d
 800e134:	0800e15d 	.word	0x0800e15d
 800e138:	0800e15d 	.word	0x0800e15d
 800e13c:	0800e15d 	.word	0x0800e15d
 800e140:	0800e16d 	.word	0x0800e16d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800e144:	4b17      	ldr	r3, [pc, #92]	@ (800e1a4 <LmHandlerSend+0x198>)
 800e146:	2200      	movs	r2, #0
 800e148:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800e14a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e14e:	f113 0f07 	cmn.w	r3, #7
 800e152:	d017      	beq.n	800e184 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e154:	2300      	movs	r3, #0
 800e156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800e15a:	e013      	b.n	800e184 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e15c:	23fe      	movs	r3, #254	@ 0xfe
 800e15e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e162:	e010      	b.n	800e186 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e164:	23fd      	movs	r3, #253	@ 0xfd
 800e166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e16a:	e00c      	b.n	800e186 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e16c:	23fb      	movs	r3, #251	@ 0xfb
 800e16e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e172:	e008      	b.n	800e186 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e174:	23fa      	movs	r3, #250	@ 0xfa
 800e176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e17a:	e004      	b.n	800e186 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e17c:	23ff      	movs	r3, #255	@ 0xff
 800e17e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e182:	e000      	b.n	800e186 <LmHandlerSend+0x17a>
            break;
 800e184:	bf00      	nop
    }

    return lmhStatus;
 800e186:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3728      	adds	r7, #40	@ 0x28
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	20000094 	.word	0x20000094
 800e198:	200000a0 	.word	0x200000a0
 800e19c:	20000800 	.word	0x20000800
 800e1a0:	20000844 	.word	0x20000844
 800e1a4:	20000848 	.word	0x20000848

0800e1a8 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e1ae:	2309      	movs	r3, #9
 800e1b0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e1b2:	463b      	mov	r3, r7
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f005 fecb 	bl	8013f50 <LoRaMacMlmeRequest>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	4a06      	ldr	r2, [pc, #24]	@ (800e1dc <LmHandlerDeviceTimeReq+0x34>)
 800e1c2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e1c4:	7dfb      	ldrb	r3, [r7, #23]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	e001      	b.n	800e1d2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e1ce:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3718      	adds	r7, #24
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	20000844 	.word	0x20000844

0800e1e0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e1ea:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	370c      	adds	r7, #12
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bc80      	pop	{r7}
 800e1f6:	4770      	bx	lr

0800e1f8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b08e      	sub	sp, #56	@ 0x38
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	4603      	mov	r3, r0
 800e200:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e202:	2300      	movs	r3, #0
 800e204:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800e208:	f002 f9cc 	bl	80105a4 <LoRaMacIsBusy>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d002      	beq.n	800e218 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e212:	f06f 0301 	mvn.w	r3, #1
 800e216:	e071      	b.n	800e2fc <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800e218:	f7ff fedc 	bl	800dfd4 <LmHandlerJoinStatus>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d002      	beq.n	800e228 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e222:	f06f 0302 	mvn.w	r3, #2
 800e226:	e069      	b.n	800e2fc <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e228:	2300      	movs	r3, #0
 800e22a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e22c:	f107 030c 	add.w	r3, r7, #12
 800e230:	4618      	mov	r0, r3
 800e232:	f005 f8b3 	bl	801339c <LoRaMacMibGetRequestConfirm>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e23c:	f04f 33ff 	mov.w	r3, #4294967295
 800e240:	e05c      	b.n	800e2fc <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800e242:	7c3b      	ldrb	r3, [r7, #16]
 800e244:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800e248:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e24c:	79fb      	ldrb	r3, [r7, #7]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d052      	beq.n	800e2f8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800e252:	79fb      	ldrb	r3, [r7, #7]
 800e254:	2b02      	cmp	r3, #2
 800e256:	d028      	beq.n	800e2aa <LmHandlerRequestClass+0xb2>
 800e258:	2b02      	cmp	r3, #2
 800e25a:	dc48      	bgt.n	800e2ee <LmHandlerRequestClass+0xf6>
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d002      	beq.n	800e266 <LmHandlerRequestClass+0x6e>
 800e260:	2b01      	cmp	r3, #1
 800e262:	d01e      	beq.n	800e2a2 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800e264:	e043      	b.n	800e2ee <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800e266:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d041      	beq.n	800e2f2 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800e26e:	79fb      	ldrb	r3, [r7, #7]
 800e270:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e272:	f107 030c 	add.w	r3, r7, #12
 800e276:	4618      	mov	r0, r3
 800e278:	f005 fa68 	bl	801374c <LoRaMacMibSetRequestConfirm>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d10b      	bne.n	800e29a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e282:	4b20      	ldr	r3, [pc, #128]	@ (800e304 <LmHandlerRequestClass+0x10c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d032      	beq.n	800e2f2 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e28c:	4b1d      	ldr	r3, [pc, #116]	@ (800e304 <LmHandlerRequestClass+0x10c>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e292:	79fa      	ldrb	r2, [r7, #7]
 800e294:	4610      	mov	r0, r2
 800e296:	4798      	blx	r3
                break;
 800e298:	e02b      	b.n	800e2f2 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e29a:	23ff      	movs	r3, #255	@ 0xff
 800e29c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e2a0:	e027      	b.n	800e2f2 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e2a2:	23ff      	movs	r3, #255	@ 0xff
 800e2a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e2a8:	e026      	b.n	800e2f8 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800e2aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d003      	beq.n	800e2ba <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e2b2:	23ff      	movs	r3, #255	@ 0xff
 800e2b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e2b8:	e01d      	b.n	800e2f6 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e2be:	f107 030c 	add.w	r3, r7, #12
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f005 fa42 	bl	801374c <LoRaMacMibSetRequestConfirm>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10b      	bne.n	800e2e6 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e304 <LmHandlerRequestClass+0x10c>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00e      	beq.n	800e2f6 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e304 <LmHandlerRequestClass+0x10c>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2de:	79fa      	ldrb	r2, [r7, #7]
 800e2e0:	4610      	mov	r0, r2
 800e2e2:	4798      	blx	r3
                break;
 800e2e4:	e007      	b.n	800e2f6 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e2e6:	23ff      	movs	r3, #255	@ 0xff
 800e2e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e2ec:	e003      	b.n	800e2f6 <LmHandlerRequestClass+0xfe>
                break;
 800e2ee:	bf00      	nop
 800e2f0:	e002      	b.n	800e2f8 <LmHandlerRequestClass+0x100>
                break;
 800e2f2:	bf00      	nop
 800e2f4:	e000      	b.n	800e2f8 <LmHandlerRequestClass+0x100>
                break;
 800e2f6:	bf00      	nop
        }
    }
    return errorStatus;
 800e2f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3738      	adds	r7, #56	@ 0x38
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	20000818 	.word	0x20000818

0800e308 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b08c      	sub	sp, #48	@ 0x30
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d102      	bne.n	800e31c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e316:	f04f 33ff 	mov.w	r3, #4294967295
 800e31a:	e010      	b.n	800e33e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e31c:	2300      	movs	r3, #0
 800e31e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e320:	f107 0308 	add.w	r3, r7, #8
 800e324:	4618      	mov	r0, r3
 800e326:	f005 f839 	bl	801339c <LoRaMacMibGetRequestConfirm>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e330:	f04f 33ff 	mov.w	r3, #4294967295
 800e334:	e003      	b.n	800e33e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e336:	7b3a      	ldrb	r2, [r7, #12]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3730      	adds	r7, #48	@ 0x30
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
	...

0800e348 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08c      	sub	sp, #48	@ 0x30
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d102      	bne.n	800e35c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e356:	f04f 33ff 	mov.w	r3, #4294967295
 800e35a:	e016      	b.n	800e38a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e35c:	2320      	movs	r3, #32
 800e35e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800e360:	f107 0308 	add.w	r3, r7, #8
 800e364:	4618      	mov	r0, r3
 800e366:	f005 f819 	bl	801339c <LoRaMacMibGetRequestConfirm>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d002      	beq.n	800e376 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e370:	f04f 33ff 	mov.w	r3, #4294967295
 800e374:	e009      	b.n	800e38a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e376:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f993 2000 	ldrsb.w	r2, [r3]
 800e384:	4b03      	ldr	r3, [pc, #12]	@ (800e394 <LmHandlerGetTxDatarate+0x4c>)
 800e386:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3730      	adds	r7, #48	@ 0x30
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	20000800 	.word	0x20000800

0800e398 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b08c      	sub	sp, #48	@ 0x30
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e3a0:	2323      	movs	r3, #35	@ 0x23
 800e3a2:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e3a8:	f107 0308 	add.w	r3, r7, #8
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f005 f9cd 	bl	801374c <LoRaMacMibSetRequestConfirm>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3bc:	e000      	b.n	800e3c0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e3be:	2300      	movs	r3, #0
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3730      	adds	r7, #48	@ 0x30
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e3d0:	4b18      	ldr	r3, [pc, #96]	@ (800e434 <McpsConfirm+0x6c>)
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	785a      	ldrb	r2, [r3, #1]
 800e3da:	4b16      	ldr	r3, [pc, #88]	@ (800e434 <McpsConfirm+0x6c>)
 800e3dc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	789b      	ldrb	r3, [r3, #2]
 800e3e2:	b25a      	sxtb	r2, r3
 800e3e4:	4b13      	ldr	r3, [pc, #76]	@ (800e434 <McpsConfirm+0x6c>)
 800e3e6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	4a11      	ldr	r2, [pc, #68]	@ (800e434 <McpsConfirm+0x6c>)
 800e3ee:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e434 <McpsConfirm+0x6c>)
 800e3f8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	691b      	ldr	r3, [r3, #16]
 800e3fe:	b2da      	uxtb	r2, r3
 800e400:	4b0c      	ldr	r3, [pc, #48]	@ (800e434 <McpsConfirm+0x6c>)
 800e402:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	791b      	ldrb	r3, [r3, #4]
 800e408:	461a      	mov	r2, r3
 800e40a:	4b0a      	ldr	r3, [pc, #40]	@ (800e434 <McpsConfirm+0x6c>)
 800e40c:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800e40e:	4b0a      	ldr	r3, [pc, #40]	@ (800e438 <McpsConfirm+0x70>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e414:	2b00      	cmp	r3, #0
 800e416:	d004      	beq.n	800e422 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e418:	4b07      	ldr	r3, [pc, #28]	@ (800e438 <McpsConfirm+0x70>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e41e:	4805      	ldr	r0, [pc, #20]	@ (800e434 <McpsConfirm+0x6c>)
 800e420:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e422:	6879      	ldr	r1, [r7, #4]
 800e424:	2000      	movs	r0, #0
 800e426:	f000 f9e9 	bl	800e7fc <LmHandlerPackagesNotify>
}
 800e42a:	bf00      	nop
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	200000a0 	.word	0x200000a0
 800e438:	20000818 	.word	0x20000818

0800e43c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e446:	2300      	movs	r3, #0
 800e448:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800e44a:	4b2d      	ldr	r3, [pc, #180]	@ (800e500 <McpsIndication+0xc4>)
 800e44c:	2201      	movs	r2, #1
 800e44e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	785a      	ldrb	r2, [r3, #1]
 800e454:	4b2a      	ldr	r3, [pc, #168]	@ (800e500 <McpsIndication+0xc4>)
 800e456:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e458:	4b29      	ldr	r3, [pc, #164]	@ (800e500 <McpsIndication+0xc4>)
 800e45a:	785b      	ldrb	r3, [r3, #1]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d14b      	bne.n	800e4f8 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	791b      	ldrb	r3, [r3, #4]
 800e464:	b25a      	sxtb	r2, r3
 800e466:	4b26      	ldr	r3, [pc, #152]	@ (800e500 <McpsIndication+0xc4>)
 800e468:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e470:	b25a      	sxtb	r2, r3
 800e472:	4b23      	ldr	r3, [pc, #140]	@ (800e500 <McpsIndication+0xc4>)
 800e474:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e47c:	4b20      	ldr	r3, [pc, #128]	@ (800e500 <McpsIndication+0xc4>)
 800e47e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	78da      	ldrb	r2, [r3, #3]
 800e484:	4b1e      	ldr	r3, [pc, #120]	@ (800e500 <McpsIndication+0xc4>)
 800e486:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	4a1c      	ldr	r2, [pc, #112]	@ (800e500 <McpsIndication+0xc4>)
 800e48e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	78db      	ldrb	r3, [r3, #3]
 800e494:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	7b1b      	ldrb	r3, [r3, #12]
 800e49a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800e4a2:	4b18      	ldr	r3, [pc, #96]	@ (800e504 <McpsIndication+0xc8>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d007      	beq.n	800e4bc <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e4ac:	4b15      	ldr	r3, [pc, #84]	@ (800e504 <McpsIndication+0xc8>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b2:	f107 0210 	add.w	r2, r7, #16
 800e4b6:	4912      	ldr	r1, [pc, #72]	@ (800e500 <McpsIndication+0xc4>)
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800e4bc:	4b11      	ldr	r3, [pc, #68]	@ (800e504 <McpsIndication+0xc8>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d007      	beq.n	800e4d6 <McpsIndication+0x9a>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	7e1b      	ldrb	r3, [r3, #24]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e504 <McpsIndication+0xc8>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4d4:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800e4d6:	6879      	ldr	r1, [r7, #4]
 800e4d8:	2001      	movs	r0, #1
 800e4da:	f000 f98f 	bl	800e7fc <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800e4de:	f107 030f 	add.w	r3, r7, #15
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7ff ff10 	bl	800e308 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	795b      	ldrb	r3, [r3, #5]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d004      	beq.n	800e4fa <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800e4f0:	4b05      	ldr	r3, [pc, #20]	@ (800e508 <McpsIndication+0xcc>)
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	701a      	strb	r2, [r3, #0]
 800e4f6:	e000      	b.n	800e4fa <McpsIndication+0xbe>
        return;
 800e4f8:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800e4fa:	3718      	adds	r7, #24
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	200000bc 	.word	0x200000bc
 800e504:	20000818 	.word	0x20000818
 800e508:	20000848 	.word	0x20000848

0800e50c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b08c      	sub	sp, #48	@ 0x30
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800e514:	4b49      	ldr	r3, [pc, #292]	@ (800e63c <MlmeConfirm+0x130>)
 800e516:	2200      	movs	r2, #0
 800e518:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	785a      	ldrb	r2, [r3, #1]
 800e51e:	4b47      	ldr	r3, [pc, #284]	@ (800e63c <MlmeConfirm+0x130>)
 800e520:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800e522:	4b47      	ldr	r3, [pc, #284]	@ (800e640 <MlmeConfirm+0x134>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d004      	beq.n	800e536 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e52c:	4b44      	ldr	r3, [pc, #272]	@ (800e640 <MlmeConfirm+0x134>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e532:	4842      	ldr	r0, [pc, #264]	@ (800e63c <MlmeConfirm+0x130>)
 800e534:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800e536:	6879      	ldr	r1, [r7, #4]
 800e538:	2002      	movs	r0, #2
 800e53a:	f000 f95f 	bl	800e7fc <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	3b01      	subs	r3, #1
 800e544:	2b0b      	cmp	r3, #11
 800e546:	d872      	bhi.n	800e62e <MlmeConfirm+0x122>
 800e548:	a201      	add	r2, pc, #4	@ (adr r2, 800e550 <MlmeConfirm+0x44>)
 800e54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54e:	bf00      	nop
 800e550:	0800e581 	.word	0x0800e581
 800e554:	0800e62f 	.word	0x0800e62f
 800e558:	0800e62f 	.word	0x0800e62f
 800e55c:	0800e62f 	.word	0x0800e62f
 800e560:	0800e5fd 	.word	0x0800e5fd
 800e564:	0800e62f 	.word	0x0800e62f
 800e568:	0800e62f 	.word	0x0800e62f
 800e56c:	0800e62f 	.word	0x0800e62f
 800e570:	0800e62f 	.word	0x0800e62f
 800e574:	0800e62f 	.word	0x0800e62f
 800e578:	0800e615 	.word	0x0800e615
 800e57c:	0800e62f 	.word	0x0800e62f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800e580:	2306      	movs	r3, #6
 800e582:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800e584:	f107 0308 	add.w	r3, r7, #8
 800e588:	4618      	mov	r0, r3
 800e58a:	f004 ff07 	bl	801339c <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800e58e:	4b2d      	ldr	r3, [pc, #180]	@ (800e644 <MlmeConfirm+0x138>)
 800e590:	79db      	ldrb	r3, [r3, #7]
 800e592:	68fa      	ldr	r2, [r7, #12]
 800e594:	4611      	mov	r1, r2
 800e596:	4618      	mov	r0, r3
 800e598:	f7ff fa6c 	bl	800da74 <SecureElementSetDevAddr>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d102      	bne.n	800e5a8 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	4a28      	ldr	r2, [pc, #160]	@ (800e648 <MlmeConfirm+0x13c>)
 800e5a6:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800e5a8:	4828      	ldr	r0, [pc, #160]	@ (800e64c <MlmeConfirm+0x140>)
 800e5aa:	f7ff fecd 	bl	800e348 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800e5ae:	4828      	ldr	r0, [pc, #160]	@ (800e650 <MlmeConfirm+0x144>)
 800e5b0:	f000 fa74 	bl	800ea9c <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e5b4:	4b21      	ldr	r3, [pc, #132]	@ (800e63c <MlmeConfirm+0x130>)
 800e5b6:	785b      	ldrb	r3, [r3, #1]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d108      	bne.n	800e5ce <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e5bc:	4b21      	ldr	r3, [pc, #132]	@ (800e644 <MlmeConfirm+0x138>)
 800e5be:	2200      	movs	r2, #0
 800e5c0:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800e5c2:	4b24      	ldr	r3, [pc, #144]	@ (800e654 <MlmeConfirm+0x148>)
 800e5c4:	785b      	ldrb	r3, [r3, #1]
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7ff fe16 	bl	800e1f8 <LmHandlerRequestClass>
 800e5cc:	e002      	b.n	800e5d4 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e5ce:	4b1d      	ldr	r3, [pc, #116]	@ (800e644 <MlmeConfirm+0x138>)
 800e5d0:	22ff      	movs	r2, #255	@ 0xff
 800e5d2:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800e5d4:	4b1a      	ldr	r3, [pc, #104]	@ (800e640 <MlmeConfirm+0x134>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d004      	beq.n	800e5e8 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e5de:	4b18      	ldr	r3, [pc, #96]	@ (800e640 <MlmeConfirm+0x134>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5e4:	4817      	ldr	r0, [pc, #92]	@ (800e644 <MlmeConfirm+0x138>)
 800e5e6:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e5e8:	4b14      	ldr	r3, [pc, #80]	@ (800e63c <MlmeConfirm+0x130>)
 800e5ea:	785b      	ldrb	r3, [r3, #1]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d120      	bne.n	800e632 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800e5f0:	4b14      	ldr	r3, [pc, #80]	@ (800e644 <MlmeConfirm+0x138>)
 800e5f2:	79db      	ldrb	r3, [r3, #7]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7fe ffe7 	bl	800d5c8 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800e5fa:	e01a      	b.n	800e632 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800e5fc:	4b16      	ldr	r3, [pc, #88]	@ (800e658 <MlmeConfirm+0x14c>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	7a1a      	ldrb	r2, [r3, #8]
 800e606:	4b14      	ldr	r3, [pc, #80]	@ (800e658 <MlmeConfirm+0x14c>)
 800e608:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	7a5a      	ldrb	r2, [r3, #9]
 800e60e:	4b12      	ldr	r3, [pc, #72]	@ (800e658 <MlmeConfirm+0x14c>)
 800e610:	74da      	strb	r2, [r3, #19]
            }
            break;
 800e612:	e00f      	b.n	800e634 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	785b      	ldrb	r3, [r3, #1]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d105      	bne.n	800e628 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e61c:	4b0d      	ldr	r3, [pc, #52]	@ (800e654 <MlmeConfirm+0x148>)
 800e61e:	7c1b      	ldrb	r3, [r3, #16]
 800e620:	4618      	mov	r0, r3
 800e622:	f7ff fddd 	bl	800e1e0 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800e626:	e005      	b.n	800e634 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800e628:	f7ff fdbe 	bl	800e1a8 <LmHandlerDeviceTimeReq>
            break;
 800e62c:	e002      	b.n	800e634 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e62e:	bf00      	nop
 800e630:	e000      	b.n	800e634 <MlmeConfirm+0x128>
            break;
 800e632:	bf00      	nop
    }
}
 800e634:	bf00      	nop
 800e636:	3730      	adds	r7, #48	@ 0x30
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	200000a0 	.word	0x200000a0
 800e640:	20000818 	.word	0x20000818
 800e644:	20000094 	.word	0x20000094
 800e648:	200007c4 	.word	0x200007c4
 800e64c:	20000098 	.word	0x20000098
 800e650:	20000099 	.word	0x20000099
 800e654:	20000800 	.word	0x20000800
 800e658:	200000bc 	.word	0x200000bc

0800e65c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e666:	4b20      	ldr	r3, [pc, #128]	@ (800e6e8 <MlmeIndication+0x8c>)
 800e668:	2200      	movs	r2, #0
 800e66a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	785a      	ldrb	r2, [r3, #1]
 800e670:	4b1d      	ldr	r3, [pc, #116]	@ (800e6e8 <MlmeIndication+0x8c>)
 800e672:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	789b      	ldrb	r3, [r3, #2]
 800e678:	b25a      	sxtb	r2, r3
 800e67a:	4b1b      	ldr	r3, [pc, #108]	@ (800e6e8 <MlmeIndication+0x8c>)
 800e67c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e684:	b25a      	sxtb	r2, r3
 800e686:	4b18      	ldr	r3, [pc, #96]	@ (800e6e8 <MlmeIndication+0x8c>)
 800e688:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e690:	4b15      	ldr	r3, [pc, #84]	@ (800e6e8 <MlmeIndication+0x8c>)
 800e692:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	78da      	ldrb	r2, [r3, #3]
 800e698:	4b13      	ldr	r3, [pc, #76]	@ (800e6e8 <MlmeIndication+0x8c>)
 800e69a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	4a11      	ldr	r2, [pc, #68]	@ (800e6e8 <MlmeIndication+0x8c>)
 800e6a2:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800e6a4:	4b11      	ldr	r3, [pc, #68]	@ (800e6ec <MlmeIndication+0x90>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00d      	beq.n	800e6ca <MlmeIndication+0x6e>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	2b0a      	cmp	r3, #10
 800e6b4:	d009      	beq.n	800e6ca <MlmeIndication+0x6e>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2b0e      	cmp	r3, #14
 800e6bc:	d005      	beq.n	800e6ca <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e6be:	4b0b      	ldr	r3, [pc, #44]	@ (800e6ec <MlmeIndication+0x90>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6c4:	4908      	ldr	r1, [pc, #32]	@ (800e6e8 <MlmeIndication+0x8c>)
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e6ca:	6879      	ldr	r1, [r7, #4]
 800e6cc:	2003      	movs	r0, #3
 800e6ce:	f000 f895 	bl	800e7fc <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	2b0a      	cmp	r3, #10
 800e6d8:	d001      	beq.n	800e6de <MlmeIndication+0x82>
 800e6da:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e6dc:	e000      	b.n	800e6e0 <MlmeIndication+0x84>
            break;
 800e6de:	bf00      	nop
    }
}
 800e6e0:	bf00      	nop
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	200000bc 	.word	0x200000bc
 800e6ec:	20000818 	.word	0x20000818

0800e6f0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	6039      	str	r1, [r7, #0]
 800e6fa:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e700:	79fb      	ldrb	r3, [r7, #7]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d104      	bne.n	800e710 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800e706:	f000 fa8b 	bl	800ec20 <LmhpCompliancePackageFactory>
 800e70a:	4603      	mov	r3, r0
 800e70c:	60fb      	str	r3, [r7, #12]
                break;
 800e70e:	e00d      	b.n	800e72c <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800e710:	f107 020c 	add.w	r2, r7, #12
 800e714:	79fb      	ldrb	r3, [r7, #7]
 800e716:	4611      	mov	r1, r2
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 ff73 	bl	800f604 <LmhpPackagesRegister>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d002      	beq.n	800e72a <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800e724:	f04f 33ff 	mov.w	r3, #4294967295
 800e728:	e03b      	b.n	800e7a2 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800e72a:	bf00      	nop
            }
    }
    if( package != NULL )
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d035      	beq.n	800e79e <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	68fa      	ldr	r2, [r7, #12]
 800e736:	491d      	ldr	r1, [pc, #116]	@ (800e7ac <LmHandlerPackageRegister+0xbc>)
 800e738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e73c:	79fb      	ldrb	r3, [r7, #7]
 800e73e:	4a1b      	ldr	r2, [pc, #108]	@ (800e7ac <LmHandlerPackageRegister+0xbc>)
 800e740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e744:	4a1a      	ldr	r2, [pc, #104]	@ (800e7b0 <LmHandlerPackageRegister+0xc0>)
 800e746:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800e748:	4b1a      	ldr	r3, [pc, #104]	@ (800e7b4 <LmHandlerPackageRegister+0xc4>)
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	79fb      	ldrb	r3, [r7, #7]
 800e74e:	4917      	ldr	r1, [pc, #92]	@ (800e7ac <LmHandlerPackageRegister+0xbc>)
 800e750:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e754:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e756:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800e758:	4b16      	ldr	r3, [pc, #88]	@ (800e7b4 <LmHandlerPackageRegister+0xc4>)
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	79fb      	ldrb	r3, [r7, #7]
 800e75e:	4913      	ldr	r1, [pc, #76]	@ (800e7ac <LmHandlerPackageRegister+0xbc>)
 800e760:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e764:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e766:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e768:	79fb      	ldrb	r3, [r7, #7]
 800e76a:	4a10      	ldr	r2, [pc, #64]	@ (800e7ac <LmHandlerPackageRegister+0xbc>)
 800e76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e770:	4a11      	ldr	r2, [pc, #68]	@ (800e7b8 <LmHandlerPackageRegister+0xc8>)
 800e772:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e774:	4b0f      	ldr	r3, [pc, #60]	@ (800e7b4 <LmHandlerPackageRegister+0xc4>)
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	490c      	ldr	r1, [pc, #48]	@ (800e7ac <LmHandlerPackageRegister+0xbc>)
 800e77c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e780:	6992      	ldr	r2, [r2, #24]
 800e782:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e784:	79fb      	ldrb	r3, [r7, #7]
 800e786:	4a09      	ldr	r2, [pc, #36]	@ (800e7ac <LmHandlerPackageRegister+0xbc>)
 800e788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	4a0b      	ldr	r2, [pc, #44]	@ (800e7bc <LmHandlerPackageRegister+0xcc>)
 800e790:	6851      	ldr	r1, [r2, #4]
 800e792:	4a0a      	ldr	r2, [pc, #40]	@ (800e7bc <LmHandlerPackageRegister+0xcc>)
 800e794:	7852      	ldrb	r2, [r2, #1]
 800e796:	6838      	ldr	r0, [r7, #0]
 800e798:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e79a:	2300      	movs	r3, #0
 800e79c:	e001      	b.n	800e7a2 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e79e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	200007ec 	.word	0x200007ec
 800e7b0:	0800de91 	.word	0x0800de91
 800e7b4:	20000818 	.word	0x20000818
 800e7b8:	0800e1a9 	.word	0x0800e1a9
 800e7bc:	200000d0 	.word	0x200000d0

0800e7c0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	2b04      	cmp	r3, #4
 800e7ce:	d80e      	bhi.n	800e7ee <LmHandlerPackageIsInitialized+0x2e>
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	4a09      	ldr	r2, [pc, #36]	@ (800e7f8 <LmHandlerPackageIsInitialized+0x38>)
 800e7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d007      	beq.n	800e7ee <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e7de:	79fb      	ldrb	r3, [r7, #7]
 800e7e0:	4a05      	ldr	r2, [pc, #20]	@ (800e7f8 <LmHandlerPackageIsInitialized+0x38>)
 800e7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	4798      	blx	r3
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	e000      	b.n	800e7f0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e7ee:	2300      	movs	r3, #0
    }
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3708      	adds	r7, #8
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	200007ec 	.word	0x200007ec

0800e7fc <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	4603      	mov	r3, r0
 800e804:	6039      	str	r1, [r7, #0]
 800e806:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e808:	2300      	movs	r3, #0
 800e80a:	73fb      	strb	r3, [r7, #15]
 800e80c:	e067      	b.n	800e8de <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800e80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e812:	4a37      	ldr	r2, [pc, #220]	@ (800e8f0 <LmHandlerPackagesNotify+0xf4>)
 800e814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d05a      	beq.n	800e8d2 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800e81c:	79fb      	ldrb	r3, [r7, #7]
 800e81e:	2b03      	cmp	r3, #3
 800e820:	d84e      	bhi.n	800e8c0 <LmHandlerPackagesNotify+0xc4>
 800e822:	a201      	add	r2, pc, #4	@ (adr r2, 800e828 <LmHandlerPackagesNotify+0x2c>)
 800e824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e828:	0800e839 	.word	0x0800e839
 800e82c:	0800e85b 	.word	0x0800e85b
 800e830:	0800e87d 	.word	0x0800e87d
 800e834:	0800e89f 	.word	0x0800e89f
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e83c:	4a2c      	ldr	r2, [pc, #176]	@ (800e8f0 <LmHandlerPackagesNotify+0xf4>)
 800e83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d03d      	beq.n	800e8c4 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800e848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e84c:	4a28      	ldr	r2, [pc, #160]	@ (800e8f0 <LmHandlerPackagesNotify+0xf4>)
 800e84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e852:	699b      	ldr	r3, [r3, #24]
 800e854:	6838      	ldr	r0, [r7, #0]
 800e856:	4798      	blx	r3
                        }
                        break;
 800e858:	e034      	b.n	800e8c4 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800e85a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e85e:	4a24      	ldr	r2, [pc, #144]	@ (800e8f0 <LmHandlerPackagesNotify+0xf4>)
 800e860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e864:	69db      	ldr	r3, [r3, #28]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d02e      	beq.n	800e8c8 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800e86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e86e:	4a20      	ldr	r2, [pc, #128]	@ (800e8f0 <LmHandlerPackagesNotify+0xf4>)
 800e870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	6838      	ldr	r0, [r7, #0]
 800e878:	4798      	blx	r3
                        }
                        break;
 800e87a:	e025      	b.n	800e8c8 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e87c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e880:	4a1b      	ldr	r2, [pc, #108]	@ (800e8f0 <LmHandlerPackagesNotify+0xf4>)
 800e882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e886:	6a1b      	ldr	r3, [r3, #32]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d01f      	beq.n	800e8cc <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800e88c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e890:	4a17      	ldr	r2, [pc, #92]	@ (800e8f0 <LmHandlerPackagesNotify+0xf4>)
 800e892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e896:	6a1b      	ldr	r3, [r3, #32]
 800e898:	6838      	ldr	r0, [r7, #0]
 800e89a:	4798      	blx	r3
                        }
                        break;
 800e89c:	e016      	b.n	800e8cc <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e89e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8a2:	4a13      	ldr	r2, [pc, #76]	@ (800e8f0 <LmHandlerPackagesNotify+0xf4>)
 800e8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d010      	beq.n	800e8d0 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e8ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8b2:	4a0f      	ldr	r2, [pc, #60]	@ (800e8f0 <LmHandlerPackagesNotify+0xf4>)
 800e8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ba:	6838      	ldr	r0, [r7, #0]
 800e8bc:	4798      	blx	r3
                        }
                        break;
 800e8be:	e007      	b.n	800e8d0 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800e8c0:	bf00      	nop
 800e8c2:	e006      	b.n	800e8d2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e8c4:	bf00      	nop
 800e8c6:	e004      	b.n	800e8d2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e8c8:	bf00      	nop
 800e8ca:	e002      	b.n	800e8d2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e8cc:	bf00      	nop
 800e8ce:	e000      	b.n	800e8d2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e8d0:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	3301      	adds	r3, #1
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	73fb      	strb	r3, [r7, #15]
 800e8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8e2:	2b04      	cmp	r3, #4
 800e8e4:	dd93      	ble.n	800e80e <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800e8e6:	bf00      	nop
 800e8e8:	bf00      	nop
 800e8ea:	3710      	adds	r7, #16
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	200007ec 	.word	0x200007ec

0800e8f4 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	71fb      	strb	r3, [r7, #7]
 800e8fe:	e018      	b.n	800e932 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800e900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e904:	4a0f      	ldr	r2, [pc, #60]	@ (800e944 <LmHandlerPackageIsTxPending+0x50>)
 800e906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d00b      	beq.n	800e926 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e90e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e912:	4a0c      	ldr	r2, [pc, #48]	@ (800e944 <LmHandlerPackageIsTxPending+0x50>)
 800e914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	4798      	blx	r3
 800e91c:	4603      	mov	r3, r0
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d001      	beq.n	800e926 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e922:	2301      	movs	r3, #1
 800e924:	e00a      	b.n	800e93c <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	3301      	adds	r3, #1
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	71fb      	strb	r3, [r7, #7]
 800e932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e936:	2b04      	cmp	r3, #4
 800e938:	dde2      	ble.n	800e900 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	200007ec 	.word	0x200007ec

0800e948 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e94e:	2300      	movs	r3, #0
 800e950:	71fb      	strb	r3, [r7, #7]
 800e952:	e022      	b.n	800e99a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e958:	4a14      	ldr	r2, [pc, #80]	@ (800e9ac <LmHandlerPackagesProcess+0x64>)
 800e95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d015      	beq.n	800e98e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e966:	4a11      	ldr	r2, [pc, #68]	@ (800e9ac <LmHandlerPackagesProcess+0x64>)
 800e968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e96c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00d      	beq.n	800e98e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e972:	79fb      	ldrb	r3, [r7, #7]
 800e974:	4618      	mov	r0, r3
 800e976:	f7ff ff23 	bl	800e7c0 <LmHandlerPackageIsInitialized>
 800e97a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d006      	beq.n	800e98e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e984:	4a09      	ldr	r2, [pc, #36]	@ (800e9ac <LmHandlerPackagesProcess+0x64>)
 800e986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e98e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e992:	b2db      	uxtb	r3, r3
 800e994:	3301      	adds	r3, #1
 800e996:	b2db      	uxtb	r3, r3
 800e998:	71fb      	strb	r3, [r7, #7]
 800e99a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e99e:	2b04      	cmp	r3, #4
 800e9a0:	ddd8      	ble.n	800e954 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e9a2:	bf00      	nop
 800e9a4:	bf00      	nop
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	200007ec 	.word	0x200007ec

0800e9b0 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800e9ba:	4a09      	ldr	r2, [pc, #36]	@ (800e9e0 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800e9bc:	79fb      	ldrb	r3, [r7, #7]
 800e9be:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800e9c0:	4b08      	ldr	r3, [pc, #32]	@ (800e9e4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d005      	beq.n	800e9d6 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800e9ca:	4b06      	ldr	r3, [pc, #24]	@ (800e9e4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9d0:	79fa      	ldrb	r2, [r7, #7]
 800e9d2:	4610      	mov	r0, r2
 800e9d4:	4798      	blx	r3
    }
}
 800e9d6:	bf00      	nop
 800e9d8:	3708      	adds	r7, #8
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	20000800 	.word	0x20000800
 800e9e4:	20000818 	.word	0x20000818

0800e9e8 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800e9f2:	4a09      	ldr	r2, [pc, #36]	@ (800ea18 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800e9f4:	79fb      	ldrb	r3, [r7, #7]
 800e9f6:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800e9f8:	4b08      	ldr	r3, [pc, #32]	@ (800ea1c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d005      	beq.n	800ea0e <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800ea02:	4b06      	ldr	r3, [pc, #24]	@ (800ea1c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea08:	79fa      	ldrb	r2, [r7, #7]
 800ea0a:	4610      	mov	r0, r2
 800ea0c:	4798      	blx	r3
    }
}
 800ea0e:	bf00      	nop
 800ea10:	3708      	adds	r7, #8
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20000800 	.word	0x20000800
 800ea1c:	20000818 	.word	0x20000818

0800ea20 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	4603      	mov	r3, r0
 800ea28:	6039      	str	r1, [r7, #0]
 800ea2a:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d102      	bne.n	800ea38 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea32:	f04f 33ff 	mov.w	r3, #4294967295
 800ea36:	e00e      	b.n	800ea56 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800ea38:	79fb      	ldrb	r3, [r7, #7]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d002      	beq.n	800ea44 <LmHandlerGetVersion+0x24>
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d004      	beq.n	800ea4c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800ea42:	e007      	b.n	800ea54 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	4a06      	ldr	r2, [pc, #24]	@ (800ea60 <LmHandlerGetVersion+0x40>)
 800ea48:	601a      	str	r2, [r3, #0]
            break;
 800ea4a:	e003      	b.n	800ea54 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	4a05      	ldr	r2, [pc, #20]	@ (800ea64 <LmHandlerGetVersion+0x44>)
 800ea50:	601a      	str	r2, [r3, #0]
            break;
 800ea52:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bc80      	pop	{r7}
 800ea5e:	4770      	bx	lr
 800ea60:	01000400 	.word	0x01000400
 800ea64:	02010003 	.word	0x02010003

0800ea68 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800ea6c:	f005 fd72 	bl	8014554 <LoRaMacDeInitialization>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d101      	bne.n	800ea7a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ea76:	2300      	movs	r3, #0
 800ea78:	e001      	b.n	800ea7e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ea7a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800ea86:	f004 fbc1 	bl	801320c <LoRaMacHalt>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d101      	bne.n	800ea94 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ea90:	2300      	movs	r3, #0
 800ea92:	e001      	b.n	800ea98 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ea94:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08c      	sub	sp, #48	@ 0x30
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d102      	bne.n	800eab0 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800eaaa:	f04f 33ff 	mov.w	r3, #4294967295
 800eaae:	e016      	b.n	800eade <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800eab0:	2321      	movs	r3, #33	@ 0x21
 800eab2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800eab4:	f107 0308 	add.w	r3, r7, #8
 800eab8:	4618      	mov	r0, r3
 800eaba:	f004 fc6f 	bl	801339c <LoRaMacMibGetRequestConfirm>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d002      	beq.n	800eaca <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800eac4:	f04f 33ff 	mov.w	r3, #4294967295
 800eac8:	e009      	b.n	800eade <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800eaca:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f993 2000 	ldrsb.w	r2, [r3]
 800ead8:	4b03      	ldr	r3, [pc, #12]	@ (800eae8 <LmHandlerGetTxPower+0x4c>)
 800eada:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3730      	adds	r7, #48	@ 0x30
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	20000800 	.word	0x20000800

0800eaec <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b08e      	sub	sp, #56	@ 0x38
 800eaf0:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800eafc:	f7ff ffc1 	bl	800ea82 <LmHandlerHalt>
 800eb00:	4603      	mov	r3, r0
 800eb02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800eb06:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d12f      	bne.n	800eb6e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800eb0e:	f000 f859 	bl	800ebc4 <NvmDataMgmtStoreBegin>
 800eb12:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800eb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb16:	f113 0f02 	cmn.w	r3, #2
 800eb1a:	d103      	bne.n	800eb24 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800eb1c:	23f8      	movs	r3, #248	@ 0xf8
 800eb1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb22:	e01c      	b.n	800eb5e <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800eb24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d104      	bne.n	800eb34 <LmHandlerNvmDataStore+0x48>
 800eb2a:	4b1b      	ldr	r3, [pc, #108]	@ (800eb98 <LmHandlerNvmDataStore+0xac>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	695b      	ldr	r3, [r3, #20]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d103      	bne.n	800eb3c <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800eb34:	23ff      	movs	r3, #255	@ 0xff
 800eb36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb3a:	e010      	b.n	800eb5e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800eb3c:	2327      	movs	r3, #39	@ 0x27
 800eb3e:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800eb40:	463b      	mov	r3, r7
 800eb42:	4618      	mov	r0, r3
 800eb44:	f004 fc2a 	bl	801339c <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800eb4c:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800eb50:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800eb52:	4b11      	ldr	r3, [pc, #68]	@ (800eb98 <LmHandlerNvmDataStore+0xac>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	695b      	ldr	r3, [r3, #20]
 800eb58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb5c:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800eb5e:	f000 f847 	bl	800ebf0 <NvmDataMgmtStoreEnd>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d002      	beq.n	800eb6e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800eb68:	23ff      	movs	r3, #255	@ 0xff
 800eb6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800eb6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d109      	bne.n	800eb8a <LmHandlerNvmDataStore+0x9e>
 800eb76:	4b08      	ldr	r3, [pc, #32]	@ (800eb98 <LmHandlerNvmDataStore+0xac>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	69db      	ldr	r3, [r3, #28]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d004      	beq.n	800eb8a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800eb80:	4b05      	ldr	r3, [pc, #20]	@ (800eb98 <LmHandlerNvmDataStore+0xac>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	69db      	ldr	r3, [r3, #28]
 800eb86:	2001      	movs	r0, #1
 800eb88:	4798      	blx	r3
    }

    return lmhStatus;
 800eb8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3738      	adds	r7, #56	@ 0x38
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	20000818 	.word	0x20000818

0800eb9c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	4603      	mov	r3, r0
 800eba4:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800eba6:	4b06      	ldr	r3, [pc, #24]	@ (800ebc0 <NvmDataMgmtEvent+0x24>)
 800eba8:	881a      	ldrh	r2, [r3, #0]
 800ebaa:	88fb      	ldrh	r3, [r7, #6]
 800ebac:	4313      	orrs	r3, r2
 800ebae:	b29a      	uxth	r2, r3
 800ebb0:	4b03      	ldr	r3, [pc, #12]	@ (800ebc0 <NvmDataMgmtEvent+0x24>)
 800ebb2:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bc80      	pop	{r7}
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	20000940 	.word	0x20000940

0800ebc4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800ebc8:	4b08      	ldr	r3, [pc, #32]	@ (800ebec <NvmDataMgmtStoreBegin+0x28>)
 800ebca:	881b      	ldrh	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d102      	bne.n	800ebd6 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800ebd0:	f06f 0301 	mvn.w	r3, #1
 800ebd4:	e008      	b.n	800ebe8 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800ebd6:	f004 faf1 	bl	80131bc <LoRaMacStop>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d002      	beq.n	800ebe6 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800ebe0:	f06f 0302 	mvn.w	r3, #2
 800ebe4:	e000      	b.n	800ebe8 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800ebe6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	20000940 	.word	0x20000940

0800ebf0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ebf4:	4b03      	ldr	r3, [pc, #12]	@ (800ec04 <NvmDataMgmtStoreEnd+0x14>)
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800ebfa:	f004 fad1 	bl	80131a0 <LoRaMacStart>
    return NVM_DATA_OK;
 800ebfe:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20000940 	.word	0x20000940

0800ec08 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800ec0c:	2220      	movs	r2, #32
 800ec0e:	2100      	movs	r1, #0
 800ec10:	4802      	ldr	r0, [pc, #8]	@ (800ec1c <ClassBStatusReset+0x14>)
 800ec12:	f009 ffad 	bl	8018b70 <memset1>
}
 800ec16:	bf00      	nop
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	20000958 	.word	0x20000958

0800ec20 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800ec20:	b480      	push	{r7}
 800ec22:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800ec24:	4b02      	ldr	r3, [pc, #8]	@ (800ec30 <LmhpCompliancePackageFactory+0x10>)
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bc80      	pop	{r7}
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	200000d8 	.word	0x200000d8

0800ec34 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af02      	add	r7, sp, #8
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d018      	beq.n	800ec7a <LmhpComplianceInit+0x46>
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d015      	beq.n	800ec7a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800ec4e:	4a19      	ldr	r2, [pc, #100]	@ (800ecb4 <LmhpComplianceInit+0x80>)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800ec54:	4a18      	ldr	r2, [pc, #96]	@ (800ecb8 <LmhpComplianceInit+0x84>)
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800ec5a:	4a17      	ldr	r2, [pc, #92]	@ (800ecb8 <LmhpComplianceInit+0x84>)
 800ec5c:	79fb      	ldrb	r3, [r7, #7]
 800ec5e:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800ec60:	4b15      	ldr	r3, [pc, #84]	@ (800ecb8 <LmhpComplianceInit+0x84>)
 800ec62:	2201      	movs	r2, #1
 800ec64:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800ec66:	2300      	movs	r3, #0
 800ec68:	9300      	str	r3, [sp, #0]
 800ec6a:	4b14      	ldr	r3, [pc, #80]	@ (800ecbc <LmhpComplianceInit+0x88>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f04f 31ff 	mov.w	r1, #4294967295
 800ec72:	4813      	ldr	r0, [pc, #76]	@ (800ecc0 <LmhpComplianceInit+0x8c>)
 800ec74:	f00d fd8a 	bl	801c78c <UTIL_TIMER_Create>
 800ec78:	e005      	b.n	800ec86 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800ec7a:	4b0e      	ldr	r3, [pc, #56]	@ (800ecb4 <LmhpComplianceInit+0x80>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800ec80:	4b0d      	ldr	r3, [pc, #52]	@ (800ecb8 <LmhpComplianceInit+0x84>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800ec86:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb8 <LmhpComplianceInit+0x84>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800ec8c:	f7ff ffbc 	bl	800ec08 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800ec90:	4b09      	ldr	r3, [pc, #36]	@ (800ecb8 <LmhpComplianceInit+0x84>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800ec96:	4b08      	ldr	r3, [pc, #32]	@ (800ecb8 <LmhpComplianceInit+0x84>)
 800ec98:	2200      	movs	r2, #0
 800ec9a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800ec9c:	4b06      	ldr	r3, [pc, #24]	@ (800ecb8 <LmhpComplianceInit+0x84>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800eca4:	4b04      	ldr	r3, [pc, #16]	@ (800ecb8 <LmhpComplianceInit+0x84>)
 800eca6:	2200      	movs	r2, #0
 800eca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800ecac:	bf00      	nop
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	2000097c 	.word	0x2000097c
 800ecb8:	20000944 	.word	0x20000944
 800ecbc:	0800f5bd 	.word	0x0800f5bd
 800ecc0:	20000980 	.word	0x20000980

0800ecc4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800ecc8:	4b02      	ldr	r3, [pc, #8]	@ (800ecd4 <LmhpComplianceIsInitialized+0x10>)
 800ecca:	781b      	ldrb	r3, [r3, #0]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bc80      	pop	{r7}
 800ecd2:	4770      	bx	lr
 800ecd4:	20000944 	.word	0x20000944

0800ecd8 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800ecd8:	b480      	push	{r7}
 800ecda:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800ecdc:	4b02      	ldr	r3, [pc, #8]	@ (800ece8 <LmhpComplianceIsTxPending+0x10>)
 800ecde:	785b      	ldrb	r3, [r3, #1]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bc80      	pop	{r7}
 800ece6:	4770      	bx	lr
 800ece8:	20000944 	.word	0x20000944

0800ecec <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ecec:	b590      	push	{r4, r7, lr}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800ecf2:	4b33      	ldr	r3, [pc, #204]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ecf4:	785b      	ldrb	r3, [r3, #1]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d03e      	beq.n	800ed78 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800ecfa:	f00d ff05 	bl	801cb08 <UTIL_TIMER_GetCurrentTime>
 800ecfe:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800ed00:	4b2f      	ldr	r3, [pc, #188]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed02:	685c      	ldr	r4, [r3, #4]
 800ed04:	f7ff f8ba 	bl	800de7c <LmHandlerGetDutyCycleWaitTime>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	4423      	add	r3, r4
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d941      	bls.n	800ed96 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800ed12:	4b2b      	ldr	r3, [pc, #172]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed14:	7a9b      	ldrb	r3, [r3, #10]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d03d      	beq.n	800ed96 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800ed1a:	23e0      	movs	r3, #224	@ 0xe0
 800ed1c:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800ed1e:	4b28      	ldr	r3, [pc, #160]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed20:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800ed22:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800ed24:	4b26      	ldr	r3, [pc, #152]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed26:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800ed28:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ed2a:	23ff      	movs	r3, #255	@ 0xff
 800ed2c:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800ed2e:	4b24      	ldr	r3, [pc, #144]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed30:	7a19      	ldrb	r1, [r3, #8]
 800ed32:	463b      	mov	r3, r7
 800ed34:	2201      	movs	r2, #1
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff f968 	bl	800e00c <LmHandlerSend>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800ed40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d004      	beq.n	800ed52 <LmhpComplianceProcess+0x66>
 800ed48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed4c:	f113 0f07 	cmn.w	r3, #7
 800ed50:	d106      	bne.n	800ed60 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800ed52:	4b1b      	ldr	r3, [pc, #108]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed54:	2200      	movs	r2, #0
 800ed56:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800ed58:	4b19      	ldr	r3, [pc, #100]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	729a      	strb	r2, [r3, #10]
 800ed5e:	e007      	b.n	800ed70 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800ed60:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ed64:	4817      	ldr	r0, [pc, #92]	@ (800edc4 <LmhpComplianceProcess+0xd8>)
 800ed66:	f00d fe25 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800ed6a:	4816      	ldr	r0, [pc, #88]	@ (800edc4 <LmhpComplianceProcess+0xd8>)
 800ed6c:	f00d fd44 	bl	801c7f8 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800ed70:	4a13      	ldr	r2, [pc, #76]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6053      	str	r3, [r2, #4]
 800ed76:	e00e      	b.n	800ed96 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800ed78:	4b11      	ldr	r3, [pc, #68]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d009      	beq.n	800ed96 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800ed82:	4b0f      	ldr	r3, [pc, #60]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800ed8a:	4b0d      	ldr	r3, [pc, #52]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed8c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7ff fa31 	bl	800e1f8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800ed96:	4b0a      	ldr	r3, [pc, #40]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800ed98:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00a      	beq.n	800edb6 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800eda0:	4b07      	ldr	r3, [pc, #28]	@ (800edc0 <LmhpComplianceProcess+0xd4>)
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800eda8:	4b07      	ldr	r3, [pc, #28]	@ (800edc8 <LmhpComplianceProcess+0xdc>)
 800edaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800edb0:	4b05      	ldr	r3, [pc, #20]	@ (800edc8 <LmhpComplianceProcess+0xdc>)
 800edb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb4:	4798      	blx	r3
        }
    }
}
 800edb6:	bf00      	nop
 800edb8:	3714      	adds	r7, #20
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd90      	pop	{r4, r7, pc}
 800edbe:	bf00      	nop
 800edc0:	20000944 	.word	0x20000944
 800edc4:	20000980 	.word	0x20000980
 800edc8:	200000d8 	.word	0x200000d8

0800edcc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800edcc:	b5b0      	push	{r4, r5, r7, lr}
 800edce:	b0a4      	sub	sp, #144	@ 0x90
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800edda:	4bd0      	ldr	r3, [pc, #832]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	f083 0301 	eor.w	r3, r3, #1
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f040 83bf 	bne.w	800f568 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	78db      	ldrb	r3, [r3, #3]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d103      	bne.n	800edfa <LmhpComplianceOnMcpsIndication+0x2e>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	7b9b      	ldrb	r3, [r3, #14]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d005      	beq.n	800ee06 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800edfa:	4bc8      	ldr	r3, [pc, #800]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800edfc:	8a1b      	ldrh	r3, [r3, #16]
 800edfe:	3301      	adds	r3, #1
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	4bc6      	ldr	r3, [pc, #792]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800ee04:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	7b5b      	ldrb	r3, [r3, #13]
 800ee0a:	f083 0301 	eor.w	r3, r3, #1
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f040 83ab 	bne.w	800f56c <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	78db      	ldrb	r3, [r3, #3]
 800ee1a:	2be0      	cmp	r3, #224	@ 0xe0
 800ee1c:	f040 83a8 	bne.w	800f570 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800ee20:	4bbe      	ldr	r3, [pc, #760]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800ee22:	2200      	movs	r2, #0
 800ee24:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	689a      	ldr	r2, [r3, #8]
 800ee2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee2e:	1c59      	adds	r1, r3, #1
 800ee30:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ee34:	4413      	add	r3, r2
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	2b7f      	cmp	r3, #127	@ 0x7f
 800ee3a:	f200 8372 	bhi.w	800f522 <LmhpComplianceOnMcpsIndication+0x756>
 800ee3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee44 <LmhpComplianceOnMcpsIndication+0x78>)
 800ee40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee44:	0800f045 	.word	0x0800f045
 800ee48:	0800f089 	.word	0x0800f089
 800ee4c:	0800f093 	.word	0x0800f093
 800ee50:	0800f0a9 	.word	0x0800f0a9
 800ee54:	0800f0cb 	.word	0x0800f0cb
 800ee58:	0800f0f9 	.word	0x0800f0f9
 800ee5c:	0800f125 	.word	0x0800f125
 800ee60:	0800f183 	.word	0x0800f183
 800ee64:	0800f1db 	.word	0x0800f1db
 800ee68:	0800f247 	.word	0x0800f247
 800ee6c:	0800f297 	.word	0x0800f297
 800ee70:	0800f523 	.word	0x0800f523
 800ee74:	0800f523 	.word	0x0800f523
 800ee78:	0800f523 	.word	0x0800f523
 800ee7c:	0800f523 	.word	0x0800f523
 800ee80:	0800f523 	.word	0x0800f523
 800ee84:	0800f523 	.word	0x0800f523
 800ee88:	0800f523 	.word	0x0800f523
 800ee8c:	0800f523 	.word	0x0800f523
 800ee90:	0800f523 	.word	0x0800f523
 800ee94:	0800f523 	.word	0x0800f523
 800ee98:	0800f523 	.word	0x0800f523
 800ee9c:	0800f523 	.word	0x0800f523
 800eea0:	0800f523 	.word	0x0800f523
 800eea4:	0800f523 	.word	0x0800f523
 800eea8:	0800f523 	.word	0x0800f523
 800eeac:	0800f523 	.word	0x0800f523
 800eeb0:	0800f523 	.word	0x0800f523
 800eeb4:	0800f523 	.word	0x0800f523
 800eeb8:	0800f523 	.word	0x0800f523
 800eebc:	0800f523 	.word	0x0800f523
 800eec0:	0800f523 	.word	0x0800f523
 800eec4:	0800f29f 	.word	0x0800f29f
 800eec8:	0800f2b1 	.word	0x0800f2b1
 800eecc:	0800f2b9 	.word	0x0800f2b9
 800eed0:	0800f523 	.word	0x0800f523
 800eed4:	0800f523 	.word	0x0800f523
 800eed8:	0800f523 	.word	0x0800f523
 800eedc:	0800f523 	.word	0x0800f523
 800eee0:	0800f523 	.word	0x0800f523
 800eee4:	0800f523 	.word	0x0800f523
 800eee8:	0800f523 	.word	0x0800f523
 800eeec:	0800f523 	.word	0x0800f523
 800eef0:	0800f523 	.word	0x0800f523
 800eef4:	0800f523 	.word	0x0800f523
 800eef8:	0800f523 	.word	0x0800f523
 800eefc:	0800f523 	.word	0x0800f523
 800ef00:	0800f523 	.word	0x0800f523
 800ef04:	0800f523 	.word	0x0800f523
 800ef08:	0800f523 	.word	0x0800f523
 800ef0c:	0800f523 	.word	0x0800f523
 800ef10:	0800f523 	.word	0x0800f523
 800ef14:	0800f523 	.word	0x0800f523
 800ef18:	0800f523 	.word	0x0800f523
 800ef1c:	0800f523 	.word	0x0800f523
 800ef20:	0800f523 	.word	0x0800f523
 800ef24:	0800f523 	.word	0x0800f523
 800ef28:	0800f523 	.word	0x0800f523
 800ef2c:	0800f523 	.word	0x0800f523
 800ef30:	0800f523 	.word	0x0800f523
 800ef34:	0800f523 	.word	0x0800f523
 800ef38:	0800f523 	.word	0x0800f523
 800ef3c:	0800f523 	.word	0x0800f523
 800ef40:	0800f523 	.word	0x0800f523
 800ef44:	0800f523 	.word	0x0800f523
 800ef48:	0800f523 	.word	0x0800f523
 800ef4c:	0800f523 	.word	0x0800f523
 800ef50:	0800f523 	.word	0x0800f523
 800ef54:	0800f523 	.word	0x0800f523
 800ef58:	0800f523 	.word	0x0800f523
 800ef5c:	0800f523 	.word	0x0800f523
 800ef60:	0800f523 	.word	0x0800f523
 800ef64:	0800f523 	.word	0x0800f523
 800ef68:	0800f523 	.word	0x0800f523
 800ef6c:	0800f523 	.word	0x0800f523
 800ef70:	0800f523 	.word	0x0800f523
 800ef74:	0800f523 	.word	0x0800f523
 800ef78:	0800f523 	.word	0x0800f523
 800ef7c:	0800f523 	.word	0x0800f523
 800ef80:	0800f523 	.word	0x0800f523
 800ef84:	0800f523 	.word	0x0800f523
 800ef88:	0800f523 	.word	0x0800f523
 800ef8c:	0800f523 	.word	0x0800f523
 800ef90:	0800f523 	.word	0x0800f523
 800ef94:	0800f523 	.word	0x0800f523
 800ef98:	0800f523 	.word	0x0800f523
 800ef9c:	0800f523 	.word	0x0800f523
 800efa0:	0800f523 	.word	0x0800f523
 800efa4:	0800f523 	.word	0x0800f523
 800efa8:	0800f523 	.word	0x0800f523
 800efac:	0800f523 	.word	0x0800f523
 800efb0:	0800f523 	.word	0x0800f523
 800efb4:	0800f523 	.word	0x0800f523
 800efb8:	0800f523 	.word	0x0800f523
 800efbc:	0800f523 	.word	0x0800f523
 800efc0:	0800f523 	.word	0x0800f523
 800efc4:	0800f523 	.word	0x0800f523
 800efc8:	0800f523 	.word	0x0800f523
 800efcc:	0800f523 	.word	0x0800f523
 800efd0:	0800f523 	.word	0x0800f523
 800efd4:	0800f523 	.word	0x0800f523
 800efd8:	0800f523 	.word	0x0800f523
 800efdc:	0800f523 	.word	0x0800f523
 800efe0:	0800f523 	.word	0x0800f523
 800efe4:	0800f523 	.word	0x0800f523
 800efe8:	0800f523 	.word	0x0800f523
 800efec:	0800f523 	.word	0x0800f523
 800eff0:	0800f523 	.word	0x0800f523
 800eff4:	0800f523 	.word	0x0800f523
 800eff8:	0800f523 	.word	0x0800f523
 800effc:	0800f523 	.word	0x0800f523
 800f000:	0800f523 	.word	0x0800f523
 800f004:	0800f523 	.word	0x0800f523
 800f008:	0800f523 	.word	0x0800f523
 800f00c:	0800f523 	.word	0x0800f523
 800f010:	0800f523 	.word	0x0800f523
 800f014:	0800f523 	.word	0x0800f523
 800f018:	0800f523 	.word	0x0800f523
 800f01c:	0800f523 	.word	0x0800f523
 800f020:	0800f523 	.word	0x0800f523
 800f024:	0800f523 	.word	0x0800f523
 800f028:	0800f523 	.word	0x0800f523
 800f02c:	0800f523 	.word	0x0800f523
 800f030:	0800f523 	.word	0x0800f523
 800f034:	0800f523 	.word	0x0800f523
 800f038:	0800f2eb 	.word	0x0800f2eb
 800f03c:	0800f39d 	.word	0x0800f39d
 800f040:	0800f3cd 	.word	0x0800f3cd
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800f044:	4b35      	ldr	r3, [pc, #212]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f046:	68da      	ldr	r2, [r3, #12]
 800f048:	4b34      	ldr	r3, [pc, #208]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f04a:	7a9b      	ldrb	r3, [r3, #10]
 800f04c:	1c59      	adds	r1, r3, #1
 800f04e:	b2c8      	uxtb	r0, r1
 800f050:	4932      	ldr	r1, [pc, #200]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f052:	7288      	strb	r0, [r1, #10]
 800f054:	4413      	add	r3, r2
 800f056:	2200      	movs	r2, #0
 800f058:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800f05a:	4b30      	ldr	r3, [pc, #192]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f05c:	68da      	ldr	r2, [r3, #12]
 800f05e:	4b2f      	ldr	r3, [pc, #188]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f060:	7a9b      	ldrb	r3, [r3, #10]
 800f062:	1c59      	adds	r1, r3, #1
 800f064:	b2c8      	uxtb	r0, r1
 800f066:	492d      	ldr	r1, [pc, #180]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f068:	7288      	strb	r0, [r1, #10]
 800f06a:	4413      	add	r3, r2
 800f06c:	2206      	movs	r2, #6
 800f06e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800f070:	4b2a      	ldr	r3, [pc, #168]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f072:	68da      	ldr	r2, [r3, #12]
 800f074:	4b29      	ldr	r3, [pc, #164]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f076:	7a9b      	ldrb	r3, [r3, #10]
 800f078:	1c59      	adds	r1, r3, #1
 800f07a:	b2c8      	uxtb	r0, r1
 800f07c:	4927      	ldr	r1, [pc, #156]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f07e:	7288      	strb	r0, [r1, #10]
 800f080:	4413      	add	r3, r2
 800f082:	2201      	movs	r2, #1
 800f084:	701a      	strb	r2, [r3, #0]
                break;
 800f086:	e257      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800f088:	4b24      	ldr	r3, [pc, #144]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f08a:	2201      	movs	r2, #1
 800f08c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800f090:	e252      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800f092:	4b23      	ldr	r3, [pc, #140]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x354>)
 800f094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f096:	2b00      	cmp	r3, #0
 800f098:	f000 8245 	beq.w	800f526 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800f09c:	4b20      	ldr	r3, [pc, #128]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x354>)
 800f09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0a0:	2101      	movs	r1, #1
 800f0a2:	2002      	movs	r0, #2
 800f0a4:	4798      	blx	r3
                }
                break;
 800f0a6:	e23e      	b.n	800f526 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	689a      	ldr	r2, [r3, #8]
 800f0ac:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f0b0:	1c59      	adds	r1, r3, #1
 800f0b2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f0b6:	4413      	add	r3, r2
 800f0b8:	781a      	ldrb	r2, [r3, #0]
 800f0ba:	4b18      	ldr	r3, [pc, #96]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f0bc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800f0c0:	4b16      	ldr	r3, [pc, #88]	@ (800f11c <LmhpComplianceOnMcpsIndication+0x350>)
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800f0c8:	e236      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800f0ca:	2304      	movs	r3, #4
 800f0cc:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	689a      	ldr	r2, [r3, #8]
 800f0d2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f0d6:	1c59      	adds	r1, r3, #1
 800f0d8:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f0dc:	4413      	add	r3, r2
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	bf14      	ite	ne
 800f0e4:	2301      	movne	r3, #1
 800f0e6:	2300      	moveq	r3, #0
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800f0ec:	f107 0308 	add.w	r3, r7, #8
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f004 fb2b 	bl	801374c <LoRaMacMibSetRequestConfirm>
                break;
 800f0f6:	e21f      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	689a      	ldr	r2, [r3, #8]
 800f0fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f100:	1c59      	adds	r1, r3, #1
 800f102:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f106:	4413      	add	r3, r2
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	bf14      	ite	ne
 800f10e:	2301      	movne	r3, #1
 800f110:	2300      	moveq	r3, #0
 800f112:	b2db      	uxtb	r3, r3
 800f114:	4618      	mov	r0, r3
 800f116:	f005 f9f7 	bl	8014508 <LoRaMacTestSetDutyCycleOn>
                break;
 800f11a:	e20d      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
 800f11c:	20000944 	.word	0x20000944
 800f120:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800f124:	4ba5      	ldr	r3, [pc, #660]	@ (800f3bc <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f126:	f107 0408 	add.w	r4, r7, #8
 800f12a:	461d      	mov	r5, r3
 800f12c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f12e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f134:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f138:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	689a      	ldr	r2, [r3, #8]
 800f140:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f144:	1c59      	adds	r1, r3, #1
 800f146:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f14a:	4413      	add	r3, r2
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800f152:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f156:	2b0a      	cmp	r3, #10
 800f158:	f200 81e7 	bhi.w	800f52a <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800f15c:	4b98      	ldr	r3, [pc, #608]	@ (800f3c0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	2b00      	cmp	r3, #0
 800f164:	f000 81e1 	beq.w	800f52a <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800f168:	4b95      	ldr	r3, [pc, #596]	@ (800f3c0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	685a      	ldr	r2, [r3, #4]
 800f16e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	3390      	adds	r3, #144	@ 0x90
 800f176:	443b      	add	r3, r7
 800f178:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800f17c:	4618      	mov	r0, r3
 800f17e:	4790      	blx	r2
                    }
                }
                break;
 800f180:	e1d3      	b.n	800f52a <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	689a      	ldr	r2, [r3, #8]
 800f186:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f18a:	1c59      	adds	r1, r3, #1
 800f18c:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f190:	4413      	add	r3, r2
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800f198:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d004      	beq.n	800f1aa <LmhpComplianceOnMcpsIndication+0x3de>
 800f1a0:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	f040 81c2 	bne.w	800f52e <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f1aa:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	bf14      	ite	ne
 800f1b2:	2301      	movne	r3, #1
 800f1b4:	2300      	moveq	r3, #0
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	4b82      	ldr	r3, [pc, #520]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1bc:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800f1be:	4b80      	ldr	r3, [pc, #512]	@ (800f3c0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f000 81b2 	beq.w	800f52e <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800f1ca:	4b7d      	ldr	r3, [pc, #500]	@ (800f3c0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	4a7c      	ldr	r2, [pc, #496]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1d2:	7a12      	ldrb	r2, [r2, #8]
 800f1d4:	4610      	mov	r0, r2
 800f1d6:	4798      	blx	r3
                    }
                }
                break;
 800f1d8:	e1a9      	b.n	800f52e <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800f1da:	4b7a      	ldr	r3, [pc, #488]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1dc:	68da      	ldr	r2, [r3, #12]
 800f1de:	4b79      	ldr	r3, [pc, #484]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1e0:	7a9b      	ldrb	r3, [r3, #10]
 800f1e2:	1c59      	adds	r1, r3, #1
 800f1e4:	b2c8      	uxtb	r0, r1
 800f1e6:	4977      	ldr	r1, [pc, #476]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1e8:	7288      	strb	r0, [r1, #10]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	2208      	movs	r2, #8
 800f1ee:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800f1f6:	e019      	b.n	800f22c <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	689a      	ldr	r2, [r3, #8]
 800f1fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f200:	1c59      	adds	r1, r3, #1
 800f202:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f206:	4413      	add	r3, r2
 800f208:	781a      	ldrb	r2, [r3, #0]
 800f20a:	4b6e      	ldr	r3, [pc, #440]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f20c:	68d9      	ldr	r1, [r3, #12]
 800f20e:	4b6d      	ldr	r3, [pc, #436]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f210:	7a9b      	ldrb	r3, [r3, #10]
 800f212:	1c58      	adds	r0, r3, #1
 800f214:	b2c4      	uxtb	r4, r0
 800f216:	486b      	ldr	r0, [pc, #428]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f218:	7284      	strb	r4, [r0, #10]
 800f21a:	440b      	add	r3, r1
 800f21c:	3201      	adds	r2, #1
 800f21e:	b2d2      	uxtb	r2, r2
 800f220:	701a      	strb	r2, [r3, #0]
                     i++ )
 800f222:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800f226:	3301      	adds	r3, #1
 800f228:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f22c:	4b65      	ldr	r3, [pc, #404]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f22e:	7a5a      	ldrb	r2, [r3, #9]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	7b1b      	ldrb	r3, [r3, #12]
 800f234:	4293      	cmp	r3, r2
 800f236:	bf28      	it	cs
 800f238:	4613      	movcs	r3, r2
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800f240:	429a      	cmp	r2, r3
 800f242:	d3d9      	bcc.n	800f1f8 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800f244:	e178      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800f246:	4b5f      	ldr	r3, [pc, #380]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f248:	68da      	ldr	r2, [r3, #12]
 800f24a:	4b5e      	ldr	r3, [pc, #376]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f24c:	7a9b      	ldrb	r3, [r3, #10]
 800f24e:	1c59      	adds	r1, r3, #1
 800f250:	b2c8      	uxtb	r0, r1
 800f252:	495c      	ldr	r1, [pc, #368]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f254:	7288      	strb	r0, [r1, #10]
 800f256:	4413      	add	r3, r2
 800f258:	2209      	movs	r2, #9
 800f25a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800f25c:	4b59      	ldr	r3, [pc, #356]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f25e:	8a18      	ldrh	r0, [r3, #16]
 800f260:	4b58      	ldr	r3, [pc, #352]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f262:	68da      	ldr	r2, [r3, #12]
 800f264:	4b57      	ldr	r3, [pc, #348]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f266:	7a9b      	ldrb	r3, [r3, #10]
 800f268:	1c59      	adds	r1, r3, #1
 800f26a:	b2cc      	uxtb	r4, r1
 800f26c:	4955      	ldr	r1, [pc, #340]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f26e:	728c      	strb	r4, [r1, #10]
 800f270:	4413      	add	r3, r2
 800f272:	b2c2      	uxtb	r2, r0
 800f274:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800f276:	4b53      	ldr	r3, [pc, #332]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f278:	8a1b      	ldrh	r3, [r3, #16]
 800f27a:	0a1b      	lsrs	r3, r3, #8
 800f27c:	b298      	uxth	r0, r3
 800f27e:	4b51      	ldr	r3, [pc, #324]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f280:	68da      	ldr	r2, [r3, #12]
 800f282:	4b50      	ldr	r3, [pc, #320]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f284:	7a9b      	ldrb	r3, [r3, #10]
 800f286:	1c59      	adds	r1, r3, #1
 800f288:	b2cc      	uxtb	r4, r1
 800f28a:	494e      	ldr	r1, [pc, #312]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f28c:	728c      	strb	r4, [r1, #10]
 800f28e:	4413      	add	r3, r2
 800f290:	b2c2      	uxtb	r2, r0
 800f292:	701a      	strb	r2, [r3, #0]
                break;
 800f294:	e150      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800f296:	4b4b      	ldr	r3, [pc, #300]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f298:	2200      	movs	r2, #0
 800f29a:	821a      	strh	r2, [r3, #16]
                break;
 800f29c:	e14c      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800f29e:	2305      	movs	r3, #5
 800f2a0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800f2a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f004 fe51 	bl	8013f50 <LoRaMacMlmeRequest>
                break;
 800f2ae:	e143      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800f2b0:	4b45      	ldr	r3, [pc, #276]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800f2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b4:	4798      	blx	r3
                break;
 800f2b6:	e13f      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	689a      	ldr	r2, [r3, #8]
 800f2bc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f2c0:	1c59      	adds	r1, r3, #1
 800f2c2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f2c6:	4413      	add	r3, r2
 800f2c8:	781a      	ldrb	r2, [r3, #0]
 800f2ca:	4b3e      	ldr	r3, [pc, #248]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f2cc:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800f2ce:	4b3c      	ldr	r3, [pc, #240]	@ (800f3c0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f000 812c 	beq.w	800f532 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800f2da:	4b39      	ldr	r3, [pc, #228]	@ (800f3c0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	4a38      	ldr	r2, [pc, #224]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f2e2:	7d52      	ldrb	r2, [r2, #21]
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	4798      	blx	r3
                }
                break;
 800f2e8:	e123      	b.n	800f532 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	7b1b      	ldrb	r3, [r3, #12]
 800f2ee:	2b07      	cmp	r3, #7
 800f2f0:	f040 8121 	bne.w	800f536 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800f2f4:	2306      	movs	r3, #6
 800f2f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	689a      	ldr	r2, [r3, #8]
 800f2fe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f302:	4413      	add	r3, r2
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	b21a      	sxth	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6899      	ldr	r1, [r3, #8]
 800f30c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f310:	3301      	adds	r3, #1
 800f312:	440b      	add	r3, r1
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	b21b      	sxth	r3, r3
 800f318:	021b      	lsls	r3, r3, #8
 800f31a:	b21b      	sxth	r3, r3
 800f31c:	4313      	orrs	r3, r2
 800f31e:	b21b      	sxth	r3, r3
 800f320:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800f322:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800f326:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f32a:	3302      	adds	r3, #2
 800f32c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	689a      	ldr	r2, [r3, #8]
 800f334:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f338:	4413      	add	r3, r2
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	4619      	mov	r1, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	689a      	ldr	r2, [r3, #8]
 800f342:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f346:	3301      	adds	r3, #1
 800f348:	4413      	add	r3, r2
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	021b      	lsls	r3, r3, #8
 800f34e:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6899      	ldr	r1, [r3, #8]
 800f356:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f35a:	3302      	adds	r3, #2
 800f35c:	440b      	add	r3, r1
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f362:	4313      	orrs	r3, r2
 800f364:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f366:	2364      	movs	r3, #100	@ 0x64
 800f368:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800f36c:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800f36e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f372:	3303      	adds	r3, #3
 800f374:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	689a      	ldr	r2, [r3, #8]
 800f37c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f380:	1c59      	adds	r1, r3, #1
 800f382:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f386:	4413      	add	r3, r2
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	b25b      	sxtb	r3, r3
 800f38c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800f390:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f394:	4618      	mov	r0, r3
 800f396:	f004 fddb 	bl	8013f50 <LoRaMacMlmeRequest>
                }
                break;
 800f39a:	e0cc      	b.n	800f536 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800f39c:	233b      	movs	r3, #59	@ 0x3b
 800f39e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f3a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f004 f9cd 	bl	801374c <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800f3b2:	4b04      	ldr	r3, [pc, #16]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800f3ba:	e0bd      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
 800f3bc:	08020640 	.word	0x08020640
 800f3c0:	2000097c 	.word	0x2000097c
 800f3c4:	20000944 	.word	0x20000944
 800f3c8:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800f3cc:	232a      	movs	r3, #42	@ 0x2a
 800f3ce:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800f3d0:	f107 0308 	add.w	r3, r7, #8
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f003 ffe1 	bl	801339c <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800f3e2:	4b65      	ldr	r3, [pc, #404]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3e4:	68da      	ldr	r2, [r3, #12]
 800f3e6:	4b64      	ldr	r3, [pc, #400]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3e8:	7a9b      	ldrb	r3, [r3, #10]
 800f3ea:	1c59      	adds	r1, r3, #1
 800f3ec:	b2c8      	uxtb	r0, r1
 800f3ee:	4962      	ldr	r1, [pc, #392]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3f0:	7288      	strb	r0, [r1, #10]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	227f      	movs	r2, #127	@ 0x7f
 800f3f6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800f3f8:	4b60      	ldr	r3, [pc, #384]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	4b5e      	ldr	r3, [pc, #376]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3fe:	68d9      	ldr	r1, [r3, #12]
 800f400:	4b5d      	ldr	r3, [pc, #372]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f402:	7a9b      	ldrb	r3, [r3, #10]
 800f404:	1c58      	adds	r0, r3, #1
 800f406:	b2c4      	uxtb	r4, r0
 800f408:	485b      	ldr	r0, [pc, #364]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f40a:	7284      	strb	r4, [r0, #10]
 800f40c:	440b      	add	r3, r1
 800f40e:	78d2      	ldrb	r2, [r2, #3]
 800f410:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800f412:	4b5a      	ldr	r3, [pc, #360]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f414:	681a      	ldr	r2, [r3, #0]
 800f416:	4b58      	ldr	r3, [pc, #352]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f418:	68d9      	ldr	r1, [r3, #12]
 800f41a:	4b57      	ldr	r3, [pc, #348]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f41c:	7a9b      	ldrb	r3, [r3, #10]
 800f41e:	1c58      	adds	r0, r3, #1
 800f420:	b2c4      	uxtb	r4, r0
 800f422:	4855      	ldr	r0, [pc, #340]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f424:	7284      	strb	r4, [r0, #10]
 800f426:	440b      	add	r3, r1
 800f428:	7892      	ldrb	r2, [r2, #2]
 800f42a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800f42c:	4b53      	ldr	r3, [pc, #332]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	4b51      	ldr	r3, [pc, #324]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f432:	68d9      	ldr	r1, [r3, #12]
 800f434:	4b50      	ldr	r3, [pc, #320]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f436:	7a9b      	ldrb	r3, [r3, #10]
 800f438:	1c58      	adds	r0, r3, #1
 800f43a:	b2c4      	uxtb	r4, r0
 800f43c:	484e      	ldr	r0, [pc, #312]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f43e:	7284      	strb	r4, [r0, #10]
 800f440:	440b      	add	r3, r1
 800f442:	7852      	ldrb	r2, [r2, #1]
 800f444:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800f446:	4b4d      	ldr	r3, [pc, #308]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	4b4b      	ldr	r3, [pc, #300]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f44c:	68d9      	ldr	r1, [r3, #12]
 800f44e:	4b4a      	ldr	r3, [pc, #296]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f450:	7a9b      	ldrb	r3, [r3, #10]
 800f452:	1c58      	adds	r0, r3, #1
 800f454:	b2c4      	uxtb	r4, r0
 800f456:	4848      	ldr	r0, [pc, #288]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f458:	7284      	strb	r4, [r0, #10]
 800f45a:	440b      	add	r3, r1
 800f45c:	7812      	ldrb	r2, [r2, #0]
 800f45e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800f460:	4b45      	ldr	r3, [pc, #276]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f462:	68da      	ldr	r2, [r3, #12]
 800f464:	4b44      	ldr	r3, [pc, #272]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f466:	7a9b      	ldrb	r3, [r3, #10]
 800f468:	1c59      	adds	r1, r3, #1
 800f46a:	b2c8      	uxtb	r0, r1
 800f46c:	4942      	ldr	r1, [pc, #264]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f46e:	7288      	strb	r0, [r1, #10]
 800f470:	4413      	add	r3, r2
 800f472:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800f476:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800f478:	4b3f      	ldr	r3, [pc, #252]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f47a:	68da      	ldr	r2, [r3, #12]
 800f47c:	4b3e      	ldr	r3, [pc, #248]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f47e:	7a9b      	ldrb	r3, [r3, #10]
 800f480:	1c59      	adds	r1, r3, #1
 800f482:	b2c8      	uxtb	r0, r1
 800f484:	493c      	ldr	r1, [pc, #240]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f486:	7288      	strb	r0, [r1, #10]
 800f488:	4413      	add	r3, r2
 800f48a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800f48e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800f490:	4b39      	ldr	r3, [pc, #228]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f492:	68da      	ldr	r2, [r3, #12]
 800f494:	4b38      	ldr	r3, [pc, #224]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f496:	7a9b      	ldrb	r3, [r3, #10]
 800f498:	1c59      	adds	r1, r3, #1
 800f49a:	b2c8      	uxtb	r0, r1
 800f49c:	4936      	ldr	r1, [pc, #216]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f49e:	7288      	strb	r0, [r1, #10]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800f4a6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800f4a8:	4b33      	ldr	r3, [pc, #204]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4aa:	68da      	ldr	r2, [r3, #12]
 800f4ac:	4b32      	ldr	r3, [pc, #200]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4ae:	7a9b      	ldrb	r3, [r3, #10]
 800f4b0:	1c59      	adds	r1, r3, #1
 800f4b2:	b2c8      	uxtb	r0, r1
 800f4b4:	4930      	ldr	r1, [pc, #192]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4b6:	7288      	strb	r0, [r1, #10]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f4be:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800f4c0:	4b2d      	ldr	r3, [pc, #180]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4c2:	68da      	ldr	r2, [r3, #12]
 800f4c4:	4b2c      	ldr	r3, [pc, #176]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4c6:	7a9b      	ldrb	r3, [r3, #10]
 800f4c8:	1c59      	adds	r1, r3, #1
 800f4ca:	b2c8      	uxtb	r0, r1
 800f4cc:	492a      	ldr	r1, [pc, #168]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4ce:	7288      	strb	r0, [r1, #10]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800f4d6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800f4d8:	4b27      	ldr	r3, [pc, #156]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4da:	68da      	ldr	r2, [r3, #12]
 800f4dc:	4b26      	ldr	r3, [pc, #152]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4de:	7a9b      	ldrb	r3, [r3, #10]
 800f4e0:	1c59      	adds	r1, r3, #1
 800f4e2:	b2c8      	uxtb	r0, r1
 800f4e4:	4924      	ldr	r1, [pc, #144]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4e6:	7288      	strb	r0, [r1, #10]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800f4ee:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800f4f0:	4b21      	ldr	r3, [pc, #132]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4f2:	68da      	ldr	r2, [r3, #12]
 800f4f4:	4b20      	ldr	r3, [pc, #128]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4f6:	7a9b      	ldrb	r3, [r3, #10]
 800f4f8:	1c59      	adds	r1, r3, #1
 800f4fa:	b2c8      	uxtb	r0, r1
 800f4fc:	491e      	ldr	r1, [pc, #120]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4fe:	7288      	strb	r0, [r1, #10]
 800f500:	4413      	add	r3, r2
 800f502:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f506:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800f508:	4b1b      	ldr	r3, [pc, #108]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f50a:	68da      	ldr	r2, [r3, #12]
 800f50c:	4b1a      	ldr	r3, [pc, #104]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f50e:	7a9b      	ldrb	r3, [r3, #10]
 800f510:	1c59      	adds	r1, r3, #1
 800f512:	b2c8      	uxtb	r0, r1
 800f514:	4918      	ldr	r1, [pc, #96]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f516:	7288      	strb	r0, [r1, #10]
 800f518:	4413      	add	r3, r2
 800f51a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f51e:	701a      	strb	r2, [r3, #0]
                break;
 800f520:	e00a      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800f522:	bf00      	nop
 800f524:	e008      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f526:	bf00      	nop
 800f528:	e006      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f52a:	bf00      	nop
 800f52c:	e004      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f52e:	bf00      	nop
 800f530:	e002      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f532:	bf00      	nop
 800f534:	e000      	b.n	800f538 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f536:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800f538:	4b0f      	ldr	r3, [pc, #60]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f53a:	7a9b      	ldrb	r3, [r3, #10]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00c      	beq.n	800f55a <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800f540:	4b0f      	ldr	r3, [pc, #60]	@ (800f580 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f542:	7a5b      	ldrb	r3, [r3, #9]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d114      	bne.n	800f572 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800f548:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f54c:	480c      	ldr	r0, [pc, #48]	@ (800f580 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f54e:	f00d fa31 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800f552:	480b      	ldr	r0, [pc, #44]	@ (800f580 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f554:	f00d f950 	bl	801c7f8 <UTIL_TIMER_Start>
 800f558:	e00b      	b.n	800f572 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800f55a:	4809      	ldr	r0, [pc, #36]	@ (800f580 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f55c:	f00d f9ba 	bl	801c8d4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800f560:	4b05      	ldr	r3, [pc, #20]	@ (800f578 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f562:	2200      	movs	r2, #0
 800f564:	705a      	strb	r2, [r3, #1]
 800f566:	e004      	b.n	800f572 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f568:	bf00      	nop
 800f56a:	e002      	b.n	800f572 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f56c:	bf00      	nop
 800f56e:	e000      	b.n	800f572 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f570:	bf00      	nop
    }
}
 800f572:	3790      	adds	r7, #144	@ 0x90
 800f574:	46bd      	mov	sp, r7
 800f576:	bdb0      	pop	{r4, r5, r7, pc}
 800f578:	20000944 	.word	0x20000944
 800f57c:	2000097c 	.word	0x2000097c
 800f580:	20000980 	.word	0x20000980

0800f584 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800f58c:	bf00      	nop
    }
}
 800f58e:	bf00      	nop
 800f590:	370c      	adds	r7, #12
 800f592:	46bd      	mov	sp, r7
 800f594:	bc80      	pop	{r7}
 800f596:	4770      	bx	lr

0800f598 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f5a0:	4b05      	ldr	r3, [pc, #20]	@ (800f5b8 <LmhpComplianceOnMlmeIndication+0x20>)
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	f083 0301 	eor.w	r3, r3, #1
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	2b00      	cmp	r3, #0
    {
        return;
 800f5ac:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800f5ae:	370c      	adds	r7, #12
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bc80      	pop	{r7}
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	20000944 	.word	0x20000944

0800f5bc <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800f5c4:	4b08      	ldr	r3, [pc, #32]	@ (800f5e8 <OnProcessTimer+0x2c>)
 800f5c6:	7a9b      	ldrb	r3, [r3, #10]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d002      	beq.n	800f5d2 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800f5cc:	4b06      	ldr	r3, [pc, #24]	@ (800f5e8 <OnProcessTimer+0x2c>)
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800f5d2:	4b06      	ldr	r3, [pc, #24]	@ (800f5ec <OnProcessTimer+0x30>)
 800f5d4:	695b      	ldr	r3, [r3, #20]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d002      	beq.n	800f5e0 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800f5da:	4b04      	ldr	r3, [pc, #16]	@ (800f5ec <OnProcessTimer+0x30>)
 800f5dc:	695b      	ldr	r3, [r3, #20]
 800f5de:	4798      	blx	r3
    }
}
 800f5e0:	bf00      	nop
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	20000944 	.word	0x20000944
 800f5ec:	200000d8 	.word	0x200000d8

0800f5f0 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800f5f8:	2300      	movs	r3, #0
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	370c      	adds	r7, #12
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bc80      	pop	{r7}
 800f602:	4770      	bx	lr

0800f604 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	4603      	mov	r3, r0
 800f60c:	6039      	str	r1, [r7, #0]
 800f60e:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800f610:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800f614:	4618      	mov	r0, r3
 800f616:	370c      	adds	r7, #12
 800f618:	46bd      	mov	sp, r7
 800f61a:	bc80      	pop	{r7}
 800f61c:	4770      	bx	lr
	...

0800f620 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800f620:	b590      	push	{r4, r7, lr}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f626:	f00d fa6f 	bl	801cb08 <UTIL_TIMER_GetCurrentTime>
 800f62a:	4603      	mov	r3, r0
 800f62c:	4a0f      	ldr	r2, [pc, #60]	@ (800f66c <OnRadioTxDone+0x4c>)
 800f62e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f630:	4c0f      	ldr	r4, [pc, #60]	@ (800f670 <OnRadioTxDone+0x50>)
 800f632:	463b      	mov	r3, r7
 800f634:	4618      	mov	r0, r3
 800f636:	f00c feb3 	bl	801c3a0 <SysTimeGet>
 800f63a:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800f63e:	463a      	mov	r2, r7
 800f640:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f644:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f648:	4a0a      	ldr	r2, [pc, #40]	@ (800f674 <OnRadioTxDone+0x54>)
 800f64a:	7813      	ldrb	r3, [r2, #0]
 800f64c:	f043 0320 	orr.w	r3, r3, #32
 800f650:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f652:	f003 fa9f 	bl	8012b94 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f656:	4b08      	ldr	r3, [pc, #32]	@ (800f678 <OnRadioTxDone+0x58>)
 800f658:	2201      	movs	r2, #1
 800f65a:	2100      	movs	r1, #0
 800f65c:	2002      	movs	r0, #2
 800f65e:	f00d fb43 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f662:	bf00      	nop
 800f664:	370c      	adds	r7, #12
 800f666:	46bd      	mov	sp, r7
 800f668:	bd90      	pop	{r4, r7, pc}
 800f66a:	bf00      	nop
 800f66c:	20001ad8 	.word	0x20001ad8
 800f670:	20000998 	.word	0x20000998
 800f674:	20001ad4 	.word	0x20001ad4
 800f678:	0802066c 	.word	0x0802066c

0800f67c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	4608      	mov	r0, r1
 800f686:	4611      	mov	r1, r2
 800f688:	461a      	mov	r2, r3
 800f68a:	4603      	mov	r3, r0
 800f68c:	817b      	strh	r3, [r7, #10]
 800f68e:	460b      	mov	r3, r1
 800f690:	813b      	strh	r3, [r7, #8]
 800f692:	4613      	mov	r3, r2
 800f694:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f696:	f00d fa37 	bl	801cb08 <UTIL_TIMER_GetCurrentTime>
 800f69a:	4603      	mov	r3, r0
 800f69c:	4a11      	ldr	r2, [pc, #68]	@ (800f6e4 <OnRadioRxDone+0x68>)
 800f69e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f6a0:	4a10      	ldr	r2, [pc, #64]	@ (800f6e4 <OnRadioRxDone+0x68>)
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f6a6:	4a0f      	ldr	r2, [pc, #60]	@ (800f6e4 <OnRadioRxDone+0x68>)
 800f6a8:	897b      	ldrh	r3, [r7, #10]
 800f6aa:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f6ac:	4a0d      	ldr	r2, [pc, #52]	@ (800f6e4 <OnRadioRxDone+0x68>)
 800f6ae:	893b      	ldrh	r3, [r7, #8]
 800f6b0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f6b2:	4a0c      	ldr	r2, [pc, #48]	@ (800f6e4 <OnRadioRxDone+0x68>)
 800f6b4:	79fb      	ldrb	r3, [r7, #7]
 800f6b6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f6b8:	4a0b      	ldr	r2, [pc, #44]	@ (800f6e8 <OnRadioRxDone+0x6c>)
 800f6ba:	7813      	ldrb	r3, [r2, #0]
 800f6bc:	f043 0310 	orr.w	r3, r3, #16
 800f6c0:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800f6c2:	4a09      	ldr	r2, [pc, #36]	@ (800f6e8 <OnRadioRxDone+0x6c>)
 800f6c4:	7813      	ldrb	r3, [r2, #0]
 800f6c6:	f043 0301 	orr.w	r3, r3, #1
 800f6ca:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800f6cc:	f003 fa62 	bl	8012b94 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f6d0:	4b06      	ldr	r3, [pc, #24]	@ (800f6ec <OnRadioRxDone+0x70>)
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	2002      	movs	r0, #2
 800f6d8:	f00d fb06 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f6dc:	bf00      	nop
 800f6de:	3710      	adds	r7, #16
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	20001adc 	.word	0x20001adc
 800f6e8:	20001ad4 	.word	0x20001ad4
 800f6ec:	0802067c 	.word	0x0802067c

0800f6f0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f6f4:	4a07      	ldr	r2, [pc, #28]	@ (800f714 <OnRadioTxTimeout+0x24>)
 800f6f6:	7813      	ldrb	r3, [r2, #0]
 800f6f8:	f043 0308 	orr.w	r3, r3, #8
 800f6fc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f6fe:	f003 fa49 	bl	8012b94 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f702:	4b05      	ldr	r3, [pc, #20]	@ (800f718 <OnRadioTxTimeout+0x28>)
 800f704:	2201      	movs	r2, #1
 800f706:	2100      	movs	r1, #0
 800f708:	2002      	movs	r0, #2
 800f70a:	f00d faed 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f70e:	bf00      	nop
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	20001ad4 	.word	0x20001ad4
 800f718:	0802068c 	.word	0x0802068c

0800f71c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f720:	4a04      	ldr	r2, [pc, #16]	@ (800f734 <OnRadioRxError+0x18>)
 800f722:	7813      	ldrb	r3, [r2, #0]
 800f724:	f043 0304 	orr.w	r3, r3, #4
 800f728:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f72a:	f003 fa33 	bl	8012b94 <OnMacProcessNotify>
}
 800f72e:	bf00      	nop
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	20001ad4 	.word	0x20001ad4

0800f738 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f73c:	4a07      	ldr	r2, [pc, #28]	@ (800f75c <OnRadioRxTimeout+0x24>)
 800f73e:	7813      	ldrb	r3, [r2, #0]
 800f740:	f043 0302 	orr.w	r3, r3, #2
 800f744:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f746:	f003 fa25 	bl	8012b94 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f74a:	4b05      	ldr	r3, [pc, #20]	@ (800f760 <OnRadioRxTimeout+0x28>)
 800f74c:	2201      	movs	r2, #1
 800f74e:	2100      	movs	r1, #0
 800f750:	2002      	movs	r0, #2
 800f752:	f00d fac9 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f756:	bf00      	nop
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	20001ad4 	.word	0x20001ad4
 800f760:	0802069c 	.word	0x0802069c

0800f764 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f764:	b480      	push	{r7}
 800f766:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f768:	4b08      	ldr	r3, [pc, #32]	@ (800f78c <UpdateRxSlotIdleState+0x28>)
 800f76a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f76e:	2b02      	cmp	r3, #2
 800f770:	d004      	beq.n	800f77c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f772:	4b07      	ldr	r3, [pc, #28]	@ (800f790 <UpdateRxSlotIdleState+0x2c>)
 800f774:	2206      	movs	r2, #6
 800f776:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f77a:	e003      	b.n	800f784 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f77c:	4b04      	ldr	r3, [pc, #16]	@ (800f790 <UpdateRxSlotIdleState+0x2c>)
 800f77e:	2202      	movs	r2, #2
 800f780:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800f784:	bf00      	nop
 800f786:	46bd      	mov	sp, r7
 800f788:	bc80      	pop	{r7}
 800f78a:	4770      	bx	lr
 800f78c:	20000ecc 	.word	0x20000ecc
 800f790:	20000998 	.word	0x20000998

0800f794 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b092      	sub	sp, #72	@ 0x48
 800f798:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f79a:	4b4a      	ldr	r3, [pc, #296]	@ (800f8c4 <ProcessRadioTxDone+0x130>)
 800f79c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f7a0:	2b02      	cmp	r3, #2
 800f7a2:	d002      	beq.n	800f7aa <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f7a4:	4b48      	ldr	r3, [pc, #288]	@ (800f8c8 <ProcessRadioTxDone+0x134>)
 800f7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7a8:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7aa:	f3ef 8310 	mrs	r3, PRIMASK
 800f7ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800f7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800f7b4:	b672      	cpsid	i
}
 800f7b6:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800f7b8:	f00d f9a6 	bl	801cb08 <UTIL_TIMER_GetCurrentTime>
 800f7bc:	4602      	mov	r2, r0
 800f7be:	4b43      	ldr	r3, [pc, #268]	@ (800f8cc <ProcessRadioTxDone+0x138>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800f7c6:	4b42      	ldr	r3, [pc, #264]	@ (800f8d0 <ProcessRadioTxDone+0x13c>)
 800f7c8:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ce:	1ad3      	subs	r3, r2, r3
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	4840      	ldr	r0, [pc, #256]	@ (800f8d4 <ProcessRadioTxDone+0x140>)
 800f7d4:	f00d f8ee 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f7d8:	483e      	ldr	r0, [pc, #248]	@ (800f8d4 <ProcessRadioTxDone+0x140>)
 800f7da:	f00d f80d 	bl	801c7f8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800f7de:	4b3c      	ldr	r3, [pc, #240]	@ (800f8d0 <ProcessRadioTxDone+0x13c>)
 800f7e0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	483b      	ldr	r0, [pc, #236]	@ (800f8d8 <ProcessRadioTxDone+0x144>)
 800f7ec:	f00d f8e2 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f7f0:	4839      	ldr	r0, [pc, #228]	@ (800f8d8 <ProcessRadioTxDone+0x144>)
 800f7f2:	f00d f801 	bl	801c7f8 <UTIL_TIMER_Start>
 800f7f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7f8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7fc:	f383 8810 	msr	PRIMASK, r3
}
 800f800:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800f802:	4b33      	ldr	r3, [pc, #204]	@ (800f8d0 <ProcessRadioTxDone+0x13c>)
 800f804:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d01a      	beq.n	800f842 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800f80c:	2315      	movs	r3, #21
 800f80e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f812:	4b2c      	ldr	r3, [pc, #176]	@ (800f8c4 <ProcessRadioTxDone+0x130>)
 800f814:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f818:	f107 0220 	add.w	r2, r7, #32
 800f81c:	4611      	mov	r1, r2
 800f81e:	4618      	mov	r0, r3
 800f820:	f006 ff40 	bl	80166a4 <RegionGetPhyParam>
 800f824:	4603      	mov	r3, r0
 800f826:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f828:	4b29      	ldr	r3, [pc, #164]	@ (800f8d0 <ProcessRadioTxDone+0x13c>)
 800f82a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	4413      	add	r3, r2
 800f832:	4619      	mov	r1, r3
 800f834:	4829      	ldr	r0, [pc, #164]	@ (800f8dc <ProcessRadioTxDone+0x148>)
 800f836:	f00d f8bd 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800f83a:	4828      	ldr	r0, [pc, #160]	@ (800f8dc <ProcessRadioTxDone+0x148>)
 800f83c:	f00c ffdc 	bl	801c7f8 <UTIL_TIMER_Start>
 800f840:	e003      	b.n	800f84a <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f842:	4b23      	ldr	r3, [pc, #140]	@ (800f8d0 <ProcessRadioTxDone+0x13c>)
 800f844:	2200      	movs	r2, #0
 800f846:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f84a:	4b20      	ldr	r3, [pc, #128]	@ (800f8cc <ProcessRadioTxDone+0x138>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	4a1d      	ldr	r2, [pc, #116]	@ (800f8c4 <ProcessRadioTxDone+0x130>)
 800f850:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f852:	4b1f      	ldr	r3, [pc, #124]	@ (800f8d0 <ProcessRadioTxDone+0x13c>)
 800f854:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800f858:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f85a:	4b1c      	ldr	r3, [pc, #112]	@ (800f8cc <ProcessRadioTxDone+0x138>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f860:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f864:	4618      	mov	r0, r3
 800f866:	f00c fdd3 	bl	801c410 <SysTimeGetMcuTime>
 800f86a:	4638      	mov	r0, r7
 800f86c:	4b15      	ldr	r3, [pc, #84]	@ (800f8c4 <ProcessRadioTxDone+0x130>)
 800f86e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800f872:	9200      	str	r2, [sp, #0]
 800f874:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800f878:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f87c:	ca06      	ldmia	r2, {r1, r2}
 800f87e:	f00c fd28 	bl	801c2d2 <SysTimeSub>
 800f882:	f107 0314 	add.w	r3, r7, #20
 800f886:	463a      	mov	r2, r7
 800f888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f88c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f890:	4b0f      	ldr	r3, [pc, #60]	@ (800f8d0 <ProcessRadioTxDone+0x13c>)
 800f892:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800f896:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f898:	2301      	movs	r3, #1
 800f89a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f89c:	4b09      	ldr	r3, [pc, #36]	@ (800f8c4 <ProcessRadioTxDone+0x130>)
 800f89e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d101      	bne.n	800f8aa <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f8aa:	4b06      	ldr	r3, [pc, #24]	@ (800f8c4 <ProcessRadioTxDone+0x130>)
 800f8ac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f8b0:	f107 0208 	add.w	r2, r7, #8
 800f8b4:	4611      	mov	r1, r2
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f006 ff0c 	bl	80166d4 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800f8bc:	bf00      	nop
 800f8be:	3740      	adds	r7, #64	@ 0x40
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	20000ecc 	.word	0x20000ecc
 800f8c8:	08020ce0 	.word	0x08020ce0
 800f8cc:	20001ad8 	.word	0x20001ad8
 800f8d0:	20000998 	.word	0x20000998
 800f8d4:	20000d18 	.word	0x20000d18
 800f8d8:	20000d30 	.word	0x20000d30
 800f8dc:	20000d98 	.word	0x20000d98

0800f8e0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f8e4:	4b10      	ldr	r3, [pc, #64]	@ (800f928 <PrepareRxDoneAbort+0x48>)
 800f8e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8ee:	4a0e      	ldr	r2, [pc, #56]	@ (800f928 <PrepareRxDoneAbort+0x48>)
 800f8f0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800f8f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f928 <PrepareRxDoneAbort+0x48>)
 800f8f6:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d002      	beq.n	800f904 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800f8fe:	2000      	movs	r0, #0
 800f900:	f001 fa12 	bl	8010d28 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f904:	4a08      	ldr	r2, [pc, #32]	@ (800f928 <PrepareRxDoneAbort+0x48>)
 800f906:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f90a:	f043 0302 	orr.w	r3, r3, #2
 800f90e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f912:	4a05      	ldr	r2, [pc, #20]	@ (800f928 <PrepareRxDoneAbort+0x48>)
 800f914:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f918:	f043 0310 	orr.w	r3, r3, #16
 800f91c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800f920:	f7ff ff20 	bl	800f764 <UpdateRxSlotIdleState>
}
 800f924:	bf00      	nop
 800f926:	bd80      	pop	{r7, pc}
 800f928:	20000998 	.word	0x20000998

0800f92c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f92c:	b590      	push	{r4, r7, lr}
 800f92e:	b0a9      	sub	sp, #164	@ 0xa4
 800f930:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f932:	2312      	movs	r3, #18
 800f934:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f938:	4ba1      	ldr	r3, [pc, #644]	@ (800fbc0 <ProcessRadioRxDone+0x294>)
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800f940:	4b9f      	ldr	r3, [pc, #636]	@ (800fbc0 <ProcessRadioRxDone+0x294>)
 800f942:	891b      	ldrh	r3, [r3, #8]
 800f944:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800f948:	4b9d      	ldr	r3, [pc, #628]	@ (800fbc0 <ProcessRadioRxDone+0x294>)
 800f94a:	895b      	ldrh	r3, [r3, #10]
 800f94c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800f950:	4b9b      	ldr	r3, [pc, #620]	@ (800fbc0 <ProcessRadioRxDone+0x294>)
 800f952:	7b1b      	ldrb	r3, [r3, #12]
 800f954:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800f958:	2300      	movs	r3, #0
 800f95a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f962:	4b98      	ldr	r3, [pc, #608]	@ (800fbc4 <ProcessRadioRxDone+0x298>)
 800f964:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f968:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800f96c:	2300      	movs	r3, #0
 800f96e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f972:	2301      	movs	r3, #1
 800f974:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800f978:	2301      	movs	r3, #1
 800f97a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f97e:	4a92      	ldr	r2, [pc, #584]	@ (800fbc8 <ProcessRadioRxDone+0x29c>)
 800f980:	7813      	ldrb	r3, [r2, #0]
 800f982:	f023 0301 	bic.w	r3, r3, #1
 800f986:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f988:	4b90      	ldr	r3, [pc, #576]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800f990:	4a8e      	ldr	r2, [pc, #568]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f992:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800f996:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800f99a:	4a8c      	ldr	r2, [pc, #560]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f99c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f9a0:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f9a4:	4b89      	ldr	r3, [pc, #548]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9a6:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800f9aa:	4b88      	ldr	r3, [pc, #544]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9ac:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800f9b0:	4b86      	ldr	r3, [pc, #536]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800f9b8:	4b84      	ldr	r3, [pc, #528]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800f9c0:	4b82      	ldr	r3, [pc, #520]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800f9c8:	4b80      	ldr	r3, [pc, #512]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800f9d0:	4b7e      	ldr	r3, [pc, #504]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800f9d8:	4b7c      	ldr	r3, [pc, #496]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800f9e0:	4b7a      	ldr	r3, [pc, #488]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f9e8:	4b78      	ldr	r3, [pc, #480]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f9f0:	4b76      	ldr	r3, [pc, #472]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800f9f8:	4b74      	ldr	r3, [pc, #464]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fa00:	4b72      	ldr	r3, [pc, #456]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800fa02:	2200      	movs	r2, #0
 800fa04:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800fa08:	4b70      	ldr	r3, [pc, #448]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800fa10:	4b6f      	ldr	r3, [pc, #444]	@ (800fbd0 <ProcessRadioRxDone+0x2a4>)
 800fa12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa14:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800fa16:	4b6d      	ldr	r3, [pc, #436]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800fa18:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d102      	bne.n	800fa26 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800fa20:	486c      	ldr	r0, [pc, #432]	@ (800fbd4 <ProcessRadioRxDone+0x2a8>)
 800fa22:	f00c ff57 	bl	801c8d4 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800fa26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800fa30:	f004 feba 	bl	80147a8 <LoRaMacClassBRxBeacon>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00b      	beq.n	800fa52 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800fa3a:	4a64      	ldr	r2, [pc, #400]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800fa3c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800fa40:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800fa44:	4a61      	ldr	r2, [pc, #388]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800fa46:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800fa4a:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800fa4e:	f000 bc8d 	b.w	801036c <ProcessRadioRxDone+0xa40>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fa52:	4b5c      	ldr	r3, [pc, #368]	@ (800fbc4 <ProcessRadioRxDone+0x298>)
 800fa54:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d11e      	bne.n	800fa9a <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fa5c:	f004 feb7 	bl	80147ce <LoRaMacClassBIsPingExpected>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00a      	beq.n	800fa7c <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa66:	2000      	movs	r0, #0
 800fa68:	f004 fe68 	bl	801473c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	f004 fe89 	bl	8014784 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fa72:	4b56      	ldr	r3, [pc, #344]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800fa74:	2204      	movs	r2, #4
 800fa76:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800fa7a:	e00e      	b.n	800fa9a <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fa7c:	f004 feae 	bl	80147dc <LoRaMacClassBIsMulticastExpected>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d009      	beq.n	800fa9a <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa86:	2000      	movs	r0, #0
 800fa88:	f004 fe62 	bl	8014750 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	f004 fe82 	bl	8014796 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fa92:	4b4e      	ldr	r3, [pc, #312]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800fa94:	2205      	movs	r2, #5
 800fa96:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800fa9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d107      	bne.n	800fab2 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800faa2:	4b4a      	ldr	r3, [pc, #296]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800faa4:	2201      	movs	r2, #1
 800faa6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800faaa:	f7ff ff19 	bl	800f8e0 <PrepareRxDoneAbort>
        return;
 800faae:	f000 bc5d 	b.w	801036c <ProcessRadioRxDone+0xa40>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fab2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fab6:	1c5a      	adds	r2, r3, #1
 800fab8:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800fabc:	461a      	mov	r2, r3
 800fabe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fac2:	4413      	add	r3, r2
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800faca:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800face:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	3b01      	subs	r3, #1
 800fad6:	2b06      	cmp	r3, #6
 800fad8:	f200 8419 	bhi.w	801030e <ProcessRadioRxDone+0x9e2>
 800fadc:	a201      	add	r2, pc, #4	@ (adr r2, 800fae4 <ProcessRadioRxDone+0x1b8>)
 800fade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae2:	bf00      	nop
 800fae4:	0800fb01 	.word	0x0800fb01
 800fae8:	0801030f 	.word	0x0801030f
 800faec:	0800fd1f 	.word	0x0800fd1f
 800faf0:	0801030f 	.word	0x0801030f
 800faf4:	0800fd17 	.word	0x0800fd17
 800faf8:	0801030f 	.word	0x0801030f
 800fafc:	080102b3 	.word	0x080102b3
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800fb00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fb04:	2b10      	cmp	r3, #16
 800fb06:	d807      	bhi.n	800fb18 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb08:	4b30      	ldr	r3, [pc, #192]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fb10:	f7ff fee6 	bl	800f8e0 <PrepareRxDoneAbort>
                return;
 800fb14:	f000 bc2a 	b.w	801036c <ProcessRadioRxDone+0xa40>
            }
            macMsgJoinAccept.Buffer = payload;
 800fb18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb1c:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800fb1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fb26:	4b27      	ldr	r3, [pc, #156]	@ (800fbc4 <ProcessRadioRxDone+0x298>)
 800fb28:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d007      	beq.n	800fb40 <ProcessRadioRxDone+0x214>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb30:	4b26      	ldr	r3, [pc, #152]	@ (800fbcc <ProcessRadioRxDone+0x2a0>)
 800fb32:	2201      	movs	r2, #1
 800fb34:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fb38:	f7ff fed2 	bl	800f8e0 <PrepareRxDoneAbort>
                return;
 800fb3c:	f000 bc16 	b.w	801036c <ProcessRadioRxDone+0xa40>
            }

            SecureElementGetJoinEui( joinEui );
 800fb40:	1d3b      	adds	r3, r7, #4
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fd ff7e 	bl	800da44 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800fb48:	f107 0214 	add.w	r2, r7, #20
 800fb4c:	1d3b      	adds	r3, r7, #4
 800fb4e:	4619      	mov	r1, r3
 800fb50:	20ff      	movs	r0, #255	@ 0xff
 800fb52:	f006 f831 	bl	8015bb8 <LoRaMacCryptoHandleJoinAccept>
 800fb56:	4603      	mov	r3, r0
 800fb58:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, joinEui, &macMsgJoinAccept );
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800fb5c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f040 80cc 	bne.w	800fcfe <ProcessRadioRxDone+0x3d2>
            {
                VerifyParams_t verifyRxDr;

                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800fb66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fb6a:	f003 030f 	and.w	r3, r3, #15
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	2b0f      	cmp	r3, #15
 800fb72:	d031      	beq.n	800fbd8 <ProcessRadioRxDone+0x2ac>
                {
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fb78:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	b25b      	sxtb	r3, r3
 800fb80:	703b      	strb	r3, [r7, #0]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fb82:	4b10      	ldr	r3, [pc, #64]	@ (800fbc4 <ProcessRadioRxDone+0x298>)
 800fb84:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fb88:	707b      	strb	r3, [r7, #1]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 800fb8a:	4b0e      	ldr	r3, [pc, #56]	@ (800fbc4 <ProcessRadioRxDone+0x298>)
 800fb8c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fb90:	4639      	mov	r1, r7
 800fb92:	2207      	movs	r2, #7
 800fb94:	4618      	mov	r0, r3
 800fb96:	f006 fdc0 	bl	801671a <RegionVerify>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	f083 0301 	eor.w	r3, r3, #1
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d018      	beq.n	800fbd8 <ProcessRadioRxDone+0x2ac>
                    {
                        // MLME handling
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fba6:	2001      	movs	r0, #1
 800fba8:	f005 fb14 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	f000 83b4 	beq.w	801031c <ProcessRadioRxDone+0x9f0>
                        {
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fbb4:	2101      	movs	r1, #1
 800fbb6:	2007      	movs	r0, #7
 800fbb8:	f005 fa80 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
 800fbbc:	e3b1      	b.n	8010322 <ProcessRadioRxDone+0x9f6>
 800fbbe:	bf00      	nop
 800fbc0:	20001adc 	.word	0x20001adc
 800fbc4:	20000ecc 	.word	0x20000ecc
 800fbc8:	20001ad4 	.word	0x20001ad4
 800fbcc:	20000998 	.word	0x20000998
 800fbd0:	08020ce0 	.word	0x08020ce0
 800fbd4:	20000d30 	.word	0x20000d30
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fbd8:	7f7b      	ldrb	r3, [r7, #29]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	4ba5      	ldr	r3, [pc, #660]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fbde:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800fbe2:	4ba4      	ldr	r3, [pc, #656]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fbe4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800fbe8:	7fbb      	ldrb	r3, [r7, #30]
 800fbea:	021b      	lsls	r3, r3, #8
 800fbec:	4313      	orrs	r3, r2
 800fbee:	4aa1      	ldr	r2, [pc, #644]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fbf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fbf4:	4b9f      	ldr	r3, [pc, #636]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fbf6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800fbfa:	7ffb      	ldrb	r3, [r7, #31]
 800fbfc:	041b      	lsls	r3, r3, #16
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	4a9c      	ldr	r2, [pc, #624]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800fc06:	6a3b      	ldr	r3, [r7, #32]
 800fc08:	4a9a      	ldr	r2, [pc, #616]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800fc0e:	4b99      	ldr	r3, [pc, #612]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fc14:	4619      	mov	r1, r3
 800fc16:	2002      	movs	r0, #2
 800fc18:	f7fd ff2c 	bl	800da74 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800fc1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc20:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	461a      	mov	r2, r3
 800fc28:	4b92      	ldr	r3, [pc, #584]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc2a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800fc2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc32:	f003 030f 	and.w	r3, r3, #15
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	2b0f      	cmp	r3, #15
 800fc3a:	d011      	beq.n	800fc60 <ProcessRadioRxDone+0x334>
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fc3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc40:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	461a      	mov	r2, r3
 800fc48:	4b8a      	ldr	r3, [pc, #552]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc4a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fc4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	461a      	mov	r2, r3
 800fc5a:	4b86      	ldr	r3, [pc, #536]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fc60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fc64:	461a      	mov	r2, r3
 800fc66:	4b83      	ldr	r3, [pc, #524]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc68:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800fc6a:	4b82      	ldr	r3, [pc, #520]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d102      	bne.n	800fc78 <ProcessRadioRxDone+0x34c>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800fc72:	4b80      	ldr	r3, [pc, #512]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc74:	2201      	movs	r2, #1
 800fc76:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800fc78:	4b7e      	ldr	r3, [pc, #504]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fc80:	fb02 f303 	mul.w	r3, r2, r3
 800fc84:	4a7b      	ldr	r2, [pc, #492]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc86:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fc88:	4b7a      	ldr	r3, [pc, #488]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc8c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fc90:	4a78      	ldr	r2, [pc, #480]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc92:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800fc94:	4b77      	ldr	r3, [pc, #476]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc96:	2201      	movs	r2, #1
 800fc98:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800fc9c:	4b75      	ldr	r3, [pc, #468]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fc9e:	2200      	movs	r2, #0
 800fca0:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fca4:	f107 0314 	add.w	r3, r7, #20
 800fca8:	3312      	adds	r3, #18
 800fcaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fcac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	3b11      	subs	r3, #17
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800fcba:	4b6f      	ldr	r3, [pc, #444]	@ (800fe78 <ProcessRadioRxDone+0x54c>)
 800fcbc:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800fcc0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800fcc4:	4b6b      	ldr	r3, [pc, #428]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fcc6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fcca:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800fcce:	4611      	mov	r1, r2
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f006 fd39 	bl	8016748 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fcd6:	4b67      	ldr	r3, [pc, #412]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fcd8:	2202      	movs	r2, #2
 800fcda:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800fcde:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fce2:	4618      	mov	r0, r3
 800fce4:	f005 fa76 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f000 8318 	beq.w	8010320 <ProcessRadioRxDone+0x9f4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800fcf0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	2000      	movs	r0, #0
 800fcf8:	f005 f9e0 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }

            break;
 800fcfc:	e310      	b.n	8010320 <ProcessRadioRxDone+0x9f4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fcfe:	2001      	movs	r0, #1
 800fd00:	f005 fa68 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f000 830a 	beq.w	8010320 <ProcessRadioRxDone+0x9f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fd0c:	2101      	movs	r1, #1
 800fd0e:	2007      	movs	r0, #7
 800fd10:	f005 f9d4 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
            break;
 800fd14:	e304      	b.n	8010320 <ProcessRadioRxDone+0x9f4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fd16:	4b58      	ldr	r3, [pc, #352]	@ (800fe78 <ProcessRadioRxDone+0x54c>)
 800fd18:	2201      	movs	r2, #1
 800fd1a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fd1e:	4b55      	ldr	r3, [pc, #340]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fd20:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fd24:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fd28:	4b53      	ldr	r3, [pc, #332]	@ (800fe78 <ProcessRadioRxDone+0x54c>)
 800fd2a:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800fd2e:	b25b      	sxtb	r3, r3
 800fd30:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fd34:	230d      	movs	r3, #13
 800fd36:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fd3a:	4b4e      	ldr	r3, [pc, #312]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fd3c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d002      	beq.n	800fd4a <ProcessRadioRxDone+0x41e>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fd44:	230e      	movs	r3, #14
 800fd46:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd4a:	4b4a      	ldr	r3, [pc, #296]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fd4c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fd50:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800fd54:	4611      	mov	r1, r2
 800fd56:	4618      	mov	r0, r3
 800fd58:	f006 fca4 	bl	80166a4 <RegionGetPhyParam>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800fd60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fd64:	3b0d      	subs	r3, #13
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	b21b      	sxth	r3, r3
 800fd6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fd6e:	b21a      	sxth	r2, r3
 800fd70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd72:	b21b      	sxth	r3, r3
 800fd74:	429a      	cmp	r2, r3
 800fd76:	dc03      	bgt.n	800fd80 <ProcessRadioRxDone+0x454>
 800fd78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fd7c:	2b0b      	cmp	r3, #11
 800fd7e:	d806      	bhi.n	800fd8e <ProcessRadioRxDone+0x462>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd80:	4b3d      	ldr	r3, [pc, #244]	@ (800fe78 <ProcessRadioRxDone+0x54c>)
 800fd82:	2201      	movs	r2, #1
 800fd84:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fd88:	f7ff fdaa 	bl	800f8e0 <PrepareRxDoneAbort>
                return;
 800fd8c:	e2ee      	b.n	801036c <ProcessRadioRxDone+0xa40>
            }
            macMsgData.Buffer = payload;
 800fd8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800fd94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800fd9e:	4b37      	ldr	r3, [pc, #220]	@ (800fe7c <ProcessRadioRxDone+0x550>)
 800fda0:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800fda2:	23ff      	movs	r3, #255	@ 0xff
 800fda4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800fda8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800fdac:	4618      	mov	r0, r3
 800fdae:	f006 fa00 	bl	80161b2 <LoRaMacParserData>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d006      	beq.n	800fdc6 <ProcessRadioRxDone+0x49a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fdb8:	4b2f      	ldr	r3, [pc, #188]	@ (800fe78 <ProcessRadioRxDone+0x54c>)
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fdc0:	f7ff fd8e 	bl	800f8e0 <PrepareRxDoneAbort>
                return;
 800fdc4:	e2d2      	b.n	801036c <ProcessRadioRxDone+0xa40>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fdc6:	4b2b      	ldr	r3, [pc, #172]	@ (800fe74 <ProcessRadioRxDone+0x548>)
 800fdc8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d132      	bne.n	800fe36 <ProcessRadioRxDone+0x50a>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800fdd0:	f004 fcfd 	bl	80147ce <LoRaMacClassBIsPingExpected>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d014      	beq.n	800fe04 <ProcessRadioRxDone+0x4d8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fdda:	2000      	movs	r0, #0
 800fddc:	f004 fcae 	bl	801473c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800fde0:	2000      	movs	r0, #0
 800fde2:	f004 fccf 	bl	8014784 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fde6:	4b24      	ldr	r3, [pc, #144]	@ (800fe78 <ProcessRadioRxDone+0x54c>)
 800fde8:	2204      	movs	r2, #4
 800fdea:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fdee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fdf0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fdf4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4610      	mov	r0, r2
 800fdfe:	f004 fd6f 	bl	80148e0 <LoRaMacClassBSetFPendingBit>
 800fe02:	e018      	b.n	800fe36 <ProcessRadioRxDone+0x50a>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fe04:	f004 fcea 	bl	80147dc <LoRaMacClassBIsMulticastExpected>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d013      	beq.n	800fe36 <ProcessRadioRxDone+0x50a>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fe0e:	2000      	movs	r0, #0
 800fe10:	f004 fc9e 	bl	8014750 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fe14:	2000      	movs	r0, #0
 800fe16:	f004 fcbe 	bl	8014796 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fe1a:	4b17      	ldr	r3, [pc, #92]	@ (800fe78 <ProcessRadioRxDone+0x54c>)
 800fe1c:	2205      	movs	r2, #5
 800fe1e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fe22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe24:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fe28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	4619      	mov	r1, r3
 800fe30:	4610      	mov	r0, r2
 800fe32:	f004 fd55 	bl	80148e0 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800fe36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe38:	4a0f      	ldr	r2, [pc, #60]	@ (800fe78 <ProcessRadioRxDone+0x54c>)
 800fe3a:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800fe3e:	f107 020e 	add.w	r2, r7, #14
 800fe42:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800fe46:	4611      	mov	r1, r2
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f002 fd9f 	bl	801298c <DetermineFrameType>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d006      	beq.n	800fe62 <ProcessRadioRxDone+0x536>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe54:	4b08      	ldr	r3, [pc, #32]	@ (800fe78 <ProcessRadioRxDone+0x54c>)
 800fe56:	2201      	movs	r2, #1
 800fe58:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fe5c:	f7ff fd40 	bl	800f8e0 <PrepareRxDoneAbort>
                return;
 800fe60:	e284      	b.n	801036c <ProcessRadioRxDone+0xa40>
            }

            //Check if it is a multicast message
            multicast = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800fe72:	e055      	b.n	800ff20 <ProcessRadioRxDone+0x5f4>
 800fe74:	20000ecc 	.word	0x20000ecc
 800fe78:	20000998 	.word	0x20000998
 800fe7c:	20000bd0 	.word	0x20000bd0
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fe80:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800fe84:	499f      	ldr	r1, [pc, #636]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 800fe86:	4613      	mov	r3, r2
 800fe88:	005b      	lsls	r3, r3, #1
 800fe8a:	4413      	add	r3, r2
 800fe8c:	011b      	lsls	r3, r3, #4
 800fe8e:	440b      	add	r3, r1
 800fe90:	33ec      	adds	r3, #236	@ 0xec
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d13d      	bne.n	800ff16 <ProcessRadioRxDone+0x5ea>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800fe9a:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800fe9e:	4999      	ldr	r1, [pc, #612]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 800fea0:	4613      	mov	r3, r2
 800fea2:	005b      	lsls	r3, r3, #1
 800fea4:	4413      	add	r3, r2
 800fea6:	011b      	lsls	r3, r3, #4
 800fea8:	440b      	add	r3, r1
 800feaa:	33e9      	adds	r3, #233	@ 0xe9
 800feac:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d031      	beq.n	800ff16 <ProcessRadioRxDone+0x5ea>
                {
                    multicast = 1;
 800feb2:	2301      	movs	r3, #1
 800feb4:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800feb8:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800febc:	4991      	ldr	r1, [pc, #580]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 800febe:	4613      	mov	r3, r2
 800fec0:	005b      	lsls	r3, r3, #1
 800fec2:	4413      	add	r3, r2
 800fec4:	011b      	lsls	r3, r3, #4
 800fec6:	440b      	add	r3, r1
 800fec8:	33ea      	adds	r3, #234	@ 0xea
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800fed0:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800fed4:	498b      	ldr	r1, [pc, #556]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 800fed6:	4613      	mov	r3, r2
 800fed8:	005b      	lsls	r3, r3, #1
 800feda:	4413      	add	r3, r2
 800fedc:	011b      	lsls	r3, r3, #4
 800fede:	440b      	add	r3, r1
 800fee0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800feea:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800feee:	4985      	ldr	r1, [pc, #532]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 800fef0:	4613      	mov	r3, r2
 800fef2:	005b      	lsls	r3, r3, #1
 800fef4:	4413      	add	r3, r2
 800fef6:	011b      	lsls	r3, r3, #4
 800fef8:	440b      	add	r3, r1
 800fefa:	33ec      	adds	r3, #236	@ 0xec
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ff02:	4b80      	ldr	r3, [pc, #512]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 800ff04:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ff08:	2b02      	cmp	r3, #2
 800ff0a:	d10e      	bne.n	800ff2a <ProcessRadioRxDone+0x5fe>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ff0c:	4b7e      	ldr	r3, [pc, #504]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 800ff0e:	2203      	movs	r2, #3
 800ff10:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800ff14:	e009      	b.n	800ff2a <ProcessRadioRxDone+0x5fe>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff16:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800ff1a:	3301      	adds	r3, #1
 800ff1c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800ff20:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d0ab      	beq.n	800fe80 <ProcessRadioRxDone+0x554>
 800ff28:	e000      	b.n	800ff2c <ProcessRadioRxDone+0x600>
                    break;
 800ff2a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ff2c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d117      	bne.n	800ff64 <ProcessRadioRxDone+0x638>
 800ff34:	7bbb      	ldrb	r3, [r7, #14]
 800ff36:	2b03      	cmp	r3, #3
 800ff38:	d10d      	bne.n	800ff56 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ff3a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ff3e:	f003 0320 	and.w	r3, r3, #32
 800ff42:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d106      	bne.n	800ff56 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ff48:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ff4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff50:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d006      	beq.n	800ff64 <ProcessRadioRxDone+0x638>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ff56:	4b6c      	ldr	r3, [pc, #432]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 800ff58:	2201      	movs	r2, #1
 800ff5a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ff5e:	f7ff fcbf 	bl	800f8e0 <PrepareRxDoneAbort>
                return;
 800ff62:	e203      	b.n	801036c <ProcessRadioRxDone+0xa40>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800ff64:	7bb9      	ldrb	r1, [r7, #14]
 800ff66:	4c67      	ldr	r4, [pc, #412]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 800ff68:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800ff6c:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800ff70:	f107 0310 	add.w	r3, r7, #16
 800ff74:	9301      	str	r3, [sp, #4]
 800ff76:	f107 030f 	add.w	r3, r7, #15
 800ff7a:	9300      	str	r3, [sp, #0]
 800ff7c:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800ff80:	f000 feec 	bl	8010d5c <GetFCntDown>
 800ff84:	4603      	mov	r3, r0
 800ff86:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ff8a:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d017      	beq.n	800ffc2 <ProcessRadioRxDone+0x696>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ff92:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ff96:	2b07      	cmp	r3, #7
 800ff98:	d104      	bne.n	800ffa4 <ProcessRadioRxDone+0x678>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ff9a:	4b5b      	ldr	r3, [pc, #364]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 800ff9c:	2208      	movs	r2, #8
 800ff9e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800ffa2:	e003      	b.n	800ffac <ProcessRadioRxDone+0x680>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ffa4:	4b58      	ldr	r3, [pc, #352]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	4a56      	ldr	r2, [pc, #344]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 800ffb0:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	4a54      	ldr	r2, [pc, #336]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 800ffb8:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800ffbc:	f7ff fc90 	bl	800f8e0 <PrepareRxDoneAbort>
                return;
 800ffc0:	e1d4      	b.n	801036c <ProcessRadioRxDone+0xa40>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ffc2:	7bfa      	ldrb	r2, [r7, #15]
 800ffc4:	6939      	ldr	r1, [r7, #16]
 800ffc6:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800ffca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ffce:	9300      	str	r3, [sp, #0]
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800ffd6:	f005 ff4f 	bl	8015e78 <LoRaMacCryptoUnsecureMessage>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ffe0:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d00f      	beq.n	8010008 <ProcessRadioRxDone+0x6dc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ffe8:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ffec:	2b02      	cmp	r3, #2
 800ffee:	d104      	bne.n	800fffa <ProcessRadioRxDone+0x6ce>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fff0:	4b45      	ldr	r3, [pc, #276]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 800fff2:	220a      	movs	r2, #10
 800fff4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800fff8:	e003      	b.n	8010002 <ProcessRadioRxDone+0x6d6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fffa:	4b43      	ldr	r3, [pc, #268]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 800fffc:	220b      	movs	r2, #11
 800fffe:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 8010002:	f7ff fc6d 	bl	800f8e0 <PrepareRxDoneAbort>
                return;
 8010006:	e1b1      	b.n	801036c <ProcessRadioRxDone+0xa40>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010008:	4b3f      	ldr	r3, [pc, #252]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 801000a:	2200      	movs	r2, #0
 801000c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8010010:	4a3d      	ldr	r2, [pc, #244]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 8010012:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8010016:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 801001a:	4b3b      	ldr	r3, [pc, #236]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 801001c:	2200      	movs	r2, #0
 801001e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8010022:	4b39      	ldr	r3, [pc, #228]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 8010024:	2200      	movs	r2, #0
 8010026:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	4a36      	ldr	r2, [pc, #216]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 801002e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	4a34      	ldr	r2, [pc, #208]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 8010036:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801003a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801003e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010042:	b2db      	uxtb	r3, r3
 8010044:	2b00      	cmp	r3, #0
 8010046:	bf14      	ite	ne
 8010048:	2301      	movne	r3, #1
 801004a:	2300      	moveq	r3, #0
 801004c:	b2da      	uxtb	r2, r3
 801004e:	4b2e      	ldr	r3, [pc, #184]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 8010050:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010054:	4b2c      	ldr	r3, [pc, #176]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 8010056:	2200      	movs	r2, #0
 8010058:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801005c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010060:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	bf14      	ite	ne
 801006a:	2301      	movne	r3, #1
 801006c:	2300      	moveq	r3, #0
 801006e:	b2da      	uxtb	r2, r3
 8010070:	4b25      	ldr	r3, [pc, #148]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 8010072:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010076:	4b24      	ldr	r3, [pc, #144]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 8010078:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801007c:	2b00      	cmp	r3, #0
 801007e:	d004      	beq.n	801008a <ProcessRadioRxDone+0x75e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010080:	4b21      	ldr	r3, [pc, #132]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 8010082:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010086:	2b01      	cmp	r3, #1
 8010088:	d106      	bne.n	8010098 <ProcessRadioRxDone+0x76c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801008a:	4b1e      	ldr	r3, [pc, #120]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 801008c:	2200      	movs	r2, #0
 801008e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8010090:	4b1c      	ldr	r3, [pc, #112]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 8010092:	2201      	movs	r2, #1
 8010094:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8010098:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 801009c:	2b01      	cmp	r3, #1
 801009e:	d104      	bne.n	80100aa <ProcessRadioRxDone+0x77e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80100a0:	4b19      	ldr	r3, [pc, #100]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 80100a2:	2202      	movs	r2, #2
 80100a4:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 80100a8:	e03a      	b.n	8010120 <ProcessRadioRxDone+0x7f4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80100aa:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80100ae:	f023 031f 	bic.w	r3, r3, #31
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80100b6:	d12b      	bne.n	8010110 <ProcessRadioRxDone+0x7e4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 80100b8:	4b12      	ldr	r3, [pc, #72]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 80100ba:	2201      	movs	r2, #1
 80100bc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80100c0:	4b10      	ldr	r3, [pc, #64]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 80100c2:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d102      	bne.n	80100d0 <ProcessRadioRxDone+0x7a4>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80100ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80100cc:	4a0d      	ldr	r2, [pc, #52]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 80100ce:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80100d0:	4b0d      	ldr	r3, [pc, #52]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 80100d2:	2201      	movs	r2, #1
 80100d4:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80100d8:	4b0b      	ldr	r3, [pc, #44]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 80100da:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d01e      	beq.n	8010120 <ProcessRadioRxDone+0x7f4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 80100e2:	4b09      	ldr	r3, [pc, #36]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 80100e4:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d019      	beq.n	8010120 <ProcessRadioRxDone+0x7f4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80100ec:	4b05      	ldr	r3, [pc, #20]	@ (8010104 <ProcessRadioRxDone+0x7d8>)
 80100ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100f2:	4a05      	ldr	r2, [pc, #20]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 80100f4:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 80100f8:	4b04      	ldr	r3, [pc, #16]	@ (801010c <ProcessRadioRxDone+0x7e0>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4a02      	ldr	r2, [pc, #8]	@ (8010108 <ProcessRadioRxDone+0x7dc>)
 80100fe:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 8010102:	e00d      	b.n	8010120 <ProcessRadioRxDone+0x7f4>
 8010104:	20000ecc 	.word	0x20000ecc
 8010108:	20000998 	.word	0x20000998
 801010c:	20001adc 	.word	0x20001adc
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8010110:	4b98      	ldr	r3, [pc, #608]	@ (8010374 <ProcessRadioRxDone+0xa48>)
 8010112:	2200      	movs	r2, #0
 8010114:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010118:	4b97      	ldr	r3, [pc, #604]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801011a:	2200      	movs	r2, #0
 801011c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 8010120:	4b94      	ldr	r3, [pc, #592]	@ (8010374 <ProcessRadioRxDone+0xa48>)
 8010122:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010126:	2b00      	cmp	r3, #0
 8010128:	d106      	bne.n	8010138 <ProcessRadioRxDone+0x80c>
 801012a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801012e:	f003 0310 	and.w	r3, r3, #16
 8010132:	b2db      	uxtb	r3, r3
 8010134:	2b00      	cmp	r3, #0
 8010136:	d004      	beq.n	8010142 <ProcessRadioRxDone+0x816>
 8010138:	4b8e      	ldr	r3, [pc, #568]	@ (8010374 <ProcessRadioRxDone+0xa48>)
 801013a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801013e:	2b00      	cmp	r3, #0
 8010140:	d004      	beq.n	801014c <ProcessRadioRxDone+0x820>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 8010142:	4b8d      	ldr	r3, [pc, #564]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010144:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 8010148:	2b00      	cmp	r3, #0
 801014a:	d003      	beq.n	8010154 <ProcessRadioRxDone+0x828>
            //if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 801014c:	4b8a      	ldr	r3, [pc, #552]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801014e:	2201      	movs	r2, #1
 8010150:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8010154:	4b88      	ldr	r3, [pc, #544]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010156:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801015a:	4a87      	ldr	r2, [pc, #540]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801015c:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 8010160:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8010164:	4618      	mov	r0, r3
 8010166:	f001 ffa5 	bl	80120b4 <RemoveMacCommands>

            switch( fType )
 801016a:	7bbb      	ldrb	r3, [r7, #14]
 801016c:	2b03      	cmp	r3, #3
 801016e:	d874      	bhi.n	801025a <ProcessRadioRxDone+0x92e>
 8010170:	a201      	add	r2, pc, #4	@ (adr r2, 8010178 <ProcessRadioRxDone+0x84c>)
 8010172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010176:	bf00      	nop
 8010178:	08010189 	.word	0x08010189
 801017c:	080101d9 	.word	0x080101d9
 8010180:	0801020f 	.word	0x0801020f
 8010184:	08010235 	.word	0x08010235
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010188:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801018c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010190:	b2db      	uxtb	r3, r3
 8010192:	461c      	mov	r4, r3
 8010194:	4b78      	ldr	r3, [pc, #480]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010196:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801019a:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 801019e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80101a2:	f102 0010 	add.w	r0, r2, #16
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	460b      	mov	r3, r1
 80101aa:	4622      	mov	r2, r4
 80101ac:	2100      	movs	r1, #0
 80101ae:	f000 ff51 	bl	8011054 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80101b2:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80101b6:	4b70      	ldr	r3, [pc, #448]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80101b8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80101bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101be:	4a6e      	ldr	r2, [pc, #440]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80101c0:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80101c4:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80101c8:	4b6b      	ldr	r3, [pc, #428]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80101ca:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80101ce:	4b6a      	ldr	r3, [pc, #424]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80101d0:	2201      	movs	r2, #1
 80101d2:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 80101d6:	e047      	b.n	8010268 <ProcessRadioRxDone+0x93c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80101d8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80101dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	461c      	mov	r4, r3
 80101e4:	4b64      	ldr	r3, [pc, #400]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80101e6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80101ea:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 80101ee:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80101f2:	f102 0010 	add.w	r0, r2, #16
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	460b      	mov	r3, r1
 80101fa:	4622      	mov	r2, r4
 80101fc:	2100      	movs	r1, #0
 80101fe:	f000 ff29 	bl	8011054 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010202:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010206:	4b5c      	ldr	r3, [pc, #368]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010208:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 801020c:	e02c      	b.n	8010268 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 801020e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8010210:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8010214:	4b58      	ldr	r3, [pc, #352]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010216:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801021a:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	460b      	mov	r3, r1
 8010222:	2100      	movs	r1, #0
 8010224:	f000 ff16 	bl	8011054 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010228:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 801022c:	4b52      	ldr	r3, [pc, #328]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801022e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 8010232:	e019      	b.n	8010268 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010234:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010238:	4b4f      	ldr	r3, [pc, #316]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801023a:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801023e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010240:	4a4d      	ldr	r2, [pc, #308]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010242:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010246:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 801024a:	4b4b      	ldr	r3, [pc, #300]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801024c:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8010250:	4b49      	ldr	r3, [pc, #292]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010252:	2201      	movs	r2, #1
 8010254:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 8010258:	e006      	b.n	8010268 <ProcessRadioRxDone+0x93c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801025a:	4b47      	ldr	r3, [pc, #284]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801025c:	2201      	movs	r2, #1
 801025e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 8010262:	f7ff fb3d 	bl	800f8e0 <PrepareRxDoneAbort>
                    break;
 8010266:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8010268:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 801026c:	2be0      	cmp	r3, #224	@ 0xe0
 801026e:	d118      	bne.n	80102a2 <ProcessRadioRxDone+0x976>
 8010270:	4b40      	ldr	r3, [pc, #256]	@ (8010374 <ProcessRadioRxDone+0xa48>)
 8010272:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8010276:	f083 0301 	eor.w	r3, r3, #1
 801027a:	b2db      	uxtb	r3, r3
 801027c:	2b00      	cmp	r3, #0
 801027e:	d010      	beq.n	80102a2 <ProcessRadioRxDone+0x976>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010280:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010284:	4b3c      	ldr	r3, [pc, #240]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010286:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 801028a:	4b3b      	ldr	r3, [pc, #236]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801028c:	2200      	movs	r2, #0
 801028e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8010292:	4b39      	ldr	r3, [pc, #228]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010294:	2200      	movs	r2, #0
 8010296:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 801029a:	4b37      	ldr	r3, [pc, #220]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801029c:	2200      	movs	r2, #0
 801029e:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80102a2:	4a35      	ldr	r2, [pc, #212]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80102a4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80102a8:	f043 0302 	orr.w	r3, r3, #2
 80102ac:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 80102b0:	e037      	b.n	8010322 <ProcessRadioRxDone+0x9f6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80102b2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80102b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80102ba:	18d1      	adds	r1, r2, r3
 80102bc:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	461a      	mov	r2, r3
 80102cc:	482b      	ldr	r0, [pc, #172]	@ (801037c <ProcessRadioRxDone+0xa50>)
 80102ce:	f008 fc14 	bl	8018afa <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80102d2:	4b29      	ldr	r3, [pc, #164]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80102d4:	2203      	movs	r2, #3
 80102d6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80102da:	4b27      	ldr	r3, [pc, #156]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80102dc:	2200      	movs	r2, #0
 80102de:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80102e2:	4b25      	ldr	r3, [pc, #148]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80102e4:	4a25      	ldr	r2, [pc, #148]	@ (801037c <ProcessRadioRxDone+0xa50>)
 80102e6:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80102ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80102ee:	b2da      	uxtb	r2, r3
 80102f0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	b2da      	uxtb	r2, r3
 80102f8:	4b1f      	ldr	r3, [pc, #124]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 80102fa:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80102fe:	4a1e      	ldr	r2, [pc, #120]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010300:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010304:	f043 0302 	orr.w	r3, r3, #2
 8010308:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 801030c:	e009      	b.n	8010322 <ProcessRadioRxDone+0x9f6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801030e:	4b1a      	ldr	r3, [pc, #104]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010310:	2201      	movs	r2, #1
 8010312:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 8010316:	f7ff fae3 	bl	800f8e0 <PrepareRxDoneAbort>
            break;
 801031a:	e002      	b.n	8010322 <ProcessRadioRxDone+0x9f6>
                        break;
 801031c:	bf00      	nop
 801031e:	e000      	b.n	8010322 <ProcessRadioRxDone+0x9f6>
            break;
 8010320:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010322:	4b15      	ldr	r3, [pc, #84]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010324:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010328:	2b00      	cmp	r3, #0
 801032a:	d004      	beq.n	8010336 <ProcessRadioRxDone+0xa0a>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801032c:	4b12      	ldr	r3, [pc, #72]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801032e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010332:	2b01      	cmp	r3, #1
 8010334:	d10c      	bne.n	8010350 <ProcessRadioRxDone+0xa24>
    {
        if( MacCtx.NodeAckRequested == true )
 8010336:	4b10      	ldr	r3, [pc, #64]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010338:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 801033c:	2b00      	cmp	r3, #0
 801033e:	d007      	beq.n	8010350 <ProcessRadioRxDone+0xa24>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8010340:	4b0d      	ldr	r3, [pc, #52]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010342:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8010346:	2b00      	cmp	r3, #0
 8010348:	d002      	beq.n	8010350 <ProcessRadioRxDone+0xa24>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 801034a:	2000      	movs	r0, #0
 801034c:	f000 fcec 	bl	8010d28 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8010350:	4b09      	ldr	r3, [pc, #36]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 8010352:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010356:	2b02      	cmp	r3, #2
 8010358:	d006      	beq.n	8010368 <ProcessRadioRxDone+0xa3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 801035a:	4a07      	ldr	r2, [pc, #28]	@ (8010378 <ProcessRadioRxDone+0xa4c>)
 801035c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010360:	f043 0310 	orr.w	r3, r3, #16
 8010364:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8010368:	f7ff f9fc 	bl	800f764 <UpdateRxSlotIdleState>
}
 801036c:	379c      	adds	r7, #156	@ 0x9c
 801036e:	46bd      	mov	sp, r7
 8010370:	bd90      	pop	{r4, r7, pc}
 8010372:	bf00      	nop
 8010374:	20000ecc 	.word	0x20000ecc
 8010378:	20000998 	.word	0x20000998
 801037c:	20000bd0 	.word	0x20000bd0

08010380 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010384:	4b11      	ldr	r3, [pc, #68]	@ (80103cc <ProcessRadioTxTimeout+0x4c>)
 8010386:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801038a:	2b02      	cmp	r3, #2
 801038c:	d002      	beq.n	8010394 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801038e:	4b10      	ldr	r3, [pc, #64]	@ (80103d0 <ProcessRadioTxTimeout+0x50>)
 8010390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010392:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010394:	f7ff f9e6 	bl	800f764 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010398:	4b0e      	ldr	r3, [pc, #56]	@ (80103d4 <ProcessRadioTxTimeout+0x54>)
 801039a:	2202      	movs	r2, #2
 801039c:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80103a0:	2002      	movs	r0, #2
 80103a2:	f004 fee3 	bl	801516c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80103a6:	4b0b      	ldr	r3, [pc, #44]	@ (80103d4 <ProcessRadioTxTimeout+0x54>)
 80103a8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d003      	beq.n	80103b8 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 80103b0:	4b08      	ldr	r3, [pc, #32]	@ (80103d4 <ProcessRadioTxTimeout+0x54>)
 80103b2:	2201      	movs	r2, #1
 80103b4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80103b8:	4a06      	ldr	r2, [pc, #24]	@ (80103d4 <ProcessRadioTxTimeout+0x54>)
 80103ba:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80103be:	f043 0310 	orr.w	r3, r3, #16
 80103c2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 80103c6:	bf00      	nop
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	20000ecc 	.word	0x20000ecc
 80103d0:	08020ce0 	.word	0x08020ce0
 80103d4:	20000998 	.word	0x20000998

080103d8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b084      	sub	sp, #16
 80103dc:	af00      	add	r7, sp, #0
 80103de:	4603      	mov	r3, r0
 80103e0:	460a      	mov	r2, r1
 80103e2:	71fb      	strb	r3, [r7, #7]
 80103e4:	4613      	mov	r3, r2
 80103e6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80103e8:	2300      	movs	r3, #0
 80103ea:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80103ec:	4b3d      	ldr	r3, [pc, #244]	@ (80104e4 <HandleRadioRxErrorTimeout+0x10c>)
 80103ee:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80103f2:	2b02      	cmp	r3, #2
 80103f4:	d002      	beq.n	80103fc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80103f6:	4b3c      	ldr	r3, [pc, #240]	@ (80104e8 <HandleRadioRxErrorTimeout+0x110>)
 80103f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103fa:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80103fc:	f004 f9e0 	bl	80147c0 <LoRaMacClassBIsBeaconExpected>
 8010400:	4603      	mov	r3, r0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d007      	beq.n	8010416 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8010406:	2002      	movs	r0, #2
 8010408:	f004 f98e 	bl	8014728 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 801040c:	2000      	movs	r0, #0
 801040e:	f004 f9b0 	bl	8014772 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8010412:	2301      	movs	r3, #1
 8010414:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010416:	4b33      	ldr	r3, [pc, #204]	@ (80104e4 <HandleRadioRxErrorTimeout+0x10c>)
 8010418:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801041c:	2b01      	cmp	r3, #1
 801041e:	d119      	bne.n	8010454 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010420:	f004 f9d5 	bl	80147ce <LoRaMacClassBIsPingExpected>
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d007      	beq.n	801043a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801042a:	2000      	movs	r0, #0
 801042c:	f004 f986 	bl	801473c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010430:	2000      	movs	r0, #0
 8010432:	f004 f9a7 	bl	8014784 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8010436:	2301      	movs	r3, #1
 8010438:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 801043a:	f004 f9cf 	bl	80147dc <LoRaMacClassBIsMulticastExpected>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d007      	beq.n	8010454 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010444:	2000      	movs	r0, #0
 8010446:	f004 f983 	bl	8014750 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801044a:	2000      	movs	r0, #0
 801044c:	f004 f9a3 	bl	8014796 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010450:	2301      	movs	r3, #1
 8010452:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8010454:	7bfb      	ldrb	r3, [r7, #15]
 8010456:	f083 0301 	eor.w	r3, r3, #1
 801045a:	b2db      	uxtb	r3, r3
 801045c:	2b00      	cmp	r3, #0
 801045e:	d03b      	beq.n	80104d8 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010460:	4b22      	ldr	r3, [pc, #136]	@ (80104ec <HandleRadioRxErrorTimeout+0x114>)
 8010462:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010466:	2b00      	cmp	r3, #0
 8010468:	d122      	bne.n	80104b0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 801046a:	4b20      	ldr	r3, [pc, #128]	@ (80104ec <HandleRadioRxErrorTimeout+0x114>)
 801046c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010470:	2b00      	cmp	r3, #0
 8010472:	d003      	beq.n	801047c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010474:	4a1d      	ldr	r2, [pc, #116]	@ (80104ec <HandleRadioRxErrorTimeout+0x114>)
 8010476:	79fb      	ldrb	r3, [r7, #7]
 8010478:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 801047c:	79fb      	ldrb	r3, [r7, #7]
 801047e:	4618      	mov	r0, r3
 8010480:	f004 fe74 	bl	801516c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010484:	4b17      	ldr	r3, [pc, #92]	@ (80104e4 <HandleRadioRxErrorTimeout+0x10c>)
 8010486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010488:	4618      	mov	r0, r3
 801048a:	f00c fb4f 	bl	801cb2c <UTIL_TIMER_GetElapsedTime>
 801048e:	4602      	mov	r2, r0
 8010490:	4b16      	ldr	r3, [pc, #88]	@ (80104ec <HandleRadioRxErrorTimeout+0x114>)
 8010492:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8010496:	429a      	cmp	r2, r3
 8010498:	d31e      	bcc.n	80104d8 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801049a:	4815      	ldr	r0, [pc, #84]	@ (80104f0 <HandleRadioRxErrorTimeout+0x118>)
 801049c:	f00c fa1a 	bl	801c8d4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80104a0:	4a12      	ldr	r2, [pc, #72]	@ (80104ec <HandleRadioRxErrorTimeout+0x114>)
 80104a2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80104a6:	f043 0310 	orr.w	r3, r3, #16
 80104aa:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80104ae:	e013      	b.n	80104d8 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80104b0:	4b0e      	ldr	r3, [pc, #56]	@ (80104ec <HandleRadioRxErrorTimeout+0x114>)
 80104b2:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d003      	beq.n	80104c2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80104ba:	4a0c      	ldr	r2, [pc, #48]	@ (80104ec <HandleRadioRxErrorTimeout+0x114>)
 80104bc:	79bb      	ldrb	r3, [r7, #6]
 80104be:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80104c2:	79bb      	ldrb	r3, [r7, #6]
 80104c4:	4618      	mov	r0, r3
 80104c6:	f004 fe51 	bl	801516c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 80104ca:	4a08      	ldr	r2, [pc, #32]	@ (80104ec <HandleRadioRxErrorTimeout+0x114>)
 80104cc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80104d0:	f043 0310 	orr.w	r3, r3, #16
 80104d4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80104d8:	f7ff f944 	bl	800f764 <UpdateRxSlotIdleState>
}
 80104dc:	bf00      	nop
 80104de:	3710      	adds	r7, #16
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	20000ecc 	.word	0x20000ecc
 80104e8:	08020ce0 	.word	0x08020ce0
 80104ec:	20000998 	.word	0x20000998
 80104f0:	20000d30 	.word	0x20000d30

080104f4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80104f8:	2106      	movs	r1, #6
 80104fa:	2005      	movs	r0, #5
 80104fc:	f7ff ff6c 	bl	80103d8 <HandleRadioRxErrorTimeout>
}
 8010500:	bf00      	nop
 8010502:	bd80      	pop	{r7, pc}

08010504 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8010504:	b580      	push	{r7, lr}
 8010506:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8010508:	2104      	movs	r1, #4
 801050a:	2003      	movs	r0, #3
 801050c:	f7ff ff64 	bl	80103d8 <HandleRadioRxErrorTimeout>
}
 8010510:	bf00      	nop
 8010512:	bd80      	pop	{r7, pc}

08010514 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801051a:	f3ef 8310 	mrs	r3, PRIMASK
 801051e:	607b      	str	r3, [r7, #4]
  return(result);
 8010520:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010522:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010524:	b672      	cpsid	i
}
 8010526:	bf00      	nop
    events = LoRaMacRadioEvents;
 8010528:	4b1d      	ldr	r3, [pc, #116]	@ (80105a0 <LoRaMacHandleIrqEvents+0x8c>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801052e:	4b1c      	ldr	r3, [pc, #112]	@ (80105a0 <LoRaMacHandleIrqEvents+0x8c>)
 8010530:	2200      	movs	r2, #0
 8010532:	601a      	str	r2, [r3, #0]
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	f383 8810 	msr	PRIMASK, r3
}
 801053e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d027      	beq.n	8010596 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8010546:	783b      	ldrb	r3, [r7, #0]
 8010548:	f003 0320 	and.w	r3, r3, #32
 801054c:	b2db      	uxtb	r3, r3
 801054e:	2b00      	cmp	r3, #0
 8010550:	d001      	beq.n	8010556 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8010552:	f7ff f91f 	bl	800f794 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8010556:	783b      	ldrb	r3, [r7, #0]
 8010558:	f003 0310 	and.w	r3, r3, #16
 801055c:	b2db      	uxtb	r3, r3
 801055e:	2b00      	cmp	r3, #0
 8010560:	d001      	beq.n	8010566 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8010562:	f7ff f9e3 	bl	800f92c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8010566:	783b      	ldrb	r3, [r7, #0]
 8010568:	f003 0308 	and.w	r3, r3, #8
 801056c:	b2db      	uxtb	r3, r3
 801056e:	2b00      	cmp	r3, #0
 8010570:	d001      	beq.n	8010576 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8010572:	f7ff ff05 	bl	8010380 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8010576:	783b      	ldrb	r3, [r7, #0]
 8010578:	f003 0304 	and.w	r3, r3, #4
 801057c:	b2db      	uxtb	r3, r3
 801057e:	2b00      	cmp	r3, #0
 8010580:	d001      	beq.n	8010586 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8010582:	f7ff ffb7 	bl	80104f4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8010586:	783b      	ldrb	r3, [r7, #0]
 8010588:	f003 0302 	and.w	r3, r3, #2
 801058c:	b2db      	uxtb	r3, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	d001      	beq.n	8010596 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8010592:	f7ff ffb7 	bl	8010504 <ProcessRadioRxTimeout>
        }
    }
}
 8010596:	bf00      	nop
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	20001ad4 	.word	0x20001ad4

080105a4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 80105a4:	b480      	push	{r7}
 80105a6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80105a8:	4b10      	ldr	r3, [pc, #64]	@ (80105ec <LoRaMacIsBusy+0x48>)
 80105aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d101      	bne.n	80105b6 <LoRaMacIsBusy+0x12>
    {
        return false;
 80105b2:	2300      	movs	r3, #0
 80105b4:	e015      	b.n	80105e2 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 80105b6:	4b0e      	ldr	r3, [pc, #56]	@ (80105f0 <LoRaMacIsBusy+0x4c>)
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	f003 0301 	and.w	r3, r3, #1
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d001      	beq.n	80105c8 <LoRaMacIsBusy+0x24>
    {
        return true;
 80105c4:	2301      	movs	r3, #1
 80105c6:	e00c      	b.n	80105e2 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80105c8:	4b08      	ldr	r3, [pc, #32]	@ (80105ec <LoRaMacIsBusy+0x48>)
 80105ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d106      	bne.n	80105e0 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80105d2:	4b06      	ldr	r3, [pc, #24]	@ (80105ec <LoRaMacIsBusy+0x48>)
 80105d4:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80105d8:	2b01      	cmp	r3, #1
 80105da:	d101      	bne.n	80105e0 <LoRaMacIsBusy+0x3c>
    {
        return false;
 80105dc:	2300      	movs	r3, #0
 80105de:	e000      	b.n	80105e2 <LoRaMacIsBusy+0x3e>
    }
    return true;
 80105e0:	2301      	movs	r3, #1
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bc80      	pop	{r7}
 80105e8:	4770      	bx	lr
 80105ea:	bf00      	nop
 80105ec:	20000998 	.word	0x20000998
 80105f0:	20001ad4 	.word	0x20001ad4

080105f4 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80105f4:	b480      	push	{r7}
 80105f6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80105f8:	4b05      	ldr	r3, [pc, #20]	@ (8010610 <LoRaMacIsStopped+0x1c>)
 80105fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d101      	bne.n	8010606 <LoRaMacIsStopped+0x12>
    {
        return true;
 8010602:	2301      	movs	r3, #1
 8010604:	e000      	b.n	8010608 <LoRaMacIsStopped+0x14>
    }
    return false;
 8010606:	2300      	movs	r3, #0
}
 8010608:	4618      	mov	r0, r3
 801060a:	46bd      	mov	sp, r7
 801060c:	bc80      	pop	{r7}
 801060e:	4770      	bx	lr
 8010610:	20000998 	.word	0x20000998

08010614 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	4603      	mov	r3, r0
 801061c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 801061e:	4a04      	ldr	r2, [pc, #16]	@ (8010630 <LoRaMacEnableRequests+0x1c>)
 8010620:	79fb      	ldrb	r3, [r7, #7]
 8010622:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 8010626:	bf00      	nop
 8010628:	370c      	adds	r7, #12
 801062a:	46bd      	mov	sp, r7
 801062c:	bc80      	pop	{r7}
 801062e:	4770      	bx	lr
 8010630:	20000998 	.word	0x20000998

08010634 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 801063a:	4b2c      	ldr	r3, [pc, #176]	@ (80106ec <LoRaMacHandleRequestEvents+0xb8>)
 801063c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010640:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010642:	4b2a      	ldr	r3, [pc, #168]	@ (80106ec <LoRaMacHandleRequestEvents+0xb8>)
 8010644:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010648:	2b00      	cmp	r3, #0
 801064a:	d14a      	bne.n	80106e2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801064c:	4b27      	ldr	r3, [pc, #156]	@ (80106ec <LoRaMacHandleRequestEvents+0xb8>)
 801064e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b00      	cmp	r3, #0
 801065a:	d006      	beq.n	801066a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 801065c:	4a23      	ldr	r2, [pc, #140]	@ (80106ec <LoRaMacHandleRequestEvents+0xb8>)
 801065e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010662:	f023 0301 	bic.w	r3, r3, #1
 8010666:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801066a:	4b20      	ldr	r3, [pc, #128]	@ (80106ec <LoRaMacHandleRequestEvents+0xb8>)
 801066c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010670:	f003 0304 	and.w	r3, r3, #4
 8010674:	b2db      	uxtb	r3, r3
 8010676:	2b00      	cmp	r3, #0
 8010678:	d006      	beq.n	8010688 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801067a:	4a1c      	ldr	r2, [pc, #112]	@ (80106ec <LoRaMacHandleRequestEvents+0xb8>)
 801067c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010680:	f023 0304 	bic.w	r3, r3, #4
 8010684:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010688:	2001      	movs	r0, #1
 801068a:	f7ff ffc3 	bl	8010614 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801068e:	793b      	ldrb	r3, [r7, #4]
 8010690:	f003 0301 	and.w	r3, r3, #1
 8010694:	b2db      	uxtb	r3, r3
 8010696:	2b00      	cmp	r3, #0
 8010698:	d005      	beq.n	80106a6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801069a:	4b14      	ldr	r3, [pc, #80]	@ (80106ec <LoRaMacHandleRequestEvents+0xb8>)
 801069c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	4813      	ldr	r0, [pc, #76]	@ (80106f0 <LoRaMacHandleRequestEvents+0xbc>)
 80106a4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80106a6:	793b      	ldrb	r3, [r7, #4]
 80106a8:	f003 0304 	and.w	r3, r3, #4
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d00e      	beq.n	80106d0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80106b2:	4810      	ldr	r0, [pc, #64]	@ (80106f4 <LoRaMacHandleRequestEvents+0xc0>)
 80106b4:	f004 fda8 	bl	8015208 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80106b8:	f004 fdf8 	bl	80152ac <LoRaMacConfirmQueueGetCnt>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d006      	beq.n	80106d0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80106c2:	4a0a      	ldr	r2, [pc, #40]	@ (80106ec <LoRaMacHandleRequestEvents+0xb8>)
 80106c4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80106c8:	f043 0304 	orr.w	r3, r3, #4
 80106cc:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80106d0:	f004 f8a2 	bl	8014818 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80106d4:	4a05      	ldr	r2, [pc, #20]	@ (80106ec <LoRaMacHandleRequestEvents+0xb8>)
 80106d6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80106da:	f023 0310 	bic.w	r3, r3, #16
 80106de:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 80106e2:	bf00      	nop
 80106e4:	3708      	adds	r7, #8
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	20000998 	.word	0x20000998
 80106f0:	20000dd8 	.word	0x20000dd8
 80106f4:	20000dec 	.word	0x20000dec

080106f8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80106fc:	4b16      	ldr	r3, [pc, #88]	@ (8010758 <LoRaMacHandleIndicationEvents+0x60>)
 80106fe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010702:	f003 0308 	and.w	r3, r3, #8
 8010706:	b2db      	uxtb	r3, r3
 8010708:	2b00      	cmp	r3, #0
 801070a:	d00d      	beq.n	8010728 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 801070c:	4a12      	ldr	r2, [pc, #72]	@ (8010758 <LoRaMacHandleIndicationEvents+0x60>)
 801070e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010712:	f023 0308 	bic.w	r3, r3, #8
 8010716:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801071a:	4b0f      	ldr	r3, [pc, #60]	@ (8010758 <LoRaMacHandleIndicationEvents+0x60>)
 801071c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	490e      	ldr	r1, [pc, #56]	@ (801075c <LoRaMacHandleIndicationEvents+0x64>)
 8010724:	480e      	ldr	r0, [pc, #56]	@ (8010760 <LoRaMacHandleIndicationEvents+0x68>)
 8010726:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010728:	4b0b      	ldr	r3, [pc, #44]	@ (8010758 <LoRaMacHandleIndicationEvents+0x60>)
 801072a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801072e:	f003 0302 	and.w	r3, r3, #2
 8010732:	b2db      	uxtb	r3, r3
 8010734:	2b00      	cmp	r3, #0
 8010736:	d00d      	beq.n	8010754 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010738:	4a07      	ldr	r2, [pc, #28]	@ (8010758 <LoRaMacHandleIndicationEvents+0x60>)
 801073a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801073e:	f023 0302 	bic.w	r3, r3, #2
 8010742:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8010746:	4b04      	ldr	r3, [pc, #16]	@ (8010758 <LoRaMacHandleIndicationEvents+0x60>)
 8010748:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	4903      	ldr	r1, [pc, #12]	@ (801075c <LoRaMacHandleIndicationEvents+0x64>)
 8010750:	4804      	ldr	r0, [pc, #16]	@ (8010764 <LoRaMacHandleIndicationEvents+0x6c>)
 8010752:	4798      	blx	r3
    }
}
 8010754:	bf00      	nop
 8010756:	bd80      	pop	{r7, pc}
 8010758:	20000998 	.word	0x20000998
 801075c:	20000e24 	.word	0x20000e24
 8010760:	20000e00 	.word	0x20000e00
 8010764:	20000db8 	.word	0x20000db8

08010768 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801076e:	4b2a      	ldr	r3, [pc, #168]	@ (8010818 <LoRaMacHandleMcpsRequest+0xb0>)
 8010770:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010774:	f003 0301 	and.w	r3, r3, #1
 8010778:	b2db      	uxtb	r3, r3
 801077a:	2b00      	cmp	r3, #0
 801077c:	d048      	beq.n	8010810 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 801077e:	2300      	movs	r3, #0
 8010780:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010782:	2300      	movs	r3, #0
 8010784:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010786:	4b24      	ldr	r3, [pc, #144]	@ (8010818 <LoRaMacHandleMcpsRequest+0xb0>)
 8010788:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 801078c:	2b00      	cmp	r3, #0
 801078e:	d004      	beq.n	801079a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010790:	4b21      	ldr	r3, [pc, #132]	@ (8010818 <LoRaMacHandleMcpsRequest+0xb0>)
 8010792:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010796:	2b03      	cmp	r3, #3
 8010798:	d104      	bne.n	80107a4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801079a:	f002 f959 	bl	8012a50 <CheckRetransUnconfirmedUplink>
 801079e:	4603      	mov	r3, r0
 80107a0:	71fb      	strb	r3, [r7, #7]
 80107a2:	e010      	b.n	80107c6 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80107a4:	4b1c      	ldr	r3, [pc, #112]	@ (8010818 <LoRaMacHandleMcpsRequest+0xb0>)
 80107a6:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d10b      	bne.n	80107c6 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 80107ae:	4b1a      	ldr	r3, [pc, #104]	@ (8010818 <LoRaMacHandleMcpsRequest+0xb0>)
 80107b0:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d004      	beq.n	80107c2 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80107b8:	f002 f976 	bl	8012aa8 <CheckRetransConfirmedUplink>
 80107bc:	4603      	mov	r3, r0
 80107be:	71fb      	strb	r3, [r7, #7]
 80107c0:	e001      	b.n	80107c6 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 80107c2:	2301      	movs	r3, #1
 80107c4:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80107c6:	79fb      	ldrb	r3, [r7, #7]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00d      	beq.n	80107e8 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80107cc:	4813      	ldr	r0, [pc, #76]	@ (801081c <LoRaMacHandleMcpsRequest+0xb4>)
 80107ce:	f00c f881 	bl	801c8d4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80107d2:	4b11      	ldr	r3, [pc, #68]	@ (8010818 <LoRaMacHandleMcpsRequest+0xb0>)
 80107d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80107d8:	f023 0320 	bic.w	r3, r3, #32
 80107dc:	4a0e      	ldr	r2, [pc, #56]	@ (8010818 <LoRaMacHandleMcpsRequest+0xb0>)
 80107de:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 80107e2:	f002 f99b 	bl	8012b1c <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80107e6:	e013      	b.n	8010810 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 80107e8:	79bb      	ldrb	r3, [r7, #6]
 80107ea:	f083 0301 	eor.w	r3, r3, #1
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00d      	beq.n	8010810 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80107f4:	4a08      	ldr	r2, [pc, #32]	@ (8010818 <LoRaMacHandleMcpsRequest+0xb0>)
 80107f6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80107fa:	f023 0310 	bic.w	r3, r3, #16
 80107fe:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8010802:	4b05      	ldr	r3, [pc, #20]	@ (8010818 <LoRaMacHandleMcpsRequest+0xb0>)
 8010804:	2200      	movs	r2, #0
 8010806:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 801080a:	2000      	movs	r0, #0
 801080c:	f000 f9c8 	bl	8010ba0 <OnTxDelayedTimerEvent>
}
 8010810:	bf00      	nop
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	20000998 	.word	0x20000998
 801081c:	20000d00 	.word	0x20000d00

08010820 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010820:	b580      	push	{r7, lr}
 8010822:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010824:	4b18      	ldr	r3, [pc, #96]	@ (8010888 <LoRaMacHandleMlmeRequest+0x68>)
 8010826:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801082a:	f003 0304 	and.w	r3, r3, #4
 801082e:	b2db      	uxtb	r3, r3
 8010830:	2b00      	cmp	r3, #0
 8010832:	d026      	beq.n	8010882 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010834:	2001      	movs	r0, #1
 8010836:	f004 fccd 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d012      	beq.n	8010866 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010840:	2001      	movs	r0, #1
 8010842:	f004 fc69 	bl	8015118 <LoRaMacConfirmQueueGetStatus>
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d103      	bne.n	8010854 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 801084c:	4b0e      	ldr	r3, [pc, #56]	@ (8010888 <LoRaMacHandleMlmeRequest+0x68>)
 801084e:	2200      	movs	r2, #0
 8010850:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010854:	4b0c      	ldr	r3, [pc, #48]	@ (8010888 <LoRaMacHandleMlmeRequest+0x68>)
 8010856:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801085a:	f023 0302 	bic.w	r3, r3, #2
 801085e:	4a0a      	ldr	r2, [pc, #40]	@ (8010888 <LoRaMacHandleMlmeRequest+0x68>)
 8010860:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010864:	e00d      	b.n	8010882 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8010866:	2006      	movs	r0, #6
 8010868:	f004 fcb4 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 801086c:	4603      	mov	r3, r0
 801086e:	2b00      	cmp	r3, #0
 8010870:	d007      	beq.n	8010882 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010872:	4b05      	ldr	r3, [pc, #20]	@ (8010888 <LoRaMacHandleMlmeRequest+0x68>)
 8010874:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010878:	f023 0302 	bic.w	r3, r3, #2
 801087c:	4a02      	ldr	r2, [pc, #8]	@ (8010888 <LoRaMacHandleMlmeRequest+0x68>)
 801087e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 8010882:	bf00      	nop
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	20000998 	.word	0x20000998

0801088c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 801088c:	b580      	push	{r7, lr}
 801088e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010890:	200b      	movs	r0, #11
 8010892:	f004 fc9f 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d019      	beq.n	80108d0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 801089c:	4b0e      	ldr	r3, [pc, #56]	@ (80108d8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801089e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80108a2:	f003 0301 	and.w	r3, r3, #1
 80108a6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d111      	bne.n	80108d0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80108ac:	4b0a      	ldr	r3, [pc, #40]	@ (80108d8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108ae:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80108b2:	f003 0304 	and.w	r3, r3, #4
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d009      	beq.n	80108d0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80108bc:	4b06      	ldr	r3, [pc, #24]	@ (80108d8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108be:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80108c2:	f023 0302 	bic.w	r3, r3, #2
 80108c6:	4a04      	ldr	r2, [pc, #16]	@ (80108d8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108c8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 80108cc:	2301      	movs	r3, #1
 80108ce:	e000      	b.n	80108d2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	20000998 	.word	0x20000998

080108dc <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	4603      	mov	r3, r0
 80108e4:	71fb      	strb	r3, [r7, #7]
 80108e6:	460b      	mov	r3, r1
 80108e8:	71bb      	strb	r3, [r7, #6]
 80108ea:	4613      	mov	r3, r2
 80108ec:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 80108ee:	79fb      	ldrb	r3, [r7, #7]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00a      	beq.n	801090a <CheckForMinimumAbpDatarate+0x2e>
 80108f4:	79bb      	ldrb	r3, [r7, #6]
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d107      	bne.n	801090a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 80108fa:	797b      	ldrb	r3, [r7, #5]
 80108fc:	f083 0301 	eor.w	r3, r3, #1
 8010900:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8010902:	2b00      	cmp	r3, #0
 8010904:	d001      	beq.n	801090a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8010906:	2301      	movs	r3, #1
 8010908:	e000      	b.n	801090c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 801090a:	2300      	movs	r3, #0
}
 801090c:	4618      	mov	r0, r3
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	bc80      	pop	{r7}
 8010914:	4770      	bx	lr
	...

08010918 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8010918:	b480      	push	{r7}
 801091a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 801091c:	4b0d      	ldr	r3, [pc, #52]	@ (8010954 <LoRaMacCheckForRxAbort+0x3c>)
 801091e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010926:	2b00      	cmp	r3, #0
 8010928:	d00f      	beq.n	801094a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801092a:	4b0a      	ldr	r3, [pc, #40]	@ (8010954 <LoRaMacCheckForRxAbort+0x3c>)
 801092c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010930:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010934:	4a07      	ldr	r2, [pc, #28]	@ (8010954 <LoRaMacCheckForRxAbort+0x3c>)
 8010936:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801093a:	4b06      	ldr	r3, [pc, #24]	@ (8010954 <LoRaMacCheckForRxAbort+0x3c>)
 801093c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010940:	f023 0302 	bic.w	r3, r3, #2
 8010944:	4a03      	ldr	r2, [pc, #12]	@ (8010954 <LoRaMacCheckForRxAbort+0x3c>)
 8010946:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 801094a:	bf00      	nop
 801094c:	46bd      	mov	sp, r7
 801094e:	bc80      	pop	{r7}
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	20000998 	.word	0x20000998

08010958 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010960:	2300      	movs	r3, #0
 8010962:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010964:	2300      	movs	r3, #0
 8010966:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010968:	4b51      	ldr	r3, [pc, #324]	@ (8010ab0 <LoRaMacHandleNvm+0x158>)
 801096a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801096e:	2b00      	cmp	r3, #0
 8010970:	f040 8099 	bne.w	8010aa6 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2124      	movs	r1, #36	@ 0x24
 8010978:	4618      	mov	r0, r3
 801097a:	f008 f913 	bl	8018ba4 <Crc32>
 801097e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010984:	68ba      	ldr	r2, [r7, #8]
 8010986:	429a      	cmp	r2, r3
 8010988:	d006      	beq.n	8010998 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010990:	89fb      	ldrh	r3, [r7, #14]
 8010992:	f043 0301 	orr.w	r3, r3, #1
 8010996:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	3328      	adds	r3, #40	@ 0x28
 801099c:	211c      	movs	r1, #28
 801099e:	4618      	mov	r0, r3
 80109a0:	f008 f900 	bl	8018ba4 <Crc32>
 80109a4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109aa:	68ba      	ldr	r2, [r7, #8]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d006      	beq.n	80109be <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	68ba      	ldr	r2, [r7, #8]
 80109b4:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80109b6:	89fb      	ldrh	r3, [r7, #14]
 80109b8:	f043 0302 	orr.w	r3, r3, #2
 80109bc:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	3348      	adds	r3, #72	@ 0x48
 80109c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80109c6:	4618      	mov	r0, r3
 80109c8:	f008 f8ec 	bl	8018ba4 <Crc32>
 80109cc:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80109d4:	68ba      	ldr	r2, [r7, #8]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d007      	beq.n	80109ea <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	68ba      	ldr	r2, [r7, #8]
 80109de:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80109e2:	89fb      	ldrh	r3, [r7, #14]
 80109e4:	f043 0304 	orr.w	r3, r3, #4
 80109e8:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80109f0:	21d4      	movs	r1, #212	@ 0xd4
 80109f2:	4618      	mov	r0, r3
 80109f4:	f008 f8d6 	bl	8018ba4 <Crc32>
 80109f8:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8010a00:	68ba      	ldr	r2, [r7, #8]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d007      	beq.n	8010a16 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	68ba      	ldr	r2, [r7, #8]
 8010a0a:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8010a0e:	89fb      	ldrh	r3, [r7, #14]
 8010a10:	f043 0308 	orr.w	r3, r3, #8
 8010a14:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8010a1c:	2100      	movs	r1, #0
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f008 f8c0 	bl	8018ba4 <Crc32>
 8010a24:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010a2c:	68ba      	ldr	r2, [r7, #8]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d007      	beq.n	8010a42 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010a3a:	89fb      	ldrh	r3, [r7, #14]
 8010a3c:	f043 0310 	orr.w	r3, r3, #16
 8010a40:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8010a48:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f008 f8a9 	bl	8018ba4 <Crc32>
 8010a52:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d007      	beq.n	8010a70 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	68ba      	ldr	r2, [r7, #8]
 8010a64:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010a68:	89fb      	ldrh	r3, [r7, #14]
 8010a6a:	f043 0320 	orr.w	r3, r3, #32
 8010a6e:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 8010a76:	2114      	movs	r1, #20
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f008 f893 	bl	8018ba4 <Crc32>
 8010a7e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 8010a86:	68ba      	ldr	r2, [r7, #8]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d007      	beq.n	8010a9c <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	68ba      	ldr	r2, [r7, #8]
 8010a90:	f8c3 25b8 	str.w	r2, [r3, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010a94:	89fb      	ldrh	r3, [r7, #14]
 8010a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a9a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010a9c:	89fb      	ldrh	r3, [r7, #14]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f002 f88e 	bl	8012bc0 <CallNvmDataChangeCallback>
 8010aa4:	e000      	b.n	8010aa8 <LoRaMacHandleNvm+0x150>
        return;
 8010aa6:	bf00      	nop
}
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	20000998 	.word	0x20000998

08010ab4 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d00d      	beq.n	8010ae0 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8010ac4:	6838      	ldr	r0, [r7, #0]
 8010ac6:	f00c f831 	bl	801cb2c <UTIL_TIMER_GetElapsedTime>
 8010aca:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d905      	bls.n	8010ae0 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8010ad4:	4b05      	ldr	r3, [pc, #20]	@ (8010aec <LoRaMacHandleResponseTimeout+0x38>)
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 8010adc:	2301      	movs	r3, #1
 8010ade:	e000      	b.n	8010ae2 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	20000ecc 	.word	0x20000ecc

08010af0 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8010af6:	2300      	movs	r3, #0
 8010af8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8010afa:	f7ff fd0b 	bl	8010514 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8010afe:	f003 fefa 	bl	80148f6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010b02:	4b25      	ldr	r3, [pc, #148]	@ (8010b98 <LoRaMacProcess+0xa8>)
 8010b04:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010b08:	f003 0310 	and.w	r3, r3, #16
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d023      	beq.n	8010b5a <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8010b12:	2000      	movs	r0, #0
 8010b14:	f7ff fd7e 	bl	8010614 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010b18:	f7ff fefe 	bl	8010918 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010b1c:	f002 f86e 	bl	8012bfc <IsRequestPending>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d006      	beq.n	8010b34 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010b26:	f7ff feb1 	bl	801088c <LoRaMacCheckForBeaconAcquisition>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	79fb      	ldrb	r3, [r7, #7]
 8010b30:	4313      	orrs	r3, r2
 8010b32:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010b34:	79fb      	ldrb	r3, [r7, #7]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d103      	bne.n	8010b42 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010b3a:	f7ff fe71 	bl	8010820 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010b3e:	f7ff fe13 	bl	8010768 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010b42:	f7ff fd77 	bl	8010634 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010b46:	2001      	movs	r0, #1
 8010b48:	f7ff fd64 	bl	8010614 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010b4c:	4a12      	ldr	r2, [pc, #72]	@ (8010b98 <LoRaMacProcess+0xa8>)
 8010b4e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010b52:	f043 0320 	orr.w	r3, r3, #32
 8010b56:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8010b5a:	f7ff fdcd 	bl	80106f8 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8010b98 <LoRaMacProcess+0xa8>)
 8010b60:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010b64:	2b02      	cmp	r3, #2
 8010b66:	d101      	bne.n	8010b6c <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8010b68:	f001 fc32 	bl	80123d0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010b98 <LoRaMacProcess+0xa8>)
 8010b6e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010b72:	f003 0320 	and.w	r3, r3, #32
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d009      	beq.n	8010b90 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010b7c:	4a06      	ldr	r2, [pc, #24]	@ (8010b98 <LoRaMacProcess+0xa8>)
 8010b7e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010b82:	f023 0320 	bic.w	r3, r3, #32
 8010b86:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 8010b8a:	4804      	ldr	r0, [pc, #16]	@ (8010b9c <LoRaMacProcess+0xac>)
 8010b8c:	f7ff fee4 	bl	8010958 <LoRaMacHandleNvm>
    }
}
 8010b90:	bf00      	nop
 8010b92:	3708      	adds	r7, #8
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	20000998 	.word	0x20000998
 8010b9c:	20000ecc 	.word	0x20000ecc

08010ba0 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010ba8:	481e      	ldr	r0, [pc, #120]	@ (8010c24 <OnTxDelayedTimerEvent+0x84>)
 8010baa:	f00b fe93 	bl	801c8d4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010bae:	4b1e      	ldr	r3, [pc, #120]	@ (8010c28 <OnTxDelayedTimerEvent+0x88>)
 8010bb0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010bb4:	f023 0320 	bic.w	r3, r3, #32
 8010bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8010c28 <OnTxDelayedTimerEvent+0x88>)
 8010bba:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8010c2c <OnTxDelayedTimerEvent+0x8c>)
 8010bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bc4:	4a18      	ldr	r2, [pc, #96]	@ (8010c28 <OnTxDelayedTimerEvent+0x88>)
 8010bc6:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8010bca:	4611      	mov	r1, r2
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7ff ff71 	bl	8010ab4 <LoRaMacHandleResponseTimeout>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d11e      	bne.n	8010c16 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010bd8:	2001      	movs	r0, #1
 8010bda:	f001 f943 	bl	8011e64 <ScheduleTx>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d01a      	beq.n	8010c1a <OnTxDelayedTimerEvent+0x7a>
 8010be4:	2b0b      	cmp	r3, #11
 8010be6:	d018      	beq.n	8010c1a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010be8:	4b10      	ldr	r3, [pc, #64]	@ (8010c2c <OnTxDelayedTimerEvent+0x8c>)
 8010bea:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010bee:	b2da      	uxtb	r2, r3
 8010bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8010c28 <OnTxDelayedTimerEvent+0x88>)
 8010bf2:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8010c28 <OnTxDelayedTimerEvent+0x88>)
 8010bf8:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8010c28 <OnTxDelayedTimerEvent+0x88>)
 8010bfe:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010c02:	4b09      	ldr	r3, [pc, #36]	@ (8010c28 <OnTxDelayedTimerEvent+0x88>)
 8010c04:	2209      	movs	r2, #9
 8010c06:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010c0a:	2009      	movs	r0, #9
 8010c0c:	f004 faae 	bl	801516c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010c10:	f001 ff84 	bl	8012b1c <StopRetransmission>
            break;
 8010c14:	e002      	b.n	8010c1c <OnTxDelayedTimerEvent+0x7c>
        return;
 8010c16:	bf00      	nop
 8010c18:	e000      	b.n	8010c1c <OnTxDelayedTimerEvent+0x7c>
            break;
 8010c1a:	bf00      	nop
        }
    }
}
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	20000d00 	.word	0x20000d00
 8010c28:	20000998 	.word	0x20000998
 8010c2c:	20000ecc 	.word	0x20000ecc

08010c30 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010c38:	4b17      	ldr	r3, [pc, #92]	@ (8010c98 <OnRxWindow1TimerEvent+0x68>)
 8010c3a:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010c3e:	4b16      	ldr	r3, [pc, #88]	@ (8010c98 <OnRxWindow1TimerEvent+0x68>)
 8010c40:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010c44:	4b15      	ldr	r3, [pc, #84]	@ (8010c9c <OnRxWindow1TimerEvent+0x6c>)
 8010c46:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010c4a:	b25a      	sxtb	r2, r3
 8010c4c:	4b12      	ldr	r3, [pc, #72]	@ (8010c98 <OnRxWindow1TimerEvent+0x68>)
 8010c4e:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010c52:	4b12      	ldr	r3, [pc, #72]	@ (8010c9c <OnRxWindow1TimerEvent+0x6c>)
 8010c54:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010c58:	4b0f      	ldr	r3, [pc, #60]	@ (8010c98 <OnRxWindow1TimerEvent+0x68>)
 8010c5a:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8010c9c <OnRxWindow1TimerEvent+0x6c>)
 8010c60:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010c64:	4b0c      	ldr	r3, [pc, #48]	@ (8010c98 <OnRxWindow1TimerEvent+0x68>)
 8010c66:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8010c98 <OnRxWindow1TimerEvent+0x68>)
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010c72:	4b09      	ldr	r3, [pc, #36]	@ (8010c98 <OnRxWindow1TimerEvent+0x68>)
 8010c74:	2200      	movs	r2, #0
 8010c76:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010c7a:	4b08      	ldr	r3, [pc, #32]	@ (8010c9c <OnRxWindow1TimerEvent+0x6c>)
 8010c7c:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010c80:	4b05      	ldr	r3, [pc, #20]	@ (8010c98 <OnRxWindow1TimerEvent+0x68>)
 8010c82:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010c86:	4906      	ldr	r1, [pc, #24]	@ (8010ca0 <OnRxWindow1TimerEvent+0x70>)
 8010c88:	4806      	ldr	r0, [pc, #24]	@ (8010ca4 <OnRxWindow1TimerEvent+0x74>)
 8010c8a:	f001 fb6d 	bl	8012368 <RxWindowSetup>
}
 8010c8e:	bf00      	nop
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	20000998 	.word	0x20000998
 8010c9c:	20000ecc 	.word	0x20000ecc
 8010ca0:	20000d50 	.word	0x20000d50
 8010ca4:	20000d18 	.word	0x20000d18

08010ca8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010cb0:	4b19      	ldr	r3, [pc, #100]	@ (8010d18 <OnRxWindow2TimerEvent+0x70>)
 8010cb2:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d029      	beq.n	8010d0e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010cba:	4b17      	ldr	r3, [pc, #92]	@ (8010d18 <OnRxWindow2TimerEvent+0x70>)
 8010cbc:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010cc0:	4b15      	ldr	r3, [pc, #84]	@ (8010d18 <OnRxWindow2TimerEvent+0x70>)
 8010cc2:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010cc6:	4b15      	ldr	r3, [pc, #84]	@ (8010d1c <OnRxWindow2TimerEvent+0x74>)
 8010cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cca:	4a13      	ldr	r2, [pc, #76]	@ (8010d18 <OnRxWindow2TimerEvent+0x70>)
 8010ccc:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010cd0:	4b12      	ldr	r3, [pc, #72]	@ (8010d1c <OnRxWindow2TimerEvent+0x74>)
 8010cd2:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010cd6:	4b10      	ldr	r3, [pc, #64]	@ (8010d18 <OnRxWindow2TimerEvent+0x70>)
 8010cd8:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8010d1c <OnRxWindow2TimerEvent+0x74>)
 8010cde:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8010d18 <OnRxWindow2TimerEvent+0x70>)
 8010ce4:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8010d18 <OnRxWindow2TimerEvent+0x70>)
 8010cea:	2200      	movs	r2, #0
 8010cec:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010cf0:	4b09      	ldr	r3, [pc, #36]	@ (8010d18 <OnRxWindow2TimerEvent+0x70>)
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010cf8:	4b08      	ldr	r3, [pc, #32]	@ (8010d1c <OnRxWindow2TimerEvent+0x74>)
 8010cfa:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010cfe:	4b06      	ldr	r3, [pc, #24]	@ (8010d18 <OnRxWindow2TimerEvent+0x70>)
 8010d00:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010d04:	4906      	ldr	r1, [pc, #24]	@ (8010d20 <OnRxWindow2TimerEvent+0x78>)
 8010d06:	4807      	ldr	r0, [pc, #28]	@ (8010d24 <OnRxWindow2TimerEvent+0x7c>)
 8010d08:	f001 fb2e 	bl	8012368 <RxWindowSetup>
 8010d0c:	e000      	b.n	8010d10 <OnRxWindow2TimerEvent+0x68>
        return;
 8010d0e:	bf00      	nop
}
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	20000998 	.word	0x20000998
 8010d1c:	20000ecc 	.word	0x20000ecc
 8010d20:	20000d68 	.word	0x20000d68
 8010d24:	20000d30 	.word	0x20000d30

08010d28 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010d30:	4808      	ldr	r0, [pc, #32]	@ (8010d54 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8010d32:	f00b fdcf 	bl	801c8d4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010d36:	4b08      	ldr	r3, [pc, #32]	@ (8010d58 <OnRetransmitTimeoutTimerEvent+0x30>)
 8010d38:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d003      	beq.n	8010d48 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8010d40:	4b05      	ldr	r3, [pc, #20]	@ (8010d58 <OnRetransmitTimeoutTimerEvent+0x30>)
 8010d42:	2201      	movs	r2, #1
 8010d44:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 8010d48:	f001 ff24 	bl	8012b94 <OnMacProcessNotify>
}
 8010d4c:	bf00      	nop
 8010d4e:	3708      	adds	r7, #8
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	20000d98 	.word	0x20000d98
 8010d58:	20000998 	.word	0x20000998

08010d5c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	60ba      	str	r2, [r7, #8]
 8010d64:	607b      	str	r3, [r7, #4]
 8010d66:	4603      	mov	r3, r0
 8010d68:	73fb      	strb	r3, [r7, #15]
 8010d6a:	460b      	mov	r3, r1
 8010d6c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d005      	beq.n	8010d80 <GetFCntDown+0x24>
 8010d74:	69bb      	ldr	r3, [r7, #24]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d002      	beq.n	8010d80 <GetFCntDown+0x24>
 8010d7a:	69fb      	ldr	r3, [r7, #28]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d101      	bne.n	8010d84 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010d80:	2309      	movs	r3, #9
 8010d82:	e028      	b.n	8010dd6 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010d84:	7bfb      	ldrb	r3, [r7, #15]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d016      	beq.n	8010db8 <GetFCntDown+0x5c>
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d118      	bne.n	8010dc0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010d8e:	79bb      	ldrb	r3, [r7, #6]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d10d      	bne.n	8010db0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010d94:	7bbb      	ldrb	r3, [r7, #14]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d002      	beq.n	8010da0 <GetFCntDown+0x44>
 8010d9a:	7bbb      	ldrb	r3, [r7, #14]
 8010d9c:	2b03      	cmp	r3, #3
 8010d9e:	d103      	bne.n	8010da8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	2202      	movs	r2, #2
 8010da4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010da6:	e00d      	b.n	8010dc4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010da8:	69bb      	ldr	r3, [r7, #24]
 8010daa:	2201      	movs	r2, #1
 8010dac:	701a      	strb	r2, [r3, #0]
            break;
 8010dae:	e009      	b.n	8010dc4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	2203      	movs	r2, #3
 8010db4:	701a      	strb	r2, [r3, #0]
            break;
 8010db6:	e005      	b.n	8010dc4 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	2204      	movs	r2, #4
 8010dbc:	701a      	strb	r2, [r3, #0]
            break;
 8010dbe:	e001      	b.n	8010dc4 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010dc0:	2305      	movs	r3, #5
 8010dc2:	e008      	b.n	8010dd6 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8010dc4:	69bb      	ldr	r3, [r7, #24]
 8010dc6:	7818      	ldrb	r0, [r3, #0]
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	89db      	ldrh	r3, [r3, #14]
 8010dcc:	69fa      	ldr	r2, [r7, #28]
 8010dce:	4619      	mov	r1, r3
 8010dd0:	f004 fe06 	bl	80159e0 <LoRaMacCryptoGetFCntDown>
 8010dd4:	4603      	mov	r3, r0
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
	...

08010de0 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010de0:	b5b0      	push	{r4, r5, r7, lr}
 8010de2:	b084      	sub	sp, #16
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	4603      	mov	r3, r0
 8010de8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010dea:	2303      	movs	r3, #3
 8010dec:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8010dee:	4b6e      	ldr	r3, [pc, #440]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010df0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010df4:	2b02      	cmp	r3, #2
 8010df6:	f000 80bb 	beq.w	8010f70 <SwitchClass+0x190>
 8010dfa:	2b02      	cmp	r3, #2
 8010dfc:	f300 80ce 	bgt.w	8010f9c <SwitchClass+0x1bc>
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d003      	beq.n	8010e0c <SwitchClass+0x2c>
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	f000 80a5 	beq.w	8010f54 <SwitchClass+0x174>
 8010e0a:	e0c7      	b.n	8010f9c <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010e0c:	79fb      	ldrb	r3, [r7, #7]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d109      	bne.n	8010e26 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010e12:	4b65      	ldr	r3, [pc, #404]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010e14:	4a64      	ldr	r2, [pc, #400]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010e16:	3374      	adds	r3, #116	@ 0x74
 8010e18:	326c      	adds	r2, #108	@ 0x6c
 8010e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e1e:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8010e22:	2300      	movs	r3, #0
 8010e24:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8010e26:	79fb      	ldrb	r3, [r7, #7]
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	d10c      	bne.n	8010e46 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010e2c:	79fb      	ldrb	r3, [r7, #7]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f003 fcf8 	bl	8014824 <LoRaMacClassBSwitchClass>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d103      	bne.n	8010e46 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010e3e:	4a5a      	ldr	r2, [pc, #360]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010e40:	79fb      	ldrb	r3, [r7, #7]
 8010e42:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8010e46:	79fb      	ldrb	r3, [r7, #7]
 8010e48:	2b02      	cmp	r3, #2
 8010e4a:	f040 80a2 	bne.w	8010f92 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010e4e:	4a56      	ldr	r2, [pc, #344]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010e50:	79fb      	ldrb	r3, [r7, #7]
 8010e52:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010e56:	4a55      	ldr	r2, [pc, #340]	@ (8010fac <SwitchClass+0x1cc>)
 8010e58:	4b54      	ldr	r3, [pc, #336]	@ (8010fac <SwitchClass+0x1cc>)
 8010e5a:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010e5e:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010e6a:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8010fac <SwitchClass+0x1cc>)
 8010e70:	2202      	movs	r2, #2
 8010e72:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010e76:	2300      	movs	r3, #0
 8010e78:	73bb      	strb	r3, [r7, #14]
 8010e7a:	e05b      	b.n	8010f34 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010e7c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010e80:	4949      	ldr	r1, [pc, #292]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010e82:	4613      	mov	r3, r2
 8010e84:	005b      	lsls	r3, r3, #1
 8010e86:	4413      	add	r3, r2
 8010e88:	011b      	lsls	r3, r3, #4
 8010e8a:	440b      	add	r3, r1
 8010e8c:	33e9      	adds	r3, #233	@ 0xe9
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d049      	beq.n	8010f28 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8010e94:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010e98:	4943      	ldr	r1, [pc, #268]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010e9a:	4613      	mov	r3, r2
 8010e9c:	005b      	lsls	r3, r3, #1
 8010e9e:	4413      	add	r3, r2
 8010ea0:	011b      	lsls	r3, r3, #4
 8010ea2:	440b      	add	r3, r1
 8010ea4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010ea8:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	d13c      	bne.n	8010f28 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8010eae:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010eb2:	493d      	ldr	r1, [pc, #244]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010eb4:	4613      	mov	r3, r2
 8010eb6:	005b      	lsls	r3, r3, #1
 8010eb8:	4413      	add	r3, r2
 8010eba:	011b      	lsls	r3, r3, #4
 8010ebc:	440b      	add	r3, r1
 8010ebe:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4a38      	ldr	r2, [pc, #224]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010ec6:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8010ec8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010ecc:	4936      	ldr	r1, [pc, #216]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010ece:	4613      	mov	r3, r2
 8010ed0:	005b      	lsls	r3, r3, #1
 8010ed2:	4413      	add	r3, r2
 8010ed4:	011b      	lsls	r3, r3, #4
 8010ed6:	440b      	add	r3, r1
 8010ed8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8010edc:	f993 3000 	ldrsb.w	r3, [r3]
 8010ee0:	b2da      	uxtb	r2, r3
 8010ee2:	4b31      	ldr	r3, [pc, #196]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010ee4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010ee8:	4b30      	ldr	r3, [pc, #192]	@ (8010fac <SwitchClass+0x1cc>)
 8010eea:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010eee:	4b2f      	ldr	r3, [pc, #188]	@ (8010fac <SwitchClass+0x1cc>)
 8010ef0:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8010fac <SwitchClass+0x1cc>)
 8010efa:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010efe:	4b2a      	ldr	r3, [pc, #168]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010f00:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010f04:	4b29      	ldr	r3, [pc, #164]	@ (8010fac <SwitchClass+0x1cc>)
 8010f06:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010f0a:	4b27      	ldr	r3, [pc, #156]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010f0c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010f10:	4b26      	ldr	r3, [pc, #152]	@ (8010fac <SwitchClass+0x1cc>)
 8010f12:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010f16:	4b25      	ldr	r3, [pc, #148]	@ (8010fac <SwitchClass+0x1cc>)
 8010f18:	2203      	movs	r2, #3
 8010f1a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010f1e:	4b23      	ldr	r3, [pc, #140]	@ (8010fac <SwitchClass+0x1cc>)
 8010f20:	2201      	movs	r2, #1
 8010f22:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 8010f26:	e009      	b.n	8010f3c <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	3301      	adds	r3, #1
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	73bb      	strb	r3, [r7, #14]
 8010f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	dd9f      	ble.n	8010e7c <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8010fac <SwitchClass+0x1cc>)
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010f44:	4b1a      	ldr	r3, [pc, #104]	@ (8010fb0 <SwitchClass+0x1d0>)
 8010f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f48:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010f4a:	f001 fa41 	bl	80123d0 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010f52:	e01e      	b.n	8010f92 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010f54:	79fb      	ldrb	r3, [r7, #7]
 8010f56:	4618      	mov	r0, r3
 8010f58:	f003 fc64 	bl	8014824 <LoRaMacClassBSwitchClass>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010f60:	7bfb      	ldrb	r3, [r7, #15]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d117      	bne.n	8010f96 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010f66:	4a10      	ldr	r2, [pc, #64]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010f68:	79fb      	ldrb	r3, [r7, #7]
 8010f6a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 8010f6e:	e012      	b.n	8010f96 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010f70:	79fb      	ldrb	r3, [r7, #7]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d111      	bne.n	8010f9a <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8010f76:	4b0d      	ldr	r3, [pc, #52]	@ (8010fac <SwitchClass+0x1cc>)
 8010f78:	2206      	movs	r2, #6
 8010f7a:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8010fa8 <SwitchClass+0x1c8>)
 8010f80:	79fb      	ldrb	r3, [r7, #7]
 8010f82:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010f86:	4b0a      	ldr	r3, [pc, #40]	@ (8010fb0 <SwitchClass+0x1d0>)
 8010f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f8a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8010f90:	e003      	b.n	8010f9a <SwitchClass+0x1ba>
            break;
 8010f92:	bf00      	nop
 8010f94:	e002      	b.n	8010f9c <SwitchClass+0x1bc>
            break;
 8010f96:	bf00      	nop
 8010f98:	e000      	b.n	8010f9c <SwitchClass+0x1bc>
            break;
 8010f9a:	bf00      	nop
        }
    }

    return status;
 8010f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	20000ecc 	.word	0x20000ecc
 8010fac:	20000998 	.word	0x20000998
 8010fb0:	08020ce0 	.word	0x08020ce0

08010fb4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b086      	sub	sp, #24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	4603      	mov	r3, r0
 8010fbc:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010fbe:	4b10      	ldr	r3, [pc, #64]	@ (8011000 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010fc0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010fc4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010fc6:	79fb      	ldrb	r3, [r7, #7]
 8010fc8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010fca:	230d      	movs	r3, #13
 8010fcc:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010fce:	4b0c      	ldr	r3, [pc, #48]	@ (8011000 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010fd0:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d001      	beq.n	8010fdc <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010fd8:	230e      	movs	r3, #14
 8010fda:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fdc:	4b08      	ldr	r3, [pc, #32]	@ (8011000 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010fde:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010fe2:	f107 0210 	add.w	r2, r7, #16
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f005 fb5b 	bl	80166a4 <RegionGetPhyParam>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	b2db      	uxtb	r3, r3
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3718      	adds	r7, #24
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	bf00      	nop
 8011000:	20000ecc 	.word	0x20000ecc

08011004 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	4603      	mov	r3, r0
 801100c:	71fb      	strb	r3, [r7, #7]
 801100e:	460b      	mov	r3, r1
 8011010:	71bb      	strb	r3, [r7, #6]
 8011012:	4613      	mov	r3, r2
 8011014:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8011016:	2300      	movs	r3, #0
 8011018:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801101e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011022:	4618      	mov	r0, r3
 8011024:	f7ff ffc6 	bl	8010fb4 <GetMaxAppPayloadWithoutFOptsLength>
 8011028:	4603      	mov	r3, r0
 801102a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 801102c:	79fb      	ldrb	r3, [r7, #7]
 801102e:	b29a      	uxth	r2, r3
 8011030:	797b      	ldrb	r3, [r7, #5]
 8011032:	b29b      	uxth	r3, r3
 8011034:	4413      	add	r3, r2
 8011036:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8011038:	89ba      	ldrh	r2, [r7, #12]
 801103a:	89fb      	ldrh	r3, [r7, #14]
 801103c:	429a      	cmp	r2, r3
 801103e:	d804      	bhi.n	801104a <ValidatePayloadLength+0x46>
 8011040:	89bb      	ldrh	r3, [r7, #12]
 8011042:	2bff      	cmp	r3, #255	@ 0xff
 8011044:	d801      	bhi.n	801104a <ValidatePayloadLength+0x46>
    {
        return true;
 8011046:	2301      	movs	r3, #1
 8011048:	e000      	b.n	801104c <ValidatePayloadLength+0x48>
    }
    return false;
 801104a:	2300      	movs	r3, #0
}
 801104c:	4618      	mov	r0, r3
 801104e:	3710      	adds	r7, #16
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8011054:	b590      	push	{r4, r7, lr}
 8011056:	b0a5      	sub	sp, #148	@ 0x94
 8011058:	af02      	add	r7, sp, #8
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	4608      	mov	r0, r1
 801105e:	4611      	mov	r1, r2
 8011060:	461a      	mov	r2, r3
 8011062:	4603      	mov	r3, r0
 8011064:	70fb      	strb	r3, [r7, #3]
 8011066:	460b      	mov	r3, r1
 8011068:	70bb      	strb	r3, [r7, #2]
 801106a:	4613      	mov	r3, r2
 801106c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801106e:	2300      	movs	r3, #0
 8011070:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8011074:	2300      	movs	r3, #0
 8011076:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801107a:	2300      	movs	r3, #0
 801107c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8011080:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8011084:	2b00      	cmp	r3, #0
 8011086:	f000 84c3 	beq.w	8011a10 <ProcessMacCommands+0x9bc>
 801108a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 801108e:	2b01      	cmp	r3, #1
 8011090:	f040 84c4 	bne.w	8011a1c <ProcessMacCommands+0x9c8>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8011094:	f000 bcbc 	b.w	8011a10 <ProcessMacCommands+0x9bc>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8011098:	78fb      	ldrb	r3, [r7, #3]
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	4413      	add	r3, r2
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	4618      	mov	r0, r3
 80110a2:	f003 febf 	bl	8014e24 <LoRaMacCommandsGetCmdSize>
 80110a6:	4603      	mov	r3, r0
 80110a8:	461a      	mov	r2, r3
 80110aa:	78fb      	ldrb	r3, [r7, #3]
 80110ac:	441a      	add	r2, r3
 80110ae:	78bb      	ldrb	r3, [r7, #2]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	f300 84b5 	bgt.w	8011a20 <ProcessMacCommands+0x9cc>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80110b6:	78fb      	ldrb	r3, [r7, #3]
 80110b8:	1c5a      	adds	r2, r3, #1
 80110ba:	70fa      	strb	r2, [r7, #3]
 80110bc:	461a      	mov	r2, r3
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	4413      	add	r3, r2
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	3b02      	subs	r3, #2
 80110c6:	2b11      	cmp	r3, #17
 80110c8:	f200 84ac 	bhi.w	8011a24 <ProcessMacCommands+0x9d0>
 80110cc:	a201      	add	r2, pc, #4	@ (adr r2, 80110d4 <ProcessMacCommands+0x80>)
 80110ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110d2:	bf00      	nop
 80110d4:	0801111d 	.word	0x0801111d
 80110d8:	0801115f 	.word	0x0801115f
 80110dc:	080112db 	.word	0x080112db
 80110e0:	08011319 	.word	0x08011319
 80110e4:	08011425 	.word	0x08011425
 80110e8:	08011475 	.word	0x08011475
 80110ec:	08011531 	.word	0x08011531
 80110f0:	08011587 	.word	0x08011587
 80110f4:	0801166d 	.word	0x0801166d
 80110f8:	08011a25 	.word	0x08011a25
 80110fc:	08011a25 	.word	0x08011a25
 8011100:	08011715 	.word	0x08011715
 8011104:	08011a25 	.word	0x08011a25
 8011108:	08011a25 	.word	0x08011a25
 801110c:	08011835 	.word	0x08011835
 8011110:	08011869 	.word	0x08011869
 8011114:	080118f9 	.word	0x080118f9
 8011118:	08011971 	.word	0x08011971
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 801111c:	2005      	movs	r0, #5
 801111e:	f004 f859 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 8011122:	4603      	mov	r3, r0
 8011124:	2b00      	cmp	r3, #0
 8011126:	f000 8466 	beq.w	80119f6 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801112a:	2105      	movs	r1, #5
 801112c:	2000      	movs	r0, #0
 801112e:	f003 ffc5 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8011132:	78fb      	ldrb	r3, [r7, #3]
 8011134:	1c5a      	adds	r2, r3, #1
 8011136:	70fa      	strb	r2, [r7, #3]
 8011138:	461a      	mov	r2, r3
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4413      	add	r3, r2
 801113e:	781a      	ldrb	r2, [r3, #0]
 8011140:	4bb5      	ldr	r3, [pc, #724]	@ (8011418 <ProcessMacCommands+0x3c4>)
 8011142:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8011146:	78fb      	ldrb	r3, [r7, #3]
 8011148:	1c5a      	adds	r2, r3, #1
 801114a:	70fa      	strb	r2, [r7, #3]
 801114c:	461a      	mov	r2, r3
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4413      	add	r3, r2
 8011152:	781a      	ldrb	r2, [r3, #0]
 8011154:	4bb0      	ldr	r3, [pc, #704]	@ (8011418 <ProcessMacCommands+0x3c4>)
 8011156:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 801115a:	f000 bc4c 	b.w	80119f6 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801115e:	2300      	movs	r3, #0
 8011160:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8011164:	2300      	movs	r3, #0
 8011166:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8011170:	2300      	movs	r3, #0
 8011172:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8011176:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801117a:	f083 0301 	eor.w	r3, r3, #1
 801117e:	b2db      	uxtb	r3, r3
 8011180:	2b00      	cmp	r3, #0
 8011182:	f000 80a6 	beq.w	80112d2 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 8011186:	2301      	movs	r3, #1
 8011188:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 801118c:	78fb      	ldrb	r3, [r7, #3]
 801118e:	3b01      	subs	r3, #1
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	4413      	add	r3, r2
 8011194:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011196:	4ba1      	ldr	r3, [pc, #644]	@ (801141c <ProcessMacCommands+0x3c8>)
 8011198:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801119c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80111a0:	4b9e      	ldr	r3, [pc, #632]	@ (801141c <ProcessMacCommands+0x3c8>)
 80111a2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80111a6:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80111aa:	4b9c      	ldr	r3, [pc, #624]	@ (801141c <ProcessMacCommands+0x3c8>)
 80111ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80111b0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111b4:	4b99      	ldr	r3, [pc, #612]	@ (801141c <ProcessMacCommands+0x3c8>)
 80111b6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80111ba:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80111be:	4b97      	ldr	r3, [pc, #604]	@ (801141c <ProcessMacCommands+0x3c8>)
 80111c0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80111c4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80111c8:	4b94      	ldr	r3, [pc, #592]	@ (801141c <ProcessMacCommands+0x3c8>)
 80111ca:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80111ce:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80111d0:	4b92      	ldr	r3, [pc, #584]	@ (801141c <ProcessMacCommands+0x3c8>)
 80111d2:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d008      	beq.n	80111ec <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80111da:	78ba      	ldrb	r2, [r7, #2]
 80111dc:	78fb      	ldrb	r3, [r7, #3]
 80111de:	1ad3      	subs	r3, r2, r3
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	3301      	adds	r3, #1
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80111ea:	e002      	b.n	80111f2 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80111ec:	2305      	movs	r3, #5
 80111ee:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80111f2:	4b8a      	ldr	r3, [pc, #552]	@ (801141c <ProcessMacCommands+0x3c8>)
 80111f4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80111f8:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 80111fc:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 8011200:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011204:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011208:	9301      	str	r3, [sp, #4]
 801120a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	4623      	mov	r3, r4
 8011212:	f005 fb04 	bl	801681e <RegionLinkAdrReq>
 8011216:	4603      	mov	r3, r0
 8011218:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 801121c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011220:	f003 0307 	and.w	r3, r3, #7
 8011224:	2b07      	cmp	r3, #7
 8011226:	d119      	bne.n	801125c <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8011228:	4b7c      	ldr	r3, [pc, #496]	@ (801141c <ProcessMacCommands+0x3c8>)
 801122a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 801122e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8011232:	429a      	cmp	r2, r3
 8011234:	da03      	bge.n	801123e <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8011236:	4b79      	ldr	r3, [pc, #484]	@ (801141c <ProcessMacCommands+0x3c8>)
 8011238:	2201      	movs	r2, #1
 801123a:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 801123e:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8011242:	4b76      	ldr	r3, [pc, #472]	@ (801141c <ProcessMacCommands+0x3c8>)
 8011244:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8011248:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 801124c:	4b73      	ldr	r3, [pc, #460]	@ (801141c <ProcessMacCommands+0x3c8>)
 801124e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8011252:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8011256:	4b71      	ldr	r3, [pc, #452]	@ (801141c <ProcessMacCommands+0x3c8>)
 8011258:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801125c:	2300      	movs	r3, #0
 801125e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8011262:	e00b      	b.n	801127c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8011264:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8011268:	2201      	movs	r2, #1
 801126a:	4619      	mov	r1, r3
 801126c:	2003      	movs	r0, #3
 801126e:	f003 fc79 	bl	8014b64 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011272:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8011276:	3301      	adds	r3, #1
 8011278:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 801127c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8011280:	4a67      	ldr	r2, [pc, #412]	@ (8011420 <ProcessMacCommands+0x3cc>)
 8011282:	fba2 2303 	umull	r2, r3, r2, r3
 8011286:	089b      	lsrs	r3, r3, #2
 8011288:	b2db      	uxtb	r3, r3
 801128a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 801128e:	429a      	cmp	r2, r3
 8011290:	d3e8      	bcc.n	8011264 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8011292:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8011296:	78fb      	ldrb	r3, [r7, #3]
 8011298:	4413      	add	r3, r2
 801129a:	b2db      	uxtb	r3, r3
 801129c:	3b01      	subs	r3, #1
 801129e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 80112a0:	78fa      	ldrb	r2, [r7, #3]
 80112a2:	78bb      	ldrb	r3, [r7, #2]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d20a      	bcs.n	80112be <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80112a8:	78fb      	ldrb	r3, [r7, #3]
 80112aa:	1c5a      	adds	r2, r3, #1
 80112ac:	70fa      	strb	r2, [r7, #3]
 80112ae:	461a      	mov	r2, r3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	4413      	add	r3, r2
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	2b03      	cmp	r3, #3
 80112b8:	f43f af68 	beq.w	801118c <ProcessMacCommands+0x138>
 80112bc:	e000      	b.n	80112c0 <ProcessMacCommands+0x26c>
                            break;
 80112be:	bf00      	nop

                    if( macIndex < commandsSize )
 80112c0:	78fa      	ldrb	r2, [r7, #3]
 80112c2:	78bb      	ldrb	r3, [r7, #2]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	f080 8398 	bcs.w	80119fa <ProcessMacCommands+0x9a6>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80112ca:	78fb      	ldrb	r3, [r7, #3]
 80112cc:	3b01      	subs	r3, #1
 80112ce:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80112d0:	e393      	b.n	80119fa <ProcessMacCommands+0x9a6>
                    macIndex += 4;
 80112d2:	78fb      	ldrb	r3, [r7, #3]
 80112d4:	3304      	adds	r3, #4
 80112d6:	70fb      	strb	r3, [r7, #3]
                break;
 80112d8:	e38f      	b.n	80119fa <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80112da:	78fb      	ldrb	r3, [r7, #3]
 80112dc:	1c5a      	adds	r2, r3, #1
 80112de:	70fa      	strb	r2, [r7, #3]
 80112e0:	461a      	mov	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	4413      	add	r3, r2
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	f003 030f 	and.w	r3, r3, #15
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	4b4b      	ldr	r3, [pc, #300]	@ (801141c <ProcessMacCommands+0x3c8>)
 80112f0:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80112f4:	4b49      	ldr	r3, [pc, #292]	@ (801141c <ProcessMacCommands+0x3c8>)
 80112f6:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 80112fa:	461a      	mov	r2, r3
 80112fc:	2301      	movs	r3, #1
 80112fe:	4093      	lsls	r3, r2
 8011300:	b29a      	uxth	r2, r3
 8011302:	4b46      	ldr	r3, [pc, #280]	@ (801141c <ProcessMacCommands+0x3c8>)
 8011304:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8011308:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801130c:	2200      	movs	r2, #0
 801130e:	4619      	mov	r1, r3
 8011310:	2004      	movs	r0, #4
 8011312:	f003 fc27 	bl	8014b64 <LoRaMacCommandsAddCmd>
                break;
 8011316:	e37b      	b.n	8011a10 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8011318:	2307      	movs	r3, #7
 801131a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801131e:	78fb      	ldrb	r3, [r7, #3]
 8011320:	687a      	ldr	r2, [r7, #4]
 8011322:	4413      	add	r3, r2
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	091b      	lsrs	r3, r3, #4
 8011328:	b2db      	uxtb	r3, r3
 801132a:	b25b      	sxtb	r3, r3
 801132c:	f003 0307 	and.w	r3, r3, #7
 8011330:	b25b      	sxtb	r3, r3
 8011332:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8011336:	78fb      	ldrb	r3, [r7, #3]
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	4413      	add	r3, r2
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	b25b      	sxtb	r3, r3
 8011340:	f003 030f 	and.w	r3, r3, #15
 8011344:	b25b      	sxtb	r3, r3
 8011346:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 801134a:	78fb      	ldrb	r3, [r7, #3]
 801134c:	3301      	adds	r3, #1
 801134e:	70fb      	strb	r3, [r7, #3]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( rxParamSetupReq.Datarate == 0x0F )
 8011350:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8011354:	2b0f      	cmp	r3, #15
 8011356:	d105      	bne.n	8011364 <ProcessMacCommands+0x310>
                {
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 8011358:	4b30      	ldr	r3, [pc, #192]	@ (801141c <ProcessMacCommands+0x3c8>)
 801135a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801135e:	b25b      	sxtb	r3, r3
 8011360:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8011364:	78fb      	ldrb	r3, [r7, #3]
 8011366:	1c5a      	adds	r2, r3, #1
 8011368:	70fa      	strb	r2, [r7, #3]
 801136a:	461a      	mov	r2, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4413      	add	r3, r2
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011374:	78fb      	ldrb	r3, [r7, #3]
 8011376:	1c5a      	adds	r2, r3, #1
 8011378:	70fa      	strb	r2, [r7, #3]
 801137a:	461a      	mov	r2, r3
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	4413      	add	r3, r2
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	021a      	lsls	r2, r3, #8
 8011384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011386:	4313      	orrs	r3, r2
 8011388:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801138a:	78fb      	ldrb	r3, [r7, #3]
 801138c:	1c5a      	adds	r2, r3, #1
 801138e:	70fa      	strb	r2, [r7, #3]
 8011390:	461a      	mov	r2, r3
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4413      	add	r3, r2
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	041a      	lsls	r2, r3, #16
 801139a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801139c:	4313      	orrs	r3, r2
 801139e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 80113a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113a2:	2264      	movs	r2, #100	@ 0x64
 80113a4:	fb02 f303 	mul.w	r3, r2, r3
 80113a8:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80113aa:	4b1c      	ldr	r3, [pc, #112]	@ (801141c <ProcessMacCommands+0x3c8>)
 80113ac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80113b0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80113b4:	4611      	mov	r1, r2
 80113b6:	4618      	mov	r0, r3
 80113b8:	f005 fa4b 	bl	8016852 <RegionRxParamSetupReq>
 80113bc:	4603      	mov	r3, r0
 80113be:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80113c2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80113c6:	f003 0307 	and.w	r3, r3, #7
 80113ca:	2b07      	cmp	r3, #7
 80113cc:	d117      	bne.n	80113fe <ProcessMacCommands+0x3aa>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80113ce:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	4b11      	ldr	r3, [pc, #68]	@ (801141c <ProcessMacCommands+0x3c8>)
 80113d6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80113da:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 80113de:	b2da      	uxtb	r2, r3
 80113e0:	4b0e      	ldr	r3, [pc, #56]	@ (801141c <ProcessMacCommands+0x3c8>)
 80113e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80113e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113e8:	4a0c      	ldr	r2, [pc, #48]	@ (801141c <ProcessMacCommands+0x3c8>)
 80113ea:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80113ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113ee:	4a0b      	ldr	r2, [pc, #44]	@ (801141c <ProcessMacCommands+0x3c8>)
 80113f0:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80113f2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80113f6:	b2da      	uxtb	r2, r3
 80113f8:	4b08      	ldr	r3, [pc, #32]	@ (801141c <ProcessMacCommands+0x3c8>)
 80113fa:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 80113fe:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011402:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8011406:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801140a:	2201      	movs	r2, #1
 801140c:	4619      	mov	r1, r3
 801140e:	2005      	movs	r0, #5
 8011410:	f003 fba8 	bl	8014b64 <LoRaMacCommandsAddCmd>
                break;
 8011414:	e2fc      	b.n	8011a10 <ProcessMacCommands+0x9bc>
 8011416:	bf00      	nop
 8011418:	20000998 	.word	0x20000998
 801141c:	20000ecc 	.word	0x20000ecc
 8011420:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8011424:	23ff      	movs	r3, #255	@ 0xff
 8011426:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801142a:	4bb7      	ldr	r3, [pc, #732]	@ (8011708 <ProcessMacCommands+0x6b4>)
 801142c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00d      	beq.n	8011450 <ProcessMacCommands+0x3fc>
 8011434:	4bb4      	ldr	r3, [pc, #720]	@ (8011708 <ProcessMacCommands+0x6b4>)
 8011436:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d007      	beq.n	8011450 <ProcessMacCommands+0x3fc>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011440:	4bb1      	ldr	r3, [pc, #708]	@ (8011708 <ProcessMacCommands+0x6b4>)
 8011442:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4798      	blx	r3
 801144a:	4603      	mov	r3, r0
 801144c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8011450:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8011454:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011458:	787b      	ldrb	r3, [r7, #1]
 801145a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801145e:	b2db      	uxtb	r3, r3
 8011460:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011464:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011468:	2202      	movs	r2, #2
 801146a:	4619      	mov	r1, r3
 801146c:	2006      	movs	r0, #6
 801146e:	f003 fb79 	bl	8014b64 <LoRaMacCommandsAddCmd>
                break;
 8011472:	e2cd      	b.n	8011a10 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011474:	2303      	movs	r3, #3
 8011476:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801147a:	78fb      	ldrb	r3, [r7, #3]
 801147c:	1c5a      	adds	r2, r3, #1
 801147e:	70fa      	strb	r2, [r7, #3]
 8011480:	461a      	mov	r2, r3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4413      	add	r3, r2
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	b25b      	sxtb	r3, r3
 801148a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 801148e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011492:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011494:	78fb      	ldrb	r3, [r7, #3]
 8011496:	1c5a      	adds	r2, r3, #1
 8011498:	70fa      	strb	r2, [r7, #3]
 801149a:	461a      	mov	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	4413      	add	r3, r2
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80114a4:	78fb      	ldrb	r3, [r7, #3]
 80114a6:	1c5a      	adds	r2, r3, #1
 80114a8:	70fa      	strb	r2, [r7, #3]
 80114aa:	461a      	mov	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4413      	add	r3, r2
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	021a      	lsls	r2, r3, #8
 80114b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b6:	4313      	orrs	r3, r2
 80114b8:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80114ba:	78fb      	ldrb	r3, [r7, #3]
 80114bc:	1c5a      	adds	r2, r3, #1
 80114be:	70fa      	strb	r2, [r7, #3]
 80114c0:	461a      	mov	r2, r3
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	4413      	add	r3, r2
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	041a      	lsls	r2, r3, #16
 80114ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114cc:	4313      	orrs	r3, r2
 80114ce:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 80114d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d2:	2264      	movs	r2, #100	@ 0x64
 80114d4:	fb02 f303 	mul.w	r3, r2, r3
 80114d8:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 80114da:	2300      	movs	r3, #0
 80114dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80114de:	78fb      	ldrb	r3, [r7, #3]
 80114e0:	1c5a      	adds	r2, r3, #1
 80114e2:	70fa      	strb	r2, [r7, #3]
 80114e4:	461a      	mov	r2, r3
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4413      	add	r3, r2
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	b25b      	sxtb	r3, r3
 80114ee:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80114f2:	4b86      	ldr	r3, [pc, #536]	@ (801170c <ProcessMacCommands+0x6b8>)
 80114f4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80114f8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80114fc:	4611      	mov	r1, r2
 80114fe:	4618      	mov	r0, r3
 8011500:	f005 f9ba 	bl	8016878 <RegionNewChannelReq>
 8011504:	4603      	mov	r3, r0
 8011506:	b2db      	uxtb	r3, r3
 8011508:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 801150c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011510:	b25b      	sxtb	r3, r3
 8011512:	2b00      	cmp	r3, #0
 8011514:	f2c0 8273 	blt.w	80119fe <ProcessMacCommands+0x9aa>
                {
                    macCmdPayload[0] = status;
 8011518:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 801151c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011520:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011524:	2201      	movs	r2, #1
 8011526:	4619      	mov	r1, r3
 8011528:	2007      	movs	r0, #7
 801152a:	f003 fb1b 	bl	8014b64 <LoRaMacCommandsAddCmd>
                }
                break;
 801152e:	e266      	b.n	80119fe <ProcessMacCommands+0x9aa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011530:	78fb      	ldrb	r3, [r7, #3]
 8011532:	1c5a      	adds	r2, r3, #1
 8011534:	70fa      	strb	r2, [r7, #3]
 8011536:	461a      	mov	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	4413      	add	r3, r2
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	f003 030f 	and.w	r3, r3, #15
 8011542:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8011546:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801154a:	2b00      	cmp	r3, #0
 801154c:	d104      	bne.n	8011558 <ProcessMacCommands+0x504>
                {
                    delay++;
 801154e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8011552:	3301      	adds	r3, #1
 8011554:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8011558:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801155c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011560:	fb02 f303 	mul.w	r3, r2, r3
 8011564:	461a      	mov	r2, r3
 8011566:	4b69      	ldr	r3, [pc, #420]	@ (801170c <ProcessMacCommands+0x6b8>)
 8011568:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801156a:	4b68      	ldr	r3, [pc, #416]	@ (801170c <ProcessMacCommands+0x6b8>)
 801156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801156e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8011572:	4a66      	ldr	r2, [pc, #408]	@ (801170c <ProcessMacCommands+0x6b8>)
 8011574:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8011576:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801157a:	2200      	movs	r2, #0
 801157c:	4619      	mov	r1, r3
 801157e:	2008      	movs	r0, #8
 8011580:	f003 faf0 	bl	8014b64 <LoRaMacCommandsAddCmd>
                break;
 8011584:	e244      	b.n	8011a10 <ProcessMacCommands+0x9bc>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8011586:	78fb      	ldrb	r3, [r7, #3]
 8011588:	1c5a      	adds	r2, r3, #1
 801158a:	70fa      	strb	r2, [r7, #3]
 801158c:	461a      	mov	r2, r3
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4413      	add	r3, r2
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8011598:	2300      	movs	r3, #0
 801159a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801159e:	2300      	movs	r3, #0
 80115a0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80115a4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80115a8:	f003 0320 	and.w	r3, r3, #32
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d002      	beq.n	80115b6 <ProcessMacCommands+0x562>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80115b0:	2301      	movs	r3, #1
 80115b2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80115b6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80115ba:	f003 0310 	and.w	r3, r3, #16
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d002      	beq.n	80115c8 <ProcessMacCommands+0x574>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80115c2:	2301      	movs	r3, #1
 80115c4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80115c8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80115cc:	f003 030f 	and.w	r3, r3, #15
 80115d0:	b2db      	uxtb	r3, r3
 80115d2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80115d6:	4b4d      	ldr	r3, [pc, #308]	@ (801170c <ProcessMacCommands+0x6b8>)
 80115d8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115dc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80115e0:	4611      	mov	r1, r2
 80115e2:	4618      	mov	r0, r3
 80115e4:	f005 f95b 	bl	801689e <RegionTxParamSetupReq>
 80115e8:	4603      	mov	r3, r0
 80115ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ee:	f000 8208 	beq.w	8011a02 <ProcessMacCommands+0x9ae>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80115f2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80115f6:	4b45      	ldr	r3, [pc, #276]	@ (801170c <ProcessMacCommands+0x6b8>)
 80115f8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80115fc:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8011600:	4b42      	ldr	r3, [pc, #264]	@ (801170c <ProcessMacCommands+0x6b8>)
 8011602:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011606:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801160a:	461a      	mov	r2, r3
 801160c:	4b40      	ldr	r3, [pc, #256]	@ (8011710 <ProcessMacCommands+0x6bc>)
 801160e:	5c9b      	ldrb	r3, [r3, r2]
 8011610:	4618      	mov	r0, r3
 8011612:	f7ef fb57 	bl	8000cc4 <__aeabi_ui2f>
 8011616:	4603      	mov	r3, r0
 8011618:	4a3c      	ldr	r2, [pc, #240]	@ (801170c <ProcessMacCommands+0x6b8>)
 801161a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801161e:	2302      	movs	r3, #2
 8011620:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011624:	4b39      	ldr	r3, [pc, #228]	@ (801170c <ProcessMacCommands+0x6b8>)
 8011626:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801162a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801162e:	4b37      	ldr	r3, [pc, #220]	@ (801170c <ProcessMacCommands+0x6b8>)
 8011630:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011634:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011638:	4611      	mov	r1, r2
 801163a:	4618      	mov	r0, r3
 801163c:	f005 f832 	bl	80166a4 <RegionGetPhyParam>
 8011640:	4603      	mov	r3, r0
 8011642:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011646:	b25a      	sxtb	r2, r3
 8011648:	4b30      	ldr	r3, [pc, #192]	@ (801170c <ProcessMacCommands+0x6b8>)
 801164a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801164e:	4293      	cmp	r3, r2
 8011650:	bfb8      	it	lt
 8011652:	4613      	movlt	r3, r2
 8011654:	b25a      	sxtb	r2, r3
 8011656:	4b2d      	ldr	r3, [pc, #180]	@ (801170c <ProcessMacCommands+0x6b8>)
 8011658:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801165c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011660:	2200      	movs	r2, #0
 8011662:	4619      	mov	r1, r3
 8011664:	2009      	movs	r0, #9
 8011666:	f003 fa7d 	bl	8014b64 <LoRaMacCommandsAddCmd>
                }
                break;
 801166a:	e1ca      	b.n	8011a02 <ProcessMacCommands+0x9ae>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801166c:	2303      	movs	r3, #3
 801166e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011672:	78fb      	ldrb	r3, [r7, #3]
 8011674:	1c5a      	adds	r2, r3, #1
 8011676:	70fa      	strb	r2, [r7, #3]
 8011678:	461a      	mov	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	4413      	add	r3, r2
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011684:	78fb      	ldrb	r3, [r7, #3]
 8011686:	1c5a      	adds	r2, r3, #1
 8011688:	70fa      	strb	r2, [r7, #3]
 801168a:	461a      	mov	r2, r3
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	4413      	add	r3, r2
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011694:	78fb      	ldrb	r3, [r7, #3]
 8011696:	1c5a      	adds	r2, r3, #1
 8011698:	70fa      	strb	r2, [r7, #3]
 801169a:	461a      	mov	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4413      	add	r3, r2
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	021a      	lsls	r2, r3, #8
 80116a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a6:	4313      	orrs	r3, r2
 80116a8:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80116aa:	78fb      	ldrb	r3, [r7, #3]
 80116ac:	1c5a      	adds	r2, r3, #1
 80116ae:	70fa      	strb	r2, [r7, #3]
 80116b0:	461a      	mov	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	4413      	add	r3, r2
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	041a      	lsls	r2, r3, #16
 80116ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116bc:	4313      	orrs	r3, r2
 80116be:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80116c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c2:	2264      	movs	r2, #100	@ 0x64
 80116c4:	fb02 f303 	mul.w	r3, r2, r3
 80116c8:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80116ca:	4b10      	ldr	r3, [pc, #64]	@ (801170c <ProcessMacCommands+0x6b8>)
 80116cc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116d0:	f107 0220 	add.w	r2, r7, #32
 80116d4:	4611      	mov	r1, r2
 80116d6:	4618      	mov	r0, r3
 80116d8:	f005 f8f4 	bl	80168c4 <RegionDlChannelReq>
 80116dc:	4603      	mov	r3, r0
 80116de:	b2db      	uxtb	r3, r3
 80116e0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 80116e4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80116e8:	b25b      	sxtb	r3, r3
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f2c0 818b 	blt.w	8011a06 <ProcessMacCommands+0x9b2>
                {
                    macCmdPayload[0] = status;
 80116f0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80116f4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80116f8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80116fc:	2201      	movs	r2, #1
 80116fe:	4619      	mov	r1, r3
 8011700:	200a      	movs	r0, #10
 8011702:	f003 fa2f 	bl	8014b64 <LoRaMacCommandsAddCmd>
                }
                break;
 8011706:	e17e      	b.n	8011a06 <ProcessMacCommands+0x9b2>
 8011708:	20000998 	.word	0x20000998
 801170c:	20000ecc 	.word	0x20000ecc
 8011710:	08020c98 	.word	0x08020c98
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011714:	2009      	movs	r0, #9
 8011716:	f003 fd5d 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	f000 8084 	beq.w	801182a <ProcessMacCommands+0x7d6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011722:	2109      	movs	r1, #9
 8011724:	2000      	movs	r0, #0
 8011726:	f003 fcc9 	bl	80150bc <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801172a:	f107 0318 	add.w	r3, r7, #24
 801172e:	2200      	movs	r2, #0
 8011730:	601a      	str	r2, [r3, #0]
 8011732:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011734:	f107 0310 	add.w	r3, r7, #16
 8011738:	2200      	movs	r2, #0
 801173a:	601a      	str	r2, [r3, #0]
 801173c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801173e:	f107 0308 	add.w	r3, r7, #8
 8011742:	2200      	movs	r2, #0
 8011744:	601a      	str	r2, [r3, #0]
 8011746:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011748:	78fb      	ldrb	r3, [r7, #3]
 801174a:	1c5a      	adds	r2, r3, #1
 801174c:	70fa      	strb	r2, [r7, #3]
 801174e:	461a      	mov	r2, r3
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	4413      	add	r3, r2
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011758:	78fb      	ldrb	r3, [r7, #3]
 801175a:	1c5a      	adds	r2, r3, #1
 801175c:	70fa      	strb	r2, [r7, #3]
 801175e:	461a      	mov	r2, r3
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4413      	add	r3, r2
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	021a      	lsls	r2, r3, #8
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	4313      	orrs	r3, r2
 801176c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801176e:	78fb      	ldrb	r3, [r7, #3]
 8011770:	1c5a      	adds	r2, r3, #1
 8011772:	70fa      	strb	r2, [r7, #3]
 8011774:	461a      	mov	r2, r3
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	4413      	add	r3, r2
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	041a      	lsls	r2, r3, #16
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	4313      	orrs	r3, r2
 8011782:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011784:	78fb      	ldrb	r3, [r7, #3]
 8011786:	1c5a      	adds	r2, r3, #1
 8011788:	70fa      	strb	r2, [r7, #3]
 801178a:	461a      	mov	r2, r3
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	4413      	add	r3, r2
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	061a      	lsls	r2, r3, #24
 8011794:	69bb      	ldr	r3, [r7, #24]
 8011796:	4313      	orrs	r3, r2
 8011798:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801179a:	78fb      	ldrb	r3, [r7, #3]
 801179c:	1c5a      	adds	r2, r3, #1
 801179e:	70fa      	strb	r2, [r7, #3]
 80117a0:	461a      	mov	r2, r3
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4413      	add	r3, r2
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	b21b      	sxth	r3, r3
 80117aa:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80117ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80117b0:	461a      	mov	r2, r3
 80117b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80117b6:	fb02 f303 	mul.w	r3, r2, r3
 80117ba:	121b      	asrs	r3, r3, #8
 80117bc:	b21b      	sxth	r3, r3
 80117be:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80117c0:	f107 0310 	add.w	r3, r7, #16
 80117c4:	f107 0218 	add.w	r2, r7, #24
 80117c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117cc:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80117d0:	693a      	ldr	r2, [r7, #16]
 80117d2:	4b96      	ldr	r3, [pc, #600]	@ (8011a2c <ProcessMacCommands+0x9d8>)
 80117d4:	4413      	add	r3, r2
 80117d6:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80117d8:	f107 0308 	add.w	r3, r7, #8
 80117dc:	4618      	mov	r0, r3
 80117de:	f00a fddf 	bl	801c3a0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80117e2:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80117e6:	4b92      	ldr	r3, [pc, #584]	@ (8011a30 <ProcessMacCommands+0x9dc>)
 80117e8:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 80117ec:	9200      	str	r2, [sp, #0]
 80117ee:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 80117f2:	f107 0210 	add.w	r2, r7, #16
 80117f6:	ca06      	ldmia	r2, {r1, r2}
 80117f8:	f00a fd6b 	bl	801c2d2 <SysTimeSub>
 80117fc:	f107 0010 	add.w	r0, r7, #16
 8011800:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011806:	f107 0208 	add.w	r2, r7, #8
 801180a:	ca06      	ldmia	r2, {r1, r2}
 801180c:	f00a fd28 	bl	801c260 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011810:	f107 0310 	add.w	r3, r7, #16
 8011814:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011818:	f00a fd94 	bl	801c344 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801181c:	f003 f840 	bl	80148a0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011820:	4b83      	ldr	r3, [pc, #524]	@ (8011a30 <ProcessMacCommands+0x9dc>)
 8011822:	2201      	movs	r2, #1
 8011824:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8011828:	e0f2      	b.n	8011a10 <ProcessMacCommands+0x9bc>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801182a:	4b81      	ldr	r3, [pc, #516]	@ (8011a30 <ProcessMacCommands+0x9dc>)
 801182c:	2200      	movs	r2, #0
 801182e:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 8011832:	e0ed      	b.n	8011a10 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011834:	200c      	movs	r0, #12
 8011836:	f003 fccd 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	f000 80e4 	beq.w	8011a0a <ProcessMacCommands+0x9b6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011842:	210c      	movs	r1, #12
 8011844:	2000      	movs	r0, #0
 8011846:	f003 fc39 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801184a:	4b79      	ldr	r3, [pc, #484]	@ (8011a30 <ProcessMacCommands+0x9dc>)
 801184c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011850:	2b04      	cmp	r3, #4
 8011852:	f000 80da 	beq.w	8011a0a <ProcessMacCommands+0x9b6>
 8011856:	4b76      	ldr	r3, [pc, #472]	@ (8011a30 <ProcessMacCommands+0x9dc>)
 8011858:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 801185c:	2b05      	cmp	r3, #5
 801185e:	f000 80d4 	beq.w	8011a0a <ProcessMacCommands+0x9b6>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011862:	f002 fffe 	bl	8014862 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011866:	e0d0      	b.n	8011a0a <ProcessMacCommands+0x9b6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011868:	2303      	movs	r3, #3
 801186a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 801186e:	2300      	movs	r3, #0
 8011870:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011872:	78fb      	ldrb	r3, [r7, #3]
 8011874:	1c5a      	adds	r2, r3, #1
 8011876:	70fa      	strb	r2, [r7, #3]
 8011878:	461a      	mov	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	4413      	add	r3, r2
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011882:	78fb      	ldrb	r3, [r7, #3]
 8011884:	1c5a      	adds	r2, r3, #1
 8011886:	70fa      	strb	r2, [r7, #3]
 8011888:	461a      	mov	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	4413      	add	r3, r2
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	021b      	lsls	r3, r3, #8
 8011892:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011894:	4313      	orrs	r3, r2
 8011896:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011898:	78fb      	ldrb	r3, [r7, #3]
 801189a:	1c5a      	adds	r2, r3, #1
 801189c:	70fa      	strb	r2, [r7, #3]
 801189e:	461a      	mov	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	4413      	add	r3, r2
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	041b      	lsls	r3, r3, #16
 80118a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80118aa:	4313      	orrs	r3, r2
 80118ac:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 80118ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118b0:	2264      	movs	r2, #100	@ 0x64
 80118b2:	fb02 f303 	mul.w	r3, r2, r3
 80118b6:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 80118b8:	78fb      	ldrb	r3, [r7, #3]
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	70fa      	strb	r2, [r7, #3]
 80118be:	461a      	mov	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	4413      	add	r3, r2
 80118c4:	781b      	ldrb	r3, [r3, #0]
 80118c6:	f003 030f 	and.w	r3, r3, #15
 80118ca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80118ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80118d2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80118d4:	4618      	mov	r0, r3
 80118d6:	f002 ffca 	bl	801486e <LoRaMacClassBPingSlotChannelReq>
 80118da:	4603      	mov	r3, r0
 80118dc:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 80118e0:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80118e4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80118e8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80118ec:	2201      	movs	r2, #1
 80118ee:	4619      	mov	r1, r3
 80118f0:	2011      	movs	r0, #17
 80118f2:	f003 f937 	bl	8014b64 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80118f6:	e08b      	b.n	8011a10 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80118f8:	200d      	movs	r0, #13
 80118fa:	f003 fc6b 	bl	80151d4 <LoRaMacConfirmQueueIsCmdActive>
 80118fe:	4603      	mov	r3, r0
 8011900:	2b00      	cmp	r3, #0
 8011902:	f000 8084 	beq.w	8011a0e <ProcessMacCommands+0x9ba>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011906:	210d      	movs	r1, #13
 8011908:	2000      	movs	r0, #0
 801190a:	f003 fbd7 	bl	80150bc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801190e:	2300      	movs	r3, #0
 8011910:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8011914:	2300      	movs	r3, #0
 8011916:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801191a:	78fb      	ldrb	r3, [r7, #3]
 801191c:	1c5a      	adds	r2, r3, #1
 801191e:	70fa      	strb	r2, [r7, #3]
 8011920:	461a      	mov	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4413      	add	r3, r2
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801192c:	78fb      	ldrb	r3, [r7, #3]
 801192e:	1c5a      	adds	r2, r3, #1
 8011930:	70fa      	strb	r2, [r7, #3]
 8011932:	461a      	mov	r2, r3
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4413      	add	r3, r2
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	021b      	lsls	r3, r3, #8
 801193c:	b21a      	sxth	r2, r3
 801193e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8011942:	4313      	orrs	r3, r2
 8011944:	b21b      	sxth	r3, r3
 8011946:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801194a:	78fb      	ldrb	r3, [r7, #3]
 801194c:	1c5a      	adds	r2, r3, #1
 801194e:	70fa      	strb	r2, [r7, #3]
 8011950:	461a      	mov	r2, r3
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	4413      	add	r3, r2
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 801195c:	4b35      	ldr	r3, [pc, #212]	@ (8011a34 <ProcessMacCommands+0x9e0>)
 801195e:	681a      	ldr	r2, [r3, #0]
 8011960:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8011964:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8011968:	4618      	mov	r0, r3
 801196a:	f002 ff8c 	bl	8014886 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 801196e:	e04e      	b.n	8011a0e <ProcessMacCommands+0x9ba>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011970:	2300      	movs	r3, #0
 8011972:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8011976:	78fb      	ldrb	r3, [r7, #3]
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	70fa      	strb	r2, [r7, #3]
 801197c:	461a      	mov	r2, r3
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	4413      	add	r3, r2
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011988:	78fb      	ldrb	r3, [r7, #3]
 801198a:	1c5a      	adds	r2, r3, #1
 801198c:	70fa      	strb	r2, [r7, #3]
 801198e:	461a      	mov	r2, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	4413      	add	r3, r2
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	021b      	lsls	r3, r3, #8
 8011998:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801199c:	4313      	orrs	r3, r2
 801199e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80119a2:	78fb      	ldrb	r3, [r7, #3]
 80119a4:	1c5a      	adds	r2, r3, #1
 80119a6:	70fa      	strb	r2, [r7, #3]
 80119a8:	461a      	mov	r2, r3
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4413      	add	r3, r2
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	041b      	lsls	r3, r3, #16
 80119b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80119b6:	4313      	orrs	r3, r2
 80119b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 80119bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80119c0:	2264      	movs	r2, #100	@ 0x64
 80119c2:	fb02 f303 	mul.w	r3, r2, r3
 80119c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80119ca:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80119ce:	f002 ff6d 	bl	80148ac <LoRaMacClassBBeaconFreqReq>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d003      	beq.n	80119e0 <ProcessMacCommands+0x98c>
                    {
                        macCmdPayload[0] = 1;
 80119d8:	2301      	movs	r3, #1
 80119da:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 80119de:	e002      	b.n	80119e6 <ProcessMacCommands+0x992>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80119e0:	2300      	movs	r3, #0
 80119e2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80119e6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80119ea:	2201      	movs	r2, #1
 80119ec:	4619      	mov	r1, r3
 80119ee:	2013      	movs	r0, #19
 80119f0:	f003 f8b8 	bl	8014b64 <LoRaMacCommandsAddCmd>
                }
                break;
 80119f4:	e00c      	b.n	8011a10 <ProcessMacCommands+0x9bc>
                break;
 80119f6:	bf00      	nop
 80119f8:	e00a      	b.n	8011a10 <ProcessMacCommands+0x9bc>
                break;
 80119fa:	bf00      	nop
 80119fc:	e008      	b.n	8011a10 <ProcessMacCommands+0x9bc>
                break;
 80119fe:	bf00      	nop
 8011a00:	e006      	b.n	8011a10 <ProcessMacCommands+0x9bc>
                break;
 8011a02:	bf00      	nop
 8011a04:	e004      	b.n	8011a10 <ProcessMacCommands+0x9bc>
                break;
 8011a06:	bf00      	nop
 8011a08:	e002      	b.n	8011a10 <ProcessMacCommands+0x9bc>
                break;
 8011a0a:	bf00      	nop
 8011a0c:	e000      	b.n	8011a10 <ProcessMacCommands+0x9bc>
                break;
 8011a0e:	bf00      	nop
    while( macIndex < commandsSize )
 8011a10:	78fa      	ldrb	r2, [r7, #3]
 8011a12:	78bb      	ldrb	r3, [r7, #2]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	f4ff ab3f 	bcc.w	8011098 <ProcessMacCommands+0x44>
 8011a1a:	e004      	b.n	8011a26 <ProcessMacCommands+0x9d2>
        return;
 8011a1c:	bf00      	nop
 8011a1e:	e002      	b.n	8011a26 <ProcessMacCommands+0x9d2>
            return;
 8011a20:	bf00      	nop
 8011a22:	e000      	b.n	8011a26 <ProcessMacCommands+0x9d2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011a24:	bf00      	nop
        }
    }
}
 8011a26:	378c      	adds	r7, #140	@ 0x8c
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd90      	pop	{r4, r7, pc}
 8011a2c:	12d53d80 	.word	0x12d53d80
 8011a30:	20000998 	.word	0x20000998
 8011a34:	20001adc 	.word	0x20001adc

08011a38 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b08e      	sub	sp, #56	@ 0x38
 8011a3c:	af02      	add	r7, sp, #8
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	607a      	str	r2, [r7, #4]
 8011a42:	461a      	mov	r2, r3
 8011a44:	460b      	mov	r3, r1
 8011a46:	72fb      	strb	r3, [r7, #11]
 8011a48:	4613      	mov	r3, r2
 8011a4a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a4c:	2303      	movs	r3, #3
 8011a4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011a52:	4b66      	ldr	r3, [pc, #408]	@ (8011bec <Send+0x1b4>)
 8011a54:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8011a58:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011a5c:	4b63      	ldr	r3, [pc, #396]	@ (8011bec <Send+0x1b4>)
 8011a5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011a62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011a66:	4b61      	ldr	r3, [pc, #388]	@ (8011bec <Send+0x1b4>)
 8011a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011a6c:	4b5f      	ldr	r3, [pc, #380]	@ (8011bec <Send+0x1b4>)
 8011a6e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d101      	bne.n	8011a7a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011a76:	2307      	movs	r3, #7
 8011a78:	e0b4      	b.n	8011be4 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8011bec <Send+0x1b4>)
 8011a7c:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d102      	bne.n	8011a8a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011a84:	4b59      	ldr	r3, [pc, #356]	@ (8011bec <Send+0x1b4>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011a90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011a94:	f023 030f 	bic.w	r3, r3, #15
 8011a98:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011a9c:	4b53      	ldr	r3, [pc, #332]	@ (8011bec <Send+0x1b4>)
 8011a9e:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8011aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011aa6:	f362 13c7 	bfi	r3, r2, #7, #1
 8011aaa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011aae:	4b4f      	ldr	r3, [pc, #316]	@ (8011bec <Send+0x1b4>)
 8011ab0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d106      	bne.n	8011ac6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011ab8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011abc:	f043 0310 	orr.w	r3, r3, #16
 8011ac0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8011ac4:	e005      	b.n	8011ad2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011ac6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011aca:	f023 0310 	bic.w	r3, r3, #16
 8011ace:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8011ad2:	4b46      	ldr	r3, [pc, #280]	@ (8011bec <Send+0x1b4>)
 8011ad4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d005      	beq.n	8011ae8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011adc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011ae0:	f043 0320 	orr.w	r3, r3, #32
 8011ae4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8011ae8:	2301      	movs	r3, #1
 8011aea:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011aec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011af0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	bf14      	ite	ne
 8011afa:	2301      	movne	r3, #1
 8011afc:	2300      	moveq	r3, #0
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011b02:	4b3a      	ldr	r3, [pc, #232]	@ (8011bec <Send+0x1b4>)
 8011b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b06:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011b08:	4b38      	ldr	r3, [pc, #224]	@ (8011bec <Send+0x1b4>)
 8011b0a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8011b0e:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011b10:	4b36      	ldr	r3, [pc, #216]	@ (8011bec <Send+0x1b4>)
 8011b12:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8011b16:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011b18:	4b34      	ldr	r3, [pc, #208]	@ (8011bec <Send+0x1b4>)
 8011b1a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011b1e:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011b22:	4b32      	ldr	r3, [pc, #200]	@ (8011bec <Send+0x1b4>)
 8011b24:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011b28:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8011bec <Send+0x1b4>)
 8011b2e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011b36:	4b2d      	ldr	r3, [pc, #180]	@ (8011bec <Send+0x1b4>)
 8011b38:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011b3c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011b40:	4b2a      	ldr	r3, [pc, #168]	@ (8011bec <Send+0x1b4>)
 8011b42:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011b46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8011b4a:	f107 0014 	add.w	r0, r7, #20
 8011b4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011b52:	9300      	str	r3, [sp, #0]
 8011b54:	4b26      	ldr	r3, [pc, #152]	@ (8011bf0 <Send+0x1b8>)
 8011b56:	4a27      	ldr	r2, [pc, #156]	@ (8011bf4 <Send+0x1bc>)
 8011b58:	4927      	ldr	r1, [pc, #156]	@ (8011bf8 <Send+0x1c0>)
 8011b5a:	f002 fd21 	bl	80145a0 <LoRaMacAdrCalcNext>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	461a      	mov	r2, r3
 8011b62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011b66:	f362 1386 	bfi	r3, r2, #6, #1
 8011b6a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011b6e:	7afa      	ldrb	r2, [r7, #11]
 8011b70:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8011b74:	893b      	ldrh	r3, [r7, #8]
 8011b76:	9300      	str	r3, [sp, #0]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f000 fc72 	bl	8012464 <PrepareFrame>
 8011b80:	4603      	mov	r3, r0
 8011b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011b86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d003      	beq.n	8011b96 <Send+0x15e>
 8011b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b92:	2b0a      	cmp	r3, #10
 8011b94:	d107      	bne.n	8011ba6 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011b96:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f000 f962 	bl	8011e64 <ScheduleTx>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00a      	beq.n	8011bc4 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8011bae:	4a0f      	ldr	r2, [pc, #60]	@ (8011bec <Send+0x1b4>)
 8011bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011bb4:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8011bec <Send+0x1b4>)
 8011bba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011bbe:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8011bc2:	e00d      	b.n	8011be0 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011bc4:	4b09      	ldr	r3, [pc, #36]	@ (8011bec <Send+0x1b4>)
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bce:	4a07      	ldr	r2, [pc, #28]	@ (8011bec <Send+0x1b4>)
 8011bd0:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011bd2:	f003 f86d 	bl	8014cb0 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d001      	beq.n	8011be0 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011bdc:	2313      	movs	r3, #19
 8011bde:	e001      	b.n	8011be4 <Send+0x1ac>
        }
    }
    return status;
 8011be0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3730      	adds	r7, #48	@ 0x30
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	20000ecc 	.word	0x20000ecc
 8011bf0:	20000f34 	.word	0x20000f34
 8011bf4:	20000f04 	.word	0x20000f04
 8011bf8:	20000f05 	.word	0x20000f05

08011bfc <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	4603      	mov	r3, r0
 8011c04:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011c06:	2300      	movs	r3, #0
 8011c08:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011c12:	79fb      	ldrb	r3, [r7, #7]
 8011c14:	2bff      	cmp	r3, #255	@ 0xff
 8011c16:	d11f      	bne.n	8011c58 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011c18:	2000      	movs	r0, #0
 8011c1a:	f7ff f8e1 	bl	8010de0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011c1e:	4b15      	ldr	r3, [pc, #84]	@ (8011c74 <SendReJoinReq+0x78>)
 8011c20:	2200      	movs	r2, #0
 8011c22:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011c26:	4b13      	ldr	r3, [pc, #76]	@ (8011c74 <SendReJoinReq+0x78>)
 8011c28:	4a13      	ldr	r2, [pc, #76]	@ (8011c78 <SendReJoinReq+0x7c>)
 8011c2a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011c2e:	4b11      	ldr	r3, [pc, #68]	@ (8011c74 <SendReJoinReq+0x78>)
 8011c30:	22ff      	movs	r2, #255	@ 0xff
 8011c32:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011c36:	7b3b      	ldrb	r3, [r7, #12]
 8011c38:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8011c3c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011c3e:	7b3a      	ldrb	r2, [r7, #12]
 8011c40:	4b0c      	ldr	r3, [pc, #48]	@ (8011c74 <SendReJoinReq+0x78>)
 8011c42:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8011c46:	480d      	ldr	r0, [pc, #52]	@ (8011c7c <SendReJoinReq+0x80>)
 8011c48:	f7fb fefc 	bl	800da44 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8011c4c:	480c      	ldr	r0, [pc, #48]	@ (8011c80 <SendReJoinReq+0x84>)
 8011c4e:	f7fb fec9 	bl	800d9e4 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8011c52:	2300      	movs	r3, #0
 8011c54:	73fb      	strb	r3, [r7, #15]

            break;
 8011c56:	e002      	b.n	8011c5e <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011c58:	2302      	movs	r3, #2
 8011c5a:	73bb      	strb	r3, [r7, #14]
            break;
 8011c5c:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011c5e:	7bfb      	ldrb	r3, [r7, #15]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f000 f8ff 	bl	8011e64 <ScheduleTx>
 8011c66:	4603      	mov	r3, r0
 8011c68:	73bb      	strb	r3, [r7, #14]
    return status;
 8011c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3710      	adds	r7, #16
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	20000998 	.word	0x20000998
 8011c78:	2000099a 	.word	0x2000099a
 8011c7c:	20000aa6 	.word	0x20000aa6
 8011c80:	20000aae 	.word	0x20000aae

08011c84 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011c88:	f002 fd9a 	bl	80147c0 <LoRaMacClassBIsBeaconExpected>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d001      	beq.n	8011c96 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011c92:	230e      	movs	r3, #14
 8011c94:	e013      	b.n	8011cbe <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011c96:	4b0b      	ldr	r3, [pc, #44]	@ (8011cc4 <CheckForClassBCollision+0x40>)
 8011c98:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d10d      	bne.n	8011cbc <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011ca0:	f002 fd95 	bl	80147ce <LoRaMacClassBIsPingExpected>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d001      	beq.n	8011cae <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011caa:	230f      	movs	r3, #15
 8011cac:	e007      	b.n	8011cbe <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011cae:	f002 fd95 	bl	80147dc <LoRaMacClassBIsMulticastExpected>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d001      	beq.n	8011cbc <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011cb8:	230f      	movs	r3, #15
 8011cba:	e000      	b.n	8011cbe <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011cbc:	2300      	movs	r3, #0
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	20000ecc 	.word	0x20000ecc

08011cc8 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011cc8:	b590      	push	{r4, r7, lr}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011cce:	4b2d      	ldr	r3, [pc, #180]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011cd0:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011cd6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011cda:	4b2a      	ldr	r3, [pc, #168]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011cdc:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 8011ce0:	4b28      	ldr	r3, [pc, #160]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011ce2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8011ce6:	4b27      	ldr	r3, [pc, #156]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011ce8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011cec:	b25b      	sxtb	r3, r3
 8011cee:	f004 fe2e 	bl	801694e <RegionApplyDrOffset>
 8011cf2:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011cf4:	b259      	sxtb	r1, r3
 8011cf6:	4b23      	ldr	r3, [pc, #140]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011cf8:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011cfc:	4b21      	ldr	r3, [pc, #132]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d00:	4821      	ldr	r0, [pc, #132]	@ (8011d88 <ComputeRxWindowParameters+0xc0>)
 8011d02:	9000      	str	r0, [sp, #0]
 8011d04:	4620      	mov	r0, r4
 8011d06:	f004 fd44 	bl	8016792 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011d0c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011d10:	4b1c      	ldr	r3, [pc, #112]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011d12:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011d16:	b259      	sxtb	r1, r3
 8011d18:	4b1a      	ldr	r3, [pc, #104]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011d1a:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011d1e:	4b19      	ldr	r3, [pc, #100]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d22:	4c1a      	ldr	r4, [pc, #104]	@ (8011d8c <ComputeRxWindowParameters+0xc4>)
 8011d24:	9400      	str	r4, [sp, #0]
 8011d26:	f004 fd34 	bl	8016792 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011d2a:	4b16      	ldr	r3, [pc, #88]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d2e:	4a18      	ldr	r2, [pc, #96]	@ (8011d90 <ComputeRxWindowParameters+0xc8>)
 8011d30:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011d34:	4413      	add	r3, r2
 8011d36:	4a16      	ldr	r2, [pc, #88]	@ (8011d90 <ComputeRxWindowParameters+0xc8>)
 8011d38:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011d3c:	4b11      	ldr	r3, [pc, #68]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011d40:	4a13      	ldr	r2, [pc, #76]	@ (8011d90 <ComputeRxWindowParameters+0xc8>)
 8011d42:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011d46:	4413      	add	r3, r2
 8011d48:	4a11      	ldr	r2, [pc, #68]	@ (8011d90 <ComputeRxWindowParameters+0xc8>)
 8011d4a:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8011d4e:	4b10      	ldr	r3, [pc, #64]	@ (8011d90 <ComputeRxWindowParameters+0xc8>)
 8011d50:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011d54:	2b04      	cmp	r3, #4
 8011d56:	d011      	beq.n	8011d7c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011d58:	4b0a      	ldr	r3, [pc, #40]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8011d90 <ComputeRxWindowParameters+0xc8>)
 8011d5e:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011d62:	4413      	add	r3, r2
 8011d64:	4a0a      	ldr	r2, [pc, #40]	@ (8011d90 <ComputeRxWindowParameters+0xc8>)
 8011d66:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011d6a:	4b06      	ldr	r3, [pc, #24]	@ (8011d84 <ComputeRxWindowParameters+0xbc>)
 8011d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d6e:	4a08      	ldr	r2, [pc, #32]	@ (8011d90 <ComputeRxWindowParameters+0xc8>)
 8011d70:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011d74:	4413      	add	r3, r2
 8011d76:	4a06      	ldr	r2, [pc, #24]	@ (8011d90 <ComputeRxWindowParameters+0xc8>)
 8011d78:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8011d7c:	bf00      	nop
 8011d7e:	3704      	adds	r7, #4
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd90      	pop	{r4, r7, pc}
 8011d84:	20000ecc 	.word	0x20000ecc
 8011d88:	20000d50 	.word	0x20000d50
 8011d8c:	20000d68 	.word	0x20000d68
 8011d90:	20000998 	.word	0x20000998

08011d94 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011d9e:	4b13      	ldr	r3, [pc, #76]	@ (8011dec <VerifyTxFrame+0x58>)
 8011da0:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d01b      	beq.n	8011de0 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011da8:	1d3b      	adds	r3, r7, #4
 8011daa:	4618      	mov	r0, r3
 8011dac:	f002 ffd0 	bl	8014d50 <LoRaMacCommandsGetSizeSerializedCmds>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d001      	beq.n	8011dba <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011db6:	2313      	movs	r3, #19
 8011db8:	e013      	b.n	8011de2 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011dba:	4b0d      	ldr	r3, [pc, #52]	@ (8011df0 <VerifyTxFrame+0x5c>)
 8011dbc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8011dec <VerifyTxFrame+0x58>)
 8011dc2:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	b2d2      	uxtb	r2, r2
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7ff f91a 	bl	8011004 <ValidatePayloadLength>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	f083 0301 	eor.w	r3, r3, #1
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d001      	beq.n	8011de0 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011ddc:	2308      	movs	r3, #8
 8011dde:	e000      	b.n	8011de2 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011de0:	2300      	movs	r3, #0
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	20000ecc 	.word	0x20000ecc
 8011df0:	20000998 	.word	0x20000998

08011df4 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011dfa:	4b18      	ldr	r3, [pc, #96]	@ (8011e5c <SerializeTxFrame+0x68>)
 8011dfc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d002      	beq.n	8011e0a <SerializeTxFrame+0x16>
 8011e04:	2b04      	cmp	r3, #4
 8011e06:	d011      	beq.n	8011e2c <SerializeTxFrame+0x38>
 8011e08:	e021      	b.n	8011e4e <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011e0a:	4815      	ldr	r0, [pc, #84]	@ (8011e60 <SerializeTxFrame+0x6c>)
 8011e0c:	f004 fac3 	bl	8016396 <LoRaMacSerializerJoinRequest>
 8011e10:	4603      	mov	r3, r0
 8011e12:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011e14:	79fb      	ldrb	r3, [r7, #7]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d001      	beq.n	8011e1e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e1a:	2311      	movs	r3, #17
 8011e1c:	e01a      	b.n	8011e54 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8011e5c <SerializeTxFrame+0x68>)
 8011e20:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011e24:	461a      	mov	r2, r3
 8011e26:	4b0d      	ldr	r3, [pc, #52]	@ (8011e5c <SerializeTxFrame+0x68>)
 8011e28:	801a      	strh	r2, [r3, #0]
            break;
 8011e2a:	e012      	b.n	8011e52 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011e2c:	480c      	ldr	r0, [pc, #48]	@ (8011e60 <SerializeTxFrame+0x6c>)
 8011e2e:	f004 fb34 	bl	801649a <LoRaMacSerializerData>
 8011e32:	4603      	mov	r3, r0
 8011e34:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011e36:	79fb      	ldrb	r3, [r7, #7]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e3c:	2311      	movs	r3, #17
 8011e3e:	e009      	b.n	8011e54 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011e40:	4b06      	ldr	r3, [pc, #24]	@ (8011e5c <SerializeTxFrame+0x68>)
 8011e42:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011e46:	461a      	mov	r2, r3
 8011e48:	4b04      	ldr	r3, [pc, #16]	@ (8011e5c <SerializeTxFrame+0x68>)
 8011e4a:	801a      	strh	r2, [r3, #0]
            break;
 8011e4c:	e001      	b.n	8011e52 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e4e:	2303      	movs	r3, #3
 8011e50:	e000      	b.n	8011e54 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011e52:	2300      	movs	r3, #0
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3708      	adds	r7, #8
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}
 8011e5c:	20000998 	.word	0x20000998
 8011e60:	20000aa0 	.word	0x20000aa0

08011e64 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b090      	sub	sp, #64	@ 0x40
 8011e68:	af02      	add	r7, sp, #8
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e6e:	2303      	movs	r3, #3
 8011e70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011e74:	f7ff ff06 	bl	8011c84 <CheckForClassBCollision>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d002      	beq.n	8011e8c <ScheduleTx+0x28>
    {
        return status;
 8011e86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e8a:	e092      	b.n	8011fb2 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8011e8c:	f000 f8f8 	bl	8012080 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011e90:	f7ff ffb0 	bl	8011df4 <SerializeTxFrame>
 8011e94:	4603      	mov	r3, r0
 8011e96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d002      	beq.n	8011ea8 <ScheduleTx+0x44>
    {
        return status;
 8011ea2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011ea6:	e084      	b.n	8011fb2 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011ea8:	4b44      	ldr	r3, [pc, #272]	@ (8011fbc <ScheduleTx+0x158>)
 8011eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eac:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011eae:	4b43      	ldr	r3, [pc, #268]	@ (8011fbc <ScheduleTx+0x158>)
 8011eb0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011eb4:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8011eb6:	4b41      	ldr	r3, [pc, #260]	@ (8011fbc <ScheduleTx+0x158>)
 8011eb8:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011ebc:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f00a faa4 	bl	801c410 <SysTimeGetMcuTime>
 8011ec8:	4638      	mov	r0, r7
 8011eca:	4b3c      	ldr	r3, [pc, #240]	@ (8011fbc <ScheduleTx+0x158>)
 8011ecc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8011ed0:	9200      	str	r2, [sp, #0]
 8011ed2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8011ed6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011eda:	ca06      	ldmia	r2, {r1, r2}
 8011edc:	f00a f9f9 	bl	801c2d2 <SysTimeSub>
 8011ee0:	f107 0320 	add.w	r3, r7, #32
 8011ee4:	463a      	mov	r2, r7
 8011ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011eea:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011eee:	4b33      	ldr	r3, [pc, #204]	@ (8011fbc <ScheduleTx+0x158>)
 8011ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ef2:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 8011efa:	2301      	movs	r3, #1
 8011efc:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011efe:	4b30      	ldr	r3, [pc, #192]	@ (8011fc0 <ScheduleTx+0x15c>)
 8011f00:	881b      	ldrh	r3, [r3, #0]
 8011f02:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011f04:	4b2d      	ldr	r3, [pc, #180]	@ (8011fbc <ScheduleTx+0x158>)
 8011f06:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d104      	bne.n	8011f18 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011f0e:	2301      	movs	r3, #1
 8011f10:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8011f14:	2300      	movs	r3, #0
 8011f16:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011f18:	4b28      	ldr	r3, [pc, #160]	@ (8011fbc <ScheduleTx+0x158>)
 8011f1a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011f1e:	f107 0114 	add.w	r1, r7, #20
 8011f22:	4b28      	ldr	r3, [pc, #160]	@ (8011fc4 <ScheduleTx+0x160>)
 8011f24:	9300      	str	r3, [sp, #0]
 8011f26:	4b28      	ldr	r3, [pc, #160]	@ (8011fc8 <ScheduleTx+0x164>)
 8011f28:	4a28      	ldr	r2, [pc, #160]	@ (8011fcc <ScheduleTx+0x168>)
 8011f2a:	f004 fcf8 	bl	801691e <RegionNextChannel>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8011f34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d025      	beq.n	8011f88 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8011f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f40:	2b0b      	cmp	r3, #11
 8011f42:	d11e      	bne.n	8011f82 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011f44:	4b1e      	ldr	r3, [pc, #120]	@ (8011fc0 <ScheduleTx+0x15c>)
 8011f46:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d01c      	beq.n	8011f88 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8011f4e:	7bfb      	ldrb	r3, [r7, #15]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d013      	beq.n	8011f7c <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011f54:	4b1a      	ldr	r3, [pc, #104]	@ (8011fc0 <ScheduleTx+0x15c>)
 8011f56:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011f5a:	f043 0320 	orr.w	r3, r3, #32
 8011f5e:	4a18      	ldr	r2, [pc, #96]	@ (8011fc0 <ScheduleTx+0x15c>)
 8011f60:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011f64:	4b16      	ldr	r3, [pc, #88]	@ (8011fc0 <ScheduleTx+0x15c>)
 8011f66:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	4818      	ldr	r0, [pc, #96]	@ (8011fd0 <ScheduleTx+0x16c>)
 8011f6e:	f00a fd21 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8011f72:	4817      	ldr	r0, [pc, #92]	@ (8011fd0 <ScheduleTx+0x16c>)
 8011f74:	f00a fc40 	bl	801c7f8 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	e01a      	b.n	8011fb2 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8011f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f80:	e017      	b.n	8011fb2 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011f82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f86:	e014      	b.n	8011fb2 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011f88:	f7ff fe9e 	bl	8011cc8 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011f8c:	f7ff ff02 	bl	8011d94 <VerifyTxFrame>
 8011f90:	4603      	mov	r3, r0
 8011f92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011f96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d002      	beq.n	8011fa4 <ScheduleTx+0x140>
    {
        return status;
 8011f9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011fa2:	e006      	b.n	8011fb2 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011fa4:	4b06      	ldr	r3, [pc, #24]	@ (8011fc0 <ScheduleTx+0x15c>)
 8011fa6:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8011faa:	4618      	mov	r0, r3
 8011fac:	f000 fb74 	bl	8012698 <SendFrameOnChannel>
 8011fb0:	4603      	mov	r3, r0
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3738      	adds	r7, #56	@ 0x38
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	20000ecc 	.word	0x20000ecc
 8011fc0:	20000998 	.word	0x20000998
 8011fc4:	20000efc 	.word	0x20000efc
 8011fc8:	20000e2c 	.word	0x20000e2c
 8011fcc:	20000db3 	.word	0x20000db3
 8011fd0:	20000d00 	.word	0x20000d00

08011fd4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b084      	sub	sp, #16
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	4603      	mov	r3, r0
 8011fdc:	460a      	mov	r2, r1
 8011fde:	71fb      	strb	r3, [r7, #7]
 8011fe0:	4613      	mov	r3, r2
 8011fe2:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011fe4:	2312      	movs	r3, #18
 8011fe6:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011fec:	4b22      	ldr	r3, [pc, #136]	@ (8012078 <SecureFrame+0xa4>)
 8011fee:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d002      	beq.n	8011ffc <SecureFrame+0x28>
 8011ff6:	2b04      	cmp	r3, #4
 8011ff8:	d011      	beq.n	801201e <SecureFrame+0x4a>
 8011ffa:	e036      	b.n	801206a <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011ffc:	481f      	ldr	r0, [pc, #124]	@ (801207c <SecureFrame+0xa8>)
 8011ffe:	f003 fd9d 	bl	8015b3c <LoRaMacCryptoPrepareJoinRequest>
 8012002:	4603      	mov	r3, r0
 8012004:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012006:	7bfb      	ldrb	r3, [r7, #15]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d001      	beq.n	8012010 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801200c:	2311      	movs	r3, #17
 801200e:	e02f      	b.n	8012070 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012010:	4b19      	ldr	r3, [pc, #100]	@ (8012078 <SecureFrame+0xa4>)
 8012012:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8012016:	461a      	mov	r2, r3
 8012018:	4b17      	ldr	r3, [pc, #92]	@ (8012078 <SecureFrame+0xa4>)
 801201a:	801a      	strh	r2, [r3, #0]
            break;
 801201c:	e027      	b.n	801206e <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801201e:	f107 0308 	add.w	r3, r7, #8
 8012022:	4618      	mov	r0, r3
 8012024:	f003 fcc4 	bl	80159b0 <LoRaMacCryptoGetFCntUp>
 8012028:	4603      	mov	r3, r0
 801202a:	2b00      	cmp	r3, #0
 801202c:	d001      	beq.n	8012032 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801202e:	2312      	movs	r3, #18
 8012030:	e01e      	b.n	8012070 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8012032:	4b11      	ldr	r3, [pc, #68]	@ (8012078 <SecureFrame+0xa4>)
 8012034:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012038:	2b00      	cmp	r3, #0
 801203a:	d002      	beq.n	8012042 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	3b01      	subs	r3, #1
 8012040:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012042:	68b8      	ldr	r0, [r7, #8]
 8012044:	79ba      	ldrb	r2, [r7, #6]
 8012046:	79f9      	ldrb	r1, [r7, #7]
 8012048:	4b0c      	ldr	r3, [pc, #48]	@ (801207c <SecureFrame+0xa8>)
 801204a:	f003 fe9d 	bl	8015d88 <LoRaMacCryptoSecureMessage>
 801204e:	4603      	mov	r3, r0
 8012050:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012052:	7bfb      	ldrb	r3, [r7, #15]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d001      	beq.n	801205c <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012058:	2311      	movs	r3, #17
 801205a:	e009      	b.n	8012070 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801205c:	4b06      	ldr	r3, [pc, #24]	@ (8012078 <SecureFrame+0xa4>)
 801205e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8012062:	461a      	mov	r2, r3
 8012064:	4b04      	ldr	r3, [pc, #16]	@ (8012078 <SecureFrame+0xa4>)
 8012066:	801a      	strh	r2, [r3, #0]
            break;
 8012068:	e001      	b.n	801206e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801206a:	2303      	movs	r3, #3
 801206c:	e000      	b.n	8012070 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801206e:	2300      	movs	r3, #0
}
 8012070:	4618      	mov	r0, r3
 8012072:	3710      	adds	r7, #16
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	20000998 	.word	0x20000998
 801207c:	20000aa0 	.word	0x20000aa0

08012080 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012080:	b480      	push	{r7}
 8012082:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012084:	4b09      	ldr	r3, [pc, #36]	@ (80120ac <CalculateBackOff+0x2c>)
 8012086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012088:	2b00      	cmp	r3, #0
 801208a:	d10a      	bne.n	80120a2 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 801208c:	4b07      	ldr	r3, [pc, #28]	@ (80120ac <CalculateBackOff+0x2c>)
 801208e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8012092:	3b01      	subs	r3, #1
 8012094:	4a06      	ldr	r2, [pc, #24]	@ (80120b0 <CalculateBackOff+0x30>)
 8012096:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 801209a:	fb02 f303 	mul.w	r3, r2, r3
 801209e:	4a03      	ldr	r2, [pc, #12]	@ (80120ac <CalculateBackOff+0x2c>)
 80120a0:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 80120a2:	bf00      	nop
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bc80      	pop	{r7}
 80120a8:	4770      	bx	lr
 80120aa:	bf00      	nop
 80120ac:	20000ecc 	.word	0x20000ecc
 80120b0:	20000998 	.word	0x20000998

080120b4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	4603      	mov	r3, r0
 80120bc:	7139      	strb	r1, [r7, #4]
 80120be:	71fb      	strb	r3, [r7, #7]
 80120c0:	4613      	mov	r3, r2
 80120c2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80120c4:	79fb      	ldrb	r3, [r7, #7]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d002      	beq.n	80120d0 <RemoveMacCommands+0x1c>
 80120ca:	79fb      	ldrb	r3, [r7, #7]
 80120cc:	2b01      	cmp	r3, #1
 80120ce:	d10d      	bne.n	80120ec <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80120d0:	79bb      	ldrb	r3, [r7, #6]
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d108      	bne.n	80120e8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80120d6:	793b      	ldrb	r3, [r7, #4]
 80120d8:	f003 0320 	and.w	r3, r3, #32
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d004      	beq.n	80120ec <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80120e2:	f002 fe09 	bl	8014cf8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80120e6:	e001      	b.n	80120ec <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80120e8:	f002 fe06 	bl	8014cf8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80120ec:	bf00      	nop
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80120f4:	b5b0      	push	{r4, r5, r7, lr}
 80120f6:	b092      	sub	sp, #72	@ 0x48
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	4603      	mov	r3, r0
 80120fc:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80120fe:	79fb      	ldrb	r3, [r7, #7]
 8012100:	f083 0301 	eor.w	r3, r3, #1
 8012104:	b2db      	uxtb	r3, r3
 8012106:	2b00      	cmp	r3, #0
 8012108:	d003      	beq.n	8012112 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801210a:	4b88      	ldr	r3, [pc, #544]	@ (801232c <ResetMacParameters+0x238>)
 801210c:	2200      	movs	r2, #0
 801210e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8012112:	4b86      	ldr	r3, [pc, #536]	@ (801232c <ResetMacParameters+0x238>)
 8012114:	2200      	movs	r2, #0
 8012116:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8012118:	4b85      	ldr	r3, [pc, #532]	@ (8012330 <ResetMacParameters+0x23c>)
 801211a:	2200      	movs	r2, #0
 801211c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012120:	4b83      	ldr	r3, [pc, #524]	@ (8012330 <ResetMacParameters+0x23c>)
 8012122:	2200      	movs	r2, #0
 8012124:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8012128:	4b81      	ldr	r3, [pc, #516]	@ (8012330 <ResetMacParameters+0x23c>)
 801212a:	2200      	movs	r2, #0
 801212c:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8012130:	4b7e      	ldr	r3, [pc, #504]	@ (801232c <ResetMacParameters+0x238>)
 8012132:	2200      	movs	r2, #0
 8012134:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8012138:	4b7c      	ldr	r3, [pc, #496]	@ (801232c <ResetMacParameters+0x238>)
 801213a:	2201      	movs	r2, #1
 801213c:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012140:	4b7a      	ldr	r3, [pc, #488]	@ (801232c <ResetMacParameters+0x238>)
 8012142:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8012146:	4b79      	ldr	r3, [pc, #484]	@ (801232c <ResetMacParameters+0x238>)
 8012148:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801214c:	4b77      	ldr	r3, [pc, #476]	@ (801232c <ResetMacParameters+0x238>)
 801214e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8012152:	4b76      	ldr	r3, [pc, #472]	@ (801232c <ResetMacParameters+0x238>)
 8012154:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8012158:	4b74      	ldr	r3, [pc, #464]	@ (801232c <ResetMacParameters+0x238>)
 801215a:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 801215e:	4b73      	ldr	r3, [pc, #460]	@ (801232c <ResetMacParameters+0x238>)
 8012160:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012164:	4b71      	ldr	r3, [pc, #452]	@ (801232c <ResetMacParameters+0x238>)
 8012166:	4a71      	ldr	r2, [pc, #452]	@ (801232c <ResetMacParameters+0x238>)
 8012168:	336c      	adds	r3, #108	@ 0x6c
 801216a:	32b4      	adds	r2, #180	@ 0xb4
 801216c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012170:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012174:	4b6d      	ldr	r3, [pc, #436]	@ (801232c <ResetMacParameters+0x238>)
 8012176:	4a6d      	ldr	r2, [pc, #436]	@ (801232c <ResetMacParameters+0x238>)
 8012178:	3374      	adds	r3, #116	@ 0x74
 801217a:	32bc      	adds	r2, #188	@ 0xbc
 801217c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012180:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8012184:	4b69      	ldr	r3, [pc, #420]	@ (801232c <ResetMacParameters+0x238>)
 8012186:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 801218a:	4b68      	ldr	r3, [pc, #416]	@ (801232c <ResetMacParameters+0x238>)
 801218c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012190:	4b66      	ldr	r3, [pc, #408]	@ (801232c <ResetMacParameters+0x238>)
 8012192:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 8012196:	4b65      	ldr	r3, [pc, #404]	@ (801232c <ResetMacParameters+0x238>)
 8012198:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801219c:	4b63      	ldr	r3, [pc, #396]	@ (801232c <ResetMacParameters+0x238>)
 801219e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80121a2:	4a62      	ldr	r2, [pc, #392]	@ (801232c <ResetMacParameters+0x238>)
 80121a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80121a8:	4b60      	ldr	r3, [pc, #384]	@ (801232c <ResetMacParameters+0x238>)
 80121aa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80121ae:	4a5f      	ldr	r2, [pc, #380]	@ (801232c <ResetMacParameters+0x238>)
 80121b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80121b4:	4b5d      	ldr	r3, [pc, #372]	@ (801232c <ResetMacParameters+0x238>)
 80121b6:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 80121ba:	4b5c      	ldr	r3, [pc, #368]	@ (801232c <ResetMacParameters+0x238>)
 80121bc:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80121c0:	4b5a      	ldr	r3, [pc, #360]	@ (801232c <ResetMacParameters+0x238>)
 80121c2:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 80121c6:	4b59      	ldr	r3, [pc, #356]	@ (801232c <ResetMacParameters+0x238>)
 80121c8:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 80121cc:	4b58      	ldr	r3, [pc, #352]	@ (8012330 <ResetMacParameters+0x23c>)
 80121ce:	2200      	movs	r2, #0
 80121d0:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 80121d4:	4b55      	ldr	r3, [pc, #340]	@ (801232c <ResetMacParameters+0x238>)
 80121d6:	2200      	movs	r2, #0
 80121d8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80121dc:	4b53      	ldr	r3, [pc, #332]	@ (801232c <ResetMacParameters+0x238>)
 80121de:	2200      	movs	r2, #0
 80121e0:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 80121e4:	4b51      	ldr	r3, [pc, #324]	@ (801232c <ResetMacParameters+0x238>)
 80121e6:	2200      	movs	r2, #0
 80121e8:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80121ec:	4b4f      	ldr	r3, [pc, #316]	@ (801232c <ResetMacParameters+0x238>)
 80121ee:	2200      	movs	r2, #0
 80121f0:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80121f4:	4b4d      	ldr	r3, [pc, #308]	@ (801232c <ResetMacParameters+0x238>)
 80121f6:	2200      	movs	r2, #0
 80121f8:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 80121fc:	4b4b      	ldr	r3, [pc, #300]	@ (801232c <ResetMacParameters+0x238>)
 80121fe:	2200      	movs	r2, #0
 8012200:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8012204:	4b49      	ldr	r3, [pc, #292]	@ (801232c <ResetMacParameters+0x238>)
 8012206:	2200      	movs	r2, #0
 8012208:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 801220c:	4b47      	ldr	r3, [pc, #284]	@ (801232c <ResetMacParameters+0x238>)
 801220e:	2200      	movs	r2, #0
 8012210:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8012214:	4b45      	ldr	r3, [pc, #276]	@ (801232c <ResetMacParameters+0x238>)
 8012216:	2200      	movs	r2, #0
 8012218:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 801221c:	4b43      	ldr	r3, [pc, #268]	@ (801232c <ResetMacParameters+0x238>)
 801221e:	2200      	movs	r2, #0
 8012220:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8012224:	4b41      	ldr	r3, [pc, #260]	@ (801232c <ResetMacParameters+0x238>)
 8012226:	2200      	movs	r2, #0
 8012228:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801222c:	2301      	movs	r3, #1
 801222e:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012230:	4b40      	ldr	r3, [pc, #256]	@ (8012334 <ResetMacParameters+0x240>)
 8012232:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012234:	4b40      	ldr	r3, [pc, #256]	@ (8012338 <ResetMacParameters+0x244>)
 8012236:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8012238:	4b40      	ldr	r3, [pc, #256]	@ (801233c <ResetMacParameters+0x248>)
 801223a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801223c:	4b3b      	ldr	r3, [pc, #236]	@ (801232c <ResetMacParameters+0x238>)
 801223e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012242:	f107 020c 	add.w	r2, r7, #12
 8012246:	4611      	mov	r1, r2
 8012248:	4618      	mov	r0, r3
 801224a:	f004 fa54 	bl	80166f6 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801224e:	4b38      	ldr	r3, [pc, #224]	@ (8012330 <ResetMacParameters+0x23c>)
 8012250:	2200      	movs	r2, #0
 8012252:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012256:	4b36      	ldr	r3, [pc, #216]	@ (8012330 <ResetMacParameters+0x23c>)
 8012258:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 801225c:	4b34      	ldr	r3, [pc, #208]	@ (8012330 <ResetMacParameters+0x23c>)
 801225e:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012262:	4b32      	ldr	r3, [pc, #200]	@ (801232c <ResetMacParameters+0x238>)
 8012264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012266:	4a32      	ldr	r2, [pc, #200]	@ (8012330 <ResetMacParameters+0x23c>)
 8012268:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801226c:	4b2f      	ldr	r3, [pc, #188]	@ (801232c <ResetMacParameters+0x238>)
 801226e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8012272:	4b2f      	ldr	r3, [pc, #188]	@ (8012330 <ResetMacParameters+0x23c>)
 8012274:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012278:	4b2c      	ldr	r3, [pc, #176]	@ (801232c <ResetMacParameters+0x238>)
 801227a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801227e:	4b2c      	ldr	r3, [pc, #176]	@ (8012330 <ResetMacParameters+0x23c>)
 8012280:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012284:	4b2a      	ldr	r3, [pc, #168]	@ (8012330 <ResetMacParameters+0x23c>)
 8012286:	2200      	movs	r2, #0
 8012288:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801228c:	4b28      	ldr	r3, [pc, #160]	@ (8012330 <ResetMacParameters+0x23c>)
 801228e:	2201      	movs	r2, #1
 8012290:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012294:	4b25      	ldr	r3, [pc, #148]	@ (801232c <ResetMacParameters+0x238>)
 8012296:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801229a:	4b25      	ldr	r3, [pc, #148]	@ (8012330 <ResetMacParameters+0x23c>)
 801229c:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80122a0:	4a23      	ldr	r2, [pc, #140]	@ (8012330 <ResetMacParameters+0x23c>)
 80122a2:	4b23      	ldr	r3, [pc, #140]	@ (8012330 <ResetMacParameters+0x23c>)
 80122a4:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 80122a8:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 80122ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80122b4:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80122b8:	4b1d      	ldr	r3, [pc, #116]	@ (8012330 <ResetMacParameters+0x23c>)
 80122ba:	2201      	movs	r2, #1
 80122bc:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80122c0:	4b1b      	ldr	r3, [pc, #108]	@ (8012330 <ResetMacParameters+0x23c>)
 80122c2:	2202      	movs	r2, #2
 80122c4:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80122c8:	2300      	movs	r3, #0
 80122ca:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 80122cc:	2300      	movs	r3, #0
 80122ce:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 80122d0:	4b17      	ldr	r3, [pc, #92]	@ (8012330 <ResetMacParameters+0x23c>)
 80122d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d009      	beq.n	80122ee <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80122da:	4b15      	ldr	r3, [pc, #84]	@ (8012330 <ResetMacParameters+0x23c>)
 80122dc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80122e4:	4b12      	ldr	r3, [pc, #72]	@ (8012330 <ResetMacParameters+0x23c>)
 80122e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122ea:	695b      	ldr	r3, [r3, #20]
 80122ec:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80122ee:	4b14      	ldr	r3, [pc, #80]	@ (8012340 <ResetMacParameters+0x24c>)
 80122f0:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80122f2:	4b14      	ldr	r3, [pc, #80]	@ (8012344 <ResetMacParameters+0x250>)
 80122f4:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80122f6:	4b14      	ldr	r3, [pc, #80]	@ (8012348 <ResetMacParameters+0x254>)
 80122f8:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80122fa:	4b14      	ldr	r3, [pc, #80]	@ (801234c <ResetMacParameters+0x258>)
 80122fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80122fe:	4b14      	ldr	r3, [pc, #80]	@ (8012350 <ResetMacParameters+0x25c>)
 8012300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8012302:	4b14      	ldr	r3, [pc, #80]	@ (8012354 <ResetMacParameters+0x260>)
 8012304:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8012306:	4b14      	ldr	r3, [pc, #80]	@ (8012358 <ResetMacParameters+0x264>)
 8012308:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801230a:	4b14      	ldr	r3, [pc, #80]	@ (801235c <ResetMacParameters+0x268>)
 801230c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 801230e:	4b14      	ldr	r3, [pc, #80]	@ (8012360 <ResetMacParameters+0x26c>)
 8012310:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8012312:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8012316:	f107 031c 	add.w	r3, r7, #28
 801231a:	4a12      	ldr	r2, [pc, #72]	@ (8012364 <ResetMacParameters+0x270>)
 801231c:	4618      	mov	r0, r3
 801231e:	f002 f9f8 	bl	8014712 <LoRaMacClassBInit>
}
 8012322:	bf00      	nop
 8012324:	3748      	adds	r7, #72	@ 0x48
 8012326:	46bd      	mov	sp, r7
 8012328:	bdb0      	pop	{r4, r5, r7, pc}
 801232a:	bf00      	nop
 801232c:	20000ecc 	.word	0x20000ecc
 8012330:	20000998 	.word	0x20000998
 8012334:	200010f0 	.word	0x200010f0
 8012338:	200010f4 	.word	0x200010f4
 801233c:	20001a44 	.word	0x20001a44
 8012340:	20000e00 	.word	0x20000e00
 8012344:	20000db8 	.word	0x20000db8
 8012348:	20000dec 	.word	0x20000dec
 801234c:	20000e29 	.word	0x20000e29
 8012350:	20000fb0 	.word	0x20000fb0
 8012354:	20000f14 	.word	0x20000f14
 8012358:	20000f18 	.word	0x20000f18
 801235c:	20000fb4 	.word	0x20000fb4
 8012360:	20000ffc 	.word	0x20000ffc
 8012364:	20001470 	.word	0x20001470

08012368 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f00a faae 	bl	801c8d4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012378:	4b11      	ldr	r3, [pc, #68]	@ (80123c0 <RxWindowSetup+0x58>)
 801237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801237c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801237e:	4b11      	ldr	r3, [pc, #68]	@ (80123c4 <RxWindowSetup+0x5c>)
 8012380:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012384:	4a10      	ldr	r2, [pc, #64]	@ (80123c8 <RxWindowSetup+0x60>)
 8012386:	6839      	ldr	r1, [r7, #0]
 8012388:	4618      	mov	r0, r3
 801238a:	f004 fa1c 	bl	80167c6 <RegionRxConfig>
 801238e:	4603      	mov	r3, r0
 8012390:	2b00      	cmp	r3, #0
 8012392:	d010      	beq.n	80123b6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012394:	4b0d      	ldr	r3, [pc, #52]	@ (80123cc <RxWindowSetup+0x64>)
 8012396:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 801239a:	4b0c      	ldr	r3, [pc, #48]	@ (80123cc <RxWindowSetup+0x64>)
 801239c:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80123a0:	4b07      	ldr	r3, [pc, #28]	@ (80123c0 <RxWindowSetup+0x58>)
 80123a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123a4:	4a07      	ldr	r2, [pc, #28]	@ (80123c4 <RxWindowSetup+0x5c>)
 80123a6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80123a8:	4610      	mov	r0, r2
 80123aa:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	7cda      	ldrb	r2, [r3, #19]
 80123b0:	4b06      	ldr	r3, [pc, #24]	@ (80123cc <RxWindowSetup+0x64>)
 80123b2:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 80123b6:	bf00      	nop
 80123b8:	3708      	adds	r7, #8
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	08020ce0 	.word	0x08020ce0
 80123c4:	20000ecc 	.word	0x20000ecc
 80123c8:	20000dbc 	.word	0x20000dbc
 80123cc:	20000998 	.word	0x20000998

080123d0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80123d0:	b590      	push	{r4, r7, lr}
 80123d2:	b083      	sub	sp, #12
 80123d4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80123d6:	4b1e      	ldr	r3, [pc, #120]	@ (8012450 <OpenContinuousRxCWindow+0x80>)
 80123d8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80123dc:	4b1c      	ldr	r3, [pc, #112]	@ (8012450 <OpenContinuousRxCWindow+0x80>)
 80123de:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80123e2:	b259      	sxtb	r1, r3
 80123e4:	4b1a      	ldr	r3, [pc, #104]	@ (8012450 <OpenContinuousRxCWindow+0x80>)
 80123e6:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80123ea:	4b19      	ldr	r3, [pc, #100]	@ (8012450 <OpenContinuousRxCWindow+0x80>)
 80123ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123ee:	4c19      	ldr	r4, [pc, #100]	@ (8012454 <OpenContinuousRxCWindow+0x84>)
 80123f0:	9400      	str	r4, [sp, #0]
 80123f2:	f004 f9ce 	bl	8016792 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80123f6:	4b18      	ldr	r3, [pc, #96]	@ (8012458 <OpenContinuousRxCWindow+0x88>)
 80123f8:	2202      	movs	r2, #2
 80123fa:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80123fe:	4b14      	ldr	r3, [pc, #80]	@ (8012450 <OpenContinuousRxCWindow+0x80>)
 8012400:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012404:	4b14      	ldr	r3, [pc, #80]	@ (8012458 <OpenContinuousRxCWindow+0x88>)
 8012406:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801240a:	4b13      	ldr	r3, [pc, #76]	@ (8012458 <OpenContinuousRxCWindow+0x88>)
 801240c:	2201      	movs	r2, #1
 801240e:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012412:	4b0f      	ldr	r3, [pc, #60]	@ (8012450 <OpenContinuousRxCWindow+0x80>)
 8012414:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012418:	4a10      	ldr	r2, [pc, #64]	@ (801245c <OpenContinuousRxCWindow+0x8c>)
 801241a:	490e      	ldr	r1, [pc, #56]	@ (8012454 <OpenContinuousRxCWindow+0x84>)
 801241c:	4618      	mov	r0, r3
 801241e:	f004 f9d2 	bl	80167c6 <RegionRxConfig>
 8012422:	4603      	mov	r3, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	d00f      	beq.n	8012448 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012428:	4b0b      	ldr	r3, [pc, #44]	@ (8012458 <OpenContinuousRxCWindow+0x88>)
 801242a:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 801242e:	4b0a      	ldr	r3, [pc, #40]	@ (8012458 <OpenContinuousRxCWindow+0x88>)
 8012430:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8012434:	4b0a      	ldr	r3, [pc, #40]	@ (8012460 <OpenContinuousRxCWindow+0x90>)
 8012436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012438:	2000      	movs	r0, #0
 801243a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801243c:	4b06      	ldr	r3, [pc, #24]	@ (8012458 <OpenContinuousRxCWindow+0x88>)
 801243e:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8012442:	4b05      	ldr	r3, [pc, #20]	@ (8012458 <OpenContinuousRxCWindow+0x88>)
 8012444:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8012448:	bf00      	nop
 801244a:	3704      	adds	r7, #4
 801244c:	46bd      	mov	sp, r7
 801244e:	bd90      	pop	{r4, r7, pc}
 8012450:	20000ecc 	.word	0x20000ecc
 8012454:	20000d80 	.word	0x20000d80
 8012458:	20000998 	.word	0x20000998
 801245c:	20000dbc 	.word	0x20000dbc
 8012460:	08020ce0 	.word	0x08020ce0

08012464 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b088      	sub	sp, #32
 8012468:	af00      	add	r7, sp, #0
 801246a:	60f8      	str	r0, [r7, #12]
 801246c:	60b9      	str	r1, [r7, #8]
 801246e:	603b      	str	r3, [r7, #0]
 8012470:	4613      	mov	r3, r2
 8012472:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012474:	4b81      	ldr	r3, [pc, #516]	@ (801267c <PrepareFrame+0x218>)
 8012476:	2200      	movs	r2, #0
 8012478:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801247a:	4b80      	ldr	r3, [pc, #512]	@ (801267c <PrepareFrame+0x218>)
 801247c:	2200      	movs	r2, #0
 801247e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 8012482:	2300      	movs	r3, #0
 8012484:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801248a:	2300      	movs	r3, #0
 801248c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d101      	bne.n	8012498 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012494:	2300      	movs	r3, #0
 8012496:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012498:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801249a:	461a      	mov	r2, r3
 801249c:	6839      	ldr	r1, [r7, #0]
 801249e:	4878      	ldr	r0, [pc, #480]	@ (8012680 <PrepareFrame+0x21c>)
 80124a0:	f006 fb2b 	bl	8018afa <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80124a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80124a6:	b2da      	uxtb	r2, r3
 80124a8:	4b74      	ldr	r3, [pc, #464]	@ (801267c <PrepareFrame+0x218>)
 80124aa:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	781a      	ldrb	r2, [r3, #0]
 80124b2:	4b72      	ldr	r3, [pc, #456]	@ (801267c <PrepareFrame+0x218>)
 80124b4:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	2b07      	cmp	r3, #7
 80124c2:	f000 80b9 	beq.w	8012638 <PrepareFrame+0x1d4>
 80124c6:	2b07      	cmp	r3, #7
 80124c8:	f300 80ce 	bgt.w	8012668 <PrepareFrame+0x204>
 80124cc:	2b02      	cmp	r3, #2
 80124ce:	d006      	beq.n	80124de <PrepareFrame+0x7a>
 80124d0:	2b04      	cmp	r3, #4
 80124d2:	f040 80c9 	bne.w	8012668 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80124d6:	4b69      	ldr	r3, [pc, #420]	@ (801267c <PrepareFrame+0x218>)
 80124d8:	2201      	movs	r2, #1
 80124da:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80124de:	4b67      	ldr	r3, [pc, #412]	@ (801267c <PrepareFrame+0x218>)
 80124e0:	2204      	movs	r2, #4
 80124e2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80124e6:	4b65      	ldr	r3, [pc, #404]	@ (801267c <PrepareFrame+0x218>)
 80124e8:	4a66      	ldr	r2, [pc, #408]	@ (8012684 <PrepareFrame+0x220>)
 80124ea:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80124ee:	4b63      	ldr	r3, [pc, #396]	@ (801267c <PrepareFrame+0x218>)
 80124f0:	22ff      	movs	r2, #255	@ 0xff
 80124f2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	781a      	ldrb	r2, [r3, #0]
 80124fa:	4b60      	ldr	r3, [pc, #384]	@ (801267c <PrepareFrame+0x218>)
 80124fc:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012500:	4a5e      	ldr	r2, [pc, #376]	@ (801267c <PrepareFrame+0x218>)
 8012502:	79fb      	ldrb	r3, [r7, #7]
 8012504:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8012508:	4b5f      	ldr	r3, [pc, #380]	@ (8012688 <PrepareFrame+0x224>)
 801250a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801250e:	4a5b      	ldr	r2, [pc, #364]	@ (801267c <PrepareFrame+0x218>)
 8012510:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	781a      	ldrb	r2, [r3, #0]
 8012518:	4b58      	ldr	r3, [pc, #352]	@ (801267c <PrepareFrame+0x218>)
 801251a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801251e:	4b57      	ldr	r3, [pc, #348]	@ (801267c <PrepareFrame+0x218>)
 8012520:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8012524:	4b55      	ldr	r3, [pc, #340]	@ (801267c <PrepareFrame+0x218>)
 8012526:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801252a:	4b54      	ldr	r3, [pc, #336]	@ (801267c <PrepareFrame+0x218>)
 801252c:	4a54      	ldr	r2, [pc, #336]	@ (8012680 <PrepareFrame+0x21c>)
 801252e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012532:	f107 0318 	add.w	r3, r7, #24
 8012536:	4618      	mov	r0, r3
 8012538:	f003 fa3a 	bl	80159b0 <LoRaMacCryptoGetFCntUp>
 801253c:	4603      	mov	r3, r0
 801253e:	2b00      	cmp	r3, #0
 8012540:	d001      	beq.n	8012546 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012542:	2312      	movs	r3, #18
 8012544:	e096      	b.n	8012674 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	b29a      	uxth	r2, r3
 801254a:	4b4c      	ldr	r3, [pc, #304]	@ (801267c <PrepareFrame+0x218>)
 801254c:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8012550:	4b4a      	ldr	r3, [pc, #296]	@ (801267c <PrepareFrame+0x218>)
 8012552:	2200      	movs	r2, #0
 8012554:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8012558:	4b48      	ldr	r3, [pc, #288]	@ (801267c <PrepareFrame+0x218>)
 801255a:	2200      	movs	r2, #0
 801255c:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	4a46      	ldr	r2, [pc, #280]	@ (801267c <PrepareFrame+0x218>)
 8012564:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012568:	f107 0314 	add.w	r3, r7, #20
 801256c:	4618      	mov	r0, r3
 801256e:	f002 fbef 	bl	8014d50 <LoRaMacCommandsGetSizeSerializedCmds>
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	d001      	beq.n	801257c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012578:	2313      	movs	r3, #19
 801257a:	e07b      	b.n	8012674 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d074      	beq.n	801266c <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8012582:	4b41      	ldr	r3, [pc, #260]	@ (8012688 <PrepareFrame+0x224>)
 8012584:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012588:	4618      	mov	r0, r3
 801258a:	f7fe fd13 	bl	8010fb4 <GetMaxAppPayloadWithoutFOptsLength>
 801258e:	4603      	mov	r3, r0
 8012590:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012592:	4b3a      	ldr	r3, [pc, #232]	@ (801267c <PrepareFrame+0x218>)
 8012594:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012598:	2b00      	cmp	r3, #0
 801259a:	d01d      	beq.n	80125d8 <PrepareFrame+0x174>
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	2b0f      	cmp	r3, #15
 80125a0:	d81a      	bhi.n	80125d8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80125a2:	f107 0314 	add.w	r3, r7, #20
 80125a6:	4a39      	ldr	r2, [pc, #228]	@ (801268c <PrepareFrame+0x228>)
 80125a8:	4619      	mov	r1, r3
 80125aa:	200f      	movs	r0, #15
 80125ac:	f002 fbe6 	bl	8014d7c <LoRaMacCommandsSerializeCmds>
 80125b0:	4603      	mov	r3, r0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d001      	beq.n	80125ba <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80125b6:	2313      	movs	r3, #19
 80125b8:	e05c      	b.n	8012674 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	f003 030f 	and.w	r3, r3, #15
 80125c0:	b2d9      	uxtb	r1, r3
 80125c2:	68ba      	ldr	r2, [r7, #8]
 80125c4:	7813      	ldrb	r3, [r2, #0]
 80125c6:	f361 0303 	bfi	r3, r1, #0, #4
 80125ca:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	781a      	ldrb	r2, [r3, #0]
 80125d0:	4b2a      	ldr	r3, [pc, #168]	@ (801267c <PrepareFrame+0x218>)
 80125d2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80125d6:	e049      	b.n	801266c <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80125d8:	4b28      	ldr	r3, [pc, #160]	@ (801267c <PrepareFrame+0x218>)
 80125da:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d010      	beq.n	8012604 <PrepareFrame+0x1a0>
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	2b0f      	cmp	r3, #15
 80125e6:	d90d      	bls.n	8012604 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80125e8:	7ffb      	ldrb	r3, [r7, #31]
 80125ea:	f107 0114 	add.w	r1, r7, #20
 80125ee:	4a28      	ldr	r2, [pc, #160]	@ (8012690 <PrepareFrame+0x22c>)
 80125f0:	4618      	mov	r0, r3
 80125f2:	f002 fbc3 	bl	8014d7c <LoRaMacCommandsSerializeCmds>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d001      	beq.n	8012600 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80125fc:	2313      	movs	r3, #19
 80125fe:	e039      	b.n	8012674 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012600:	230a      	movs	r3, #10
 8012602:	e037      	b.n	8012674 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012604:	7ffb      	ldrb	r3, [r7, #31]
 8012606:	f107 0114 	add.w	r1, r7, #20
 801260a:	4a21      	ldr	r2, [pc, #132]	@ (8012690 <PrepareFrame+0x22c>)
 801260c:	4618      	mov	r0, r3
 801260e:	f002 fbb5 	bl	8014d7c <LoRaMacCommandsSerializeCmds>
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	d001      	beq.n	801261c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012618:	2313      	movs	r3, #19
 801261a:	e02b      	b.n	8012674 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801261c:	4b17      	ldr	r3, [pc, #92]	@ (801267c <PrepareFrame+0x218>)
 801261e:	2200      	movs	r2, #0
 8012620:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8012624:	4b15      	ldr	r3, [pc, #84]	@ (801267c <PrepareFrame+0x218>)
 8012626:	4a1a      	ldr	r2, [pc, #104]	@ (8012690 <PrepareFrame+0x22c>)
 8012628:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	b2da      	uxtb	r2, r3
 8012630:	4b12      	ldr	r3, [pc, #72]	@ (801267c <PrepareFrame+0x218>)
 8012632:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8012636:	e019      	b.n	801266c <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d018      	beq.n	8012670 <PrepareFrame+0x20c>
 801263e:	4b0f      	ldr	r3, [pc, #60]	@ (801267c <PrepareFrame+0x218>)
 8012640:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012644:	2b00      	cmp	r3, #0
 8012646:	d013      	beq.n	8012670 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012648:	4812      	ldr	r0, [pc, #72]	@ (8012694 <PrepareFrame+0x230>)
 801264a:	4b0c      	ldr	r3, [pc, #48]	@ (801267c <PrepareFrame+0x218>)
 801264c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012650:	461a      	mov	r2, r3
 8012652:	6839      	ldr	r1, [r7, #0]
 8012654:	f006 fa51 	bl	8018afa <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012658:	4b08      	ldr	r3, [pc, #32]	@ (801267c <PrepareFrame+0x218>)
 801265a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801265e:	3301      	adds	r3, #1
 8012660:	b29a      	uxth	r2, r3
 8012662:	4b06      	ldr	r3, [pc, #24]	@ (801267c <PrepareFrame+0x218>)
 8012664:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012666:	e003      	b.n	8012670 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012668:	2302      	movs	r3, #2
 801266a:	e003      	b.n	8012674 <PrepareFrame+0x210>
            break;
 801266c:	bf00      	nop
 801266e:	e000      	b.n	8012672 <PrepareFrame+0x20e>
            break;
 8012670:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012672:	2300      	movs	r3, #0
}
 8012674:	4618      	mov	r0, r3
 8012676:	3720      	adds	r7, #32
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	20000998 	.word	0x20000998
 8012680:	20000ad0 	.word	0x20000ad0
 8012684:	2000099a 	.word	0x2000099a
 8012688:	20000ecc 	.word	0x20000ecc
 801268c:	20000ab0 	.word	0x20000ab0
 8012690:	20000e4c 	.word	0x20000e4c
 8012694:	2000099b 	.word	0x2000099b

08012698 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b08a      	sub	sp, #40	@ 0x28
 801269c:	af00      	add	r7, sp, #0
 801269e:	4603      	mov	r3, r0
 80126a0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126a2:	2303      	movs	r3, #3
 80126a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80126a8:	2300      	movs	r3, #0
 80126aa:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80126ac:	79fb      	ldrb	r3, [r7, #7]
 80126ae:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80126b0:	4b4b      	ldr	r3, [pc, #300]	@ (80127e0 <SendFrameOnChannel+0x148>)
 80126b2:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80126b6:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80126b8:	4b49      	ldr	r3, [pc, #292]	@ (80127e0 <SendFrameOnChannel+0x148>)
 80126ba:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80126be:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80126c0:	4b47      	ldr	r3, [pc, #284]	@ (80127e0 <SendFrameOnChannel+0x148>)
 80126c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126c6:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80126c8:	4b45      	ldr	r3, [pc, #276]	@ (80127e0 <SendFrameOnChannel+0x148>)
 80126ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80126ce:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80126d0:	4b44      	ldr	r3, [pc, #272]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 80126d2:	881b      	ldrh	r3, [r3, #0]
 80126d4:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80126d6:	4b42      	ldr	r3, [pc, #264]	@ (80127e0 <SendFrameOnChannel+0x148>)
 80126d8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80126dc:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80126de:	4b40      	ldr	r3, [pc, #256]	@ (80127e0 <SendFrameOnChannel+0x148>)
 80126e0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80126e4:	f107 020f 	add.w	r2, r7, #15
 80126e8:	f107 0110 	add.w	r1, r7, #16
 80126ec:	4b3e      	ldr	r3, [pc, #248]	@ (80127e8 <SendFrameOnChannel+0x150>)
 80126ee:	f004 f87f 	bl	80167f0 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80126f2:	4b3c      	ldr	r3, [pc, #240]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 80126f4:	2201      	movs	r2, #1
 80126f6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80126fa:	4b39      	ldr	r3, [pc, #228]	@ (80127e0 <SendFrameOnChannel+0x148>)
 80126fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012700:	b2da      	uxtb	r2, r3
 8012702:	4b38      	ldr	r3, [pc, #224]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 8012704:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8012708:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801270c:	4b35      	ldr	r3, [pc, #212]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 801270e:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8012712:	79fb      	ldrb	r3, [r7, #7]
 8012714:	4a33      	ldr	r2, [pc, #204]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 8012716:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801271a:	4b32      	ldr	r3, [pc, #200]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 801271c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012720:	4a30      	ldr	r2, [pc, #192]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 8012722:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012726:	4b2f      	ldr	r3, [pc, #188]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 8012728:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 801272c:	4a2d      	ldr	r2, [pc, #180]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 801272e:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012732:	f002 f85a 	bl	80147ea <LoRaMacClassBIsBeaconModeActive>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d00b      	beq.n	8012754 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801273c:	4b29      	ldr	r3, [pc, #164]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 801273e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012742:	4618      	mov	r0, r3
 8012744:	f002 f8bc 	bl	80148c0 <LoRaMacClassBIsUplinkCollision>
 8012748:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801274a:	6a3b      	ldr	r3, [r7, #32]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d001      	beq.n	8012754 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012750:	2310      	movs	r3, #16
 8012752:	e040      	b.n	80127d6 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012754:	4b22      	ldr	r3, [pc, #136]	@ (80127e0 <SendFrameOnChannel+0x148>)
 8012756:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801275a:	2b01      	cmp	r3, #1
 801275c:	d101      	bne.n	8012762 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801275e:	f002 f8b9 	bl	80148d4 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012762:	f002 f853 	bl	801480c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8012766:	4b1e      	ldr	r3, [pc, #120]	@ (80127e0 <SendFrameOnChannel+0x148>)
 8012768:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801276c:	b2db      	uxtb	r3, r3
 801276e:	4a1d      	ldr	r2, [pc, #116]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 8012770:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8012774:	4611      	mov	r1, r2
 8012776:	4618      	mov	r0, r3
 8012778:	f7ff fc2c 	bl	8011fd4 <SecureFrame>
 801277c:	4603      	mov	r3, r0
 801277e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8012782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012786:	2b00      	cmp	r3, #0
 8012788:	d002      	beq.n	8012790 <SendFrameOnChannel+0xf8>
    {
        return status;
 801278a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801278e:	e022      	b.n	80127d6 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012790:	4b14      	ldr	r3, [pc, #80]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 8012792:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012796:	f043 0302 	orr.w	r3, r3, #2
 801279a:	4a12      	ldr	r2, [pc, #72]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 801279c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 80127a0:	4b10      	ldr	r3, [pc, #64]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 80127a2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80127a6:	3301      	adds	r3, #1
 80127a8:	b2da      	uxtb	r2, r3
 80127aa:	4b0e      	ldr	r3, [pc, #56]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 80127ac:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80127b0:	4b0c      	ldr	r3, [pc, #48]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 80127b2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80127b6:	4b0b      	ldr	r3, [pc, #44]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 80127b8:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80127bc:	4b09      	ldr	r3, [pc, #36]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 80127be:	2200      	movs	r2, #0
 80127c0:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80127c4:	4b09      	ldr	r3, [pc, #36]	@ (80127ec <SendFrameOnChannel+0x154>)
 80127c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127c8:	4a06      	ldr	r2, [pc, #24]	@ (80127e4 <SendFrameOnChannel+0x14c>)
 80127ca:	8812      	ldrh	r2, [r2, #0]
 80127cc:	b2d2      	uxtb	r2, r2
 80127ce:	4611      	mov	r1, r2
 80127d0:	4807      	ldr	r0, [pc, #28]	@ (80127f0 <SendFrameOnChannel+0x158>)
 80127d2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80127d4:	2300      	movs	r3, #0
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3728      	adds	r7, #40	@ 0x28
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	20000ecc 	.word	0x20000ecc
 80127e4:	20000998 	.word	0x20000998
 80127e8:	20000db4 	.word	0x20000db4
 80127ec:	08020ce0 	.word	0x08020ce0
 80127f0:	2000099a 	.word	0x2000099a

080127f4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	4603      	mov	r3, r0
 80127fc:	6039      	str	r1, [r7, #0]
 80127fe:	80fb      	strh	r3, [r7, #6]
 8012800:	4613      	mov	r3, r2
 8012802:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012804:	4b09      	ldr	r3, [pc, #36]	@ (801282c <SetTxContinuousWave+0x38>)
 8012806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012808:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801280c:	88fa      	ldrh	r2, [r7, #6]
 801280e:	6838      	ldr	r0, [r7, #0]
 8012810:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012812:	4b07      	ldr	r3, [pc, #28]	@ (8012830 <SetTxContinuousWave+0x3c>)
 8012814:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012818:	f043 0302 	orr.w	r3, r3, #2
 801281c:	4a04      	ldr	r2, [pc, #16]	@ (8012830 <SetTxContinuousWave+0x3c>)
 801281e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012822:	2300      	movs	r3, #0
}
 8012824:	4618      	mov	r0, r3
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	08020ce0 	.word	0x08020ce0
 8012830:	20000998 	.word	0x20000998

08012834 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 801283a:	2300      	movs	r3, #0
 801283c:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801283e:	4b49      	ldr	r3, [pc, #292]	@ (8012964 <RestoreNvmData+0x130>)
 8012840:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012844:	2b01      	cmp	r3, #1
 8012846:	d001      	beq.n	801284c <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8012848:	2301      	movs	r3, #1
 801284a:	e087      	b.n	801295c <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 801284c:	2124      	movs	r1, #36	@ 0x24
 801284e:	4846      	ldr	r0, [pc, #280]	@ (8012968 <RestoreNvmData+0x134>)
 8012850:	f006 f9a8 	bl	8018ba4 <Crc32>
 8012854:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8012856:	4b44      	ldr	r3, [pc, #272]	@ (8012968 <RestoreNvmData+0x134>)
 8012858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801285a:	687a      	ldr	r2, [r7, #4]
 801285c:	429a      	cmp	r2, r3
 801285e:	d001      	beq.n	8012864 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012860:	2317      	movs	r3, #23
 8012862:	e07b      	b.n	801295c <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012864:	211c      	movs	r1, #28
 8012866:	4841      	ldr	r0, [pc, #260]	@ (801296c <RestoreNvmData+0x138>)
 8012868:	f006 f99c 	bl	8018ba4 <Crc32>
 801286c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801286e:	4b3e      	ldr	r3, [pc, #248]	@ (8012968 <RestoreNvmData+0x134>)
 8012870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	429a      	cmp	r2, r3
 8012876:	d001      	beq.n	801287c <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012878:	2317      	movs	r3, #23
 801287a:	e06f      	b.n	801295c <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 801287c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012880:	483b      	ldr	r0, [pc, #236]	@ (8012970 <RestoreNvmData+0x13c>)
 8012882:	f006 f98f 	bl	8018ba4 <Crc32>
 8012886:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8012888:	4b37      	ldr	r3, [pc, #220]	@ (8012968 <RestoreNvmData+0x134>)
 801288a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	429a      	cmp	r2, r3
 8012892:	d001      	beq.n	8012898 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012894:	2317      	movs	r3, #23
 8012896:	e061      	b.n	801295c <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8012898:	21d4      	movs	r1, #212	@ 0xd4
 801289a:	4836      	ldr	r0, [pc, #216]	@ (8012974 <RestoreNvmData+0x140>)
 801289c:	f006 f982 	bl	8018ba4 <Crc32>
 80128a0:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80128a2:	4b31      	ldr	r3, [pc, #196]	@ (8012968 <RestoreNvmData+0x134>)
 80128a4:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80128a8:	687a      	ldr	r2, [r7, #4]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d001      	beq.n	80128b2 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80128ae:	2317      	movs	r3, #23
 80128b0:	e054      	b.n	801295c <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80128b2:	2100      	movs	r1, #0
 80128b4:	4830      	ldr	r0, [pc, #192]	@ (8012978 <RestoreNvmData+0x144>)
 80128b6:	f006 f975 	bl	8018ba4 <Crc32>
 80128ba:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80128bc:	4b2a      	ldr	r3, [pc, #168]	@ (8012968 <RestoreNvmData+0x134>)
 80128be:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d001      	beq.n	80128cc <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80128c8:	2317      	movs	r3, #23
 80128ca:	e047      	b.n	801295c <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 80128cc:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80128d0:	482a      	ldr	r0, [pc, #168]	@ (801297c <RestoreNvmData+0x148>)
 80128d2:	f006 f967 	bl	8018ba4 <Crc32>
 80128d6:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 80128d8:	4b23      	ldr	r3, [pc, #140]	@ (8012968 <RestoreNvmData+0x134>)
 80128da:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 80128de:	687a      	ldr	r2, [r7, #4]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d001      	beq.n	80128e8 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80128e4:	2317      	movs	r3, #23
 80128e6:	e039      	b.n	801295c <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80128e8:	2114      	movs	r1, #20
 80128ea:	4825      	ldr	r0, [pc, #148]	@ (8012980 <RestoreNvmData+0x14c>)
 80128ec:	f006 f95a 	bl	8018ba4 <Crc32>
 80128f0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80128f2:	4b1d      	ldr	r3, [pc, #116]	@ (8012968 <RestoreNvmData+0x134>)
 80128f4:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 80128f8:	687a      	ldr	r2, [r7, #4]
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d001      	beq.n	8012902 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80128fe:	2317      	movs	r3, #23
 8012900:	e02c      	b.n	801295c <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8012902:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012906:	4918      	ldr	r1, [pc, #96]	@ (8012968 <RestoreNvmData+0x134>)
 8012908:	481e      	ldr	r0, [pc, #120]	@ (8012984 <RestoreNvmData+0x150>)
 801290a:	f006 f8f6 	bl	8018afa <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 801290e:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012912:	2100      	movs	r1, #0
 8012914:	4814      	ldr	r0, [pc, #80]	@ (8012968 <RestoreNvmData+0x134>)
 8012916:	f006 f92b 	bl	8018b70 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801291a:	4b12      	ldr	r3, [pc, #72]	@ (8012964 <RestoreNvmData+0x130>)
 801291c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8012920:	4b10      	ldr	r3, [pc, #64]	@ (8012964 <RestoreNvmData+0x130>)
 8012922:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012926:	4b17      	ldr	r3, [pc, #92]	@ (8012984 <RestoreNvmData+0x150>)
 8012928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801292a:	4a0e      	ldr	r2, [pc, #56]	@ (8012964 <RestoreNvmData+0x130>)
 801292c:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012930:	4b14      	ldr	r3, [pc, #80]	@ (8012984 <RestoreNvmData+0x150>)
 8012932:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8012936:	4b0b      	ldr	r3, [pc, #44]	@ (8012964 <RestoreNvmData+0x130>)
 8012938:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801293c:	4b09      	ldr	r3, [pc, #36]	@ (8012964 <RestoreNvmData+0x130>)
 801293e:	2201      	movs	r2, #1
 8012940:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012944:	4b07      	ldr	r3, [pc, #28]	@ (8012964 <RestoreNvmData+0x130>)
 8012946:	2202      	movs	r2, #2
 8012948:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801294c:	4b0e      	ldr	r3, [pc, #56]	@ (8012988 <RestoreNvmData+0x154>)
 801294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012950:	4a0c      	ldr	r2, [pc, #48]	@ (8012984 <RestoreNvmData+0x150>)
 8012952:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8012956:	4610      	mov	r0, r2
 8012958:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 801295a:	2300      	movs	r3, #0
}
 801295c:	4618      	mov	r0, r3
 801295e:	3708      	adds	r7, #8
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	20000998 	.word	0x20000998
 8012968:	20001488 	.word	0x20001488
 801296c:	200014b0 	.word	0x200014b0
 8012970:	200014d0 	.word	0x200014d0
 8012974:	200015d4 	.word	0x200015d4
 8012978:	200016ac 	.word	0x200016ac
 801297c:	200016b0 	.word	0x200016b0
 8012980:	20001a2c 	.word	0x20001a2c
 8012984:	20000ecc 	.word	0x20000ecc
 8012988:	08020ce0 	.word	0x08020ce0

0801298c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801298c:	b480      	push	{r7}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d002      	beq.n	80129a2 <DetermineFrameType+0x16>
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d101      	bne.n	80129a6 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80129a2:	2303      	movs	r3, #3
 80129a4:	e03b      	b.n	8012a1e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	7b1b      	ldrb	r3, [r3, #12]
 80129aa:	f003 030f 	and.w	r3, r3, #15
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d008      	beq.n	80129c6 <DetermineFrameType+0x3a>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d003      	beq.n	80129c6 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	2200      	movs	r2, #0
 80129c2:	701a      	strb	r2, [r3, #0]
 80129c4:	e02a      	b.n	8012a1c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d103      	bne.n	80129d8 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	2201      	movs	r2, #1
 80129d4:	701a      	strb	r2, [r3, #0]
 80129d6:	e021      	b.n	8012a1c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	7b1b      	ldrb	r3, [r3, #12]
 80129dc:	f003 030f 	and.w	r3, r3, #15
 80129e0:	b2db      	uxtb	r3, r3
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d108      	bne.n	80129f8 <DetermineFrameType+0x6c>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d103      	bne.n	80129f8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	2202      	movs	r2, #2
 80129f4:	701a      	strb	r2, [r3, #0]
 80129f6:	e011      	b.n	8012a1c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	7b1b      	ldrb	r3, [r3, #12]
 80129fc:	f003 030f 	and.w	r3, r3, #15
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d108      	bne.n	8012a18 <DetermineFrameType+0x8c>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d003      	beq.n	8012a18 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	2203      	movs	r2, #3
 8012a14:	701a      	strb	r2, [r3, #0]
 8012a16:	e001      	b.n	8012a1c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012a18:	2318      	movs	r3, #24
 8012a1a:	e000      	b.n	8012a1e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012a1c:	2300      	movs	r3, #0
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	370c      	adds	r7, #12
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bc80      	pop	{r7}
 8012a26:	4770      	bx	lr

08012a28 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	4603      	mov	r3, r0
 8012a30:	460a      	mov	r2, r1
 8012a32:	71fb      	strb	r3, [r7, #7]
 8012a34:	4613      	mov	r3, r2
 8012a36:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8012a38:	79fa      	ldrb	r2, [r7, #7]
 8012a3a:	79bb      	ldrb	r3, [r7, #6]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d301      	bcc.n	8012a44 <CheckRetrans+0x1c>
    {
        return true;
 8012a40:	2301      	movs	r3, #1
 8012a42:	e000      	b.n	8012a46 <CheckRetrans+0x1e>
    }
    return false;
 8012a44:	2300      	movs	r3, #0
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	370c      	adds	r7, #12
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bc80      	pop	{r7}
 8012a4e:	4770      	bx	lr

08012a50 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012a54:	4b12      	ldr	r3, [pc, #72]	@ (8012aa0 <CheckRetransUnconfirmedUplink+0x50>)
 8012a56:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012a5a:	4a12      	ldr	r2, [pc, #72]	@ (8012aa4 <CheckRetransUnconfirmedUplink+0x54>)
 8012a5c:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012a60:	4611      	mov	r1, r2
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7ff ffe0 	bl	8012a28 <CheckRetrans>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d001      	beq.n	8012a72 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e014      	b.n	8012a9c <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012a72:	4b0b      	ldr	r3, [pc, #44]	@ (8012aa0 <CheckRetransUnconfirmedUplink+0x50>)
 8012a74:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012a78:	f003 0302 	and.w	r3, r3, #2
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d00b      	beq.n	8012a9a <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012a82:	4b07      	ldr	r3, [pc, #28]	@ (8012aa0 <CheckRetransUnconfirmedUplink+0x50>)
 8012a84:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d004      	beq.n	8012a96 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012a8c:	4b04      	ldr	r3, [pc, #16]	@ (8012aa0 <CheckRetransUnconfirmedUplink+0x50>)
 8012a8e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d101      	bne.n	8012a9a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8012a96:	2301      	movs	r3, #1
 8012a98:	e000      	b.n	8012a9c <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8012a9a:	2300      	movs	r3, #0
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	20000998 	.word	0x20000998
 8012aa4:	20000ecc 	.word	0x20000ecc

08012aa8 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012aac:	4b10      	ldr	r3, [pc, #64]	@ (8012af0 <CheckRetransConfirmedUplink+0x48>)
 8012aae:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012ab2:	4a10      	ldr	r2, [pc, #64]	@ (8012af4 <CheckRetransConfirmedUplink+0x4c>)
 8012ab4:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012ab8:	4611      	mov	r1, r2
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7ff ffb4 	bl	8012a28 <CheckRetrans>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d001      	beq.n	8012aca <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	e00f      	b.n	8012aea <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012aca:	4b09      	ldr	r3, [pc, #36]	@ (8012af0 <CheckRetransConfirmedUplink+0x48>)
 8012acc:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012ad0:	f003 0302 	and.w	r3, r3, #2
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d006      	beq.n	8012ae8 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012ada:	4b05      	ldr	r3, [pc, #20]	@ (8012af0 <CheckRetransConfirmedUplink+0x48>)
 8012adc:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d001      	beq.n	8012ae8 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	e000      	b.n	8012aea <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8012ae8:	2300      	movs	r3, #0
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	bd80      	pop	{r7, pc}
 8012aee:	bf00      	nop
 8012af0:	20000998 	.word	0x20000998
 8012af4:	20000ecc 	.word	0x20000ecc

08012af8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b06:	d002      	beq.n	8012b0e <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8012b0e:	687b      	ldr	r3, [r7, #4]
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	370c      	adds	r7, #12
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bc80      	pop	{r7}
 8012b18:	4770      	bx	lr
	...

08012b1c <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012b20:	4b1a      	ldr	r3, [pc, #104]	@ (8012b8c <StopRetransmission+0x70>)
 8012b22:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012b26:	f003 0302 	and.w	r3, r3, #2
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d009      	beq.n	8012b44 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012b30:	4b16      	ldr	r3, [pc, #88]	@ (8012b8c <StopRetransmission+0x70>)
 8012b32:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d011      	beq.n	8012b5e <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012b3a:	4b14      	ldr	r3, [pc, #80]	@ (8012b8c <StopRetransmission+0x70>)
 8012b3c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d00c      	beq.n	8012b5e <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012b44:	4b12      	ldr	r3, [pc, #72]	@ (8012b90 <StopRetransmission+0x74>)
 8012b46:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d007      	beq.n	8012b5e <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8012b4e:	4b10      	ldr	r3, [pc, #64]	@ (8012b90 <StopRetransmission+0x74>)
 8012b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ff ffd0 	bl	8012af8 <IncreaseAdrAckCounter>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8012b90 <StopRetransmission+0x74>)
 8012b5c:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8012b8c <StopRetransmission+0x70>)
 8012b60:	2200      	movs	r2, #0
 8012b62:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8012b66:	4b09      	ldr	r3, [pc, #36]	@ (8012b8c <StopRetransmission+0x70>)
 8012b68:	2200      	movs	r2, #0
 8012b6a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012b6e:	4b07      	ldr	r3, [pc, #28]	@ (8012b8c <StopRetransmission+0x70>)
 8012b70:	2200      	movs	r2, #0
 8012b72:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012b76:	4b05      	ldr	r3, [pc, #20]	@ (8012b8c <StopRetransmission+0x70>)
 8012b78:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012b7c:	f023 0302 	bic.w	r3, r3, #2
 8012b80:	4a02      	ldr	r2, [pc, #8]	@ (8012b8c <StopRetransmission+0x70>)
 8012b82:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8012b86:	2301      	movs	r3, #1
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	20000998 	.word	0x20000998
 8012b90:	20000ecc 	.word	0x20000ecc

08012b94 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012b98:	4b08      	ldr	r3, [pc, #32]	@ (8012bbc <OnMacProcessNotify+0x28>)
 8012b9a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d00a      	beq.n	8012bb8 <OnMacProcessNotify+0x24>
 8012ba2:	4b06      	ldr	r3, [pc, #24]	@ (8012bbc <OnMacProcessNotify+0x28>)
 8012ba4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012ba8:	695b      	ldr	r3, [r3, #20]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d004      	beq.n	8012bb8 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8012bae:	4b03      	ldr	r3, [pc, #12]	@ (8012bbc <OnMacProcessNotify+0x28>)
 8012bb0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012bb4:	695b      	ldr	r3, [r3, #20]
 8012bb6:	4798      	blx	r3
    }
}
 8012bb8:	bf00      	nop
 8012bba:	bd80      	pop	{r7, pc}
 8012bbc:	20000998 	.word	0x20000998

08012bc0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012bca:	4b0b      	ldr	r3, [pc, #44]	@ (8012bf8 <CallNvmDataChangeCallback+0x38>)
 8012bcc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d00c      	beq.n	8012bee <CallNvmDataChangeCallback+0x2e>
 8012bd4:	4b08      	ldr	r3, [pc, #32]	@ (8012bf8 <CallNvmDataChangeCallback+0x38>)
 8012bd6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012bda:	691b      	ldr	r3, [r3, #16]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d006      	beq.n	8012bee <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012be0:	4b05      	ldr	r3, [pc, #20]	@ (8012bf8 <CallNvmDataChangeCallback+0x38>)
 8012be2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012be6:	691b      	ldr	r3, [r3, #16]
 8012be8:	88fa      	ldrh	r2, [r7, #6]
 8012bea:	4610      	mov	r0, r2
 8012bec:	4798      	blx	r3
    }
}
 8012bee:	bf00      	nop
 8012bf0:	3708      	adds	r7, #8
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	20000998 	.word	0x20000998

08012bfc <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012c00:	4b0b      	ldr	r3, [pc, #44]	@ (8012c30 <IsRequestPending+0x34>)
 8012c02:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012c06:	f003 0304 	and.w	r3, r3, #4
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d107      	bne.n	8012c20 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012c10:	4b07      	ldr	r3, [pc, #28]	@ (8012c30 <IsRequestPending+0x34>)
 8012c12:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012c16:	f003 0301 	and.w	r3, r3, #1
 8012c1a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d001      	beq.n	8012c24 <IsRequestPending+0x28>
    {
        return 1;
 8012c20:	2301      	movs	r3, #1
 8012c22:	e000      	b.n	8012c26 <IsRequestPending+0x2a>
    }
    return 0;
 8012c24:	2300      	movs	r3, #0
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bc80      	pop	{r7}
 8012c2c:	4770      	bx	lr
 8012c2e:	bf00      	nop
 8012c30:	20000998 	.word	0x20000998

08012c34 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012c34:	b590      	push	{r4, r7, lr}
 8012c36:	b091      	sub	sp, #68	@ 0x44
 8012c38:	af02      	add	r7, sp, #8
 8012c3a:	6178      	str	r0, [r7, #20]
 8012c3c:	6139      	str	r1, [r7, #16]
 8012c3e:	4613      	mov	r3, r2
 8012c40:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d002      	beq.n	8012c4e <LoRaMacInitialization+0x1a>
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d101      	bne.n	8012c52 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c4e:	2303      	movs	r3, #3
 8012c50:	e27a      	b.n	8013148 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00b      	beq.n	8012c72 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d007      	beq.n	8012c72 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012c62:	697b      	ldr	r3, [r7, #20]
 8012c64:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d003      	beq.n	8012c72 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d101      	bne.n	8012c76 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c72:	2303      	movs	r3, #3
 8012c74:	e268      	b.n	8013148 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012c76:	7bfb      	ldrb	r3, [r7, #15]
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f003 fd03 	bl	8016684 <RegionIsActive>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	f083 0301 	eor.w	r3, r3, #1
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d001      	beq.n	8012c8e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012c8a:	2309      	movs	r3, #9
 8012c8c:	e25c      	b.n	8013148 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012c8e:	6978      	ldr	r0, [r7, #20]
 8012c90:	f002 f996 	bl	8014fc0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012c94:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012c98:	2100      	movs	r1, #0
 8012c9a:	48c7      	ldr	r0, [pc, #796]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012c9c:	f005 ff68 	bl	8018b70 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012ca0:	f240 5234 	movw	r2, #1332	@ 0x534
 8012ca4:	2100      	movs	r1, #0
 8012ca6:	48c5      	ldr	r0, [pc, #788]	@ (8012fbc <LoRaMacInitialization+0x388>)
 8012ca8:	f005 ff62 	bl	8018b70 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012cac:	4ac2      	ldr	r2, [pc, #776]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012cae:	7bfb      	ldrb	r3, [r7, #15]
 8012cb0:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012cb4:	4bc0      	ldr	r3, [pc, #768]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8012cbc:	4bbe      	ldr	r3, [pc, #760]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012cc4:	4bbc      	ldr	r3, [pc, #752]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012cc6:	4abe      	ldr	r2, [pc, #760]	@ (8012fc0 <LoRaMacInitialization+0x38c>)
 8012cc8:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012cd2:	4bbc      	ldr	r3, [pc, #752]	@ (8012fc4 <LoRaMacInitialization+0x390>)
 8012cd4:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012cd6:	4bbc      	ldr	r3, [pc, #752]	@ (8012fc8 <LoRaMacInitialization+0x394>)
 8012cd8:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8012cda:	4bbc      	ldr	r3, [pc, #752]	@ (8012fcc <LoRaMacInitialization+0x398>)
 8012cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012cde:	4bb6      	ldr	r3, [pc, #728]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012ce0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ce4:	f107 021c 	add.w	r2, r7, #28
 8012ce8:	4611      	mov	r1, r2
 8012cea:	4618      	mov	r0, r3
 8012cec:	f003 fd03 	bl	80166f6 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012cf0:	230f      	movs	r3, #15
 8012cf2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cf6:	4bb0      	ldr	r3, [pc, #704]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012cf8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012cfc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d00:	4611      	mov	r1, r2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f003 fcce 	bl	80166a4 <RegionGetPhyParam>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	bf14      	ite	ne
 8012d12:	2301      	movne	r3, #1
 8012d14:	2300      	moveq	r3, #0
 8012d16:	b2da      	uxtb	r2, r3
 8012d18:	4ba7      	ldr	r3, [pc, #668]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012d1a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012d1e:	230a      	movs	r3, #10
 8012d20:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d24:	4ba4      	ldr	r3, [pc, #656]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012d26:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d2a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d2e:	4611      	mov	r1, r2
 8012d30:	4618      	mov	r0, r3
 8012d32:	f003 fcb7 	bl	80166a4 <RegionGetPhyParam>
 8012d36:	4603      	mov	r3, r0
 8012d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d3c:	b25a      	sxtb	r2, r3
 8012d3e:	4b9e      	ldr	r3, [pc, #632]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012d40:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012d44:	2306      	movs	r3, #6
 8012d46:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d4a:	4b9b      	ldr	r3, [pc, #620]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012d4c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d50:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d54:	4611      	mov	r1, r2
 8012d56:	4618      	mov	r0, r3
 8012d58:	f003 fca4 	bl	80166a4 <RegionGetPhyParam>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d62:	b25a      	sxtb	r2, r3
 8012d64:	4b94      	ldr	r3, [pc, #592]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012d66:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012d6a:	2310      	movs	r3, #16
 8012d6c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d70:	4b91      	ldr	r3, [pc, #580]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012d72:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d76:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d7a:	4611      	mov	r1, r2
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f003 fc91 	bl	80166a4 <RegionGetPhyParam>
 8012d82:	4603      	mov	r3, r0
 8012d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d88:	4a8b      	ldr	r2, [pc, #556]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012d8a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012d8e:	2311      	movs	r3, #17
 8012d90:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d94:	4b88      	ldr	r3, [pc, #544]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012d96:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d9a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d9e:	4611      	mov	r1, r2
 8012da0:	4618      	mov	r0, r3
 8012da2:	f003 fc7f 	bl	80166a4 <RegionGetPhyParam>
 8012da6:	4603      	mov	r3, r0
 8012da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dac:	4a82      	ldr	r2, [pc, #520]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012dae:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012db2:	2312      	movs	r3, #18
 8012db4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012db8:	4b7f      	ldr	r3, [pc, #508]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012dba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012dbe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012dc2:	4611      	mov	r1, r2
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f003 fc6d 	bl	80166a4 <RegionGetPhyParam>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dd0:	4a79      	ldr	r2, [pc, #484]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012dd2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012dd6:	2313      	movs	r3, #19
 8012dd8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ddc:	4b76      	ldr	r3, [pc, #472]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012dde:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012de2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012de6:	4611      	mov	r1, r2
 8012de8:	4618      	mov	r0, r3
 8012dea:	f003 fc5b 	bl	80166a4 <RegionGetPhyParam>
 8012dee:	4603      	mov	r3, r0
 8012df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012df4:	4a70      	ldr	r2, [pc, #448]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012df6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012dfa:	2314      	movs	r3, #20
 8012dfc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e00:	4b6d      	ldr	r3, [pc, #436]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e02:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e06:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e0a:	4611      	mov	r1, r2
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f003 fc49 	bl	80166a4 <RegionGetPhyParam>
 8012e12:	4603      	mov	r3, r0
 8012e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e18:	4a67      	ldr	r2, [pc, #412]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e1a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012e1e:	2316      	movs	r3, #22
 8012e20:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e24:	4b64      	ldr	r3, [pc, #400]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e26:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e2a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e2e:	4611      	mov	r1, r2
 8012e30:	4618      	mov	r0, r3
 8012e32:	f003 fc37 	bl	80166a4 <RegionGetPhyParam>
 8012e36:	4603      	mov	r3, r0
 8012e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e3c:	b2da      	uxtb	r2, r3
 8012e3e:	4b5e      	ldr	r3, [pc, #376]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e40:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012e44:	2317      	movs	r3, #23
 8012e46:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e4c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e50:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e54:	4611      	mov	r1, r2
 8012e56:	4618      	mov	r0, r3
 8012e58:	f003 fc24 	bl	80166a4 <RegionGetPhyParam>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e62:	4a55      	ldr	r2, [pc, #340]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e64:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e6a:	4a53      	ldr	r2, [pc, #332]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e6c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012e70:	2318      	movs	r3, #24
 8012e72:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e76:	4b50      	ldr	r3, [pc, #320]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e78:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e7c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e80:	4611      	mov	r1, r2
 8012e82:	4618      	mov	r0, r3
 8012e84:	f003 fc0e 	bl	80166a4 <RegionGetPhyParam>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e8e:	b2da      	uxtb	r2, r3
 8012e90:	4b49      	ldr	r3, [pc, #292]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e92:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e98:	b2da      	uxtb	r2, r3
 8012e9a:	4b47      	ldr	r3, [pc, #284]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012e9c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012ea0:	231d      	movs	r3, #29
 8012ea2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ea6:	4b44      	ldr	r3, [pc, #272]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012ea8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012eac:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f003 fbf6 	bl	80166a4 <RegionGetPhyParam>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ebe:	b2da      	uxtb	r2, r3
 8012ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012ec2:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012ec6:	231e      	movs	r3, #30
 8012ec8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012ece:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ed2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012ed6:	4611      	mov	r1, r2
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f003 fbe3 	bl	80166a4 <RegionGetPhyParam>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee4:	b2da      	uxtb	r2, r3
 8012ee6:	4b34      	ldr	r3, [pc, #208]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012ee8:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012eec:	231f      	movs	r3, #31
 8012eee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ef2:	4b31      	ldr	r3, [pc, #196]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012ef4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ef8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012efc:	4611      	mov	r1, r2
 8012efe:	4618      	mov	r0, r3
 8012f00:	f003 fbd0 	bl	80166a4 <RegionGetPhyParam>
 8012f04:	4603      	mov	r3, r0
 8012f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f0c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012f10:	2320      	movs	r3, #32
 8012f12:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f16:	4b28      	ldr	r3, [pc, #160]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f18:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012f1c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012f20:	4611      	mov	r1, r2
 8012f22:	4618      	mov	r0, r3
 8012f24:	f003 fbbe 	bl	80166a4 <RegionGetPhyParam>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f2e:	4a22      	ldr	r2, [pc, #136]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f30:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012f34:	230b      	movs	r3, #11
 8012f36:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f3c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012f40:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012f44:	4611      	mov	r1, r2
 8012f46:	4618      	mov	r0, r3
 8012f48:	f003 fbac 	bl	80166a4 <RegionGetPhyParam>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8012f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f52:	b29a      	uxth	r2, r3
 8012f54:	4b18      	ldr	r3, [pc, #96]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f56:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012f5a:	230c      	movs	r3, #12
 8012f5c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f60:	4b15      	ldr	r3, [pc, #84]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f62:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012f66:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012f6a:	4611      	mov	r1, r2
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f003 fb99 	bl	80166a4 <RegionGetPhyParam>
 8012f72:	4603      	mov	r3, r0
 8012f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8012f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f78:	b29a      	uxth	r2, r3
 8012f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f7c:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012f80:	4b0d      	ldr	r3, [pc, #52]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f82:	2201      	movs	r2, #1
 8012f84:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012f88:	4b0b      	ldr	r3, [pc, #44]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f8a:	220a      	movs	r2, #10
 8012f8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012f90:	4b09      	ldr	r3, [pc, #36]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f92:	2206      	movs	r2, #6
 8012f94:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012f98:	4b07      	ldr	r3, [pc, #28]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012f9e:	4a06      	ldr	r2, [pc, #24]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012fa2:	4b05      	ldr	r3, [pc, #20]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012fa4:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8012fa8:	4b03      	ldr	r3, [pc, #12]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012fae:	4b02      	ldr	r3, [pc, #8]	@ (8012fb8 <LoRaMacInitialization+0x384>)
 8012fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012fb4:	e00c      	b.n	8012fd0 <LoRaMacInitialization+0x39c>
 8012fb6:	bf00      	nop
 8012fb8:	20000ecc 	.word	0x20000ecc
 8012fbc:	20000998 	.word	0x20000998
 8012fc0:	01000400 	.word	0x01000400
 8012fc4:	200010f0 	.word	0x200010f0
 8012fc8:	200010f4 	.word	0x200010f4
 8012fcc:	20001a44 	.word	0x20001a44
 8012fd0:	4a5f      	ldr	r2, [pc, #380]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012fd2:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8012fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012fd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012fda:	4a5d      	ldr	r2, [pc, #372]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012fdc:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012fde:	4b5c      	ldr	r3, [pc, #368]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012fe0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012fe6:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012fe8:	4b59      	ldr	r3, [pc, #356]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012fea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012fee:	4a58      	ldr	r2, [pc, #352]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012ff0:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012ff2:	4b57      	ldr	r3, [pc, #348]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012ff4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012ff8:	4a55      	ldr	r2, [pc, #340]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012ffa:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012ffc:	4b54      	ldr	r3, [pc, #336]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8012ffe:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8013002:	4b53      	ldr	r3, [pc, #332]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8013004:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8013008:	4b51      	ldr	r3, [pc, #324]	@ (8013150 <LoRaMacInitialization+0x51c>)
 801300a:	2201      	movs	r2, #1
 801300c:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8013010:	4a50      	ldr	r2, [pc, #320]	@ (8013154 <LoRaMacInitialization+0x520>)
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8013018:	2000      	movs	r0, #0
 801301a:	f7ff f86b 	bl	80120f4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801301e:	4b4c      	ldr	r3, [pc, #304]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8013020:	2201      	movs	r2, #1
 8013022:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8013026:	4a4b      	ldr	r2, [pc, #300]	@ (8013154 <LoRaMacInitialization+0x520>)
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 801302e:	4b49      	ldr	r3, [pc, #292]	@ (8013154 <LoRaMacInitialization+0x520>)
 8013030:	2200      	movs	r2, #0
 8013032:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8013036:	4b47      	ldr	r3, [pc, #284]	@ (8013154 <LoRaMacInitialization+0x520>)
 8013038:	2201      	movs	r2, #1
 801303a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801303e:	4b44      	ldr	r3, [pc, #272]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8013040:	2200      	movs	r2, #0
 8013042:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013044:	4b42      	ldr	r3, [pc, #264]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8013046:	2200      	movs	r2, #0
 8013048:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801304a:	2300      	movs	r3, #0
 801304c:	9300      	str	r3, [sp, #0]
 801304e:	4b42      	ldr	r3, [pc, #264]	@ (8013158 <LoRaMacInitialization+0x524>)
 8013050:	2200      	movs	r2, #0
 8013052:	f04f 31ff 	mov.w	r1, #4294967295
 8013056:	4841      	ldr	r0, [pc, #260]	@ (801315c <LoRaMacInitialization+0x528>)
 8013058:	f009 fb98 	bl	801c78c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801305c:	2300      	movs	r3, #0
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	4b3f      	ldr	r3, [pc, #252]	@ (8013160 <LoRaMacInitialization+0x52c>)
 8013062:	2200      	movs	r2, #0
 8013064:	f04f 31ff 	mov.w	r1, #4294967295
 8013068:	483e      	ldr	r0, [pc, #248]	@ (8013164 <LoRaMacInitialization+0x530>)
 801306a:	f009 fb8f 	bl	801c78c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801306e:	2300      	movs	r3, #0
 8013070:	9300      	str	r3, [sp, #0]
 8013072:	4b3d      	ldr	r3, [pc, #244]	@ (8013168 <LoRaMacInitialization+0x534>)
 8013074:	2200      	movs	r2, #0
 8013076:	f04f 31ff 	mov.w	r1, #4294967295
 801307a:	483c      	ldr	r0, [pc, #240]	@ (801316c <LoRaMacInitialization+0x538>)
 801307c:	f009 fb86 	bl	801c78c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8013080:	2300      	movs	r3, #0
 8013082:	9300      	str	r3, [sp, #0]
 8013084:	4b3a      	ldr	r3, [pc, #232]	@ (8013170 <LoRaMacInitialization+0x53c>)
 8013086:	2200      	movs	r2, #0
 8013088:	f04f 31ff 	mov.w	r1, #4294967295
 801308c:	4839      	ldr	r0, [pc, #228]	@ (8013174 <LoRaMacInitialization+0x540>)
 801308e:	f009 fb7d 	bl	801c78c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8013092:	4c2f      	ldr	r4, [pc, #188]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8013094:	463b      	mov	r3, r7
 8013096:	4618      	mov	r0, r3
 8013098:	f009 f9ba 	bl	801c410 <SysTimeGetMcuTime>
 801309c:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 80130a0:	463a      	mov	r2, r7
 80130a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80130a6:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80130aa:	4b33      	ldr	r3, [pc, #204]	@ (8013178 <LoRaMacInitialization+0x544>)
 80130ac:	2200      	movs	r2, #0
 80130ae:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80130b0:	4b28      	ldr	r3, [pc, #160]	@ (8013154 <LoRaMacInitialization+0x520>)
 80130b2:	4a32      	ldr	r2, [pc, #200]	@ (801317c <LoRaMacInitialization+0x548>)
 80130b4:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80130b8:	4b26      	ldr	r3, [pc, #152]	@ (8013154 <LoRaMacInitialization+0x520>)
 80130ba:	4a31      	ldr	r2, [pc, #196]	@ (8013180 <LoRaMacInitialization+0x54c>)
 80130bc:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80130c0:	4b24      	ldr	r3, [pc, #144]	@ (8013154 <LoRaMacInitialization+0x520>)
 80130c2:	4a30      	ldr	r2, [pc, #192]	@ (8013184 <LoRaMacInitialization+0x550>)
 80130c4:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80130c8:	4b22      	ldr	r3, [pc, #136]	@ (8013154 <LoRaMacInitialization+0x520>)
 80130ca:	4a2f      	ldr	r2, [pc, #188]	@ (8013188 <LoRaMacInitialization+0x554>)
 80130cc:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80130d0:	4b20      	ldr	r3, [pc, #128]	@ (8013154 <LoRaMacInitialization+0x520>)
 80130d2:	4a2e      	ldr	r2, [pc, #184]	@ (801318c <LoRaMacInitialization+0x558>)
 80130d4:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80130d8:	4b2d      	ldr	r3, [pc, #180]	@ (8013190 <LoRaMacInitialization+0x55c>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	482d      	ldr	r0, [pc, #180]	@ (8013194 <LoRaMacInitialization+0x560>)
 80130de:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80130e0:	482d      	ldr	r0, [pc, #180]	@ (8013198 <LoRaMacInitialization+0x564>)
 80130e2:	f7fa f9c1 	bl	800d468 <SecureElementInit>
 80130e6:	4603      	mov	r3, r0
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d001      	beq.n	80130f0 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80130ec:	2311      	movs	r3, #17
 80130ee:	e02b      	b.n	8013148 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80130f0:	4817      	ldr	r0, [pc, #92]	@ (8013150 <LoRaMacInitialization+0x51c>)
 80130f2:	f002 fc21 	bl	8015938 <LoRaMacCryptoInit>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d001      	beq.n	8013100 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80130fc:	2311      	movs	r3, #17
 80130fe:	e023      	b.n	8013148 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8013100:	f001 fd20 	bl	8014b44 <LoRaMacCommandsInit>
 8013104:	4603      	mov	r3, r0
 8013106:	2b00      	cmp	r3, #0
 8013108:	d001      	beq.n	801310e <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801310a:	2313      	movs	r3, #19
 801310c:	e01c      	b.n	8013148 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801310e:	4823      	ldr	r0, [pc, #140]	@ (801319c <LoRaMacInitialization+0x568>)
 8013110:	f002 fcb2 	bl	8015a78 <LoRaMacCryptoSetMulticastReference>
 8013114:	4603      	mov	r3, r0
 8013116:	2b00      	cmp	r3, #0
 8013118:	d001      	beq.n	801311e <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801311a:	2311      	movs	r3, #17
 801311c:	e014      	b.n	8013148 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801311e:	4b1c      	ldr	r3, [pc, #112]	@ (8013190 <LoRaMacInitialization+0x55c>)
 8013120:	695b      	ldr	r3, [r3, #20]
 8013122:	4798      	blx	r3
 8013124:	4603      	mov	r3, r0
 8013126:	4618      	mov	r0, r3
 8013128:	f005 fcc2 	bl	8018ab0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801312c:	4b18      	ldr	r3, [pc, #96]	@ (8013190 <LoRaMacInitialization+0x55c>)
 801312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013130:	4a07      	ldr	r2, [pc, #28]	@ (8013150 <LoRaMacInitialization+0x51c>)
 8013132:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8013136:	4610      	mov	r0, r2
 8013138:	4798      	blx	r3
    Radio.Sleep( );
 801313a:	4b15      	ldr	r3, [pc, #84]	@ (8013190 <LoRaMacInitialization+0x55c>)
 801313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801313e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013140:	2001      	movs	r0, #1
 8013142:	f7fd fa67 	bl	8010614 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8013146:	2300      	movs	r3, #0
}
 8013148:	4618      	mov	r0, r3
 801314a:	373c      	adds	r7, #60	@ 0x3c
 801314c:	46bd      	mov	sp, r7
 801314e:	bd90      	pop	{r4, r7, pc}
 8013150:	20000ecc 	.word	0x20000ecc
 8013154:	20000998 	.word	0x20000998
 8013158:	08010ba1 	.word	0x08010ba1
 801315c:	20000d00 	.word	0x20000d00
 8013160:	08010c31 	.word	0x08010c31
 8013164:	20000d18 	.word	0x20000d18
 8013168:	08010ca9 	.word	0x08010ca9
 801316c:	20000d30 	.word	0x20000d30
 8013170:	08010d29 	.word	0x08010d29
 8013174:	20000d98 	.word	0x20000d98
 8013178:	20001ad4 	.word	0x20001ad4
 801317c:	0800f621 	.word	0x0800f621
 8013180:	0800f67d 	.word	0x0800f67d
 8013184:	0800f71d 	.word	0x0800f71d
 8013188:	0800f6f1 	.word	0x0800f6f1
 801318c:	0800f739 	.word	0x0800f739
 8013190:	08020ce0 	.word	0x08020ce0
 8013194:	20000ce4 	.word	0x20000ce4
 8013198:	20001018 	.word	0x20001018
 801319c:	20000fb4 	.word	0x20000fb4

080131a0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80131a4:	4b04      	ldr	r3, [pc, #16]	@ (80131b8 <LoRaMacStart+0x18>)
 80131a6:	2200      	movs	r2, #0
 80131a8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 80131ac:	f7fc fada 	bl	800f764 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80131b0:	2300      	movs	r3, #0
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	20000998 	.word	0x20000998

080131bc <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80131c0:	f7fd f9f0 	bl	80105a4 <LoRaMacIsBusy>
 80131c4:	4603      	mov	r3, r0
 80131c6:	f083 0301 	eor.w	r3, r3, #1
 80131ca:	b2db      	uxtb	r3, r3
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d00d      	beq.n	80131ec <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80131d0:	4b0b      	ldr	r3, [pc, #44]	@ (8013200 <LoRaMacStop+0x44>)
 80131d2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80131d6:	2b02      	cmp	r3, #2
 80131d8:	d102      	bne.n	80131e0 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 80131da:	4b0a      	ldr	r3, [pc, #40]	@ (8013204 <LoRaMacStop+0x48>)
 80131dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131de:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80131e0:	4b09      	ldr	r3, [pc, #36]	@ (8013208 <LoRaMacStop+0x4c>)
 80131e2:	2201      	movs	r2, #1
 80131e4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80131e8:	2300      	movs	r3, #0
 80131ea:	e007      	b.n	80131fc <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80131ec:	4b06      	ldr	r3, [pc, #24]	@ (8013208 <LoRaMacStop+0x4c>)
 80131ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80131f2:	2b01      	cmp	r3, #1
 80131f4:	d101      	bne.n	80131fa <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80131f6:	2300      	movs	r3, #0
 80131f8:	e000      	b.n	80131fc <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80131fa:	2301      	movs	r3, #1
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	20000ecc 	.word	0x20000ecc
 8013204:	08020ce0 	.word	0x08020ce0
 8013208:	20000998 	.word	0x20000998

0801320c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 801320c:	b580      	push	{r7, lr}
 801320e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8013210:	4812      	ldr	r0, [pc, #72]	@ (801325c <LoRaMacHalt+0x50>)
 8013212:	f009 fb5f 	bl	801c8d4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8013216:	4812      	ldr	r0, [pc, #72]	@ (8013260 <LoRaMacHalt+0x54>)
 8013218:	f009 fb5c 	bl	801c8d4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 801321c:	4811      	ldr	r0, [pc, #68]	@ (8013264 <LoRaMacHalt+0x58>)
 801321e:	f009 fb59 	bl	801c8d4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8013222:	4811      	ldr	r0, [pc, #68]	@ (8013268 <LoRaMacHalt+0x5c>)
 8013224:	f009 fb56 	bl	801c8d4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8013228:	f001 faf0 	bl	801480c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 801322c:	4b0f      	ldr	r3, [pc, #60]	@ (801326c <LoRaMacHalt+0x60>)
 801322e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013230:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8013232:	4b0f      	ldr	r3, [pc, #60]	@ (8013270 <LoRaMacHalt+0x64>)
 8013234:	2200      	movs	r2, #0
 8013236:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 801323a:	480e      	ldr	r0, [pc, #56]	@ (8013274 <LoRaMacHalt+0x68>)
 801323c:	f7fd fb8c 	bl	8010958 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8013240:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8013244:	490b      	ldr	r1, [pc, #44]	@ (8013274 <LoRaMacHalt+0x68>)
 8013246:	480c      	ldr	r0, [pc, #48]	@ (8013278 <LoRaMacHalt+0x6c>)
 8013248:	f005 fc57 	bl	8018afa <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 801324c:	4b08      	ldr	r3, [pc, #32]	@ (8013270 <LoRaMacHalt+0x64>)
 801324e:	2201      	movs	r2, #1
 8013250:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8013254:	2300      	movs	r3, #0
}
 8013256:	4618      	mov	r0, r3
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	20000d00 	.word	0x20000d00
 8013260:	20000d18 	.word	0x20000d18
 8013264:	20000d30 	.word	0x20000d30
 8013268:	20000d98 	.word	0x20000d98
 801326c:	08020ce0 	.word	0x08020ce0
 8013270:	20000998 	.word	0x20000998
 8013274:	20000ecc 	.word	0x20000ecc
 8013278:	20001488 	.word	0x20001488

0801327c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 801327c:	b590      	push	{r4, r7, lr}
 801327e:	b08d      	sub	sp, #52	@ 0x34
 8013280:	af02      	add	r7, sp, #8
 8013282:	4603      	mov	r3, r0
 8013284:	6039      	str	r1, [r7, #0]
 8013286:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013288:	4b42      	ldr	r3, [pc, #264]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 801328a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801328c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801328e:	4b41      	ldr	r3, [pc, #260]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 8013290:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8013294:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013296:	4b3f      	ldr	r3, [pc, #252]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 8013298:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 801329c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801329e:	4b3e      	ldr	r3, [pc, #248]	@ (8013398 <LoRaMacQueryTxPossible+0x11c>)
 80132a0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80132a4:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80132a6:	2300      	movs	r3, #0
 80132a8:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80132aa:	683b      	ldr	r3, [r7, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d101      	bne.n	80132b4 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80132b0:	2303      	movs	r3, #3
 80132b2:	e06b      	b.n	801338c <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80132b4:	2300      	movs	r3, #0
 80132b6:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80132b8:	4b36      	ldr	r3, [pc, #216]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 80132ba:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80132be:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80132c0:	4b34      	ldr	r3, [pc, #208]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 80132c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132c4:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80132c6:	4b33      	ldr	r3, [pc, #204]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 80132c8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80132cc:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80132ce:	4b31      	ldr	r3, [pc, #196]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 80132d0:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80132d4:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80132d6:	4b2f      	ldr	r3, [pc, #188]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 80132d8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80132dc:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80132e0:	4b2c      	ldr	r3, [pc, #176]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 80132e2:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80132e6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80132ea:	4b2b      	ldr	r3, [pc, #172]	@ (8013398 <LoRaMacQueryTxPossible+0x11c>)
 80132ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80132f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80132f4:	4b27      	ldr	r3, [pc, #156]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 80132f6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80132fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80132fe:	4b25      	ldr	r3, [pc, #148]	@ (8013394 <LoRaMacQueryTxPossible+0x118>)
 8013300:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013304:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8013308:	f107 040d 	add.w	r4, r7, #13
 801330c:	f107 020e 	add.w	r2, r7, #14
 8013310:	f107 010f 	add.w	r1, r7, #15
 8013314:	f107 0014 	add.w	r0, r7, #20
 8013318:	f107 0310 	add.w	r3, r7, #16
 801331c:	9300      	str	r3, [sp, #0]
 801331e:	4623      	mov	r3, r4
 8013320:	f001 f93e 	bl	80145a0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013328:	4618      	mov	r0, r3
 801332a:	f7fd fe43 	bl	8010fb4 <GetMaxAppPayloadWithoutFOptsLength>
 801332e:	4603      	mov	r3, r0
 8013330:	461a      	mov	r2, r3
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013336:	f107 0308 	add.w	r3, r7, #8
 801333a:	4618      	mov	r0, r3
 801333c:	f001 fd08 	bl	8014d50 <LoRaMacCommandsGetSizeSerializedCmds>
 8013340:	4603      	mov	r3, r0
 8013342:	2b00      	cmp	r3, #0
 8013344:	d001      	beq.n	801334a <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013346:	2313      	movs	r3, #19
 8013348:	e020      	b.n	801338c <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	2b0f      	cmp	r3, #15
 801334e:	d819      	bhi.n	8013384 <LoRaMacQueryTxPossible+0x108>
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	785b      	ldrb	r3, [r3, #1]
 8013354:	461a      	mov	r2, r3
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	429a      	cmp	r2, r3
 801335a:	d313      	bcc.n	8013384 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	785a      	ldrb	r2, [r3, #1]
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	b2db      	uxtb	r3, r3
 8013364:	1ad3      	subs	r3, r2, r3
 8013366:	b2da      	uxtb	r2, r3
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	785b      	ldrb	r3, [r3, #1]
 8013370:	4619      	mov	r1, r3
 8013372:	79fa      	ldrb	r2, [r7, #7]
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	4413      	add	r3, r2
 8013378:	4299      	cmp	r1, r3
 801337a:	d301      	bcc.n	8013380 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 801337c:	2300      	movs	r3, #0
 801337e:	e005      	b.n	801338c <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013380:	2308      	movs	r3, #8
 8013382:	e003      	b.n	801338c <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	2200      	movs	r2, #0
 8013388:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801338a:	2308      	movs	r3, #8
    }
}
 801338c:	4618      	mov	r0, r3
 801338e:	372c      	adds	r7, #44	@ 0x2c
 8013390:	46bd      	mov	sp, r7
 8013392:	bd90      	pop	{r4, r7, pc}
 8013394:	20000ecc 	.word	0x20000ecc
 8013398:	20000998 	.word	0x20000998

0801339c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 801339c:	b590      	push	{r4, r7, lr}
 801339e:	b087      	sub	sp, #28
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80133a4:	2300      	movs	r3, #0
 80133a6:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d101      	bne.n	80133b2 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80133ae:	2303      	movs	r3, #3
 80133b0:	e1c4      	b.n	801373c <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	2b41      	cmp	r3, #65	@ 0x41
 80133b8:	f200 81b9 	bhi.w	801372e <LoRaMacMibGetRequestConfirm+0x392>
 80133bc:	a201      	add	r2, pc, #4	@ (adr r2, 80133c4 <LoRaMacMibGetRequestConfirm+0x28>)
 80133be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133c2:	bf00      	nop
 80133c4:	080134cd 	.word	0x080134cd
 80133c8:	080134d9 	.word	0x080134d9
 80133cc:	080134e5 	.word	0x080134e5
 80133d0:	080134f1 	.word	0x080134f1
 80133d4:	080134fd 	.word	0x080134fd
 80133d8:	08013509 	.word	0x08013509
 80133dc:	08013515 	.word	0x08013515
 80133e0:	0801372f 	.word	0x0801372f
 80133e4:	0801372f 	.word	0x0801372f
 80133e8:	0801372f 	.word	0x0801372f
 80133ec:	0801372f 	.word	0x0801372f
 80133f0:	0801372f 	.word	0x0801372f
 80133f4:	0801372f 	.word	0x0801372f
 80133f8:	0801372f 	.word	0x0801372f
 80133fc:	0801372f 	.word	0x0801372f
 8013400:	08013529 	.word	0x08013529
 8013404:	08013535 	.word	0x08013535
 8013408:	08013541 	.word	0x08013541
 801340c:	08013563 	.word	0x08013563
 8013410:	08013575 	.word	0x08013575
 8013414:	08013587 	.word	0x08013587
 8013418:	08013599 	.word	0x08013599
 801341c:	080135cd 	.word	0x080135cd
 8013420:	080135ab 	.word	0x080135ab
 8013424:	080135ef 	.word	0x080135ef
 8013428:	080135fb 	.word	0x080135fb
 801342c:	08013605 	.word	0x08013605
 8013430:	0801360f 	.word	0x0801360f
 8013434:	08013619 	.word	0x08013619
 8013438:	08013623 	.word	0x08013623
 801343c:	0801362d 	.word	0x0801362d
 8013440:	08013659 	.word	0x08013659
 8013444:	08013665 	.word	0x08013665
 8013448:	0801367d 	.word	0x0801367d
 801344c:	08013671 	.word	0x08013671
 8013450:	08013689 	.word	0x08013689
 8013454:	08013693 	.word	0x08013693
 8013458:	0801369f 	.word	0x0801369f
 801345c:	080136bb 	.word	0x080136bb
 8013460:	080136ab 	.word	0x080136ab
 8013464:	080136b3 	.word	0x080136b3
 8013468:	0801372f 	.word	0x0801372f
 801346c:	080136c7 	.word	0x080136c7
 8013470:	0801372f 	.word	0x0801372f
 8013474:	0801372f 	.word	0x0801372f
 8013478:	0801372f 	.word	0x0801372f
 801347c:	0801372f 	.word	0x0801372f
 8013480:	0801372f 	.word	0x0801372f
 8013484:	0801372f 	.word	0x0801372f
 8013488:	0801372f 	.word	0x0801372f
 801348c:	0801372f 	.word	0x0801372f
 8013490:	0801372f 	.word	0x0801372f
 8013494:	0801372f 	.word	0x0801372f
 8013498:	0801372f 	.word	0x0801372f
 801349c:	0801372f 	.word	0x0801372f
 80134a0:	0801372f 	.word	0x0801372f
 80134a4:	0801372f 	.word	0x0801372f
 80134a8:	0801372f 	.word	0x0801372f
 80134ac:	080136db 	.word	0x080136db
 80134b0:	080136e7 	.word	0x080136e7
 80134b4:	080136f3 	.word	0x080136f3
 80134b8:	080136ff 	.word	0x080136ff
 80134bc:	0801370b 	.word	0x0801370b
 80134c0:	08013717 	.word	0x08013717
 80134c4:	08013723 	.word	0x08013723
 80134c8:	08013729 	.word	0x08013729
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80134cc:	4b9d      	ldr	r3, [pc, #628]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134ce:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	711a      	strb	r2, [r3, #4]
            break;
 80134d6:	e130      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80134d8:	4b9a      	ldr	r3, [pc, #616]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134da:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	711a      	strb	r2, [r3, #4]
            break;
 80134e2:	e12a      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7fa fa7b 	bl	800d9e4 <SecureElementGetDevEui>
            break;
 80134ee:	e124      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7fa faa5 	bl	800da44 <SecureElementGetJoinEui>
            break;
 80134fa:	e11e      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80134fc:	4b91      	ldr	r3, [pc, #580]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134fe:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	711a      	strb	r2, [r3, #4]
            break;
 8013506:	e118      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8013508:	4b8e      	ldr	r3, [pc, #568]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801350a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	605a      	str	r2, [r3, #4]
            break;
 8013512:	e112      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8013514:	4b8b      	ldr	r3, [pc, #556]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013516:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	3304      	adds	r3, #4
 801351e:	4619      	mov	r1, r3
 8013520:	4610      	mov	r0, r2
 8013522:	f7fa fac1 	bl	800daa8 <SecureElementGetDevAddr>
            break;
 8013526:	e108      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8013528:	4b86      	ldr	r3, [pc, #536]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801352a:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	711a      	strb	r2, [r3, #4]
            break;
 8013532:	e102      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013534:	4b83      	ldr	r3, [pc, #524]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013536:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	711a      	strb	r2, [r3, #4]
            break;
 801353e:	e0fc      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013540:	231c      	movs	r3, #28
 8013542:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013544:	4b7f      	ldr	r3, [pc, #508]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013546:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801354a:	f107 0210 	add.w	r2, r7, #16
 801354e:	4611      	mov	r1, r2
 8013550:	4618      	mov	r0, r3
 8013552:	f003 f8a7 	bl	80166a4 <RegionGetPhyParam>
 8013556:	4603      	mov	r3, r0
 8013558:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801355a:	68fa      	ldr	r2, [r7, #12]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	605a      	str	r2, [r3, #4]
            break;
 8013560:	e0eb      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	4a77      	ldr	r2, [pc, #476]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013566:	3304      	adds	r3, #4
 8013568:	326c      	adds	r2, #108	@ 0x6c
 801356a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801356e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013572:	e0e2      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4a73      	ldr	r2, [pc, #460]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013578:	3304      	adds	r3, #4
 801357a:	32b4      	adds	r2, #180	@ 0xb4
 801357c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013580:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013584:	e0d9      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	4a6e      	ldr	r2, [pc, #440]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801358a:	3304      	adds	r3, #4
 801358c:	3274      	adds	r2, #116	@ 0x74
 801358e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013592:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013596:	e0d0      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	4a6a      	ldr	r2, [pc, #424]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801359c:	3304      	adds	r3, #4
 801359e:	32bc      	adds	r2, #188	@ 0xbc
 80135a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135a4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80135a8:	e0c7      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80135aa:	231a      	movs	r3, #26
 80135ac:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80135ae:	4b65      	ldr	r3, [pc, #404]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135b4:	f107 0210 	add.w	r2, r7, #16
 80135b8:	4611      	mov	r1, r2
 80135ba:	4618      	mov	r0, r3
 80135bc:	f003 f872 	bl	80166a4 <RegionGetPhyParam>
 80135c0:	4603      	mov	r3, r0
 80135c2:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80135c4:	68fa      	ldr	r2, [r7, #12]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	605a      	str	r2, [r3, #4]
            break;
 80135ca:	e0b6      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80135cc:	2319      	movs	r3, #25
 80135ce:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80135d0:	4b5c      	ldr	r3, [pc, #368]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135d6:	f107 0210 	add.w	r2, r7, #16
 80135da:	4611      	mov	r1, r2
 80135dc:	4618      	mov	r0, r3
 80135de:	f003 f861 	bl	80166a4 <RegionGetPhyParam>
 80135e2:	4603      	mov	r3, r0
 80135e4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80135e6:	68fa      	ldr	r2, [r7, #12]
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	605a      	str	r2, [r3, #4]
            break;
 80135ec:	e0a5      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80135ee:	4b55      	ldr	r3, [pc, #340]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135f0:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	711a      	strb	r2, [r3, #4]
            break;
 80135f8:	e09f      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80135fa:	4b52      	ldr	r3, [pc, #328]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	605a      	str	r2, [r3, #4]
            break;
 8013602:	e09a      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8013604:	4b4f      	ldr	r3, [pc, #316]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013606:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	605a      	str	r2, [r3, #4]
            break;
 801360c:	e095      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801360e:	4b4d      	ldr	r3, [pc, #308]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013610:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	605a      	str	r2, [r3, #4]
            break;
 8013616:	e090      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8013618:	4b4a      	ldr	r3, [pc, #296]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801361a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	605a      	str	r2, [r3, #4]
            break;
 8013620:	e08b      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8013622:	4b48      	ldr	r3, [pc, #288]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013624:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	605a      	str	r2, [r3, #4]
            break;
 801362a:	e086      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 801362c:	2302      	movs	r3, #2
 801362e:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013630:	4b44      	ldr	r3, [pc, #272]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013632:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013636:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013638:	4b42      	ldr	r3, [pc, #264]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801363a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801363e:	f107 0210 	add.w	r2, r7, #16
 8013642:	4611      	mov	r1, r2
 8013644:	4618      	mov	r0, r3
 8013646:	f003 f82d 	bl	80166a4 <RegionGetPhyParam>
 801364a:	4603      	mov	r3, r0
 801364c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	b25a      	sxtb	r2, r3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	711a      	strb	r2, [r3, #4]
            break;
 8013656:	e070      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013658:	4b3a      	ldr	r3, [pc, #232]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801365a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	711a      	strb	r2, [r3, #4]
            break;
 8013662:	e06a      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013664:	4b37      	ldr	r3, [pc, #220]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013666:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	711a      	strb	r2, [r3, #4]
            break;
 801366e:	e064      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013670:	4b34      	ldr	r3, [pc, #208]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013672:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	711a      	strb	r2, [r3, #4]
            break;
 801367a:	e05e      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801367c:	4b31      	ldr	r3, [pc, #196]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801367e:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	711a      	strb	r2, [r3, #4]
            break;
 8013686:	e058      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013688:	4b2e      	ldr	r3, [pc, #184]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801368a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	605a      	str	r2, [r3, #4]
            break;
 8013690:	e053      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8013692:	4b2c      	ldr	r3, [pc, #176]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013694:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	711a      	strb	r2, [r3, #4]
            break;
 801369c:	e04d      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801369e:	4b29      	ldr	r3, [pc, #164]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	605a      	str	r2, [r3, #4]
            break;
 80136a8:	e047      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	4a25      	ldr	r2, [pc, #148]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136ae:	605a      	str	r2, [r3, #4]
            break;
 80136b0:	e043      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	4a24      	ldr	r2, [pc, #144]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3ac>)
 80136b6:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80136b8:	e03f      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80136ba:	4b22      	ldr	r3, [pc, #136]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136bc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	605a      	str	r2, [r3, #4]
            break;
 80136c4:	e039      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	4a1e      	ldr	r2, [pc, #120]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136ca:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80136ce:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80136d0:	687c      	ldr	r4, [r7, #4]
 80136d2:	f003 f95d 	bl	8016990 <RegionGetVersion>
 80136d6:	60a0      	str	r0, [r4, #8]
            break;
 80136d8:	e02f      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80136da:	4b1a      	ldr	r3, [pc, #104]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	605a      	str	r2, [r3, #4]
            break;
 80136e4:	e029      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80136e6:	4b17      	ldr	r3, [pc, #92]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136e8:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	711a      	strb	r2, [r3, #4]
            break;
 80136f0:	e023      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80136f2:	4b14      	ldr	r3, [pc, #80]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136f4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	809a      	strh	r2, [r3, #4]
            break;
 80136fc:	e01d      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80136fe:	4b11      	ldr	r3, [pc, #68]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013700:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	809a      	strh	r2, [r3, #4]
            break;
 8013708:	e017      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801370a:	4b0e      	ldr	r3, [pc, #56]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801370c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	809a      	strh	r2, [r3, #4]
            break;
 8013714:	e011      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013716:	4b0b      	ldr	r3, [pc, #44]	@ (8013744 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013718:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	809a      	strh	r2, [r3, #4]
            break;
 8013720:	e00b      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013722:	2318      	movs	r3, #24
 8013724:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013726:	e008      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013728:	2318      	movs	r3, #24
 801372a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801372c:	e005      	b.n	801373a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f001 f883 	bl	801483a <LoRaMacClassBMibGetRequestConfirm>
 8013734:	4603      	mov	r3, r0
 8013736:	75fb      	strb	r3, [r7, #23]
            break;
 8013738:	bf00      	nop
        }
    }
    return status;
 801373a:	7dfb      	ldrb	r3, [r7, #23]
}
 801373c:	4618      	mov	r0, r3
 801373e:	371c      	adds	r7, #28
 8013740:	46bd      	mov	sp, r7
 8013742:	bd90      	pop	{r4, r7, pc}
 8013744:	20000ecc 	.word	0x20000ecc
 8013748:	20001488 	.word	0x20001488

0801374c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b086      	sub	sp, #24
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013754:	2300      	movs	r3, #0
 8013756:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d101      	bne.n	8013762 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801375e:	2303      	movs	r3, #3
 8013760:	e39e      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013762:	4bbd      	ldr	r3, [pc, #756]	@ (8013a58 <LoRaMacMibSetRequestConfirm+0x30c>)
 8013764:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013768:	f003 0302 	and.w	r3, r3, #2
 801376c:	2b00      	cmp	r3, #0
 801376e:	d001      	beq.n	8013774 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013770:	2301      	movs	r3, #1
 8013772:	e395      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
    }

    switch( mibSet->Type )
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	2b41      	cmp	r3, #65	@ 0x41
 801377a:	f200 8365 	bhi.w	8013e48 <LoRaMacMibSetRequestConfirm+0x6fc>
 801377e:	a201      	add	r2, pc, #4	@ (adr r2, 8013784 <LoRaMacMibSetRequestConfirm+0x38>)
 8013780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013784:	0801388d 	.word	0x0801388d
 8013788:	0801389d 	.word	0x0801389d
 801378c:	080138b7 	.word	0x080138b7
 8013790:	080138cf 	.word	0x080138cf
 8013794:	080138e7 	.word	0x080138e7
 8013798:	080138f3 	.word	0x080138f3
 801379c:	080138ff 	.word	0x080138ff
 80137a0:	08013929 	.word	0x08013929
 80137a4:	0801394f 	.word	0x0801394f
 80137a8:	08013975 	.word	0x08013975
 80137ac:	0801399b 	.word	0x0801399b
 80137b0:	080139c1 	.word	0x080139c1
 80137b4:	080139e7 	.word	0x080139e7
 80137b8:	08013a0d 	.word	0x08013a0d
 80137bc:	08013a33 	.word	0x08013a33
 80137c0:	08013a61 	.word	0x08013a61
 80137c4:	08013a81 	.word	0x08013a81
 80137c8:	08013e49 	.word	0x08013e49
 80137cc:	08013a8d 	.word	0x08013a8d
 80137d0:	08013afd 	.word	0x08013afd
 80137d4:	08013b3d 	.word	0x08013b3d
 80137d8:	08013b9f 	.word	0x08013b9f
 80137dc:	08013c0f 	.word	0x08013c0f
 80137e0:	08013bdf 	.word	0x08013bdf
 80137e4:	08013c3f 	.word	0x08013c3f
 80137e8:	08013c61 	.word	0x08013c61
 80137ec:	08013c6b 	.word	0x08013c6b
 80137f0:	08013c75 	.word	0x08013c75
 80137f4:	08013c7f 	.word	0x08013c7f
 80137f8:	08013c89 	.word	0x08013c89
 80137fc:	08013e49 	.word	0x08013e49
 8013800:	08013c93 	.word	0x08013c93
 8013804:	08013cc5 	.word	0x08013cc5
 8013808:	08013d39 	.word	0x08013d39
 801380c:	08013cff 	.word	0x08013cff
 8013810:	08013d6b 	.word	0x08013d6b
 8013814:	08013d91 	.word	0x08013d91
 8013818:	08013da9 	.word	0x08013da9
 801381c:	08013db5 	.word	0x08013db5
 8013820:	08013dc1 	.word	0x08013dc1
 8013824:	08013e49 	.word	0x08013e49
 8013828:	08013dcb 	.word	0x08013dcb
 801382c:	08013e49 	.word	0x08013e49
 8013830:	08013e49 	.word	0x08013e49
 8013834:	08013e49 	.word	0x08013e49
 8013838:	08013e49 	.word	0x08013e49
 801383c:	08013e49 	.word	0x08013e49
 8013840:	08013e49 	.word	0x08013e49
 8013844:	08013e49 	.word	0x08013e49
 8013848:	08013e49 	.word	0x08013e49
 801384c:	08013e49 	.word	0x08013e49
 8013850:	08013e49 	.word	0x08013e49
 8013854:	08013e49 	.word	0x08013e49
 8013858:	08013e49 	.word	0x08013e49
 801385c:	08013e49 	.word	0x08013e49
 8013860:	08013e49 	.word	0x08013e49
 8013864:	08013e49 	.word	0x08013e49
 8013868:	08013e49 	.word	0x08013e49
 801386c:	08013df5 	.word	0x08013df5
 8013870:	08013e01 	.word	0x08013e01
 8013874:	08013e0d 	.word	0x08013e0d
 8013878:	08013e19 	.word	0x08013e19
 801387c:	08013e25 	.word	0x08013e25
 8013880:	08013e31 	.word	0x08013e31
 8013884:	08013e3d 	.word	0x08013e3d
 8013888:	08013e43 	.word	0x08013e43
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	791b      	ldrb	r3, [r3, #4]
 8013890:	4618      	mov	r0, r3
 8013892:	f7fd faa5 	bl	8010de0 <SwitchClass>
 8013896:	4603      	mov	r3, r0
 8013898:	75fb      	strb	r3, [r7, #23]
            break;
 801389a:	e2f6      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	791b      	ldrb	r3, [r3, #4]
 80138a0:	2b02      	cmp	r3, #2
 80138a2:	d005      	beq.n	80138b0 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	791a      	ldrb	r2, [r3, #4]
 80138a8:	4b6c      	ldr	r3, [pc, #432]	@ (8013a5c <LoRaMacMibSetRequestConfirm+0x310>)
 80138aa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80138ae:	e2ec      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138b0:	2303      	movs	r3, #3
 80138b2:	75fb      	strb	r3, [r7, #23]
            break;
 80138b4:	e2e9      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7fa f87a 	bl	800d9b4 <SecureElementSetDevEui>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	f000 82c6 	beq.w	8013e54 <LoRaMacMibSetRequestConfirm+0x708>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138c8:	2303      	movs	r3, #3
 80138ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138cc:	e2c2      	b.n	8013e54 <LoRaMacMibSetRequestConfirm+0x708>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fa f89e 	bl	800da14 <SecureElementSetJoinEui>
 80138d8:	4603      	mov	r3, r0
 80138da:	2b00      	cmp	r3, #0
 80138dc:	f000 82bc 	beq.w	8013e58 <LoRaMacMibSetRequestConfirm+0x70c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138e0:	2303      	movs	r3, #3
 80138e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138e4:	e2b8      	b.n	8013e58 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	791a      	ldrb	r2, [r3, #4]
 80138ea:	4b5c      	ldr	r3, [pc, #368]	@ (8013a5c <LoRaMacMibSetRequestConfirm+0x310>)
 80138ec:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 80138f0:	e2cb      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	4a59      	ldr	r2, [pc, #356]	@ (8013a5c <LoRaMacMibSetRequestConfirm+0x310>)
 80138f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 80138fc:	e2c5      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80138fe:	4b57      	ldr	r3, [pc, #348]	@ (8013a5c <LoRaMacMibSetRequestConfirm+0x310>)
 8013900:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	4619      	mov	r1, r3
 801390a:	4610      	mov	r0, r2
 801390c:	f7fa f8b2 	bl	800da74 <SecureElementSetDevAddr>
 8013910:	4603      	mov	r3, r0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d002      	beq.n	801391c <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013916:	2303      	movs	r3, #3
 8013918:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801391a:	e2b6      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	4a4e      	ldr	r2, [pc, #312]	@ (8013a5c <LoRaMacMibSetRequestConfirm+0x310>)
 8013922:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8013926:	e2b0      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	685b      	ldr	r3, [r3, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d00b      	beq.n	8013948 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	4619      	mov	r1, r3
 8013936:	2000      	movs	r0, #0
 8013938:	f002 f8c8 	bl	8015acc <LoRaMacCryptoSetKey>
 801393c:	4603      	mov	r3, r0
 801393e:	2b00      	cmp	r3, #0
 8013940:	f000 828c 	beq.w	8013e5c <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013944:	2311      	movs	r3, #17
 8013946:	e2ab      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013948:	2303      	movs	r3, #3
 801394a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801394c:	e286      	b.n	8013e5c <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d00b      	beq.n	801396e <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	4619      	mov	r1, r3
 801395c:	2001      	movs	r0, #1
 801395e:	f002 f8b5 	bl	8015acc <LoRaMacCryptoSetKey>
 8013962:	4603      	mov	r3, r0
 8013964:	2b00      	cmp	r3, #0
 8013966:	f000 827b 	beq.w	8013e60 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801396a:	2311      	movs	r3, #17
 801396c:	e298      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801396e:	2303      	movs	r3, #3
 8013970:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013972:	e275      	b.n	8013e60 <LoRaMacMibSetRequestConfirm+0x714>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	685b      	ldr	r3, [r3, #4]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d00b      	beq.n	8013994 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	4619      	mov	r1, r3
 8013982:	2008      	movs	r0, #8
 8013984:	f002 f8a2 	bl	8015acc <LoRaMacCryptoSetKey>
 8013988:	4603      	mov	r3, r0
 801398a:	2b00      	cmp	r3, #0
 801398c:	f000 826a 	beq.w	8013e64 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013990:	2311      	movs	r3, #17
 8013992:	e285      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013994:	2303      	movs	r3, #3
 8013996:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013998:	e264      	b.n	8013e64 <LoRaMacMibSetRequestConfirm+0x718>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d00b      	beq.n	80139ba <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	685b      	ldr	r3, [r3, #4]
 80139a6:	4619      	mov	r1, r3
 80139a8:	2009      	movs	r0, #9
 80139aa:	f002 f88f 	bl	8015acc <LoRaMacCryptoSetKey>
 80139ae:	4603      	mov	r3, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	f000 8259 	beq.w	8013e68 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80139b6:	2311      	movs	r3, #17
 80139b8:	e272      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139ba:	2303      	movs	r3, #3
 80139bc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80139be:	e253      	b.n	8013e68 <LoRaMacMibSetRequestConfirm+0x71c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	685b      	ldr	r3, [r3, #4]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d00b      	beq.n	80139e0 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	4619      	mov	r1, r3
 80139ce:	200c      	movs	r0, #12
 80139d0:	f002 f87c 	bl	8015acc <LoRaMacCryptoSetKey>
 80139d4:	4603      	mov	r3, r0
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	f000 8248 	beq.w	8013e6c <LoRaMacMibSetRequestConfirm+0x720>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80139dc:	2311      	movs	r3, #17
 80139de:	e25f      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139e0:	2303      	movs	r3, #3
 80139e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80139e4:	e242      	b.n	8013e6c <LoRaMacMibSetRequestConfirm+0x720>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d00b      	beq.n	8013a06 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	4619      	mov	r1, r3
 80139f4:	200d      	movs	r0, #13
 80139f6:	f002 f869 	bl	8015acc <LoRaMacCryptoSetKey>
 80139fa:	4603      	mov	r3, r0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	f000 8237 	beq.w	8013e70 <LoRaMacMibSetRequestConfirm+0x724>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a02:	2311      	movs	r3, #17
 8013a04:	e24c      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a06:	2303      	movs	r3, #3
 8013a08:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013a0a:	e231      	b.n	8013e70 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d00b      	beq.n	8013a2c <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	685b      	ldr	r3, [r3, #4]
 8013a18:	4619      	mov	r1, r3
 8013a1a:	200e      	movs	r0, #14
 8013a1c:	f002 f856 	bl	8015acc <LoRaMacCryptoSetKey>
 8013a20:	4603      	mov	r3, r0
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	f000 8226 	beq.w	8013e74 <LoRaMacMibSetRequestConfirm+0x728>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a28:	2311      	movs	r3, #17
 8013a2a:	e239      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a2c:	2303      	movs	r3, #3
 8013a2e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013a30:	e220      	b.n	8013e74 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	685b      	ldr	r3, [r3, #4]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d00b      	beq.n	8013a52 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	4619      	mov	r1, r3
 8013a40:	200f      	movs	r0, #15
 8013a42:	f002 f843 	bl	8015acc <LoRaMacCryptoSetKey>
 8013a46:	4603      	mov	r3, r0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	f000 8215 	beq.w	8013e78 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a4e:	2311      	movs	r3, #17
 8013a50:	e226      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a52:	2303      	movs	r3, #3
 8013a54:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013a56:	e20f      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x72c>
 8013a58:	20000998 	.word	0x20000998
 8013a5c:	20000ecc 	.word	0x20000ecc
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	791a      	ldrb	r2, [r3, #4]
 8013a64:	4bb2      	ldr	r3, [pc, #712]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a66:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013a6a:	4bb2      	ldr	r3, [pc, #712]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a6e:	4ab0      	ldr	r2, [pc, #704]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a70:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8013a74:	4610      	mov	r0, r2
 8013a76:	4798      	blx	r3
            Radio.Sleep( );
 8013a78:	4bae      	ldr	r3, [pc, #696]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a7c:	4798      	blx	r3
            break;
 8013a7e:	e204      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	791a      	ldrb	r2, [r3, #4]
 8013a84:	4baa      	ldr	r3, [pc, #680]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a86:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 8013a8a:	e1fe      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	7a1b      	ldrb	r3, [r3, #8]
 8013a90:	b25b      	sxtb	r3, r3
 8013a92:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013a94:	4ba6      	ldr	r3, [pc, #664]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a96:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013a9a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8013a9c:	4ba4      	ldr	r3, [pc, #656]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a9e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013aa2:	f107 0108 	add.w	r1, r7, #8
 8013aa6:	2207      	movs	r2, #7
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f002 fe36 	bl	801671a <RegionVerify>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	f083 0301 	eor.w	r3, r3, #1
 8013ab4:	b2db      	uxtb	r3, r3
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d002      	beq.n	8013ac0 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013aba:	2303      	movs	r3, #3
 8013abc:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8013abe:	e1e4      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	685b      	ldr	r3, [r3, #4]
 8013ac4:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8013ac6:	4b9a      	ldr	r3, [pc, #616]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013ac8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013acc:	f107 0108 	add.w	r1, r7, #8
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f002 fe21 	bl	801671a <RegionVerify>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	f083 0301 	eor.w	r3, r3, #1
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d002      	beq.n	8013aea <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ae4:	2303      	movs	r3, #3
 8013ae6:	75fb      	strb	r3, [r7, #23]
            break;
 8013ae8:	e1cf      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013aea:	4b91      	ldr	r3, [pc, #580]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	336c      	adds	r3, #108	@ 0x6c
 8013af0:	3204      	adds	r2, #4
 8013af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013af6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013afa:	e1c6      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	7a1b      	ldrb	r3, [r3, #8]
 8013b00:	b25b      	sxtb	r3, r3
 8013b02:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013b04:	4b8a      	ldr	r3, [pc, #552]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b06:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013b0a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013b0c:	4b88      	ldr	r3, [pc, #544]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b0e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013b12:	f107 0108 	add.w	r1, r7, #8
 8013b16:	2207      	movs	r2, #7
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f002 fdfe 	bl	801671a <RegionVerify>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d008      	beq.n	8013b36 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013b24:	4b82      	ldr	r3, [pc, #520]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	33b4      	adds	r3, #180	@ 0xb4
 8013b2a:	3204      	adds	r2, #4
 8013b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b30:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b34:	e1a9      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b36:	2303      	movs	r3, #3
 8013b38:	75fb      	strb	r3, [r7, #23]
            break;
 8013b3a:	e1a6      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	7a1b      	ldrb	r3, [r3, #8]
 8013b40:	b25b      	sxtb	r3, r3
 8013b42:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013b44:	4b7a      	ldr	r3, [pc, #488]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b46:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013b4a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013b4c:	4b78      	ldr	r3, [pc, #480]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b4e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013b52:	f107 0108 	add.w	r1, r7, #8
 8013b56:	2207      	movs	r2, #7
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f002 fdde 	bl	801671a <RegionVerify>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d019      	beq.n	8013b98 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013b64:	4b72      	ldr	r3, [pc, #456]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b66:	687a      	ldr	r2, [r7, #4]
 8013b68:	3374      	adds	r3, #116	@ 0x74
 8013b6a:	3204      	adds	r2, #4
 8013b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b70:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013b74:	4b6e      	ldr	r3, [pc, #440]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b76:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013b7a:	2b02      	cmp	r3, #2
 8013b7c:	f040 817e 	bne.w	8013e7c <LoRaMacMibSetRequestConfirm+0x730>
 8013b80:	4b6b      	ldr	r3, [pc, #428]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b82:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f000 8178 	beq.w	8013e7c <LoRaMacMibSetRequestConfirm+0x730>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013b8c:	4b69      	ldr	r3, [pc, #420]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b90:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013b92:	f7fe fc1d 	bl	80123d0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b96:	e171      	b.n	8013e7c <LoRaMacMibSetRequestConfirm+0x730>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b98:	2303      	movs	r3, #3
 8013b9a:	75fb      	strb	r3, [r7, #23]
            break;
 8013b9c:	e16e      	b.n	8013e7c <LoRaMacMibSetRequestConfirm+0x730>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	7a1b      	ldrb	r3, [r3, #8]
 8013ba2:	b25b      	sxtb	r3, r3
 8013ba4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013ba6:	4b62      	ldr	r3, [pc, #392]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013ba8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013bac:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013bae:	4b60      	ldr	r3, [pc, #384]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bb0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013bb4:	f107 0108 	add.w	r1, r7, #8
 8013bb8:	2207      	movs	r2, #7
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f002 fdad 	bl	801671a <RegionVerify>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d008      	beq.n	8013bd8 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	33bc      	adds	r3, #188	@ 0xbc
 8013bcc:	3204      	adds	r2, #4
 8013bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bd2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013bd6:	e158      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bd8:	2303      	movs	r3, #3
 8013bda:	75fb      	strb	r3, [r7, #23]
            break;
 8013bdc:	e155      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	685b      	ldr	r3, [r3, #4]
 8013be2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013be4:	2301      	movs	r3, #1
 8013be6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013be8:	4b51      	ldr	r3, [pc, #324]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013bee:	f107 020c 	add.w	r2, r7, #12
 8013bf2:	4611      	mov	r1, r2
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f002 fdb9 	bl	801676c <RegionChanMaskSet>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	f083 0301 	eor.w	r3, r3, #1
 8013c00:	b2db      	uxtb	r3, r3
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	f000 813c 	beq.w	8013e80 <LoRaMacMibSetRequestConfirm+0x734>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c08:	2303      	movs	r3, #3
 8013c0a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013c0c:	e138      	b.n	8013e80 <LoRaMacMibSetRequestConfirm+0x734>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013c14:	2300      	movs	r3, #0
 8013c16:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013c18:	4b45      	ldr	r3, [pc, #276]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c1a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013c1e:	f107 020c 	add.w	r2, r7, #12
 8013c22:	4611      	mov	r1, r2
 8013c24:	4618      	mov	r0, r3
 8013c26:	f002 fda1 	bl	801676c <RegionChanMaskSet>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	f083 0301 	eor.w	r3, r3, #1
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	f000 8126 	beq.w	8013e84 <LoRaMacMibSetRequestConfirm+0x738>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c38:	2303      	movs	r3, #3
 8013c3a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013c3c:	e122      	b.n	8013e84 <LoRaMacMibSetRequestConfirm+0x738>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	791b      	ldrb	r3, [r3, #4]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d009      	beq.n	8013c5a <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013c4a:	2b0f      	cmp	r3, #15
 8013c4c:	d805      	bhi.n	8013c5a <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	791a      	ldrb	r2, [r3, #4]
 8013c52:	4b37      	ldr	r3, [pc, #220]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c54:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c58:	e117      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c5a:	2303      	movs	r3, #3
 8013c5c:	75fb      	strb	r3, [r7, #23]
            break;
 8013c5e:	e114      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	4a32      	ldr	r2, [pc, #200]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c66:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8013c68:	e10f      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	685b      	ldr	r3, [r3, #4]
 8013c6e:	4a30      	ldr	r2, [pc, #192]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c70:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8013c72:	e10a      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	4a2d      	ldr	r2, [pc, #180]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c7a:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8013c7c:	e105      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	4a2b      	ldr	r2, [pc, #172]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c84:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8013c86:	e100      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	685b      	ldr	r3, [r3, #4]
 8013c8c:	4a28      	ldr	r2, [pc, #160]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c8e:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8013c90:	e0fb      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013c98:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8013c9a:	4b25      	ldr	r3, [pc, #148]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c9c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013ca0:	f107 0108 	add.w	r1, r7, #8
 8013ca4:	2206      	movs	r2, #6
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f002 fd37 	bl	801671a <RegionVerify>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d005      	beq.n	8013cbe <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013cb2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013cb8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013cbc:	e0e5      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cbe:	2303      	movs	r3, #3
 8013cc0:	75fb      	strb	r3, [r7, #23]
            break;
 8013cc2:	e0e2      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013cca:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013ccc:	4b18      	ldr	r3, [pc, #96]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013cce:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013cd2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013cd4:	4b16      	ldr	r3, [pc, #88]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013cd6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013cda:	f107 0108 	add.w	r1, r7, #8
 8013cde:	2205      	movs	r2, #5
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f002 fd1a 	bl	801671a <RegionVerify>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d005      	beq.n	8013cf8 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013cec:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013cf2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013cf6:	e0c8      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cf8:	2303      	movs	r3, #3
 8013cfa:	75fb      	strb	r3, [r7, #23]
            break;
 8013cfc:	e0c5      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013d04:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013d06:	4b0a      	ldr	r3, [pc, #40]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013d08:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013d0c:	f107 0108 	add.w	r1, r7, #8
 8013d10:	220a      	movs	r2, #10
 8013d12:	4618      	mov	r0, r3
 8013d14:	f002 fd01 	bl	801671a <RegionVerify>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d005      	beq.n	8013d2a <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8013d1e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013d22:	4b03      	ldr	r3, [pc, #12]	@ (8013d30 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013d24:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d28:	e0af      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d2a:	2303      	movs	r3, #3
 8013d2c:	75fb      	strb	r3, [r7, #23]
            break;
 8013d2e:	e0ac      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
 8013d30:	20000ecc 	.word	0x20000ecc
 8013d34:	08020ce0 	.word	0x08020ce0
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013d3e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013d40:	4b59      	ldr	r3, [pc, #356]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d42:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013d46:	f107 0108 	add.w	r1, r7, #8
 8013d4a:	2209      	movs	r2, #9
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f002 fce4 	bl	801671a <RegionVerify>
 8013d52:	4603      	mov	r3, r0
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d005      	beq.n	8013d64 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013d58:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013d5c:	4b52      	ldr	r3, [pc, #328]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d62:	e092      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d64:	2303      	movs	r3, #3
 8013d66:	75fb      	strb	r3, [r7, #23]
            break;
 8013d68:	e08f      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mibSet->Param.SystemMaxRxError <= 500 )
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8013d72:	d80a      	bhi.n	8013d8a <LoRaMacMibSetRequestConfirm+0x63e>
            { // Only apply the new value if in range 0..500 ms else keep current value.
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	685b      	ldr	r3, [r3, #4]
 8013d78:	4a4b      	ldr	r2, [pc, #300]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8013d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013d84:	4a48      	ldr	r2, [pc, #288]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
#endif
            break;
 8013d88:	e07f      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d8a:	2303      	movs	r3, #3
 8013d8c:	75fb      	strb	r3, [r7, #23]
            break;
 8013d8e:	e07c      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	791a      	ldrb	r2, [r3, #4]
 8013d94:	4b44      	ldr	r3, [pc, #272]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d96:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8013d9a:	4b43      	ldr	r3, [pc, #268]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d9c:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8013da0:	4b41      	ldr	r3, [pc, #260]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8013da6:	e070      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	685b      	ldr	r3, [r3, #4]
 8013dac:	4a3e      	ldr	r2, [pc, #248]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013dae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8013db2:	e06a      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	685b      	ldr	r3, [r3, #4]
 8013db8:	4a3b      	ldr	r2, [pc, #236]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013dba:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8013dbe:	e064      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013dc0:	f7fe fd38 	bl	8012834 <RestoreNvmData>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	75fb      	strb	r3, [r7, #23]
            break;
 8013dc8:	e05f      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	799b      	ldrb	r3, [r3, #6]
 8013dce:	2b01      	cmp	r3, #1
 8013dd0:	d80d      	bhi.n	8013dee <LoRaMacMibSetRequestConfirm+0x6a2>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013dd2:	4a35      	ldr	r2, [pc, #212]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	685b      	ldr	r3, [r3, #4]
 8013dd8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6858      	ldr	r0, [r3, #4]
 8013de0:	f001 fdd6 	bl	8015990 <LoRaMacCryptoSetLrWanVersion>
 8013de4:	4603      	mov	r3, r0
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d04e      	beq.n	8013e88 <LoRaMacMibSetRequestConfirm+0x73c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013dea:	2311      	movs	r3, #17
 8013dec:	e058      	b.n	8013ea0 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013dee:	2303      	movs	r3, #3
 8013df0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013df2:	e049      	b.n	8013e88 <LoRaMacMibSetRequestConfirm+0x73c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	4a2b      	ldr	r2, [pc, #172]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013dfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 8013dfe:	e044      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	791a      	ldrb	r2, [r3, #4]
 8013e04:	4b28      	ldr	r3, [pc, #160]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e06:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 8013e0a:	e03e      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	889a      	ldrh	r2, [r3, #4]
 8013e10:	4b25      	ldr	r3, [pc, #148]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e12:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8013e16:	e038      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	889a      	ldrh	r2, [r3, #4]
 8013e1c:	4b22      	ldr	r3, [pc, #136]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e1e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8013e22:	e032      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	889a      	ldrh	r2, [r3, #4]
 8013e28:	4b1f      	ldr	r3, [pc, #124]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e2a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8013e2e:	e02c      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	889a      	ldrh	r2, [r3, #4]
 8013e34:	4b1c      	ldr	r3, [pc, #112]	@ (8013ea8 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e36:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 8013e3a:	e026      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013e3c:	2318      	movs	r3, #24
 8013e3e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013e40:	e023      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013e42:	2318      	movs	r3, #24
 8013e44:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013e46:	e020      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f000 fd00 	bl	801484e <LoRaMacMibClassBSetRequestConfirm>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	75fb      	strb	r3, [r7, #23]
            break;
 8013e52:	e01a      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e54:	bf00      	nop
 8013e56:	e018      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e58:	bf00      	nop
 8013e5a:	e016      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e5c:	bf00      	nop
 8013e5e:	e014      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e60:	bf00      	nop
 8013e62:	e012      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e64:	bf00      	nop
 8013e66:	e010      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e68:	bf00      	nop
 8013e6a:	e00e      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e6c:	bf00      	nop
 8013e6e:	e00c      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e70:	bf00      	nop
 8013e72:	e00a      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e74:	bf00      	nop
 8013e76:	e008      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e78:	bf00      	nop
 8013e7a:	e006      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e7c:	bf00      	nop
 8013e7e:	e004      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e80:	bf00      	nop
 8013e82:	e002      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e84:	bf00      	nop
 8013e86:	e000      	b.n	8013e8a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e88:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8013e8a:	7dfb      	ldrb	r3, [r7, #23]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d106      	bne.n	8013e9e <LoRaMacMibSetRequestConfirm+0x752>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013e90:	4a06      	ldr	r2, [pc, #24]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x760>)
 8013e92:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013e96:	f043 0320 	orr.w	r3, r3, #32
 8013e9a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8013e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3718      	adds	r7, #24
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	20000ecc 	.word	0x20000ecc
 8013eac:	20000998 	.word	0x20000998

08013eb0 <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b082      	sub	sp, #8
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 8013eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8013ee4 <OnAbpJoinPendingTimerEvent+0x34>)
 8013eba:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013ebe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013ec2:	4a08      	ldr	r2, [pc, #32]	@ (8013ee4 <OnAbpJoinPendingTimerEvent+0x34>)
 8013ec4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 8013ec8:	4a06      	ldr	r2, [pc, #24]	@ (8013ee4 <OnAbpJoinPendingTimerEvent+0x34>)
 8013eca:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013ece:	f043 0310 	orr.w	r3, r3, #16
 8013ed2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    OnMacProcessNotify( );
 8013ed6:	f7fe fe5d 	bl	8012b94 <OnMacProcessNotify>
}
 8013eda:	bf00      	nop
 8013edc:	3708      	adds	r7, #8
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	20000998 	.word	0x20000998

08013ee8 <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b082      	sub	sp, #8
 8013eec:	af02      	add	r7, sp, #8
    static bool initialized = false;

    if( initialized == false )
 8013eee:	4b14      	ldr	r3, [pc, #80]	@ (8013f40 <AbpJoinPendingStart+0x58>)
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	f083 0301 	eor.w	r3, r3, #1
 8013ef6:	b2db      	uxtb	r3, r3
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d00b      	beq.n	8013f14 <AbpJoinPendingStart+0x2c>
    {
        initialized = true;
 8013efc:	4b10      	ldr	r3, [pc, #64]	@ (8013f40 <AbpJoinPendingStart+0x58>)
 8013efe:	2201      	movs	r2, #1
 8013f00:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 8013f02:	2300      	movs	r3, #0
 8013f04:	9300      	str	r3, [sp, #0]
 8013f06:	4b0f      	ldr	r3, [pc, #60]	@ (8013f44 <AbpJoinPendingStart+0x5c>)
 8013f08:	2200      	movs	r2, #0
 8013f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8013f0e:	480e      	ldr	r0, [pc, #56]	@ (8013f48 <AbpJoinPendingStart+0x60>)
 8013f10:	f008 fc3c 	bl	801c78c <UTIL_TIMER_Create>
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 8013f14:	4b0d      	ldr	r3, [pc, #52]	@ (8013f4c <AbpJoinPendingStart+0x64>)
 8013f16:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8013f4c <AbpJoinPendingStart+0x64>)
 8013f20:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 8013f24:	4808      	ldr	r0, [pc, #32]	@ (8013f48 <AbpJoinPendingStart+0x60>)
 8013f26:	f008 fcd5 	bl	801c8d4 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 8013f2a:	210a      	movs	r1, #10
 8013f2c:	4806      	ldr	r0, [pc, #24]	@ (8013f48 <AbpJoinPendingStart+0x60>)
 8013f2e:	f008 fd41 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 8013f32:	4805      	ldr	r0, [pc, #20]	@ (8013f48 <AbpJoinPendingStart+0x60>)
 8013f34:	f008 fc60 	bl	801c7f8 <UTIL_TIMER_Start>
}
 8013f38:	bf00      	nop
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	20001aec 	.word	0x20001aec
 8013f44:	08013eb1 	.word	0x08013eb1
 8013f48:	20000e34 	.word	0x20000e34
 8013f4c:	20000998 	.word	0x20000998

08013f50 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b08a      	sub	sp, #40	@ 0x28
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013f58:	2302      	movs	r3, #2
 8013f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013f64:	2300      	movs	r3, #0
 8013f66:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d101      	bne.n	8013f72 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f6e:	2303      	movs	r3, #3
 8013f70:	e188      	b.n	8014284 <LoRaMacMlmeRequest+0x334>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2200      	movs	r2, #0
 8013f76:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8013f78:	f7fc fb14 	bl	80105a4 <LoRaMacIsBusy>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d001      	beq.n	8013f86 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8013f82:	2301      	movs	r3, #1
 8013f84:	e17e      	b.n	8014284 <LoRaMacMlmeRequest+0x334>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013f86:	f001 f99d 	bl	80152c4 <LoRaMacConfirmQueueIsFull>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d001      	beq.n	8013f94 <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8013f90:	2301      	movs	r3, #1
 8013f92:	e177      	b.n	8014284 <LoRaMacMlmeRequest+0x334>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013f94:	f001 f98a 	bl	80152ac <LoRaMacConfirmQueueGetCnt>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d104      	bne.n	8013fa8 <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013f9e:	2214      	movs	r2, #20
 8013fa0:	2100      	movs	r1, #0
 8013fa2:	48ba      	ldr	r0, [pc, #744]	@ (801428c <LoRaMacMlmeRequest+0x33c>)
 8013fa4:	f004 fde4 	bl	8018b70 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013fa8:	4bb9      	ldr	r3, [pc, #740]	@ (8014290 <LoRaMacMlmeRequest+0x340>)
 8013faa:	2201      	movs	r2, #1
 8013fac:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013fb0:	4ab7      	ldr	r2, [pc, #732]	@ (8014290 <LoRaMacMlmeRequest+0x340>)
 8013fb2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013fb6:	f043 0304 	orr.w	r3, r3, #4
 8013fba:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	781b      	ldrb	r3, [r3, #0]
 8013fc2:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	781b      	ldrb	r3, [r3, #0]
 8013fdc:	3b01      	subs	r3, #1
 8013fde:	2b0c      	cmp	r3, #12
 8013fe0:	f200 811e 	bhi.w	8014220 <LoRaMacMlmeRequest+0x2d0>
 8013fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8013fec <LoRaMacMlmeRequest+0x9c>)
 8013fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fea:	bf00      	nop
 8013fec:	08014021 	.word	0x08014021
 8013ff0:	08014221 	.word	0x08014221
 8013ff4:	08014221 	.word	0x08014221
 8013ff8:	08014221 	.word	0x08014221
 8013ffc:	08014105 	.word	0x08014105
 8014000:	08014129 	.word	0x08014129
 8014004:	08014221 	.word	0x08014221
 8014008:	08014221 	.word	0x08014221
 801400c:	08014147 	.word	0x08014147
 8014010:	08014221 	.word	0x08014221
 8014014:	080141ef 	.word	0x080141ef
 8014018:	08014183 	.word	0x08014183
 801401c:	080141cd 	.word	0x080141cd
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8014020:	4b9b      	ldr	r3, [pc, #620]	@ (8014290 <LoRaMacMlmeRequest+0x340>)
 8014022:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8014026:	f003 0320 	and.w	r3, r3, #32
 801402a:	2b00      	cmp	r3, #0
 801402c:	d001      	beq.n	8014032 <LoRaMacMlmeRequest+0xe2>
            {
                return LORAMAC_STATUS_BUSY;
 801402e:	2301      	movs	r3, #1
 8014030:	e128      	b.n	8014284 <LoRaMacMlmeRequest+0x334>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	791b      	ldrb	r3, [r3, #4]
 8014036:	2b02      	cmp	r3, #2
 8014038:	d135      	bne.n	80140a6 <LoRaMacMlmeRequest+0x156>
            {
                ResetMacParameters( false );
 801403a:	2000      	movs	r0, #0
 801403c:	f7fe f85a 	bl	80120f4 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014040:	4b94      	ldr	r3, [pc, #592]	@ (8014294 <LoRaMacMlmeRequest+0x344>)
 8014042:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	795b      	ldrb	r3, [r3, #5]
 801404a:	b25b      	sxtb	r3, r3
 801404c:	2200      	movs	r2, #0
 801404e:	4619      	mov	r1, r3
 8014050:	f002 fc4b 	bl	80168ea <RegionAlternateDr>
 8014054:	4603      	mov	r3, r0
 8014056:	461a      	mov	r2, r3
 8014058:	4b8e      	ldr	r3, [pc, #568]	@ (8014294 <LoRaMacMlmeRequest+0x344>)
 801405a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014064:	4b8b      	ldr	r3, [pc, #556]	@ (8014294 <LoRaMacMlmeRequest+0x344>)
 8014066:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801406a:	2307      	movs	r3, #7
 801406c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8014070:	20ff      	movs	r0, #255	@ 0xff
 8014072:	f7fd fdc3 	bl	8011bfc <SendReJoinReq>
 8014076:	4603      	mov	r3, r0
 8014078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 801407c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014080:	2b00      	cmp	r3, #0
 8014082:	f000 80cf 	beq.w	8014224 <LoRaMacMlmeRequest+0x2d4>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014086:	4b83      	ldr	r3, [pc, #524]	@ (8014294 <LoRaMacMlmeRequest+0x344>)
 8014088:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	795b      	ldrb	r3, [r3, #5]
 8014090:	b25b      	sxtb	r3, r3
 8014092:	2201      	movs	r2, #1
 8014094:	4619      	mov	r1, r3
 8014096:	f002 fc28 	bl	80168ea <RegionAlternateDr>
 801409a:	4603      	mov	r3, r0
 801409c:	461a      	mov	r2, r3
 801409e:	4b7d      	ldr	r3, [pc, #500]	@ (8014294 <LoRaMacMlmeRequest+0x344>)
 80140a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80140a4:	e0be      	b.n	8014224 <LoRaMacMlmeRequest+0x2d4>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	791b      	ldrb	r3, [r3, #4]
 80140aa:	2b01      	cmp	r3, #1
 80140ac:	f040 80ba 	bne.w	8014224 <LoRaMacMlmeRequest+0x2d4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80140b0:	4b78      	ldr	r3, [pc, #480]	@ (8014294 <LoRaMacMlmeRequest+0x344>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80140b8:	2302      	movs	r3, #2
 80140ba:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80140bc:	4b75      	ldr	r3, [pc, #468]	@ (8014294 <LoRaMacMlmeRequest+0x344>)
 80140be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80140c2:	f107 020c 	add.w	r2, r7, #12
 80140c6:	4611      	mov	r1, r2
 80140c8:	4618      	mov	r0, r3
 80140ca:	f002 fb14 	bl	80166f6 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	791a      	ldrb	r2, [r3, #4]
 80140d2:	4b70      	ldr	r3, [pc, #448]	@ (8014294 <LoRaMacMlmeRequest+0x344>)
 80140d4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80140d8:	2300      	movs	r3, #0
 80140da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80140de:	2301      	movs	r3, #1
 80140e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 80140e4:	f7fe fd56 	bl	8012b94 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80140e8:	4a69      	ldr	r2, [pc, #420]	@ (8014290 <LoRaMacMlmeRequest+0x340>)
 80140ea:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80140ee:	f043 0310 	orr.w	r3, r3, #16
 80140f2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                isAbpJoinPending = true;
 80140f6:	2301      	movs	r3, #1
 80140f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                status = LORAMAC_STATUS_OK;
 80140fc:	2300      	movs	r3, #0
 80140fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014102:	e08f      	b.n	8014224 <LoRaMacMlmeRequest+0x2d4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014104:	2300      	movs	r3, #0
 8014106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801410a:	f107 031c 	add.w	r3, r7, #28
 801410e:	2200      	movs	r2, #0
 8014110:	4619      	mov	r1, r3
 8014112:	2002      	movs	r0, #2
 8014114:	f000 fd26 	bl	8014b64 <LoRaMacCommandsAddCmd>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	f000 8084 	beq.w	8014228 <LoRaMacMlmeRequest+0x2d8>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014120:	2313      	movs	r3, #19
 8014122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8014126:	e07f      	b.n	8014228 <LoRaMacMlmeRequest+0x2d8>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	8898      	ldrh	r0, [r3, #4]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6899      	ldr	r1, [r3, #8]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014136:	b2db      	uxtb	r3, r3
 8014138:	461a      	mov	r2, r3
 801413a:	f7fe fb5b 	bl	80127f4 <SetTxContinuousWave>
 801413e:	4603      	mov	r3, r0
 8014140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014144:	e077      	b.n	8014236 <LoRaMacMlmeRequest+0x2e6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014146:	2300      	movs	r3, #0
 8014148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 801414c:	f107 0308 	add.w	r3, r7, #8
 8014150:	4619      	mov	r1, r3
 8014152:	200d      	movs	r0, #13
 8014154:	f000 fd86 	bl	8014c64 <LoRaMacCommandsGetCmd>
 8014158:	4603      	mov	r3, r0
 801415a:	2b00      	cmp	r3, #0
 801415c:	d103      	bne.n	8014166 <LoRaMacMlmeRequest+0x216>
            {
                status = LORAMAC_STATUS_OK;
 801415e:	2300      	movs	r3, #0
 8014160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8014164:	e062      	b.n	801422c <LoRaMacMlmeRequest+0x2dc>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014166:	f107 031c 	add.w	r3, r7, #28
 801416a:	2200      	movs	r2, #0
 801416c:	4619      	mov	r1, r3
 801416e:	200d      	movs	r0, #13
 8014170:	f000 fcf8 	bl	8014b64 <LoRaMacCommandsAddCmd>
 8014174:	4603      	mov	r3, r0
 8014176:	2b00      	cmp	r3, #0
 8014178:	d058      	beq.n	801422c <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801417a:	2313      	movs	r3, #19
 801417c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014180:	e054      	b.n	801422c <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014182:	4b44      	ldr	r3, [pc, #272]	@ (8014294 <LoRaMacMlmeRequest+0x344>)
 8014184:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8014188:	2b00      	cmp	r3, #0
 801418a:	d151      	bne.n	8014230 <LoRaMacMlmeRequest+0x2e0>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	791b      	ldrb	r3, [r3, #4]
 8014190:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	791b      	ldrb	r3, [r3, #4]
 8014198:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801419c:	b2db      	uxtb	r3, r3
 801419e:	4618      	mov	r0, r3
 80141a0:	f000 fb2a 	bl	80147f8 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80141a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80141a8:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80141aa:	2300      	movs	r3, #0
 80141ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80141b0:	f107 031c 	add.w	r3, r7, #28
 80141b4:	2201      	movs	r2, #1
 80141b6:	4619      	mov	r1, r3
 80141b8:	2010      	movs	r0, #16
 80141ba:	f000 fcd3 	bl	8014b64 <LoRaMacCommandsAddCmd>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d035      	beq.n	8014230 <LoRaMacMlmeRequest+0x2e0>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141c4:	2313      	movs	r3, #19
 80141c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80141ca:	e031      	b.n	8014230 <LoRaMacMlmeRequest+0x2e0>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80141cc:	2300      	movs	r3, #0
 80141ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80141d2:	f107 031c 	add.w	r3, r7, #28
 80141d6:	2200      	movs	r2, #0
 80141d8:	4619      	mov	r1, r3
 80141da:	2012      	movs	r0, #18
 80141dc:	f000 fcc2 	bl	8014b64 <LoRaMacCommandsAddCmd>
 80141e0:	4603      	mov	r3, r0
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d026      	beq.n	8014234 <LoRaMacMlmeRequest+0x2e4>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141e6:	2313      	movs	r3, #19
 80141e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80141ec:	e022      	b.n	8014234 <LoRaMacMlmeRequest+0x2e4>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80141ee:	2301      	movs	r3, #1
 80141f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80141f4:	f000 fab6 	bl	8014764 <LoRaMacClassBIsAcquisitionInProgress>
 80141f8:	4603      	mov	r3, r0
 80141fa:	f083 0301 	eor.w	r3, r3, #1
 80141fe:	b2db      	uxtb	r3, r3
 8014200:	2b00      	cmp	r3, #0
 8014202:	d009      	beq.n	8014218 <LoRaMacMlmeRequest+0x2c8>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014204:	2000      	movs	r0, #0
 8014206:	f000 fa8f 	bl	8014728 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801420a:	2000      	movs	r0, #0
 801420c:	f000 fab1 	bl	8014772 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014210:	2300      	movs	r3, #0
 8014212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014216:	e00e      	b.n	8014236 <LoRaMacMlmeRequest+0x2e6>
                status = LORAMAC_STATUS_BUSY;
 8014218:	2301      	movs	r3, #1
 801421a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801421e:	e00a      	b.n	8014236 <LoRaMacMlmeRequest+0x2e6>
        }
        default:
            break;
 8014220:	bf00      	nop
 8014222:	e008      	b.n	8014236 <LoRaMacMlmeRequest+0x2e6>
            break;
 8014224:	bf00      	nop
 8014226:	e006      	b.n	8014236 <LoRaMacMlmeRequest+0x2e6>
            break;
 8014228:	bf00      	nop
 801422a:	e004      	b.n	8014236 <LoRaMacMlmeRequest+0x2e6>
            break;
 801422c:	bf00      	nop
 801422e:	e002      	b.n	8014236 <LoRaMacMlmeRequest+0x2e6>
            break;
 8014230:	bf00      	nop
 8014232:	e000      	b.n	8014236 <LoRaMacMlmeRequest+0x2e6>
            break;
 8014234:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014236:	4b16      	ldr	r3, [pc, #88]	@ (8014290 <LoRaMacMlmeRequest+0x340>)
 8014238:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014244:	2b00      	cmp	r3, #0
 8014246:	d010      	beq.n	801426a <LoRaMacMlmeRequest+0x31a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014248:	f001 f830 	bl	80152ac <LoRaMacConfirmQueueGetCnt>
 801424c:	4603      	mov	r3, r0
 801424e:	2b00      	cmp	r3, #0
 8014250:	d116      	bne.n	8014280 <LoRaMacMlmeRequest+0x330>
        {
            MacCtx.NodeAckRequested = false;
 8014252:	4b0f      	ldr	r3, [pc, #60]	@ (8014290 <LoRaMacMlmeRequest+0x340>)
 8014254:	2200      	movs	r2, #0
 8014256:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801425a:	4a0d      	ldr	r2, [pc, #52]	@ (8014290 <LoRaMacMlmeRequest+0x340>)
 801425c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014260:	f023 0304 	bic.w	r3, r3, #4
 8014264:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8014268:	e00a      	b.n	8014280 <LoRaMacMlmeRequest+0x330>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801426a:	f107 0320 	add.w	r3, r7, #32
 801426e:	4618      	mov	r0, r3
 8014270:	f000 fec8 	bl	8015004 <LoRaMacConfirmQueueAdd>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        if( isAbpJoinPending == true )
 8014274:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014278:	2b00      	cmp	r3, #0
 801427a:	d001      	beq.n	8014280 <LoRaMacMlmeRequest+0x330>
        {
            AbpJoinPendingStart( );
 801427c:	f7ff fe34 	bl	8013ee8 <AbpJoinPendingStart>
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 8014280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8014284:	4618      	mov	r0, r3
 8014286:	3728      	adds	r7, #40	@ 0x28
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	20000dec 	.word	0x20000dec
 8014290:	20000998 	.word	0x20000998
 8014294:	20000ecc 	.word	0x20000ecc

08014298 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014298:	b5b0      	push	{r4, r5, r7, lr}
 801429a:	b092      	sub	sp, #72	@ 0x48
 801429c:	af02      	add	r7, sp, #8
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	460b      	mov	r3, r1
 80142a2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80142a4:	2302      	movs	r3, #2
 80142a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80142aa:	2300      	movs	r3, #0
 80142ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 80142b0:	2300      	movs	r3, #0
 80142b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80142b4:	2300      	movs	r3, #0
 80142b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80142ba:	2300      	movs	r3, #0
 80142bc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d101      	bne.n	80142ca <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80142c6:	2303      	movs	r3, #3
 80142c8:	e113      	b.n	80144f2 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2200      	movs	r2, #0
 80142ce:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80142d0:	f7fc f968 	bl	80105a4 <LoRaMacIsBusy>
 80142d4:	4603      	mov	r3, r0
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d001      	beq.n	80142de <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80142da:	2301      	movs	r3, #1
 80142dc:	e109      	b.n	80144f2 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f107 040c 	add.w	r4, r7, #12
 80142e4:	461d      	mov	r5, r3
 80142e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142ea:	682b      	ldr	r3, [r5, #0]
 80142ec:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80142ee:	2300      	movs	r3, #0
 80142f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80142f4:	2214      	movs	r2, #20
 80142f6:	2100      	movs	r1, #0
 80142f8:	4880      	ldr	r0, [pc, #512]	@ (80144fc <LoRaMacMcpsRequest+0x264>)
 80142fa:	f004 fc39 	bl	8018b70 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80142fe:	4b80      	ldr	r3, [pc, #512]	@ (8014500 <LoRaMacMcpsRequest+0x268>)
 8014300:	2201      	movs	r2, #1
 8014302:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8014306:	4b7f      	ldr	r3, [pc, #508]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 8014308:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801430c:	2b02      	cmp	r3, #2
 801430e:	d111      	bne.n	8014334 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8014310:	4b7c      	ldr	r3, [pc, #496]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 8014312:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8014316:	2b02      	cmp	r3, #2
 8014318:	d10c      	bne.n	8014334 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801431a:	4b7a      	ldr	r3, [pc, #488]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 801431c:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8014320:	f083 0301 	eor.w	r3, r3, #1
 8014324:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8014326:	2b00      	cmp	r3, #0
 8014328:	d004      	beq.n	8014334 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801432a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801432c:	2b00      	cmp	r3, #0
 801432e:	d101      	bne.n	8014334 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8014330:	2301      	movs	r3, #1
 8014332:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8014334:	7b3b      	ldrb	r3, [r7, #12]
 8014336:	2b03      	cmp	r3, #3
 8014338:	d030      	beq.n	801439c <LoRaMacMcpsRequest+0x104>
 801433a:	2b03      	cmp	r3, #3
 801433c:	dc3f      	bgt.n	80143be <LoRaMacMcpsRequest+0x126>
 801433e:	2b00      	cmp	r3, #0
 8014340:	d002      	beq.n	8014348 <LoRaMacMcpsRequest+0xb0>
 8014342:	2b01      	cmp	r3, #1
 8014344:	d015      	beq.n	8014372 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014346:	e03a      	b.n	80143be <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8014348:	2301      	movs	r3, #1
 801434a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801434e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014352:	2202      	movs	r2, #2
 8014354:	f362 1347 	bfi	r3, r2, #5, #3
 8014358:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 801435c:	7c3b      	ldrb	r3, [r7, #16]
 801435e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8014366:	8b3b      	ldrh	r3, [r7, #24]
 8014368:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801436a:	7ebb      	ldrb	r3, [r7, #26]
 801436c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8014370:	e026      	b.n	80143c0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014372:	2301      	movs	r3, #1
 8014374:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014378:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801437c:	2204      	movs	r2, #4
 801437e:	f362 1347 	bfi	r3, r2, #5, #3
 8014382:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8014386:	7c3b      	ldrb	r3, [r7, #16]
 8014388:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801438c:	697b      	ldr	r3, [r7, #20]
 801438e:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8014390:	8b3b      	ldrh	r3, [r7, #24]
 8014392:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8014394:	7ebb      	ldrb	r3, [r7, #26]
 8014396:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801439a:	e011      	b.n	80143c0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801439c:	2301      	movs	r3, #1
 801439e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80143a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80143a6:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80143aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80143b2:	8abb      	ldrh	r3, [r7, #20]
 80143b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80143b6:	7dbb      	ldrb	r3, [r7, #22]
 80143b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80143bc:	e000      	b.n	80143c0 <LoRaMacMcpsRequest+0x128>
            break;
 80143be:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80143c0:	2302      	movs	r3, #2
 80143c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80143c6:	4b4f      	ldr	r3, [pc, #316]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 80143c8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80143cc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143d0:	4b4c      	ldr	r3, [pc, #304]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 80143d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80143d6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80143da:	4611      	mov	r1, r2
 80143dc:	4618      	mov	r0, r3
 80143de:	f002 f961 	bl	80166a4 <RegionGetPhyParam>
 80143e2:	4603      	mov	r3, r0
 80143e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80143e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e8:	b25b      	sxtb	r3, r3
 80143ea:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80143ee:	4293      	cmp	r3, r2
 80143f0:	bfb8      	it	lt
 80143f2:	4613      	movlt	r3, r2
 80143f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80143f8:	4b42      	ldr	r3, [pc, #264]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 80143fa:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80143fe:	4a41      	ldr	r2, [pc, #260]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 8014400:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8014404:	4a3f      	ldr	r2, [pc, #252]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 8014406:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 801440a:	4618      	mov	r0, r3
 801440c:	f7fc fa66 	bl	80108dc <CheckForMinimumAbpDatarate>
 8014410:	4603      	mov	r3, r0
 8014412:	2b00      	cmp	r3, #0
 8014414:	d002      	beq.n	801441c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8014416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014418:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 801441c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8014420:	2b00      	cmp	r3, #0
 8014422:	d05f      	beq.n	80144e4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014424:	4b37      	ldr	r3, [pc, #220]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 8014426:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801442a:	f083 0301 	eor.w	r3, r3, #1
 801442e:	b2db      	uxtb	r3, r3
 8014430:	2b00      	cmp	r3, #0
 8014432:	d10e      	bne.n	8014452 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8014434:	4b33      	ldr	r3, [pc, #204]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 8014436:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801443a:	4a32      	ldr	r2, [pc, #200]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 801443c:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8014440:	4a30      	ldr	r2, [pc, #192]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 8014442:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8014446:	4618      	mov	r0, r3
 8014448:	f7fc fa48 	bl	80108dc <CheckForMinimumAbpDatarate>
 801444c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801444e:	2b00      	cmp	r3, #0
 8014450:	d01c      	beq.n	801448c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8014452:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8014456:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801445a:	4b2a      	ldr	r3, [pc, #168]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 801445c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8014460:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014464:	4b27      	ldr	r3, [pc, #156]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 8014466:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801446a:	f107 0120 	add.w	r1, r7, #32
 801446e:	2205      	movs	r2, #5
 8014470:	4618      	mov	r0, r3
 8014472:	f002 f952 	bl	801671a <RegionVerify>
 8014476:	4603      	mov	r3, r0
 8014478:	2b00      	cmp	r3, #0
 801447a:	d005      	beq.n	8014488 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801447c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8014480:	4b20      	ldr	r3, [pc, #128]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 8014482:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8014486:	e001      	b.n	801448c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014488:	2303      	movs	r3, #3
 801448a:	e032      	b.n	80144f2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801448c:	4b1d      	ldr	r3, [pc, #116]	@ (8014504 <LoRaMacMcpsRequest+0x26c>)
 801448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014492:	4a1b      	ldr	r2, [pc, #108]	@ (8014500 <LoRaMacMcpsRequest+0x268>)
 8014494:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8014498:	4611      	mov	r1, r2
 801449a:	4618      	mov	r0, r3
 801449c:	f7fc fb0a 	bl	8010ab4 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80144a0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80144a2:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80144a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80144aa:	78fb      	ldrb	r3, [r7, #3]
 80144ac:	9300      	str	r3, [sp, #0]
 80144ae:	4613      	mov	r3, r2
 80144b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144b2:	f7fd fac1 	bl	8011a38 <Send>
 80144b6:	4603      	mov	r3, r0
 80144b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80144bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d10b      	bne.n	80144dc <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80144c4:	7b3a      	ldrb	r2, [r7, #12]
 80144c6:	4b0e      	ldr	r3, [pc, #56]	@ (8014500 <LoRaMacMcpsRequest+0x268>)
 80144c8:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80144cc:	4a0c      	ldr	r2, [pc, #48]	@ (8014500 <LoRaMacMcpsRequest+0x268>)
 80144ce:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80144d2:	f043 0301 	orr.w	r3, r3, #1
 80144d6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80144da:	e003      	b.n	80144e4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80144dc:	4b08      	ldr	r3, [pc, #32]	@ (8014500 <LoRaMacMcpsRequest+0x268>)
 80144de:	2200      	movs	r2, #0
 80144e0:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80144e4:	4b06      	ldr	r3, [pc, #24]	@ (8014500 <LoRaMacMcpsRequest+0x268>)
 80144e6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	611a      	str	r2, [r3, #16]

    return status;
 80144ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80144f2:	4618      	mov	r0, r3
 80144f4:	3740      	adds	r7, #64	@ 0x40
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bdb0      	pop	{r4, r5, r7, pc}
 80144fa:	bf00      	nop
 80144fc:	20000dd8 	.word	0x20000dd8
 8014500:	20000998 	.word	0x20000998
 8014504:	20000ecc 	.word	0x20000ecc

08014508 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b084      	sub	sp, #16
 801450c:	af00      	add	r7, sp, #0
 801450e:	4603      	mov	r3, r0
 8014510:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8014512:	79fb      	ldrb	r3, [r7, #7]
 8014514:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8014516:	4b0d      	ldr	r3, [pc, #52]	@ (801454c <LoRaMacTestSetDutyCycleOn+0x44>)
 8014518:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801451c:	f107 010c 	add.w	r1, r7, #12
 8014520:	220f      	movs	r2, #15
 8014522:	4618      	mov	r0, r3
 8014524:	f002 f8f9 	bl	801671a <RegionVerify>
 8014528:	4603      	mov	r3, r0
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00a      	beq.n	8014544 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801452e:	4a07      	ldr	r2, [pc, #28]	@ (801454c <LoRaMacTestSetDutyCycleOn+0x44>)
 8014530:	79fb      	ldrb	r3, [r7, #7]
 8014532:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8014536:	4a06      	ldr	r2, [pc, #24]	@ (8014550 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014538:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801453c:	f043 0320 	orr.w	r3, r3, #32
 8014540:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8014544:	bf00      	nop
 8014546:	3710      	adds	r7, #16
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	20000ecc 	.word	0x20000ecc
 8014550:	20000998 	.word	0x20000998

08014554 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8014554:	b580      	push	{r7, lr}
 8014556:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8014558:	f7fe fe30 	bl	80131bc <LoRaMacStop>
 801455c:	4603      	mov	r3, r0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d112      	bne.n	8014588 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8014562:	480b      	ldr	r0, [pc, #44]	@ (8014590 <LoRaMacDeInitialization+0x3c>)
 8014564:	f008 f9b6 	bl	801c8d4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8014568:	480a      	ldr	r0, [pc, #40]	@ (8014594 <LoRaMacDeInitialization+0x40>)
 801456a:	f008 f9b3 	bl	801c8d4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801456e:	480a      	ldr	r0, [pc, #40]	@ (8014598 <LoRaMacDeInitialization+0x44>)
 8014570:	f008 f9b0 	bl	801c8d4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8014574:	f000 f94a 	bl	801480c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8014578:	2000      	movs	r0, #0
 801457a:	f7fd fdbb 	bl	80120f4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801457e:	4b07      	ldr	r3, [pc, #28]	@ (801459c <LoRaMacDeInitialization+0x48>)
 8014580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014582:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8014584:	2300      	movs	r3, #0
 8014586:	e000      	b.n	801458a <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8014588:	2301      	movs	r3, #1
    }
}
 801458a:	4618      	mov	r0, r3
 801458c:	bd80      	pop	{r7, pc}
 801458e:	bf00      	nop
 8014590:	20000d00 	.word	0x20000d00
 8014594:	20000d18 	.word	0x20000d18
 8014598:	20000d30 	.word	0x20000d30
 801459c:	08020ce0 	.word	0x08020ce0

080145a0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b08c      	sub	sp, #48	@ 0x30
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	60f8      	str	r0, [r7, #12]
 80145a8:	60b9      	str	r1, [r7, #8]
 80145aa:	607a      	str	r2, [r7, #4]
 80145ac:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80145ae:	2300      	movs	r3, #0
 80145b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	7b1b      	ldrb	r3, [r3, #12]
 80145b8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	7b5b      	ldrb	r3, [r3, #13]
 80145c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	7b9b      	ldrb	r3, [r3, #14]
 80145c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	685a      	ldr	r2, [r3, #4]
 80145d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145d2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	785b      	ldrb	r3, [r3, #1]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	f000 8088 	beq.w	80146ee <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80145de:	2302      	movs	r3, #2
 80145e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	7bdb      	ldrb	r3, [r3, #15]
 80145e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	7c1b      	ldrb	r3, [r3, #16]
 80145f0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80145f4:	4611      	mov	r1, r2
 80145f6:	4618      	mov	r0, r3
 80145f8:	f002 f854 	bl	80166a4 <RegionGetPhyParam>
 80145fc:	4603      	mov	r3, r0
 80145fe:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8014600:	6a3b      	ldr	r3, [r7, #32]
 8014602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8014606:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 801460a:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 801460e:	4293      	cmp	r3, r2
 8014610:	bfb8      	it	lt
 8014612:	4613      	movlt	r3, r2
 8014614:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	685b      	ldr	r3, [r3, #4]
 801461c:	68fa      	ldr	r2, [r7, #12]
 801461e:	8912      	ldrh	r2, [r2, #8]
 8014620:	4293      	cmp	r3, r2
 8014622:	d302      	bcc.n	801462a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8014624:	2301      	movs	r3, #1
 8014626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	68fa      	ldr	r2, [r7, #12]
 8014630:	8912      	ldrh	r2, [r2, #8]
 8014632:	4611      	mov	r1, r2
 8014634:	68fa      	ldr	r2, [r7, #12]
 8014636:	8952      	ldrh	r2, [r2, #10]
 8014638:	440a      	add	r2, r1
 801463a:	4293      	cmp	r3, r2
 801463c:	d30f      	bcc.n	801465e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801463e:	230a      	movs	r3, #10
 8014640:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	7c1b      	ldrb	r3, [r3, #16]
 8014648:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801464c:	4611      	mov	r1, r2
 801464e:	4618      	mov	r0, r3
 8014650:	f002 f828 	bl	80166a4 <RegionGetPhyParam>
 8014654:	4603      	mov	r3, r0
 8014656:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8014658:	6a3b      	ldr	r3, [r7, #32]
 801465a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	68fa      	ldr	r2, [r7, #12]
 8014664:	8912      	ldrh	r2, [r2, #8]
 8014666:	4611      	mov	r1, r2
 8014668:	68fa      	ldr	r2, [r7, #12]
 801466a:	8952      	ldrh	r2, [r2, #10]
 801466c:	0052      	lsls	r2, r2, #1
 801466e:	440a      	add	r2, r1
 8014670:	4293      	cmp	r3, r2
 8014672:	d33c      	bcc.n	80146ee <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	68fa      	ldr	r2, [r7, #12]
 801467a:	8912      	ldrh	r2, [r2, #8]
 801467c:	1a9b      	subs	r3, r3, r2
 801467e:	68fa      	ldr	r2, [r7, #12]
 8014680:	8952      	ldrh	r2, [r2, #10]
 8014682:	fbb3 f1f2 	udiv	r1, r3, r2
 8014686:	fb01 f202 	mul.w	r2, r1, r2
 801468a:	1a9b      	subs	r3, r3, r2
 801468c:	2b00      	cmp	r3, #0
 801468e:	d12e      	bne.n	80146ee <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8014690:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8014694:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8014698:	429a      	cmp	r2, r3
 801469a:	d110      	bne.n	80146be <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d009      	beq.n	80146b8 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80146a4:	2302      	movs	r3, #2
 80146a6:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	7c1b      	ldrb	r3, [r3, #16]
 80146ac:	f107 0210 	add.w	r2, r7, #16
 80146b0:	4611      	mov	r1, r2
 80146b2:	4618      	mov	r0, r3
 80146b4:	f002 f81f 	bl	80166f6 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80146b8:	2301      	movs	r3, #1
 80146ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80146be:	2321      	movs	r3, #33	@ 0x21
 80146c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 80146c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80146c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	7bdb      	ldrb	r3, [r3, #15]
 80146d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	7c1b      	ldrb	r3, [r3, #16]
 80146d8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80146dc:	4611      	mov	r1, r2
 80146de:	4618      	mov	r0, r3
 80146e0:	f001 ffe0 	bl	80166a4 <RegionGetPhyParam>
 80146e4:	4603      	mov	r3, r0
 80146e6:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80146e8:	6a3b      	ldr	r3, [r7, #32]
 80146ea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80146f4:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80146fc:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014704:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8014706:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801470a:	4618      	mov	r0, r3
 801470c:	3730      	adds	r7, #48	@ 0x30
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}

08014712 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8014712:	b480      	push	{r7}
 8014714:	b085      	sub	sp, #20
 8014716:	af00      	add	r7, sp, #0
 8014718:	60f8      	str	r0, [r7, #12]
 801471a:	60b9      	str	r1, [r7, #8]
 801471c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801471e:	bf00      	nop
 8014720:	3714      	adds	r7, #20
 8014722:	46bd      	mov	sp, r7
 8014724:	bc80      	pop	{r7}
 8014726:	4770      	bx	lr

08014728 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014728:	b480      	push	{r7}
 801472a:	b083      	sub	sp, #12
 801472c:	af00      	add	r7, sp, #0
 801472e:	4603      	mov	r3, r0
 8014730:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014732:	bf00      	nop
 8014734:	370c      	adds	r7, #12
 8014736:	46bd      	mov	sp, r7
 8014738:	bc80      	pop	{r7}
 801473a:	4770      	bx	lr

0801473c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
 8014742:	4603      	mov	r3, r0
 8014744:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014746:	bf00      	nop
 8014748:	370c      	adds	r7, #12
 801474a:	46bd      	mov	sp, r7
 801474c:	bc80      	pop	{r7}
 801474e:	4770      	bx	lr

08014750 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014750:	b480      	push	{r7}
 8014752:	b083      	sub	sp, #12
 8014754:	af00      	add	r7, sp, #0
 8014756:	4603      	mov	r3, r0
 8014758:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801475a:	bf00      	nop
 801475c:	370c      	adds	r7, #12
 801475e:	46bd      	mov	sp, r7
 8014760:	bc80      	pop	{r7}
 8014762:	4770      	bx	lr

08014764 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014764:	b480      	push	{r7}
 8014766:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014768:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801476a:	4618      	mov	r0, r3
 801476c:	46bd      	mov	sp, r7
 801476e:	bc80      	pop	{r7}
 8014770:	4770      	bx	lr

08014772 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014772:	b480      	push	{r7}
 8014774:	b083      	sub	sp, #12
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801477a:	bf00      	nop
 801477c:	370c      	adds	r7, #12
 801477e:	46bd      	mov	sp, r7
 8014780:	bc80      	pop	{r7}
 8014782:	4770      	bx	lr

08014784 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014784:	b480      	push	{r7}
 8014786:	b083      	sub	sp, #12
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801478c:	bf00      	nop
 801478e:	370c      	adds	r7, #12
 8014790:	46bd      	mov	sp, r7
 8014792:	bc80      	pop	{r7}
 8014794:	4770      	bx	lr

08014796 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014796:	b480      	push	{r7}
 8014798:	b083      	sub	sp, #12
 801479a:	af00      	add	r7, sp, #0
 801479c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801479e:	bf00      	nop
 80147a0:	370c      	adds	r7, #12
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bc80      	pop	{r7}
 80147a6:	4770      	bx	lr

080147a8 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80147a8:	b480      	push	{r7}
 80147aa:	b083      	sub	sp, #12
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	460b      	mov	r3, r1
 80147b2:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80147b4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147b6:	4618      	mov	r0, r3
 80147b8:	370c      	adds	r7, #12
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bc80      	pop	{r7}
 80147be:	4770      	bx	lr

080147c0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80147c0:	b480      	push	{r7}
 80147c2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147c4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bc80      	pop	{r7}
 80147cc:	4770      	bx	lr

080147ce <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80147ce:	b480      	push	{r7}
 80147d0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147d2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bc80      	pop	{r7}
 80147da:	4770      	bx	lr

080147dc <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80147dc:	b480      	push	{r7}
 80147de:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147e0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bc80      	pop	{r7}
 80147e8:	4770      	bx	lr

080147ea <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80147ea:	b480      	push	{r7}
 80147ec:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147ee:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147f0:	4618      	mov	r0, r3
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bc80      	pop	{r7}
 80147f6:	4770      	bx	lr

080147f8 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	4603      	mov	r3, r0
 8014800:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014802:	bf00      	nop
 8014804:	370c      	adds	r7, #12
 8014806:	46bd      	mov	sp, r7
 8014808:	bc80      	pop	{r7}
 801480a:	4770      	bx	lr

0801480c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801480c:	b480      	push	{r7}
 801480e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014810:	bf00      	nop
 8014812:	46bd      	mov	sp, r7
 8014814:	bc80      	pop	{r7}
 8014816:	4770      	bx	lr

08014818 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014818:	b480      	push	{r7}
 801481a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801481c:	bf00      	nop
 801481e:	46bd      	mov	sp, r7
 8014820:	bc80      	pop	{r7}
 8014822:	4770      	bx	lr

08014824 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014824:	b480      	push	{r7}
 8014826:	b083      	sub	sp, #12
 8014828:	af00      	add	r7, sp, #0
 801482a:	4603      	mov	r3, r0
 801482c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801482e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014830:	4618      	mov	r0, r3
 8014832:	370c      	adds	r7, #12
 8014834:	46bd      	mov	sp, r7
 8014836:	bc80      	pop	{r7}
 8014838:	4770      	bx	lr

0801483a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801483a:	b480      	push	{r7}
 801483c:	b083      	sub	sp, #12
 801483e:	af00      	add	r7, sp, #0
 8014840:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014842:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014844:	4618      	mov	r0, r3
 8014846:	370c      	adds	r7, #12
 8014848:	46bd      	mov	sp, r7
 801484a:	bc80      	pop	{r7}
 801484c:	4770      	bx	lr

0801484e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801484e:	b480      	push	{r7}
 8014850:	b083      	sub	sp, #12
 8014852:	af00      	add	r7, sp, #0
 8014854:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014856:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014858:	4618      	mov	r0, r3
 801485a:	370c      	adds	r7, #12
 801485c:	46bd      	mov	sp, r7
 801485e:	bc80      	pop	{r7}
 8014860:	4770      	bx	lr

08014862 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014862:	b480      	push	{r7}
 8014864:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014866:	bf00      	nop
 8014868:	46bd      	mov	sp, r7
 801486a:	bc80      	pop	{r7}
 801486c:	4770      	bx	lr

0801486e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801486e:	b480      	push	{r7}
 8014870:	b083      	sub	sp, #12
 8014872:	af00      	add	r7, sp, #0
 8014874:	4603      	mov	r3, r0
 8014876:	6039      	str	r1, [r7, #0]
 8014878:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801487a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801487c:	4618      	mov	r0, r3
 801487e:	370c      	adds	r7, #12
 8014880:	46bd      	mov	sp, r7
 8014882:	bc80      	pop	{r7}
 8014884:	4770      	bx	lr

08014886 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014886:	b480      	push	{r7}
 8014888:	b083      	sub	sp, #12
 801488a:	af00      	add	r7, sp, #0
 801488c:	4603      	mov	r3, r0
 801488e:	603a      	str	r2, [r7, #0]
 8014890:	80fb      	strh	r3, [r7, #6]
 8014892:	460b      	mov	r3, r1
 8014894:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014896:	bf00      	nop
 8014898:	370c      	adds	r7, #12
 801489a:	46bd      	mov	sp, r7
 801489c:	bc80      	pop	{r7}
 801489e:	4770      	bx	lr

080148a0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80148a0:	b480      	push	{r7}
 80148a2:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148a4:	bf00      	nop
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bc80      	pop	{r7}
 80148aa:	4770      	bx	lr

080148ac <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80148ac:	b480      	push	{r7}
 80148ae:	b083      	sub	sp, #12
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80148b4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	370c      	adds	r7, #12
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bc80      	pop	{r7}
 80148be:	4770      	bx	lr

080148c0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80148c0:	b480      	push	{r7}
 80148c2:	b083      	sub	sp, #12
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80148c8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	370c      	adds	r7, #12
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bc80      	pop	{r7}
 80148d2:	4770      	bx	lr

080148d4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80148d4:	b480      	push	{r7}
 80148d6:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148d8:	bf00      	nop
 80148da:	46bd      	mov	sp, r7
 80148dc:	bc80      	pop	{r7}
 80148de:	4770      	bx	lr

080148e0 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80148e0:	b480      	push	{r7}
 80148e2:	b083      	sub	sp, #12
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	460b      	mov	r3, r1
 80148ea:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148ec:	bf00      	nop
 80148ee:	370c      	adds	r7, #12
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bc80      	pop	{r7}
 80148f4:	4770      	bx	lr

080148f6 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80148f6:	b480      	push	{r7}
 80148f8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148fa:	bf00      	nop
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bc80      	pop	{r7}
 8014900:	4770      	bx	lr

08014902 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014902:	b480      	push	{r7}
 8014904:	b085      	sub	sp, #20
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801490e:	2300      	movs	r3, #0
 8014910:	81fb      	strh	r3, [r7, #14]
 8014912:	e00a      	b.n	801492a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8014914:	89fb      	ldrh	r3, [r7, #14]
 8014916:	68ba      	ldr	r2, [r7, #8]
 8014918:	4413      	add	r3, r2
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d001      	beq.n	8014924 <IsSlotFree+0x22>
        {
            return false;
 8014920:	2300      	movs	r3, #0
 8014922:	e006      	b.n	8014932 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014924:	89fb      	ldrh	r3, [r7, #14]
 8014926:	3301      	adds	r3, #1
 8014928:	81fb      	strh	r3, [r7, #14]
 801492a:	89fb      	ldrh	r3, [r7, #14]
 801492c:	2b0f      	cmp	r3, #15
 801492e:	d9f1      	bls.n	8014914 <IsSlotFree+0x12>
        }
    }
    return true;
 8014930:	2301      	movs	r3, #1
}
 8014932:	4618      	mov	r0, r3
 8014934:	3714      	adds	r7, #20
 8014936:	46bd      	mov	sp, r7
 8014938:	bc80      	pop	{r7}
 801493a:	4770      	bx	lr

0801493c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b082      	sub	sp, #8
 8014940:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014942:	2300      	movs	r3, #0
 8014944:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014946:	e007      	b.n	8014958 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8014948:	79fb      	ldrb	r3, [r7, #7]
 801494a:	3301      	adds	r3, #1
 801494c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801494e:	79fb      	ldrb	r3, [r7, #7]
 8014950:	2b20      	cmp	r3, #32
 8014952:	d101      	bne.n	8014958 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014954:	2300      	movs	r3, #0
 8014956:	e012      	b.n	801497e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014958:	79fb      	ldrb	r3, [r7, #7]
 801495a:	011b      	lsls	r3, r3, #4
 801495c:	3308      	adds	r3, #8
 801495e:	4a0a      	ldr	r2, [pc, #40]	@ (8014988 <MallocNewMacCommandSlot+0x4c>)
 8014960:	4413      	add	r3, r2
 8014962:	4618      	mov	r0, r3
 8014964:	f7ff ffcd 	bl	8014902 <IsSlotFree>
 8014968:	4603      	mov	r3, r0
 801496a:	f083 0301 	eor.w	r3, r3, #1
 801496e:	b2db      	uxtb	r3, r3
 8014970:	2b00      	cmp	r3, #0
 8014972:	d1e9      	bne.n	8014948 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014974:	79fb      	ldrb	r3, [r7, #7]
 8014976:	011b      	lsls	r3, r3, #4
 8014978:	3308      	adds	r3, #8
 801497a:	4a03      	ldr	r2, [pc, #12]	@ (8014988 <MallocNewMacCommandSlot+0x4c>)
 801497c:	4413      	add	r3, r2
}
 801497e:	4618      	mov	r0, r3
 8014980:	3708      	adds	r7, #8
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
 8014986:	bf00      	nop
 8014988:	20001af0 	.word	0x20001af0

0801498c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d101      	bne.n	801499e <FreeMacCommandSlot+0x12>
    {
        return false;
 801499a:	2300      	movs	r3, #0
 801499c:	e005      	b.n	80149aa <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801499e:	2210      	movs	r2, #16
 80149a0:	2100      	movs	r1, #0
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f004 f8e4 	bl	8018b70 <memset1>

    return true;
 80149a8:	2301      	movs	r3, #1
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3708      	adds	r7, #8
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}

080149b2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80149b2:	b480      	push	{r7}
 80149b4:	b083      	sub	sp, #12
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d101      	bne.n	80149c4 <LinkedListInit+0x12>
    {
        return false;
 80149c0:	2300      	movs	r3, #0
 80149c2:	e006      	b.n	80149d2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2200      	movs	r2, #0
 80149c8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2200      	movs	r2, #0
 80149ce:	605a      	str	r2, [r3, #4]

    return true;
 80149d0:	2301      	movs	r3, #1
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	370c      	adds	r7, #12
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bc80      	pop	{r7}
 80149da:	4770      	bx	lr

080149dc <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80149dc:	b480      	push	{r7}
 80149de:	b083      	sub	sp, #12
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d002      	beq.n	80149f2 <LinkedListAdd+0x16>
 80149ec:	683b      	ldr	r3, [r7, #0]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d101      	bne.n	80149f6 <LinkedListAdd+0x1a>
    {
        return false;
 80149f2:	2300      	movs	r3, #0
 80149f4:	e015      	b.n	8014a22 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d102      	bne.n	8014a04 <LinkedListAdd+0x28>
    {
        list->First = element;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	683a      	ldr	r2, [r7, #0]
 8014a02:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	685b      	ldr	r3, [r3, #4]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d003      	beq.n	8014a14 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	683a      	ldr	r2, [r7, #0]
 8014a12:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	2200      	movs	r2, #0
 8014a18:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	683a      	ldr	r2, [r7, #0]
 8014a1e:	605a      	str	r2, [r3, #4]

    return true;
 8014a20:	2301      	movs	r3, #1
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	370c      	adds	r7, #12
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bc80      	pop	{r7}
 8014a2a:	4770      	bx	lr

08014a2c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b085      	sub	sp, #20
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <LinkedListGetPrevious+0x16>
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d101      	bne.n	8014a46 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014a42:	2300      	movs	r3, #0
 8014a44:	e016      	b.n	8014a74 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014a4c:	683a      	ldr	r2, [r7, #0]
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	429a      	cmp	r2, r3
 8014a52:	d00c      	beq.n	8014a6e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014a54:	e002      	b.n	8014a5c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d007      	beq.n	8014a72 <LinkedListGetPrevious+0x46>
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	683a      	ldr	r2, [r7, #0]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d1f4      	bne.n	8014a56 <LinkedListGetPrevious+0x2a>
 8014a6c:	e001      	b.n	8014a72 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014a72:	68fb      	ldr	r3, [r7, #12]
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3714      	adds	r7, #20
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bc80      	pop	{r7}
 8014a7c:	4770      	bx	lr

08014a7e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b084      	sub	sp, #16
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6078      	str	r0, [r7, #4]
 8014a86:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d002      	beq.n	8014a94 <LinkedListRemove+0x16>
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d101      	bne.n	8014a98 <LinkedListRemove+0x1a>
    {
        return false;
 8014a94:	2300      	movs	r3, #0
 8014a96:	e020      	b.n	8014ada <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014a98:	6839      	ldr	r1, [r7, #0]
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f7ff ffc6 	bl	8014a2c <LinkedListGetPrevious>
 8014aa0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	683a      	ldr	r2, [r7, #0]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d103      	bne.n	8014ab4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	685b      	ldr	r3, [r3, #4]
 8014ab8:	683a      	ldr	r2, [r7, #0]
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d102      	bne.n	8014ac4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	68fa      	ldr	r2, [r7, #12]
 8014ac2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d003      	beq.n	8014ad2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	601a      	str	r2, [r3, #0]

    return true;
 8014ad8:	2301      	movs	r3, #1
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3710      	adds	r7, #16
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
	...

08014ae4 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b083      	sub	sp, #12
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	4603      	mov	r3, r0
 8014aec:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8014aee:	79fb      	ldrb	r3, [r7, #7]
 8014af0:	2b11      	cmp	r3, #17
 8014af2:	bf8c      	ite	hi
 8014af4:	2201      	movhi	r2, #1
 8014af6:	2200      	movls	r2, #0
 8014af8:	b2d2      	uxtb	r2, r2
 8014afa:	2a00      	cmp	r2, #0
 8014afc:	d10d      	bne.n	8014b1a <IsSticky+0x36>
 8014afe:	4a0a      	ldr	r2, [pc, #40]	@ (8014b28 <IsSticky+0x44>)
 8014b00:	fa22 f303 	lsr.w	r3, r2, r3
 8014b04:	f003 0301 	and.w	r3, r3, #1
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	bf14      	ite	ne
 8014b0c:	2301      	movne	r3, #1
 8014b0e:	2300      	moveq	r3, #0
 8014b10:	b2db      	uxtb	r3, r3
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d001      	beq.n	8014b1a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8014b16:	2301      	movs	r3, #1
 8014b18:	e000      	b.n	8014b1c <IsSticky+0x38>
        default:
            return false;
 8014b1a:	2300      	movs	r3, #0
    }
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	370c      	adds	r7, #12
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bc80      	pop	{r7}
 8014b24:	4770      	bx	lr
 8014b26:	bf00      	nop
 8014b28:	00020720 	.word	0x00020720

08014b2c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	b083      	sub	sp, #12
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	4603      	mov	r3, r0
 8014b34:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8014b36:	2300      	movs	r3, #0
    }
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	370c      	adds	r7, #12
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bc80      	pop	{r7}
 8014b40:	4770      	bx	lr
	...

08014b44 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8014b48:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8014b4c:	2100      	movs	r1, #0
 8014b4e:	4804      	ldr	r0, [pc, #16]	@ (8014b60 <LoRaMacCommandsInit+0x1c>)
 8014b50:	f004 f80e 	bl	8018b70 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014b54:	4802      	ldr	r0, [pc, #8]	@ (8014b60 <LoRaMacCommandsInit+0x1c>)
 8014b56:	f7ff ff2c 	bl	80149b2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8014b5a:	2300      	movs	r3, #0
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	20001af0 	.word	0x20001af0

08014b64 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b086      	sub	sp, #24
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	607a      	str	r2, [r7, #4]
 8014b70:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d101      	bne.n	8014b7c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014b78:	2301      	movs	r3, #1
 8014b7a:	e03b      	b.n	8014bf4 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014b7c:	f7ff fede 	bl	801493c <MallocNewMacCommandSlot>
 8014b80:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d101      	bne.n	8014b8c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014b88:	2302      	movs	r3, #2
 8014b8a:	e033      	b.n	8014bf4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014b8c:	6979      	ldr	r1, [r7, #20]
 8014b8e:	481b      	ldr	r0, [pc, #108]	@ (8014bfc <LoRaMacCommandsAddCmd+0x98>)
 8014b90:	f7ff ff24 	bl	80149dc <LinkedListAdd>
 8014b94:	4603      	mov	r3, r0
 8014b96:	f083 0301 	eor.w	r3, r3, #1
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d001      	beq.n	8014ba4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014ba0:	2305      	movs	r3, #5
 8014ba2:	e027      	b.n	8014bf4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	7bfa      	ldrb	r2, [r7, #15]
 8014ba8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	3305      	adds	r3, #5
 8014bb4:	687a      	ldr	r2, [r7, #4]
 8014bb6:	b292      	uxth	r2, r2
 8014bb8:	68b9      	ldr	r1, [r7, #8]
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f003 ff9d 	bl	8018afa <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014bc0:	7bfb      	ldrb	r3, [r7, #15]
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7ff ff8e 	bl	8014ae4 <IsSticky>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	461a      	mov	r2, r3
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8014bd0:	7bfb      	ldrb	r3, [r7, #15]
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f7ff ffaa 	bl	8014b2c <IsConfirmationRequired>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	461a      	mov	r2, r3
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014be0:	4b06      	ldr	r3, [pc, #24]	@ (8014bfc <LoRaMacCommandsAddCmd+0x98>)
 8014be2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	4413      	add	r3, r2
 8014bea:	3301      	adds	r3, #1
 8014bec:	4a03      	ldr	r2, [pc, #12]	@ (8014bfc <LoRaMacCommandsAddCmd+0x98>)
 8014bee:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8014bf2:	2300      	movs	r3, #0
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3718      	adds	r7, #24
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	20001af0 	.word	0x20001af0

08014c00 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b082      	sub	sp, #8
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d101      	bne.n	8014c12 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014c0e:	2301      	movs	r3, #1
 8014c10:	e021      	b.n	8014c56 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014c12:	6879      	ldr	r1, [r7, #4]
 8014c14:	4812      	ldr	r0, [pc, #72]	@ (8014c60 <LoRaMacCommandsRemoveCmd+0x60>)
 8014c16:	f7ff ff32 	bl	8014a7e <LinkedListRemove>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	f083 0301 	eor.w	r3, r3, #1
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d001      	beq.n	8014c2a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014c26:	2303      	movs	r3, #3
 8014c28:	e015      	b.n	8014c56 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8014c60 <LoRaMacCommandsRemoveCmd+0x60>)
 8014c2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	689b      	ldr	r3, [r3, #8]
 8014c34:	1ad3      	subs	r3, r2, r3
 8014c36:	3b01      	subs	r3, #1
 8014c38:	4a09      	ldr	r2, [pc, #36]	@ (8014c60 <LoRaMacCommandsRemoveCmd+0x60>)
 8014c3a:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f7ff fea4 	bl	801498c <FreeMacCommandSlot>
 8014c44:	4603      	mov	r3, r0
 8014c46:	f083 0301 	eor.w	r3, r3, #1
 8014c4a:	b2db      	uxtb	r3, r3
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d001      	beq.n	8014c54 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014c50:	2305      	movs	r3, #5
 8014c52:	e000      	b.n	8014c56 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014c54:	2300      	movs	r3, #0
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3708      	adds	r7, #8
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	20001af0 	.word	0x20001af0

08014c64 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8014c64:	b480      	push	{r7}
 8014c66:	b085      	sub	sp, #20
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	6039      	str	r1, [r7, #0]
 8014c6e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014c70:	4b0e      	ldr	r3, [pc, #56]	@ (8014cac <LoRaMacCommandsGetCmd+0x48>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014c76:	e002      	b.n	8014c7e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d004      	beq.n	8014c8e <LoRaMacCommandsGetCmd+0x2a>
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	791b      	ldrb	r3, [r3, #4]
 8014c88:	79fa      	ldrb	r2, [r7, #7]
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	d1f4      	bne.n	8014c78 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	68fa      	ldr	r2, [r7, #12]
 8014c92:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d101      	bne.n	8014c9e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014c9a:	2303      	movs	r3, #3
 8014c9c:	e000      	b.n	8014ca0 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8014c9e:	2300      	movs	r3, #0
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3714      	adds	r7, #20
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bc80      	pop	{r7}
 8014ca8:	4770      	bx	lr
 8014caa:	bf00      	nop
 8014cac:	20001af0 	.word	0x20001af0

08014cb0 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8014cf4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014cbc:	e012      	b.n	8014ce4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	7b1b      	ldrb	r3, [r3, #12]
 8014cc2:	f083 0301 	eor.w	r3, r3, #1
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d008      	beq.n	8014cde <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f7ff ff94 	bl	8014c00 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	607b      	str	r3, [r7, #4]
 8014cdc:	e002      	b.n	8014ce4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d1e9      	bne.n	8014cbe <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014cea:	2300      	movs	r3, #0
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	3708      	adds	r7, #8
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	20001af0 	.word	0x20001af0

08014cf8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014cfe:	4b13      	ldr	r3, [pc, #76]	@ (8014d4c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014d04:	e01a      	b.n	8014d3c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	791b      	ldrb	r3, [r3, #4]
 8014d10:	4618      	mov	r0, r3
 8014d12:	f7ff fee7 	bl	8014ae4 <IsSticky>
 8014d16:	4603      	mov	r3, r0
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00d      	beq.n	8014d38 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	791b      	ldrb	r3, [r3, #4]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7ff ff03 	bl	8014b2c <IsConfirmationRequired>
 8014d26:	4603      	mov	r3, r0
 8014d28:	f083 0301 	eor.w	r3, r3, #1
 8014d2c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d002      	beq.n	8014d38 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f7ff ff64 	bl	8014c00 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d1e1      	bne.n	8014d06 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014d42:	2300      	movs	r3, #0
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	3708      	adds	r7, #8
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	20001af0 	.word	0x20001af0

08014d50 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014d50:	b480      	push	{r7}
 8014d52:	b083      	sub	sp, #12
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d101      	bne.n	8014d62 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d5e:	2301      	movs	r3, #1
 8014d60:	e005      	b.n	8014d6e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014d62:	4b05      	ldr	r3, [pc, #20]	@ (8014d78 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014d64:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014d6c:	2300      	movs	r3, #0
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	370c      	adds	r7, #12
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bc80      	pop	{r7}
 8014d76:	4770      	bx	lr
 8014d78:	20001af0 	.word	0x20001af0

08014d7c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b088      	sub	sp, #32
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	60f8      	str	r0, [r7, #12]
 8014d84:	60b9      	str	r1, [r7, #8]
 8014d86:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8014d88:	4b25      	ldr	r3, [pc, #148]	@ (8014e20 <LoRaMacCommandsSerializeCmds+0xa4>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d002      	beq.n	8014d9e <LoRaMacCommandsSerializeCmds+0x22>
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d126      	bne.n	8014dec <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	e039      	b.n	8014e16 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014da2:	7efb      	ldrb	r3, [r7, #27]
 8014da4:	68fa      	ldr	r2, [r7, #12]
 8014da6:	1ad2      	subs	r2, r2, r3
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	689b      	ldr	r3, [r3, #8]
 8014dac:	3301      	adds	r3, #1
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d320      	bcc.n	8014df4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014db2:	7efb      	ldrb	r3, [r7, #27]
 8014db4:	1c5a      	adds	r2, r3, #1
 8014db6:	76fa      	strb	r2, [r7, #27]
 8014db8:	461a      	mov	r2, r3
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	4413      	add	r3, r2
 8014dbe:	69fa      	ldr	r2, [r7, #28]
 8014dc0:	7912      	ldrb	r2, [r2, #4]
 8014dc2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014dc4:	7efb      	ldrb	r3, [r7, #27]
 8014dc6:	687a      	ldr	r2, [r7, #4]
 8014dc8:	18d0      	adds	r0, r2, r3
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	1d59      	adds	r1, r3, #5
 8014dce:	69fb      	ldr	r3, [r7, #28]
 8014dd0:	689b      	ldr	r3, [r3, #8]
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	461a      	mov	r2, r3
 8014dd6:	f003 fe90 	bl	8018afa <memcpy1>
            itr += curElement->PayloadSize;
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	689b      	ldr	r3, [r3, #8]
 8014dde:	b2da      	uxtb	r2, r3
 8014de0:	7efb      	ldrb	r3, [r7, #27]
 8014de2:	4413      	add	r3, r2
 8014de4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014de6:	69fb      	ldr	r3, [r7, #28]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014dec:	69fb      	ldr	r3, [r7, #28]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d1d7      	bne.n	8014da2 <LoRaMacCommandsSerializeCmds+0x26>
 8014df2:	e009      	b.n	8014e08 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014df4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014df6:	e007      	b.n	8014e08 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014dfe:	69f8      	ldr	r0, [r7, #28]
 8014e00:	f7ff fefe 	bl	8014c00 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014e08:	69fb      	ldr	r3, [r7, #28]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d1f4      	bne.n	8014df8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014e0e:	68b8      	ldr	r0, [r7, #8]
 8014e10:	f7ff ff9e 	bl	8014d50 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014e14:	2300      	movs	r3, #0
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3720      	adds	r7, #32
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}
 8014e1e:	bf00      	nop
 8014e20:	20001af0 	.word	0x20001af0

08014e24 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014e24:	b480      	push	{r7}
 8014e26:	b085      	sub	sp, #20
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014e32:	79fb      	ldrb	r3, [r7, #7]
 8014e34:	3b02      	subs	r3, #2
 8014e36:	2b11      	cmp	r3, #17
 8014e38:	d850      	bhi.n	8014edc <LoRaMacCommandsGetCmdSize+0xb8>
 8014e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8014e40 <LoRaMacCommandsGetCmdSize+0x1c>)
 8014e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e40:	08014e89 	.word	0x08014e89
 8014e44:	08014e8f 	.word	0x08014e8f
 8014e48:	08014e95 	.word	0x08014e95
 8014e4c:	08014e9b 	.word	0x08014e9b
 8014e50:	08014ea1 	.word	0x08014ea1
 8014e54:	08014ea7 	.word	0x08014ea7
 8014e58:	08014ead 	.word	0x08014ead
 8014e5c:	08014eb3 	.word	0x08014eb3
 8014e60:	08014eb9 	.word	0x08014eb9
 8014e64:	08014edd 	.word	0x08014edd
 8014e68:	08014edd 	.word	0x08014edd
 8014e6c:	08014ebf 	.word	0x08014ebf
 8014e70:	08014edd 	.word	0x08014edd
 8014e74:	08014edd 	.word	0x08014edd
 8014e78:	08014ec5 	.word	0x08014ec5
 8014e7c:	08014ecb 	.word	0x08014ecb
 8014e80:	08014ed1 	.word	0x08014ed1
 8014e84:	08014ed7 	.word	0x08014ed7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014e88:	2303      	movs	r3, #3
 8014e8a:	73fb      	strb	r3, [r7, #15]
            break;
 8014e8c:	e027      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014e8e:	2305      	movs	r3, #5
 8014e90:	73fb      	strb	r3, [r7, #15]
            break;
 8014e92:	e024      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014e94:	2302      	movs	r3, #2
 8014e96:	73fb      	strb	r3, [r7, #15]
            break;
 8014e98:	e021      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014e9a:	2305      	movs	r3, #5
 8014e9c:	73fb      	strb	r3, [r7, #15]
            break;
 8014e9e:	e01e      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	73fb      	strb	r3, [r7, #15]
            break;
 8014ea4:	e01b      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014ea6:	2306      	movs	r3, #6
 8014ea8:	73fb      	strb	r3, [r7, #15]
            break;
 8014eaa:	e018      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014eac:	2302      	movs	r3, #2
 8014eae:	73fb      	strb	r3, [r7, #15]
            break;
 8014eb0:	e015      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014eb2:	2302      	movs	r3, #2
 8014eb4:	73fb      	strb	r3, [r7, #15]
            break;
 8014eb6:	e012      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014eb8:	2305      	movs	r3, #5
 8014eba:	73fb      	strb	r3, [r7, #15]
            break;
 8014ebc:	e00f      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014ebe:	2306      	movs	r3, #6
 8014ec0:	73fb      	strb	r3, [r7, #15]
            break;
 8014ec2:	e00c      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014ec4:	2301      	movs	r3, #1
 8014ec6:	73fb      	strb	r3, [r7, #15]
            break;
 8014ec8:	e009      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014eca:	2305      	movs	r3, #5
 8014ecc:	73fb      	strb	r3, [r7, #15]
            break;
 8014ece:	e006      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014ed0:	2304      	movs	r3, #4
 8014ed2:	73fb      	strb	r3, [r7, #15]
            break;
 8014ed4:	e003      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014ed6:	2304      	movs	r3, #4
 8014ed8:	73fb      	strb	r3, [r7, #15]
            break;
 8014eda:	e000      	b.n	8014ede <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014edc:	bf00      	nop
        }
    }
    return cidSize;
 8014ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	3714      	adds	r7, #20
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bc80      	pop	{r7}
 8014ee8:	4770      	bx	lr
 8014eea:	bf00      	nop

08014eec <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014eec:	b480      	push	{r7}
 8014eee:	b083      	sub	sp, #12
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	4a07      	ldr	r2, [pc, #28]	@ (8014f14 <IncreaseBufferPointer+0x28>)
 8014ef8:	4293      	cmp	r3, r2
 8014efa:	d102      	bne.n	8014f02 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014efc:	4b06      	ldr	r3, [pc, #24]	@ (8014f18 <IncreaseBufferPointer+0x2c>)
 8014efe:	607b      	str	r3, [r7, #4]
 8014f00:	e002      	b.n	8014f08 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	3304      	adds	r3, #4
 8014f06:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014f08:	687b      	ldr	r3, [r7, #4]
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	370c      	adds	r7, #12
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bc80      	pop	{r7}
 8014f12:	4770      	bx	lr
 8014f14:	20001d18 	.word	0x20001d18
 8014f18:	20001d08 	.word	0x20001d08

08014f1c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014f1c:	b480      	push	{r7}
 8014f1e:	b083      	sub	sp, #12
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	4603      	mov	r3, r0
 8014f24:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8014f26:	79fb      	ldrb	r3, [r7, #7]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d101      	bne.n	8014f30 <IsListEmpty+0x14>
    {
        return true;
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	e000      	b.n	8014f32 <IsListEmpty+0x16>
    }
    return false;
 8014f30:	2300      	movs	r3, #0
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	370c      	adds	r7, #12
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bc80      	pop	{r7}
 8014f3a:	4770      	bx	lr

08014f3c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	4603      	mov	r3, r0
 8014f44:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014f46:	79fb      	ldrb	r3, [r7, #7]
 8014f48:	2b04      	cmp	r3, #4
 8014f4a:	d901      	bls.n	8014f50 <IsListFull+0x14>
    {
        return true;
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	e000      	b.n	8014f52 <IsListFull+0x16>
    }
    return false;
 8014f50:	2300      	movs	r3, #0
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	370c      	adds	r7, #12
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bc80      	pop	{r7}
 8014f5a:	4770      	bx	lr

08014f5c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b086      	sub	sp, #24
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	4603      	mov	r3, r0
 8014f64:	60b9      	str	r1, [r7, #8]
 8014f66:	607a      	str	r2, [r7, #4]
 8014f68:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014f6e:	4b13      	ldr	r3, [pc, #76]	@ (8014fbc <GetElement+0x60>)
 8014f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7ff ffd1 	bl	8014f1c <IsListEmpty>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d001      	beq.n	8014f84 <GetElement+0x28>
    {
        return NULL;
 8014f80:	2300      	movs	r3, #0
 8014f82:	e017      	b.n	8014fb4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014f84:	2300      	movs	r3, #0
 8014f86:	74fb      	strb	r3, [r7, #19]
 8014f88:	e00d      	b.n	8014fa6 <GetElement+0x4a>
    {
        if( element->Request == request )
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	781b      	ldrb	r3, [r3, #0]
 8014f8e:	7bfa      	ldrb	r2, [r7, #15]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d101      	bne.n	8014f98 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	e00d      	b.n	8014fb4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014f98:	6978      	ldr	r0, [r7, #20]
 8014f9a:	f7ff ffa7 	bl	8014eec <IncreaseBufferPointer>
 8014f9e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014fa0:	7cfb      	ldrb	r3, [r7, #19]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	74fb      	strb	r3, [r7, #19]
 8014fa6:	4b05      	ldr	r3, [pc, #20]	@ (8014fbc <GetElement+0x60>)
 8014fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014fac:	7cfa      	ldrb	r2, [r7, #19]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d3eb      	bcc.n	8014f8a <GetElement+0x2e>
    }

    return NULL;
 8014fb2:	2300      	movs	r3, #0
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	3718      	adds	r7, #24
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	20001cfc 	.word	0x20001cfc

08014fc0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8014fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8014ffc <LoRaMacConfirmQueueInit+0x3c>)
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014fce:	4b0b      	ldr	r3, [pc, #44]	@ (8014ffc <LoRaMacConfirmQueueInit+0x3c>)
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014fd6:	4b09      	ldr	r3, [pc, #36]	@ (8014ffc <LoRaMacConfirmQueueInit+0x3c>)
 8014fd8:	4a09      	ldr	r2, [pc, #36]	@ (8015000 <LoRaMacConfirmQueueInit+0x40>)
 8014fda:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014fdc:	4b07      	ldr	r3, [pc, #28]	@ (8014ffc <LoRaMacConfirmQueueInit+0x3c>)
 8014fde:	4a08      	ldr	r2, [pc, #32]	@ (8015000 <LoRaMacConfirmQueueInit+0x40>)
 8014fe0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014fe2:	2214      	movs	r2, #20
 8014fe4:	21ff      	movs	r1, #255	@ 0xff
 8014fe6:	4806      	ldr	r0, [pc, #24]	@ (8015000 <LoRaMacConfirmQueueInit+0x40>)
 8014fe8:	f003 fdc2 	bl	8018b70 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014fec:	4b03      	ldr	r3, [pc, #12]	@ (8014ffc <LoRaMacConfirmQueueInit+0x3c>)
 8014fee:	2201      	movs	r2, #1
 8014ff0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8014ff4:	bf00      	nop
 8014ff6:	3708      	adds	r7, #8
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}
 8014ffc:	20001cfc 	.word	0x20001cfc
 8015000:	20001d08 	.word	0x20001d08

08015004 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801500c:	4b19      	ldr	r3, [pc, #100]	@ (8015074 <LoRaMacConfirmQueueAdd+0x70>)
 801500e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015012:	4618      	mov	r0, r3
 8015014:	f7ff ff92 	bl	8014f3c <IsListFull>
 8015018:	4603      	mov	r3, r0
 801501a:	2b00      	cmp	r3, #0
 801501c:	d001      	beq.n	8015022 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801501e:	2300      	movs	r3, #0
 8015020:	e024      	b.n	801506c <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015022:	4b14      	ldr	r3, [pc, #80]	@ (8015074 <LoRaMacConfirmQueueAdd+0x70>)
 8015024:	689b      	ldr	r3, [r3, #8]
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	7812      	ldrb	r2, [r2, #0]
 801502a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801502c:	4b11      	ldr	r3, [pc, #68]	@ (8015074 <LoRaMacConfirmQueueAdd+0x70>)
 801502e:	689b      	ldr	r3, [r3, #8]
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	7852      	ldrb	r2, [r2, #1]
 8015034:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015036:	4b0f      	ldr	r3, [pc, #60]	@ (8015074 <LoRaMacConfirmQueueAdd+0x70>)
 8015038:	689b      	ldr	r3, [r3, #8]
 801503a:	687a      	ldr	r2, [r7, #4]
 801503c:	78d2      	ldrb	r2, [r2, #3]
 801503e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8015040:	4b0c      	ldr	r3, [pc, #48]	@ (8015074 <LoRaMacConfirmQueueAdd+0x70>)
 8015042:	689b      	ldr	r3, [r3, #8]
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	7892      	ldrb	r2, [r2, #2]
 8015048:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801504a:	4b0a      	ldr	r3, [pc, #40]	@ (8015074 <LoRaMacConfirmQueueAdd+0x70>)
 801504c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015050:	3301      	adds	r3, #1
 8015052:	b2da      	uxtb	r2, r3
 8015054:	4b07      	ldr	r3, [pc, #28]	@ (8015074 <LoRaMacConfirmQueueAdd+0x70>)
 8015056:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801505a:	4b06      	ldr	r3, [pc, #24]	@ (8015074 <LoRaMacConfirmQueueAdd+0x70>)
 801505c:	689b      	ldr	r3, [r3, #8]
 801505e:	4618      	mov	r0, r3
 8015060:	f7ff ff44 	bl	8014eec <IncreaseBufferPointer>
 8015064:	4603      	mov	r3, r0
 8015066:	4a03      	ldr	r2, [pc, #12]	@ (8015074 <LoRaMacConfirmQueueAdd+0x70>)
 8015068:	6093      	str	r3, [r2, #8]

    return true;
 801506a:	2301      	movs	r3, #1
}
 801506c:	4618      	mov	r0, r3
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}
 8015074:	20001cfc 	.word	0x20001cfc

08015078 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015078:	b580      	push	{r7, lr}
 801507a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801507c:	4b0e      	ldr	r3, [pc, #56]	@ (80150b8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801507e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015082:	4618      	mov	r0, r3
 8015084:	f7ff ff4a 	bl	8014f1c <IsListEmpty>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d001      	beq.n	8015092 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801508e:	2300      	movs	r3, #0
 8015090:	e010      	b.n	80150b4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015092:	4b09      	ldr	r3, [pc, #36]	@ (80150b8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015098:	3b01      	subs	r3, #1
 801509a:	b2da      	uxtb	r2, r3
 801509c:	4b06      	ldr	r3, [pc, #24]	@ (80150b8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801509e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80150a2:	4b05      	ldr	r3, [pc, #20]	@ (80150b8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80150a4:	685b      	ldr	r3, [r3, #4]
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7ff ff20 	bl	8014eec <IncreaseBufferPointer>
 80150ac:	4603      	mov	r3, r0
 80150ae:	4a02      	ldr	r2, [pc, #8]	@ (80150b8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80150b0:	6053      	str	r3, [r2, #4]

    return true;
 80150b2:	2301      	movs	r3, #1
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	20001cfc 	.word	0x20001cfc

080150bc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b084      	sub	sp, #16
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	4603      	mov	r3, r0
 80150c4:	460a      	mov	r2, r1
 80150c6:	71fb      	strb	r3, [r7, #7]
 80150c8:	4613      	mov	r3, r2
 80150ca:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80150cc:	2300      	movs	r3, #0
 80150ce:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80150d0:	4b10      	ldr	r3, [pc, #64]	@ (8015114 <LoRaMacConfirmQueueSetStatus+0x58>)
 80150d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7ff ff20 	bl	8014f1c <IsListEmpty>
 80150dc:	4603      	mov	r3, r0
 80150de:	f083 0301 	eor.w	r3, r3, #1
 80150e2:	b2db      	uxtb	r3, r3
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d011      	beq.n	801510c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80150e8:	4b0a      	ldr	r3, [pc, #40]	@ (8015114 <LoRaMacConfirmQueueSetStatus+0x58>)
 80150ea:	6859      	ldr	r1, [r3, #4]
 80150ec:	4b09      	ldr	r3, [pc, #36]	@ (8015114 <LoRaMacConfirmQueueSetStatus+0x58>)
 80150ee:	689a      	ldr	r2, [r3, #8]
 80150f0:	79bb      	ldrb	r3, [r7, #6]
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7ff ff32 	bl	8014f5c <GetElement>
 80150f8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d005      	beq.n	801510c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	79fa      	ldrb	r2, [r7, #7]
 8015104:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	2201      	movs	r2, #1
 801510a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801510c:	bf00      	nop
 801510e:	3710      	adds	r7, #16
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}
 8015114:	20001cfc 	.word	0x20001cfc

08015118 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	af00      	add	r7, sp, #0
 801511e:	4603      	mov	r3, r0
 8015120:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8015122:	2300      	movs	r3, #0
 8015124:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015126:	4b10      	ldr	r3, [pc, #64]	@ (8015168 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015128:	f893 3020 	ldrb.w	r3, [r3, #32]
 801512c:	4618      	mov	r0, r3
 801512e:	f7ff fef5 	bl	8014f1c <IsListEmpty>
 8015132:	4603      	mov	r3, r0
 8015134:	f083 0301 	eor.w	r3, r3, #1
 8015138:	b2db      	uxtb	r3, r3
 801513a:	2b00      	cmp	r3, #0
 801513c:	d00e      	beq.n	801515c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801513e:	4b0a      	ldr	r3, [pc, #40]	@ (8015168 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015140:	6859      	ldr	r1, [r3, #4]
 8015142:	4b09      	ldr	r3, [pc, #36]	@ (8015168 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015144:	689a      	ldr	r2, [r3, #8]
 8015146:	79fb      	ldrb	r3, [r7, #7]
 8015148:	4618      	mov	r0, r3
 801514a:	f7ff ff07 	bl	8014f5c <GetElement>
 801514e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d002      	beq.n	801515c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	785b      	ldrb	r3, [r3, #1]
 801515a:	e000      	b.n	801515e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801515c:	2301      	movs	r3, #1
}
 801515e:	4618      	mov	r0, r3
 8015160:	3710      	adds	r7, #16
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	20001cfc 	.word	0x20001cfc

0801516c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b084      	sub	sp, #16
 8015170:	af00      	add	r7, sp, #0
 8015172:	4603      	mov	r3, r0
 8015174:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015176:	4b16      	ldr	r3, [pc, #88]	@ (80151d0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801517c:	4a14      	ldr	r2, [pc, #80]	@ (80151d0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801517e:	79fb      	ldrb	r3, [r7, #7]
 8015180:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015184:	4b12      	ldr	r3, [pc, #72]	@ (80151d0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015186:	f893 3020 	ldrb.w	r3, [r3, #32]
 801518a:	4618      	mov	r0, r3
 801518c:	f7ff fec6 	bl	8014f1c <IsListEmpty>
 8015190:	4603      	mov	r3, r0
 8015192:	f083 0301 	eor.w	r3, r3, #1
 8015196:	b2db      	uxtb	r3, r3
 8015198:	2b00      	cmp	r3, #0
 801519a:	d015      	beq.n	80151c8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	79fa      	ldrb	r2, [r7, #7]
 80151a0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	78db      	ldrb	r3, [r3, #3]
 80151a6:	f083 0301 	eor.w	r3, r3, #1
 80151aa:	b2db      	uxtb	r3, r3
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d002      	beq.n	80151b6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2201      	movs	r2, #1
 80151b4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80151b6:	68f8      	ldr	r0, [r7, #12]
 80151b8:	f7ff fe98 	bl	8014eec <IncreaseBufferPointer>
 80151bc:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80151be:	4b04      	ldr	r3, [pc, #16]	@ (80151d0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80151c0:	689b      	ldr	r3, [r3, #8]
 80151c2:	68fa      	ldr	r2, [r7, #12]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d1e9      	bne.n	801519c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80151c8:	bf00      	nop
 80151ca:	3710      	adds	r7, #16
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}
 80151d0:	20001cfc 	.word	0x20001cfc

080151d4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b082      	sub	sp, #8
 80151d8:	af00      	add	r7, sp, #0
 80151da:	4603      	mov	r3, r0
 80151dc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80151de:	4b09      	ldr	r3, [pc, #36]	@ (8015204 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80151e0:	6859      	ldr	r1, [r3, #4]
 80151e2:	4b08      	ldr	r3, [pc, #32]	@ (8015204 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80151e4:	689a      	ldr	r2, [r3, #8]
 80151e6:	79fb      	ldrb	r3, [r7, #7]
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7ff feb7 	bl	8014f5c <GetElement>
 80151ee:	4603      	mov	r3, r0
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d001      	beq.n	80151f8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80151f4:	2301      	movs	r3, #1
 80151f6:	e000      	b.n	80151fa <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80151f8:	2300      	movs	r3, #0
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3708      	adds	r7, #8
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}
 8015202:	bf00      	nop
 8015204:	20001cfc 	.word	0x20001cfc

08015208 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015210:	4b25      	ldr	r3, [pc, #148]	@ (80152a8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015216:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8015218:	2300      	movs	r3, #0
 801521a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 801521c:	f107 0308 	add.w	r3, r7, #8
 8015220:	2204      	movs	r2, #4
 8015222:	2100      	movs	r1, #0
 8015224:	4618      	mov	r0, r3
 8015226:	f003 fca3 	bl	8018b70 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801522a:	2300      	movs	r3, #0
 801522c:	73fb      	strb	r3, [r7, #15]
 801522e:	e032      	b.n	8015296 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015230:	4b1d      	ldr	r3, [pc, #116]	@ (80152a8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015232:	685b      	ldr	r3, [r3, #4]
 8015234:	781a      	ldrb	r2, [r3, #0]
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801523a:	4b1b      	ldr	r3, [pc, #108]	@ (80152a8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801523c:	685b      	ldr	r3, [r3, #4]
 801523e:	785a      	ldrb	r2, [r3, #1]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015244:	4b18      	ldr	r3, [pc, #96]	@ (80152a8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015246:	685b      	ldr	r3, [r3, #4]
 8015248:	789b      	ldrb	r3, [r3, #2]
 801524a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801524c:	7b7b      	ldrb	r3, [r7, #13]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d005      	beq.n	801525e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015252:	4b15      	ldr	r3, [pc, #84]	@ (80152a8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	689b      	ldr	r3, [r3, #8]
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	4798      	blx	r3
 801525c:	e00b      	b.n	8015276 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801525e:	4b12      	ldr	r3, [pc, #72]	@ (80152a8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015260:	685b      	ldr	r3, [r3, #4]
 8015262:	781b      	ldrb	r3, [r3, #0]
 8015264:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015266:	4b10      	ldr	r3, [pc, #64]	@ (80152a8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	785b      	ldrb	r3, [r3, #1]
 801526c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801526e:	4b0e      	ldr	r3, [pc, #56]	@ (80152a8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	78db      	ldrb	r3, [r3, #3]
 8015274:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015276:	f7ff feff 	bl	8015078 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801527a:	7b7b      	ldrb	r3, [r7, #13]
 801527c:	f083 0301 	eor.w	r3, r3, #1
 8015280:	b2db      	uxtb	r3, r3
 8015282:	2b00      	cmp	r3, #0
 8015284:	d004      	beq.n	8015290 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015286:	f107 0308 	add.w	r3, r7, #8
 801528a:	4618      	mov	r0, r3
 801528c:	f7ff feba 	bl	8015004 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015290:	7bfb      	ldrb	r3, [r7, #15]
 8015292:	3301      	adds	r3, #1
 8015294:	73fb      	strb	r3, [r7, #15]
 8015296:	7bfa      	ldrb	r2, [r7, #15]
 8015298:	7bbb      	ldrb	r3, [r7, #14]
 801529a:	429a      	cmp	r2, r3
 801529c:	d3c8      	bcc.n	8015230 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801529e:	bf00      	nop
 80152a0:	bf00      	nop
 80152a2:	3710      	adds	r7, #16
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	20001cfc 	.word	0x20001cfc

080152ac <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80152ac:	b480      	push	{r7}
 80152ae:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80152b0:	4b03      	ldr	r3, [pc, #12]	@ (80152c0 <LoRaMacConfirmQueueGetCnt+0x14>)
 80152b2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bc80      	pop	{r7}
 80152bc:	4770      	bx	lr
 80152be:	bf00      	nop
 80152c0:	20001cfc 	.word	0x20001cfc

080152c4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80152c8:	4b06      	ldr	r3, [pc, #24]	@ (80152e4 <LoRaMacConfirmQueueIsFull+0x20>)
 80152ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7ff fe34 	bl	8014f3c <IsListFull>
 80152d4:	4603      	mov	r3, r0
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d001      	beq.n	80152de <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80152da:	2301      	movs	r3, #1
 80152dc:	e000      	b.n	80152e0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80152de:	2300      	movs	r3, #0
    }
}
 80152e0:	4618      	mov	r0, r3
 80152e2:	bd80      	pop	{r7, pc}
 80152e4:	20001cfc 	.word	0x20001cfc

080152e8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b08e      	sub	sp, #56	@ 0x38
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	60f8      	str	r0, [r7, #12]
 80152f0:	607b      	str	r3, [r7, #4]
 80152f2:	460b      	mov	r3, r1
 80152f4:	817b      	strh	r3, [r7, #10]
 80152f6:	4613      	mov	r3, r2
 80152f8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d101      	bne.n	8015304 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015300:	2309      	movs	r3, #9
 8015302:	e084      	b.n	801540e <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 8015304:	2300      	movs	r3, #0
 8015306:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 801530a:	2301      	movs	r3, #1
 801530c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 801530e:	f107 0320 	add.w	r3, r7, #32
 8015312:	2200      	movs	r2, #0
 8015314:	601a      	str	r2, [r3, #0]
 8015316:	605a      	str	r2, [r3, #4]
 8015318:	609a      	str	r2, [r3, #8]
 801531a:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 801531c:	f107 0310 	add.w	r3, r7, #16
 8015320:	2200      	movs	r2, #0
 8015322:	601a      	str	r2, [r3, #0]
 8015324:	605a      	str	r2, [r3, #4]
 8015326:	609a      	str	r2, [r3, #8]
 8015328:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 801532a:	2301      	movs	r3, #1
 801532c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801532e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8015332:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	b2db      	uxtb	r3, r3
 8015338:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	0a1b      	lsrs	r3, r3, #8
 801533e:	b2db      	uxtb	r3, r3
 8015340:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	0c1b      	lsrs	r3, r3, #16
 8015346:	b2db      	uxtb	r3, r3
 8015348:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	0e1b      	lsrs	r3, r3, #24
 801534e:	b2db      	uxtb	r3, r3
 8015350:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8015352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015354:	b2db      	uxtb	r3, r3
 8015356:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801535a:	0a1b      	lsrs	r3, r3, #8
 801535c:	b2db      	uxtb	r3, r3
 801535e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015362:	0c1b      	lsrs	r3, r3, #16
 8015364:	b2db      	uxtb	r3, r3
 8015366:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801536a:	0e1b      	lsrs	r3, r3, #24
 801536c:	b2db      	uxtb	r3, r3
 801536e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015370:	e048      	b.n	8015404 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 8015372:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015374:	b2db      	uxtb	r3, r3
 8015376:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015378:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801537a:	3301      	adds	r3, #1
 801537c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801537e:	f107 0320 	add.w	r3, r7, #32
 8015382:	7a7a      	ldrb	r2, [r7, #9]
 8015384:	f107 0010 	add.w	r0, r7, #16
 8015388:	2110      	movs	r1, #16
 801538a:	f7f8 f9df 	bl	800d74c <SecureElementAesEncrypt>
 801538e:	4603      	mov	r3, r0
 8015390:	2b00      	cmp	r3, #0
 8015392:	d001      	beq.n	8015398 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015394:	230e      	movs	r3, #14
 8015396:	e03a      	b.n	801540e <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015398:	2300      	movs	r3, #0
 801539a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801539e:	e01e      	b.n	80153de <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80153a0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80153a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153a8:	4413      	add	r3, r2
 80153aa:	461a      	mov	r2, r3
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	4413      	add	r3, r2
 80153b0:	7819      	ldrb	r1, [r3, #0]
 80153b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153b6:	3338      	adds	r3, #56	@ 0x38
 80153b8:	443b      	add	r3, r7
 80153ba:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80153be:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80153c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153c6:	4403      	add	r3, r0
 80153c8:	4618      	mov	r0, r3
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	4403      	add	r3, r0
 80153ce:	404a      	eors	r2, r1
 80153d0:	b2d2      	uxtb	r2, r2
 80153d2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80153d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153d8:	3301      	adds	r3, #1
 80153da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80153de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80153e6:	2a10      	cmp	r2, #16
 80153e8:	bfa8      	it	ge
 80153ea:	2210      	movge	r2, #16
 80153ec:	b212      	sxth	r2, r2
 80153ee:	4293      	cmp	r3, r2
 80153f0:	dbd6      	blt.n	80153a0 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 80153f2:	897b      	ldrh	r3, [r7, #10]
 80153f4:	3b10      	subs	r3, #16
 80153f6:	b29b      	uxth	r3, r3
 80153f8:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80153fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80153fe:	3310      	adds	r3, #16
 8015400:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8015404:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015408:	2b00      	cmp	r3, #0
 801540a:	dcb2      	bgt.n	8015372 <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801540c:	2300      	movs	r3, #0
}
 801540e:	4618      	mov	r0, r3
 8015410:	3738      	adds	r7, #56	@ 0x38
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}

08015416 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015416:	b490      	push	{r4, r7}
 8015418:	b082      	sub	sp, #8
 801541a:	af00      	add	r7, sp, #0
 801541c:	4604      	mov	r4, r0
 801541e:	4608      	mov	r0, r1
 8015420:	4611      	mov	r1, r2
 8015422:	461a      	mov	r2, r3
 8015424:	4623      	mov	r3, r4
 8015426:	80fb      	strh	r3, [r7, #6]
 8015428:	4603      	mov	r3, r0
 801542a:	717b      	strb	r3, [r7, #5]
 801542c:	460b      	mov	r3, r1
 801542e:	713b      	strb	r3, [r7, #4]
 8015430:	4613      	mov	r3, r2
 8015432:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8015434:	69bb      	ldr	r3, [r7, #24]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d101      	bne.n	801543e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801543a:	2309      	movs	r3, #9
 801543c:	e04e      	b.n	80154dc <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801543e:	69bb      	ldr	r3, [r7, #24]
 8015440:	2249      	movs	r2, #73	@ 0x49
 8015442:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8015444:	69bb      	ldr	r3, [r7, #24]
 8015446:	3301      	adds	r3, #1
 8015448:	2200      	movs	r2, #0
 801544a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801544c:	69bb      	ldr	r3, [r7, #24]
 801544e:	3302      	adds	r3, #2
 8015450:	2200      	movs	r2, #0
 8015452:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015454:	69bb      	ldr	r3, [r7, #24]
 8015456:	3303      	adds	r3, #3
 8015458:	2200      	movs	r2, #0
 801545a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801545c:	69bb      	ldr	r3, [r7, #24]
 801545e:	3304      	adds	r3, #4
 8015460:	2200      	movs	r2, #0
 8015462:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015464:	69bb      	ldr	r3, [r7, #24]
 8015466:	3305      	adds	r3, #5
 8015468:	78fa      	ldrb	r2, [r7, #3]
 801546a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801546c:	69bb      	ldr	r3, [r7, #24]
 801546e:	3306      	adds	r3, #6
 8015470:	693a      	ldr	r2, [r7, #16]
 8015472:	b2d2      	uxtb	r2, r2
 8015474:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	0a1a      	lsrs	r2, r3, #8
 801547a:	69bb      	ldr	r3, [r7, #24]
 801547c:	3307      	adds	r3, #7
 801547e:	b2d2      	uxtb	r2, r2
 8015480:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	0c1a      	lsrs	r2, r3, #16
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	3308      	adds	r3, #8
 801548a:	b2d2      	uxtb	r2, r2
 801548c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	0e1a      	lsrs	r2, r3, #24
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	3309      	adds	r3, #9
 8015496:	b2d2      	uxtb	r2, r2
 8015498:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801549a:	69bb      	ldr	r3, [r7, #24]
 801549c:	330a      	adds	r3, #10
 801549e:	697a      	ldr	r2, [r7, #20]
 80154a0:	b2d2      	uxtb	r2, r2
 80154a2:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	0a1a      	lsrs	r2, r3, #8
 80154a8:	69bb      	ldr	r3, [r7, #24]
 80154aa:	330b      	adds	r3, #11
 80154ac:	b2d2      	uxtb	r2, r2
 80154ae:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80154b0:	697b      	ldr	r3, [r7, #20]
 80154b2:	0c1a      	lsrs	r2, r3, #16
 80154b4:	69bb      	ldr	r3, [r7, #24]
 80154b6:	330c      	adds	r3, #12
 80154b8:	b2d2      	uxtb	r2, r2
 80154ba:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	0e1a      	lsrs	r2, r3, #24
 80154c0:	69bb      	ldr	r3, [r7, #24]
 80154c2:	330d      	adds	r3, #13
 80154c4:	b2d2      	uxtb	r2, r2
 80154c6:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80154c8:	69bb      	ldr	r3, [r7, #24]
 80154ca:	330e      	adds	r3, #14
 80154cc:	2200      	movs	r2, #0
 80154ce:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80154d0:	69bb      	ldr	r3, [r7, #24]
 80154d2:	330f      	adds	r3, #15
 80154d4:	88fa      	ldrh	r2, [r7, #6]
 80154d6:	b2d2      	uxtb	r2, r2
 80154d8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80154da:	2300      	movs	r3, #0
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bc90      	pop	{r4, r7}
 80154e4:	4770      	bx	lr

080154e6 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80154e6:	b590      	push	{r4, r7, lr}
 80154e8:	b08b      	sub	sp, #44	@ 0x2c
 80154ea:	af04      	add	r7, sp, #16
 80154ec:	6078      	str	r0, [r7, #4]
 80154ee:	4608      	mov	r0, r1
 80154f0:	4611      	mov	r1, r2
 80154f2:	461a      	mov	r2, r3
 80154f4:	4603      	mov	r3, r0
 80154f6:	807b      	strh	r3, [r7, #2]
 80154f8:	460b      	mov	r3, r1
 80154fa:	707b      	strb	r3, [r7, #1]
 80154fc:	4613      	mov	r3, r2
 80154fe:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d002      	beq.n	801550c <ComputeCmacB0+0x26>
 8015506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015508:	2b00      	cmp	r3, #0
 801550a:	d101      	bne.n	8015510 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801550c:	2309      	movs	r3, #9
 801550e:	e024      	b.n	801555a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015510:	887b      	ldrh	r3, [r7, #2]
 8015512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015516:	d901      	bls.n	801551c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015518:	230d      	movs	r3, #13
 801551a:	e01e      	b.n	801555a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801551c:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8015520:	783a      	ldrb	r2, [r7, #0]
 8015522:	7879      	ldrb	r1, [r7, #1]
 8015524:	8878      	ldrh	r0, [r7, #2]
 8015526:	f107 0308 	add.w	r3, r7, #8
 801552a:	9302      	str	r3, [sp, #8]
 801552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801552e:	9301      	str	r3, [sp, #4]
 8015530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015532:	9300      	str	r3, [sp, #0]
 8015534:	4623      	mov	r3, r4
 8015536:	f7ff ff6e 	bl	8015416 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801553a:	887a      	ldrh	r2, [r7, #2]
 801553c:	7879      	ldrb	r1, [r7, #1]
 801553e:	f107 0008 	add.w	r0, r7, #8
 8015542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015544:	9300      	str	r3, [sp, #0]
 8015546:	460b      	mov	r3, r1
 8015548:	6879      	ldr	r1, [r7, #4]
 801554a:	f7f8 f8b9 	bl	800d6c0 <SecureElementComputeAesCmac>
 801554e:	4603      	mov	r3, r0
 8015550:	2b00      	cmp	r3, #0
 8015552:	d001      	beq.n	8015558 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015554:	230e      	movs	r3, #14
 8015556:	e000      	b.n	801555a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015558:	2300      	movs	r3, #0
}
 801555a:	4618      	mov	r0, r3
 801555c:	371c      	adds	r7, #28
 801555e:	46bd      	mov	sp, r7
 8015560:	bd90      	pop	{r4, r7, pc}

08015562 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015562:	b590      	push	{r4, r7, lr}
 8015564:	b0cd      	sub	sp, #308	@ 0x134
 8015566:	af04      	add	r7, sp, #16
 8015568:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801556c:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8015570:	6020      	str	r0, [r4, #0]
 8015572:	460c      	mov	r4, r1
 8015574:	4610      	mov	r0, r2
 8015576:	4619      	mov	r1, r3
 8015578:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801557c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015580:	4622      	mov	r2, r4
 8015582:	801a      	strh	r2, [r3, #0]
 8015584:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015588:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801558c:	4602      	mov	r2, r0
 801558e:	701a      	strb	r2, [r3, #0]
 8015590:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015594:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015598:	460a      	mov	r2, r1
 801559a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801559c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155a0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d101      	bne.n	80155ae <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80155aa:	2309      	movs	r3, #9
 80155ac:	e063      	b.n	8015676 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80155ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155b2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80155b6:	881b      	ldrh	r3, [r3, #0]
 80155b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80155bc:	d901      	bls.n	80155c2 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80155be:	230d      	movs	r3, #13
 80155c0:	e059      	b.n	8015676 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80155c2:	f107 030c 	add.w	r3, r7, #12
 80155c6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80155ca:	2100      	movs	r1, #0
 80155cc:	4618      	mov	r0, r3
 80155ce:	f003 facf 	bl	8018b70 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80155d2:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80155d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80155de:	781a      	ldrb	r2, [r3, #0]
 80155e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155e4:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80155e8:	7819      	ldrb	r1, [r3, #0]
 80155ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155ee:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80155f2:	8818      	ldrh	r0, [r3, #0]
 80155f4:	f107 030c 	add.w	r3, r7, #12
 80155f8:	9302      	str	r3, [sp, #8]
 80155fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80155fe:	9301      	str	r3, [sp, #4]
 8015600:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015604:	9300      	str	r3, [sp, #0]
 8015606:	4623      	mov	r3, r4
 8015608:	f7ff ff05 	bl	8015416 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801560c:	f107 030c 	add.w	r3, r7, #12
 8015610:	3310      	adds	r3, #16
 8015612:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8015616:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 801561a:	8812      	ldrh	r2, [r2, #0]
 801561c:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8015620:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8015624:	6809      	ldr	r1, [r1, #0]
 8015626:	4618      	mov	r0, r3
 8015628:	f003 fa67 	bl	8018afa <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801562c:	2306      	movs	r3, #6
 801562e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015632:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015636:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801563a:	881b      	ldrh	r3, [r3, #0]
 801563c:	3310      	adds	r3, #16
 801563e:	4619      	mov	r1, r3
 8015640:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015644:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	f107 000c 	add.w	r0, r7, #12
 801564e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8015652:	f7f8 f84f 	bl	800d6f4 <SecureElementVerifyAesCmac>
 8015656:	4603      	mov	r3, r0
 8015658:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801565c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015660:	2b00      	cmp	r3, #0
 8015662:	d101      	bne.n	8015668 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015664:	2300      	movs	r3, #0
 8015666:	e006      	b.n	8015676 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015668:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801566c:	2b01      	cmp	r3, #1
 801566e:	d101      	bne.n	8015674 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015670:	2301      	movs	r3, #1
 8015672:	e000      	b.n	8015676 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015674:	230e      	movs	r3, #14
}
 8015676:	4618      	mov	r0, r3
 8015678:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 801567c:	46bd      	mov	sp, r7
 801567e:	bd90      	pop	{r4, r7, pc}

08015680 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015680:	b480      	push	{r7}
 8015682:	b085      	sub	sp, #20
 8015684:	af00      	add	r7, sp, #0
 8015686:	4603      	mov	r3, r0
 8015688:	6039      	str	r1, [r7, #0]
 801568a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801568c:	2300      	movs	r3, #0
 801568e:	73fb      	strb	r3, [r7, #15]
 8015690:	e011      	b.n	80156b6 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015692:	7bfb      	ldrb	r3, [r7, #15]
 8015694:	4a0c      	ldr	r2, [pc, #48]	@ (80156c8 <GetKeyAddrItem+0x48>)
 8015696:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801569a:	79fa      	ldrb	r2, [r7, #7]
 801569c:	429a      	cmp	r2, r3
 801569e:	d107      	bne.n	80156b0 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80156a0:	7bfb      	ldrb	r3, [r7, #15]
 80156a2:	009b      	lsls	r3, r3, #2
 80156a4:	4a08      	ldr	r2, [pc, #32]	@ (80156c8 <GetKeyAddrItem+0x48>)
 80156a6:	441a      	add	r2, r3
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80156ac:	2300      	movs	r3, #0
 80156ae:	e006      	b.n	80156be <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80156b0:	7bfb      	ldrb	r3, [r7, #15]
 80156b2:	3301      	adds	r3, #1
 80156b4:	73fb      	strb	r3, [r7, #15]
 80156b6:	7bfb      	ldrb	r3, [r7, #15]
 80156b8:	2b01      	cmp	r3, #1
 80156ba:	d9ea      	bls.n	8015692 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80156bc:	230b      	movs	r3, #11
}
 80156be:	4618      	mov	r0, r3
 80156c0:	3714      	adds	r7, #20
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bc80      	pop	{r7}
 80156c6:	4770      	bx	lr
 80156c8:	20000110 	.word	0x20000110

080156cc <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b088      	sub	sp, #32
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	60b9      	str	r1, [r7, #8]
 80156d4:	607a      	str	r2, [r7, #4]
 80156d6:	461a      	mov	r2, r3
 80156d8:	4603      	mov	r3, r0
 80156da:	73fb      	strb	r3, [r7, #15]
 80156dc:	4613      	mov	r3, r2
 80156de:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80156e0:	f107 0310 	add.w	r3, r7, #16
 80156e4:	2200      	movs	r2, #0
 80156e6:	601a      	str	r2, [r3, #0]
 80156e8:	605a      	str	r2, [r3, #4]
 80156ea:	609a      	str	r2, [r3, #8]
 80156ec:	60da      	str	r2, [r3, #12]

    switch( keyID )
 80156ee:	7bfb      	ldrb	r3, [r7, #15]
 80156f0:	2b08      	cmp	r3, #8
 80156f2:	d002      	beq.n	80156fa <DeriveSessionKey10x+0x2e>
 80156f4:	2b09      	cmp	r3, #9
 80156f6:	d003      	beq.n	8015700 <DeriveSessionKey10x+0x34>
 80156f8:	e005      	b.n	8015706 <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80156fa:	2301      	movs	r3, #1
 80156fc:	743b      	strb	r3, [r7, #16]
            break;
 80156fe:	e004      	b.n	801570a <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015700:	2302      	movs	r3, #2
 8015702:	743b      	strb	r3, [r7, #16]
            break;
 8015704:	e001      	b.n	801570a <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015706:	230a      	movs	r3, #10
 8015708:	e02a      	b.n	8015760 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	b2db      	uxtb	r3, r3
 801570e:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	0a1b      	lsrs	r3, r3, #8
 8015714:	b2db      	uxtb	r3, r3
 8015716:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	0c1b      	lsrs	r3, r3, #16
 801571c:	b2db      	uxtb	r3, r3
 801571e:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	b2db      	uxtb	r3, r3
 8015724:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	0a1b      	lsrs	r3, r3, #8
 801572a:	b2db      	uxtb	r3, r3
 801572c:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	0c1b      	lsrs	r3, r3, #16
 8015732:	b2db      	uxtb	r3, r3
 8015734:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015736:	89bb      	ldrh	r3, [r7, #12]
 8015738:	b2db      	uxtb	r3, r3
 801573a:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801573c:	89bb      	ldrh	r3, [r7, #12]
 801573e:	0a1b      	lsrs	r3, r3, #8
 8015740:	b29b      	uxth	r3, r3
 8015742:	b2db      	uxtb	r3, r3
 8015744:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015746:	7bfa      	ldrb	r2, [r7, #15]
 8015748:	f107 0310 	add.w	r3, r7, #16
 801574c:	2101      	movs	r1, #1
 801574e:	4618      	mov	r0, r3
 8015750:	f7f8 f87c 	bl	800d84c <SecureElementDeriveAndStoreKey>
 8015754:	4603      	mov	r3, r0
 8015756:	2b00      	cmp	r3, #0
 8015758:	d001      	beq.n	801575e <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801575a:	230e      	movs	r3, #14
 801575c:	e000      	b.n	8015760 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801575e:	2300      	movs	r3, #0
}
 8015760:	4618      	mov	r0, r3
 8015762:	3720      	adds	r7, #32
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}

08015768 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
 801576e:	4603      	mov	r3, r0
 8015770:	6039      	str	r1, [r7, #0]
 8015772:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d101      	bne.n	801577e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801577a:	2309      	movs	r3, #9
 801577c:	e029      	b.n	80157d2 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801577e:	79fb      	ldrb	r3, [r7, #7]
 8015780:	3b01      	subs	r3, #1
 8015782:	2b03      	cmp	r3, #3
 8015784:	d822      	bhi.n	80157cc <GetLastFcntDown+0x64>
 8015786:	a201      	add	r2, pc, #4	@ (adr r2, 801578c <GetLastFcntDown+0x24>)
 8015788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801578c:	0801579d 	.word	0x0801579d
 8015790:	080157a9 	.word	0x080157a9
 8015794:	080157b5 	.word	0x080157b5
 8015798:	080157c1 	.word	0x080157c1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801579c:	4b0f      	ldr	r3, [pc, #60]	@ (80157dc <GetLastFcntDown+0x74>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	691a      	ldr	r2, [r3, #16]
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	601a      	str	r2, [r3, #0]
            break;
 80157a6:	e013      	b.n	80157d0 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80157a8:	4b0c      	ldr	r3, [pc, #48]	@ (80157dc <GetLastFcntDown+0x74>)
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	695a      	ldr	r2, [r3, #20]
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	601a      	str	r2, [r3, #0]
            break;
 80157b2:	e00d      	b.n	80157d0 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80157b4:	4b09      	ldr	r3, [pc, #36]	@ (80157dc <GetLastFcntDown+0x74>)
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	699a      	ldr	r2, [r3, #24]
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	601a      	str	r2, [r3, #0]
            break;
 80157be:	e007      	b.n	80157d0 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80157c0:	4b06      	ldr	r3, [pc, #24]	@ (80157dc <GetLastFcntDown+0x74>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	69da      	ldr	r2, [r3, #28]
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	601a      	str	r2, [r3, #0]
            break;
 80157ca:	e001      	b.n	80157d0 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80157cc:	2305      	movs	r3, #5
 80157ce:	e000      	b.n	80157d2 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80157d0:	2300      	movs	r3, #0
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	370c      	adds	r7, #12
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bc80      	pop	{r7}
 80157da:	4770      	bx	lr
 80157dc:	20001d20 	.word	0x20001d20

080157e0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b084      	sub	sp, #16
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	4603      	mov	r3, r0
 80157e8:	6039      	str	r1, [r7, #0]
 80157ea:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80157ec:	2300      	movs	r3, #0
 80157ee:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80157f0:	f107 020c 	add.w	r2, r7, #12
 80157f4:	79fb      	ldrb	r3, [r7, #7]
 80157f6:	4611      	mov	r1, r2
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7ff ffb5 	bl	8015768 <GetLastFcntDown>
 80157fe:	4603      	mov	r3, r0
 8015800:	2b00      	cmp	r3, #0
 8015802:	d001      	beq.n	8015808 <CheckFCntDown+0x28>
    {
        return false;
 8015804:	2300      	movs	r3, #0
 8015806:	e00a      	b.n	801581e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	683a      	ldr	r2, [r7, #0]
 801580c:	429a      	cmp	r2, r3
 801580e:	d803      	bhi.n	8015818 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8015810:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015816:	d101      	bne.n	801581c <CheckFCntDown+0x3c>
    {
        return true;
 8015818:	2301      	movs	r3, #1
 801581a:	e000      	b.n	801581e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801581c:	2300      	movs	r3, #0
    }
}
 801581e:	4618      	mov	r0, r3
 8015820:	3710      	adds	r7, #16
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
	...

08015828 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015828:	b480      	push	{r7}
 801582a:	b083      	sub	sp, #12
 801582c:	af00      	add	r7, sp, #0
 801582e:	4603      	mov	r3, r0
 8015830:	6039      	str	r1, [r7, #0]
 8015832:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015834:	79fb      	ldrb	r3, [r7, #7]
 8015836:	3b01      	subs	r3, #1
 8015838:	2b03      	cmp	r3, #3
 801583a:	d82b      	bhi.n	8015894 <UpdateFCntDown+0x6c>
 801583c:	a201      	add	r2, pc, #4	@ (adr r2, 8015844 <UpdateFCntDown+0x1c>)
 801583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015842:	bf00      	nop
 8015844:	08015855 	.word	0x08015855
 8015848:	08015867 	.word	0x08015867
 801584c:	08015879 	.word	0x08015879
 8015850:	0801588b 	.word	0x0801588b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015854:	4b12      	ldr	r3, [pc, #72]	@ (80158a0 <UpdateFCntDown+0x78>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	683a      	ldr	r2, [r7, #0]
 801585a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 801585c:	4b10      	ldr	r3, [pc, #64]	@ (80158a0 <UpdateFCntDown+0x78>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	683a      	ldr	r2, [r7, #0]
 8015862:	621a      	str	r2, [r3, #32]
            break;
 8015864:	e017      	b.n	8015896 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8015866:	4b0e      	ldr	r3, [pc, #56]	@ (80158a0 <UpdateFCntDown+0x78>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	683a      	ldr	r2, [r7, #0]
 801586c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801586e:	4b0c      	ldr	r3, [pc, #48]	@ (80158a0 <UpdateFCntDown+0x78>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	683a      	ldr	r2, [r7, #0]
 8015874:	621a      	str	r2, [r3, #32]
            break;
 8015876:	e00e      	b.n	8015896 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8015878:	4b09      	ldr	r3, [pc, #36]	@ (80158a0 <UpdateFCntDown+0x78>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	683a      	ldr	r2, [r7, #0]
 801587e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8015880:	4b07      	ldr	r3, [pc, #28]	@ (80158a0 <UpdateFCntDown+0x78>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	683a      	ldr	r2, [r7, #0]
 8015886:	621a      	str	r2, [r3, #32]
            break;
 8015888:	e005      	b.n	8015896 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801588a:	4b05      	ldr	r3, [pc, #20]	@ (80158a0 <UpdateFCntDown+0x78>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	683a      	ldr	r2, [r7, #0]
 8015890:	61da      	str	r2, [r3, #28]
            break;
 8015892:	e000      	b.n	8015896 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015894:	bf00      	nop
    }
}
 8015896:	bf00      	nop
 8015898:	370c      	adds	r7, #12
 801589a:	46bd      	mov	sp, r7
 801589c:	bc80      	pop	{r7}
 801589e:	4770      	bx	lr
 80158a0:	20001d20 	.word	0x20001d20

080158a4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80158a4:	b480      	push	{r7}
 80158a6:	b083      	sub	sp, #12
 80158a8:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80158aa:	4b18      	ldr	r3, [pc, #96]	@ (801590c <ResetFCnts+0x68>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	2200      	movs	r2, #0
 80158b0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80158b2:	4b16      	ldr	r3, [pc, #88]	@ (801590c <ResetFCnts+0x68>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	f04f 32ff 	mov.w	r2, #4294967295
 80158ba:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80158bc:	4b13      	ldr	r3, [pc, #76]	@ (801590c <ResetFCnts+0x68>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	f04f 32ff 	mov.w	r2, #4294967295
 80158c4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80158c6:	4b11      	ldr	r3, [pc, #68]	@ (801590c <ResetFCnts+0x68>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	f04f 32ff 	mov.w	r2, #4294967295
 80158ce:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80158d0:	4b0e      	ldr	r3, [pc, #56]	@ (801590c <ResetFCnts+0x68>)
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	4b0d      	ldr	r3, [pc, #52]	@ (801590c <ResetFCnts+0x68>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	6992      	ldr	r2, [r2, #24]
 80158da:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80158dc:	2300      	movs	r3, #0
 80158de:	607b      	str	r3, [r7, #4]
 80158e0:	e00b      	b.n	80158fa <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80158e2:	4b0a      	ldr	r3, [pc, #40]	@ (801590c <ResetFCnts+0x68>)
 80158e4:	681a      	ldr	r2, [r3, #0]
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	3306      	adds	r3, #6
 80158ea:	009b      	lsls	r3, r3, #2
 80158ec:	4413      	add	r3, r2
 80158ee:	f04f 32ff 	mov.w	r2, #4294967295
 80158f2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	3301      	adds	r3, #1
 80158f8:	607b      	str	r3, [r7, #4]
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	ddf0      	ble.n	80158e2 <ResetFCnts+0x3e>
    }
}
 8015900:	bf00      	nop
 8015902:	bf00      	nop
 8015904:	370c      	adds	r7, #12
 8015906:	46bd      	mov	sp, r7
 8015908:	bc80      	pop	{r7}
 801590a:	4770      	bx	lr
 801590c:	20001d20 	.word	0x20001d20

08015910 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8015910:	b480      	push	{r7}
 8015912:	b083      	sub	sp, #12
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8015918:	4b06      	ldr	r3, [pc, #24]	@ (8015934 <IsJoinNonce10xOk+0x24>)
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	689b      	ldr	r3, [r3, #8]
 801591e:	687a      	ldr	r2, [r7, #4]
 8015920:	429a      	cmp	r2, r3
 8015922:	bf8c      	ite	hi
 8015924:	2301      	movhi	r3, #1
 8015926:	2300      	movls	r3, #0
 8015928:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801592a:	4618      	mov	r0, r3
 801592c:	370c      	adds	r7, #12
 801592e:	46bd      	mov	sp, r7
 8015930:	bc80      	pop	{r7}
 8015932:	4770      	bx	lr
 8015934:	20001d20 	.word	0x20001d20

08015938 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d101      	bne.n	801594a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8015946:	2308      	movs	r3, #8
 8015948:	e01c      	b.n	8015984 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801594a:	4a10      	ldr	r2, [pc, #64]	@ (801598c <LoRaMacCryptoInit+0x54>)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8015950:	4b0e      	ldr	r3, [pc, #56]	@ (801598c <LoRaMacCryptoInit+0x54>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	2228      	movs	r2, #40	@ 0x28
 8015956:	2100      	movs	r1, #0
 8015958:	4618      	mov	r0, r3
 801595a:	f003 f909 	bl	8018b70 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801595e:	4b0b      	ldr	r3, [pc, #44]	@ (801598c <LoRaMacCryptoInit+0x54>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	2201      	movs	r2, #1
 8015964:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8015966:	4b09      	ldr	r3, [pc, #36]	@ (801598c <LoRaMacCryptoInit+0x54>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	2201      	movs	r2, #1
 801596c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801596e:	4b07      	ldr	r3, [pc, #28]	@ (801598c <LoRaMacCryptoInit+0x54>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	2201      	movs	r2, #1
 8015974:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8015976:	4b05      	ldr	r3, [pc, #20]	@ (801598c <LoRaMacCryptoInit+0x54>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	2200      	movs	r2, #0
 801597c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801597e:	f7ff ff91 	bl	80158a4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015982:	2300      	movs	r3, #0
}
 8015984:	4618      	mov	r0, r3
 8015986:	3708      	adds	r7, #8
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}
 801598c:	20001d20 	.word	0x20001d20

08015990 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015990:	b480      	push	{r7}
 8015992:	b083      	sub	sp, #12
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8015998:	4b04      	ldr	r3, [pc, #16]	@ (80159ac <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	687a      	ldr	r2, [r7, #4]
 801599e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80159a0:	2300      	movs	r3, #0
}
 80159a2:	4618      	mov	r0, r3
 80159a4:	370c      	adds	r7, #12
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bc80      	pop	{r7}
 80159aa:	4770      	bx	lr
 80159ac:	20001d20 	.word	0x20001d20

080159b0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80159b0:	b480      	push	{r7}
 80159b2:	b083      	sub	sp, #12
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d101      	bne.n	80159c2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80159be:	2309      	movs	r3, #9
 80159c0:	e006      	b.n	80159d0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80159c2:	4b06      	ldr	r3, [pc, #24]	@ (80159dc <LoRaMacCryptoGetFCntUp+0x2c>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	68db      	ldr	r3, [r3, #12]
 80159c8:	1c5a      	adds	r2, r3, #1
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80159ce:	2300      	movs	r3, #0
}
 80159d0:	4618      	mov	r0, r3
 80159d2:	370c      	adds	r7, #12
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bc80      	pop	{r7}
 80159d8:	4770      	bx	lr
 80159da:	bf00      	nop
 80159dc:	20001d20 	.word	0x20001d20

080159e0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b088      	sub	sp, #32
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	4603      	mov	r3, r0
 80159e8:	60b9      	str	r1, [r7, #8]
 80159ea:	607a      	str	r2, [r7, #4]
 80159ec:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80159ee:	2300      	movs	r3, #0
 80159f0:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80159f2:	2300      	movs	r3, #0
 80159f4:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80159f6:	2312      	movs	r3, #18
 80159f8:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d101      	bne.n	8015a04 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015a00:	2309      	movs	r3, #9
 8015a02:	e035      	b.n	8015a70 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015a04:	f107 0214 	add.w	r2, r7, #20
 8015a08:	7bfb      	ldrb	r3, [r7, #15]
 8015a0a:	4611      	mov	r1, r2
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f7ff feab 	bl	8015768 <GetLastFcntDown>
 8015a12:	4603      	mov	r3, r0
 8015a14:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015a16:	7efb      	ldrb	r3, [r7, #27]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d001      	beq.n	8015a20 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8015a1c:	7efb      	ldrb	r3, [r7, #27]
 8015a1e:	e027      	b.n	8015a70 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a26:	d103      	bne.n	8015a30 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	68ba      	ldr	r2, [r7, #8]
 8015a2c:	601a      	str	r2, [r3, #0]
 8015a2e:	e01e      	b.n	8015a6e <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	68ba      	ldr	r2, [r7, #8]
 8015a36:	1ad3      	subs	r3, r2, r3
 8015a38:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8015a3a:	69fb      	ldr	r3, [r7, #28]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	dd05      	ble.n	8015a4c <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015a40:	697a      	ldr	r2, [r7, #20]
 8015a42:	69fb      	ldr	r3, [r7, #28]
 8015a44:	441a      	add	r2, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	601a      	str	r2, [r3, #0]
 8015a4a:	e010      	b.n	8015a6e <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8015a4c:	69fb      	ldr	r3, [r7, #28]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d104      	bne.n	8015a5c <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015a52:	697a      	ldr	r2, [r7, #20]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015a58:	2307      	movs	r3, #7
 8015a5a:	e009      	b.n	8015a70 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015a5c:	697b      	ldr	r3, [r7, #20]
 8015a5e:	0c1b      	lsrs	r3, r3, #16
 8015a60:	041b      	lsls	r3, r3, #16
 8015a62:	68ba      	ldr	r2, [r7, #8]
 8015a64:	4413      	add	r3, r2
 8015a66:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015a6e:	2300      	movs	r3, #0
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3720      	adds	r7, #32
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015a78:	b480      	push	{r7}
 8015a7a:	b085      	sub	sp, #20
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d101      	bne.n	8015a8a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015a86:	2309      	movs	r3, #9
 8015a88:	e019      	b.n	8015abe <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	60fb      	str	r3, [r7, #12]
 8015a8e:	e012      	b.n	8015ab6 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8015a90:	4b0d      	ldr	r3, [pc, #52]	@ (8015ac8 <LoRaMacCryptoSetMulticastReference+0x50>)
 8015a92:	6819      	ldr	r1, [r3, #0]
 8015a94:	68fa      	ldr	r2, [r7, #12]
 8015a96:	4613      	mov	r3, r2
 8015a98:	005b      	lsls	r3, r3, #1
 8015a9a:	4413      	add	r3, r2
 8015a9c:	011b      	lsls	r3, r3, #4
 8015a9e:	461a      	mov	r2, r3
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	4413      	add	r3, r2
 8015aa4:	68fa      	ldr	r2, [r7, #12]
 8015aa6:	3206      	adds	r2, #6
 8015aa8:	0092      	lsls	r2, r2, #2
 8015aaa:	440a      	add	r2, r1
 8015aac:	3204      	adds	r2, #4
 8015aae:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	60fb      	str	r3, [r7, #12]
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	dde9      	ble.n	8015a90 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015abc:	2300      	movs	r3, #0
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3714      	adds	r7, #20
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bc80      	pop	{r7}
 8015ac6:	4770      	bx	lr
 8015ac8:	20001d20 	.word	0x20001d20

08015acc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b082      	sub	sp, #8
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	6039      	str	r1, [r7, #0]
 8015ad6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015ad8:	79fb      	ldrb	r3, [r7, #7]
 8015ada:	6839      	ldr	r1, [r7, #0]
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7f7 fd91 	bl	800d604 <SecureElementSetKey>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d001      	beq.n	8015aec <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ae8:	230e      	movs	r3, #14
 8015aea:	e021      	b.n	8015b30 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8015aec:	79fb      	ldrb	r3, [r7, #7]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d11d      	bne.n	8015b2e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015af2:	4b11      	ldr	r3, [pc, #68]	@ (8015b38 <LoRaMacCryptoSetKey+0x6c>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	789b      	ldrb	r3, [r3, #2]
 8015af8:	210b      	movs	r1, #11
 8015afa:	4618      	mov	r0, r3
 8015afc:	f000 fa54 	bl	8015fa8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015b00:	4603      	mov	r3, r0
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d001      	beq.n	8015b0a <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b06:	230e      	movs	r3, #14
 8015b08:	e012      	b.n	8015b30 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015b0a:	210c      	movs	r1, #12
 8015b0c:	2000      	movs	r0, #0
 8015b0e:	f000 fa4b 	bl	8015fa8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015b12:	4603      	mov	r3, r0
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d001      	beq.n	8015b1c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b18:	230e      	movs	r3, #14
 8015b1a:	e009      	b.n	8015b30 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015b1c:	210a      	movs	r1, #10
 8015b1e:	2000      	movs	r0, #0
 8015b20:	f000 fa42 	bl	8015fa8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015b24:	4603      	mov	r3, r0
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d001      	beq.n	8015b2e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b2a:	230e      	movs	r3, #14
 8015b2c:	e000      	b.n	8015b30 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015b2e:	2300      	movs	r3, #0
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	20001d20 	.word	0x20001d20

08015b3c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b086      	sub	sp, #24
 8015b40:	af02      	add	r7, sp, #8
 8015b42:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d101      	bne.n	8015b4e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b4a:	2309      	movs	r3, #9
 8015b4c:	e02d      	b.n	8015baa <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015b4e:	2301      	movs	r3, #1
 8015b50:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8015b52:	4b18      	ldr	r3, [pc, #96]	@ (8015bb4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	889a      	ldrh	r2, [r3, #4]
 8015b58:	3201      	adds	r2, #1
 8015b5a:	b292      	uxth	r2, r2
 8015b5c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8015b5e:	4b15      	ldr	r3, [pc, #84]	@ (8015bb4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	889a      	ldrh	r2, [r3, #4]
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f000 fc14 	bl	8016396 <LoRaMacSerializerJoinRequest>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d001      	beq.n	8015b78 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015b74:	2310      	movs	r3, #16
 8015b76:	e018      	b.n	8015baa <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	6819      	ldr	r1, [r3, #0]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	3318      	adds	r3, #24
 8015b80:	7bfa      	ldrb	r2, [r7, #15]
 8015b82:	9300      	str	r3, [sp, #0]
 8015b84:	4613      	mov	r3, r2
 8015b86:	2213      	movs	r2, #19
 8015b88:	2000      	movs	r0, #0
 8015b8a:	f7f7 fd99 	bl	800d6c0 <SecureElementComputeAesCmac>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d001      	beq.n	8015b98 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b94:	230e      	movs	r3, #14
 8015b96:	e008      	b.n	8015baa <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f000 fbfc 	bl	8016396 <LoRaMacSerializerJoinRequest>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d001      	beq.n	8015ba8 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015ba4:	2310      	movs	r3, #16
 8015ba6:	e000      	b.n	8015baa <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015ba8:	2300      	movs	r3, #0
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3710      	adds	r7, #16
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}
 8015bb2:	bf00      	nop
 8015bb4:	20001d20 	.word	0x20001d20

08015bb8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015bb8:	b590      	push	{r4, r7, lr}
 8015bba:	b097      	sub	sp, #92	@ 0x5c
 8015bbc:	af04      	add	r7, sp, #16
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	607a      	str	r2, [r7, #4]
 8015bc4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d002      	beq.n	8015bd2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d101      	bne.n	8015bd6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015bd2:	2309      	movs	r3, #9
 8015bd4:	e0d1      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015bd6:	2312      	movs	r3, #18
 8015bd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015bdc:	f107 0314 	add.w	r3, r7, #20
 8015be0:	2221      	movs	r2, #33	@ 0x21
 8015be2:	2100      	movs	r1, #0
 8015be4:	4618      	mov	r0, r3
 8015be6:	f008 f88f 	bl	801dd08 <memset>
    uint8_t versionMinor         = 0;
 8015bea:	2300      	movs	r3, #0
 8015bec:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015bee:	4b65      	ldr	r3, [pc, #404]	@ (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	889b      	ldrh	r3, [r3, #4]
 8015bf4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	681c      	ldr	r4, [r3, #0]
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	791b      	ldrb	r3, [r3, #4]
 8015c00:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8015c04:	7bf8      	ldrb	r0, [r7, #15]
 8015c06:	f107 0213 	add.w	r2, r7, #19
 8015c0a:	9202      	str	r2, [sp, #8]
 8015c0c:	f107 0214 	add.w	r2, r7, #20
 8015c10:	9201      	str	r2, [sp, #4]
 8015c12:	9300      	str	r3, [sp, #0]
 8015c14:	4623      	mov	r3, r4
 8015c16:	460a      	mov	r2, r1
 8015c18:	68b9      	ldr	r1, [r7, #8]
 8015c1a:	f7f7 fe56 	bl	800d8ca <SecureElementProcessJoinAccept>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d001      	beq.n	8015c28 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015c24:	230e      	movs	r3, #14
 8015c26:	e0a8      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	6818      	ldr	r0, [r3, #0]
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	791b      	ldrb	r3, [r3, #4]
 8015c30:	461a      	mov	r2, r3
 8015c32:	f107 0314 	add.w	r3, r7, #20
 8015c36:	4619      	mov	r1, r3
 8015c38:	f002 ff5f 	bl	8018afa <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f000 f9ed 	bl	801601c <LoRaMacParserJoinAccept>
 8015c42:	4603      	mov	r3, r0
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d001      	beq.n	8015c4c <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015c48:	230f      	movs	r3, #15
 8015c4a:	e096      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	799b      	ldrb	r3, [r3, #6]
 8015c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	79db      	ldrb	r3, [r3, #7]
 8015c5c:	021b      	lsls	r3, r3, #8
 8015c5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015c60:	4313      	orrs	r3, r2
 8015c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	7a1b      	ldrb	r3, [r3, #8]
 8015c68:	041b      	lsls	r3, r3, #16
 8015c6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015c6c:	4313      	orrs	r3, r2
 8015c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8015c70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015c72:	f7ff fe4d 	bl	8015910 <IsJoinNonce10xOk>
 8015c76:	4603      	mov	r3, r0
 8015c78:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8015c7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d010      	beq.n	8015ca6 <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8015c84:	4b3f      	ldr	r3, [pc, #252]	@ (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015c8a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8015c8c:	7cfb      	ldrb	r3, [r7, #19]
 8015c8e:	210b      	movs	r1, #11
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 f989 	bl	8015fa8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015c96:	4603      	mov	r3, r0
 8015c98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015c9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d005      	beq.n	8015cb0 <LoRaMacCryptoHandleJoinAccept+0xf8>
 8015ca4:	e001      	b.n	8015caa <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8015ca6:	2303      	movs	r3, #3
 8015ca8:	e067      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 8015caa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cae:	e064      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8015cb0:	210c      	movs	r1, #12
 8015cb2:	2000      	movs	r0, #0
 8015cb4:	f000 f978 	bl	8015fa8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015cbe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d002      	beq.n	8015ccc <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 8015cc6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cca:	e056      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8015ccc:	210a      	movs	r1, #10
 8015cce:	2000      	movs	r0, #0
 8015cd0:	f000 f96a 	bl	8015fa8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015cda:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d002      	beq.n	8015ce8 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 8015ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ce6:	e048      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	7a5b      	ldrb	r3, [r3, #9]
 8015cec:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	7a9b      	ldrb	r3, [r3, #10]
 8015cf2:	021b      	lsls	r3, r3, #8
 8015cf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015cf6:	4313      	orrs	r3, r2
 8015cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	7adb      	ldrb	r3, [r3, #11]
 8015cfe:	041b      	lsls	r3, r3, #16
 8015d00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015d02:	4313      	orrs	r3, r2
 8015d04:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8015d06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015d0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015d0e:	2009      	movs	r0, #9
 8015d10:	f7ff fcdc 	bl	80156cc <DeriveSessionKey10x>
 8015d14:	4603      	mov	r3, r0
 8015d16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d002      	beq.n	8015d28 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 8015d22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015d26:	e028      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015d28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015d2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015d2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015d30:	2008      	movs	r0, #8
 8015d32:	f7ff fccb 	bl	80156cc <DeriveSessionKey10x>
 8015d36:	4603      	mov	r3, r0
 8015d38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d002      	beq.n	8015d4a <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 8015d44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015d48:	e017      	b.n	8015d7a <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	7cfa      	ldrb	r2, [r7, #19]
 8015d50:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8015d52:	4b0c      	ldr	r3, [pc, #48]	@ (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	2200      	movs	r2, #0
 8015d58:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d62:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015d64:	4b07      	ldr	r3, [pc, #28]	@ (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	f04f 32ff 	mov.w	r2, #4294967295
 8015d6c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015d6e:	4b05      	ldr	r3, [pc, #20]	@ (8015d84 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	f04f 32ff 	mov.w	r2, #4294967295
 8015d76:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015d78:	2300      	movs	r3, #0
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	374c      	adds	r7, #76	@ 0x4c
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd90      	pop	{r4, r7, pc}
 8015d82:	bf00      	nop
 8015d84:	20001d20 	.word	0x20001d20

08015d88 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015d88:	b590      	push	{r4, r7, lr}
 8015d8a:	b08b      	sub	sp, #44	@ 0x2c
 8015d8c:	af04      	add	r7, sp, #16
 8015d8e:	60f8      	str	r0, [r7, #12]
 8015d90:	607b      	str	r3, [r7, #4]
 8015d92:	460b      	mov	r3, r1
 8015d94:	72fb      	strb	r3, [r7, #11]
 8015d96:	4613      	mov	r3, r2
 8015d98:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015d9a:	2312      	movs	r3, #18
 8015d9c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015d9e:	2309      	movs	r3, #9
 8015da0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d101      	bne.n	8015dac <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015da8:	2309      	movs	r3, #9
 8015daa:	e05e      	b.n	8015e6a <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015dac:	4b31      	ldr	r3, [pc, #196]	@ (8015e74 <LoRaMacCryptoSecureMessage+0xec>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	68db      	ldr	r3, [r3, #12]
 8015db2:	68fa      	ldr	r2, [r7, #12]
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d201      	bcs.n	8015dbc <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015db8:	2306      	movs	r3, #6
 8015dba:	e056      	b.n	8015e6a <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d101      	bne.n	8015dca <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015dc6:	2308      	movs	r3, #8
 8015dc8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015dca:	4b2a      	ldr	r3, [pc, #168]	@ (8015e74 <LoRaMacCryptoSecureMessage+0xec>)
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	68db      	ldr	r3, [r3, #12]
 8015dd0:	68fa      	ldr	r2, [r7, #12]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d916      	bls.n	8015e04 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015de0:	b219      	sxth	r1, r3
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	689c      	ldr	r4, [r3, #8]
 8015de6:	7dfa      	ldrb	r2, [r7, #23]
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	9301      	str	r3, [sp, #4]
 8015dec:	2300      	movs	r3, #0
 8015dee:	9300      	str	r3, [sp, #0]
 8015df0:	4623      	mov	r3, r4
 8015df2:	f7ff fa79 	bl	80152e8 <PayloadEncrypt>
 8015df6:	4603      	mov	r3, r0
 8015df8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015dfa:	7dbb      	ldrb	r3, [r7, #22]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d001      	beq.n	8015e04 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015e00:	7dbb      	ldrb	r3, [r7, #22]
 8015e02:	e032      	b.n	8015e6a <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f000 fb48 	bl	801649a <LoRaMacSerializerData>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d001      	beq.n	8015e14 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015e10:	2310      	movs	r3, #16
 8015e12:	e02a      	b.n	8015e6a <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015e14:	2308      	movs	r3, #8
 8015e16:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6818      	ldr	r0, [r3, #0]
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	791b      	ldrb	r3, [r3, #4]
 8015e20:	3b04      	subs	r3, #4
 8015e22:	b299      	uxth	r1, r3
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	689b      	ldr	r3, [r3, #8]
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	322c      	adds	r2, #44	@ 0x2c
 8015e2c:	7dfc      	ldrb	r4, [r7, #23]
 8015e2e:	9203      	str	r2, [sp, #12]
 8015e30:	68fa      	ldr	r2, [r7, #12]
 8015e32:	9202      	str	r2, [sp, #8]
 8015e34:	9301      	str	r3, [sp, #4]
 8015e36:	2300      	movs	r3, #0
 8015e38:	9300      	str	r3, [sp, #0]
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	4622      	mov	r2, r4
 8015e3e:	f7ff fb52 	bl	80154e6 <ComputeCmacB0>
 8015e42:	4603      	mov	r3, r0
 8015e44:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e46:	7dbb      	ldrb	r3, [r7, #22]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d001      	beq.n	8015e50 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8015e4c:	7dbb      	ldrb	r3, [r7, #22]
 8015e4e:	e00c      	b.n	8015e6a <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f000 fb22 	bl	801649a <LoRaMacSerializerData>
 8015e56:	4603      	mov	r3, r0
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d001      	beq.n	8015e60 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015e5c:	2310      	movs	r3, #16
 8015e5e:	e004      	b.n	8015e6a <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8015e60:	4b04      	ldr	r3, [pc, #16]	@ (8015e74 <LoRaMacCryptoSecureMessage+0xec>)
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	68fa      	ldr	r2, [r7, #12]
 8015e66:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015e68:	2300      	movs	r3, #0
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	371c      	adds	r7, #28
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd90      	pop	{r4, r7, pc}
 8015e72:	bf00      	nop
 8015e74:	20001d20 	.word	0x20001d20

08015e78 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015e78:	b590      	push	{r4, r7, lr}
 8015e7a:	b08b      	sub	sp, #44	@ 0x2c
 8015e7c:	af04      	add	r7, sp, #16
 8015e7e:	60b9      	str	r1, [r7, #8]
 8015e80:	607b      	str	r3, [r7, #4]
 8015e82:	4603      	mov	r3, r0
 8015e84:	73fb      	strb	r3, [r7, #15]
 8015e86:	4613      	mov	r3, r2
 8015e88:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d101      	bne.n	8015e94 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e90:	2309      	movs	r3, #9
 8015e92:	e083      	b.n	8015f9c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015e94:	7bbb      	ldrb	r3, [r7, #14]
 8015e96:	6879      	ldr	r1, [r7, #4]
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7ff fca1 	bl	80157e0 <CheckFCntDown>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	f083 0301 	eor.w	r3, r3, #1
 8015ea4:	b2db      	uxtb	r3, r3
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d001      	beq.n	8015eae <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015eaa:	2306      	movs	r3, #6
 8015eac:	e076      	b.n	8015f9c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015eae:	2312      	movs	r3, #18
 8015eb0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015eb2:	2309      	movs	r3, #9
 8015eb4:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8015eb6:	2308      	movs	r3, #8
 8015eb8:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ebc:	f000 f979 	bl	80161b2 <LoRaMacParserData>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d001      	beq.n	8015eca <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015ec6:	230f      	movs	r3, #15
 8015ec8:	e068      	b.n	8015f9c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015eca:	f107 0210 	add.w	r2, r7, #16
 8015ece:	7bfb      	ldrb	r3, [r7, #15]
 8015ed0:	4611      	mov	r1, r2
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f7ff fbd4 	bl	8015680 <GetKeyAddrItem>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015edc:	7d7b      	ldrb	r3, [r7, #21]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d001      	beq.n	8015ee6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8015ee2:	7d7b      	ldrb	r3, [r7, #21]
 8015ee4:	e05a      	b.n	8015f9c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	785b      	ldrb	r3, [r3, #1]
 8015eea:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	789b      	ldrb	r3, [r3, #2]
 8015ef0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8015ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ef4:	689b      	ldr	r3, [r3, #8]
 8015ef6:	68ba      	ldr	r2, [r7, #8]
 8015ef8:	429a      	cmp	r2, r3
 8015efa:	d001      	beq.n	8015f00 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015efc:	2302      	movs	r3, #2
 8015efe:	e04d      	b.n	8015f9c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f02:	7b1b      	ldrb	r3, [r3, #12]
 8015f04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015f08:	b2db      	uxtb	r3, r3
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	bf14      	ite	ne
 8015f0e:	2301      	movne	r3, #1
 8015f10:	2300      	moveq	r3, #0
 8015f12:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015f14:	4b23      	ldr	r3, [pc, #140]	@ (8015fa4 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	789b      	ldrb	r3, [r3, #2]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d101      	bne.n	8015f22 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f24:	6818      	ldr	r0, [r3, #0]
 8015f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f28:	791b      	ldrb	r3, [r3, #4]
 8015f2a:	3b04      	subs	r3, #4
 8015f2c:	b299      	uxth	r1, r3
 8015f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f32:	7dbc      	ldrb	r4, [r7, #22]
 8015f34:	7d3a      	ldrb	r2, [r7, #20]
 8015f36:	9303      	str	r3, [sp, #12]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	9302      	str	r3, [sp, #8]
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	9301      	str	r3, [sp, #4]
 8015f40:	2301      	movs	r3, #1
 8015f42:	9300      	str	r3, [sp, #0]
 8015f44:	4623      	mov	r3, r4
 8015f46:	f7ff fb0c 	bl	8015562 <VerifyCmacB0>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015f4e:	7d7b      	ldrb	r3, [r7, #21]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d001      	beq.n	8015f58 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8015f54:	7d7b      	ldrb	r3, [r7, #21]
 8015f56:	e021      	b.n	8015f9c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d101      	bne.n	8015f66 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015f62:	2308      	movs	r3, #8
 8015f64:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f68:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f70:	b219      	sxth	r1, r3
 8015f72:	7dfa      	ldrb	r2, [r7, #23]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	9301      	str	r3, [sp, #4]
 8015f78:	2301      	movs	r3, #1
 8015f7a:	9300      	str	r3, [sp, #0]
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	f7ff f9b3 	bl	80152e8 <PayloadEncrypt>
 8015f82:	4603      	mov	r3, r0
 8015f84:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015f86:	7d7b      	ldrb	r3, [r7, #21]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d001      	beq.n	8015f90 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8015f8c:	7d7b      	ldrb	r3, [r7, #21]
 8015f8e:	e005      	b.n	8015f9c <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8015f90:	7bbb      	ldrb	r3, [r7, #14]
 8015f92:	6879      	ldr	r1, [r7, #4]
 8015f94:	4618      	mov	r0, r3
 8015f96:	f7ff fc47 	bl	8015828 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015f9a:	2300      	movs	r3, #0
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	371c      	adds	r7, #28
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd90      	pop	{r4, r7, pc}
 8015fa4:	20001d20 	.word	0x20001d20

08015fa8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b088      	sub	sp, #32
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	4603      	mov	r3, r0
 8015fb0:	460a      	mov	r2, r1
 8015fb2:	71fb      	strb	r3, [r7, #7]
 8015fb4:	4613      	mov	r3, r2
 8015fb6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8015fb8:	f107 030c 	add.w	r3, r7, #12
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	601a      	str	r2, [r3, #0]
 8015fc0:	605a      	str	r2, [r3, #4]
 8015fc2:	609a      	str	r2, [r3, #8]
 8015fc4:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8015fca:	79bb      	ldrb	r3, [r7, #6]
 8015fcc:	2b0c      	cmp	r3, #12
 8015fce:	d00b      	beq.n	8015fe8 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8015fd0:	2b0c      	cmp	r3, #12
 8015fd2:	dc0f      	bgt.n	8015ff4 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 8015fd4:	2b0a      	cmp	r3, #10
 8015fd6:	d00a      	beq.n	8015fee <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8015fd8:	2b0b      	cmp	r3, #11
 8015fda:	d10b      	bne.n	8015ff4 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8015fdc:	79fb      	ldrb	r3, [r7, #7]
 8015fde:	2b01      	cmp	r3, #1
 8015fe0:	d10a      	bne.n	8015ff8 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 8015fe2:	2320      	movs	r3, #32
 8015fe4:	733b      	strb	r3, [r7, #12]
            }
            break;
 8015fe6:	e007      	b.n	8015ff8 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8015fe8:	230b      	movs	r3, #11
 8015fea:	77fb      	strb	r3, [r7, #31]
            break;
 8015fec:	e005      	b.n	8015ffa <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8015fee:	2330      	movs	r3, #48	@ 0x30
 8015ff0:	733b      	strb	r3, [r7, #12]
            break;
 8015ff2:	e002      	b.n	8015ffa <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015ff4:	230a      	movs	r3, #10
 8015ff6:	e00d      	b.n	8016014 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8015ff8:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015ffa:	79ba      	ldrb	r2, [r7, #6]
 8015ffc:	7ff9      	ldrb	r1, [r7, #31]
 8015ffe:	f107 030c 	add.w	r3, r7, #12
 8016002:	4618      	mov	r0, r3
 8016004:	f7f7 fc22 	bl	800d84c <SecureElementDeriveAndStoreKey>
 8016008:	4603      	mov	r3, r0
 801600a:	2b00      	cmp	r3, #0
 801600c:	d001      	beq.n	8016012 <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801600e:	230e      	movs	r3, #14
 8016010:	e000      	b.n	8016014 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016012:	2300      	movs	r3, #0
}
 8016014:	4618      	mov	r0, r3
 8016016:	3720      	adds	r7, #32
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}

0801601c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b084      	sub	sp, #16
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d003      	beq.n	8016032 <LoRaMacParserJoinAccept+0x16>
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d101      	bne.n	8016036 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016032:	2302      	movs	r3, #2
 8016034:	e0b9      	b.n	80161aa <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8016036:	2300      	movs	r3, #0
 8016038:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681a      	ldr	r2, [r3, #0]
 801603e:	89fb      	ldrh	r3, [r7, #14]
 8016040:	1c59      	adds	r1, r3, #1
 8016042:	81f9      	strh	r1, [r7, #14]
 8016044:	4413      	add	r3, r2
 8016046:	781a      	ldrb	r2, [r3, #0]
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	1d98      	adds	r0, r3, #6
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	681a      	ldr	r2, [r3, #0]
 8016054:	89fb      	ldrh	r3, [r7, #14]
 8016056:	4413      	add	r3, r2
 8016058:	2203      	movs	r2, #3
 801605a:	4619      	mov	r1, r3
 801605c:	f002 fd4d 	bl	8018afa <memcpy1>
    bufItr = bufItr + 3;
 8016060:	89fb      	ldrh	r3, [r7, #14]
 8016062:	3303      	adds	r3, #3
 8016064:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f103 0009 	add.w	r0, r3, #9
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	681a      	ldr	r2, [r3, #0]
 8016070:	89fb      	ldrh	r3, [r7, #14]
 8016072:	4413      	add	r3, r2
 8016074:	2203      	movs	r2, #3
 8016076:	4619      	mov	r1, r3
 8016078:	f002 fd3f 	bl	8018afa <memcpy1>
    bufItr = bufItr + 3;
 801607c:	89fb      	ldrh	r3, [r7, #14]
 801607e:	3303      	adds	r3, #3
 8016080:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681a      	ldr	r2, [r3, #0]
 8016086:	89fb      	ldrh	r3, [r7, #14]
 8016088:	1c59      	adds	r1, r3, #1
 801608a:	81f9      	strh	r1, [r7, #14]
 801608c:	4413      	add	r3, r2
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	461a      	mov	r2, r3
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	89fb      	ldrh	r3, [r7, #14]
 801609c:	1c59      	adds	r1, r3, #1
 801609e:	81f9      	strh	r1, [r7, #14]
 80160a0:	4413      	add	r3, r2
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	021a      	lsls	r2, r3, #8
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	68db      	ldr	r3, [r3, #12]
 80160aa:	431a      	orrs	r2, r3
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681a      	ldr	r2, [r3, #0]
 80160b4:	89fb      	ldrh	r3, [r7, #14]
 80160b6:	1c59      	adds	r1, r3, #1
 80160b8:	81f9      	strh	r1, [r7, #14]
 80160ba:	4413      	add	r3, r2
 80160bc:	781b      	ldrb	r3, [r3, #0]
 80160be:	041a      	lsls	r2, r3, #16
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	68db      	ldr	r3, [r3, #12]
 80160c4:	431a      	orrs	r2, r3
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681a      	ldr	r2, [r3, #0]
 80160ce:	89fb      	ldrh	r3, [r7, #14]
 80160d0:	1c59      	adds	r1, r3, #1
 80160d2:	81f9      	strh	r1, [r7, #14]
 80160d4:	4413      	add	r3, r2
 80160d6:	781b      	ldrb	r3, [r3, #0]
 80160d8:	061a      	lsls	r2, r3, #24
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	68db      	ldr	r3, [r3, #12]
 80160de:	431a      	orrs	r2, r3
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681a      	ldr	r2, [r3, #0]
 80160e8:	89fb      	ldrh	r3, [r7, #14]
 80160ea:	1c59      	adds	r1, r3, #1
 80160ec:	81f9      	strh	r1, [r7, #14]
 80160ee:	4413      	add	r3, r2
 80160f0:	781a      	ldrb	r2, [r3, #0]
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	681a      	ldr	r2, [r3, #0]
 80160fa:	89fb      	ldrh	r3, [r7, #14]
 80160fc:	1c59      	adds	r1, r3, #1
 80160fe:	81f9      	strh	r1, [r7, #14]
 8016100:	4413      	add	r3, r2
 8016102:	781a      	ldrb	r2, [r3, #0]
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	791b      	ldrb	r3, [r3, #4]
 801610c:	1f1a      	subs	r2, r3, #4
 801610e:	89fb      	ldrh	r3, [r7, #14]
 8016110:	1ad3      	subs	r3, r2, r3
 8016112:	2b10      	cmp	r3, #16
 8016114:	d10e      	bne.n	8016134 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f103 0012 	add.w	r0, r3, #18
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	681a      	ldr	r2, [r3, #0]
 8016120:	89fb      	ldrh	r3, [r7, #14]
 8016122:	4413      	add	r3, r2
 8016124:	2210      	movs	r2, #16
 8016126:	4619      	mov	r1, r3
 8016128:	f002 fce7 	bl	8018afa <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801612c:	89fb      	ldrh	r3, [r7, #14]
 801612e:	3310      	adds	r3, #16
 8016130:	81fb      	strh	r3, [r7, #14]
 8016132:	e008      	b.n	8016146 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	791b      	ldrb	r3, [r3, #4]
 8016138:	1f1a      	subs	r2, r3, #4
 801613a:	89fb      	ldrh	r3, [r7, #14]
 801613c:	1ad3      	subs	r3, r2, r3
 801613e:	2b00      	cmp	r3, #0
 8016140:	dd01      	ble.n	8016146 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8016142:	2301      	movs	r3, #1
 8016144:	e031      	b.n	80161aa <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681a      	ldr	r2, [r3, #0]
 801614a:	89fb      	ldrh	r3, [r7, #14]
 801614c:	1c59      	adds	r1, r3, #1
 801614e:	81f9      	strh	r1, [r7, #14]
 8016150:	4413      	add	r3, r2
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	461a      	mov	r2, r3
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681a      	ldr	r2, [r3, #0]
 801615e:	89fb      	ldrh	r3, [r7, #14]
 8016160:	1c59      	adds	r1, r3, #1
 8016162:	81f9      	strh	r1, [r7, #14]
 8016164:	4413      	add	r3, r2
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	021a      	lsls	r2, r3, #8
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801616e:	431a      	orrs	r2, r3
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681a      	ldr	r2, [r3, #0]
 8016178:	89fb      	ldrh	r3, [r7, #14]
 801617a:	1c59      	adds	r1, r3, #1
 801617c:	81f9      	strh	r1, [r7, #14]
 801617e:	4413      	add	r3, r2
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	041a      	lsls	r2, r3, #16
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016188:	431a      	orrs	r2, r3
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681a      	ldr	r2, [r3, #0]
 8016192:	89fb      	ldrh	r3, [r7, #14]
 8016194:	1c59      	adds	r1, r3, #1
 8016196:	81f9      	strh	r1, [r7, #14]
 8016198:	4413      	add	r3, r2
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	061a      	lsls	r2, r3, #24
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161a2:	431a      	orrs	r2, r3
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 80161a8:	2300      	movs	r3, #0
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3710      	adds	r7, #16
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}

080161b2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b084      	sub	sp, #16
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d003      	beq.n	80161c8 <LoRaMacParserData+0x16>
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d101      	bne.n	80161cc <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80161c8:	2302      	movs	r3, #2
 80161ca:	e0e0      	b.n	801638e <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 80161cc:	2300      	movs	r3, #0
 80161ce:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	681a      	ldr	r2, [r3, #0]
 80161d4:	89fb      	ldrh	r3, [r7, #14]
 80161d6:	1c59      	adds	r1, r3, #1
 80161d8:	81f9      	strh	r1, [r7, #14]
 80161da:	4413      	add	r3, r2
 80161dc:	781a      	ldrb	r2, [r3, #0]
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681a      	ldr	r2, [r3, #0]
 80161e6:	89fb      	ldrh	r3, [r7, #14]
 80161e8:	1c59      	adds	r1, r3, #1
 80161ea:	81f9      	strh	r1, [r7, #14]
 80161ec:	4413      	add	r3, r2
 80161ee:	781b      	ldrb	r3, [r3, #0]
 80161f0:	461a      	mov	r2, r3
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681a      	ldr	r2, [r3, #0]
 80161fa:	89fb      	ldrh	r3, [r7, #14]
 80161fc:	1c59      	adds	r1, r3, #1
 80161fe:	81f9      	strh	r1, [r7, #14]
 8016200:	4413      	add	r3, r2
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	021a      	lsls	r2, r3, #8
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	689b      	ldr	r3, [r3, #8]
 801620a:	431a      	orrs	r2, r3
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	89fb      	ldrh	r3, [r7, #14]
 8016216:	1c59      	adds	r1, r3, #1
 8016218:	81f9      	strh	r1, [r7, #14]
 801621a:	4413      	add	r3, r2
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	041a      	lsls	r2, r3, #16
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	689b      	ldr	r3, [r3, #8]
 8016224:	431a      	orrs	r2, r3
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	89fb      	ldrh	r3, [r7, #14]
 8016230:	1c59      	adds	r1, r3, #1
 8016232:	81f9      	strh	r1, [r7, #14]
 8016234:	4413      	add	r3, r2
 8016236:	781b      	ldrb	r3, [r3, #0]
 8016238:	061a      	lsls	r2, r3, #24
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	689b      	ldr	r3, [r3, #8]
 801623e:	431a      	orrs	r2, r3
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681a      	ldr	r2, [r3, #0]
 8016248:	89fb      	ldrh	r3, [r7, #14]
 801624a:	1c59      	adds	r1, r3, #1
 801624c:	81f9      	strh	r1, [r7, #14]
 801624e:	4413      	add	r3, r2
 8016250:	781a      	ldrb	r2, [r3, #0]
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	89fb      	ldrh	r3, [r7, #14]
 801625c:	1c59      	adds	r1, r3, #1
 801625e:	81f9      	strh	r1, [r7, #14]
 8016260:	4413      	add	r3, r2
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	461a      	mov	r2, r3
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681a      	ldr	r2, [r3, #0]
 801626e:	89fb      	ldrh	r3, [r7, #14]
 8016270:	1c59      	adds	r1, r3, #1
 8016272:	81f9      	strh	r1, [r7, #14]
 8016274:	4413      	add	r3, r2
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	0219      	lsls	r1, r3, #8
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	89db      	ldrh	r3, [r3, #14]
 801627e:	b21a      	sxth	r2, r3
 8016280:	b20b      	sxth	r3, r1
 8016282:	4313      	orrs	r3, r2
 8016284:	b21b      	sxth	r3, r3
 8016286:	b29a      	uxth	r2, r3
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	f103 0010 	add.w	r0, r3, #16
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	681a      	ldr	r2, [r3, #0]
 8016296:	89fb      	ldrh	r3, [r7, #14]
 8016298:	18d1      	adds	r1, r2, r3
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	7b1b      	ldrb	r3, [r3, #12]
 801629e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	461a      	mov	r2, r3
 80162a6:	f002 fc28 	bl	8018afa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	7b1b      	ldrb	r3, [r3, #12]
 80162ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80162b2:	b2db      	uxtb	r3, r3
 80162b4:	461a      	mov	r2, r3
 80162b6:	89fb      	ldrh	r3, [r7, #14]
 80162b8:	4413      	add	r3, r2
 80162ba:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	2200      	movs	r2, #0
 80162c0:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	791b      	ldrb	r3, [r3, #4]
 80162d0:	461a      	mov	r2, r3
 80162d2:	89fb      	ldrh	r3, [r7, #14]
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	2b04      	cmp	r3, #4
 80162d8:	dd27      	ble.n	801632a <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681a      	ldr	r2, [r3, #0]
 80162de:	89fb      	ldrh	r3, [r7, #14]
 80162e0:	1c59      	adds	r1, r3, #1
 80162e2:	81f9      	strh	r1, [r7, #14]
 80162e4:	4413      	add	r3, r2
 80162e6:	781a      	ldrb	r2, [r3, #0]
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	791a      	ldrb	r2, [r3, #4]
 80162f2:	89fb      	ldrh	r3, [r7, #14]
 80162f4:	b2db      	uxtb	r3, r3
 80162f6:	1ad3      	subs	r3, r2, r3
 80162f8:	b2db      	uxtb	r3, r3
 80162fa:	3b04      	subs	r3, #4
 80162fc:	b2da      	uxtb	r2, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681a      	ldr	r2, [r3, #0]
 801630c:	89fb      	ldrh	r3, [r7, #14]
 801630e:	18d1      	adds	r1, r2, r3
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016316:	461a      	mov	r2, r3
 8016318:	f002 fbef 	bl	8018afa <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016322:	461a      	mov	r2, r3
 8016324:	89fb      	ldrh	r3, [r7, #14]
 8016326:	4413      	add	r3, r2
 8016328:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	791b      	ldrb	r3, [r3, #4]
 8016332:	3b04      	subs	r3, #4
 8016334:	4413      	add	r3, r2
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	461a      	mov	r2, r3
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	6819      	ldr	r1, [r3, #0]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	791b      	ldrb	r3, [r3, #4]
 801634a:	3b03      	subs	r3, #3
 801634c:	440b      	add	r3, r1
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	021b      	lsls	r3, r3, #8
 8016352:	431a      	orrs	r2, r3
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	6819      	ldr	r1, [r3, #0]
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	791b      	ldrb	r3, [r3, #4]
 8016364:	3b02      	subs	r3, #2
 8016366:	440b      	add	r3, r1
 8016368:	781b      	ldrb	r3, [r3, #0]
 801636a:	041b      	lsls	r3, r3, #16
 801636c:	431a      	orrs	r2, r3
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	6819      	ldr	r1, [r3, #0]
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	791b      	ldrb	r3, [r3, #4]
 801637e:	3b01      	subs	r3, #1
 8016380:	440b      	add	r3, r1
 8016382:	781b      	ldrb	r3, [r3, #0]
 8016384:	061b      	lsls	r3, r3, #24
 8016386:	431a      	orrs	r2, r3
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801638c:	2300      	movs	r3, #0
}
 801638e:	4618      	mov	r0, r3
 8016390:	3710      	adds	r7, #16
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}

08016396 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016396:	b580      	push	{r7, lr}
 8016398:	b084      	sub	sp, #16
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d003      	beq.n	80163ac <LoRaMacSerializerJoinRequest+0x16>
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d101      	bne.n	80163b0 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80163ac:	2301      	movs	r3, #1
 80163ae:	e070      	b.n	8016492 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80163b0:	2300      	movs	r3, #0
 80163b2:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	791b      	ldrb	r3, [r3, #4]
 80163b8:	2b16      	cmp	r3, #22
 80163ba:	d801      	bhi.n	80163c0 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80163bc:	2302      	movs	r3, #2
 80163be:	e068      	b.n	8016492 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681a      	ldr	r2, [r3, #0]
 80163c4:	89fb      	ldrh	r3, [r7, #14]
 80163c6:	1c59      	adds	r1, r3, #1
 80163c8:	81f9      	strh	r1, [r7, #14]
 80163ca:	4413      	add	r3, r2
 80163cc:	687a      	ldr	r2, [r7, #4]
 80163ce:	7952      	ldrb	r2, [r2, #5]
 80163d0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681a      	ldr	r2, [r3, #0]
 80163d6:	89fb      	ldrh	r3, [r7, #14]
 80163d8:	18d0      	adds	r0, r2, r3
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	3306      	adds	r3, #6
 80163de:	2208      	movs	r2, #8
 80163e0:	4619      	mov	r1, r3
 80163e2:	f002 fba5 	bl	8018b30 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80163e6:	89fb      	ldrh	r3, [r7, #14]
 80163e8:	3308      	adds	r3, #8
 80163ea:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681a      	ldr	r2, [r3, #0]
 80163f0:	89fb      	ldrh	r3, [r7, #14]
 80163f2:	18d0      	adds	r0, r2, r3
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	330e      	adds	r3, #14
 80163f8:	2208      	movs	r2, #8
 80163fa:	4619      	mov	r1, r3
 80163fc:	f002 fb98 	bl	8018b30 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016400:	89fb      	ldrh	r3, [r7, #14]
 8016402:	3308      	adds	r3, #8
 8016404:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	8ad9      	ldrh	r1, [r3, #22]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681a      	ldr	r2, [r3, #0]
 801640e:	89fb      	ldrh	r3, [r7, #14]
 8016410:	1c58      	adds	r0, r3, #1
 8016412:	81f8      	strh	r0, [r7, #14]
 8016414:	4413      	add	r3, r2
 8016416:	b2ca      	uxtb	r2, r1
 8016418:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	8adb      	ldrh	r3, [r3, #22]
 801641e:	0a1b      	lsrs	r3, r3, #8
 8016420:	b299      	uxth	r1, r3
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681a      	ldr	r2, [r3, #0]
 8016426:	89fb      	ldrh	r3, [r7, #14]
 8016428:	1c58      	adds	r0, r3, #1
 801642a:	81f8      	strh	r0, [r7, #14]
 801642c:	4413      	add	r3, r2
 801642e:	b2ca      	uxtb	r2, r1
 8016430:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	6999      	ldr	r1, [r3, #24]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681a      	ldr	r2, [r3, #0]
 801643a:	89fb      	ldrh	r3, [r7, #14]
 801643c:	1c58      	adds	r0, r3, #1
 801643e:	81f8      	strh	r0, [r7, #14]
 8016440:	4413      	add	r3, r2
 8016442:	b2ca      	uxtb	r2, r1
 8016444:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	699b      	ldr	r3, [r3, #24]
 801644a:	0a19      	lsrs	r1, r3, #8
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	681a      	ldr	r2, [r3, #0]
 8016450:	89fb      	ldrh	r3, [r7, #14]
 8016452:	1c58      	adds	r0, r3, #1
 8016454:	81f8      	strh	r0, [r7, #14]
 8016456:	4413      	add	r3, r2
 8016458:	b2ca      	uxtb	r2, r1
 801645a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	699b      	ldr	r3, [r3, #24]
 8016460:	0c19      	lsrs	r1, r3, #16
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681a      	ldr	r2, [r3, #0]
 8016466:	89fb      	ldrh	r3, [r7, #14]
 8016468:	1c58      	adds	r0, r3, #1
 801646a:	81f8      	strh	r0, [r7, #14]
 801646c:	4413      	add	r3, r2
 801646e:	b2ca      	uxtb	r2, r1
 8016470:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	699b      	ldr	r3, [r3, #24]
 8016476:	0e19      	lsrs	r1, r3, #24
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681a      	ldr	r2, [r3, #0]
 801647c:	89fb      	ldrh	r3, [r7, #14]
 801647e:	1c58      	adds	r0, r3, #1
 8016480:	81f8      	strh	r0, [r7, #14]
 8016482:	4413      	add	r3, r2
 8016484:	b2ca      	uxtb	r2, r1
 8016486:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016488:	89fb      	ldrh	r3, [r7, #14]
 801648a:	b2da      	uxtb	r2, r3
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016490:	2300      	movs	r3, #0
}
 8016492:	4618      	mov	r0, r3
 8016494:	3710      	adds	r7, #16
 8016496:	46bd      	mov	sp, r7
 8016498:	bd80      	pop	{r7, pc}

0801649a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801649a:	b580      	push	{r7, lr}
 801649c:	b084      	sub	sp, #16
 801649e:	af00      	add	r7, sp, #0
 80164a0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d003      	beq.n	80164b0 <LoRaMacSerializerData+0x16>
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d101      	bne.n	80164b4 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80164b0:	2301      	movs	r3, #1
 80164b2:	e0e3      	b.n	801667c <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 80164b4:	2300      	movs	r3, #0
 80164b6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80164b8:	2308      	movs	r3, #8
 80164ba:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	7b1b      	ldrb	r3, [r3, #12]
 80164c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80164c4:	b2db      	uxtb	r3, r3
 80164c6:	461a      	mov	r2, r3
 80164c8:	89bb      	ldrh	r3, [r7, #12]
 80164ca:	4413      	add	r3, r2
 80164cc:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d002      	beq.n	80164de <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80164d8:	89bb      	ldrh	r3, [r7, #12]
 80164da:	3301      	adds	r3, #1
 80164dc:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80164e4:	461a      	mov	r2, r3
 80164e6:	89bb      	ldrh	r3, [r7, #12]
 80164e8:	4413      	add	r3, r2
 80164ea:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80164ec:	89bb      	ldrh	r3, [r7, #12]
 80164ee:	3304      	adds	r3, #4
 80164f0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	791b      	ldrb	r3, [r3, #4]
 80164f6:	461a      	mov	r2, r3
 80164f8:	89bb      	ldrh	r3, [r7, #12]
 80164fa:	4293      	cmp	r3, r2
 80164fc:	d901      	bls.n	8016502 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80164fe:	2302      	movs	r3, #2
 8016500:	e0bc      	b.n	801667c <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	681a      	ldr	r2, [r3, #0]
 8016506:	89fb      	ldrh	r3, [r7, #14]
 8016508:	1c59      	adds	r1, r3, #1
 801650a:	81f9      	strh	r1, [r7, #14]
 801650c:	4413      	add	r3, r2
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	7952      	ldrb	r2, [r2, #5]
 8016512:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	6899      	ldr	r1, [r3, #8]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681a      	ldr	r2, [r3, #0]
 801651c:	89fb      	ldrh	r3, [r7, #14]
 801651e:	1c58      	adds	r0, r3, #1
 8016520:	81f8      	strh	r0, [r7, #14]
 8016522:	4413      	add	r3, r2
 8016524:	b2ca      	uxtb	r2, r1
 8016526:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	689b      	ldr	r3, [r3, #8]
 801652c:	0a19      	lsrs	r1, r3, #8
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681a      	ldr	r2, [r3, #0]
 8016532:	89fb      	ldrh	r3, [r7, #14]
 8016534:	1c58      	adds	r0, r3, #1
 8016536:	81f8      	strh	r0, [r7, #14]
 8016538:	4413      	add	r3, r2
 801653a:	b2ca      	uxtb	r2, r1
 801653c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	689b      	ldr	r3, [r3, #8]
 8016542:	0c19      	lsrs	r1, r3, #16
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681a      	ldr	r2, [r3, #0]
 8016548:	89fb      	ldrh	r3, [r7, #14]
 801654a:	1c58      	adds	r0, r3, #1
 801654c:	81f8      	strh	r0, [r7, #14]
 801654e:	4413      	add	r3, r2
 8016550:	b2ca      	uxtb	r2, r1
 8016552:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	689b      	ldr	r3, [r3, #8]
 8016558:	0e19      	lsrs	r1, r3, #24
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681a      	ldr	r2, [r3, #0]
 801655e:	89fb      	ldrh	r3, [r7, #14]
 8016560:	1c58      	adds	r0, r3, #1
 8016562:	81f8      	strh	r0, [r7, #14]
 8016564:	4413      	add	r3, r2
 8016566:	b2ca      	uxtb	r2, r1
 8016568:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	681a      	ldr	r2, [r3, #0]
 801656e:	89fb      	ldrh	r3, [r7, #14]
 8016570:	1c59      	adds	r1, r3, #1
 8016572:	81f9      	strh	r1, [r7, #14]
 8016574:	4413      	add	r3, r2
 8016576:	687a      	ldr	r2, [r7, #4]
 8016578:	7b12      	ldrb	r2, [r2, #12]
 801657a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	89d9      	ldrh	r1, [r3, #14]
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	89fb      	ldrh	r3, [r7, #14]
 8016586:	1c58      	adds	r0, r3, #1
 8016588:	81f8      	strh	r0, [r7, #14]
 801658a:	4413      	add	r3, r2
 801658c:	b2ca      	uxtb	r2, r1
 801658e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	89db      	ldrh	r3, [r3, #14]
 8016594:	0a1b      	lsrs	r3, r3, #8
 8016596:	b299      	uxth	r1, r3
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681a      	ldr	r2, [r3, #0]
 801659c:	89fb      	ldrh	r3, [r7, #14]
 801659e:	1c58      	adds	r0, r3, #1
 80165a0:	81f8      	strh	r0, [r7, #14]
 80165a2:	4413      	add	r3, r2
 80165a4:	b2ca      	uxtb	r2, r1
 80165a6:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	89fb      	ldrh	r3, [r7, #14]
 80165ae:	18d0      	adds	r0, r2, r3
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f103 0110 	add.w	r1, r3, #16
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	7b1b      	ldrb	r3, [r3, #12]
 80165ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	461a      	mov	r2, r3
 80165c2:	f002 fa9a 	bl	8018afa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	7b1b      	ldrb	r3, [r3, #12]
 80165ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80165ce:	b2db      	uxtb	r3, r3
 80165d0:	461a      	mov	r2, r3
 80165d2:	89fb      	ldrh	r3, [r7, #14]
 80165d4:	4413      	add	r3, r2
 80165d6:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d009      	beq.n	80165f6 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	681a      	ldr	r2, [r3, #0]
 80165e6:	89fb      	ldrh	r3, [r7, #14]
 80165e8:	1c59      	adds	r1, r3, #1
 80165ea:	81f9      	strh	r1, [r7, #14]
 80165ec:	4413      	add	r3, r2
 80165ee:	687a      	ldr	r2, [r7, #4]
 80165f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80165f4:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681a      	ldr	r2, [r3, #0]
 80165fa:	89fb      	ldrh	r3, [r7, #14]
 80165fc:	18d0      	adds	r0, r2, r3
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016608:	461a      	mov	r2, r3
 801660a:	f002 fa76 	bl	8018afa <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016614:	461a      	mov	r2, r3
 8016616:	89fb      	ldrh	r3, [r7, #14]
 8016618:	4413      	add	r3, r2
 801661a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	89fb      	ldrh	r3, [r7, #14]
 8016626:	1c58      	adds	r0, r3, #1
 8016628:	81f8      	strh	r0, [r7, #14]
 801662a:	4413      	add	r3, r2
 801662c:	b2ca      	uxtb	r2, r1
 801662e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016634:	0a19      	lsrs	r1, r3, #8
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	89fb      	ldrh	r3, [r7, #14]
 801663c:	1c58      	adds	r0, r3, #1
 801663e:	81f8      	strh	r0, [r7, #14]
 8016640:	4413      	add	r3, r2
 8016642:	b2ca      	uxtb	r2, r1
 8016644:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801664a:	0c19      	lsrs	r1, r3, #16
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	681a      	ldr	r2, [r3, #0]
 8016650:	89fb      	ldrh	r3, [r7, #14]
 8016652:	1c58      	adds	r0, r3, #1
 8016654:	81f8      	strh	r0, [r7, #14]
 8016656:	4413      	add	r3, r2
 8016658:	b2ca      	uxtb	r2, r1
 801665a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016660:	0e19      	lsrs	r1, r3, #24
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	681a      	ldr	r2, [r3, #0]
 8016666:	89fb      	ldrh	r3, [r7, #14]
 8016668:	1c58      	adds	r0, r3, #1
 801666a:	81f8      	strh	r0, [r7, #14]
 801666c:	4413      	add	r3, r2
 801666e:	b2ca      	uxtb	r2, r1
 8016670:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016672:	89fb      	ldrh	r3, [r7, #14]
 8016674:	b2da      	uxtb	r2, r3
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801667a:	2300      	movs	r3, #0
}
 801667c:	4618      	mov	r0, r3
 801667e:	3710      	adds	r7, #16
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}

08016684 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016684:	b480      	push	{r7}
 8016686:	b083      	sub	sp, #12
 8016688:	af00      	add	r7, sp, #0
 801668a:	4603      	mov	r3, r0
 801668c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801668e:	79fb      	ldrb	r3, [r7, #7]
 8016690:	2b05      	cmp	r3, #5
 8016692:	d101      	bne.n	8016698 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016694:	2301      	movs	r3, #1
 8016696:	e000      	b.n	801669a <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016698:	2300      	movs	r3, #0
        }
    }
}
 801669a:	4618      	mov	r0, r3
 801669c:	370c      	adds	r7, #12
 801669e:	46bd      	mov	sp, r7
 80166a0:	bc80      	pop	{r7}
 80166a2:	4770      	bx	lr

080166a4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b084      	sub	sp, #16
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	4603      	mov	r3, r0
 80166ac:	6039      	str	r1, [r7, #0]
 80166ae:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80166b0:	2300      	movs	r3, #0
 80166b2:	60bb      	str	r3, [r7, #8]
    switch( region )
 80166b4:	79fb      	ldrb	r3, [r7, #7]
 80166b6:	2b05      	cmp	r3, #5
 80166b8:	d105      	bne.n	80166c6 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80166ba:	6838      	ldr	r0, [r7, #0]
 80166bc:	f001 f8fa 	bl	80178b4 <RegionEU868GetPhyParam>
 80166c0:	4603      	mov	r3, r0
 80166c2:	60fb      	str	r3, [r7, #12]
 80166c4:	e001      	b.n	80166ca <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	4618      	mov	r0, r3
 80166ce:	3710      	adds	r7, #16
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}

080166d4 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
 80166da:	4603      	mov	r3, r0
 80166dc:	6039      	str	r1, [r7, #0]
 80166de:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80166e0:	79fb      	ldrb	r3, [r7, #7]
 80166e2:	2b05      	cmp	r3, #5
 80166e4:	d103      	bne.n	80166ee <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80166e6:	6838      	ldr	r0, [r7, #0]
 80166e8:	f001 fa2a 	bl	8017b40 <RegionEU868SetBandTxDone>
 80166ec:	e000      	b.n	80166f0 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80166ee:	bf00      	nop
        }
    }
}
 80166f0:	3708      	adds	r7, #8
 80166f2:	46bd      	mov	sp, r7
 80166f4:	bd80      	pop	{r7, pc}

080166f6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80166f6:	b580      	push	{r7, lr}
 80166f8:	b082      	sub	sp, #8
 80166fa:	af00      	add	r7, sp, #0
 80166fc:	4603      	mov	r3, r0
 80166fe:	6039      	str	r1, [r7, #0]
 8016700:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016702:	79fb      	ldrb	r3, [r7, #7]
 8016704:	2b05      	cmp	r3, #5
 8016706:	d103      	bne.n	8016710 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016708:	6838      	ldr	r0, [r7, #0]
 801670a:	f001 fa45 	bl	8017b98 <RegionEU868InitDefaults>
 801670e:	e000      	b.n	8016712 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016710:	bf00      	nop
        }
    }
}
 8016712:	bf00      	nop
 8016714:	3708      	adds	r7, #8
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}

0801671a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801671a:	b580      	push	{r7, lr}
 801671c:	b082      	sub	sp, #8
 801671e:	af00      	add	r7, sp, #0
 8016720:	4603      	mov	r3, r0
 8016722:	6039      	str	r1, [r7, #0]
 8016724:	71fb      	strb	r3, [r7, #7]
 8016726:	4613      	mov	r3, r2
 8016728:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801672a:	79fb      	ldrb	r3, [r7, #7]
 801672c:	2b05      	cmp	r3, #5
 801672e:	d106      	bne.n	801673e <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016730:	79bb      	ldrb	r3, [r7, #6]
 8016732:	4619      	mov	r1, r3
 8016734:	6838      	ldr	r0, [r7, #0]
 8016736:	f001 facd 	bl	8017cd4 <RegionEU868Verify>
 801673a:	4603      	mov	r3, r0
 801673c:	e000      	b.n	8016740 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801673e:	2300      	movs	r3, #0
        }
    }
}
 8016740:	4618      	mov	r0, r3
 8016742:	3708      	adds	r7, #8
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}

08016748 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b082      	sub	sp, #8
 801674c:	af00      	add	r7, sp, #0
 801674e:	4603      	mov	r3, r0
 8016750:	6039      	str	r1, [r7, #0]
 8016752:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016754:	79fb      	ldrb	r3, [r7, #7]
 8016756:	2b05      	cmp	r3, #5
 8016758:	d103      	bne.n	8016762 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801675a:	6838      	ldr	r0, [r7, #0]
 801675c:	f001 fb36 	bl	8017dcc <RegionEU868ApplyCFList>
 8016760:	e000      	b.n	8016764 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016762:	bf00      	nop
        }
    }
}
 8016764:	bf00      	nop
 8016766:	3708      	adds	r7, #8
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}

0801676c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b082      	sub	sp, #8
 8016770:	af00      	add	r7, sp, #0
 8016772:	4603      	mov	r3, r0
 8016774:	6039      	str	r1, [r7, #0]
 8016776:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016778:	79fb      	ldrb	r3, [r7, #7]
 801677a:	2b05      	cmp	r3, #5
 801677c:	d104      	bne.n	8016788 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801677e:	6838      	ldr	r0, [r7, #0]
 8016780:	f001 fb98 	bl	8017eb4 <RegionEU868ChanMaskSet>
 8016784:	4603      	mov	r3, r0
 8016786:	e000      	b.n	801678a <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016788:	2300      	movs	r3, #0
        }
    }
}
 801678a:	4618      	mov	r0, r3
 801678c:	3708      	adds	r7, #8
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}

08016792 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016792:	b580      	push	{r7, lr}
 8016794:	b082      	sub	sp, #8
 8016796:	af00      	add	r7, sp, #0
 8016798:	603b      	str	r3, [r7, #0]
 801679a:	4603      	mov	r3, r0
 801679c:	71fb      	strb	r3, [r7, #7]
 801679e:	460b      	mov	r3, r1
 80167a0:	71bb      	strb	r3, [r7, #6]
 80167a2:	4613      	mov	r3, r2
 80167a4:	717b      	strb	r3, [r7, #5]
    switch( region )
 80167a6:	79fb      	ldrb	r3, [r7, #7]
 80167a8:	2b05      	cmp	r3, #5
 80167aa:	d107      	bne.n	80167bc <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80167ac:	7979      	ldrb	r1, [r7, #5]
 80167ae:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80167b2:	693b      	ldr	r3, [r7, #16]
 80167b4:	683a      	ldr	r2, [r7, #0]
 80167b6:	f001 fba7 	bl	8017f08 <RegionEU868ComputeRxWindowParameters>
 80167ba:	e000      	b.n	80167be <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80167bc:	bf00      	nop
        }
    }
}
 80167be:	bf00      	nop
 80167c0:	3708      	adds	r7, #8
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b084      	sub	sp, #16
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	4603      	mov	r3, r0
 80167ce:	60b9      	str	r1, [r7, #8]
 80167d0:	607a      	str	r2, [r7, #4]
 80167d2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80167d4:	7bfb      	ldrb	r3, [r7, #15]
 80167d6:	2b05      	cmp	r3, #5
 80167d8:	d105      	bne.n	80167e6 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80167da:	6879      	ldr	r1, [r7, #4]
 80167dc:	68b8      	ldr	r0, [r7, #8]
 80167de:	f001 fbed 	bl	8017fbc <RegionEU868RxConfig>
 80167e2:	4603      	mov	r3, r0
 80167e4:	e000      	b.n	80167e8 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80167e6:	2300      	movs	r3, #0
        }
    }
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	3710      	adds	r7, #16
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bd80      	pop	{r7, pc}

080167f0 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b084      	sub	sp, #16
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	60b9      	str	r1, [r7, #8]
 80167f8:	607a      	str	r2, [r7, #4]
 80167fa:	603b      	str	r3, [r7, #0]
 80167fc:	4603      	mov	r3, r0
 80167fe:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016800:	7bfb      	ldrb	r3, [r7, #15]
 8016802:	2b05      	cmp	r3, #5
 8016804:	d106      	bne.n	8016814 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016806:	683a      	ldr	r2, [r7, #0]
 8016808:	6879      	ldr	r1, [r7, #4]
 801680a:	68b8      	ldr	r0, [r7, #8]
 801680c:	f001 fca6 	bl	801815c <RegionEU868TxConfig>
 8016810:	4603      	mov	r3, r0
 8016812:	e000      	b.n	8016816 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016814:	2300      	movs	r3, #0
        }
    }
}
 8016816:	4618      	mov	r0, r3
 8016818:	3710      	adds	r7, #16
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}

0801681e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801681e:	b580      	push	{r7, lr}
 8016820:	b086      	sub	sp, #24
 8016822:	af02      	add	r7, sp, #8
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	607a      	str	r2, [r7, #4]
 8016828:	603b      	str	r3, [r7, #0]
 801682a:	4603      	mov	r3, r0
 801682c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801682e:	7bfb      	ldrb	r3, [r7, #15]
 8016830:	2b05      	cmp	r3, #5
 8016832:	d109      	bne.n	8016848 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016834:	69fb      	ldr	r3, [r7, #28]
 8016836:	9300      	str	r3, [sp, #0]
 8016838:	69bb      	ldr	r3, [r7, #24]
 801683a:	683a      	ldr	r2, [r7, #0]
 801683c:	6879      	ldr	r1, [r7, #4]
 801683e:	68b8      	ldr	r0, [r7, #8]
 8016840:	f001 fd5c 	bl	80182fc <RegionEU868LinkAdrReq>
 8016844:	4603      	mov	r3, r0
 8016846:	e000      	b.n	801684a <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016848:	2300      	movs	r3, #0
        }
    }
}
 801684a:	4618      	mov	r0, r3
 801684c:	3710      	adds	r7, #16
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}

08016852 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016852:	b580      	push	{r7, lr}
 8016854:	b082      	sub	sp, #8
 8016856:	af00      	add	r7, sp, #0
 8016858:	4603      	mov	r3, r0
 801685a:	6039      	str	r1, [r7, #0]
 801685c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801685e:	79fb      	ldrb	r3, [r7, #7]
 8016860:	2b05      	cmp	r3, #5
 8016862:	d104      	bne.n	801686e <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016864:	6838      	ldr	r0, [r7, #0]
 8016866:	f001 fe6b 	bl	8018540 <RegionEU868RxParamSetupReq>
 801686a:	4603      	mov	r3, r0
 801686c:	e000      	b.n	8016870 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801686e:	2300      	movs	r3, #0
        }
    }
}
 8016870:	4618      	mov	r0, r3
 8016872:	3708      	adds	r7, #8
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}

08016878 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
 801687e:	4603      	mov	r3, r0
 8016880:	6039      	str	r1, [r7, #0]
 8016882:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016884:	79fb      	ldrb	r3, [r7, #7]
 8016886:	2b05      	cmp	r3, #5
 8016888:	d104      	bne.n	8016894 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801688a:	6838      	ldr	r0, [r7, #0]
 801688c:	f001 fe96 	bl	80185bc <RegionEU868NewChannelReq>
 8016890:	4603      	mov	r3, r0
 8016892:	e000      	b.n	8016896 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016894:	2300      	movs	r3, #0
        }
    }
}
 8016896:	4618      	mov	r0, r3
 8016898:	3708      	adds	r7, #8
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}

0801689e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801689e:	b580      	push	{r7, lr}
 80168a0:	b082      	sub	sp, #8
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	4603      	mov	r3, r0
 80168a6:	6039      	str	r1, [r7, #0]
 80168a8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80168aa:	79fb      	ldrb	r3, [r7, #7]
 80168ac:	2b05      	cmp	r3, #5
 80168ae:	d104      	bne.n	80168ba <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80168b0:	6838      	ldr	r0, [r7, #0]
 80168b2:	f001 fee1 	bl	8018678 <RegionEU868TxParamSetupReq>
 80168b6:	4603      	mov	r3, r0
 80168b8:	e000      	b.n	80168bc <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80168ba:	2300      	movs	r3, #0
        }
    }
}
 80168bc:	4618      	mov	r0, r3
 80168be:	3708      	adds	r7, #8
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}

080168c4 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	4603      	mov	r3, r0
 80168cc:	6039      	str	r1, [r7, #0]
 80168ce:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80168d0:	79fb      	ldrb	r3, [r7, #7]
 80168d2:	2b05      	cmp	r3, #5
 80168d4:	d104      	bne.n	80168e0 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80168d6:	6838      	ldr	r0, [r7, #0]
 80168d8:	f001 feda 	bl	8018690 <RegionEU868DlChannelReq>
 80168dc:	4603      	mov	r3, r0
 80168de:	e000      	b.n	80168e2 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80168e0:	2300      	movs	r3, #0
        }
    }
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3708      	adds	r7, #8
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}

080168ea <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80168ea:	b580      	push	{r7, lr}
 80168ec:	b082      	sub	sp, #8
 80168ee:	af00      	add	r7, sp, #0
 80168f0:	4603      	mov	r3, r0
 80168f2:	71fb      	strb	r3, [r7, #7]
 80168f4:	460b      	mov	r3, r1
 80168f6:	71bb      	strb	r3, [r7, #6]
 80168f8:	4613      	mov	r3, r2
 80168fa:	717b      	strb	r3, [r7, #5]
    switch( region )
 80168fc:	79fb      	ldrb	r3, [r7, #7]
 80168fe:	2b05      	cmp	r3, #5
 8016900:	d108      	bne.n	8016914 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016902:	797a      	ldrb	r2, [r7, #5]
 8016904:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016908:	4611      	mov	r1, r2
 801690a:	4618      	mov	r0, r3
 801690c:	f001 ff0a 	bl	8018724 <RegionEU868AlternateDr>
 8016910:	4603      	mov	r3, r0
 8016912:	e000      	b.n	8016916 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016914:	2300      	movs	r3, #0
        }
    }
}
 8016916:	4618      	mov	r0, r3
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}

0801691e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801691e:	b580      	push	{r7, lr}
 8016920:	b084      	sub	sp, #16
 8016922:	af00      	add	r7, sp, #0
 8016924:	60b9      	str	r1, [r7, #8]
 8016926:	607a      	str	r2, [r7, #4]
 8016928:	603b      	str	r3, [r7, #0]
 801692a:	4603      	mov	r3, r0
 801692c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801692e:	7bfb      	ldrb	r3, [r7, #15]
 8016930:	2b05      	cmp	r3, #5
 8016932:	d107      	bne.n	8016944 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016934:	69bb      	ldr	r3, [r7, #24]
 8016936:	683a      	ldr	r2, [r7, #0]
 8016938:	6879      	ldr	r1, [r7, #4]
 801693a:	68b8      	ldr	r0, [r7, #8]
 801693c:	f001 ff02 	bl	8018744 <RegionEU868NextChannel>
 8016940:	4603      	mov	r3, r0
 8016942:	e000      	b.n	8016946 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016944:	2309      	movs	r3, #9
        }
    }
}
 8016946:	4618      	mov	r0, r3
 8016948:	3710      	adds	r7, #16
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}

0801694e <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801694e:	b590      	push	{r4, r7, lr}
 8016950:	b083      	sub	sp, #12
 8016952:	af00      	add	r7, sp, #0
 8016954:	4604      	mov	r4, r0
 8016956:	4608      	mov	r0, r1
 8016958:	4611      	mov	r1, r2
 801695a:	461a      	mov	r2, r3
 801695c:	4623      	mov	r3, r4
 801695e:	71fb      	strb	r3, [r7, #7]
 8016960:	4603      	mov	r3, r0
 8016962:	71bb      	strb	r3, [r7, #6]
 8016964:	460b      	mov	r3, r1
 8016966:	717b      	strb	r3, [r7, #5]
 8016968:	4613      	mov	r3, r2
 801696a:	713b      	strb	r3, [r7, #4]
    switch( region )
 801696c:	79fb      	ldrb	r3, [r7, #7]
 801696e:	2b05      	cmp	r3, #5
 8016970:	d109      	bne.n	8016986 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016972:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8016976:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801697a:	79bb      	ldrb	r3, [r7, #6]
 801697c:	4618      	mov	r0, r3
 801697e:	f002 f85b 	bl	8018a38 <RegionEU868ApplyDrOffset>
 8016982:	4603      	mov	r3, r0
 8016984:	e000      	b.n	8016988 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016986:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8016988:	4618      	mov	r0, r3
 801698a:	370c      	adds	r7, #12
 801698c:	46bd      	mov	sp, r7
 801698e:	bd90      	pop	{r4, r7, pc}

08016990 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016990:	b480      	push	{r7}
 8016992:	b083      	sub	sp, #12
 8016994:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016996:	4b04      	ldr	r3, [pc, #16]	@ (80169a8 <RegionGetVersion+0x18>)
 8016998:	607b      	str	r3, [r7, #4]

    return version;
 801699a:	687b      	ldr	r3, [r7, #4]
}
 801699c:	4618      	mov	r0, r3
 801699e:	370c      	adds	r7, #12
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bc80      	pop	{r7}
 80169a4:	4770      	bx	lr
 80169a6:	bf00      	nop
 80169a8:	02010003 	.word	0x02010003

080169ac <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80169ac:	b480      	push	{r7}
 80169ae:	b087      	sub	sp, #28
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	60f8      	str	r0, [r7, #12]
 80169b4:	4608      	mov	r0, r1
 80169b6:	4639      	mov	r1, r7
 80169b8:	e881 000c 	stmia.w	r1, {r2, r3}
 80169bc:	4603      	mov	r3, r0
 80169be:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	881b      	ldrh	r3, [r3, #0]
 80169c4:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80169c6:	7afb      	ldrb	r3, [r7, #11]
 80169c8:	f083 0301 	eor.w	r3, r3, #1
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d007      	beq.n	80169e2 <GetDutyCycle+0x36>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
 80169d2:	2364      	movs	r3, #100	@ 0x64
 80169d4:	82bb      	strh	r3, [r7, #20]
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80169d6:	8aba      	ldrh	r2, [r7, #20]
 80169d8:	8afb      	ldrh	r3, [r7, #22]
 80169da:	4293      	cmp	r3, r2
 80169dc:	bf38      	it	cc
 80169de:	4613      	movcc	r3, r2
 80169e0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80169e2:	8afb      	ldrh	r3, [r7, #22]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d101      	bne.n	80169ec <GetDutyCycle+0x40>
    {
        dutyCycle = 1;
 80169e8:	2301      	movs	r3, #1
 80169ea:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80169ec:	8afb      	ldrh	r3, [r7, #22]
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	371c      	adds	r7, #28
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bc80      	pop	{r7}
 80169f6:	4770      	bx	lr

080169f8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b086      	sub	sp, #24
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	4608      	mov	r0, r1
 8016a02:	4639      	mov	r1, r7
 8016a04:	e881 000c 	stmia.w	r1, {r2, r3}
 8016a08:	4603      	mov	r3, r0
 8016a0a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	881b      	ldrh	r3, [r3, #0]
 8016a10:	827b      	strh	r3, [r7, #18]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016a12:	4b1a      	ldr	r3, [pc, #104]	@ (8016a7c <SetMaxTimeCredits+0x84>)
 8016a14:	617b      	str	r3, [r7, #20]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016a16:	7af9      	ldrb	r1, [r7, #11]
 8016a18:	463b      	mov	r3, r7
 8016a1a:	cb0c      	ldmia	r3, {r2, r3}
 8016a1c:	68f8      	ldr	r0, [r7, #12]
 8016a1e:	f7ff ffc5 	bl	80169ac <GetDutyCycle>
 8016a22:	4603      	mov	r3, r0
 8016a24:	827b      	strh	r3, [r7, #18]

    if( joined == false )
 8016a26:	7afb      	ldrb	r3, [r7, #11]
 8016a28:	f083 0301 	eor.w	r3, r3, #1
 8016a2c:	b2db      	uxtb	r3, r3
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d011      	beq.n	8016a56 <SetMaxTimeCredits+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016a38:	d202      	bcs.n	8016a40 <SetMaxTimeCredits+0x48>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016a3a:	4b10      	ldr	r3, [pc, #64]	@ (8016a7c <SetMaxTimeCredits+0x84>)
 8016a3c:	617b      	str	r3, [r7, #20]
 8016a3e:	e014      	b.n	8016a6a <SetMaxTimeCredits+0x72>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016a46:	4293      	cmp	r3, r2
 8016a48:	d802      	bhi.n	8016a50 <SetMaxTimeCredits+0x58>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8016a7c <SetMaxTimeCredits+0x84>)
 8016a4c:	617b      	str	r3, [r7, #20]
 8016a4e:	e00c      	b.n	8016a6a <SetMaxTimeCredits+0x72>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 8016a50:	4b0b      	ldr	r3, [pc, #44]	@ (8016a80 <SetMaxTimeCredits+0x88>)
 8016a52:	617b      	str	r3, [r7, #20]
 8016a54:	e009      	b.n	8016a6a <SetMaxTimeCredits+0x72>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 8016a56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016a5a:	f083 0301 	eor.w	r3, r3, #1
 8016a5e:	b2db      	uxtb	r3, r3
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d002      	beq.n	8016a6a <SetMaxTimeCredits+0x72>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	697a      	ldr	r2, [r7, #20]
 8016a68:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	697a      	ldr	r2, [r7, #20]
 8016a6e:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016a70:	8a7b      	ldrh	r3, [r7, #18]
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3718      	adds	r7, #24
 8016a76:	46bd      	mov	sp, r7
 8016a78:	bd80      	pop	{r7, pc}
 8016a7a:	bf00      	nop
 8016a7c:	0036ee80 	.word	0x0036ee80
 8016a80:	000d4670 	.word	0x000d4670

08016a84 <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b086      	sub	sp, #24
 8016a88:	af02      	add	r7, sp, #8
 8016a8a:	6078      	str	r0, [r7, #4]
 8016a8c:	4608      	mov	r0, r1
 8016a8e:	4611      	mov	r1, r2
 8016a90:	461a      	mov	r2, r3
 8016a92:	4603      	mov	r3, r0
 8016a94:	70fb      	strb	r3, [r7, #3]
 8016a96:	460b      	mov	r3, r1
 8016a98:	70bb      	strb	r3, [r7, #2]
 8016a9a:	4613      	mov	r3, r2
 8016a9c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016a9e:	78f9      	ldrb	r1, [r7, #3]
 8016aa0:	787b      	ldrb	r3, [r7, #1]
 8016aa2:	9301      	str	r3, [sp, #4]
 8016aa4:	78bb      	ldrb	r3, [r7, #2]
 8016aa6:	9300      	str	r3, [sp, #0]
 8016aa8:	f107 0318 	add.w	r3, r7, #24
 8016aac:	cb0c      	ldmia	r3, {r2, r3}
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f7ff ffa2 	bl	80169f8 <SetMaxTimeCredits>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	817b      	strh	r3, [r7, #10]
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 8016ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8016b24 <UpdateTimeCredits+0xa0>)
 8016aba:	60fb      	str	r3, [r7, #12]

    if( joined == false )
 8016abc:	78fb      	ldrb	r3, [r7, #3]
 8016abe:	f083 0301 	eor.w	r3, r3, #1
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d010      	beq.n	8016aea <UpdateTimeCredits+0x66>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016ac8:	69bb      	ldr	r3, [r7, #24]
 8016aca:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016ace:	d202      	bcs.n	8016ad6 <UpdateTimeCredits+0x52>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 8016ad0:	4b14      	ldr	r3, [pc, #80]	@ (8016b24 <UpdateTimeCredits+0xa0>)
 8016ad2:	60fb      	str	r3, [r7, #12]
 8016ad4:	e009      	b.n	8016aea <UpdateTimeCredits+0x66>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016ad6:	69bb      	ldr	r3, [r7, #24]
 8016ad8:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016adc:	4293      	cmp	r3, r2
 8016ade:	d802      	bhi.n	8016ae6 <UpdateTimeCredits+0x62>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 8016ae0:	4b11      	ldr	r3, [pc, #68]	@ (8016b28 <UpdateTimeCredits+0xa4>)
 8016ae2:	60fb      	str	r3, [r7, #12]
 8016ae4:	e001      	b.n	8016aea <UpdateTimeCredits+0x66>
        }
        else
        {
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 8016ae6:	4b11      	ldr	r3, [pc, #68]	@ (8016b2c <UpdateTimeCredits+0xa8>)
 8016ae8:	60fb      	str	r3, [r7, #12]
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 8016aea:	68fa      	ldr	r2, [r7, #12]
 8016aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aee:	429a      	cmp	r2, r3
 8016af0:	d908      	bls.n	8016b04 <UpdateTimeCredits+0x80>
        ( band->LastMaxCreditAssignTime != observation ) ||
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	689b      	ldr	r3, [r3, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 8016af6:	68fa      	ldr	r2, [r7, #12]
 8016af8:	429a      	cmp	r2, r3
 8016afa:	d103      	bne.n	8016b04 <UpdateTimeCredits+0x80>
        ( band->LastBandUpdateTime == 0 ) )
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	685b      	ldr	r3, [r3, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d109      	bne.n	8016b18 <UpdateTimeCredits+0x94>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	691a      	ldr	r2, [r3, #16]
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	60da      	str	r2, [r3, #12]
        band->LastBandUpdateTime = currentTime;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	6a3a      	ldr	r2, [r7, #32]
 8016b10:	605a      	str	r2, [r3, #4]
        band->LastMaxCreditAssignTime = observation;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	68fa      	ldr	r2, [r7, #12]
 8016b16:	609a      	str	r2, [r3, #8]
    }
    return dutyCycle;
 8016b18:	897b      	ldrh	r3, [r7, #10]
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3710      	adds	r7, #16
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}
 8016b22:	bf00      	nop
 8016b24:	0036ee80 	.word	0x0036ee80
 8016b28:	025c3f80 	.word	0x025c3f80
 8016b2c:	07829b80 	.word	0x07829b80

08016b30 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016b30:	b480      	push	{r7}
 8016b32:	b085      	sub	sp, #20
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	4603      	mov	r3, r0
 8016b38:	460a      	mov	r2, r1
 8016b3a:	80fb      	strh	r3, [r7, #6]
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016b40:	2300      	movs	r3, #0
 8016b42:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016b44:	2300      	movs	r3, #0
 8016b46:	73bb      	strb	r3, [r7, #14]
 8016b48:	e011      	b.n	8016b6e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016b4a:	88fa      	ldrh	r2, [r7, #6]
 8016b4c:	7bbb      	ldrb	r3, [r7, #14]
 8016b4e:	2101      	movs	r1, #1
 8016b50:	fa01 f303 	lsl.w	r3, r1, r3
 8016b54:	401a      	ands	r2, r3
 8016b56:	7bbb      	ldrb	r3, [r7, #14]
 8016b58:	2101      	movs	r1, #1
 8016b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d102      	bne.n	8016b68 <CountChannels+0x38>
        {
            nbActiveBits++;
 8016b62:	7bfb      	ldrb	r3, [r7, #15]
 8016b64:	3301      	adds	r3, #1
 8016b66:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016b68:	7bbb      	ldrb	r3, [r7, #14]
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	73bb      	strb	r3, [r7, #14]
 8016b6e:	7bba      	ldrb	r2, [r7, #14]
 8016b70:	797b      	ldrb	r3, [r7, #5]
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d3e9      	bcc.n	8016b4a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	3714      	adds	r7, #20
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bc80      	pop	{r7}
 8016b80:	4770      	bx	lr

08016b82 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b084      	sub	sp, #16
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	6039      	str	r1, [r7, #0]
 8016b8a:	4611      	mov	r1, r2
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	4603      	mov	r3, r0
 8016b90:	71fb      	strb	r3, [r7, #7]
 8016b92:	460b      	mov	r3, r1
 8016b94:	71bb      	strb	r3, [r7, #6]
 8016b96:	4613      	mov	r3, r2
 8016b98:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016b9a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016b9e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016ba2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f000 f85d 	bl	8016c66 <RegionCommonValueInRange>
 8016bac:	4603      	mov	r3, r0
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d101      	bne.n	8016bb6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	e053      	b.n	8016c5e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	73fb      	strb	r3, [r7, #15]
 8016bba:	2300      	movs	r3, #0
 8016bbc:	73bb      	strb	r3, [r7, #14]
 8016bbe:	e049      	b.n	8016c54 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	737b      	strb	r3, [r7, #13]
 8016bc4:	e03d      	b.n	8016c42 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016bc6:	7bbb      	ldrb	r3, [r7, #14]
 8016bc8:	005b      	lsls	r3, r3, #1
 8016bca:	683a      	ldr	r2, [r7, #0]
 8016bcc:	4413      	add	r3, r2
 8016bce:	881b      	ldrh	r3, [r3, #0]
 8016bd0:	461a      	mov	r2, r3
 8016bd2:	7b7b      	ldrb	r3, [r7, #13]
 8016bd4:	fa42 f303 	asr.w	r3, r2, r3
 8016bd8:	f003 0301 	and.w	r3, r3, #1
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d02d      	beq.n	8016c3c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016be0:	7bfa      	ldrb	r2, [r7, #15]
 8016be2:	7b7b      	ldrb	r3, [r7, #13]
 8016be4:	4413      	add	r3, r2
 8016be6:	461a      	mov	r2, r3
 8016be8:	4613      	mov	r3, r2
 8016bea:	005b      	lsls	r3, r3, #1
 8016bec:	4413      	add	r3, r2
 8016bee:	009b      	lsls	r3, r3, #2
 8016bf0:	461a      	mov	r2, r3
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	4413      	add	r3, r2
 8016bf6:	7a1b      	ldrb	r3, [r3, #8]
 8016bf8:	f343 0303 	sbfx	r3, r3, #0, #4
 8016bfc:	b25b      	sxtb	r3, r3
 8016bfe:	f003 030f 	and.w	r3, r3, #15
 8016c02:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016c04:	7bfa      	ldrb	r2, [r7, #15]
 8016c06:	7b7b      	ldrb	r3, [r7, #13]
 8016c08:	4413      	add	r3, r2
 8016c0a:	461a      	mov	r2, r3
 8016c0c:	4613      	mov	r3, r2
 8016c0e:	005b      	lsls	r3, r3, #1
 8016c10:	4413      	add	r3, r2
 8016c12:	009b      	lsls	r3, r3, #2
 8016c14:	461a      	mov	r2, r3
 8016c16:	69fb      	ldr	r3, [r7, #28]
 8016c18:	4413      	add	r3, r2
 8016c1a:	7a1b      	ldrb	r3, [r3, #8]
 8016c1c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016c20:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016c22:	f003 030f 	and.w	r3, r3, #15
 8016c26:	b25a      	sxtb	r2, r3
 8016c28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f000 f81a 	bl	8016c66 <RegionCommonValueInRange>
 8016c32:	4603      	mov	r3, r0
 8016c34:	2b01      	cmp	r3, #1
 8016c36:	d101      	bne.n	8016c3c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016c38:	2301      	movs	r3, #1
 8016c3a:	e010      	b.n	8016c5e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016c3c:	7b7b      	ldrb	r3, [r7, #13]
 8016c3e:	3301      	adds	r3, #1
 8016c40:	737b      	strb	r3, [r7, #13]
 8016c42:	7b7b      	ldrb	r3, [r7, #13]
 8016c44:	2b0f      	cmp	r3, #15
 8016c46:	d9be      	bls.n	8016bc6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016c48:	7bfb      	ldrb	r3, [r7, #15]
 8016c4a:	3310      	adds	r3, #16
 8016c4c:	73fb      	strb	r3, [r7, #15]
 8016c4e:	7bbb      	ldrb	r3, [r7, #14]
 8016c50:	3301      	adds	r3, #1
 8016c52:	73bb      	strb	r3, [r7, #14]
 8016c54:	7bfa      	ldrb	r2, [r7, #15]
 8016c56:	79fb      	ldrb	r3, [r7, #7]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d3b1      	bcc.n	8016bc0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016c5c:	2300      	movs	r3, #0
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3710      	adds	r7, #16
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}

08016c66 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016c66:	b480      	push	{r7}
 8016c68:	b083      	sub	sp, #12
 8016c6a:	af00      	add	r7, sp, #0
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	71fb      	strb	r3, [r7, #7]
 8016c70:	460b      	mov	r3, r1
 8016c72:	71bb      	strb	r3, [r7, #6]
 8016c74:	4613      	mov	r3, r2
 8016c76:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016c78:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016c7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016c80:	429a      	cmp	r2, r3
 8016c82:	db07      	blt.n	8016c94 <RegionCommonValueInRange+0x2e>
 8016c84:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016c88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	dc01      	bgt.n	8016c94 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016c90:	2301      	movs	r3, #1
 8016c92:	e000      	b.n	8016c96 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016c94:	2300      	movs	r3, #0
}
 8016c96:	4618      	mov	r0, r3
 8016c98:	370c      	adds	r7, #12
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bc80      	pop	{r7}
 8016c9e:	4770      	bx	lr

08016ca0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b085      	sub	sp, #20
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	460b      	mov	r3, r1
 8016caa:	70fb      	strb	r3, [r7, #3]
 8016cac:	4613      	mov	r3, r2
 8016cae:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016cb0:	78fb      	ldrb	r3, [r7, #3]
 8016cb2:	091b      	lsrs	r3, r3, #4
 8016cb4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016cb6:	78bb      	ldrb	r3, [r7, #2]
 8016cb8:	091b      	lsrs	r3, r3, #4
 8016cba:	b2db      	uxtb	r3, r3
 8016cbc:	7bfa      	ldrb	r2, [r7, #15]
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d803      	bhi.n	8016cca <RegionCommonChanDisable+0x2a>
 8016cc2:	78fa      	ldrb	r2, [r7, #3]
 8016cc4:	78bb      	ldrb	r3, [r7, #2]
 8016cc6:	429a      	cmp	r2, r3
 8016cc8:	d301      	bcc.n	8016cce <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	e017      	b.n	8016cfe <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016cce:	7bfb      	ldrb	r3, [r7, #15]
 8016cd0:	005b      	lsls	r3, r3, #1
 8016cd2:	687a      	ldr	r2, [r7, #4]
 8016cd4:	4413      	add	r3, r2
 8016cd6:	881b      	ldrh	r3, [r3, #0]
 8016cd8:	b21a      	sxth	r2, r3
 8016cda:	78fb      	ldrb	r3, [r7, #3]
 8016cdc:	f003 030f 	and.w	r3, r3, #15
 8016ce0:	2101      	movs	r1, #1
 8016ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8016ce6:	b21b      	sxth	r3, r3
 8016ce8:	43db      	mvns	r3, r3
 8016cea:	b21b      	sxth	r3, r3
 8016cec:	4013      	ands	r3, r2
 8016cee:	b219      	sxth	r1, r3
 8016cf0:	7bfb      	ldrb	r3, [r7, #15]
 8016cf2:	005b      	lsls	r3, r3, #1
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	4413      	add	r3, r2
 8016cf8:	b28a      	uxth	r2, r1
 8016cfa:	801a      	strh	r2, [r3, #0]

    return true;
 8016cfc:	2301      	movs	r3, #1
}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	3714      	adds	r7, #20
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bc80      	pop	{r7}
 8016d06:	4770      	bx	lr

08016d08 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b084      	sub	sp, #16
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
 8016d10:	460b      	mov	r3, r1
 8016d12:	70fb      	strb	r3, [r7, #3]
 8016d14:	4613      	mov	r3, r2
 8016d16:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016d18:	2300      	movs	r3, #0
 8016d1a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d101      	bne.n	8016d26 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016d22:	2300      	movs	r3, #0
 8016d24:	e018      	b.n	8016d58 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016d26:	78fb      	ldrb	r3, [r7, #3]
 8016d28:	73bb      	strb	r3, [r7, #14]
 8016d2a:	e010      	b.n	8016d4e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016d2c:	7bbb      	ldrb	r3, [r7, #14]
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	687a      	ldr	r2, [r7, #4]
 8016d32:	4413      	add	r3, r2
 8016d34:	881b      	ldrh	r3, [r3, #0]
 8016d36:	2110      	movs	r1, #16
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f7ff fef9 	bl	8016b30 <CountChannels>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	461a      	mov	r2, r3
 8016d42:	7bfb      	ldrb	r3, [r7, #15]
 8016d44:	4413      	add	r3, r2
 8016d46:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016d48:	7bbb      	ldrb	r3, [r7, #14]
 8016d4a:	3301      	adds	r3, #1
 8016d4c:	73bb      	strb	r3, [r7, #14]
 8016d4e:	7bba      	ldrb	r2, [r7, #14]
 8016d50:	78bb      	ldrb	r3, [r7, #2]
 8016d52:	429a      	cmp	r2, r3
 8016d54:	d3ea      	bcc.n	8016d2c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3710      	adds	r7, #16
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}

08016d60 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016d60:	b480      	push	{r7}
 8016d62:	b087      	sub	sp, #28
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	60f8      	str	r0, [r7, #12]
 8016d68:	60b9      	str	r1, [r7, #8]
 8016d6a:	4613      	mov	r3, r2
 8016d6c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d016      	beq.n	8016da2 <RegionCommonChanMaskCopy+0x42>
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d013      	beq.n	8016da2 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	75fb      	strb	r3, [r7, #23]
 8016d7e:	e00c      	b.n	8016d9a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016d80:	7dfb      	ldrb	r3, [r7, #23]
 8016d82:	005b      	lsls	r3, r3, #1
 8016d84:	68ba      	ldr	r2, [r7, #8]
 8016d86:	441a      	add	r2, r3
 8016d88:	7dfb      	ldrb	r3, [r7, #23]
 8016d8a:	005b      	lsls	r3, r3, #1
 8016d8c:	68f9      	ldr	r1, [r7, #12]
 8016d8e:	440b      	add	r3, r1
 8016d90:	8812      	ldrh	r2, [r2, #0]
 8016d92:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016d94:	7dfb      	ldrb	r3, [r7, #23]
 8016d96:	3301      	adds	r3, #1
 8016d98:	75fb      	strb	r3, [r7, #23]
 8016d9a:	7dfa      	ldrb	r2, [r7, #23]
 8016d9c:	79fb      	ldrb	r3, [r7, #7]
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d3ee      	bcc.n	8016d80 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016da2:	bf00      	nop
 8016da4:	371c      	adds	r7, #28
 8016da6:	46bd      	mov	sp, r7
 8016da8:	bc80      	pop	{r7}
 8016daa:	4770      	bx	lr

08016dac <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016dac:	b082      	sub	sp, #8
 8016dae:	b580      	push	{r7, lr}
 8016db0:	b086      	sub	sp, #24
 8016db2:	af00      	add	r7, sp, #0
 8016db4:	60f8      	str	r0, [r7, #12]
 8016db6:	60b9      	str	r1, [r7, #8]
 8016db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8016dba:	4613      	mov	r3, r2
 8016dbc:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016dbe:	79f9      	ldrb	r1, [r7, #7]
 8016dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016dc4:	cb0c      	ldmia	r3, {r2, r3}
 8016dc6:	68f8      	ldr	r0, [r7, #12]
 8016dc8:	f7ff fdf0 	bl	80169ac <GetDutyCycle>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	68da      	ldr	r2, [r3, #12]
 8016dd4:	8afb      	ldrh	r3, [r7, #22]
 8016dd6:	68b9      	ldr	r1, [r7, #8]
 8016dd8:	fb01 f303 	mul.w	r3, r1, r3
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	d909      	bls.n	8016df4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	68da      	ldr	r2, [r3, #12]
 8016de4:	8afb      	ldrh	r3, [r7, #22]
 8016de6:	68b9      	ldr	r1, [r7, #8]
 8016de8:	fb01 f303 	mul.w	r3, r1, r3
 8016dec:	1ad2      	subs	r2, r2, r3
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016df2:	e002      	b.n	8016dfa <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	2200      	movs	r2, #0
 8016df8:	60da      	str	r2, [r3, #12]
}
 8016dfa:	bf00      	nop
 8016dfc:	3718      	adds	r7, #24
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016e04:	b002      	add	sp, #8
 8016e06:	4770      	bx	lr

08016e08 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e0a:	b08f      	sub	sp, #60	@ 0x3c
 8016e0c:	af04      	add	r7, sp, #16
 8016e0e:	6039      	str	r1, [r7, #0]
 8016e10:	4611      	mov	r1, r2
 8016e12:	461a      	mov	r2, r3
 8016e14:	4603      	mov	r3, r0
 8016e16:	71fb      	strb	r3, [r7, #7]
 8016e18:	460b      	mov	r3, r1
 8016e1a:	71bb      	strb	r3, [r7, #6]
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016e20:	f04f 33ff 	mov.w	r3, #4294967295
 8016e24:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016e26:	f005 fe6f 	bl	801cb08 <UTIL_TIMER_GetCurrentTime>
 8016e2a:	61b8      	str	r0, [r7, #24]
    TimerTime_t creditCosts = 0;
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	617b      	str	r3, [r7, #20]
    uint16_t dutyCycle = 1;
 8016e30:	2301      	movs	r3, #1
 8016e32:	827b      	strh	r3, [r7, #18]
    uint8_t validBands = 0;
 8016e34:	2300      	movs	r3, #0
 8016e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016e40:	e09c      	b.n	8016f7c <RegionCommonUpdateBandTimeOff+0x174>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 8016e42:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016e46:	4613      	mov	r3, r2
 8016e48:	005b      	lsls	r3, r3, #1
 8016e4a:	4413      	add	r3, r2
 8016e4c:	00db      	lsls	r3, r3, #3
 8016e4e:	461a      	mov	r2, r3
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	4413      	add	r3, r2
 8016e54:	685b      	ldr	r3, [r3, #4]
 8016e56:	4618      	mov	r0, r3
 8016e58:	f005 fe68 	bl	801cb2c <UTIL_TIMER_GetElapsedTime>
 8016e5c:	60f8      	str	r0, [r7, #12]

        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016e5e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016e62:	4613      	mov	r3, r2
 8016e64:	005b      	lsls	r3, r3, #1
 8016e66:	4413      	add	r3, r2
 8016e68:	00db      	lsls	r3, r3, #3
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	189c      	adds	r4, r3, r2
 8016e70:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8016e74:	797a      	ldrb	r2, [r7, #5]
 8016e76:	79fd      	ldrb	r5, [r7, #7]
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	9303      	str	r3, [sp, #12]
 8016e7c:	69bb      	ldr	r3, [r7, #24]
 8016e7e:	9302      	str	r3, [sp, #8]
 8016e80:	46ec      	mov	ip, sp
 8016e82:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016e86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016e8a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016e8e:	4633      	mov	r3, r6
 8016e90:	4629      	mov	r1, r5
 8016e92:	4620      	mov	r0, r4
 8016e94:	f7ff fdf6 	bl	8016a84 <UpdateTimeCredits>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	827b      	strh	r3, [r7, #18]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016e9c:	8a7a      	ldrh	r2, [r7, #18]
 8016e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ea0:	fb02 f303 	mul.w	r3, r2, r3
 8016ea4:	617b      	str	r3, [r7, #20]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016ea6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016eaa:	4613      	mov	r3, r2
 8016eac:	005b      	lsls	r3, r3, #1
 8016eae:	4413      	add	r3, r2
 8016eb0:	00db      	lsls	r3, r3, #3
 8016eb2:	461a      	mov	r2, r3
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	4413      	add	r3, r2
 8016eb8:	68db      	ldr	r3, [r3, #12]
 8016eba:	697a      	ldr	r2, [r7, #20]
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d308      	bcc.n	8016ed2 <RegionCommonUpdateBandTimeOff+0xca>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016ec0:	797b      	ldrb	r3, [r7, #5]
 8016ec2:	f083 0301 	eor.w	r3, r3, #1
 8016ec6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d013      	beq.n	8016ef4 <RegionCommonUpdateBandTimeOff+0xec>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016ecc:	79fb      	ldrb	r3, [r7, #7]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d010      	beq.n	8016ef4 <RegionCommonUpdateBandTimeOff+0xec>
        {
            bands[i].ReadyForTransmission = true;
 8016ed2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	005b      	lsls	r3, r3, #1
 8016eda:	4413      	add	r3, r2
 8016edc:	00db      	lsls	r3, r3, #3
 8016ede:	461a      	mov	r2, r3
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	4413      	add	r3, r2
 8016ee4:	2201      	movs	r2, #1
 8016ee6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016eec:	3301      	adds	r3, #1
 8016eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016ef2:	e03e      	b.n	8016f72 <RegionCommonUpdateBandTimeOff+0x16a>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016ef4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016ef8:	4613      	mov	r3, r2
 8016efa:	005b      	lsls	r3, r3, #1
 8016efc:	4413      	add	r3, r2
 8016efe:	00db      	lsls	r3, r3, #3
 8016f00:	461a      	mov	r2, r3
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	4413      	add	r3, r2
 8016f06:	2200      	movs	r2, #0
 8016f08:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8016f0a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016f0e:	4613      	mov	r3, r2
 8016f10:	005b      	lsls	r3, r3, #1
 8016f12:	4413      	add	r3, r2
 8016f14:	00db      	lsls	r3, r3, #3
 8016f16:	461a      	mov	r2, r3
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	4413      	add	r3, r2
 8016f1c:	691b      	ldr	r3, [r3, #16]
 8016f1e:	697a      	ldr	r2, [r7, #20]
 8016f20:	429a      	cmp	r2, r3
 8016f22:	d226      	bcs.n	8016f72 <RegionCommonUpdateBandTimeOff+0x16a>
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
 8016f24:	2300      	movs	r3, #0
 8016f26:	61fb      	str	r3, [r7, #28]
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 8016f28:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016f2c:	4613      	mov	r3, r2
 8016f2e:	005b      	lsls	r3, r3, #1
 8016f30:	4413      	add	r3, r2
 8016f32:	00db      	lsls	r3, r3, #3
 8016f34:	461a      	mov	r2, r3
 8016f36:	683b      	ldr	r3, [r7, #0]
 8016f38:	4413      	add	r3, r2
 8016f3a:	689b      	ldr	r3, [r3, #8]
 8016f3c:	68fa      	ldr	r2, [r7, #12]
 8016f3e:	429a      	cmp	r2, r3
 8016f40:	d80c      	bhi.n	8016f5c <RegionCommonUpdateBandTimeOff+0x154>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 8016f42:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016f46:	4613      	mov	r3, r2
 8016f48:	005b      	lsls	r3, r3, #1
 8016f4a:	4413      	add	r3, r2
 8016f4c:	00db      	lsls	r3, r3, #3
 8016f4e:	461a      	mov	r2, r3
 8016f50:	683b      	ldr	r3, [r7, #0]
 8016f52:	4413      	add	r3, r2
 8016f54:	689a      	ldr	r2, [r3, #8]
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	1ad3      	subs	r3, r2, r3
 8016f5a:	61fb      	str	r3, [r7, #28]
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 8016f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f5e:	69fb      	ldr	r3, [r7, #28]
 8016f60:	4293      	cmp	r3, r2
 8016f62:	bf28      	it	cs
 8016f64:	4613      	movcs	r3, r2
 8016f66:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8016f68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016f6c:	3301      	adds	r3, #1
 8016f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for( uint8_t i = 0; i < nbBands; i++ )
 8016f72:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016f76:	3301      	adds	r3, #1
 8016f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016f7c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016f80:	79bb      	ldrb	r3, [r7, #6]
 8016f82:	429a      	cmp	r2, r3
 8016f84:	f4ff af5d 	bcc.w	8016e42 <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 8016f88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d102      	bne.n	8016f96 <RegionCommonUpdateBandTimeOff+0x18e>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016f90:	f04f 33ff 	mov.w	r3, #4294967295
 8016f94:	e000      	b.n	8016f98 <RegionCommonUpdateBandTimeOff+0x190>
    }
    return minTimeToWait;
 8016f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	372c      	adds	r7, #44	@ 0x2c
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016fa0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016fa0:	b480      	push	{r7}
 8016fa2:	b085      	sub	sp, #20
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016faa:	2300      	movs	r3, #0
 8016fac:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	2b03      	cmp	r3, #3
 8016fb4:	d140      	bne.n	8017038 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	3301      	adds	r3, #1
 8016fba:	781b      	ldrb	r3, [r3, #0]
 8016fbc:	b25a      	sxtb	r2, r3
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fc8:	f003 030f 	and.w	r3, r3, #15
 8016fcc:	b25a      	sxtb	r2, r3
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fd8:	b2db      	uxtb	r3, r3
 8016fda:	091b      	lsrs	r3, r3, #4
 8016fdc:	b2db      	uxtb	r3, r3
 8016fde:	b25a      	sxtb	r2, r3
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	3302      	adds	r3, #2
 8016fe8:	781b      	ldrb	r3, [r3, #0]
 8016fea:	461a      	mov	r2, r3
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016ff0:	683b      	ldr	r3, [r7, #0]
 8016ff2:	889b      	ldrh	r3, [r3, #4]
 8016ff4:	b21a      	sxth	r2, r3
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	3303      	adds	r3, #3
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	b21b      	sxth	r3, r3
 8016ffe:	021b      	lsls	r3, r3, #8
 8017000:	b21b      	sxth	r3, r3
 8017002:	4313      	orrs	r3, r2
 8017004:	b21b      	sxth	r3, r3
 8017006:	b29a      	uxth	r2, r3
 8017008:	683b      	ldr	r3, [r7, #0]
 801700a:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	791a      	ldrb	r2, [r3, #4]
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	781b      	ldrb	r3, [r3, #0]
 8017018:	091b      	lsrs	r3, r3, #4
 801701a:	b2db      	uxtb	r3, r3
 801701c:	f003 0307 	and.w	r3, r3, #7
 8017020:	b2da      	uxtb	r2, r3
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	781b      	ldrb	r3, [r3, #0]
 801702a:	f003 030f 	and.w	r3, r3, #15
 801702e:	b2da      	uxtb	r2, r3
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017034:	2305      	movs	r3, #5
 8017036:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8017038:	7bfb      	ldrb	r3, [r7, #15]
}
 801703a:	4618      	mov	r0, r3
 801703c:	3714      	adds	r7, #20
 801703e:	46bd      	mov	sp, r7
 8017040:	bc80      	pop	{r7}
 8017042:	4770      	bx	lr

08017044 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017044:	b5b0      	push	{r4, r5, r7, lr}
 8017046:	b088      	sub	sp, #32
 8017048:	af02      	add	r7, sp, #8
 801704a:	60f8      	str	r0, [r7, #12]
 801704c:	60b9      	str	r1, [r7, #8]
 801704e:	607a      	str	r2, [r7, #4]
 8017050:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	791b      	ldrb	r3, [r3, #4]
 8017056:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	799b      	ldrb	r3, [r3, #6]
 801705c:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	79db      	ldrb	r3, [r3, #7]
 8017062:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	7a1b      	ldrb	r3, [r3, #8]
 8017068:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	795b      	ldrb	r3, [r3, #5]
 801706e:	f083 0301 	eor.w	r3, r3, #1
 8017072:	b2db      	uxtb	r3, r3
 8017074:	2b00      	cmp	r3, #0
 8017076:	d008      	beq.n	801708a <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	7adb      	ldrb	r3, [r3, #11]
 801707c:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	7a5b      	ldrb	r3, [r3, #9]
 8017082:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	7a9b      	ldrb	r3, [r3, #10]
 8017088:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801708a:	7dfb      	ldrb	r3, [r7, #23]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d04a      	beq.n	8017126 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017090:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017094:	2b0f      	cmp	r3, #15
 8017096:	d103      	bne.n	80170a0 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	7a5b      	ldrb	r3, [r3, #9]
 801709c:	75bb      	strb	r3, [r7, #22]
 801709e:	e01d      	b.n	80170dc <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	7b18      	ldrb	r0, [r3, #12]
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	6919      	ldr	r1, [r3, #16]
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80170b4:	68fa      	ldr	r2, [r7, #12]
 80170b6:	6992      	ldr	r2, [r2, #24]
 80170b8:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80170bc:	9201      	str	r2, [sp, #4]
 80170be:	9300      	str	r3, [sp, #0]
 80170c0:	462b      	mov	r3, r5
 80170c2:	4622      	mov	r2, r4
 80170c4:	f7ff fd5d 	bl	8016b82 <RegionCommonChanVerifyDr>
 80170c8:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80170ca:	f083 0301 	eor.w	r3, r3, #1
 80170ce:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d003      	beq.n	80170dc <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80170d4:	7dfb      	ldrb	r3, [r7, #23]
 80170d6:	f023 0302 	bic.w	r3, r3, #2
 80170da:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80170dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80170e0:	2b0f      	cmp	r3, #15
 80170e2:	d103      	bne.n	80170ec <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	7a9b      	ldrb	r3, [r3, #10]
 80170e8:	757b      	strb	r3, [r7, #21]
 80170ea:	e01c      	b.n	8017126 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80170f8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80170fc:	4618      	mov	r0, r3
 80170fe:	f7ff fdb2 	bl	8016c66 <RegionCommonValueInRange>
 8017102:	4603      	mov	r3, r0
 8017104:	2b00      	cmp	r3, #0
 8017106:	d10e      	bne.n	8017126 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801710e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017112:	429a      	cmp	r2, r3
 8017114:	da03      	bge.n	801711e <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	7f5b      	ldrb	r3, [r3, #29]
 801711a:	757b      	strb	r3, [r7, #21]
 801711c:	e003      	b.n	8017126 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801711e:	7dfb      	ldrb	r3, [r7, #23]
 8017120:	f023 0304 	bic.w	r3, r3, #4
 8017124:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017126:	7dfb      	ldrb	r3, [r7, #23]
 8017128:	2b07      	cmp	r3, #7
 801712a:	d105      	bne.n	8017138 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801712c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d101      	bne.n	8017138 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017134:	2301      	movs	r3, #1
 8017136:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017138:	68bb      	ldr	r3, [r7, #8]
 801713a:	7dba      	ldrb	r2, [r7, #22]
 801713c:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	7d7a      	ldrb	r2, [r7, #21]
 8017142:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017144:	7d3a      	ldrb	r2, [r7, #20]
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	701a      	strb	r2, [r3, #0]

    return status;
 801714a:	7dfb      	ldrb	r3, [r7, #23]
}
 801714c:	4618      	mov	r0, r3
 801714e:	3718      	adds	r7, #24
 8017150:	46bd      	mov	sp, r7
 8017152:	bdb0      	pop	{r4, r5, r7, pc}

08017154 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017154:	b480      	push	{r7}
 8017156:	b083      	sub	sp, #12
 8017158:	af00      	add	r7, sp, #0
 801715a:	4603      	mov	r3, r0
 801715c:	6039      	str	r1, [r7, #0]
 801715e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017160:	79fb      	ldrb	r3, [r7, #7]
 8017162:	4a06      	ldr	r2, [pc, #24]	@ (801717c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017164:	fa02 f303 	lsl.w	r3, r2, r3
 8017168:	461a      	mov	r2, r3
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017170:	4618      	mov	r0, r3
 8017172:	370c      	adds	r7, #12
 8017174:	46bd      	mov	sp, r7
 8017176:	bc80      	pop	{r7}
 8017178:	4770      	bx	lr
 801717a:	bf00      	nop
 801717c:	000f4240 	.word	0x000f4240

08017180 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017180:	b480      	push	{r7}
 8017182:	b083      	sub	sp, #12
 8017184:	af00      	add	r7, sp, #0
 8017186:	4603      	mov	r3, r0
 8017188:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801718a:	79fb      	ldrb	r3, [r7, #7]
 801718c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017190:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017194:	4618      	mov	r0, r3
 8017196:	370c      	adds	r7, #12
 8017198:	46bd      	mov	sp, r7
 801719a:	bc80      	pop	{r7}
 801719c:	4770      	bx	lr
	...

080171a0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80171a0:	b480      	push	{r7}
 80171a2:	b085      	sub	sp, #20
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	60f8      	str	r0, [r7, #12]
 80171a8:	607a      	str	r2, [r7, #4]
 80171aa:	603b      	str	r3, [r7, #0]
 80171ac:	460b      	mov	r3, r1
 80171ae:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80171b0:	7afa      	ldrb	r2, [r7, #11]
 80171b2:	7afb      	ldrb	r3, [r7, #11]
 80171b4:	3b04      	subs	r3, #4
 80171b6:	4619      	mov	r1, r3
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	fb03 f101 	mul.w	r1, r3, r1
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80171c4:	fb00 f303 	mul.w	r3, r0, r3
 80171c8:	440b      	add	r3, r1
 80171ca:	005b      	lsls	r3, r3, #1
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d013      	beq.n	80171f8 <RegionCommonComputeRxWindowParameters+0x58>
 80171d0:	7afb      	ldrb	r3, [r7, #11]
 80171d2:	3b04      	subs	r3, #4
 80171d4:	4619      	mov	r1, r3
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	fb03 f101 	mul.w	r1, r3, r1
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80171e2:	fb00 f303 	mul.w	r3, r0, r3
 80171e6:	440b      	add	r3, r1
 80171e8:	0059      	lsls	r1, r3, #1
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	440b      	add	r3, r1
 80171ee:	1e59      	subs	r1, r3, #1
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80171f6:	e00f      	b.n	8017218 <RegionCommonComputeRxWindowParameters+0x78>
 80171f8:	7afb      	ldrb	r3, [r7, #11]
 80171fa:	3b04      	subs	r3, #4
 80171fc:	4619      	mov	r1, r3
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	fb03 f101 	mul.w	r1, r3, r1
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801720a:	fb00 f303 	mul.w	r3, r0, r3
 801720e:	440b      	add	r3, r1
 8017210:	0059      	lsls	r1, r3, #1
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	fbb1 f3f3 	udiv	r3, r1, r3
 8017218:	429a      	cmp	r2, r3
 801721a:	bf38      	it	cc
 801721c:	461a      	movcc	r2, r3
 801721e:	69bb      	ldr	r3, [r7, #24]
 8017220:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	009b      	lsls	r3, r3, #2
 8017226:	4619      	mov	r1, r3
 8017228:	69bb      	ldr	r3, [r7, #24]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	68fa      	ldr	r2, [r7, #12]
 801722e:	fb02 f303 	mul.w	r3, r2, r3
 8017232:	2b00      	cmp	r3, #0
 8017234:	d007      	beq.n	8017246 <RegionCommonComputeRxWindowParameters+0xa6>
 8017236:	69bb      	ldr	r3, [r7, #24]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	68fa      	ldr	r2, [r7, #12]
 801723c:	fb02 f303 	mul.w	r3, r2, r3
 8017240:	3301      	adds	r3, #1
 8017242:	085b      	lsrs	r3, r3, #1
 8017244:	e005      	b.n	8017252 <RegionCommonComputeRxWindowParameters+0xb2>
 8017246:	69bb      	ldr	r3, [r7, #24]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	68fa      	ldr	r2, [r7, #12]
 801724c:	fb02 f303 	mul.w	r3, r2, r3
 8017250:	085b      	lsrs	r3, r3, #1
 8017252:	1acb      	subs	r3, r1, r3
 8017254:	683a      	ldr	r2, [r7, #0]
 8017256:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801725a:	fb01 f202 	mul.w	r2, r1, r2
 801725e:	1a9b      	subs	r3, r3, r2
 8017260:	2b00      	cmp	r3, #0
 8017262:	dd27      	ble.n	80172b4 <RegionCommonComputeRxWindowParameters+0x114>
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	009b      	lsls	r3, r3, #2
 8017268:	4619      	mov	r1, r3
 801726a:	69bb      	ldr	r3, [r7, #24]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	68fa      	ldr	r2, [r7, #12]
 8017270:	fb02 f303 	mul.w	r3, r2, r3
 8017274:	2b00      	cmp	r3, #0
 8017276:	d007      	beq.n	8017288 <RegionCommonComputeRxWindowParameters+0xe8>
 8017278:	69bb      	ldr	r3, [r7, #24]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	68fa      	ldr	r2, [r7, #12]
 801727e:	fb02 f303 	mul.w	r3, r2, r3
 8017282:	3301      	adds	r3, #1
 8017284:	085b      	lsrs	r3, r3, #1
 8017286:	e005      	b.n	8017294 <RegionCommonComputeRxWindowParameters+0xf4>
 8017288:	69bb      	ldr	r3, [r7, #24]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	68fa      	ldr	r2, [r7, #12]
 801728e:	fb02 f303 	mul.w	r3, r2, r3
 8017292:	085b      	lsrs	r3, r3, #1
 8017294:	1acb      	subs	r3, r1, r3
 8017296:	683a      	ldr	r2, [r7, #0]
 8017298:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801729c:	fb01 f202 	mul.w	r2, r1, r2
 80172a0:	1a9b      	subs	r3, r3, r2
 80172a2:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 80172a6:	4a19      	ldr	r2, [pc, #100]	@ (801730c <RegionCommonComputeRxWindowParameters+0x16c>)
 80172a8:	fb82 1203 	smull	r1, r2, r2, r3
 80172ac:	1192      	asrs	r2, r2, #6
 80172ae:	17db      	asrs	r3, r3, #31
 80172b0:	1ad3      	subs	r3, r2, r3
 80172b2:	e024      	b.n	80172fe <RegionCommonComputeRxWindowParameters+0x15e>
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	009b      	lsls	r3, r3, #2
 80172b8:	4619      	mov	r1, r3
 80172ba:	69bb      	ldr	r3, [r7, #24]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	68fa      	ldr	r2, [r7, #12]
 80172c0:	fb02 f303 	mul.w	r3, r2, r3
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d007      	beq.n	80172d8 <RegionCommonComputeRxWindowParameters+0x138>
 80172c8:	69bb      	ldr	r3, [r7, #24]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	68fa      	ldr	r2, [r7, #12]
 80172ce:	fb02 f303 	mul.w	r3, r2, r3
 80172d2:	3301      	adds	r3, #1
 80172d4:	085b      	lsrs	r3, r3, #1
 80172d6:	e005      	b.n	80172e4 <RegionCommonComputeRxWindowParameters+0x144>
 80172d8:	69bb      	ldr	r3, [r7, #24]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	68fa      	ldr	r2, [r7, #12]
 80172de:	fb02 f303 	mul.w	r3, r2, r3
 80172e2:	085b      	lsrs	r3, r3, #1
 80172e4:	1acb      	subs	r3, r1, r3
 80172e6:	683a      	ldr	r2, [r7, #0]
 80172e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80172ec:	fb01 f202 	mul.w	r2, r1, r2
 80172f0:	1a9b      	subs	r3, r3, r2
 80172f2:	4a06      	ldr	r2, [pc, #24]	@ (801730c <RegionCommonComputeRxWindowParameters+0x16c>)
 80172f4:	fb82 1203 	smull	r1, r2, r2, r3
 80172f8:	1192      	asrs	r2, r2, #6
 80172fa:	17db      	asrs	r3, r3, #31
 80172fc:	1ad3      	subs	r3, r2, r3
 80172fe:	69fa      	ldr	r2, [r7, #28]
 8017300:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017302:	bf00      	nop
 8017304:	3714      	adds	r7, #20
 8017306:	46bd      	mov	sp, r7
 8017308:	bc80      	pop	{r7}
 801730a:	4770      	bx	lr
 801730c:	10624dd3 	.word	0x10624dd3

08017310 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b086      	sub	sp, #24
 8017314:	af00      	add	r7, sp, #0
 8017316:	4603      	mov	r3, r0
 8017318:	60b9      	str	r1, [r7, #8]
 801731a:	607a      	str	r2, [r7, #4]
 801731c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801731e:	2300      	movs	r3, #0
 8017320:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017326:	005b      	lsls	r3, r3, #1
 8017328:	4618      	mov	r0, r3
 801732a:	f7e9 fccb 	bl	8000cc4 <__aeabi_ui2f>
 801732e:	4603      	mov	r3, r0
 8017330:	4619      	mov	r1, r3
 8017332:	68b8      	ldr	r0, [r7, #8]
 8017334:	f7e9 fc14 	bl	8000b60 <__aeabi_fsub>
 8017338:	4603      	mov	r3, r0
 801733a:	6879      	ldr	r1, [r7, #4]
 801733c:	4618      	mov	r0, r3
 801733e:	f7e9 fc0f 	bl	8000b60 <__aeabi_fsub>
 8017342:	4603      	mov	r3, r0
 8017344:	4618      	mov	r0, r3
 8017346:	f7e9 f8d7 	bl	80004f8 <__aeabi_f2d>
 801734a:	4602      	mov	r2, r0
 801734c:	460b      	mov	r3, r1
 801734e:	4610      	mov	r0, r2
 8017350:	4619      	mov	r1, r3
 8017352:	f008 fd9d 	bl	801fe90 <floor>
 8017356:	4602      	mov	r2, r0
 8017358:	460b      	mov	r3, r1
 801735a:	4610      	mov	r0, r2
 801735c:	4619      	mov	r1, r3
 801735e:	f7e9 fbd3 	bl	8000b08 <__aeabi_d2iz>
 8017362:	4603      	mov	r3, r0
 8017364:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8017366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801736a:	4618      	mov	r0, r3
 801736c:	3718      	adds	r7, #24
 801736e:	46bd      	mov	sp, r7
 8017370:	bd80      	pop	{r7, pc}

08017372 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017372:	b590      	push	{r4, r7, lr}
 8017374:	b087      	sub	sp, #28
 8017376:	af00      	add	r7, sp, #0
 8017378:	60f8      	str	r0, [r7, #12]
 801737a:	60b9      	str	r1, [r7, #8]
 801737c:	607a      	str	r2, [r7, #4]
 801737e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017380:	2300      	movs	r3, #0
 8017382:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017384:	2300      	movs	r3, #0
 8017386:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017388:	2300      	movs	r3, #0
 801738a:	757b      	strb	r3, [r7, #21]
 801738c:	2300      	movs	r3, #0
 801738e:	753b      	strb	r3, [r7, #20]
 8017390:	e09c      	b.n	80174cc <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017392:	2300      	movs	r3, #0
 8017394:	74fb      	strb	r3, [r7, #19]
 8017396:	e08f      	b.n	80174b8 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	685a      	ldr	r2, [r3, #4]
 801739c:	7d3b      	ldrb	r3, [r7, #20]
 801739e:	005b      	lsls	r3, r3, #1
 80173a0:	4413      	add	r3, r2
 80173a2:	881b      	ldrh	r3, [r3, #0]
 80173a4:	461a      	mov	r2, r3
 80173a6:	7cfb      	ldrb	r3, [r7, #19]
 80173a8:	fa42 f303 	asr.w	r3, r2, r3
 80173ac:	f003 0301 	and.w	r3, r3, #1
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d07e      	beq.n	80174b2 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	689a      	ldr	r2, [r3, #8]
 80173b8:	7d79      	ldrb	r1, [r7, #21]
 80173ba:	7cfb      	ldrb	r3, [r7, #19]
 80173bc:	440b      	add	r3, r1
 80173be:	4619      	mov	r1, r3
 80173c0:	460b      	mov	r3, r1
 80173c2:	005b      	lsls	r3, r3, #1
 80173c4:	440b      	add	r3, r1
 80173c6:	009b      	lsls	r3, r3, #2
 80173c8:	4413      	add	r3, r2
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d06b      	beq.n	80174a8 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	f083 0301 	eor.w	r3, r3, #1
 80173d8:	b2db      	uxtb	r3, r3
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d011      	beq.n	8017402 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d00d      	beq.n	8017402 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	695a      	ldr	r2, [r3, #20]
 80173ea:	7d3b      	ldrb	r3, [r7, #20]
 80173ec:	005b      	lsls	r3, r3, #1
 80173ee:	4413      	add	r3, r2
 80173f0:	881b      	ldrh	r3, [r3, #0]
 80173f2:	461a      	mov	r2, r3
 80173f4:	7cfb      	ldrb	r3, [r7, #19]
 80173f6:	fa42 f303 	asr.w	r3, r2, r3
 80173fa:	f003 0301 	and.w	r3, r3, #1
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d054      	beq.n	80174ac <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	785b      	ldrb	r3, [r3, #1]
 8017406:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	689a      	ldr	r2, [r3, #8]
 801740c:	7d79      	ldrb	r1, [r7, #21]
 801740e:	7cfb      	ldrb	r3, [r7, #19]
 8017410:	440b      	add	r3, r1
 8017412:	4619      	mov	r1, r3
 8017414:	460b      	mov	r3, r1
 8017416:	005b      	lsls	r3, r3, #1
 8017418:	440b      	add	r3, r1
 801741a:	009b      	lsls	r3, r3, #2
 801741c:	4413      	add	r3, r2
 801741e:	7a1b      	ldrb	r3, [r3, #8]
 8017420:	f343 0303 	sbfx	r3, r3, #0, #4
 8017424:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017426:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	689a      	ldr	r2, [r3, #8]
 801742c:	7d79      	ldrb	r1, [r7, #21]
 801742e:	7cfb      	ldrb	r3, [r7, #19]
 8017430:	440b      	add	r3, r1
 8017432:	4619      	mov	r1, r3
 8017434:	460b      	mov	r3, r1
 8017436:	005b      	lsls	r3, r3, #1
 8017438:	440b      	add	r3, r1
 801743a:	009b      	lsls	r3, r3, #2
 801743c:	4413      	add	r3, r2
 801743e:	7a1b      	ldrb	r3, [r3, #8]
 8017440:	f343 1303 	sbfx	r3, r3, #4, #4
 8017444:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017446:	461a      	mov	r2, r3
 8017448:	4621      	mov	r1, r4
 801744a:	f7ff fc0c 	bl	8016c66 <RegionCommonValueInRange>
 801744e:	4603      	mov	r3, r0
 8017450:	2b00      	cmp	r3, #0
 8017452:	d02d      	beq.n	80174b0 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	68da      	ldr	r2, [r3, #12]
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	6899      	ldr	r1, [r3, #8]
 801745c:	7d78      	ldrb	r0, [r7, #21]
 801745e:	7cfb      	ldrb	r3, [r7, #19]
 8017460:	4403      	add	r3, r0
 8017462:	4618      	mov	r0, r3
 8017464:	4603      	mov	r3, r0
 8017466:	005b      	lsls	r3, r3, #1
 8017468:	4403      	add	r3, r0
 801746a:	009b      	lsls	r3, r3, #2
 801746c:	440b      	add	r3, r1
 801746e:	7a5b      	ldrb	r3, [r3, #9]
 8017470:	4619      	mov	r1, r3
 8017472:	460b      	mov	r3, r1
 8017474:	005b      	lsls	r3, r3, #1
 8017476:	440b      	add	r3, r1
 8017478:	00db      	lsls	r3, r3, #3
 801747a:	4413      	add	r3, r2
 801747c:	7d1b      	ldrb	r3, [r3, #20]
 801747e:	f083 0301 	eor.w	r3, r3, #1
 8017482:	b2db      	uxtb	r3, r3
 8017484:	2b00      	cmp	r3, #0
 8017486:	d003      	beq.n	8017490 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017488:	7dbb      	ldrb	r3, [r7, #22]
 801748a:	3301      	adds	r3, #1
 801748c:	75bb      	strb	r3, [r7, #22]
                    continue;
 801748e:	e010      	b.n	80174b2 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017490:	7dfb      	ldrb	r3, [r7, #23]
 8017492:	1c5a      	adds	r2, r3, #1
 8017494:	75fa      	strb	r2, [r7, #23]
 8017496:	461a      	mov	r2, r3
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	4413      	add	r3, r2
 801749c:	7d79      	ldrb	r1, [r7, #21]
 801749e:	7cfa      	ldrb	r2, [r7, #19]
 80174a0:	440a      	add	r2, r1
 80174a2:	b2d2      	uxtb	r2, r2
 80174a4:	701a      	strb	r2, [r3, #0]
 80174a6:	e004      	b.n	80174b2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80174a8:	bf00      	nop
 80174aa:	e002      	b.n	80174b2 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80174ac:	bf00      	nop
 80174ae:	e000      	b.n	80174b2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80174b0:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80174b2:	7cfb      	ldrb	r3, [r7, #19]
 80174b4:	3301      	adds	r3, #1
 80174b6:	74fb      	strb	r3, [r7, #19]
 80174b8:	7cfb      	ldrb	r3, [r7, #19]
 80174ba:	2b0f      	cmp	r3, #15
 80174bc:	f67f af6c 	bls.w	8017398 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80174c0:	7d7b      	ldrb	r3, [r7, #21]
 80174c2:	3310      	adds	r3, #16
 80174c4:	757b      	strb	r3, [r7, #21]
 80174c6:	7d3b      	ldrb	r3, [r7, #20]
 80174c8:	3301      	adds	r3, #1
 80174ca:	753b      	strb	r3, [r7, #20]
 80174cc:	7d7b      	ldrb	r3, [r7, #21]
 80174ce:	b29a      	uxth	r2, r3
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	8a1b      	ldrh	r3, [r3, #16]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	f4ff af5c 	bcc.w	8017392 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	7dfa      	ldrb	r2, [r7, #23]
 80174de:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	7dba      	ldrb	r2, [r7, #22]
 80174e4:	701a      	strb	r2, [r3, #0]
}
 80174e6:	bf00      	nop
 80174e8:	371c      	adds	r7, #28
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd90      	pop	{r4, r7, pc}

080174ee <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80174ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174f0:	b08b      	sub	sp, #44	@ 0x2c
 80174f2:	af04      	add	r7, sp, #16
 80174f4:	60f8      	str	r0, [r7, #12]
 80174f6:	60b9      	str	r1, [r7, #8]
 80174f8:	607a      	str	r2, [r7, #4]
 80174fa:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	685b      	ldr	r3, [r3, #4]
 8017500:	4618      	mov	r0, r3
 8017502:	f005 fb13 	bl	801cb2c <UTIL_TIMER_GetElapsedTime>
 8017506:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	681a      	ldr	r2, [r3, #0]
 801750c:	697b      	ldr	r3, [r7, #20]
 801750e:	1ad2      	subs	r2, r2, r3
 8017510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017512:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017516:	2201      	movs	r2, #1
 8017518:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	2200      	movs	r2, #0
 801751e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	685b      	ldr	r3, [r3, #4]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d004      	beq.n	8017532 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801752c:	697a      	ldr	r2, [r7, #20]
 801752e:	429a      	cmp	r2, r3
 8017530:	d32b      	bcc.n	801758a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	2200      	movs	r2, #0
 8017536:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	69db      	ldr	r3, [r3, #28]
 801753c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017542:	68dd      	ldr	r5, [r3, #12]
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	7a5e      	ldrb	r6, [r3, #9]
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	f893 c008 	ldrb.w	ip, [r3, #8]
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	7d1b      	ldrb	r3, [r3, #20]
 8017552:	68fa      	ldr	r2, [r7, #12]
 8017554:	6992      	ldr	r2, [r2, #24]
 8017556:	9203      	str	r2, [sp, #12]
 8017558:	68fa      	ldr	r2, [r7, #12]
 801755a:	f10d 0e04 	add.w	lr, sp, #4
 801755e:	320c      	adds	r2, #12
 8017560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017564:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017568:	9300      	str	r3, [sp, #0]
 801756a:	4663      	mov	r3, ip
 801756c:	4632      	mov	r2, r6
 801756e:	4629      	mov	r1, r5
 8017570:	4620      	mov	r0, r4
 8017572:	f7ff fc49 	bl	8016e08 <RegionCommonUpdateBandTimeOff>
 8017576:	4602      	mov	r2, r0
 8017578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801757a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	69d8      	ldr	r0, [r3, #28]
 8017580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017582:	683a      	ldr	r2, [r7, #0]
 8017584:	6879      	ldr	r1, [r7, #4]
 8017586:	f7ff fef4 	bl	8017372 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	781b      	ldrb	r3, [r3, #0]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d004      	beq.n	801759c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8017592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017594:	2200      	movs	r2, #0
 8017596:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017598:	2300      	movs	r3, #0
 801759a:	e006      	b.n	80175aa <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d001      	beq.n	80175a8 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80175a4:	230b      	movs	r3, #11
 80175a6:	e000      	b.n	80175aa <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80175a8:	230c      	movs	r3, #12
    }
}
 80175aa:	4618      	mov	r0, r3
 80175ac:	371c      	adds	r7, #28
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175b2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80175b2:	b5b0      	push	{r4, r5, r7, lr}
 80175b4:	b086      	sub	sp, #24
 80175b6:	af02      	add	r7, sp, #8
 80175b8:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f993 2000 	ldrsb.w	r2, [r3]
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80175cc:	429a      	cmp	r2, r3
 80175ce:	d103      	bne.n	80175d8 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80175d6:	e026      	b.n	8017626 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80175d8:	7bfb      	ldrb	r3, [r7, #15]
 80175da:	3b01      	subs	r3, #1
 80175dc:	b2db      	uxtb	r3, r3
 80175de:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80175e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80175ea:	429a      	cmp	r2, r3
 80175ec:	d019      	beq.n	8017622 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	78d8      	ldrb	r0, [r3, #3]
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	6859      	ldr	r1, [r3, #4]
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017602:	687a      	ldr	r2, [r7, #4]
 8017604:	6892      	ldr	r2, [r2, #8]
 8017606:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801760a:	9201      	str	r2, [sp, #4]
 801760c:	9300      	str	r3, [sp, #0]
 801760e:	462b      	mov	r3, r5
 8017610:	4622      	mov	r2, r4
 8017612:	f7ff fab6 	bl	8016b82 <RegionCommonChanVerifyDr>
 8017616:	4603      	mov	r3, r0
 8017618:	f083 0301 	eor.w	r3, r3, #1
 801761c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801761e:	2b00      	cmp	r3, #0
 8017620:	d1da      	bne.n	80175d8 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8017622:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8017626:	4618      	mov	r0, r3
 8017628:	3710      	adds	r7, #16
 801762a:	46bd      	mov	sp, r7
 801762c:	bdb0      	pop	{r4, r5, r7, pc}

0801762e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801762e:	b480      	push	{r7}
 8017630:	b083      	sub	sp, #12
 8017632:	af00      	add	r7, sp, #0
 8017634:	4603      	mov	r3, r0
 8017636:	460a      	mov	r2, r1
 8017638:	71fb      	strb	r3, [r7, #7]
 801763a:	4613      	mov	r3, r2
 801763c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801763e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017646:	4293      	cmp	r3, r2
 8017648:	bfb8      	it	lt
 801764a:	4613      	movlt	r3, r2
 801764c:	b25b      	sxtb	r3, r3
}
 801764e:	4618      	mov	r0, r3
 8017650:	370c      	adds	r7, #12
 8017652:	46bd      	mov	sp, r7
 8017654:	bc80      	pop	{r7}
 8017656:	4770      	bx	lr

08017658 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8017658:	b480      	push	{r7}
 801765a:	b083      	sub	sp, #12
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
 8017660:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	009b      	lsls	r3, r3, #2
 8017666:	683a      	ldr	r2, [r7, #0]
 8017668:	4413      	add	r3, r2
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	4a07      	ldr	r2, [pc, #28]	@ (801768c <RegionCommonGetBandwidth+0x34>)
 801766e:	4293      	cmp	r3, r2
 8017670:	d004      	beq.n	801767c <RegionCommonGetBandwidth+0x24>
 8017672:	4a07      	ldr	r2, [pc, #28]	@ (8017690 <RegionCommonGetBandwidth+0x38>)
 8017674:	4293      	cmp	r3, r2
 8017676:	d003      	beq.n	8017680 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8017678:	2300      	movs	r3, #0
 801767a:	e002      	b.n	8017682 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801767c:	2301      	movs	r3, #1
 801767e:	e000      	b.n	8017682 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017680:	2302      	movs	r3, #2
    }
}
 8017682:	4618      	mov	r0, r3
 8017684:	370c      	adds	r7, #12
 8017686:	46bd      	mov	sp, r7
 8017688:	bc80      	pop	{r7}
 801768a:	4770      	bx	lr
 801768c:	0003d090 	.word	0x0003d090
 8017690:	0007a120 	.word	0x0007a120

08017694 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b086      	sub	sp, #24
 8017698:	af04      	add	r7, sp, #16
 801769a:	4603      	mov	r3, r0
 801769c:	6039      	str	r1, [r7, #0]
 801769e:	71fb      	strb	r3, [r7, #7]
 80176a0:	4613      	mov	r3, r2
 80176a2:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80176a4:	79fb      	ldrb	r3, [r7, #7]
 80176a6:	2b05      	cmp	r3, #5
 80176a8:	d810      	bhi.n	80176cc <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80176aa:	79fb      	ldrb	r3, [r7, #7]
 80176ac:	4a0f      	ldr	r2, [pc, #60]	@ (80176ec <RegionCommonRxConfigPrint+0x58>)
 80176ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80176b2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80176b6:	9202      	str	r2, [sp, #8]
 80176b8:	683a      	ldr	r2, [r7, #0]
 80176ba:	9201      	str	r2, [sp, #4]
 80176bc:	9300      	str	r3, [sp, #0]
 80176be:	4b0c      	ldr	r3, [pc, #48]	@ (80176f0 <RegionCommonRxConfigPrint+0x5c>)
 80176c0:	2201      	movs	r2, #1
 80176c2:	2100      	movs	r1, #0
 80176c4:	2002      	movs	r0, #2
 80176c6:	f005 fb0f 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80176ca:	e00a      	b.n	80176e2 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80176cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80176d0:	9301      	str	r3, [sp, #4]
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	9300      	str	r3, [sp, #0]
 80176d6:	4b07      	ldr	r3, [pc, #28]	@ (80176f4 <RegionCommonRxConfigPrint+0x60>)
 80176d8:	2201      	movs	r2, #1
 80176da:	2100      	movs	r1, #0
 80176dc:	2002      	movs	r0, #2
 80176de:	f005 fb03 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 80176e2:	bf00      	nop
 80176e4:	3708      	adds	r7, #8
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	20000118 	.word	0x20000118
 80176f0:	080206ec 	.word	0x080206ec
 80176f4:	0802070c 	.word	0x0802070c

080176f8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af02      	add	r7, sp, #8
 80176fe:	6078      	str	r0, [r7, #4]
 8017700:	460b      	mov	r3, r1
 8017702:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017708:	9301      	str	r3, [sp, #4]
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	9300      	str	r3, [sp, #0]
 801770e:	4b05      	ldr	r3, [pc, #20]	@ (8017724 <RegionCommonTxConfigPrint+0x2c>)
 8017710:	2201      	movs	r2, #1
 8017712:	2100      	movs	r1, #0
 8017714:	2002      	movs	r0, #2
 8017716:	f005 fae7 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
}
 801771a:	bf00      	nop
 801771c:	3708      	adds	r7, #8
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}
 8017722:	bf00      	nop
 8017724:	08020728 	.word	0x08020728

08017728 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
 8017730:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017732:	4b2d      	ldr	r3, [pc, #180]	@ (80177e8 <VerifyRfFreq+0xc0>)
 8017734:	6a1b      	ldr	r3, [r3, #32]
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	4798      	blx	r3
 801773a:	4603      	mov	r3, r0
 801773c:	f083 0301 	eor.w	r3, r3, #1
 8017740:	b2db      	uxtb	r3, r3
 8017742:	2b00      	cmp	r3, #0
 8017744:	d001      	beq.n	801774a <VerifyRfFreq+0x22>
    {
        return false;
 8017746:	2300      	movs	r3, #0
 8017748:	e04a      	b.n	80177e0 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	4a27      	ldr	r2, [pc, #156]	@ (80177ec <VerifyRfFreq+0xc4>)
 801774e:	4293      	cmp	r3, r2
 8017750:	d307      	bcc.n	8017762 <VerifyRfFreq+0x3a>
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	4a26      	ldr	r2, [pc, #152]	@ (80177f0 <VerifyRfFreq+0xc8>)
 8017756:	4293      	cmp	r3, r2
 8017758:	d803      	bhi.n	8017762 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	2202      	movs	r2, #2
 801775e:	701a      	strb	r2, [r3, #0]
 8017760:	e03d      	b.n	80177de <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	4a22      	ldr	r2, [pc, #136]	@ (80177f0 <VerifyRfFreq+0xc8>)
 8017766:	4293      	cmp	r3, r2
 8017768:	d907      	bls.n	801777a <VerifyRfFreq+0x52>
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	4a21      	ldr	r2, [pc, #132]	@ (80177f4 <VerifyRfFreq+0xcc>)
 801776e:	4293      	cmp	r3, r2
 8017770:	d803      	bhi.n	801777a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8017772:	683b      	ldr	r3, [r7, #0]
 8017774:	2200      	movs	r2, #0
 8017776:	701a      	strb	r2, [r3, #0]
 8017778:	e031      	b.n	80177de <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	4a1d      	ldr	r2, [pc, #116]	@ (80177f4 <VerifyRfFreq+0xcc>)
 801777e:	4293      	cmp	r3, r2
 8017780:	d907      	bls.n	8017792 <VerifyRfFreq+0x6a>
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	4a1c      	ldr	r2, [pc, #112]	@ (80177f8 <VerifyRfFreq+0xd0>)
 8017786:	4293      	cmp	r3, r2
 8017788:	d803      	bhi.n	8017792 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801778a:	683b      	ldr	r3, [r7, #0]
 801778c:	2201      	movs	r2, #1
 801778e:	701a      	strb	r2, [r3, #0]
 8017790:	e025      	b.n	80177de <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	4a19      	ldr	r2, [pc, #100]	@ (80177fc <VerifyRfFreq+0xd4>)
 8017796:	4293      	cmp	r3, r2
 8017798:	d907      	bls.n	80177aa <VerifyRfFreq+0x82>
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	4a18      	ldr	r2, [pc, #96]	@ (8017800 <VerifyRfFreq+0xd8>)
 801779e:	4293      	cmp	r3, r2
 80177a0:	d803      	bhi.n	80177aa <VerifyRfFreq+0x82>
    {
        *band = 5;
 80177a2:	683b      	ldr	r3, [r7, #0]
 80177a4:	2205      	movs	r2, #5
 80177a6:	701a      	strb	r2, [r3, #0]
 80177a8:	e019      	b.n	80177de <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	4a15      	ldr	r2, [pc, #84]	@ (8017804 <VerifyRfFreq+0xdc>)
 80177ae:	4293      	cmp	r3, r2
 80177b0:	d907      	bls.n	80177c2 <VerifyRfFreq+0x9a>
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	4a14      	ldr	r2, [pc, #80]	@ (8017808 <VerifyRfFreq+0xe0>)
 80177b6:	4293      	cmp	r3, r2
 80177b8:	d803      	bhi.n	80177c2 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80177ba:	683b      	ldr	r3, [r7, #0]
 80177bc:	2203      	movs	r2, #3
 80177be:	701a      	strb	r2, [r3, #0]
 80177c0:	e00d      	b.n	80177de <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	4a11      	ldr	r2, [pc, #68]	@ (801780c <VerifyRfFreq+0xe4>)
 80177c6:	4293      	cmp	r3, r2
 80177c8:	d307      	bcc.n	80177da <VerifyRfFreq+0xb2>
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	4a10      	ldr	r2, [pc, #64]	@ (8017810 <VerifyRfFreq+0xe8>)
 80177ce:	4293      	cmp	r3, r2
 80177d0:	d803      	bhi.n	80177da <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80177d2:	683b      	ldr	r3, [r7, #0]
 80177d4:	2204      	movs	r2, #4
 80177d6:	701a      	strb	r2, [r3, #0]
 80177d8:	e001      	b.n	80177de <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80177da:	2300      	movs	r3, #0
 80177dc:	e000      	b.n	80177e0 <VerifyRfFreq+0xb8>
    }
    return true;
 80177de:	2301      	movs	r3, #1
}
 80177e0:	4618      	mov	r0, r3
 80177e2:	3708      	adds	r7, #8
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}
 80177e8:	08020ce0 	.word	0x08020ce0
 80177ec:	337055c0 	.word	0x337055c0
 80177f0:	338eda3f 	.word	0x338eda3f
 80177f4:	33bca100 	.word	0x33bca100
 80177f8:	33c5c8c0 	.word	0x33c5c8c0
 80177fc:	33c74f5f 	.word	0x33c74f5f
 8017800:	33cef080 	.word	0x33cef080
 8017804:	33d1fdbf 	.word	0x33d1fdbf
 8017808:	33d5ce50 	.word	0x33d5ce50
 801780c:	33d691a0 	.word	0x33d691a0
 8017810:	33db2580 	.word	0x33db2580

08017814 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017814:	b590      	push	{r4, r7, lr}
 8017816:	b08b      	sub	sp, #44	@ 0x2c
 8017818:	af04      	add	r7, sp, #16
 801781a:	4603      	mov	r3, r0
 801781c:	460a      	mov	r2, r1
 801781e:	71fb      	strb	r3, [r7, #7]
 8017820:	4613      	mov	r3, r2
 8017822:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8017824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017828:	4a1f      	ldr	r2, [pc, #124]	@ (80178a8 <GetTimeOnAir+0x94>)
 801782a:	5cd3      	ldrb	r3, [r2, r3]
 801782c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801782e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017832:	491e      	ldr	r1, [pc, #120]	@ (80178ac <GetTimeOnAir+0x98>)
 8017834:	4618      	mov	r0, r3
 8017836:	f7ff ff0f 	bl	8017658 <RegionCommonGetBandwidth>
 801783a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801783c:	2300      	movs	r3, #0
 801783e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017844:	2b07      	cmp	r3, #7
 8017846:	d118      	bne.n	801787a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017848:	4b19      	ldr	r3, [pc, #100]	@ (80178b0 <GetTimeOnAir+0x9c>)
 801784a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801784c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017850:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017854:	fb02 f303 	mul.w	r3, r2, r3
 8017858:	4619      	mov	r1, r3
 801785a:	88bb      	ldrh	r3, [r7, #4]
 801785c:	b2db      	uxtb	r3, r3
 801785e:	2201      	movs	r2, #1
 8017860:	9203      	str	r2, [sp, #12]
 8017862:	9302      	str	r3, [sp, #8]
 8017864:	2300      	movs	r3, #0
 8017866:	9301      	str	r3, [sp, #4]
 8017868:	2305      	movs	r3, #5
 801786a:	9300      	str	r3, [sp, #0]
 801786c:	2300      	movs	r3, #0
 801786e:	460a      	mov	r2, r1
 8017870:	68f9      	ldr	r1, [r7, #12]
 8017872:	2000      	movs	r0, #0
 8017874:	47a0      	blx	r4
 8017876:	6178      	str	r0, [r7, #20]
 8017878:	e011      	b.n	801789e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801787a:	4b0d      	ldr	r3, [pc, #52]	@ (80178b0 <GetTimeOnAir+0x9c>)
 801787c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801787e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017882:	88bb      	ldrh	r3, [r7, #4]
 8017884:	b2db      	uxtb	r3, r3
 8017886:	2101      	movs	r1, #1
 8017888:	9103      	str	r1, [sp, #12]
 801788a:	9302      	str	r3, [sp, #8]
 801788c:	2300      	movs	r3, #0
 801788e:	9301      	str	r3, [sp, #4]
 8017890:	2308      	movs	r3, #8
 8017892:	9300      	str	r3, [sp, #0]
 8017894:	2301      	movs	r3, #1
 8017896:	68f9      	ldr	r1, [r7, #12]
 8017898:	2001      	movs	r0, #1
 801789a:	47a0      	blx	r4
 801789c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801789e:	697b      	ldr	r3, [r7, #20]
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	371c      	adds	r7, #28
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd90      	pop	{r4, r7, pc}
 80178a8:	08020ca8 	.word	0x08020ca8
 80178ac:	08020cb0 	.word	0x08020cb0
 80178b0:	08020ce0 	.word	0x08020ce0

080178b4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b088      	sub	sp, #32
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80178bc:	2300      	movs	r3, #0
 80178be:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	781b      	ldrb	r3, [r3, #0]
 80178c4:	3b01      	subs	r3, #1
 80178c6:	2b37      	cmp	r3, #55	@ 0x37
 80178c8:	f200 8122 	bhi.w	8017b10 <RegionEU868GetPhyParam+0x25c>
 80178cc:	a201      	add	r2, pc, #4	@ (adr r2, 80178d4 <RegionEU868GetPhyParam+0x20>)
 80178ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178d2:	bf00      	nop
 80178d4:	080179b5 	.word	0x080179b5
 80178d8:	080179bb 	.word	0x080179bb
 80178dc:	08017b11 	.word	0x08017b11
 80178e0:	08017b11 	.word	0x08017b11
 80178e4:	08017b11 	.word	0x08017b11
 80178e8:	080179c1 	.word	0x080179c1
 80178ec:	08017b11 	.word	0x08017b11
 80178f0:	080179fb 	.word	0x080179fb
 80178f4:	08017b11 	.word	0x08017b11
 80178f8:	08017a01 	.word	0x08017a01
 80178fc:	08017a07 	.word	0x08017a07
 8017900:	08017a0d 	.word	0x08017a0d
 8017904:	08017a13 	.word	0x08017a13
 8017908:	08017a23 	.word	0x08017a23
 801790c:	08017a33 	.word	0x08017a33
 8017910:	08017a39 	.word	0x08017a39
 8017914:	08017a41 	.word	0x08017a41
 8017918:	08017a49 	.word	0x08017a49
 801791c:	08017a51 	.word	0x08017a51
 8017920:	08017a59 	.word	0x08017a59
 8017924:	08017a61 	.word	0x08017a61
 8017928:	08017a75 	.word	0x08017a75
 801792c:	08017a7b 	.word	0x08017a7b
 8017930:	08017a81 	.word	0x08017a81
 8017934:	08017a87 	.word	0x08017a87
 8017938:	08017a93 	.word	0x08017a93
 801793c:	08017a9f 	.word	0x08017a9f
 8017940:	08017aa5 	.word	0x08017aa5
 8017944:	08017aad 	.word	0x08017aad
 8017948:	08017ab3 	.word	0x08017ab3
 801794c:	08017ab9 	.word	0x08017ab9
 8017950:	08017ac1 	.word	0x08017ac1
 8017954:	080179c7 	.word	0x080179c7
 8017958:	08017b11 	.word	0x08017b11
 801795c:	08017b11 	.word	0x08017b11
 8017960:	08017b11 	.word	0x08017b11
 8017964:	08017b11 	.word	0x08017b11
 8017968:	08017b11 	.word	0x08017b11
 801796c:	08017b11 	.word	0x08017b11
 8017970:	08017b11 	.word	0x08017b11
 8017974:	08017b11 	.word	0x08017b11
 8017978:	08017b11 	.word	0x08017b11
 801797c:	08017b11 	.word	0x08017b11
 8017980:	08017b11 	.word	0x08017b11
 8017984:	08017b11 	.word	0x08017b11
 8017988:	08017b11 	.word	0x08017b11
 801798c:	08017ac7 	.word	0x08017ac7
 8017990:	08017acd 	.word	0x08017acd
 8017994:	08017adb 	.word	0x08017adb
 8017998:	08017b11 	.word	0x08017b11
 801799c:	08017b11 	.word	0x08017b11
 80179a0:	08017ae1 	.word	0x08017ae1
 80179a4:	08017ae7 	.word	0x08017ae7
 80179a8:	08017b11 	.word	0x08017b11
 80179ac:	08017aed 	.word	0x08017aed
 80179b0:	08017afd 	.word	0x08017afd
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80179b4:	2300      	movs	r3, #0
 80179b6:	61bb      	str	r3, [r7, #24]
            break;
 80179b8:	e0ab      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80179ba:	2300      	movs	r3, #0
 80179bc:	61bb      	str	r3, [r7, #24]
            break;
 80179be:	e0a8      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80179c0:	2300      	movs	r3, #0
 80179c2:	61bb      	str	r3, [r7, #24]
            break;
 80179c4:	e0a5      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80179cc:	733b      	strb	r3, [r7, #12]
 80179ce:	2307      	movs	r3, #7
 80179d0:	737b      	strb	r3, [r7, #13]
 80179d2:	2300      	movs	r3, #0
 80179d4:	73bb      	strb	r3, [r7, #14]
 80179d6:	2310      	movs	r3, #16
 80179d8:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80179da:	4b51      	ldr	r3, [pc, #324]	@ (8017b20 <RegionEU868GetPhyParam+0x26c>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80179e2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80179e4:	4b4e      	ldr	r3, [pc, #312]	@ (8017b20 <RegionEU868GetPhyParam+0x26c>)
 80179e6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80179e8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80179ea:	f107 030c 	add.w	r3, r7, #12
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7ff fddf 	bl	80175b2 <RegionCommonGetNextLowerTxDr>
 80179f4:	4603      	mov	r3, r0
 80179f6:	61bb      	str	r3, [r7, #24]
            break;
 80179f8:	e08b      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80179fa:	2300      	movs	r3, #0
 80179fc:	61bb      	str	r3, [r7, #24]
            break;
 80179fe:	e088      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017a00:	2300      	movs	r3, #0
 8017a02:	61bb      	str	r3, [r7, #24]
            break;
 8017a04:	e085      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017a06:	2340      	movs	r3, #64	@ 0x40
 8017a08:	61bb      	str	r3, [r7, #24]
            break;
 8017a0a:	e082      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017a0c:	2320      	movs	r3, #32
 8017a0e:	61bb      	str	r3, [r7, #24]
            break;
 8017a10:	e07f      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017a18:	461a      	mov	r2, r3
 8017a1a:	4b42      	ldr	r3, [pc, #264]	@ (8017b24 <RegionEU868GetPhyParam+0x270>)
 8017a1c:	5c9b      	ldrb	r3, [r3, r2]
 8017a1e:	61bb      	str	r3, [r7, #24]
            break;
 8017a20:	e077      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017a28:	461a      	mov	r2, r3
 8017a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8017b28 <RegionEU868GetPhyParam+0x274>)
 8017a2c:	5c9b      	ldrb	r3, [r3, r2]
 8017a2e:	61bb      	str	r3, [r7, #24]
            break;
 8017a30:	e06f      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017a32:	2301      	movs	r3, #1
 8017a34:	61bb      	str	r3, [r7, #24]
            break;
 8017a36:	e06c      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017a38:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017a3c:	61bb      	str	r3, [r7, #24]
            break;
 8017a3e:	e068      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017a40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017a44:	61bb      	str	r3, [r7, #24]
            break;
 8017a46:	e064      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017a48:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8017a4c:	61bb      	str	r3, [r7, #24]
            break;
 8017a4e:	e060      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017a50:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017a54:	61bb      	str	r3, [r7, #24]
            break;
 8017a56:	e05c      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017a58:	f241 7370 	movw	r3, #6000	@ 0x1770
 8017a5c:	61bb      	str	r3, [r7, #24]
            break;
 8017a5e:	e058      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017a60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017a64:	4831      	ldr	r0, [pc, #196]	@ (8017b2c <RegionEU868GetPhyParam+0x278>)
 8017a66:	f001 f831 	bl	8018acc <randr>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8017a70:	61bb      	str	r3, [r7, #24]
            break;
 8017a72:	e04e      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017a74:	2300      	movs	r3, #0
 8017a76:	61bb      	str	r3, [r7, #24]
            break;
 8017a78:	e04b      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8017b30 <RegionEU868GetPhyParam+0x27c>)
 8017a7c:	61bb      	str	r3, [r7, #24]
            break;
 8017a7e:	e048      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017a80:	2300      	movs	r3, #0
 8017a82:	61bb      	str	r3, [r7, #24]
            break;
 8017a84:	e045      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017a86:	4b26      	ldr	r3, [pc, #152]	@ (8017b20 <RegionEU868GetPhyParam+0x26c>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017a8e:	61bb      	str	r3, [r7, #24]
            break;
 8017a90:	e03f      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017a92:	4b23      	ldr	r3, [pc, #140]	@ (8017b20 <RegionEU868GetPhyParam+0x26c>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017a9a:	61bb      	str	r3, [r7, #24]
            break;
 8017a9c:	e039      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017a9e:	2310      	movs	r3, #16
 8017aa0:	61bb      	str	r3, [r7, #24]
            break;
 8017aa2:	e036      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8017b20 <RegionEU868GetPhyParam+0x26c>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	61bb      	str	r3, [r7, #24]
            break;
 8017aaa:	e032      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8017aac:	2300      	movs	r3, #0
 8017aae:	61bb      	str	r3, [r7, #24]
            break;
 8017ab0:	e02f      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	61bb      	str	r3, [r7, #24]
            break;
 8017ab6:	e02c      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017ab8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8017abc:	61bb      	str	r3, [r7, #24]
            break;
 8017abe:	e028      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8017b34 <RegionEU868GetPhyParam+0x280>)
 8017ac2:	61bb      	str	r3, [r7, #24]
            break;
 8017ac4:	e025      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8017b30 <RegionEU868GetPhyParam+0x27c>)
 8017ac8:	61bb      	str	r3, [r7, #24]
            break;
 8017aca:	e022      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017acc:	2311      	movs	r3, #17
 8017ace:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	76bb      	strb	r3, [r7, #26]
            break;
 8017ad8:	e01b      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017ada:	2303      	movs	r3, #3
 8017adc:	61bb      	str	r3, [r7, #24]
            break;
 8017ade:	e018      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017ae0:	4b13      	ldr	r3, [pc, #76]	@ (8017b30 <RegionEU868GetPhyParam+0x27c>)
 8017ae2:	61bb      	str	r3, [r7, #24]
            break;
 8017ae4:	e015      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017ae6:	2303      	movs	r3, #3
 8017ae8:	61bb      	str	r3, [r7, #24]
            break;
 8017aea:	e012      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017af2:	461a      	mov	r2, r3
 8017af4:	4b10      	ldr	r3, [pc, #64]	@ (8017b38 <RegionEU868GetPhyParam+0x284>)
 8017af6:	5c9b      	ldrb	r3, [r3, r2]
 8017af8:	61bb      	str	r3, [r7, #24]
            break;
 8017afa:	e00a      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b02:	490e      	ldr	r1, [pc, #56]	@ (8017b3c <RegionEU868GetPhyParam+0x288>)
 8017b04:	4618      	mov	r0, r3
 8017b06:	f7ff fda7 	bl	8017658 <RegionCommonGetBandwidth>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	61bb      	str	r3, [r7, #24]
            break;
 8017b0e:	e000      	b.n	8017b12 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8017b10:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8017b12:	69bb      	ldr	r3, [r7, #24]
 8017b14:	61fb      	str	r3, [r7, #28]
 8017b16:	69fb      	ldr	r3, [r7, #28]
}
 8017b18:	4618      	mov	r0, r3
 8017b1a:	3720      	adds	r7, #32
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	20001d24 	.word	0x20001d24
 8017b24:	08020cd0 	.word	0x08020cd0
 8017b28:	08020cd8 	.word	0x08020cd8
 8017b2c:	fffffc18 	.word	0xfffffc18
 8017b30:	33d3e608 	.word	0x33d3e608
 8017b34:	4009999a 	.word	0x4009999a
 8017b38:	08020ca8 	.word	0x08020ca8
 8017b3c:	08020cb0 	.word	0x08020cb0

08017b40 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017b40:	b590      	push	{r4, r7, lr}
 8017b42:	b085      	sub	sp, #20
 8017b44:	af02      	add	r7, sp, #8
 8017b46:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017b48:	4b11      	ldr	r3, [pc, #68]	@ (8017b90 <RegionEU868SetBandTxDone+0x50>)
 8017b4a:	681a      	ldr	r2, [r3, #0]
 8017b4c:	4b11      	ldr	r3, [pc, #68]	@ (8017b94 <RegionEU868SetBandTxDone+0x54>)
 8017b4e:	6819      	ldr	r1, [r3, #0]
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	781b      	ldrb	r3, [r3, #0]
 8017b54:	4618      	mov	r0, r3
 8017b56:	4603      	mov	r3, r0
 8017b58:	005b      	lsls	r3, r3, #1
 8017b5a:	4403      	add	r3, r0
 8017b5c:	009b      	lsls	r3, r3, #2
 8017b5e:	440b      	add	r3, r1
 8017b60:	3309      	adds	r3, #9
 8017b62:	781b      	ldrb	r3, [r3, #0]
 8017b64:	4619      	mov	r1, r3
 8017b66:	460b      	mov	r3, r1
 8017b68:	005b      	lsls	r3, r3, #1
 8017b6a:	440b      	add	r3, r1
 8017b6c:	00db      	lsls	r3, r3, #3
 8017b6e:	18d0      	adds	r0, r2, r3
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	6899      	ldr	r1, [r3, #8]
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	785c      	ldrb	r4, [r3, #1]
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	691a      	ldr	r2, [r3, #16]
 8017b7c:	9200      	str	r2, [sp, #0]
 8017b7e:	68db      	ldr	r3, [r3, #12]
 8017b80:	4622      	mov	r2, r4
 8017b82:	f7ff f913 	bl	8016dac <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8017b86:	bf00      	nop
 8017b88:	370c      	adds	r7, #12
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	bd90      	pop	{r4, r7, pc}
 8017b8e:	bf00      	nop
 8017b90:	20001d28 	.word	0x20001d28
 8017b94:	20001d24 	.word	0x20001d24

08017b98 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b0b0      	sub	sp, #192	@ 0xc0
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017ba0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017ba4:	2290      	movs	r2, #144	@ 0x90
 8017ba6:	2100      	movs	r1, #0
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f006 f8ad 	bl	801dd08 <memset>
 8017bae:	2364      	movs	r3, #100	@ 0x64
 8017bb0:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017bb2:	2364      	movs	r3, #100	@ 0x64
 8017bb4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8017bb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017bbc:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8017bc0:	230a      	movs	r3, #10
 8017bc2:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8017bc6:	2364      	movs	r3, #100	@ 0x64
 8017bc8:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8017bcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017bd0:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	7b1b      	ldrb	r3, [r3, #12]
 8017bd8:	2b02      	cmp	r3, #2
 8017bda:	d05d      	beq.n	8017c98 <RegionEU868InitDefaults+0x100>
 8017bdc:	2b02      	cmp	r3, #2
 8017bde:	dc6a      	bgt.n	8017cb6 <RegionEU868InitDefaults+0x11e>
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d002      	beq.n	8017bea <RegionEU868InitDefaults+0x52>
 8017be4:	2b01      	cmp	r3, #1
 8017be6:	d03e      	beq.n	8017c66 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017be8:	e065      	b.n	8017cb6 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d062      	beq.n	8017cb8 <RegionEU868InitDefaults+0x120>
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	685b      	ldr	r3, [r3, #4]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d05e      	beq.n	8017cb8 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	685b      	ldr	r3, [r3, #4]
 8017bfe:	4a30      	ldr	r2, [pc, #192]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c00:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	689b      	ldr	r3, [r3, #8]
 8017c06:	4a2f      	ldr	r2, [pc, #188]	@ (8017cc4 <RegionEU868InitDefaults+0x12c>)
 8017c08:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8017cc4 <RegionEU868InitDefaults+0x12c>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8017c12:	2290      	movs	r2, #144	@ 0x90
 8017c14:	4618      	mov	r0, r3
 8017c16:	f000 ff70 	bl	8018afa <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017c1a:	4b29      	ldr	r3, [pc, #164]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8017cc8 <RegionEU868InitDefaults+0x130>)
 8017c20:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017c26:	4b26      	ldr	r3, [pc, #152]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	4a28      	ldr	r2, [pc, #160]	@ (8017ccc <RegionEU868InitDefaults+0x134>)
 8017c2c:	330c      	adds	r3, #12
 8017c2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017c34:	4b22      	ldr	r3, [pc, #136]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	4a25      	ldr	r2, [pc, #148]	@ (8017cd0 <RegionEU868InitDefaults+0x138>)
 8017c3a:	3318      	adds	r3, #24
 8017c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017c42:	4b1f      	ldr	r3, [pc, #124]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	2207      	movs	r2, #7
 8017c48:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017c54:	4b1a      	ldr	r3, [pc, #104]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017c5c:	2201      	movs	r2, #1
 8017c5e:	4619      	mov	r1, r3
 8017c60:	f7ff f87e 	bl	8016d60 <RegionCommonChanMaskCopy>
 8017c64:	e028      	b.n	8017cb8 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8017c66:	4b16      	ldr	r3, [pc, #88]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8017c6e:	4b14      	ldr	r3, [pc, #80]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	2200      	movs	r2, #0
 8017c74:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8017c76:	4b12      	ldr	r3, [pc, #72]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017c7e:	4b10      	ldr	r3, [pc, #64]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017c86:	4b0e      	ldr	r3, [pc, #56]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017c8e:	2201      	movs	r2, #1
 8017c90:	4619      	mov	r1, r3
 8017c92:	f7ff f865 	bl	8016d60 <RegionCommonChanMaskCopy>
            break;
 8017c96:	e00f      	b.n	8017cb8 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8017c98:	4b09      	ldr	r3, [pc, #36]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8017ca0:	4b07      	ldr	r3, [pc, #28]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8017ca8:	4b05      	ldr	r3, [pc, #20]	@ (8017cc0 <RegionEU868InitDefaults+0x128>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	430a      	orrs	r2, r1
 8017cae:	b292      	uxth	r2, r2
 8017cb0:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8017cb4:	e000      	b.n	8017cb8 <RegionEU868InitDefaults+0x120>
            break;
 8017cb6:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017cb8:	37c0      	adds	r7, #192	@ 0xc0
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}
 8017cbe:	bf00      	nop
 8017cc0:	20001d24 	.word	0x20001d24
 8017cc4:	20001d28 	.word	0x20001d28
 8017cc8:	08020744 	.word	0x08020744
 8017ccc:	08020750 	.word	0x08020750
 8017cd0:	0802075c 	.word	0x0802075c

08017cd4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b084      	sub	sp, #16
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
 8017cdc:	460b      	mov	r3, r1
 8017cde:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8017ce0:	78fb      	ldrb	r3, [r7, #3]
 8017ce2:	2b0f      	cmp	r3, #15
 8017ce4:	d86c      	bhi.n	8017dc0 <RegionEU868Verify+0xec>
 8017ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8017cec <RegionEU868Verify+0x18>)
 8017ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cec:	08017d2d 	.word	0x08017d2d
 8017cf0:	08017dc1 	.word	0x08017dc1
 8017cf4:	08017dc1 	.word	0x08017dc1
 8017cf8:	08017dc1 	.word	0x08017dc1
 8017cfc:	08017dc1 	.word	0x08017dc1
 8017d00:	08017d45 	.word	0x08017d45
 8017d04:	08017d63 	.word	0x08017d63
 8017d08:	08017d81 	.word	0x08017d81
 8017d0c:	08017dc1 	.word	0x08017dc1
 8017d10:	08017d9f 	.word	0x08017d9f
 8017d14:	08017d9f 	.word	0x08017d9f
 8017d18:	08017dc1 	.word	0x08017dc1
 8017d1c:	08017dc1 	.word	0x08017dc1
 8017d20:	08017dc1 	.word	0x08017dc1
 8017d24:	08017dc1 	.word	0x08017dc1
 8017d28:	08017dbd 	.word	0x08017dbd
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	f107 020f 	add.w	r2, r7, #15
 8017d38:	4611      	mov	r1, r2
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7ff fcf4 	bl	8017728 <VerifyRfFreq>
 8017d40:	4603      	mov	r3, r0
 8017d42:	e03e      	b.n	8017dc2 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	f993 3000 	ldrsb.w	r3, [r3]
 8017d4a:	2207      	movs	r2, #7
 8017d4c:	2100      	movs	r1, #0
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7fe ff89 	bl	8016c66 <RegionCommonValueInRange>
 8017d54:	4603      	mov	r3, r0
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	bf14      	ite	ne
 8017d5a:	2301      	movne	r3, #1
 8017d5c:	2300      	moveq	r3, #0
 8017d5e:	b2db      	uxtb	r3, r3
 8017d60:	e02f      	b.n	8017dc2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	f993 3000 	ldrsb.w	r3, [r3]
 8017d68:	2205      	movs	r2, #5
 8017d6a:	2100      	movs	r1, #0
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f7fe ff7a 	bl	8016c66 <RegionCommonValueInRange>
 8017d72:	4603      	mov	r3, r0
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	bf14      	ite	ne
 8017d78:	2301      	movne	r3, #1
 8017d7a:	2300      	moveq	r3, #0
 8017d7c:	b2db      	uxtb	r3, r3
 8017d7e:	e020      	b.n	8017dc2 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	f993 3000 	ldrsb.w	r3, [r3]
 8017d86:	2207      	movs	r2, #7
 8017d88:	2100      	movs	r1, #0
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7fe ff6b 	bl	8016c66 <RegionCommonValueInRange>
 8017d90:	4603      	mov	r3, r0
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	bf14      	ite	ne
 8017d96:	2301      	movne	r3, #1
 8017d98:	2300      	moveq	r3, #0
 8017d9a:	b2db      	uxtb	r3, r3
 8017d9c:	e011      	b.n	8017dc2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	f993 3000 	ldrsb.w	r3, [r3]
 8017da4:	2207      	movs	r2, #7
 8017da6:	2100      	movs	r1, #0
 8017da8:	4618      	mov	r0, r3
 8017daa:	f7fe ff5c 	bl	8016c66 <RegionCommonValueInRange>
 8017dae:	4603      	mov	r3, r0
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	bf14      	ite	ne
 8017db4:	2301      	movne	r3, #1
 8017db6:	2300      	moveq	r3, #0
 8017db8:	b2db      	uxtb	r3, r3
 8017dba:	e002      	b.n	8017dc2 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017dbc:	2301      	movs	r3, #1
 8017dbe:	e000      	b.n	8017dc2 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8017dc0:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3710      	adds	r7, #16
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}
 8017dca:	bf00      	nop

08017dcc <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b08a      	sub	sp, #40	@ 0x28
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017dd4:	2350      	movs	r3, #80	@ 0x50
 8017dd6:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	7a1b      	ldrb	r3, [r3, #8]
 8017dde:	2b10      	cmp	r3, #16
 8017de0:	d162      	bne.n	8017ea8 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	685b      	ldr	r3, [r3, #4]
 8017de6:	330f      	adds	r3, #15
 8017de8:	781b      	ldrb	r3, [r3, #0]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d15e      	bne.n	8017eac <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017dee:	2300      	movs	r3, #0
 8017df0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017df4:	2303      	movs	r3, #3
 8017df6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017dfa:	e050      	b.n	8017e9e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e00:	2b07      	cmp	r3, #7
 8017e02:	d824      	bhi.n	8017e4e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	685a      	ldr	r2, [r3, #4]
 8017e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e0c:	4413      	add	r3, r2
 8017e0e:	781b      	ldrb	r3, [r3, #0]
 8017e10:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017e12:	69ba      	ldr	r2, [r7, #24]
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	6859      	ldr	r1, [r3, #4]
 8017e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e1c:	3301      	adds	r3, #1
 8017e1e:	440b      	add	r3, r1
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	021b      	lsls	r3, r3, #8
 8017e24:	4313      	orrs	r3, r2
 8017e26:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017e28:	69ba      	ldr	r2, [r7, #24]
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	6859      	ldr	r1, [r3, #4]
 8017e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e32:	3302      	adds	r3, #2
 8017e34:	440b      	add	r3, r1
 8017e36:	781b      	ldrb	r3, [r3, #0]
 8017e38:	041b      	lsls	r3, r3, #16
 8017e3a:	4313      	orrs	r3, r2
 8017e3c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8017e3e:	69bb      	ldr	r3, [r7, #24]
 8017e40:	2264      	movs	r2, #100	@ 0x64
 8017e42:	fb02 f303 	mul.w	r3, r2, r3
 8017e46:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	61fb      	str	r3, [r7, #28]
 8017e4c:	e006      	b.n	8017e5c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8017e52:	2300      	movs	r3, #0
 8017e54:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8017e58:	2300      	movs	r3, #0
 8017e5a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8017e5c:	69bb      	ldr	r3, [r7, #24]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d00b      	beq.n	8017e7a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8017e62:	f107 0318 	add.w	r3, r7, #24
 8017e66:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8017e68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e6c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8017e6e:	f107 0310 	add.w	r3, r7, #16
 8017e72:	4618      	mov	r0, r3
 8017e74:	f000 fd14 	bl	80188a0 <RegionEU868ChannelAdd>
 8017e78:	e007      	b.n	8017e8a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8017e7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e7e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8017e80:	f107 030c 	add.w	r3, r7, #12
 8017e84:	4618      	mov	r0, r3
 8017e86:	f000 fdad 	bl	80189e4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e8e:	3303      	adds	r3, #3
 8017e90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017e94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e98:	3301      	adds	r3, #1
 8017e9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017e9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017ea2:	2b0f      	cmp	r3, #15
 8017ea4:	d9aa      	bls.n	8017dfc <RegionEU868ApplyCFList+0x30>
 8017ea6:	e002      	b.n	8017eae <RegionEU868ApplyCFList+0xe2>
        return;
 8017ea8:	bf00      	nop
 8017eaa:	e000      	b.n	8017eae <RegionEU868ApplyCFList+0xe2>
        return;
 8017eac:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017eae:	3728      	adds	r7, #40	@ 0x28
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	bd80      	pop	{r7, pc}

08017eb4 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b082      	sub	sp, #8
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	791b      	ldrb	r3, [r3, #4]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d002      	beq.n	8017eca <RegionEU868ChanMaskSet+0x16>
 8017ec4:	2b01      	cmp	r3, #1
 8017ec6:	d00b      	beq.n	8017ee0 <RegionEU868ChanMaskSet+0x2c>
 8017ec8:	e015      	b.n	8017ef6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017eca:	4b0e      	ldr	r3, [pc, #56]	@ (8017f04 <RegionEU868ChanMaskSet+0x50>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	2201      	movs	r2, #1
 8017ed8:	4619      	mov	r1, r3
 8017eda:	f7fe ff41 	bl	8016d60 <RegionCommonChanMaskCopy>
            break;
 8017ede:	e00c      	b.n	8017efa <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017ee0:	4b08      	ldr	r3, [pc, #32]	@ (8017f04 <RegionEU868ChanMaskSet+0x50>)
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	2201      	movs	r2, #1
 8017eee:	4619      	mov	r1, r3
 8017ef0:	f7fe ff36 	bl	8016d60 <RegionCommonChanMaskCopy>
            break;
 8017ef4:	e001      	b.n	8017efa <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	e000      	b.n	8017efc <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8017efa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017efc:	4618      	mov	r0, r3
 8017efe:	3708      	adds	r7, #8
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bd80      	pop	{r7, pc}
 8017f04:	20001d24 	.word	0x20001d24

08017f08 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b088      	sub	sp, #32
 8017f0c:	af02      	add	r7, sp, #8
 8017f0e:	60ba      	str	r2, [r7, #8]
 8017f10:	607b      	str	r3, [r7, #4]
 8017f12:	4603      	mov	r3, r0
 8017f14:	73fb      	strb	r3, [r7, #15]
 8017f16:	460b      	mov	r3, r1
 8017f18:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8017f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f22:	2b07      	cmp	r3, #7
 8017f24:	bfa8      	it	ge
 8017f26:	2307      	movge	r3, #7
 8017f28:	b25a      	sxtb	r2, r3
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f34:	491e      	ldr	r1, [pc, #120]	@ (8017fb0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017f36:	4618      	mov	r0, r3
 8017f38:	f7ff fb8e 	bl	8017658 <RegionCommonGetBandwidth>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	b2da      	uxtb	r2, r3
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f4a:	2b07      	cmp	r3, #7
 8017f4c:	d10a      	bne.n	8017f64 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f54:	461a      	mov	r2, r3
 8017f56:	4b17      	ldr	r3, [pc, #92]	@ (8017fb4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8017f58:	5c9b      	ldrb	r3, [r3, r2]
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f7ff f910 	bl	8017180 <RegionCommonComputeSymbolTimeFsk>
 8017f60:	6178      	str	r0, [r7, #20]
 8017f62:	e011      	b.n	8017f88 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f6a:	461a      	mov	r2, r3
 8017f6c:	4b11      	ldr	r3, [pc, #68]	@ (8017fb4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8017f6e:	5c9a      	ldrb	r2, [r3, r2]
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f76:	4619      	mov	r1, r3
 8017f78:	4b0d      	ldr	r3, [pc, #52]	@ (8017fb0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017f7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017f7e:	4619      	mov	r1, r3
 8017f80:	4610      	mov	r0, r2
 8017f82:	f7ff f8e7 	bl	8017154 <RegionCommonComputeSymbolTimeLoRa>
 8017f86:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017f88:	4b0b      	ldr	r3, [pc, #44]	@ (8017fb8 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8017f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017f8c:	4798      	blx	r3
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	3308      	adds	r3, #8
 8017f92:	687a      	ldr	r2, [r7, #4]
 8017f94:	320c      	adds	r2, #12
 8017f96:	7bb9      	ldrb	r1, [r7, #14]
 8017f98:	9201      	str	r2, [sp, #4]
 8017f9a:	9300      	str	r3, [sp, #0]
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	68ba      	ldr	r2, [r7, #8]
 8017fa0:	6978      	ldr	r0, [r7, #20]
 8017fa2:	f7ff f8fd 	bl	80171a0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8017fa6:	bf00      	nop
 8017fa8:	3718      	adds	r7, #24
 8017faa:	46bd      	mov	sp, r7
 8017fac:	bd80      	pop	{r7, pc}
 8017fae:	bf00      	nop
 8017fb0:	08020cb0 	.word	0x08020cb0
 8017fb4:	08020ca8 	.word	0x08020ca8
 8017fb8:	08020ce0 	.word	0x08020ce0

08017fbc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017fbc:	b5b0      	push	{r4, r5, r7, lr}
 8017fbe:	b090      	sub	sp, #64	@ 0x40
 8017fc0:	af0a      	add	r7, sp, #40	@ 0x28
 8017fc2:	6078      	str	r0, [r7, #4]
 8017fc4:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	785b      	ldrb	r3, [r3, #1]
 8017fca:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	685b      	ldr	r3, [r3, #4]
 8017fd8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017fda:	4b5a      	ldr	r3, [pc, #360]	@ (8018144 <RegionEU868RxConfig+0x188>)
 8017fdc:	685b      	ldr	r3, [r3, #4]
 8017fde:	4798      	blx	r3
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d001      	beq.n	8017fea <RegionEU868RxConfig+0x2e>
    {
        return false;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	e0a8      	b.n	801813c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	7cdb      	ldrb	r3, [r3, #19]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d126      	bne.n	8018040 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8017ff2:	4b55      	ldr	r3, [pc, #340]	@ (8018148 <RegionEU868RxConfig+0x18c>)
 8017ff4:	681a      	ldr	r2, [r3, #0]
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	781b      	ldrb	r3, [r3, #0]
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	460b      	mov	r3, r1
 8017ffe:	005b      	lsls	r3, r3, #1
 8018000:	440b      	add	r3, r1
 8018002:	009b      	lsls	r3, r3, #2
 8018004:	4413      	add	r3, r2
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801800a:	4b4f      	ldr	r3, [pc, #316]	@ (8018148 <RegionEU868RxConfig+0x18c>)
 801800c:	681a      	ldr	r2, [r3, #0]
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	781b      	ldrb	r3, [r3, #0]
 8018012:	4619      	mov	r1, r3
 8018014:	460b      	mov	r3, r1
 8018016:	005b      	lsls	r3, r3, #1
 8018018:	440b      	add	r3, r1
 801801a:	009b      	lsls	r3, r3, #2
 801801c:	4413      	add	r3, r2
 801801e:	3304      	adds	r3, #4
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d00c      	beq.n	8018040 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8018026:	4b48      	ldr	r3, [pc, #288]	@ (8018148 <RegionEU868RxConfig+0x18c>)
 8018028:	681a      	ldr	r2, [r3, #0]
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	4619      	mov	r1, r3
 8018030:	460b      	mov	r3, r1
 8018032:	005b      	lsls	r3, r3, #1
 8018034:	440b      	add	r3, r1
 8018036:	009b      	lsls	r3, r3, #2
 8018038:	4413      	add	r3, r2
 801803a:	3304      	adds	r3, #4
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018044:	4a41      	ldr	r2, [pc, #260]	@ (801814c <RegionEU868RxConfig+0x190>)
 8018046:	5cd3      	ldrb	r3, [r2, r3]
 8018048:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801804a:	4b3e      	ldr	r3, [pc, #248]	@ (8018144 <RegionEU868RxConfig+0x188>)
 801804c:	68db      	ldr	r3, [r3, #12]
 801804e:	6938      	ldr	r0, [r7, #16]
 8018050:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018056:	2b07      	cmp	r3, #7
 8018058:	d128      	bne.n	80180ac <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801805a:	2300      	movs	r3, #0
 801805c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801805e:	4b39      	ldr	r3, [pc, #228]	@ (8018144 <RegionEU868RxConfig+0x188>)
 8018060:	699c      	ldr	r4, [r3, #24]
 8018062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018066:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801806a:	fb02 f303 	mul.w	r3, r2, r3
 801806e:	4619      	mov	r1, r3
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	689b      	ldr	r3, [r3, #8]
 8018074:	b29b      	uxth	r3, r3
 8018076:	687a      	ldr	r2, [r7, #4]
 8018078:	7c92      	ldrb	r2, [r2, #18]
 801807a:	7df8      	ldrb	r0, [r7, #23]
 801807c:	9209      	str	r2, [sp, #36]	@ 0x24
 801807e:	2200      	movs	r2, #0
 8018080:	9208      	str	r2, [sp, #32]
 8018082:	2200      	movs	r2, #0
 8018084:	9207      	str	r2, [sp, #28]
 8018086:	2200      	movs	r2, #0
 8018088:	9206      	str	r2, [sp, #24]
 801808a:	2201      	movs	r2, #1
 801808c:	9205      	str	r2, [sp, #20]
 801808e:	2200      	movs	r2, #0
 8018090:	9204      	str	r2, [sp, #16]
 8018092:	2200      	movs	r2, #0
 8018094:	9203      	str	r2, [sp, #12]
 8018096:	9302      	str	r3, [sp, #8]
 8018098:	2305      	movs	r3, #5
 801809a:	9301      	str	r3, [sp, #4]
 801809c:	4b2c      	ldr	r3, [pc, #176]	@ (8018150 <RegionEU868RxConfig+0x194>)
 801809e:	9300      	str	r3, [sp, #0]
 80180a0:	2300      	movs	r3, #0
 80180a2:	460a      	mov	r2, r1
 80180a4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80180a8:	47a0      	blx	r4
 80180aa:	e024      	b.n	80180f6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80180ac:	2301      	movs	r3, #1
 80180ae:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80180b0:	4b24      	ldr	r3, [pc, #144]	@ (8018144 <RegionEU868RxConfig+0x188>)
 80180b2:	699c      	ldr	r4, [r3, #24]
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	789b      	ldrb	r3, [r3, #2]
 80180b8:	461d      	mov	r5, r3
 80180ba:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	689b      	ldr	r3, [r3, #8]
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	687a      	ldr	r2, [r7, #4]
 80180c6:	7c92      	ldrb	r2, [r2, #18]
 80180c8:	7df8      	ldrb	r0, [r7, #23]
 80180ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80180cc:	2201      	movs	r2, #1
 80180ce:	9208      	str	r2, [sp, #32]
 80180d0:	2200      	movs	r2, #0
 80180d2:	9207      	str	r2, [sp, #28]
 80180d4:	2200      	movs	r2, #0
 80180d6:	9206      	str	r2, [sp, #24]
 80180d8:	2200      	movs	r2, #0
 80180da:	9205      	str	r2, [sp, #20]
 80180dc:	2200      	movs	r2, #0
 80180de:	9204      	str	r2, [sp, #16]
 80180e0:	2200      	movs	r2, #0
 80180e2:	9203      	str	r2, [sp, #12]
 80180e4:	9302      	str	r3, [sp, #8]
 80180e6:	2308      	movs	r3, #8
 80180e8:	9301      	str	r3, [sp, #4]
 80180ea:	2300      	movs	r3, #0
 80180ec:	9300      	str	r3, [sp, #0]
 80180ee:	2301      	movs	r3, #1
 80180f0:	460a      	mov	r2, r1
 80180f2:	4629      	mov	r1, r5
 80180f4:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	7c5b      	ldrb	r3, [r3, #17]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d005      	beq.n	801810a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80180fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018102:	4a14      	ldr	r2, [pc, #80]	@ (8018154 <RegionEU868RxConfig+0x198>)
 8018104:	5cd3      	ldrb	r3, [r2, r3]
 8018106:	75bb      	strb	r3, [r7, #22]
 8018108:	e004      	b.n	8018114 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801810a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801810e:	4a12      	ldr	r2, [pc, #72]	@ (8018158 <RegionEU868RxConfig+0x19c>)
 8018110:	5cd3      	ldrb	r3, [r2, r3]
 8018112:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018114:	4b0b      	ldr	r3, [pc, #44]	@ (8018144 <RegionEU868RxConfig+0x188>)
 8018116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018118:	7dba      	ldrb	r2, [r7, #22]
 801811a:	320d      	adds	r2, #13
 801811c:	b2d1      	uxtb	r1, r2
 801811e:	7dfa      	ldrb	r2, [r7, #23]
 8018120:	4610      	mov	r0, r2
 8018122:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	7cdb      	ldrb	r3, [r3, #19]
 8018128:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801812c:	6939      	ldr	r1, [r7, #16]
 801812e:	4618      	mov	r0, r3
 8018130:	f7ff fab0 	bl	8017694 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8018134:	683b      	ldr	r3, [r7, #0]
 8018136:	7bfa      	ldrb	r2, [r7, #15]
 8018138:	701a      	strb	r2, [r3, #0]
    return true;
 801813a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801813c:	4618      	mov	r0, r3
 801813e:	3718      	adds	r7, #24
 8018140:	46bd      	mov	sp, r7
 8018142:	bdb0      	pop	{r4, r5, r7, pc}
 8018144:	08020ce0 	.word	0x08020ce0
 8018148:	20001d24 	.word	0x20001d24
 801814c:	08020ca8 	.word	0x08020ca8
 8018150:	00014585 	.word	0x00014585
 8018154:	08020cd8 	.word	0x08020cd8
 8018158:	08020cd0 	.word	0x08020cd0

0801815c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801815c:	b590      	push	{r4, r7, lr}
 801815e:	b093      	sub	sp, #76	@ 0x4c
 8018160:	af0a      	add	r7, sp, #40	@ 0x28
 8018162:	60f8      	str	r0, [r7, #12]
 8018164:	60b9      	str	r1, [r7, #8]
 8018166:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801816e:	461a      	mov	r2, r3
 8018170:	4b5d      	ldr	r3, [pc, #372]	@ (80182e8 <RegionEU868TxConfig+0x18c>)
 8018172:	5c9b      	ldrb	r3, [r3, r2]
 8018174:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801817c:	4b5b      	ldr	r3, [pc, #364]	@ (80182ec <RegionEU868TxConfig+0x190>)
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	4b5b      	ldr	r3, [pc, #364]	@ (80182f0 <RegionEU868TxConfig+0x194>)
 8018182:	6819      	ldr	r1, [r3, #0]
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	461c      	mov	r4, r3
 801818a:	4623      	mov	r3, r4
 801818c:	005b      	lsls	r3, r3, #1
 801818e:	4423      	add	r3, r4
 8018190:	009b      	lsls	r3, r3, #2
 8018192:	440b      	add	r3, r1
 8018194:	3309      	adds	r3, #9
 8018196:	781b      	ldrb	r3, [r3, #0]
 8018198:	4619      	mov	r1, r3
 801819a:	460b      	mov	r3, r1
 801819c:	005b      	lsls	r3, r3, #1
 801819e:	440b      	add	r3, r1
 80181a0:	00db      	lsls	r3, r3, #3
 80181a2:	4413      	add	r3, r2
 80181a4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80181a8:	4619      	mov	r1, r3
 80181aa:	f7ff fa40 	bl	801762e <RegionCommonLimitTxPower>
 80181ae:	4603      	mov	r3, r0
 80181b0:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80181b8:	494e      	ldr	r1, [pc, #312]	@ (80182f4 <RegionEU868TxConfig+0x198>)
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7ff fa4c 	bl	8017658 <RegionCommonGetBandwidth>
 80181c0:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80181c2:	2300      	movs	r3, #0
 80181c4:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	6859      	ldr	r1, [r3, #4]
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	689a      	ldr	r2, [r3, #8]
 80181ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80181d2:	4618      	mov	r0, r3
 80181d4:	f7ff f89c 	bl	8017310 <RegionCommonComputeTxPower>
 80181d8:	4603      	mov	r3, r0
 80181da:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80181dc:	4b46      	ldr	r3, [pc, #280]	@ (80182f8 <RegionEU868TxConfig+0x19c>)
 80181de:	68da      	ldr	r2, [r3, #12]
 80181e0:	4b43      	ldr	r3, [pc, #268]	@ (80182f0 <RegionEU868TxConfig+0x194>)
 80181e2:	6819      	ldr	r1, [r3, #0]
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	4618      	mov	r0, r3
 80181ea:	4603      	mov	r3, r0
 80181ec:	005b      	lsls	r3, r3, #1
 80181ee:	4403      	add	r3, r0
 80181f0:	009b      	lsls	r3, r3, #2
 80181f2:	440b      	add	r3, r1
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	4618      	mov	r0, r3
 80181f8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018200:	2b07      	cmp	r3, #7
 8018202:	d124      	bne.n	801824e <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018204:	2300      	movs	r3, #0
 8018206:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018208:	4b3b      	ldr	r3, [pc, #236]	@ (80182f8 <RegionEU868TxConfig+0x19c>)
 801820a:	69dc      	ldr	r4, [r3, #28]
 801820c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018210:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018214:	fb02 f303 	mul.w	r3, r2, r3
 8018218:	461a      	mov	r2, r3
 801821a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801821e:	7ff8      	ldrb	r0, [r7, #31]
 8018220:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8018224:	9308      	str	r3, [sp, #32]
 8018226:	2300      	movs	r3, #0
 8018228:	9307      	str	r3, [sp, #28]
 801822a:	2300      	movs	r3, #0
 801822c:	9306      	str	r3, [sp, #24]
 801822e:	2300      	movs	r3, #0
 8018230:	9305      	str	r3, [sp, #20]
 8018232:	2301      	movs	r3, #1
 8018234:	9304      	str	r3, [sp, #16]
 8018236:	2300      	movs	r3, #0
 8018238:	9303      	str	r3, [sp, #12]
 801823a:	2305      	movs	r3, #5
 801823c:	9302      	str	r3, [sp, #8]
 801823e:	2300      	movs	r3, #0
 8018240:	9301      	str	r3, [sp, #4]
 8018242:	9200      	str	r2, [sp, #0]
 8018244:	69bb      	ldr	r3, [r7, #24]
 8018246:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801824a:	47a0      	blx	r4
 801824c:	e01d      	b.n	801828a <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801824e:	2301      	movs	r3, #1
 8018250:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018252:	4b29      	ldr	r3, [pc, #164]	@ (80182f8 <RegionEU868TxConfig+0x19c>)
 8018254:	69dc      	ldr	r4, [r3, #28]
 8018256:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801825a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801825e:	7ff8      	ldrb	r0, [r7, #31]
 8018260:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8018264:	9208      	str	r2, [sp, #32]
 8018266:	2200      	movs	r2, #0
 8018268:	9207      	str	r2, [sp, #28]
 801826a:	2200      	movs	r2, #0
 801826c:	9206      	str	r2, [sp, #24]
 801826e:	2200      	movs	r2, #0
 8018270:	9205      	str	r2, [sp, #20]
 8018272:	2201      	movs	r2, #1
 8018274:	9204      	str	r2, [sp, #16]
 8018276:	2200      	movs	r2, #0
 8018278:	9203      	str	r2, [sp, #12]
 801827a:	2208      	movs	r2, #8
 801827c:	9202      	str	r2, [sp, #8]
 801827e:	2201      	movs	r2, #1
 8018280:	9201      	str	r2, [sp, #4]
 8018282:	9300      	str	r3, [sp, #0]
 8018284:	69bb      	ldr	r3, [r7, #24]
 8018286:	2200      	movs	r2, #0
 8018288:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801828a:	4b19      	ldr	r3, [pc, #100]	@ (80182f0 <RegionEU868TxConfig+0x194>)
 801828c:	681a      	ldr	r2, [r3, #0]
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	781b      	ldrb	r3, [r3, #0]
 8018292:	4619      	mov	r1, r3
 8018294:	460b      	mov	r3, r1
 8018296:	005b      	lsls	r3, r3, #1
 8018298:	440b      	add	r3, r1
 801829a:	009b      	lsls	r3, r3, #2
 801829c:	4413      	add	r3, r2
 801829e:	681a      	ldr	r2, [r3, #0]
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182a6:	4619      	mov	r1, r3
 80182a8:	4610      	mov	r0, r2
 80182aa:	f7ff fa25 	bl	80176f8 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	899b      	ldrh	r3, [r3, #12]
 80182b8:	4619      	mov	r1, r3
 80182ba:	4610      	mov	r0, r2
 80182bc:	f7ff faaa 	bl	8017814 <GetTimeOnAir>
 80182c0:	4602      	mov	r2, r0
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80182c6:	4b0c      	ldr	r3, [pc, #48]	@ (80182f8 <RegionEU868TxConfig+0x19c>)
 80182c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80182ca:	68fa      	ldr	r2, [r7, #12]
 80182cc:	8992      	ldrh	r2, [r2, #12]
 80182ce:	b2d1      	uxtb	r1, r2
 80182d0:	7ffa      	ldrb	r2, [r7, #31]
 80182d2:	4610      	mov	r0, r2
 80182d4:	4798      	blx	r3

    *txPower = txPowerLimited;
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	7f7a      	ldrb	r2, [r7, #29]
 80182da:	701a      	strb	r2, [r3, #0]
    return true;
 80182dc:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80182de:	4618      	mov	r0, r3
 80182e0:	3724      	adds	r7, #36	@ 0x24
 80182e2:	46bd      	mov	sp, r7
 80182e4:	bd90      	pop	{r4, r7, pc}
 80182e6:	bf00      	nop
 80182e8:	08020ca8 	.word	0x08020ca8
 80182ec:	20001d28 	.word	0x20001d28
 80182f0:	20001d24 	.word	0x20001d24
 80182f4:	08020cb0 	.word	0x08020cb0
 80182f8:	08020ce0 	.word	0x08020ce0

080182fc <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80182fc:	b590      	push	{r4, r7, lr}
 80182fe:	b093      	sub	sp, #76	@ 0x4c
 8018300:	af00      	add	r7, sp, #0
 8018302:	60f8      	str	r0, [r7, #12]
 8018304:	60b9      	str	r1, [r7, #8]
 8018306:	607a      	str	r2, [r7, #4]
 8018308:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801830a:	2307      	movs	r3, #7
 801830c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018310:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018314:	2200      	movs	r2, #0
 8018316:	601a      	str	r2, [r3, #0]
 8018318:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801831a:	2300      	movs	r3, #0
 801831c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8018320:	2300      	movs	r3, #0
 8018322:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8018326:	2300      	movs	r3, #0
 8018328:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801832a:	e085      	b.n	8018438 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	685a      	ldr	r2, [r3, #4]
 8018330:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8018334:	4413      	add	r3, r2
 8018336:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801833a:	4611      	mov	r1, r2
 801833c:	4618      	mov	r0, r3
 801833e:	f7fe fe2f 	bl	8016fa0 <RegionCommonParseLinkAdrReq>
 8018342:	4603      	mov	r3, r0
 8018344:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8018348:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801834c:	2b00      	cmp	r3, #0
 801834e:	d07b      	beq.n	8018448 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018350:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018354:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018358:	4413      	add	r3, r2
 801835a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801835e:	2307      	movs	r3, #7
 8018360:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018364:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018368:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801836a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801836e:	2b00      	cmp	r3, #0
 8018370:	d109      	bne.n	8018386 <RegionEU868LinkAdrReq+0x8a>
 8018372:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018374:	2b00      	cmp	r3, #0
 8018376:	d106      	bne.n	8018386 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8018378:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801837c:	f023 0301 	bic.w	r3, r3, #1
 8018380:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018384:	e058      	b.n	8018438 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018386:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801838a:	2b00      	cmp	r3, #0
 801838c:	d003      	beq.n	8018396 <RegionEU868LinkAdrReq+0x9a>
 801838e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018392:	2b05      	cmp	r3, #5
 8018394:	d903      	bls.n	801839e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018396:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801839a:	2b06      	cmp	r3, #6
 801839c:	d906      	bls.n	80183ac <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801839e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80183a2:	f023 0301 	bic.w	r3, r3, #1
 80183a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80183aa:	e045      	b.n	8018438 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80183ac:	2300      	movs	r3, #0
 80183ae:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80183b2:	e03d      	b.n	8018430 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80183b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80183b8:	2b06      	cmp	r3, #6
 80183ba:	d118      	bne.n	80183ee <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80183bc:	4b5f      	ldr	r3, [pc, #380]	@ (801853c <RegionEU868LinkAdrReq+0x240>)
 80183be:	6819      	ldr	r1, [r3, #0]
 80183c0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80183c4:	4613      	mov	r3, r2
 80183c6:	005b      	lsls	r3, r3, #1
 80183c8:	4413      	add	r3, r2
 80183ca:	009b      	lsls	r3, r3, #2
 80183cc:	440b      	add	r3, r1
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d028      	beq.n	8018426 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80183d4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80183d8:	2201      	movs	r2, #1
 80183da:	fa02 f303 	lsl.w	r3, r2, r3
 80183de:	b21a      	sxth	r2, r3
 80183e0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80183e2:	b21b      	sxth	r3, r3
 80183e4:	4313      	orrs	r3, r2
 80183e6:	b21b      	sxth	r3, r3
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80183ec:	e01b      	b.n	8018426 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80183ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80183f0:	461a      	mov	r2, r3
 80183f2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80183f6:	fa42 f303 	asr.w	r3, r2, r3
 80183fa:	f003 0301 	and.w	r3, r3, #1
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d011      	beq.n	8018426 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8018402:	4b4e      	ldr	r3, [pc, #312]	@ (801853c <RegionEU868LinkAdrReq+0x240>)
 8018404:	6819      	ldr	r1, [r3, #0]
 8018406:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801840a:	4613      	mov	r3, r2
 801840c:	005b      	lsls	r3, r3, #1
 801840e:	4413      	add	r3, r2
 8018410:	009b      	lsls	r3, r3, #2
 8018412:	440b      	add	r3, r1
 8018414:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018416:	2b00      	cmp	r3, #0
 8018418:	d105      	bne.n	8018426 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801841a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801841e:	f023 0301 	bic.w	r3, r3, #1
 8018422:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018426:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801842a:	3301      	adds	r3, #1
 801842c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8018430:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018434:	2b0f      	cmp	r3, #15
 8018436:	d9bd      	bls.n	80183b4 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	7a1b      	ldrb	r3, [r3, #8]
 801843c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018440:	429a      	cmp	r2, r3
 8018442:	f4ff af73 	bcc.w	801832c <RegionEU868LinkAdrReq+0x30>
 8018446:	e000      	b.n	801844a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8018448:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801844a:	2302      	movs	r3, #2
 801844c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	7a5b      	ldrb	r3, [r3, #9]
 8018454:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018458:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801845c:	4618      	mov	r0, r3
 801845e:	f7ff fa29 	bl	80178b4 <RegionEU868GetPhyParam>
 8018462:	4603      	mov	r3, r0
 8018464:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8018466:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801846a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	7a9b      	ldrb	r3, [r3, #10]
 8018470:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018472:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8018476:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018478:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 801847c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801847e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018482:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801848a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018492:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	7b5b      	ldrb	r3, [r3, #13]
 8018498:	b25b      	sxtb	r3, r3
 801849a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801849c:	2310      	movs	r3, #16
 801849e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80184a0:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80184a4:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80184a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184a8:	b25b      	sxtb	r3, r3
 80184aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80184ae:	2307      	movs	r3, #7
 80184b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80184b4:	4b21      	ldr	r3, [pc, #132]	@ (801853c <RegionEU868LinkAdrReq+0x240>)
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80184ba:	2307      	movs	r3, #7
 80184bc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80184c0:	2300      	movs	r3, #0
 80184c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80184cc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80184d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80184d4:	1c9a      	adds	r2, r3, #2
 80184d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80184da:	1c59      	adds	r1, r3, #1
 80184dc:	f107 0010 	add.w	r0, r7, #16
 80184e0:	4623      	mov	r3, r4
 80184e2:	f7fe fdaf 	bl	8017044 <RegionCommonLinkAdrReqVerifyParams>
 80184e6:	4603      	mov	r3, r0
 80184e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80184ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80184f0:	2b07      	cmp	r3, #7
 80184f2:	d10d      	bne.n	8018510 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80184f4:	4b11      	ldr	r3, [pc, #68]	@ (801853c <RegionEU868LinkAdrReq+0x240>)
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80184fc:	220c      	movs	r2, #12
 80184fe:	2100      	movs	r1, #0
 8018500:	4618      	mov	r0, r3
 8018502:	f000 fb35 	bl	8018b70 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8018506:	4b0d      	ldr	r3, [pc, #52]	@ (801853c <RegionEU868LinkAdrReq+0x240>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801850c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018510:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018518:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018520:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018524:	683b      	ldr	r3, [r7, #0]
 8018526:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018528:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801852a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801852e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8018530:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8018534:	4618      	mov	r0, r3
 8018536:	374c      	adds	r7, #76	@ 0x4c
 8018538:	46bd      	mov	sp, r7
 801853a:	bd90      	pop	{r4, r7, pc}
 801853c:	20001d24 	.word	0x20001d24

08018540 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b084      	sub	sp, #16
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018548:	2307      	movs	r3, #7
 801854a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801854c:	2300      	movs	r3, #0
 801854e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	685b      	ldr	r3, [r3, #4]
 8018554:	f107 020e 	add.w	r2, r7, #14
 8018558:	4611      	mov	r1, r2
 801855a:	4618      	mov	r0, r3
 801855c:	f7ff f8e4 	bl	8017728 <VerifyRfFreq>
 8018560:	4603      	mov	r3, r0
 8018562:	f083 0301 	eor.w	r3, r3, #1
 8018566:	b2db      	uxtb	r3, r3
 8018568:	2b00      	cmp	r3, #0
 801856a:	d003      	beq.n	8018574 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 801856c:	7bfb      	ldrb	r3, [r7, #15]
 801856e:	f023 0301 	bic.w	r3, r3, #1
 8018572:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	f993 3000 	ldrsb.w	r3, [r3]
 801857a:	2207      	movs	r2, #7
 801857c:	2100      	movs	r1, #0
 801857e:	4618      	mov	r0, r3
 8018580:	f7fe fb71 	bl	8016c66 <RegionCommonValueInRange>
 8018584:	4603      	mov	r3, r0
 8018586:	2b00      	cmp	r3, #0
 8018588:	d103      	bne.n	8018592 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801858a:	7bfb      	ldrb	r3, [r7, #15]
 801858c:	f023 0302 	bic.w	r3, r3, #2
 8018590:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018598:	2205      	movs	r2, #5
 801859a:	2100      	movs	r1, #0
 801859c:	4618      	mov	r0, r3
 801859e:	f7fe fb62 	bl	8016c66 <RegionCommonValueInRange>
 80185a2:	4603      	mov	r3, r0
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d103      	bne.n	80185b0 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80185a8:	7bfb      	ldrb	r3, [r7, #15]
 80185aa:	f023 0304 	bic.w	r3, r3, #4
 80185ae:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80185b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80185b2:	4618      	mov	r0, r3
 80185b4:	3710      	adds	r7, #16
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd80      	pop	{r7, pc}
	...

080185bc <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b086      	sub	sp, #24
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80185c4:	2303      	movs	r3, #3
 80185c6:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d114      	bne.n	80185fc <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80185d8:	b2db      	uxtb	r3, r3
 80185da:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80185dc:	f107 0308 	add.w	r3, r7, #8
 80185e0:	4618      	mov	r0, r3
 80185e2:	f000 f9ff 	bl	80189e4 <RegionEU868ChannelsRemove>
 80185e6:	4603      	mov	r3, r0
 80185e8:	f083 0301 	eor.w	r3, r3, #1
 80185ec:	b2db      	uxtb	r3, r3
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d03b      	beq.n	801866a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80185f2:	7dfb      	ldrb	r3, [r7, #23]
 80185f4:	f023 0303 	bic.w	r3, r3, #3
 80185f8:	75fb      	strb	r3, [r7, #23]
 80185fa:	e036      	b.n	801866a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018608:	b2db      	uxtb	r3, r3
 801860a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801860c:	f107 030c 	add.w	r3, r7, #12
 8018610:	4618      	mov	r0, r3
 8018612:	f000 f945 	bl	80188a0 <RegionEU868ChannelAdd>
 8018616:	4603      	mov	r3, r0
 8018618:	2b06      	cmp	r3, #6
 801861a:	d820      	bhi.n	801865e <RegionEU868NewChannelReq+0xa2>
 801861c:	a201      	add	r2, pc, #4	@ (adr r2, 8018624 <RegionEU868NewChannelReq+0x68>)
 801861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018622:	bf00      	nop
 8018624:	08018669 	.word	0x08018669
 8018628:	0801865f 	.word	0x0801865f
 801862c:	0801865f 	.word	0x0801865f
 8018630:	0801865f 	.word	0x0801865f
 8018634:	08018641 	.word	0x08018641
 8018638:	0801864b 	.word	0x0801864b
 801863c:	08018655 	.word	0x08018655
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018640:	7dfb      	ldrb	r3, [r7, #23]
 8018642:	f023 0301 	bic.w	r3, r3, #1
 8018646:	75fb      	strb	r3, [r7, #23]
                break;
 8018648:	e00f      	b.n	801866a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801864a:	7dfb      	ldrb	r3, [r7, #23]
 801864c:	f023 0302 	bic.w	r3, r3, #2
 8018650:	75fb      	strb	r3, [r7, #23]
                break;
 8018652:	e00a      	b.n	801866a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018654:	7dfb      	ldrb	r3, [r7, #23]
 8018656:	f023 0303 	bic.w	r3, r3, #3
 801865a:	75fb      	strb	r3, [r7, #23]
                break;
 801865c:	e005      	b.n	801866a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801865e:	7dfb      	ldrb	r3, [r7, #23]
 8018660:	f023 0303 	bic.w	r3, r3, #3
 8018664:	75fb      	strb	r3, [r7, #23]
                break;
 8018666:	e000      	b.n	801866a <RegionEU868NewChannelReq+0xae>
                break;
 8018668:	bf00      	nop
            }
        }
    }

    return status;
 801866a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801866e:	4618      	mov	r0, r3
 8018670:	3718      	adds	r7, #24
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}
 8018676:	bf00      	nop

08018678 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018678:	b480      	push	{r7}
 801867a:	b083      	sub	sp, #12
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018684:	4618      	mov	r0, r3
 8018686:	370c      	adds	r7, #12
 8018688:	46bd      	mov	sp, r7
 801868a:	bc80      	pop	{r7}
 801868c:	4770      	bx	lr
	...

08018690 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b084      	sub	sp, #16
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018698:	2303      	movs	r3, #3
 801869a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 801869c:	2300      	movs	r3, #0
 801869e:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	781b      	ldrb	r3, [r3, #0]
 80186a4:	2b0f      	cmp	r3, #15
 80186a6:	d901      	bls.n	80186ac <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80186a8:	2300      	movs	r3, #0
 80186aa:	e035      	b.n	8018718 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	685b      	ldr	r3, [r3, #4]
 80186b0:	f107 020e 	add.w	r2, r7, #14
 80186b4:	4611      	mov	r1, r2
 80186b6:	4618      	mov	r0, r3
 80186b8:	f7ff f836 	bl	8017728 <VerifyRfFreq>
 80186bc:	4603      	mov	r3, r0
 80186be:	f083 0301 	eor.w	r3, r3, #1
 80186c2:	b2db      	uxtb	r3, r3
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d003      	beq.n	80186d0 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80186c8:	7bfb      	ldrb	r3, [r7, #15]
 80186ca:	f023 0301 	bic.w	r3, r3, #1
 80186ce:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80186d0:	4b13      	ldr	r3, [pc, #76]	@ (8018720 <RegionEU868DlChannelReq+0x90>)
 80186d2:	681a      	ldr	r2, [r3, #0]
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	781b      	ldrb	r3, [r3, #0]
 80186d8:	4619      	mov	r1, r3
 80186da:	460b      	mov	r3, r1
 80186dc:	005b      	lsls	r3, r3, #1
 80186de:	440b      	add	r3, r1
 80186e0:	009b      	lsls	r3, r3, #2
 80186e2:	4413      	add	r3, r2
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d103      	bne.n	80186f2 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 80186ea:	7bfb      	ldrb	r3, [r7, #15]
 80186ec:	f023 0302 	bic.w	r3, r3, #2
 80186f0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80186f2:	7bfb      	ldrb	r3, [r7, #15]
 80186f4:	2b03      	cmp	r3, #3
 80186f6:	d10d      	bne.n	8018714 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80186f8:	4b09      	ldr	r3, [pc, #36]	@ (8018720 <RegionEU868DlChannelReq+0x90>)
 80186fa:	6819      	ldr	r1, [r3, #0]
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	781b      	ldrb	r3, [r3, #0]
 8018700:	4618      	mov	r0, r3
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	685a      	ldr	r2, [r3, #4]
 8018706:	4603      	mov	r3, r0
 8018708:	005b      	lsls	r3, r3, #1
 801870a:	4403      	add	r3, r0
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	440b      	add	r3, r1
 8018710:	3304      	adds	r3, #4
 8018712:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8018714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018718:	4618      	mov	r0, r3
 801871a:	3710      	adds	r7, #16
 801871c:	46bd      	mov	sp, r7
 801871e:	bd80      	pop	{r7, pc}
 8018720:	20001d24 	.word	0x20001d24

08018724 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018724:	b480      	push	{r7}
 8018726:	b083      	sub	sp, #12
 8018728:	af00      	add	r7, sp, #0
 801872a:	4603      	mov	r3, r0
 801872c:	460a      	mov	r2, r1
 801872e:	71fb      	strb	r3, [r7, #7]
 8018730:	4613      	mov	r3, r2
 8018732:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8018734:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8018738:	4618      	mov	r0, r3
 801873a:	370c      	adds	r7, #12
 801873c:	46bd      	mov	sp, r7
 801873e:	bc80      	pop	{r7}
 8018740:	4770      	bx	lr
	...

08018744 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b09a      	sub	sp, #104	@ 0x68
 8018748:	af02      	add	r7, sp, #8
 801874a:	60f8      	str	r0, [r7, #12]
 801874c:	60b9      	str	r1, [r7, #8]
 801874e:	607a      	str	r2, [r7, #4]
 8018750:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8018752:	2300      	movs	r3, #0
 8018754:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8018758:	2300      	movs	r3, #0
 801875a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801875e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018762:	2200      	movs	r2, #0
 8018764:	601a      	str	r2, [r3, #0]
 8018766:	605a      	str	r2, [r3, #4]
 8018768:	609a      	str	r2, [r3, #8]
 801876a:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801876c:	230c      	movs	r3, #12
 801876e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8018772:	2307      	movs	r3, #7
 8018774:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8018776:	4b48      	ldr	r3, [pc, #288]	@ (8018898 <RegionEU868NextChannel+0x154>)
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801877e:	2201      	movs	r2, #1
 8018780:	2100      	movs	r1, #0
 8018782:	4618      	mov	r0, r3
 8018784:	f7fe fac0 	bl	8016d08 <RegionCommonCountChannels>
 8018788:	4603      	mov	r3, r0
 801878a:	2b00      	cmp	r3, #0
 801878c:	d10a      	bne.n	80187a4 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801878e:	4b42      	ldr	r3, [pc, #264]	@ (8018898 <RegionEU868NextChannel+0x154>)
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8018796:	4b40      	ldr	r3, [pc, #256]	@ (8018898 <RegionEU868NextChannel+0x154>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	f042 0207 	orr.w	r2, r2, #7
 801879e:	b292      	uxth	r2, r2
 80187a0:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	7a5b      	ldrb	r3, [r3, #9]
 80187a8:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80187b4:	4b38      	ldr	r3, [pc, #224]	@ (8018898 <RegionEU868NextChannel+0x154>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80187bc:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80187be:	4b36      	ldr	r3, [pc, #216]	@ (8018898 <RegionEU868NextChannel+0x154>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 80187c4:	4b35      	ldr	r3, [pc, #212]	@ (801889c <RegionEU868NextChannel+0x158>)
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80187ca:	2310      	movs	r3, #16
 80187cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80187ce:	f107 0312 	add.w	r3, r7, #18
 80187d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	7a9b      	ldrb	r3, [r3, #10]
 80187e4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80187e8:	2306      	movs	r3, #6
 80187ea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80187ee:	68fa      	ldr	r2, [r7, #12]
 80187f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80187f4:	320c      	adds	r2, #12
 80187f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187fa:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	7d1b      	ldrb	r3, [r3, #20]
 8018802:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	8adb      	ldrh	r3, [r3, #22]
 8018810:	4619      	mov	r1, r3
 8018812:	4610      	mov	r0, r2
 8018814:	f7fe fffe 	bl	8017814 <GetTimeOnAir>
 8018818:	4603      	mov	r3, r0
 801881a:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801881c:	f107 0314 	add.w	r3, r7, #20
 8018820:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018822:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8018826:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801882a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	9301      	str	r3, [sp, #4]
 8018832:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8018836:	9300      	str	r3, [sp, #0]
 8018838:	460b      	mov	r3, r1
 801883a:	6839      	ldr	r1, [r7, #0]
 801883c:	f7fe fe57 	bl	80174ee <RegionCommonIdentifyChannels>
 8018840:	4603      	mov	r3, r0
 8018842:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018846:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801884a:	2b00      	cmp	r3, #0
 801884c:	d10e      	bne.n	801886c <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801884e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8018852:	3b01      	subs	r3, #1
 8018854:	4619      	mov	r1, r3
 8018856:	2000      	movs	r0, #0
 8018858:	f000 f938 	bl	8018acc <randr>
 801885c:	4603      	mov	r3, r0
 801885e:	3360      	adds	r3, #96	@ 0x60
 8018860:	443b      	add	r3, r7
 8018862:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8018866:	68bb      	ldr	r3, [r7, #8]
 8018868:	701a      	strb	r2, [r3, #0]
 801886a:	e00e      	b.n	801888a <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801886c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018870:	2b0c      	cmp	r3, #12
 8018872:	d10a      	bne.n	801888a <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018874:	4b08      	ldr	r3, [pc, #32]	@ (8018898 <RegionEU868NextChannel+0x154>)
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801887c:	4b06      	ldr	r3, [pc, #24]	@ (8018898 <RegionEU868NextChannel+0x154>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	f042 0207 	orr.w	r2, r2, #7
 8018884:	b292      	uxth	r2, r2
 8018886:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 801888a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801888e:	4618      	mov	r0, r3
 8018890:	3760      	adds	r7, #96	@ 0x60
 8018892:	46bd      	mov	sp, r7
 8018894:	bd80      	pop	{r7, pc}
 8018896:	bf00      	nop
 8018898:	20001d24 	.word	0x20001d24
 801889c:	20001d28 	.word	0x20001d28

080188a0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b084      	sub	sp, #16
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80188a8:	2300      	movs	r3, #0
 80188aa:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80188ac:	2300      	movs	r3, #0
 80188ae:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80188b0:	2300      	movs	r3, #0
 80188b2:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	791b      	ldrb	r3, [r3, #4]
 80188b8:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80188ba:	7b7b      	ldrb	r3, [r7, #13]
 80188bc:	2b02      	cmp	r3, #2
 80188be:	d801      	bhi.n	80188c4 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80188c0:	2306      	movs	r3, #6
 80188c2:	e089      	b.n	80189d8 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80188c4:	7b7b      	ldrb	r3, [r7, #13]
 80188c6:	2b0f      	cmp	r3, #15
 80188c8:	d901      	bls.n	80188ce <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80188ca:	2303      	movs	r3, #3
 80188cc:	e084      	b.n	80189d8 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	7a1b      	ldrb	r3, [r3, #8]
 80188d4:	f343 0303 	sbfx	r3, r3, #0, #4
 80188d8:	b25b      	sxtb	r3, r3
 80188da:	2207      	movs	r2, #7
 80188dc:	2100      	movs	r1, #0
 80188de:	4618      	mov	r0, r3
 80188e0:	f7fe f9c1 	bl	8016c66 <RegionCommonValueInRange>
 80188e4:	4603      	mov	r3, r0
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d101      	bne.n	80188ee <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80188ea:	2301      	movs	r3, #1
 80188ec:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	7a1b      	ldrb	r3, [r3, #8]
 80188f4:	f343 1303 	sbfx	r3, r3, #4, #4
 80188f8:	b25b      	sxtb	r3, r3
 80188fa:	2207      	movs	r2, #7
 80188fc:	2100      	movs	r1, #0
 80188fe:	4618      	mov	r0, r3
 8018900:	f7fe f9b1 	bl	8016c66 <RegionCommonValueInRange>
 8018904:	4603      	mov	r3, r0
 8018906:	2b00      	cmp	r3, #0
 8018908:	d101      	bne.n	801890e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801890a:	2301      	movs	r3, #1
 801890c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	7a1b      	ldrb	r3, [r3, #8]
 8018914:	f343 0303 	sbfx	r3, r3, #0, #4
 8018918:	b25a      	sxtb	r2, r3
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	7a1b      	ldrb	r3, [r3, #8]
 8018920:	f343 1303 	sbfx	r3, r3, #4, #4
 8018924:	b25b      	sxtb	r3, r3
 8018926:	429a      	cmp	r2, r3
 8018928:	dd01      	ble.n	801892e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801892a:	2301      	movs	r3, #1
 801892c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801892e:	7bbb      	ldrb	r3, [r7, #14]
 8018930:	f083 0301 	eor.w	r3, r3, #1
 8018934:	b2db      	uxtb	r3, r3
 8018936:	2b00      	cmp	r3, #0
 8018938:	d010      	beq.n	801895c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	f107 020c 	add.w	r2, r7, #12
 8018944:	4611      	mov	r1, r2
 8018946:	4618      	mov	r0, r3
 8018948:	f7fe feee 	bl	8017728 <VerifyRfFreq>
 801894c:	4603      	mov	r3, r0
 801894e:	f083 0301 	eor.w	r3, r3, #1
 8018952:	b2db      	uxtb	r3, r3
 8018954:	2b00      	cmp	r3, #0
 8018956:	d001      	beq.n	801895c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8018958:	2301      	movs	r3, #1
 801895a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801895c:	7bfb      	ldrb	r3, [r7, #15]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d004      	beq.n	801896c <RegionEU868ChannelAdd+0xcc>
 8018962:	7bbb      	ldrb	r3, [r7, #14]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d001      	beq.n	801896c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018968:	2306      	movs	r3, #6
 801896a:	e035      	b.n	80189d8 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801896c:	7bfb      	ldrb	r3, [r7, #15]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d001      	beq.n	8018976 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018972:	2305      	movs	r3, #5
 8018974:	e030      	b.n	80189d8 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8018976:	7bbb      	ldrb	r3, [r7, #14]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d001      	beq.n	8018980 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801897c:	2304      	movs	r3, #4
 801897e:	e02b      	b.n	80189d8 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8018980:	4b17      	ldr	r3, [pc, #92]	@ (80189e0 <RegionEU868ChannelAdd+0x140>)
 8018982:	6819      	ldr	r1, [r3, #0]
 8018984:	7b7a      	ldrb	r2, [r7, #13]
 8018986:	4613      	mov	r3, r2
 8018988:	005b      	lsls	r3, r3, #1
 801898a:	4413      	add	r3, r2
 801898c:	009b      	lsls	r3, r3, #2
 801898e:	18c8      	adds	r0, r1, r3
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	220c      	movs	r2, #12
 8018996:	4619      	mov	r1, r3
 8018998:	f000 f8af 	bl	8018afa <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801899c:	4b10      	ldr	r3, [pc, #64]	@ (80189e0 <RegionEU868ChannelAdd+0x140>)
 801899e:	6819      	ldr	r1, [r3, #0]
 80189a0:	7b7a      	ldrb	r2, [r7, #13]
 80189a2:	7b38      	ldrb	r0, [r7, #12]
 80189a4:	4613      	mov	r3, r2
 80189a6:	005b      	lsls	r3, r3, #1
 80189a8:	4413      	add	r3, r2
 80189aa:	009b      	lsls	r3, r3, #2
 80189ac:	440b      	add	r3, r1
 80189ae:	3309      	adds	r3, #9
 80189b0:	4602      	mov	r2, r0
 80189b2:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80189b4:	4b0a      	ldr	r3, [pc, #40]	@ (80189e0 <RegionEU868ChannelAdd+0x140>)
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80189bc:	b21a      	sxth	r2, r3
 80189be:	7b7b      	ldrb	r3, [r7, #13]
 80189c0:	2101      	movs	r1, #1
 80189c2:	fa01 f303 	lsl.w	r3, r1, r3
 80189c6:	b21b      	sxth	r3, r3
 80189c8:	4313      	orrs	r3, r2
 80189ca:	b21a      	sxth	r2, r3
 80189cc:	4b04      	ldr	r3, [pc, #16]	@ (80189e0 <RegionEU868ChannelAdd+0x140>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	b292      	uxth	r2, r2
 80189d2:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80189d6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80189d8:	4618      	mov	r0, r3
 80189da:	3710      	adds	r7, #16
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd80      	pop	{r7, pc}
 80189e0:	20001d24 	.word	0x20001d24

080189e4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b086      	sub	sp, #24
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	781b      	ldrb	r3, [r3, #0]
 80189f0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80189f2:	7dfb      	ldrb	r3, [r7, #23]
 80189f4:	2b02      	cmp	r3, #2
 80189f6:	d801      	bhi.n	80189fc <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80189f8:	2300      	movs	r3, #0
 80189fa:	e016      	b.n	8018a2a <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80189fc:	4b0d      	ldr	r3, [pc, #52]	@ (8018a34 <RegionEU868ChannelsRemove+0x50>)
 80189fe:	6819      	ldr	r1, [r3, #0]
 8018a00:	7dfa      	ldrb	r2, [r7, #23]
 8018a02:	4613      	mov	r3, r2
 8018a04:	005b      	lsls	r3, r3, #1
 8018a06:	4413      	add	r3, r2
 8018a08:	009b      	lsls	r3, r3, #2
 8018a0a:	440b      	add	r3, r1
 8018a0c:	461a      	mov	r2, r3
 8018a0e:	2300      	movs	r3, #0
 8018a10:	6013      	str	r3, [r2, #0]
 8018a12:	6053      	str	r3, [r2, #4]
 8018a14:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018a16:	4b07      	ldr	r3, [pc, #28]	@ (8018a34 <RegionEU868ChannelsRemove+0x50>)
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018a1e:	7df9      	ldrb	r1, [r7, #23]
 8018a20:	2210      	movs	r2, #16
 8018a22:	4618      	mov	r0, r3
 8018a24:	f7fe f93c 	bl	8016ca0 <RegionCommonChanDisable>
 8018a28:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	3718      	adds	r7, #24
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	bd80      	pop	{r7, pc}
 8018a32:	bf00      	nop
 8018a34:	20001d24 	.word	0x20001d24

08018a38 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018a38:	b480      	push	{r7}
 8018a3a:	b085      	sub	sp, #20
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	4603      	mov	r3, r0
 8018a40:	71fb      	strb	r3, [r7, #7]
 8018a42:	460b      	mov	r3, r1
 8018a44:	71bb      	strb	r3, [r7, #6]
 8018a46:	4613      	mov	r3, r2
 8018a48:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8018a4a:	79ba      	ldrb	r2, [r7, #6]
 8018a4c:	797b      	ldrb	r3, [r7, #5]
 8018a4e:	1ad3      	subs	r3, r2, r3
 8018a50:	b2db      	uxtb	r3, r3
 8018a52:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	da01      	bge.n	8018a60 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018a60:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8018a62:	4618      	mov	r0, r3
 8018a64:	3714      	adds	r7, #20
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bc80      	pop	{r7}
 8018a6a:	4770      	bx	lr

08018a6c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018a6c:	b480      	push	{r7}
 8018a6e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018a70:	4b0d      	ldr	r3, [pc, #52]	@ (8018aa8 <rand1+0x3c>)
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	4a0d      	ldr	r2, [pc, #52]	@ (8018aac <rand1+0x40>)
 8018a76:	fb02 f303 	mul.w	r3, r2, r3
 8018a7a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018a7e:	3339      	adds	r3, #57	@ 0x39
 8018a80:	4a09      	ldr	r2, [pc, #36]	@ (8018aa8 <rand1+0x3c>)
 8018a82:	6013      	str	r3, [r2, #0]
 8018a84:	4b08      	ldr	r3, [pc, #32]	@ (8018aa8 <rand1+0x3c>)
 8018a86:	681a      	ldr	r2, [r3, #0]
 8018a88:	2303      	movs	r3, #3
 8018a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8018a8e:	1ad1      	subs	r1, r2, r3
 8018a90:	0849      	lsrs	r1, r1, #1
 8018a92:	440b      	add	r3, r1
 8018a94:	0f99      	lsrs	r1, r3, #30
 8018a96:	460b      	mov	r3, r1
 8018a98:	07db      	lsls	r3, r3, #31
 8018a9a:	1a5b      	subs	r3, r3, r1
 8018a9c:	1ad1      	subs	r1, r2, r3
 8018a9e:	460b      	mov	r3, r1
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bc80      	pop	{r7}
 8018aa6:	4770      	bx	lr
 8018aa8:	20000130 	.word	0x20000130
 8018aac:	41c64e6d 	.word	0x41c64e6d

08018ab0 <srand1>:

void srand1( uint32_t seed )
{
 8018ab0:	b480      	push	{r7}
 8018ab2:	b083      	sub	sp, #12
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
    next = seed;
 8018ab8:	4a03      	ldr	r2, [pc, #12]	@ (8018ac8 <srand1+0x18>)
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	6013      	str	r3, [r2, #0]
}
 8018abe:	bf00      	nop
 8018ac0:	370c      	adds	r7, #12
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	bc80      	pop	{r7}
 8018ac6:	4770      	bx	lr
 8018ac8:	20000130 	.word	0x20000130

08018acc <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b082      	sub	sp, #8
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
 8018ad4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018ad6:	f7ff ffc9 	bl	8018a6c <rand1>
 8018ada:	4602      	mov	r2, r0
 8018adc:	6839      	ldr	r1, [r7, #0]
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	1acb      	subs	r3, r1, r3
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	fb92 f1f3 	sdiv	r1, r2, r3
 8018ae8:	fb01 f303 	mul.w	r3, r1, r3
 8018aec:	1ad2      	subs	r2, r2, r3
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	4413      	add	r3, r2
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	3708      	adds	r7, #8
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}

08018afa <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018afa:	b480      	push	{r7}
 8018afc:	b085      	sub	sp, #20
 8018afe:	af00      	add	r7, sp, #0
 8018b00:	60f8      	str	r0, [r7, #12]
 8018b02:	60b9      	str	r1, [r7, #8]
 8018b04:	4613      	mov	r3, r2
 8018b06:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018b08:	e007      	b.n	8018b1a <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018b0a:	68ba      	ldr	r2, [r7, #8]
 8018b0c:	1c53      	adds	r3, r2, #1
 8018b0e:	60bb      	str	r3, [r7, #8]
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	1c59      	adds	r1, r3, #1
 8018b14:	60f9      	str	r1, [r7, #12]
 8018b16:	7812      	ldrb	r2, [r2, #0]
 8018b18:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018b1a:	88fb      	ldrh	r3, [r7, #6]
 8018b1c:	1e5a      	subs	r2, r3, #1
 8018b1e:	80fa      	strh	r2, [r7, #6]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d1f2      	bne.n	8018b0a <memcpy1+0x10>
    }
}
 8018b24:	bf00      	nop
 8018b26:	bf00      	nop
 8018b28:	3714      	adds	r7, #20
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bc80      	pop	{r7}
 8018b2e:	4770      	bx	lr

08018b30 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018b30:	b480      	push	{r7}
 8018b32:	b085      	sub	sp, #20
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	60f8      	str	r0, [r7, #12]
 8018b38:	60b9      	str	r1, [r7, #8]
 8018b3a:	4613      	mov	r3, r2
 8018b3c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018b3e:	88fb      	ldrh	r3, [r7, #6]
 8018b40:	3b01      	subs	r3, #1
 8018b42:	68fa      	ldr	r2, [r7, #12]
 8018b44:	4413      	add	r3, r2
 8018b46:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018b48:	e007      	b.n	8018b5a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018b4a:	68ba      	ldr	r2, [r7, #8]
 8018b4c:	1c53      	adds	r3, r2, #1
 8018b4e:	60bb      	str	r3, [r7, #8]
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	1e59      	subs	r1, r3, #1
 8018b54:	60f9      	str	r1, [r7, #12]
 8018b56:	7812      	ldrb	r2, [r2, #0]
 8018b58:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018b5a:	88fb      	ldrh	r3, [r7, #6]
 8018b5c:	1e5a      	subs	r2, r3, #1
 8018b5e:	80fa      	strh	r2, [r7, #6]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d1f2      	bne.n	8018b4a <memcpyr+0x1a>
    }
}
 8018b64:	bf00      	nop
 8018b66:	bf00      	nop
 8018b68:	3714      	adds	r7, #20
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	bc80      	pop	{r7}
 8018b6e:	4770      	bx	lr

08018b70 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018b70:	b480      	push	{r7}
 8018b72:	b083      	sub	sp, #12
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	6078      	str	r0, [r7, #4]
 8018b78:	460b      	mov	r3, r1
 8018b7a:	70fb      	strb	r3, [r7, #3]
 8018b7c:	4613      	mov	r3, r2
 8018b7e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018b80:	e004      	b.n	8018b8c <memset1+0x1c>
    {
        *dst++ = value;
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	1c5a      	adds	r2, r3, #1
 8018b86:	607a      	str	r2, [r7, #4]
 8018b88:	78fa      	ldrb	r2, [r7, #3]
 8018b8a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018b8c:	883b      	ldrh	r3, [r7, #0]
 8018b8e:	1e5a      	subs	r2, r3, #1
 8018b90:	803a      	strh	r2, [r7, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d1f5      	bne.n	8018b82 <memset1+0x12>
    }
}
 8018b96:	bf00      	nop
 8018b98:	bf00      	nop
 8018b9a:	370c      	adds	r7, #12
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	bc80      	pop	{r7}
 8018ba0:	4770      	bx	lr
	...

08018ba4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018ba4:	b480      	push	{r7}
 8018ba6:	b085      	sub	sp, #20
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
 8018bac:	460b      	mov	r3, r1
 8018bae:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bb4:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d101      	bne.n	8018bc0 <Crc32+0x1c>
    {
        return 0;
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	e026      	b.n	8018c0e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	817b      	strh	r3, [r7, #10]
 8018bc4:	e01d      	b.n	8018c02 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018bc6:	897b      	ldrh	r3, [r7, #10]
 8018bc8:	687a      	ldr	r2, [r7, #4]
 8018bca:	4413      	add	r3, r2
 8018bcc:	781b      	ldrb	r3, [r3, #0]
 8018bce:	461a      	mov	r2, r3
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	4053      	eors	r3, r2
 8018bd4:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	813b      	strh	r3, [r7, #8]
 8018bda:	e00c      	b.n	8018bf6 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	085a      	lsrs	r2, r3, #1
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	f003 0301 	and.w	r3, r3, #1
 8018be6:	425b      	negs	r3, r3
 8018be8:	490b      	ldr	r1, [pc, #44]	@ (8018c18 <Crc32+0x74>)
 8018bea:	400b      	ands	r3, r1
 8018bec:	4053      	eors	r3, r2
 8018bee:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018bf0:	893b      	ldrh	r3, [r7, #8]
 8018bf2:	3301      	adds	r3, #1
 8018bf4:	813b      	strh	r3, [r7, #8]
 8018bf6:	893b      	ldrh	r3, [r7, #8]
 8018bf8:	2b07      	cmp	r3, #7
 8018bfa:	d9ef      	bls.n	8018bdc <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018bfc:	897b      	ldrh	r3, [r7, #10]
 8018bfe:	3301      	adds	r3, #1
 8018c00:	817b      	strh	r3, [r7, #10]
 8018c02:	897a      	ldrh	r2, [r7, #10]
 8018c04:	887b      	ldrh	r3, [r7, #2]
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d3dd      	bcc.n	8018bc6 <Crc32+0x22>
        }
    }

    return ~crc;
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	43db      	mvns	r3, r3
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	3714      	adds	r7, #20
 8018c12:	46bd      	mov	sp, r7
 8018c14:	bc80      	pop	{r7}
 8018c16:	4770      	bx	lr
 8018c18:	edb88320 	.word	0xedb88320

08018c1c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b084      	sub	sp, #16
 8018c20:	af02      	add	r7, sp, #8
 8018c22:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018c24:	4a24      	ldr	r2, [pc, #144]	@ (8018cb8 <RadioInit+0x9c>)
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018c2a:	4b24      	ldr	r3, [pc, #144]	@ (8018cbc <RadioInit+0xa0>)
 8018c2c:	2200      	movs	r2, #0
 8018c2e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018c30:	4b22      	ldr	r3, [pc, #136]	@ (8018cbc <RadioInit+0xa0>)
 8018c32:	2200      	movs	r2, #0
 8018c34:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018c36:	4b21      	ldr	r3, [pc, #132]	@ (8018cbc <RadioInit+0xa0>)
 8018c38:	2200      	movs	r2, #0
 8018c3a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8018cbc <RadioInit+0xa0>)
 8018c3e:	2200      	movs	r2, #0
 8018c40:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018c42:	481f      	ldr	r0, [pc, #124]	@ (8018cc0 <RadioInit+0xa4>)
 8018c44:	f001 ffc6 	bl	801abd4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018c48:	4b1c      	ldr	r3, [pc, #112]	@ (8018cbc <RadioInit+0xa0>)
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8018cbc <RadioInit+0xa0>)
 8018c50:	2200      	movs	r2, #0
 8018c52:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018c54:	f002 fa5c 	bl	801b110 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018c58:	2100      	movs	r1, #0
 8018c5a:	2000      	movs	r0, #0
 8018c5c:	f002 fe28 	bl	801b8b0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018c60:	2204      	movs	r2, #4
 8018c62:	2100      	movs	r1, #0
 8018c64:	2001      	movs	r0, #1
 8018c66:	f002 fbeb 	bl	801b440 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	2200      	movs	r2, #0
 8018c6e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018c72:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018c76:	f002 fb1b 	bl	801b2b0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8018c7a:	f000 fe99 	bl	80199b0 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018c7e:	2300      	movs	r3, #0
 8018c80:	9300      	str	r3, [sp, #0]
 8018c82:	4b10      	ldr	r3, [pc, #64]	@ (8018cc4 <RadioInit+0xa8>)
 8018c84:	2200      	movs	r2, #0
 8018c86:	f04f 31ff 	mov.w	r1, #4294967295
 8018c8a:	480f      	ldr	r0, [pc, #60]	@ (8018cc8 <RadioInit+0xac>)
 8018c8c:	f003 fd7e 	bl	801c78c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018c90:	2300      	movs	r3, #0
 8018c92:	9300      	str	r3, [sp, #0]
 8018c94:	4b0d      	ldr	r3, [pc, #52]	@ (8018ccc <RadioInit+0xb0>)
 8018c96:	2200      	movs	r2, #0
 8018c98:	f04f 31ff 	mov.w	r1, #4294967295
 8018c9c:	480c      	ldr	r0, [pc, #48]	@ (8018cd0 <RadioInit+0xb4>)
 8018c9e:	f003 fd75 	bl	801c78c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018ca2:	4809      	ldr	r0, [pc, #36]	@ (8018cc8 <RadioInit+0xac>)
 8018ca4:	f003 fe16 	bl	801c8d4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018ca8:	4809      	ldr	r0, [pc, #36]	@ (8018cd0 <RadioInit+0xb4>)
 8018caa:	f003 fe13 	bl	801c8d4 <UTIL_TIMER_Stop>
}
 8018cae:	bf00      	nop
 8018cb0:	3708      	adds	r7, #8
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	bd80      	pop	{r7, pc}
 8018cb6:	bf00      	nop
 8018cb8:	20001e2c 	.word	0x20001e2c
 8018cbc:	20001e30 	.word	0x20001e30
 8018cc0:	08019da5 	.word	0x08019da5
 8018cc4:	08019d2d 	.word	0x08019d2d
 8018cc8:	20001e8c 	.word	0x20001e8c
 8018ccc:	08019d41 	.word	0x08019d41
 8018cd0:	20001ea4 	.word	0x20001ea4

08018cd4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018cd8:	f001 ffc4 	bl	801ac64 <SUBGRF_GetOperatingMode>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	2b07      	cmp	r3, #7
 8018ce0:	d00a      	beq.n	8018cf8 <RadioGetStatus+0x24>
 8018ce2:	2b07      	cmp	r3, #7
 8018ce4:	dc0a      	bgt.n	8018cfc <RadioGetStatus+0x28>
 8018ce6:	2b04      	cmp	r3, #4
 8018ce8:	d002      	beq.n	8018cf0 <RadioGetStatus+0x1c>
 8018cea:	2b05      	cmp	r3, #5
 8018cec:	d002      	beq.n	8018cf4 <RadioGetStatus+0x20>
 8018cee:	e005      	b.n	8018cfc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018cf0:	2302      	movs	r3, #2
 8018cf2:	e004      	b.n	8018cfe <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	e002      	b.n	8018cfe <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018cf8:	2303      	movs	r3, #3
 8018cfa:	e000      	b.n	8018cfe <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018cfc:	2300      	movs	r3, #0
    }
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	bd80      	pop	{r7, pc}
	...

08018d04 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d10:	79fb      	ldrb	r3, [r7, #7]
 8018d12:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018d14:	79fb      	ldrb	r3, [r7, #7]
 8018d16:	4618      	mov	r0, r3
 8018d18:	f003 f9b7 	bl	801c08a <RFW_SetRadioModem>
    switch( modem )
 8018d1c:	79fb      	ldrb	r3, [r7, #7]
 8018d1e:	2b05      	cmp	r3, #5
 8018d20:	d80e      	bhi.n	8018d40 <RadioSetModem+0x3c>
 8018d22:	a201      	add	r2, pc, #4	@ (adr r2, 8018d28 <RadioSetModem+0x24>)
 8018d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d28:	08018d4f 	.word	0x08018d4f
 8018d2c:	08018d5d 	.word	0x08018d5d
 8018d30:	08018d41 	.word	0x08018d41
 8018d34:	08018d83 	.word	0x08018d83
 8018d38:	08018d91 	.word	0x08018d91
 8018d3c:	08018d9f 	.word	0x08018d9f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018d40:	2003      	movs	r0, #3
 8018d42:	f002 fb57 	bl	801b3f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018d46:	4b1c      	ldr	r3, [pc, #112]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d48:	2200      	movs	r2, #0
 8018d4a:	735a      	strb	r2, [r3, #13]
        break;
 8018d4c:	e02f      	b.n	8018dae <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018d4e:	2000      	movs	r0, #0
 8018d50:	f002 fb50 	bl	801b3f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018d54:	4b18      	ldr	r3, [pc, #96]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d56:	2200      	movs	r2, #0
 8018d58:	735a      	strb	r2, [r3, #13]
        break;
 8018d5a:	e028      	b.n	8018dae <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018d5c:	2001      	movs	r0, #1
 8018d5e:	f002 fb49 	bl	801b3f4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018d62:	4b15      	ldr	r3, [pc, #84]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d64:	7b5a      	ldrb	r2, [r3, #13]
 8018d66:	4b14      	ldr	r3, [pc, #80]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d68:	7b1b      	ldrb	r3, [r3, #12]
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d01e      	beq.n	8018dac <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018d6e:	4b12      	ldr	r3, [pc, #72]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d70:	7b1a      	ldrb	r2, [r3, #12]
 8018d72:	4b11      	ldr	r3, [pc, #68]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d74:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018d76:	4b10      	ldr	r3, [pc, #64]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d78:	7b5b      	ldrb	r3, [r3, #13]
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f000 ffa0 	bl	8019cc0 <RadioSetPublicNetwork>
        }
        break;
 8018d80:	e014      	b.n	8018dac <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018d82:	2002      	movs	r0, #2
 8018d84:	f002 fb36 	bl	801b3f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018d88:	4b0b      	ldr	r3, [pc, #44]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	735a      	strb	r2, [r3, #13]
        break;
 8018d8e:	e00e      	b.n	8018dae <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018d90:	2002      	movs	r0, #2
 8018d92:	f002 fb2f 	bl	801b3f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018d96:	4b08      	ldr	r3, [pc, #32]	@ (8018db8 <RadioSetModem+0xb4>)
 8018d98:	2200      	movs	r2, #0
 8018d9a:	735a      	strb	r2, [r3, #13]
        break;
 8018d9c:	e007      	b.n	8018dae <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018d9e:	2000      	movs	r0, #0
 8018da0:	f002 fb28 	bl	801b3f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018da4:	4b04      	ldr	r3, [pc, #16]	@ (8018db8 <RadioSetModem+0xb4>)
 8018da6:	2200      	movs	r2, #0
 8018da8:	735a      	strb	r2, [r3, #13]
        break;
 8018daa:	e000      	b.n	8018dae <RadioSetModem+0xaa>
        break;
 8018dac:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8018dae:	bf00      	nop
 8018db0:	3708      	adds	r7, #8
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
 8018db6:	bf00      	nop
 8018db8:	20001e30 	.word	0x20001e30

08018dbc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b082      	sub	sp, #8
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018dc4:	6878      	ldr	r0, [r7, #4]
 8018dc6:	f002 facf 	bl	801b368 <SUBGRF_SetRfFrequency>
}
 8018dca:	bf00      	nop
 8018dcc:	3708      	adds	r7, #8
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	bd80      	pop	{r7, pc}

08018dd2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018dd2:	b580      	push	{r7, lr}
 8018dd4:	b090      	sub	sp, #64	@ 0x40
 8018dd6:	af0a      	add	r7, sp, #40	@ 0x28
 8018dd8:	60f8      	str	r0, [r7, #12]
 8018dda:	60b9      	str	r1, [r7, #8]
 8018ddc:	603b      	str	r3, [r7, #0]
 8018dde:	4613      	mov	r3, r2
 8018de0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018de2:	2301      	movs	r3, #1
 8018de4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018de6:	2300      	movs	r3, #0
 8018de8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8018dea:	2300      	movs	r3, #0
 8018dec:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8018dee:	f000 fdf2 	bl	80199d6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018df2:	2000      	movs	r0, #0
 8018df4:	f7ff ff86 	bl	8018d04 <RadioSetModem>

    RadioSetChannel( freq );
 8018df8:	68f8      	ldr	r0, [r7, #12]
 8018dfa:	f7ff ffdf 	bl	8018dbc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018dfe:	2301      	movs	r3, #1
 8018e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e02:	2300      	movs	r3, #0
 8018e04:	9308      	str	r3, [sp, #32]
 8018e06:	2300      	movs	r3, #0
 8018e08:	9307      	str	r3, [sp, #28]
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	9306      	str	r3, [sp, #24]
 8018e0e:	2300      	movs	r3, #0
 8018e10:	9305      	str	r3, [sp, #20]
 8018e12:	2300      	movs	r3, #0
 8018e14:	9304      	str	r3, [sp, #16]
 8018e16:	2300      	movs	r3, #0
 8018e18:	9303      	str	r3, [sp, #12]
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	9302      	str	r3, [sp, #8]
 8018e1e:	2303      	movs	r3, #3
 8018e20:	9301      	str	r3, [sp, #4]
 8018e22:	68bb      	ldr	r3, [r7, #8]
 8018e24:	9300      	str	r3, [sp, #0]
 8018e26:	2300      	movs	r3, #0
 8018e28:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8018e2c:	68b9      	ldr	r1, [r7, #8]
 8018e2e:	2000      	movs	r0, #0
 8018e30:	f000 f83c 	bl	8018eac <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018e34:	2000      	movs	r0, #0
 8018e36:	f000 fdd5 	bl	80199e4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8018e3a:	f000 ff6f 	bl	8019d1c <RadioGetWakeupTime>
 8018e3e:	4603      	mov	r3, r0
 8018e40:	4618      	mov	r0, r3
 8018e42:	f7e9 fd7d 	bl	8002940 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018e46:	f003 fe5f 	bl	801cb08 <UTIL_TIMER_GetCurrentTime>
 8018e4a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018e4c:	e00d      	b.n	8018e6a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018e4e:	2000      	movs	r0, #0
 8018e50:	f000 feb6 	bl	8019bc0 <RadioRssi>
 8018e54:	4603      	mov	r3, r0
 8018e56:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018e58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018e60:	429a      	cmp	r2, r3
 8018e62:	dd02      	ble.n	8018e6a <RadioIsChannelFree+0x98>
        {
            status = false;
 8018e64:	2300      	movs	r3, #0
 8018e66:	75fb      	strb	r3, [r7, #23]
            break;
 8018e68:	e006      	b.n	8018e78 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018e6a:	6938      	ldr	r0, [r7, #16]
 8018e6c:	f003 fe5e 	bl	801cb2c <UTIL_TIMER_GetElapsedTime>
 8018e70:	4602      	mov	r2, r0
 8018e72:	683b      	ldr	r3, [r7, #0]
 8018e74:	4293      	cmp	r3, r2
 8018e76:	d8ea      	bhi.n	8018e4e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8018e78:	f000 fdad 	bl	80199d6 <RadioStandby>

    return status;
 8018e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018e7e:	4618      	mov	r0, r3
 8018e80:	3718      	adds	r7, #24
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}

08018e86 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8018e86:	b580      	push	{r7, lr}
 8018e88:	b082      	sub	sp, #8
 8018e8a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018e90:	2300      	movs	r3, #0
 8018e92:	2200      	movs	r2, #0
 8018e94:	2100      	movs	r1, #0
 8018e96:	2000      	movs	r0, #0
 8018e98:	f002 fa0a 	bl	801b2b0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018e9c:	f001 ffb3 	bl	801ae06 <SUBGRF_GetRandom>
 8018ea0:	6078      	str	r0, [r7, #4]

    return rnd;
 8018ea2:	687b      	ldr	r3, [r7, #4]
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3708      	adds	r7, #8
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}

08018eac <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b08a      	sub	sp, #40	@ 0x28
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	60b9      	str	r1, [r7, #8]
 8018eb4:	607a      	str	r2, [r7, #4]
 8018eb6:	461a      	mov	r2, r3
 8018eb8:	4603      	mov	r3, r0
 8018eba:	73fb      	strb	r3, [r7, #15]
 8018ebc:	4613      	mov	r3, r2
 8018ebe:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8018ec0:	4ab9      	ldr	r2, [pc, #740]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018ec2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018ec6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8018ec8:	f003 f89d 	bl	801c006 <RFW_DeInit>
    if( rxContinuous == true )
 8018ecc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d001      	beq.n	8018ed8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8018ed8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d004      	beq.n	8018eea <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018ee0:	4ab2      	ldr	r2, [pc, #712]	@ (80191ac <RadioSetRxConfig+0x300>)
 8018ee2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8018ee6:	7013      	strb	r3, [r2, #0]
 8018ee8:	e002      	b.n	8018ef0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8018eea:	4bb0      	ldr	r3, [pc, #704]	@ (80191ac <RadioSetRxConfig+0x300>)
 8018eec:	22ff      	movs	r2, #255	@ 0xff
 8018eee:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018ef0:	7bfb      	ldrb	r3, [r7, #15]
 8018ef2:	2b05      	cmp	r3, #5
 8018ef4:	d009      	beq.n	8018f0a <RadioSetRxConfig+0x5e>
 8018ef6:	2b05      	cmp	r3, #5
 8018ef8:	f300 81d7 	bgt.w	80192aa <RadioSetRxConfig+0x3fe>
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	f000 80bf 	beq.w	8019080 <RadioSetRxConfig+0x1d4>
 8018f02:	2b01      	cmp	r3, #1
 8018f04:	f000 8124 	beq.w	8019150 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018f08:	e1cf      	b.n	80192aa <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8018f0a:	2001      	movs	r0, #1
 8018f0c:	f002 f8c2 	bl	801b094 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018f10:	4ba5      	ldr	r3, [pc, #660]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f12:	2200      	movs	r2, #0
 8018f14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018f18:	4aa3      	ldr	r2, [pc, #652]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018f1e:	4ba2      	ldr	r3, [pc, #648]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f20:	2209      	movs	r2, #9
 8018f22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018f26:	4ba0      	ldr	r3, [pc, #640]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f28:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018f2c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018f2e:	68b8      	ldr	r0, [r7, #8]
 8018f30:	f002 ff9c 	bl	801be6c <SUBGRF_GetFskBandwidthRegValue>
 8018f34:	4603      	mov	r3, r0
 8018f36:	461a      	mov	r2, r3
 8018f38:	4b9b      	ldr	r3, [pc, #620]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018f3e:	4b9a      	ldr	r3, [pc, #616]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f40:	2200      	movs	r2, #0
 8018f42:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018f44:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018f46:	00db      	lsls	r3, r3, #3
 8018f48:	b29a      	uxth	r2, r3
 8018f4a:	4b97      	ldr	r3, [pc, #604]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f4c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018f4e:	4b96      	ldr	r3, [pc, #600]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f50:	2200      	movs	r2, #0
 8018f52:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018f54:	4b94      	ldr	r3, [pc, #592]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f56:	2210      	movs	r2, #16
 8018f58:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018f5a:	4b93      	ldr	r3, [pc, #588]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f5c:	2200      	movs	r2, #0
 8018f5e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018f60:	4b91      	ldr	r3, [pc, #580]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f62:	2200      	movs	r2, #0
 8018f64:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018f66:	4b91      	ldr	r3, [pc, #580]	@ (80191ac <RadioSetRxConfig+0x300>)
 8018f68:	781a      	ldrb	r2, [r3, #0]
 8018f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f6c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018f6e:	4b8e      	ldr	r3, [pc, #568]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f70:	2201      	movs	r2, #1
 8018f72:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018f74:	4b8c      	ldr	r3, [pc, #560]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8018f76:	2200      	movs	r2, #0
 8018f78:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8018f7a:	2005      	movs	r0, #5
 8018f7c:	f7ff fec2 	bl	8018d04 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f80:	488b      	ldr	r0, [pc, #556]	@ (80191b0 <RadioSetRxConfig+0x304>)
 8018f82:	f002 fb2b 	bl	801b5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f86:	488b      	ldr	r0, [pc, #556]	@ (80191b4 <RadioSetRxConfig+0x308>)
 8018f88:	f002 fbf6 	bl	801b778 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018f8c:	4a8a      	ldr	r2, [pc, #552]	@ (80191b8 <RadioSetRxConfig+0x30c>)
 8018f8e:	f107 031c 	add.w	r3, r7, #28
 8018f92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f96:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f9a:	f107 031c 	add.w	r3, r7, #28
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f001 feaf 	bl	801ad02 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018fa4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018fa8:	f001 fefa 	bl	801ada0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8018fac:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8018fb0:	f000 fe24 	bl	8019bfc <RadioRead>
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8018fba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018fbe:	f023 0310 	bic.w	r3, r3, #16
 8018fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8018fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018fca:	4619      	mov	r1, r3
 8018fcc:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8018fd0:	f000 fe02 	bl	8019bd8 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8018fd4:	2104      	movs	r1, #4
 8018fd6:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8018fda:	f000 fdfd 	bl	8019bd8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8018fde:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018fe2:	f000 fe0b 	bl	8019bfc <RadioRead>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018fec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018ff0:	f023 031c 	bic.w	r3, r3, #28
 8018ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8018ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018ffc:	f043 0308 	orr.w	r3, r3, #8
 8019000:	b2db      	uxtb	r3, r3
 8019002:	4619      	mov	r1, r3
 8019004:	f640 009b 	movw	r0, #2203	@ 0x89b
 8019008:	f000 fde6 	bl	8019bd8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801900c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8019010:	f000 fdf4 	bl	8019bfc <RadioRead>
 8019014:	4603      	mov	r3, r0
 8019016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801901a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801901e:	f023 0318 	bic.w	r3, r3, #24
 8019022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801902a:	f043 0318 	orr.w	r3, r3, #24
 801902e:	b2db      	uxtb	r3, r3
 8019030:	4619      	mov	r1, r3
 8019032:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8019036:	f000 fdcf 	bl	8019bd8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801903a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801903e:	f000 fddd 	bl	8019bfc <RadioRead>
 8019042:	4603      	mov	r3, r0
 8019044:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801904c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8019050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019058:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 801905c:	b2db      	uxtb	r3, r3
 801905e:	4619      	mov	r1, r3
 8019060:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019064:	f000 fdb8 	bl	8019bd8 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019068:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801906a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801906e:	fb02 f303 	mul.w	r3, r2, r3
 8019072:	461a      	mov	r2, r3
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	fbb2 f3f3 	udiv	r3, r2, r3
 801907a:	4a4b      	ldr	r2, [pc, #300]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 801907c:	6093      	str	r3, [r2, #8]
            break;
 801907e:	e115      	b.n	80192ac <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019080:	2000      	movs	r0, #0
 8019082:	f002 f807 	bl	801b094 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019086:	4b48      	ldr	r3, [pc, #288]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8019088:	2200      	movs	r2, #0
 801908a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801908e:	4a46      	ldr	r2, [pc, #280]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019094:	4b44      	ldr	r3, [pc, #272]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8019096:	220b      	movs	r2, #11
 8019098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801909c:	68b8      	ldr	r0, [r7, #8]
 801909e:	f002 fee5 	bl	801be6c <SUBGRF_GetFskBandwidthRegValue>
 80190a2:	4603      	mov	r3, r0
 80190a4:	461a      	mov	r2, r3
 80190a6:	4b40      	ldr	r3, [pc, #256]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80190ac:	4b3e      	ldr	r3, [pc, #248]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190ae:	2200      	movs	r2, #0
 80190b0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80190b2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80190b4:	00db      	lsls	r3, r3, #3
 80190b6:	b29a      	uxth	r2, r3
 80190b8:	4b3b      	ldr	r3, [pc, #236]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190ba:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80190bc:	4b3a      	ldr	r3, [pc, #232]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190be:	2204      	movs	r2, #4
 80190c0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80190c2:	4b39      	ldr	r3, [pc, #228]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190c4:	2218      	movs	r2, #24
 80190c6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80190c8:	4b37      	ldr	r3, [pc, #220]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190ca:	2200      	movs	r2, #0
 80190cc:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80190ce:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80190d2:	f083 0301 	eor.w	r3, r3, #1
 80190d6:	b2db      	uxtb	r3, r3
 80190d8:	461a      	mov	r2, r3
 80190da:	4b33      	ldr	r3, [pc, #204]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190dc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80190de:	4b33      	ldr	r3, [pc, #204]	@ (80191ac <RadioSetRxConfig+0x300>)
 80190e0:	781a      	ldrb	r2, [r3, #0]
 80190e2:	4b31      	ldr	r3, [pc, #196]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190e4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80190e6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d003      	beq.n	80190f6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80190ee:	4b2e      	ldr	r3, [pc, #184]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190f0:	22f2      	movs	r2, #242	@ 0xf2
 80190f2:	75da      	strb	r2, [r3, #23]
 80190f4:	e002      	b.n	80190fc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80190f6:	4b2c      	ldr	r3, [pc, #176]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190f8:	2201      	movs	r2, #1
 80190fa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80190fc:	4b2a      	ldr	r3, [pc, #168]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 80190fe:	2201      	movs	r2, #1
 8019100:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019102:	f000 fc68 	bl	80199d6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8019106:	2000      	movs	r0, #0
 8019108:	f7ff fdfc 	bl	8018d04 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801910c:	4828      	ldr	r0, [pc, #160]	@ (80191b0 <RadioSetRxConfig+0x304>)
 801910e:	f002 fa65 	bl	801b5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019112:	4828      	ldr	r0, [pc, #160]	@ (80191b4 <RadioSetRxConfig+0x308>)
 8019114:	f002 fb30 	bl	801b778 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019118:	4a28      	ldr	r2, [pc, #160]	@ (80191bc <RadioSetRxConfig+0x310>)
 801911a:	f107 0314 	add.w	r3, r7, #20
 801911e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019122:	e883 0003 	stmia.w	r3, {r0, r1}
 8019126:	f107 0314 	add.w	r3, r7, #20
 801912a:	4618      	mov	r0, r3
 801912c:	f001 fde9 	bl	801ad02 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019130:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8019134:	f001 fe34 	bl	801ada0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019138:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801913a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801913e:	fb02 f303 	mul.w	r3, r2, r3
 8019142:	461a      	mov	r2, r3
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	fbb2 f3f3 	udiv	r3, r2, r3
 801914a:	4a17      	ldr	r2, [pc, #92]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 801914c:	6093      	str	r3, [r2, #8]
            break;
 801914e:	e0ad      	b.n	80192ac <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019150:	2000      	movs	r0, #0
 8019152:	f001 ff9f 	bl	801b094 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019156:	4b14      	ldr	r3, [pc, #80]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8019158:	2201      	movs	r2, #1
 801915a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	b2da      	uxtb	r2, r3
 8019162:	4b11      	ldr	r3, [pc, #68]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8019164:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019168:	4a15      	ldr	r2, [pc, #84]	@ (80191c0 <RadioSetRxConfig+0x314>)
 801916a:	68bb      	ldr	r3, [r7, #8]
 801916c:	4413      	add	r3, r2
 801916e:	781a      	ldrb	r2, [r3, #0]
 8019170:	4b0d      	ldr	r3, [pc, #52]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8019172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019176:	4a0c      	ldr	r2, [pc, #48]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 8019178:	7bbb      	ldrb	r3, [r7, #14]
 801917a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801917e:	68bb      	ldr	r3, [r7, #8]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d105      	bne.n	8019190 <RadioSetRxConfig+0x2e4>
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	2b0b      	cmp	r3, #11
 8019188:	d008      	beq.n	801919c <RadioSetRxConfig+0x2f0>
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	2b0c      	cmp	r3, #12
 801918e:	d005      	beq.n	801919c <RadioSetRxConfig+0x2f0>
 8019190:	68bb      	ldr	r3, [r7, #8]
 8019192:	2b01      	cmp	r3, #1
 8019194:	d116      	bne.n	80191c4 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	2b0c      	cmp	r3, #12
 801919a:	d113      	bne.n	80191c4 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801919c:	4b02      	ldr	r3, [pc, #8]	@ (80191a8 <RadioSetRxConfig+0x2fc>)
 801919e:	2201      	movs	r2, #1
 80191a0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80191a4:	e012      	b.n	80191cc <RadioSetRxConfig+0x320>
 80191a6:	bf00      	nop
 80191a8:	20001e30 	.word	0x20001e30
 80191ac:	20000134 	.word	0x20000134
 80191b0:	20001e68 	.word	0x20001e68
 80191b4:	20001e3e 	.word	0x20001e3e
 80191b8:	08020768 	.word	0x08020768
 80191bc:	08020770 	.word	0x08020770
 80191c0:	08020d6c 	.word	0x08020d6c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80191c4:	4b3b      	ldr	r3, [pc, #236]	@ (80192b4 <RadioSetRxConfig+0x408>)
 80191c6:	2200      	movs	r2, #0
 80191c8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80191cc:	4b39      	ldr	r3, [pc, #228]	@ (80192b4 <RadioSetRxConfig+0x408>)
 80191ce:	2201      	movs	r2, #1
 80191d0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80191d2:	4b38      	ldr	r3, [pc, #224]	@ (80192b4 <RadioSetRxConfig+0x408>)
 80191d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80191d8:	2b05      	cmp	r3, #5
 80191da:	d004      	beq.n	80191e6 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80191dc:	4b35      	ldr	r3, [pc, #212]	@ (80192b4 <RadioSetRxConfig+0x408>)
 80191de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80191e2:	2b06      	cmp	r3, #6
 80191e4:	d10a      	bne.n	80191fc <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80191e6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80191e8:	2b0b      	cmp	r3, #11
 80191ea:	d803      	bhi.n	80191f4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80191ec:	4b31      	ldr	r3, [pc, #196]	@ (80192b4 <RadioSetRxConfig+0x408>)
 80191ee:	220c      	movs	r2, #12
 80191f0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80191f2:	e006      	b.n	8019202 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80191f4:	4a2f      	ldr	r2, [pc, #188]	@ (80192b4 <RadioSetRxConfig+0x408>)
 80191f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80191f8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80191fa:	e002      	b.n	8019202 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80191fc:	4a2d      	ldr	r2, [pc, #180]	@ (80192b4 <RadioSetRxConfig+0x408>)
 80191fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019200:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019202:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8019206:	4b2b      	ldr	r3, [pc, #172]	@ (80192b4 <RadioSetRxConfig+0x408>)
 8019208:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801920a:	4b2b      	ldr	r3, [pc, #172]	@ (80192b8 <RadioSetRxConfig+0x40c>)
 801920c:	781a      	ldrb	r2, [r3, #0]
 801920e:	4b29      	ldr	r3, [pc, #164]	@ (80192b4 <RadioSetRxConfig+0x408>)
 8019210:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019212:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8019216:	4b27      	ldr	r3, [pc, #156]	@ (80192b4 <RadioSetRxConfig+0x408>)
 8019218:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801921c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8019220:	4b24      	ldr	r3, [pc, #144]	@ (80192b4 <RadioSetRxConfig+0x408>)
 8019222:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8019226:	f000 fbd6 	bl	80199d6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801922a:	2001      	movs	r0, #1
 801922c:	f7ff fd6a 	bl	8018d04 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019230:	4822      	ldr	r0, [pc, #136]	@ (80192bc <RadioSetRxConfig+0x410>)
 8019232:	f002 f9d3 	bl	801b5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019236:	4822      	ldr	r0, [pc, #136]	@ (80192c0 <RadioSetRxConfig+0x414>)
 8019238:	f002 fa9e 	bl	801b778 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801923c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801923e:	b2db      	uxtb	r3, r3
 8019240:	4618      	mov	r0, r3
 8019242:	f001 ff36 	bl	801b0b2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8019246:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801924a:	f002 fbfd 	bl	801ba48 <SUBGRF_ReadRegister>
 801924e:	4603      	mov	r3, r0
 8019250:	f003 0301 	and.w	r3, r3, #1
 8019254:	b2db      	uxtb	r3, r3
 8019256:	4619      	mov	r1, r3
 8019258:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801925c:	f002 fbd2 	bl	801ba04 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019260:	4b14      	ldr	r3, [pc, #80]	@ (80192b4 <RadioSetRxConfig+0x408>)
 8019262:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8019266:	2b01      	cmp	r3, #1
 8019268:	d10d      	bne.n	8019286 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801926a:	f240 7036 	movw	r0, #1846	@ 0x736
 801926e:	f002 fbeb 	bl	801ba48 <SUBGRF_ReadRegister>
 8019272:	4603      	mov	r3, r0
 8019274:	f023 0304 	bic.w	r3, r3, #4
 8019278:	b2db      	uxtb	r3, r3
 801927a:	4619      	mov	r1, r3
 801927c:	f240 7036 	movw	r0, #1846	@ 0x736
 8019280:	f002 fbc0 	bl	801ba04 <SUBGRF_WriteRegister>
 8019284:	e00c      	b.n	80192a0 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019286:	f240 7036 	movw	r0, #1846	@ 0x736
 801928a:	f002 fbdd 	bl	801ba48 <SUBGRF_ReadRegister>
 801928e:	4603      	mov	r3, r0
 8019290:	f043 0304 	orr.w	r3, r3, #4
 8019294:	b2db      	uxtb	r3, r3
 8019296:	4619      	mov	r1, r3
 8019298:	f240 7036 	movw	r0, #1846	@ 0x736
 801929c:	f002 fbb2 	bl	801ba04 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80192a0:	4b04      	ldr	r3, [pc, #16]	@ (80192b4 <RadioSetRxConfig+0x408>)
 80192a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80192a6:	609a      	str	r2, [r3, #8]
            break;
 80192a8:	e000      	b.n	80192ac <RadioSetRxConfig+0x400>
            break;
 80192aa:	bf00      	nop
    }
}
 80192ac:	bf00      	nop
 80192ae:	3728      	adds	r7, #40	@ 0x28
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}
 80192b4:	20001e30 	.word	0x20001e30
 80192b8:	20000134 	.word	0x20000134
 80192bc:	20001e68 	.word	0x20001e68
 80192c0:	20001e3e 	.word	0x20001e3e

080192c4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b086      	sub	sp, #24
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	60ba      	str	r2, [r7, #8]
 80192cc:	607b      	str	r3, [r7, #4]
 80192ce:	4603      	mov	r3, r0
 80192d0:	73fb      	strb	r3, [r7, #15]
 80192d2:	460b      	mov	r3, r1
 80192d4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80192d6:	f002 fe96 	bl	801c006 <RFW_DeInit>
    switch( modem )
 80192da:	7bfb      	ldrb	r3, [r7, #15]
 80192dc:	2b04      	cmp	r3, #4
 80192de:	f000 80c7 	beq.w	8019470 <RadioSetTxConfig+0x1ac>
 80192e2:	2b04      	cmp	r3, #4
 80192e4:	f300 80d6 	bgt.w	8019494 <RadioSetTxConfig+0x1d0>
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d002      	beq.n	80192f2 <RadioSetTxConfig+0x2e>
 80192ec:	2b01      	cmp	r3, #1
 80192ee:	d059      	beq.n	80193a4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80192f0:	e0d0      	b.n	8019494 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80192f2:	4b77      	ldr	r3, [pc, #476]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80192f4:	2200      	movs	r2, #0
 80192f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80192fa:	4a75      	ldr	r2, [pc, #468]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80192fc:	6a3b      	ldr	r3, [r7, #32]
 80192fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019300:	4b73      	ldr	r3, [pc, #460]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019302:	220b      	movs	r2, #11
 8019304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019308:	6878      	ldr	r0, [r7, #4]
 801930a:	f002 fdaf 	bl	801be6c <SUBGRF_GetFskBandwidthRegValue>
 801930e:	4603      	mov	r3, r0
 8019310:	461a      	mov	r2, r3
 8019312:	4b6f      	ldr	r3, [pc, #444]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8019318:	4a6d      	ldr	r2, [pc, #436]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 801931a:	68bb      	ldr	r3, [r7, #8]
 801931c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801931e:	4b6c      	ldr	r3, [pc, #432]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019320:	2200      	movs	r2, #0
 8019322:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019324:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019326:	00db      	lsls	r3, r3, #3
 8019328:	b29a      	uxth	r2, r3
 801932a:	4b69      	ldr	r3, [pc, #420]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 801932c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801932e:	4b68      	ldr	r3, [pc, #416]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019330:	2204      	movs	r2, #4
 8019332:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019334:	4b66      	ldr	r3, [pc, #408]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019336:	2218      	movs	r2, #24
 8019338:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801933a:	4b65      	ldr	r3, [pc, #404]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 801933c:	2200      	movs	r2, #0
 801933e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019340:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019344:	f083 0301 	eor.w	r3, r3, #1
 8019348:	b2db      	uxtb	r3, r3
 801934a:	461a      	mov	r2, r3
 801934c:	4b60      	ldr	r3, [pc, #384]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 801934e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019350:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8019354:	2b00      	cmp	r3, #0
 8019356:	d003      	beq.n	8019360 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019358:	4b5d      	ldr	r3, [pc, #372]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 801935a:	22f2      	movs	r2, #242	@ 0xf2
 801935c:	75da      	strb	r2, [r3, #23]
 801935e:	e002      	b.n	8019366 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019360:	4b5b      	ldr	r3, [pc, #364]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019362:	2201      	movs	r2, #1
 8019364:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019366:	4b5a      	ldr	r3, [pc, #360]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019368:	2201      	movs	r2, #1
 801936a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801936c:	f000 fb33 	bl	80199d6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8019370:	2000      	movs	r0, #0
 8019372:	f7ff fcc7 	bl	8018d04 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019376:	4857      	ldr	r0, [pc, #348]	@ (80194d4 <RadioSetTxConfig+0x210>)
 8019378:	f002 f930 	bl	801b5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801937c:	4856      	ldr	r0, [pc, #344]	@ (80194d8 <RadioSetTxConfig+0x214>)
 801937e:	f002 f9fb 	bl	801b778 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019382:	4a56      	ldr	r2, [pc, #344]	@ (80194dc <RadioSetTxConfig+0x218>)
 8019384:	f107 0310 	add.w	r3, r7, #16
 8019388:	e892 0003 	ldmia.w	r2, {r0, r1}
 801938c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019390:	f107 0310 	add.w	r3, r7, #16
 8019394:	4618      	mov	r0, r3
 8019396:	f001 fcb4 	bl	801ad02 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801939a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801939e:	f001 fcff 	bl	801ada0 <SUBGRF_SetWhiteningSeed>
            break;
 80193a2:	e078      	b.n	8019496 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80193a4:	4b4a      	ldr	r3, [pc, #296]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80193a6:	2201      	movs	r2, #1
 80193a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80193ac:	6a3b      	ldr	r3, [r7, #32]
 80193ae:	b2da      	uxtb	r2, r3
 80193b0:	4b47      	ldr	r3, [pc, #284]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80193b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80193b6:	4a4a      	ldr	r2, [pc, #296]	@ (80194e0 <RadioSetTxConfig+0x21c>)
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	4413      	add	r3, r2
 80193bc:	781a      	ldrb	r2, [r3, #0]
 80193be:	4b44      	ldr	r3, [pc, #272]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80193c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80193c4:	4a42      	ldr	r2, [pc, #264]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80193c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80193ca:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d105      	bne.n	80193e0 <RadioSetTxConfig+0x11c>
 80193d4:	6a3b      	ldr	r3, [r7, #32]
 80193d6:	2b0b      	cmp	r3, #11
 80193d8:	d008      	beq.n	80193ec <RadioSetTxConfig+0x128>
 80193da:	6a3b      	ldr	r3, [r7, #32]
 80193dc:	2b0c      	cmp	r3, #12
 80193de:	d005      	beq.n	80193ec <RadioSetTxConfig+0x128>
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	2b01      	cmp	r3, #1
 80193e4:	d107      	bne.n	80193f6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80193e6:	6a3b      	ldr	r3, [r7, #32]
 80193e8:	2b0c      	cmp	r3, #12
 80193ea:	d104      	bne.n	80193f6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80193ec:	4b38      	ldr	r3, [pc, #224]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80193ee:	2201      	movs	r2, #1
 80193f0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80193f4:	e003      	b.n	80193fe <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80193f6:	4b36      	ldr	r3, [pc, #216]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80193f8:	2200      	movs	r2, #0
 80193fa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80193fe:	4b34      	ldr	r3, [pc, #208]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019400:	2201      	movs	r2, #1
 8019402:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019404:	4b32      	ldr	r3, [pc, #200]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019406:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801940a:	2b05      	cmp	r3, #5
 801940c:	d004      	beq.n	8019418 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801940e:	4b30      	ldr	r3, [pc, #192]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019410:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019414:	2b06      	cmp	r3, #6
 8019416:	d10a      	bne.n	801942e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8019418:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801941a:	2b0b      	cmp	r3, #11
 801941c:	d803      	bhi.n	8019426 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801941e:	4b2c      	ldr	r3, [pc, #176]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019420:	220c      	movs	r2, #12
 8019422:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019424:	e006      	b.n	8019434 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019426:	4a2a      	ldr	r2, [pc, #168]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019428:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801942a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801942c:	e002      	b.n	8019434 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801942e:	4a28      	ldr	r2, [pc, #160]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019430:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019432:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019434:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019438:	4b25      	ldr	r3, [pc, #148]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 801943a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801943c:	4b29      	ldr	r3, [pc, #164]	@ (80194e4 <RadioSetTxConfig+0x220>)
 801943e:	781a      	ldrb	r2, [r3, #0]
 8019440:	4b23      	ldr	r3, [pc, #140]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019442:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019444:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8019448:	4b21      	ldr	r3, [pc, #132]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 801944a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801944e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8019452:	4b1f      	ldr	r3, [pc, #124]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8019458:	f000 fabd 	bl	80199d6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801945c:	2001      	movs	r0, #1
 801945e:	f7ff fc51 	bl	8018d04 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019462:	481c      	ldr	r0, [pc, #112]	@ (80194d4 <RadioSetTxConfig+0x210>)
 8019464:	f002 f8ba 	bl	801b5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019468:	481b      	ldr	r0, [pc, #108]	@ (80194d8 <RadioSetTxConfig+0x214>)
 801946a:	f002 f985 	bl	801b778 <SUBGRF_SetPacketParams>
            break;
 801946e:	e012      	b.n	8019496 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8019470:	2004      	movs	r0, #4
 8019472:	f7ff fc47 	bl	8018d04 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019476:	4b16      	ldr	r3, [pc, #88]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019478:	2202      	movs	r2, #2
 801947a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801947e:	4a14      	ldr	r2, [pc, #80]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019480:	6a3b      	ldr	r3, [r7, #32]
 8019482:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019484:	4b12      	ldr	r3, [pc, #72]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 8019486:	2216      	movs	r2, #22
 8019488:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801948c:	4811      	ldr	r0, [pc, #68]	@ (80194d4 <RadioSetTxConfig+0x210>)
 801948e:	f002 f8a5 	bl	801b5dc <SUBGRF_SetModulationParams>
            break;
 8019492:	e000      	b.n	8019496 <RadioSetTxConfig+0x1d2>
            break;
 8019494:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801949a:	4618      	mov	r0, r3
 801949c:	f002 fbe8 	bl	801bc70 <SUBGRF_SetRfTxPower>
 80194a0:	4603      	mov	r3, r0
 80194a2:	461a      	mov	r2, r3
 80194a4:	4b0a      	ldr	r3, [pc, #40]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80194a6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80194aa:	210e      	movs	r1, #14
 80194ac:	f640 101f 	movw	r0, #2335	@ 0x91f
 80194b0:	f002 faa8 	bl	801ba04 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80194b4:	4b06      	ldr	r3, [pc, #24]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80194b6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80194ba:	4618      	mov	r0, r3
 80194bc:	f002 fdb7 	bl	801c02e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80194c0:	4a03      	ldr	r2, [pc, #12]	@ (80194d0 <RadioSetTxConfig+0x20c>)
 80194c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80194c4:	6053      	str	r3, [r2, #4]
}
 80194c6:	bf00      	nop
 80194c8:	3718      	adds	r7, #24
 80194ca:	46bd      	mov	sp, r7
 80194cc:	bd80      	pop	{r7, pc}
 80194ce:	bf00      	nop
 80194d0:	20001e30 	.word	0x20001e30
 80194d4:	20001e68 	.word	0x20001e68
 80194d8:	20001e3e 	.word	0x20001e3e
 80194dc:	08020770 	.word	0x08020770
 80194e0:	08020d6c 	.word	0x08020d6c
 80194e4:	20000134 	.word	0x20000134

080194e8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80194e8:	b480      	push	{r7}
 80194ea:	b083      	sub	sp, #12
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
    return true;
 80194f0:	2301      	movs	r3, #1
}
 80194f2:	4618      	mov	r0, r3
 80194f4:	370c      	adds	r7, #12
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bc80      	pop	{r7}
 80194fa:	4770      	bx	lr

080194fc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80194fc:	b480      	push	{r7}
 80194fe:	b085      	sub	sp, #20
 8019500:	af00      	add	r7, sp, #0
 8019502:	4603      	mov	r3, r0
 8019504:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8019506:	2300      	movs	r3, #0
 8019508:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801950a:	79fb      	ldrb	r3, [r7, #7]
 801950c:	2b0a      	cmp	r3, #10
 801950e:	d83e      	bhi.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
 8019510:	a201      	add	r2, pc, #4	@ (adr r2, 8019518 <RadioGetLoRaBandwidthInHz+0x1c>)
 8019512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019516:	bf00      	nop
 8019518:	08019545 	.word	0x08019545
 801951c:	08019555 	.word	0x08019555
 8019520:	08019565 	.word	0x08019565
 8019524:	08019575 	.word	0x08019575
 8019528:	0801957d 	.word	0x0801957d
 801952c:	08019583 	.word	0x08019583
 8019530:	08019589 	.word	0x08019589
 8019534:	0801958f 	.word	0x0801958f
 8019538:	0801954d 	.word	0x0801954d
 801953c:	0801955d 	.word	0x0801955d
 8019540:	0801956d 	.word	0x0801956d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019544:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8019548:	60fb      	str	r3, [r7, #12]
        break;
 801954a:	e020      	b.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801954c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8019550:	60fb      	str	r3, [r7, #12]
        break;
 8019552:	e01c      	b.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019554:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8019558:	60fb      	str	r3, [r7, #12]
        break;
 801955a:	e018      	b.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801955c:	f245 1361 	movw	r3, #20833	@ 0x5161
 8019560:	60fb      	str	r3, [r7, #12]
        break;
 8019562:	e014      	b.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019564:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8019568:	60fb      	str	r3, [r7, #12]
        break;
 801956a:	e010      	b.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801956c:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8019570:	60fb      	str	r3, [r7, #12]
        break;
 8019572:	e00c      	b.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019574:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8019578:	60fb      	str	r3, [r7, #12]
        break;
 801957a:	e008      	b.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801957c:	4b07      	ldr	r3, [pc, #28]	@ (801959c <RadioGetLoRaBandwidthInHz+0xa0>)
 801957e:	60fb      	str	r3, [r7, #12]
        break;
 8019580:	e005      	b.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8019582:	4b07      	ldr	r3, [pc, #28]	@ (80195a0 <RadioGetLoRaBandwidthInHz+0xa4>)
 8019584:	60fb      	str	r3, [r7, #12]
        break;
 8019586:	e002      	b.n	801958e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019588:	4b06      	ldr	r3, [pc, #24]	@ (80195a4 <RadioGetLoRaBandwidthInHz+0xa8>)
 801958a:	60fb      	str	r3, [r7, #12]
        break;
 801958c:	bf00      	nop
    }

    return bandwidthInHz;
 801958e:	68fb      	ldr	r3, [r7, #12]
}
 8019590:	4618      	mov	r0, r3
 8019592:	3714      	adds	r7, #20
 8019594:	46bd      	mov	sp, r7
 8019596:	bc80      	pop	{r7}
 8019598:	4770      	bx	lr
 801959a:	bf00      	nop
 801959c:	0001e848 	.word	0x0001e848
 80195a0:	0003d090 	.word	0x0003d090
 80195a4:	0007a120 	.word	0x0007a120

080195a8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80195a8:	b480      	push	{r7}
 80195aa:	b083      	sub	sp, #12
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
 80195b0:	4608      	mov	r0, r1
 80195b2:	4611      	mov	r1, r2
 80195b4:	461a      	mov	r2, r3
 80195b6:	4603      	mov	r3, r0
 80195b8:	70fb      	strb	r3, [r7, #3]
 80195ba:	460b      	mov	r3, r1
 80195bc:	803b      	strh	r3, [r7, #0]
 80195be:	4613      	mov	r3, r2
 80195c0:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80195c2:	883b      	ldrh	r3, [r7, #0]
 80195c4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80195c6:	78ba      	ldrb	r2, [r7, #2]
 80195c8:	f082 0201 	eor.w	r2, r2, #1
 80195cc:	b2d2      	uxtb	r2, r2
 80195ce:	2a00      	cmp	r2, #0
 80195d0:	d001      	beq.n	80195d6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80195d2:	2208      	movs	r2, #8
 80195d4:	e000      	b.n	80195d8 <RadioGetGfskTimeOnAirNumerator+0x30>
 80195d6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80195d8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80195da:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80195de:	7c3b      	ldrb	r3, [r7, #16]
 80195e0:	7d39      	ldrb	r1, [r7, #20]
 80195e2:	2900      	cmp	r1, #0
 80195e4:	d001      	beq.n	80195ea <RadioGetGfskTimeOnAirNumerator+0x42>
 80195e6:	2102      	movs	r1, #2
 80195e8:	e000      	b.n	80195ec <RadioGetGfskTimeOnAirNumerator+0x44>
 80195ea:	2100      	movs	r1, #0
 80195ec:	440b      	add	r3, r1
 80195ee:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80195f0:	4413      	add	r3, r2
}
 80195f2:	4618      	mov	r0, r3
 80195f4:	370c      	adds	r7, #12
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bc80      	pop	{r7}
 80195fa:	4770      	bx	lr

080195fc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80195fc:	b480      	push	{r7}
 80195fe:	b08b      	sub	sp, #44	@ 0x2c
 8019600:	af00      	add	r7, sp, #0
 8019602:	60f8      	str	r0, [r7, #12]
 8019604:	60b9      	str	r1, [r7, #8]
 8019606:	4611      	mov	r1, r2
 8019608:	461a      	mov	r2, r3
 801960a:	460b      	mov	r3, r1
 801960c:	71fb      	strb	r3, [r7, #7]
 801960e:	4613      	mov	r3, r2
 8019610:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019612:	79fb      	ldrb	r3, [r7, #7]
 8019614:	3304      	adds	r3, #4
 8019616:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019618:	2300      	movs	r3, #0
 801961a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801961e:	68bb      	ldr	r3, [r7, #8]
 8019620:	2b05      	cmp	r3, #5
 8019622:	d002      	beq.n	801962a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	2b06      	cmp	r3, #6
 8019628:	d104      	bne.n	8019634 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801962a:	88bb      	ldrh	r3, [r7, #4]
 801962c:	2b0b      	cmp	r3, #11
 801962e:	d801      	bhi.n	8019634 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019630:	230c      	movs	r3, #12
 8019632:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d105      	bne.n	8019646 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801963a:	68bb      	ldr	r3, [r7, #8]
 801963c:	2b0b      	cmp	r3, #11
 801963e:	d008      	beq.n	8019652 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019640:	68bb      	ldr	r3, [r7, #8]
 8019642:	2b0c      	cmp	r3, #12
 8019644:	d005      	beq.n	8019652 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	2b01      	cmp	r3, #1
 801964a:	d105      	bne.n	8019658 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801964c:	68bb      	ldr	r3, [r7, #8]
 801964e:	2b0c      	cmp	r3, #12
 8019650:	d102      	bne.n	8019658 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019652:	2301      	movs	r3, #1
 8019654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019658:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801965c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801965e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019662:	2a00      	cmp	r2, #0
 8019664:	d001      	beq.n	801966a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019666:	2210      	movs	r2, #16
 8019668:	e000      	b.n	801966c <RadioGetLoRaTimeOnAirNumerator+0x70>
 801966a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801966c:	4413      	add	r3, r2
 801966e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019674:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019676:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801967a:	2a00      	cmp	r2, #0
 801967c:	d001      	beq.n	8019682 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801967e:	2200      	movs	r2, #0
 8019680:	e000      	b.n	8019684 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019682:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019684:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019686:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019688:	68bb      	ldr	r3, [r7, #8]
 801968a:	2b06      	cmp	r3, #6
 801968c:	d803      	bhi.n	8019696 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801968e:	68bb      	ldr	r3, [r7, #8]
 8019690:	009b      	lsls	r3, r3, #2
 8019692:	623b      	str	r3, [r7, #32]
 8019694:	e00e      	b.n	80196b4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019696:	69fb      	ldr	r3, [r7, #28]
 8019698:	3308      	adds	r3, #8
 801969a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801969c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d004      	beq.n	80196ae <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80196a4:	68bb      	ldr	r3, [r7, #8]
 80196a6:	3b02      	subs	r3, #2
 80196a8:	009b      	lsls	r3, r3, #2
 80196aa:	623b      	str	r3, [r7, #32]
 80196ac:	e002      	b.n	80196b4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80196ae:	68bb      	ldr	r3, [r7, #8]
 80196b0:	009b      	lsls	r3, r3, #2
 80196b2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80196b4:	69fb      	ldr	r3, [r7, #28]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	da01      	bge.n	80196be <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80196ba:	2300      	movs	r3, #0
 80196bc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80196be:	69fa      	ldr	r2, [r7, #28]
 80196c0:	6a3b      	ldr	r3, [r7, #32]
 80196c2:	4413      	add	r3, r2
 80196c4:	1e5a      	subs	r2, r3, #1
 80196c6:	6a3b      	ldr	r3, [r7, #32]
 80196c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80196cc:	697a      	ldr	r2, [r7, #20]
 80196ce:	fb03 f202 	mul.w	r2, r3, r2
 80196d2:	88bb      	ldrh	r3, [r7, #4]
 80196d4:	4413      	add	r3, r2
    int32_t intermediate =
 80196d6:	330c      	adds	r3, #12
 80196d8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80196da:	68bb      	ldr	r3, [r7, #8]
 80196dc:	2b06      	cmp	r3, #6
 80196de:	d802      	bhi.n	80196e6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80196e0:	69bb      	ldr	r3, [r7, #24]
 80196e2:	3302      	adds	r3, #2
 80196e4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80196e6:	69bb      	ldr	r3, [r7, #24]
 80196e8:	009b      	lsls	r3, r3, #2
 80196ea:	1c5a      	adds	r2, r3, #1
 80196ec:	68bb      	ldr	r3, [r7, #8]
 80196ee:	3b02      	subs	r3, #2
 80196f0:	fa02 f303 	lsl.w	r3, r2, r3
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	372c      	adds	r7, #44	@ 0x2c
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bc80      	pop	{r7}
 80196fc:	4770      	bx	lr
	...

08019700 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b08a      	sub	sp, #40	@ 0x28
 8019704:	af04      	add	r7, sp, #16
 8019706:	60b9      	str	r1, [r7, #8]
 8019708:	607a      	str	r2, [r7, #4]
 801970a:	461a      	mov	r2, r3
 801970c:	4603      	mov	r3, r0
 801970e:	73fb      	strb	r3, [r7, #15]
 8019710:	4613      	mov	r3, r2
 8019712:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019714:	2300      	movs	r3, #0
 8019716:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019718:	2301      	movs	r3, #1
 801971a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801971c:	7bfb      	ldrb	r3, [r7, #15]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d002      	beq.n	8019728 <RadioTimeOnAir+0x28>
 8019722:	2b01      	cmp	r3, #1
 8019724:	d017      	beq.n	8019756 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019726:	e035      	b.n	8019794 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019728:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 801972c:	8c3a      	ldrh	r2, [r7, #32]
 801972e:	7bb9      	ldrb	r1, [r7, #14]
 8019730:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019734:	9301      	str	r3, [sp, #4]
 8019736:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801973a:	9300      	str	r3, [sp, #0]
 801973c:	4603      	mov	r3, r0
 801973e:	6878      	ldr	r0, [r7, #4]
 8019740:	f7ff ff32 	bl	80195a8 <RadioGetGfskTimeOnAirNumerator>
 8019744:	4603      	mov	r3, r0
 8019746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801974a:	fb02 f303 	mul.w	r3, r2, r3
 801974e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	613b      	str	r3, [r7, #16]
        break;
 8019754:	e01e      	b.n	8019794 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019756:	8c39      	ldrh	r1, [r7, #32]
 8019758:	7bba      	ldrb	r2, [r7, #14]
 801975a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801975e:	9302      	str	r3, [sp, #8]
 8019760:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019764:	9301      	str	r3, [sp, #4]
 8019766:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801976a:	9300      	str	r3, [sp, #0]
 801976c:	460b      	mov	r3, r1
 801976e:	6879      	ldr	r1, [r7, #4]
 8019770:	68b8      	ldr	r0, [r7, #8]
 8019772:	f7ff ff43 	bl	80195fc <RadioGetLoRaTimeOnAirNumerator>
 8019776:	4603      	mov	r3, r0
 8019778:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801977c:	fb02 f303 	mul.w	r3, r2, r3
 8019780:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019782:	4a0a      	ldr	r2, [pc, #40]	@ (80197ac <RadioTimeOnAir+0xac>)
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	4413      	add	r3, r2
 8019788:	781b      	ldrb	r3, [r3, #0]
 801978a:	4618      	mov	r0, r3
 801978c:	f7ff feb6 	bl	80194fc <RadioGetLoRaBandwidthInHz>
 8019790:	6138      	str	r0, [r7, #16]
        break;
 8019792:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019794:	697a      	ldr	r2, [r7, #20]
 8019796:	693b      	ldr	r3, [r7, #16]
 8019798:	4413      	add	r3, r2
 801979a:	1e5a      	subs	r2, r3, #1
 801979c:	693b      	ldr	r3, [r7, #16]
 801979e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80197a2:	4618      	mov	r0, r3
 80197a4:	3718      	adds	r7, #24
 80197a6:	46bd      	mov	sp, r7
 80197a8:	bd80      	pop	{r7, pc}
 80197aa:	bf00      	nop
 80197ac:	08020d6c 	.word	0x08020d6c

080197b0 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b084      	sub	sp, #16
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	460b      	mov	r3, r1
 80197ba:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80197bc:	2300      	movs	r3, #0
 80197be:	2200      	movs	r2, #0
 80197c0:	f240 2101 	movw	r1, #513	@ 0x201
 80197c4:	f240 2001 	movw	r0, #513	@ 0x201
 80197c8:	f001 fd72 	bl	801b2b0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80197cc:	4b73      	ldr	r3, [pc, #460]	@ (801999c <RadioSend+0x1ec>)
 80197ce:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80197d2:	2101      	movs	r1, #1
 80197d4:	4618      	mov	r0, r3
 80197d6:	f002 fa23 	bl	801bc20 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80197da:	4b70      	ldr	r3, [pc, #448]	@ (801999c <RadioSend+0x1ec>)
 80197dc:	781b      	ldrb	r3, [r3, #0]
 80197de:	2b01      	cmp	r3, #1
 80197e0:	d112      	bne.n	8019808 <RadioSend+0x58>
 80197e2:	4b6e      	ldr	r3, [pc, #440]	@ (801999c <RadioSend+0x1ec>)
 80197e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80197e8:	2b06      	cmp	r3, #6
 80197ea:	d10d      	bne.n	8019808 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80197ec:	f640 0089 	movw	r0, #2185	@ 0x889
 80197f0:	f002 f92a 	bl	801ba48 <SUBGRF_ReadRegister>
 80197f4:	4603      	mov	r3, r0
 80197f6:	f023 0304 	bic.w	r3, r3, #4
 80197fa:	b2db      	uxtb	r3, r3
 80197fc:	4619      	mov	r1, r3
 80197fe:	f640 0089 	movw	r0, #2185	@ 0x889
 8019802:	f002 f8ff 	bl	801ba04 <SUBGRF_WriteRegister>
 8019806:	e00c      	b.n	8019822 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019808:	f640 0089 	movw	r0, #2185	@ 0x889
 801980c:	f002 f91c 	bl	801ba48 <SUBGRF_ReadRegister>
 8019810:	4603      	mov	r3, r0
 8019812:	f043 0304 	orr.w	r3, r3, #4
 8019816:	b2db      	uxtb	r3, r3
 8019818:	4619      	mov	r1, r3
 801981a:	f640 0089 	movw	r0, #2185	@ 0x889
 801981e:	f002 f8f1 	bl	801ba04 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019822:	4b5e      	ldr	r3, [pc, #376]	@ (801999c <RadioSend+0x1ec>)
 8019824:	781b      	ldrb	r3, [r3, #0]
 8019826:	2b04      	cmp	r3, #4
 8019828:	f200 80a8 	bhi.w	801997c <RadioSend+0x1cc>
 801982c:	a201      	add	r2, pc, #4	@ (adr r2, 8019834 <RadioSend+0x84>)
 801982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019832:	bf00      	nop
 8019834:	08019863 	.word	0x08019863
 8019838:	08019849 	.word	0x08019849
 801983c:	08019863 	.word	0x08019863
 8019840:	080198c5 	.word	0x080198c5
 8019844:	080198e5 	.word	0x080198e5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019848:	4a54      	ldr	r2, [pc, #336]	@ (801999c <RadioSend+0x1ec>)
 801984a:	78fb      	ldrb	r3, [r7, #3]
 801984c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801984e:	4854      	ldr	r0, [pc, #336]	@ (80199a0 <RadioSend+0x1f0>)
 8019850:	f001 ff92 	bl	801b778 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019854:	78fb      	ldrb	r3, [r7, #3]
 8019856:	2200      	movs	r2, #0
 8019858:	4619      	mov	r1, r3
 801985a:	6878      	ldr	r0, [r7, #4]
 801985c:	f001 fa3e 	bl	801acdc <SUBGRF_SendPayload>
            break;
 8019860:	e08d      	b.n	801997e <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019862:	f002 fbd6 	bl	801c012 <RFW_Is_Init>
 8019866:	4603      	mov	r3, r0
 8019868:	2b01      	cmp	r3, #1
 801986a:	d11e      	bne.n	80198aa <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801986c:	f107 020d 	add.w	r2, r7, #13
 8019870:	78fb      	ldrb	r3, [r7, #3]
 8019872:	4619      	mov	r1, r3
 8019874:	6878      	ldr	r0, [r7, #4]
 8019876:	f002 fbe4 	bl	801c042 <RFW_TransmitInit>
 801987a:	4603      	mov	r3, r0
 801987c:	2b00      	cmp	r3, #0
 801987e:	d10c      	bne.n	801989a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019880:	7b7a      	ldrb	r2, [r7, #13]
 8019882:	4b46      	ldr	r3, [pc, #280]	@ (801999c <RadioSend+0x1ec>)
 8019884:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019886:	4846      	ldr	r0, [pc, #280]	@ (80199a0 <RadioSend+0x1f0>)
 8019888:	f001 ff76 	bl	801b778 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801988c:	7b7b      	ldrb	r3, [r7, #13]
 801988e:	2200      	movs	r2, #0
 8019890:	4619      	mov	r1, r3
 8019892:	6878      	ldr	r0, [r7, #4]
 8019894:	f001 fa22 	bl	801acdc <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019898:	e071      	b.n	801997e <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801989a:	4b42      	ldr	r3, [pc, #264]	@ (80199a4 <RadioSend+0x1f4>)
 801989c:	2201      	movs	r2, #1
 801989e:	2100      	movs	r1, #0
 80198a0:	2002      	movs	r0, #2
 80198a2:	f003 fa21 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80198a6:	2303      	movs	r3, #3
 80198a8:	e073      	b.n	8019992 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80198aa:	4a3c      	ldr	r2, [pc, #240]	@ (801999c <RadioSend+0x1ec>)
 80198ac:	78fb      	ldrb	r3, [r7, #3]
 80198ae:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80198b0:	483b      	ldr	r0, [pc, #236]	@ (80199a0 <RadioSend+0x1f0>)
 80198b2:	f001 ff61 	bl	801b778 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80198b6:	78fb      	ldrb	r3, [r7, #3]
 80198b8:	2200      	movs	r2, #0
 80198ba:	4619      	mov	r1, r3
 80198bc:	6878      	ldr	r0, [r7, #4]
 80198be:	f001 fa0d 	bl	801acdc <SUBGRF_SendPayload>
            break;
 80198c2:	e05c      	b.n	801997e <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80198c4:	4b35      	ldr	r3, [pc, #212]	@ (801999c <RadioSend+0x1ec>)
 80198c6:	2202      	movs	r2, #2
 80198c8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80198ca:	4a34      	ldr	r2, [pc, #208]	@ (801999c <RadioSend+0x1ec>)
 80198cc:	78fb      	ldrb	r3, [r7, #3]
 80198ce:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80198d0:	4833      	ldr	r0, [pc, #204]	@ (80199a0 <RadioSend+0x1f0>)
 80198d2:	f001 ff51 	bl	801b778 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80198d6:	78fb      	ldrb	r3, [r7, #3]
 80198d8:	2200      	movs	r2, #0
 80198da:	4619      	mov	r1, r3
 80198dc:	6878      	ldr	r0, [r7, #4]
 80198de:	f001 f9fd 	bl	801acdc <SUBGRF_SendPayload>
            break;
 80198e2:	e04c      	b.n	801997e <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80198e4:	78fb      	ldrb	r3, [r7, #3]
 80198e6:	461a      	mov	r2, r3
 80198e8:	6879      	ldr	r1, [r7, #4]
 80198ea:	482f      	ldr	r0, [pc, #188]	@ (80199a8 <RadioSend+0x1f8>)
 80198ec:	f000 fcca 	bl	801a284 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80198f0:	4b2a      	ldr	r3, [pc, #168]	@ (801999c <RadioSend+0x1ec>)
 80198f2:	2202      	movs	r2, #2
 80198f4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80198f6:	78fb      	ldrb	r3, [r7, #3]
 80198f8:	3301      	adds	r3, #1
 80198fa:	b2da      	uxtb	r2, r3
 80198fc:	4b27      	ldr	r3, [pc, #156]	@ (801999c <RadioSend+0x1ec>)
 80198fe:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019900:	4827      	ldr	r0, [pc, #156]	@ (80199a0 <RadioSend+0x1f0>)
 8019902:	f001 ff39 	bl	801b778 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019906:	2100      	movs	r1, #0
 8019908:	20f1      	movs	r0, #241	@ 0xf1
 801990a:	f000 f965 	bl	8019bd8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801990e:	2100      	movs	r1, #0
 8019910:	20f0      	movs	r0, #240	@ 0xf0
 8019912:	f000 f961 	bl	8019bd8 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019916:	4b21      	ldr	r3, [pc, #132]	@ (801999c <RadioSend+0x1ec>)
 8019918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801991a:	2b64      	cmp	r3, #100	@ 0x64
 801991c:	d108      	bne.n	8019930 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801991e:	2170      	movs	r1, #112	@ 0x70
 8019920:	20f3      	movs	r0, #243	@ 0xf3
 8019922:	f000 f959 	bl	8019bd8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019926:	211d      	movs	r1, #29
 8019928:	20f2      	movs	r0, #242	@ 0xf2
 801992a:	f000 f955 	bl	8019bd8 <RadioWrite>
 801992e:	e007      	b.n	8019940 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019930:	21e1      	movs	r1, #225	@ 0xe1
 8019932:	20f3      	movs	r0, #243	@ 0xf3
 8019934:	f000 f950 	bl	8019bd8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019938:	2104      	movs	r1, #4
 801993a:	20f2      	movs	r0, #242	@ 0xf2
 801993c:	f000 f94c 	bl	8019bd8 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019940:	78fb      	ldrb	r3, [r7, #3]
 8019942:	b29b      	uxth	r3, r3
 8019944:	00db      	lsls	r3, r3, #3
 8019946:	b29b      	uxth	r3, r3
 8019948:	3302      	adds	r3, #2
 801994a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801994c:	89fb      	ldrh	r3, [r7, #14]
 801994e:	0a1b      	lsrs	r3, r3, #8
 8019950:	b29b      	uxth	r3, r3
 8019952:	b2db      	uxtb	r3, r3
 8019954:	4619      	mov	r1, r3
 8019956:	20f4      	movs	r0, #244	@ 0xf4
 8019958:	f000 f93e 	bl	8019bd8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801995c:	89fb      	ldrh	r3, [r7, #14]
 801995e:	b2db      	uxtb	r3, r3
 8019960:	4619      	mov	r1, r3
 8019962:	20f5      	movs	r0, #245	@ 0xf5
 8019964:	f000 f938 	bl	8019bd8 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8019968:	78fb      	ldrb	r3, [r7, #3]
 801996a:	3301      	adds	r3, #1
 801996c:	b2db      	uxtb	r3, r3
 801996e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8019972:	4619      	mov	r1, r3
 8019974:	480c      	ldr	r0, [pc, #48]	@ (80199a8 <RadioSend+0x1f8>)
 8019976:	f001 f9b1 	bl	801acdc <SUBGRF_SendPayload>
            break;
 801997a:	e000      	b.n	801997e <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801997c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801997e:	4b07      	ldr	r3, [pc, #28]	@ (801999c <RadioSend+0x1ec>)
 8019980:	685b      	ldr	r3, [r3, #4]
 8019982:	4619      	mov	r1, r3
 8019984:	4809      	ldr	r0, [pc, #36]	@ (80199ac <RadioSend+0x1fc>)
 8019986:	f003 f815 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801998a:	4808      	ldr	r0, [pc, #32]	@ (80199ac <RadioSend+0x1fc>)
 801998c:	f002 ff34 	bl	801c7f8 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019990:	2300      	movs	r3, #0
}
 8019992:	4618      	mov	r0, r3
 8019994:	3710      	adds	r7, #16
 8019996:	46bd      	mov	sp, r7
 8019998:	bd80      	pop	{r7, pc}
 801999a:	bf00      	nop
 801999c:	20001e30 	.word	0x20001e30
 80199a0:	20001e3e 	.word	0x20001e3e
 80199a4:	08020778 	.word	0x08020778
 80199a8:	20001d2c 	.word	0x20001d2c
 80199ac:	20001e8c 	.word	0x20001e8c

080199b0 <RadioSleep>:

static void RadioSleep( void )
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80199b6:	2300      	movs	r3, #0
 80199b8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80199ba:	793b      	ldrb	r3, [r7, #4]
 80199bc:	f043 0304 	orr.w	r3, r3, #4
 80199c0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80199c2:	7938      	ldrb	r0, [r7, #4]
 80199c4:	f001 fa66 	bl	801ae94 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80199c8:	2002      	movs	r0, #2
 80199ca:	f7e8 ffb9 	bl	8002940 <HAL_Delay>
}
 80199ce:	bf00      	nop
 80199d0:	3708      	adds	r7, #8
 80199d2:	46bd      	mov	sp, r7
 80199d4:	bd80      	pop	{r7, pc}

080199d6 <RadioStandby>:

static void RadioStandby( void )
{
 80199d6:	b580      	push	{r7, lr}
 80199d8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80199da:	2000      	movs	r0, #0
 80199dc:	f001 fa8e 	bl	801aefc <SUBGRF_SetStandby>
}
 80199e0:	bf00      	nop
 80199e2:	bd80      	pop	{r7, pc}

080199e4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b082      	sub	sp, #8
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80199ec:	f002 fb11 	bl	801c012 <RFW_Is_Init>
 80199f0:	4603      	mov	r3, r0
 80199f2:	2b01      	cmp	r3, #1
 80199f4:	d102      	bne.n	80199fc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80199f6:	f002 fb34 	bl	801c062 <RFW_ReceiveInit>
 80199fa:	e007      	b.n	8019a0c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80199fc:	2300      	movs	r3, #0
 80199fe:	2200      	movs	r2, #0
 8019a00:	f240 2162 	movw	r1, #610	@ 0x262
 8019a04:	f240 2062 	movw	r0, #610	@ 0x262
 8019a08:	f001 fc52 	bl	801b2b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d006      	beq.n	8019a20 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019a12:	6879      	ldr	r1, [r7, #4]
 8019a14:	4811      	ldr	r0, [pc, #68]	@ (8019a5c <RadioRx+0x78>)
 8019a16:	f002 ffcd 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019a1a:	4810      	ldr	r0, [pc, #64]	@ (8019a5c <RadioRx+0x78>)
 8019a1c:	f002 feec 	bl	801c7f8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019a20:	4b0f      	ldr	r3, [pc, #60]	@ (8019a60 <RadioRx+0x7c>)
 8019a22:	2200      	movs	r2, #0
 8019a24:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019a26:	4b0e      	ldr	r3, [pc, #56]	@ (8019a60 <RadioRx+0x7c>)
 8019a28:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019a2c:	2100      	movs	r1, #0
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f002 f8f6 	bl	801bc20 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019a34:	4b0a      	ldr	r3, [pc, #40]	@ (8019a60 <RadioRx+0x7c>)
 8019a36:	785b      	ldrb	r3, [r3, #1]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d004      	beq.n	8019a46 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019a3c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019a40:	f001 fa98 	bl	801af74 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019a44:	e005      	b.n	8019a52 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019a46:	4b06      	ldr	r3, [pc, #24]	@ (8019a60 <RadioRx+0x7c>)
 8019a48:	689b      	ldr	r3, [r3, #8]
 8019a4a:	019b      	lsls	r3, r3, #6
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f001 fa91 	bl	801af74 <SUBGRF_SetRx>
}
 8019a52:	bf00      	nop
 8019a54:	3708      	adds	r7, #8
 8019a56:	46bd      	mov	sp, r7
 8019a58:	bd80      	pop	{r7, pc}
 8019a5a:	bf00      	nop
 8019a5c:	20001ea4 	.word	0x20001ea4
 8019a60:	20001e30 	.word	0x20001e30

08019a64 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019a64:	b580      	push	{r7, lr}
 8019a66:	b082      	sub	sp, #8
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019a6c:	f002 fad1 	bl	801c012 <RFW_Is_Init>
 8019a70:	4603      	mov	r3, r0
 8019a72:	2b01      	cmp	r3, #1
 8019a74:	d102      	bne.n	8019a7c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019a76:	f002 faf4 	bl	801c062 <RFW_ReceiveInit>
 8019a7a:	e007      	b.n	8019a8c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	2200      	movs	r2, #0
 8019a80:	f240 2162 	movw	r1, #610	@ 0x262
 8019a84:	f240 2062 	movw	r0, #610	@ 0x262
 8019a88:	f001 fc12 	bl	801b2b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d006      	beq.n	8019aa0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019a92:	6879      	ldr	r1, [r7, #4]
 8019a94:	4811      	ldr	r0, [pc, #68]	@ (8019adc <RadioRxBoosted+0x78>)
 8019a96:	f002 ff8d 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019a9a:	4810      	ldr	r0, [pc, #64]	@ (8019adc <RadioRxBoosted+0x78>)
 8019a9c:	f002 feac 	bl	801c7f8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8019ae0 <RadioRxBoosted+0x7c>)
 8019aa2:	2200      	movs	r2, #0
 8019aa4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8019ae0 <RadioRxBoosted+0x7c>)
 8019aa8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019aac:	2100      	movs	r1, #0
 8019aae:	4618      	mov	r0, r3
 8019ab0:	f002 f8b6 	bl	801bc20 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8019ae0 <RadioRxBoosted+0x7c>)
 8019ab6:	785b      	ldrb	r3, [r3, #1]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d004      	beq.n	8019ac6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019abc:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019ac0:	f001 fa78 	bl	801afb4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019ac4:	e005      	b.n	8019ad2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019ac6:	4b06      	ldr	r3, [pc, #24]	@ (8019ae0 <RadioRxBoosted+0x7c>)
 8019ac8:	689b      	ldr	r3, [r3, #8]
 8019aca:	019b      	lsls	r3, r3, #6
 8019acc:	4618      	mov	r0, r3
 8019ace:	f001 fa71 	bl	801afb4 <SUBGRF_SetRxBoosted>
}
 8019ad2:	bf00      	nop
 8019ad4:	3708      	adds	r7, #8
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	bd80      	pop	{r7, pc}
 8019ada:	bf00      	nop
 8019adc:	20001ea4 	.word	0x20001ea4
 8019ae0:	20001e30 	.word	0x20001e30

08019ae4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b082      	sub	sp, #8
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	6078      	str	r0, [r7, #4]
 8019aec:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	005a      	lsls	r2, r3, #1
 8019af2:	683b      	ldr	r3, [r7, #0]
 8019af4:	4413      	add	r3, r2
 8019af6:	4a0c      	ldr	r2, [pc, #48]	@ (8019b28 <RadioSetRxDutyCycle+0x44>)
 8019af8:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019afa:	2300      	movs	r3, #0
 8019afc:	2200      	movs	r2, #0
 8019afe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019b02:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019b06:	f001 fbd3 	bl	801b2b0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019b0a:	4b07      	ldr	r3, [pc, #28]	@ (8019b28 <RadioSetRxDutyCycle+0x44>)
 8019b0c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019b10:	2100      	movs	r1, #0
 8019b12:	4618      	mov	r0, r3
 8019b14:	f002 f884 	bl	801bc20 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019b18:	6839      	ldr	r1, [r7, #0]
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f001 fa6e 	bl	801affc <SUBGRF_SetRxDutyCycle>
}
 8019b20:	bf00      	nop
 8019b22:	3708      	adds	r7, #8
 8019b24:	46bd      	mov	sp, r7
 8019b26:	bd80      	pop	{r7, pc}
 8019b28:	20001e30 	.word	0x20001e30

08019b2c <RadioStartCad>:

static void RadioStartCad( void )
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019b30:	4b09      	ldr	r3, [pc, #36]	@ (8019b58 <RadioStartCad+0x2c>)
 8019b32:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019b36:	2100      	movs	r1, #0
 8019b38:	4618      	mov	r0, r3
 8019b3a:	f002 f871 	bl	801bc20 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019b3e:	2300      	movs	r3, #0
 8019b40:	2200      	movs	r2, #0
 8019b42:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8019b46:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8019b4a:	f001 fbb1 	bl	801b2b0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019b4e:	f001 fa81 	bl	801b054 <SUBGRF_SetCad>
}
 8019b52:	bf00      	nop
 8019b54:	bd80      	pop	{r7, pc}
 8019b56:	bf00      	nop
 8019b58:	20001e30 	.word	0x20001e30

08019b5c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b084      	sub	sp, #16
 8019b60:	af00      	add	r7, sp, #0
 8019b62:	6078      	str	r0, [r7, #4]
 8019b64:	460b      	mov	r3, r1
 8019b66:	70fb      	strb	r3, [r7, #3]
 8019b68:	4613      	mov	r3, r2
 8019b6a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019b6c:	883b      	ldrh	r3, [r7, #0]
 8019b6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019b72:	fb02 f303 	mul.w	r3, r2, r3
 8019b76:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019b78:	6878      	ldr	r0, [r7, #4]
 8019b7a:	f001 fbf5 	bl	801b368 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019b82:	4618      	mov	r0, r3
 8019b84:	f002 f874 	bl	801bc70 <SUBGRF_SetRfTxPower>
 8019b88:	4603      	mov	r3, r0
 8019b8a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019b8c:	210e      	movs	r1, #14
 8019b8e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019b92:	f001 ff37 	bl	801ba04 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019b96:	7afb      	ldrb	r3, [r7, #11]
 8019b98:	2101      	movs	r1, #1
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	f002 f840 	bl	801bc20 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019ba0:	f001 fa66 	bl	801b070 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019ba4:	68f9      	ldr	r1, [r7, #12]
 8019ba6:	4805      	ldr	r0, [pc, #20]	@ (8019bbc <RadioSetTxContinuousWave+0x60>)
 8019ba8:	f002 ff04 	bl	801c9b4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019bac:	4803      	ldr	r0, [pc, #12]	@ (8019bbc <RadioSetTxContinuousWave+0x60>)
 8019bae:	f002 fe23 	bl	801c7f8 <UTIL_TIMER_Start>
}
 8019bb2:	bf00      	nop
 8019bb4:	3710      	adds	r7, #16
 8019bb6:	46bd      	mov	sp, r7
 8019bb8:	bd80      	pop	{r7, pc}
 8019bba:	bf00      	nop
 8019bbc:	20001e8c 	.word	0x20001e8c

08019bc0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019bc0:	b580      	push	{r7, lr}
 8019bc2:	b082      	sub	sp, #8
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	4603      	mov	r3, r0
 8019bc8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019bca:	f001 fe88 	bl	801b8de <SUBGRF_GetRssiInst>
 8019bce:	4603      	mov	r3, r0
}
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	3708      	adds	r7, #8
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	bd80      	pop	{r7, pc}

08019bd8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	4603      	mov	r3, r0
 8019be0:	460a      	mov	r2, r1
 8019be2:	80fb      	strh	r3, [r7, #6]
 8019be4:	4613      	mov	r3, r2
 8019be6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019be8:	797a      	ldrb	r2, [r7, #5]
 8019bea:	88fb      	ldrh	r3, [r7, #6]
 8019bec:	4611      	mov	r1, r2
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f001 ff08 	bl	801ba04 <SUBGRF_WriteRegister>
}
 8019bf4:	bf00      	nop
 8019bf6:	3708      	adds	r7, #8
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}

08019bfc <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b082      	sub	sp, #8
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	4603      	mov	r3, r0
 8019c04:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8019c06:	88fb      	ldrh	r3, [r7, #6]
 8019c08:	4618      	mov	r0, r3
 8019c0a:	f001 ff1d 	bl	801ba48 <SUBGRF_ReadRegister>
 8019c0e:	4603      	mov	r3, r0
}
 8019c10:	4618      	mov	r0, r3
 8019c12:	3708      	adds	r7, #8
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bd80      	pop	{r7, pc}

08019c18 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b082      	sub	sp, #8
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	4603      	mov	r3, r0
 8019c20:	6039      	str	r1, [r7, #0]
 8019c22:	80fb      	strh	r3, [r7, #6]
 8019c24:	4613      	mov	r3, r2
 8019c26:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019c28:	797b      	ldrb	r3, [r7, #5]
 8019c2a:	b29a      	uxth	r2, r3
 8019c2c:	88fb      	ldrh	r3, [r7, #6]
 8019c2e:	6839      	ldr	r1, [r7, #0]
 8019c30:	4618      	mov	r0, r3
 8019c32:	f001 ff29 	bl	801ba88 <SUBGRF_WriteRegisters>
}
 8019c36:	bf00      	nop
 8019c38:	3708      	adds	r7, #8
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}

08019c3e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019c3e:	b580      	push	{r7, lr}
 8019c40:	b082      	sub	sp, #8
 8019c42:	af00      	add	r7, sp, #0
 8019c44:	4603      	mov	r3, r0
 8019c46:	6039      	str	r1, [r7, #0]
 8019c48:	80fb      	strh	r3, [r7, #6]
 8019c4a:	4613      	mov	r3, r2
 8019c4c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019c4e:	797b      	ldrb	r3, [r7, #5]
 8019c50:	b29a      	uxth	r2, r3
 8019c52:	88fb      	ldrh	r3, [r7, #6]
 8019c54:	6839      	ldr	r1, [r7, #0]
 8019c56:	4618      	mov	r0, r3
 8019c58:	f001 ff38 	bl	801bacc <SUBGRF_ReadRegisters>
}
 8019c5c:	bf00      	nop
 8019c5e:	3708      	adds	r7, #8
 8019c60:	46bd      	mov	sp, r7
 8019c62:	bd80      	pop	{r7, pc}

08019c64 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b082      	sub	sp, #8
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	4603      	mov	r3, r0
 8019c6c:	460a      	mov	r2, r1
 8019c6e:	71fb      	strb	r3, [r7, #7]
 8019c70:	4613      	mov	r3, r2
 8019c72:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019c74:	79fb      	ldrb	r3, [r7, #7]
 8019c76:	2b01      	cmp	r3, #1
 8019c78:	d10a      	bne.n	8019c90 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8019cb4 <RadioSetMaxPayloadLength+0x50>)
 8019c7c:	79bb      	ldrb	r3, [r7, #6]
 8019c7e:	7013      	strb	r3, [r2, #0]
 8019c80:	4b0c      	ldr	r3, [pc, #48]	@ (8019cb4 <RadioSetMaxPayloadLength+0x50>)
 8019c82:	781a      	ldrb	r2, [r3, #0]
 8019c84:	4b0c      	ldr	r3, [pc, #48]	@ (8019cb8 <RadioSetMaxPayloadLength+0x54>)
 8019c86:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c88:	480c      	ldr	r0, [pc, #48]	@ (8019cbc <RadioSetMaxPayloadLength+0x58>)
 8019c8a:	f001 fd75 	bl	801b778 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019c8e:	e00d      	b.n	8019cac <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019c90:	4b09      	ldr	r3, [pc, #36]	@ (8019cb8 <RadioSetMaxPayloadLength+0x54>)
 8019c92:	7d5b      	ldrb	r3, [r3, #21]
 8019c94:	2b01      	cmp	r3, #1
 8019c96:	d109      	bne.n	8019cac <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019c98:	4a06      	ldr	r2, [pc, #24]	@ (8019cb4 <RadioSetMaxPayloadLength+0x50>)
 8019c9a:	79bb      	ldrb	r3, [r7, #6]
 8019c9c:	7013      	strb	r3, [r2, #0]
 8019c9e:	4b05      	ldr	r3, [pc, #20]	@ (8019cb4 <RadioSetMaxPayloadLength+0x50>)
 8019ca0:	781a      	ldrb	r2, [r3, #0]
 8019ca2:	4b05      	ldr	r3, [pc, #20]	@ (8019cb8 <RadioSetMaxPayloadLength+0x54>)
 8019ca4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019ca6:	4805      	ldr	r0, [pc, #20]	@ (8019cbc <RadioSetMaxPayloadLength+0x58>)
 8019ca8:	f001 fd66 	bl	801b778 <SUBGRF_SetPacketParams>
}
 8019cac:	bf00      	nop
 8019cae:	3708      	adds	r7, #8
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	bd80      	pop	{r7, pc}
 8019cb4:	20000134 	.word	0x20000134
 8019cb8:	20001e30 	.word	0x20001e30
 8019cbc:	20001e3e 	.word	0x20001e3e

08019cc0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b082      	sub	sp, #8
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019cca:	4a13      	ldr	r2, [pc, #76]	@ (8019d18 <RadioSetPublicNetwork+0x58>)
 8019ccc:	79fb      	ldrb	r3, [r7, #7]
 8019cce:	7313      	strb	r3, [r2, #12]
 8019cd0:	4b11      	ldr	r3, [pc, #68]	@ (8019d18 <RadioSetPublicNetwork+0x58>)
 8019cd2:	7b1a      	ldrb	r2, [r3, #12]
 8019cd4:	4b10      	ldr	r3, [pc, #64]	@ (8019d18 <RadioSetPublicNetwork+0x58>)
 8019cd6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019cd8:	2001      	movs	r0, #1
 8019cda:	f7ff f813 	bl	8018d04 <RadioSetModem>
    if( enable == true )
 8019cde:	79fb      	ldrb	r3, [r7, #7]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d00a      	beq.n	8019cfa <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019ce4:	2134      	movs	r1, #52	@ 0x34
 8019ce6:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019cea:	f001 fe8b 	bl	801ba04 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019cee:	2144      	movs	r1, #68	@ 0x44
 8019cf0:	f240 7041 	movw	r0, #1857	@ 0x741
 8019cf4:	f001 fe86 	bl	801ba04 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019cf8:	e009      	b.n	8019d0e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019cfa:	2114      	movs	r1, #20
 8019cfc:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019d00:	f001 fe80 	bl	801ba04 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019d04:	2124      	movs	r1, #36	@ 0x24
 8019d06:	f240 7041 	movw	r0, #1857	@ 0x741
 8019d0a:	f001 fe7b 	bl	801ba04 <SUBGRF_WriteRegister>
}
 8019d0e:	bf00      	nop
 8019d10:	3708      	adds	r7, #8
 8019d12:	46bd      	mov	sp, r7
 8019d14:	bd80      	pop	{r7, pc}
 8019d16:	bf00      	nop
 8019d18:	20001e30 	.word	0x20001e30

08019d1c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019d20:	f001 ffda 	bl	801bcd8 <SUBGRF_GetRadioWakeUpTime>
 8019d24:	4603      	mov	r3, r0
 8019d26:	3303      	adds	r3, #3
}
 8019d28:	4618      	mov	r0, r3
 8019d2a:	bd80      	pop	{r7, pc}

08019d2c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b082      	sub	sp, #8
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019d34:	f000 f80e 	bl	8019d54 <RadioOnTxTimeoutProcess>
}
 8019d38:	bf00      	nop
 8019d3a:	3708      	adds	r7, #8
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	bd80      	pop	{r7, pc}

08019d40 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019d40:	b580      	push	{r7, lr}
 8019d42:	b082      	sub	sp, #8
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019d48:	f000 f818 	bl	8019d7c <RadioOnRxTimeoutProcess>
}
 8019d4c:	bf00      	nop
 8019d4e:	3708      	adds	r7, #8
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}

08019d54 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019d58:	4b07      	ldr	r3, [pc, #28]	@ (8019d78 <RadioOnTxTimeoutProcess+0x24>)
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d008      	beq.n	8019d72 <RadioOnTxTimeoutProcess+0x1e>
 8019d60:	4b05      	ldr	r3, [pc, #20]	@ (8019d78 <RadioOnTxTimeoutProcess+0x24>)
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	685b      	ldr	r3, [r3, #4]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d003      	beq.n	8019d72 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019d6a:	4b03      	ldr	r3, [pc, #12]	@ (8019d78 <RadioOnTxTimeoutProcess+0x24>)
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	685b      	ldr	r3, [r3, #4]
 8019d70:	4798      	blx	r3
    }
}
 8019d72:	bf00      	nop
 8019d74:	bd80      	pop	{r7, pc}
 8019d76:	bf00      	nop
 8019d78:	20001e2c 	.word	0x20001e2c

08019d7c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019d80:	4b07      	ldr	r3, [pc, #28]	@ (8019da0 <RadioOnRxTimeoutProcess+0x24>)
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d008      	beq.n	8019d9a <RadioOnRxTimeoutProcess+0x1e>
 8019d88:	4b05      	ldr	r3, [pc, #20]	@ (8019da0 <RadioOnRxTimeoutProcess+0x24>)
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	68db      	ldr	r3, [r3, #12]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d003      	beq.n	8019d9a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019d92:	4b03      	ldr	r3, [pc, #12]	@ (8019da0 <RadioOnRxTimeoutProcess+0x24>)
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	68db      	ldr	r3, [r3, #12]
 8019d98:	4798      	blx	r3
    }
}
 8019d9a:	bf00      	nop
 8019d9c:	bd80      	pop	{r7, pc}
 8019d9e:	bf00      	nop
 8019da0:	20001e2c 	.word	0x20001e2c

08019da4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b082      	sub	sp, #8
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	4603      	mov	r3, r0
 8019dac:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019dae:	4a05      	ldr	r2, [pc, #20]	@ (8019dc4 <RadioOnDioIrq+0x20>)
 8019db0:	88fb      	ldrh	r3, [r7, #6]
 8019db2:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8019db6:	f000 f807 	bl	8019dc8 <RadioIrqProcess>
}
 8019dba:	bf00      	nop
 8019dbc:	3708      	adds	r7, #8
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}
 8019dc2:	bf00      	nop
 8019dc4:	20001e30 	.word	0x20001e30

08019dc8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019dc8:	b5b0      	push	{r4, r5, r7, lr}
 8019dca:	b082      	sub	sp, #8
 8019dcc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019dce:	2300      	movs	r3, #0
 8019dd0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8019dd6:	4ba8      	ldr	r3, [pc, #672]	@ (801a078 <RadioIrqProcess+0x2b0>)
 8019dd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8019ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019de0:	f000 810d 	beq.w	8019ffe <RadioIrqProcess+0x236>
 8019de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019de8:	f300 81e8 	bgt.w	801a1bc <RadioIrqProcess+0x3f4>
 8019dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019df0:	f000 80f1 	beq.w	8019fd6 <RadioIrqProcess+0x20e>
 8019df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019df8:	f300 81e0 	bgt.w	801a1bc <RadioIrqProcess+0x3f4>
 8019dfc:	2b80      	cmp	r3, #128	@ 0x80
 8019dfe:	f000 80d6 	beq.w	8019fae <RadioIrqProcess+0x1e6>
 8019e02:	2b80      	cmp	r3, #128	@ 0x80
 8019e04:	f300 81da 	bgt.w	801a1bc <RadioIrqProcess+0x3f4>
 8019e08:	2b20      	cmp	r3, #32
 8019e0a:	dc49      	bgt.n	8019ea0 <RadioIrqProcess+0xd8>
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	f340 81d5 	ble.w	801a1bc <RadioIrqProcess+0x3f4>
 8019e12:	3b01      	subs	r3, #1
 8019e14:	2b1f      	cmp	r3, #31
 8019e16:	f200 81d1 	bhi.w	801a1bc <RadioIrqProcess+0x3f4>
 8019e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8019e20 <RadioIrqProcess+0x58>)
 8019e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e20:	08019ea9 	.word	0x08019ea9
 8019e24:	08019ee3 	.word	0x08019ee3
 8019e28:	0801a1bd 	.word	0x0801a1bd
 8019e2c:	0801a099 	.word	0x0801a099
 8019e30:	0801a1bd 	.word	0x0801a1bd
 8019e34:	0801a1bd 	.word	0x0801a1bd
 8019e38:	0801a1bd 	.word	0x0801a1bd
 8019e3c:	0801a115 	.word	0x0801a115
 8019e40:	0801a1bd 	.word	0x0801a1bd
 8019e44:	0801a1bd 	.word	0x0801a1bd
 8019e48:	0801a1bd 	.word	0x0801a1bd
 8019e4c:	0801a1bd 	.word	0x0801a1bd
 8019e50:	0801a1bd 	.word	0x0801a1bd
 8019e54:	0801a1bd 	.word	0x0801a1bd
 8019e58:	0801a1bd 	.word	0x0801a1bd
 8019e5c:	0801a131 	.word	0x0801a131
 8019e60:	0801a1bd 	.word	0x0801a1bd
 8019e64:	0801a1bd 	.word	0x0801a1bd
 8019e68:	0801a1bd 	.word	0x0801a1bd
 8019e6c:	0801a1bd 	.word	0x0801a1bd
 8019e70:	0801a1bd 	.word	0x0801a1bd
 8019e74:	0801a1bd 	.word	0x0801a1bd
 8019e78:	0801a1bd 	.word	0x0801a1bd
 8019e7c:	0801a1bd 	.word	0x0801a1bd
 8019e80:	0801a1bd 	.word	0x0801a1bd
 8019e84:	0801a1bd 	.word	0x0801a1bd
 8019e88:	0801a1bd 	.word	0x0801a1bd
 8019e8c:	0801a1bd 	.word	0x0801a1bd
 8019e90:	0801a1bd 	.word	0x0801a1bd
 8019e94:	0801a1bd 	.word	0x0801a1bd
 8019e98:	0801a1bd 	.word	0x0801a1bd
 8019e9c:	0801a13f 	.word	0x0801a13f
 8019ea0:	2b40      	cmp	r3, #64	@ 0x40
 8019ea2:	f000 816d 	beq.w	801a180 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8019ea6:	e189      	b.n	801a1bc <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019ea8:	4874      	ldr	r0, [pc, #464]	@ (801a07c <RadioIrqProcess+0x2b4>)
 8019eaa:	f002 fd13 	bl	801c8d4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8019eae:	2000      	movs	r0, #0
 8019eb0:	f001 f824 	bl	801aefc <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8019eb4:	f002 f8b4 	bl	801c020 <RFW_Is_LongPacketModeEnabled>
 8019eb8:	4603      	mov	r3, r0
 8019eba:	2b01      	cmp	r3, #1
 8019ebc:	d101      	bne.n	8019ec2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8019ebe:	f002 f8d8 	bl	801c072 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8019ec2:	4b6f      	ldr	r3, [pc, #444]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	f000 817a 	beq.w	801a1c0 <RadioIrqProcess+0x3f8>
 8019ecc:	4b6c      	ldr	r3, [pc, #432]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	f000 8174 	beq.w	801a1c0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8019ed8:	4b69      	ldr	r3, [pc, #420]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	4798      	blx	r3
        break;
 8019ee0:	e16e      	b.n	801a1c0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8019ee2:	4868      	ldr	r0, [pc, #416]	@ (801a084 <RadioIrqProcess+0x2bc>)
 8019ee4:	f002 fcf6 	bl	801c8d4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019ee8:	4b63      	ldr	r3, [pc, #396]	@ (801a078 <RadioIrqProcess+0x2b0>)
 8019eea:	785b      	ldrb	r3, [r3, #1]
 8019eec:	f083 0301 	eor.w	r3, r3, #1
 8019ef0:	b2db      	uxtb	r3, r3
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d014      	beq.n	8019f20 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8019ef6:	2000      	movs	r0, #0
 8019ef8:	f001 f800 	bl	801aefc <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019efc:	2100      	movs	r1, #0
 8019efe:	f640 1002 	movw	r0, #2306	@ 0x902
 8019f02:	f001 fd7f 	bl	801ba04 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8019f06:	f640 1044 	movw	r0, #2372	@ 0x944
 8019f0a:	f001 fd9d 	bl	801ba48 <SUBGRF_ReadRegister>
 8019f0e:	4603      	mov	r3, r0
 8019f10:	f043 0302 	orr.w	r3, r3, #2
 8019f14:	b2db      	uxtb	r3, r3
 8019f16:	4619      	mov	r1, r3
 8019f18:	f640 1044 	movw	r0, #2372	@ 0x944
 8019f1c:	f001 fd72 	bl	801ba04 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019f20:	1dfb      	adds	r3, r7, #7
 8019f22:	22ff      	movs	r2, #255	@ 0xff
 8019f24:	4619      	mov	r1, r3
 8019f26:	4858      	ldr	r0, [pc, #352]	@ (801a088 <RadioIrqProcess+0x2c0>)
 8019f28:	f000 feb6 	bl	801ac98 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019f2c:	4857      	ldr	r0, [pc, #348]	@ (801a08c <RadioIrqProcess+0x2c4>)
 8019f2e:	f001 fd17 	bl	801b960 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019f32:	4b53      	ldr	r3, [pc, #332]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	f000 8144 	beq.w	801a1c4 <RadioIrqProcess+0x3fc>
 8019f3c:	4b50      	ldr	r3, [pc, #320]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	689b      	ldr	r3, [r3, #8]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	f000 813e 	beq.w	801a1c4 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8019f48:	4b4b      	ldr	r3, [pc, #300]	@ (801a078 <RadioIrqProcess+0x2b0>)
 8019f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019f4e:	2b01      	cmp	r3, #1
 8019f50:	d10e      	bne.n	8019f70 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8019f52:	4b4b      	ldr	r3, [pc, #300]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	689c      	ldr	r4, [r3, #8]
 8019f58:	79fb      	ldrb	r3, [r7, #7]
 8019f5a:	4619      	mov	r1, r3
 8019f5c:	4b46      	ldr	r3, [pc, #280]	@ (801a078 <RadioIrqProcess+0x2b0>)
 8019f5e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8019f62:	461a      	mov	r2, r3
 8019f64:	4b44      	ldr	r3, [pc, #272]	@ (801a078 <RadioIrqProcess+0x2b0>)
 8019f66:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8019f6a:	4847      	ldr	r0, [pc, #284]	@ (801a088 <RadioIrqProcess+0x2c0>)
 8019f6c:	47a0      	blx	r4
                break;
 8019f6e:	e01d      	b.n	8019fac <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019f70:	4b41      	ldr	r3, [pc, #260]	@ (801a078 <RadioIrqProcess+0x2b0>)
 8019f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f74:	463a      	mov	r2, r7
 8019f76:	4611      	mov	r1, r2
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f001 ff9f 	bl	801bebc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8019f7e:	4b40      	ldr	r3, [pc, #256]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	689c      	ldr	r4, [r3, #8]
 8019f84:	79fb      	ldrb	r3, [r7, #7]
 8019f86:	4619      	mov	r1, r3
 8019f88:	4b3b      	ldr	r3, [pc, #236]	@ (801a078 <RadioIrqProcess+0x2b0>)
 8019f8a:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8019f8e:	4618      	mov	r0, r3
 8019f90:	683b      	ldr	r3, [r7, #0]
 8019f92:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8019f96:	4a3e      	ldr	r2, [pc, #248]	@ (801a090 <RadioIrqProcess+0x2c8>)
 8019f98:	fb82 5203 	smull	r5, r2, r2, r3
 8019f9c:	1192      	asrs	r2, r2, #6
 8019f9e:	17db      	asrs	r3, r3, #31
 8019fa0:	1ad3      	subs	r3, r2, r3
 8019fa2:	b25b      	sxtb	r3, r3
 8019fa4:	4602      	mov	r2, r0
 8019fa6:	4838      	ldr	r0, [pc, #224]	@ (801a088 <RadioIrqProcess+0x2c0>)
 8019fa8:	47a0      	blx	r4
                break;
 8019faa:	bf00      	nop
        break;
 8019fac:	e10a      	b.n	801a1c4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8019fae:	2000      	movs	r0, #0
 8019fb0:	f000 ffa4 	bl	801aefc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019fb4:	4b32      	ldr	r3, [pc, #200]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	f000 8105 	beq.w	801a1c8 <RadioIrqProcess+0x400>
 8019fbe:	4b30      	ldr	r3, [pc, #192]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	699b      	ldr	r3, [r3, #24]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	f000 80ff 	beq.w	801a1c8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8019fca:	4b2d      	ldr	r3, [pc, #180]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	699b      	ldr	r3, [r3, #24]
 8019fd0:	2000      	movs	r0, #0
 8019fd2:	4798      	blx	r3
        break;
 8019fd4:	e0f8      	b.n	801a1c8 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8019fd6:	2000      	movs	r0, #0
 8019fd8:	f000 ff90 	bl	801aefc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019fdc:	4b28      	ldr	r3, [pc, #160]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	f000 80f3 	beq.w	801a1cc <RadioIrqProcess+0x404>
 8019fe6:	4b26      	ldr	r3, [pc, #152]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	699b      	ldr	r3, [r3, #24]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	f000 80ed 	beq.w	801a1cc <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8019ff2:	4b23      	ldr	r3, [pc, #140]	@ (801a080 <RadioIrqProcess+0x2b8>)
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	699b      	ldr	r3, [r3, #24]
 8019ff8:	2001      	movs	r0, #1
 8019ffa:	4798      	blx	r3
        break;
 8019ffc:	e0e6      	b.n	801a1cc <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019ffe:	4b25      	ldr	r3, [pc, #148]	@ (801a094 <RadioIrqProcess+0x2cc>)
 801a000:	2201      	movs	r2, #1
 801a002:	2100      	movs	r1, #0
 801a004:	2002      	movs	r0, #2
 801a006:	f002 fe6f 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a00a:	f000 fe2b 	bl	801ac64 <SUBGRF_GetOperatingMode>
 801a00e:	4603      	mov	r3, r0
 801a010:	2b04      	cmp	r3, #4
 801a012:	d115      	bne.n	801a040 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a014:	4819      	ldr	r0, [pc, #100]	@ (801a07c <RadioIrqProcess+0x2b4>)
 801a016:	f002 fc5d 	bl	801c8d4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a01a:	2000      	movs	r0, #0
 801a01c:	f000 ff6e 	bl	801aefc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a020:	4b17      	ldr	r3, [pc, #92]	@ (801a080 <RadioIrqProcess+0x2b8>)
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	2b00      	cmp	r3, #0
 801a026:	f000 80d3 	beq.w	801a1d0 <RadioIrqProcess+0x408>
 801a02a:	4b15      	ldr	r3, [pc, #84]	@ (801a080 <RadioIrqProcess+0x2b8>)
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	685b      	ldr	r3, [r3, #4]
 801a030:	2b00      	cmp	r3, #0
 801a032:	f000 80cd 	beq.w	801a1d0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a036:	4b12      	ldr	r3, [pc, #72]	@ (801a080 <RadioIrqProcess+0x2b8>)
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	685b      	ldr	r3, [r3, #4]
 801a03c:	4798      	blx	r3
        break;
 801a03e:	e0c7      	b.n	801a1d0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a040:	f000 fe10 	bl	801ac64 <SUBGRF_GetOperatingMode>
 801a044:	4603      	mov	r3, r0
 801a046:	2b05      	cmp	r3, #5
 801a048:	f040 80c2 	bne.w	801a1d0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a04c:	480d      	ldr	r0, [pc, #52]	@ (801a084 <RadioIrqProcess+0x2bc>)
 801a04e:	f002 fc41 	bl	801c8d4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a052:	2000      	movs	r0, #0
 801a054:	f000 ff52 	bl	801aefc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a058:	4b09      	ldr	r3, [pc, #36]	@ (801a080 <RadioIrqProcess+0x2b8>)
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	f000 80b7 	beq.w	801a1d0 <RadioIrqProcess+0x408>
 801a062:	4b07      	ldr	r3, [pc, #28]	@ (801a080 <RadioIrqProcess+0x2b8>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	68db      	ldr	r3, [r3, #12]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	f000 80b1 	beq.w	801a1d0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801a06e:	4b04      	ldr	r3, [pc, #16]	@ (801a080 <RadioIrqProcess+0x2b8>)
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	68db      	ldr	r3, [r3, #12]
 801a074:	4798      	blx	r3
        break;
 801a076:	e0ab      	b.n	801a1d0 <RadioIrqProcess+0x408>
 801a078:	20001e30 	.word	0x20001e30
 801a07c:	20001e8c 	.word	0x20001e8c
 801a080:	20001e2c 	.word	0x20001e2c
 801a084:	20001ea4 	.word	0x20001ea4
 801a088:	20001d2c 	.word	0x20001d2c
 801a08c:	20001e54 	.word	0x20001e54
 801a090:	10624dd3 	.word	0x10624dd3
 801a094:	08020790 	.word	0x08020790
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a098:	4b54      	ldr	r3, [pc, #336]	@ (801a1ec <RadioIrqProcess+0x424>)
 801a09a:	2201      	movs	r2, #1
 801a09c:	2100      	movs	r1, #0
 801a09e:	2002      	movs	r0, #2
 801a0a0:	f002 fe22 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a0a4:	4b52      	ldr	r3, [pc, #328]	@ (801a1f0 <RadioIrqProcess+0x428>)
 801a0a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	f000 8093 	beq.w	801a1d4 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801a0ae:	4a51      	ldr	r2, [pc, #324]	@ (801a1f4 <RadioIrqProcess+0x42c>)
 801a0b0:	4b4f      	ldr	r3, [pc, #316]	@ (801a1f0 <RadioIrqProcess+0x428>)
 801a0b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0b4:	0c1b      	lsrs	r3, r3, #16
 801a0b6:	b2db      	uxtb	r3, r3
 801a0b8:	4619      	mov	r1, r3
 801a0ba:	f640 1003 	movw	r0, #2307	@ 0x903
 801a0be:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801a0c0:	4a4c      	ldr	r2, [pc, #304]	@ (801a1f4 <RadioIrqProcess+0x42c>)
 801a0c2:	4b4b      	ldr	r3, [pc, #300]	@ (801a1f0 <RadioIrqProcess+0x428>)
 801a0c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0c6:	0a1b      	lsrs	r3, r3, #8
 801a0c8:	b2db      	uxtb	r3, r3
 801a0ca:	4619      	mov	r1, r3
 801a0cc:	f640 1004 	movw	r0, #2308	@ 0x904
 801a0d0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801a0d2:	4a48      	ldr	r2, [pc, #288]	@ (801a1f4 <RadioIrqProcess+0x42c>)
 801a0d4:	4b46      	ldr	r3, [pc, #280]	@ (801a1f0 <RadioIrqProcess+0x428>)
 801a0d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0d8:	b2db      	uxtb	r3, r3
 801a0da:	4619      	mov	r1, r3
 801a0dc:	f640 1005 	movw	r0, #2309	@ 0x905
 801a0e0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a0e2:	4c44      	ldr	r4, [pc, #272]	@ (801a1f4 <RadioIrqProcess+0x42c>)
 801a0e4:	4b44      	ldr	r3, [pc, #272]	@ (801a1f8 <RadioIrqProcess+0x430>)
 801a0e6:	f640 1002 	movw	r0, #2306	@ 0x902
 801a0ea:	4798      	blx	r3
 801a0ec:	4603      	mov	r3, r0
 801a0ee:	f043 0301 	orr.w	r3, r3, #1
 801a0f2:	b2db      	uxtb	r3, r3
 801a0f4:	4619      	mov	r1, r3
 801a0f6:	f640 1002 	movw	r0, #2306	@ 0x902
 801a0fa:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a0fc:	4b3c      	ldr	r3, [pc, #240]	@ (801a1f0 <RadioIrqProcess+0x428>)
 801a0fe:	2200      	movs	r2, #0
 801a100:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a102:	2300      	movs	r3, #0
 801a104:	2200      	movs	r2, #0
 801a106:	f240 2162 	movw	r1, #610	@ 0x262
 801a10a:	f240 2062 	movw	r0, #610	@ 0x262
 801a10e:	f001 f8cf 	bl	801b2b0 <SUBGRF_SetDioIrqParams>
        break;
 801a112:	e05f      	b.n	801a1d4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a114:	4b39      	ldr	r3, [pc, #228]	@ (801a1fc <RadioIrqProcess+0x434>)
 801a116:	2201      	movs	r2, #1
 801a118:	2100      	movs	r1, #0
 801a11a:	2002      	movs	r0, #2
 801a11c:	f002 fde4 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a120:	f001 ff77 	bl	801c012 <RFW_Is_Init>
 801a124:	4603      	mov	r3, r0
 801a126:	2b01      	cmp	r3, #1
 801a128:	d156      	bne.n	801a1d8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a12a:	f001 ffa8 	bl	801c07e <RFW_ReceivePayload>
        break;
 801a12e:	e053      	b.n	801a1d8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a130:	4b33      	ldr	r3, [pc, #204]	@ (801a200 <RadioIrqProcess+0x438>)
 801a132:	2201      	movs	r2, #1
 801a134:	2100      	movs	r1, #0
 801a136:	2002      	movs	r0, #2
 801a138:	f002 fdd6 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a13c:	e051      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a13e:	4831      	ldr	r0, [pc, #196]	@ (801a204 <RadioIrqProcess+0x43c>)
 801a140:	f002 fbc8 	bl	801c8d4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a144:	4b2a      	ldr	r3, [pc, #168]	@ (801a1f0 <RadioIrqProcess+0x428>)
 801a146:	785b      	ldrb	r3, [r3, #1]
 801a148:	f083 0301 	eor.w	r3, r3, #1
 801a14c:	b2db      	uxtb	r3, r3
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d002      	beq.n	801a158 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a152:	2000      	movs	r0, #0
 801a154:	f000 fed2 	bl	801aefc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a158:	4b2b      	ldr	r3, [pc, #172]	@ (801a208 <RadioIrqProcess+0x440>)
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d03d      	beq.n	801a1dc <RadioIrqProcess+0x414>
 801a160:	4b29      	ldr	r3, [pc, #164]	@ (801a208 <RadioIrqProcess+0x440>)
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	68db      	ldr	r3, [r3, #12]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d038      	beq.n	801a1dc <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a16a:	4b27      	ldr	r3, [pc, #156]	@ (801a208 <RadioIrqProcess+0x440>)
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	68db      	ldr	r3, [r3, #12]
 801a170:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a172:	4b26      	ldr	r3, [pc, #152]	@ (801a20c <RadioIrqProcess+0x444>)
 801a174:	2201      	movs	r2, #1
 801a176:	2100      	movs	r1, #0
 801a178:	2002      	movs	r0, #2
 801a17a:	f002 fdb5 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a17e:	e02d      	b.n	801a1dc <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a180:	4b23      	ldr	r3, [pc, #140]	@ (801a210 <RadioIrqProcess+0x448>)
 801a182:	2201      	movs	r2, #1
 801a184:	2100      	movs	r1, #0
 801a186:	2002      	movs	r0, #2
 801a188:	f002 fdae 	bl	801cce8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a18c:	4b18      	ldr	r3, [pc, #96]	@ (801a1f0 <RadioIrqProcess+0x428>)
 801a18e:	785b      	ldrb	r3, [r3, #1]
 801a190:	f083 0301 	eor.w	r3, r3, #1
 801a194:	b2db      	uxtb	r3, r3
 801a196:	2b00      	cmp	r3, #0
 801a198:	d002      	beq.n	801a1a0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a19a:	2000      	movs	r0, #0
 801a19c:	f000 feae 	bl	801aefc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a1a0:	4b19      	ldr	r3, [pc, #100]	@ (801a208 <RadioIrqProcess+0x440>)
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d01b      	beq.n	801a1e0 <RadioIrqProcess+0x418>
 801a1a8:	4b17      	ldr	r3, [pc, #92]	@ (801a208 <RadioIrqProcess+0x440>)
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	691b      	ldr	r3, [r3, #16]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d016      	beq.n	801a1e0 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a1b2:	4b15      	ldr	r3, [pc, #84]	@ (801a208 <RadioIrqProcess+0x440>)
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	691b      	ldr	r3, [r3, #16]
 801a1b8:	4798      	blx	r3
        break;
 801a1ba:	e011      	b.n	801a1e0 <RadioIrqProcess+0x418>
        break;
 801a1bc:	bf00      	nop
 801a1be:	e010      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        break;
 801a1c0:	bf00      	nop
 801a1c2:	e00e      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        break;
 801a1c4:	bf00      	nop
 801a1c6:	e00c      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        break;
 801a1c8:	bf00      	nop
 801a1ca:	e00a      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        break;
 801a1cc:	bf00      	nop
 801a1ce:	e008      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        break;
 801a1d0:	bf00      	nop
 801a1d2:	e006      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        break;
 801a1d4:	bf00      	nop
 801a1d6:	e004      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        break;
 801a1d8:	bf00      	nop
 801a1da:	e002      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        break;
 801a1dc:	bf00      	nop
 801a1de:	e000      	b.n	801a1e2 <RadioIrqProcess+0x41a>
        break;
 801a1e0:	bf00      	nop
    }
}
 801a1e2:	bf00      	nop
 801a1e4:	3708      	adds	r7, #8
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bdb0      	pop	{r4, r5, r7, pc}
 801a1ea:	bf00      	nop
 801a1ec:	080207a4 	.word	0x080207a4
 801a1f0:	20001e30 	.word	0x20001e30
 801a1f4:	08019bd9 	.word	0x08019bd9
 801a1f8:	08019bfd 	.word	0x08019bfd
 801a1fc:	080207b0 	.word	0x080207b0
 801a200:	080207bc 	.word	0x080207bc
 801a204:	20001ea4 	.word	0x20001ea4
 801a208:	20001e2c 	.word	0x20001e2c
 801a20c:	080207c8 	.word	0x080207c8
 801a210:	080207d4 	.word	0x080207d4

0801a214 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a214:	b580      	push	{r7, lr}
 801a216:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a218:	4b09      	ldr	r3, [pc, #36]	@ (801a240 <RadioTxPrbs+0x2c>)
 801a21a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a21e:	2101      	movs	r1, #1
 801a220:	4618      	mov	r0, r3
 801a222:	f001 fcfd 	bl	801bc20 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a226:	4b07      	ldr	r3, [pc, #28]	@ (801a244 <RadioTxPrbs+0x30>)
 801a228:	212d      	movs	r1, #45	@ 0x2d
 801a22a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a22e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a230:	f000 ff27 	bl	801b082 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a234:	4804      	ldr	r0, [pc, #16]	@ (801a248 <RadioTxPrbs+0x34>)
 801a236:	f000 fe7d 	bl	801af34 <SUBGRF_SetTx>
}
 801a23a:	bf00      	nop
 801a23c:	bd80      	pop	{r7, pc}
 801a23e:	bf00      	nop
 801a240:	20001e30 	.word	0x20001e30
 801a244:	08019bd9 	.word	0x08019bd9
 801a248:	000fffff 	.word	0x000fffff

0801a24c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a24c:	b580      	push	{r7, lr}
 801a24e:	b084      	sub	sp, #16
 801a250:	af00      	add	r7, sp, #0
 801a252:	4603      	mov	r3, r0
 801a254:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a25a:	4618      	mov	r0, r3
 801a25c:	f001 fd08 	bl	801bc70 <SUBGRF_SetRfTxPower>
 801a260:	4603      	mov	r3, r0
 801a262:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a264:	210e      	movs	r1, #14
 801a266:	f640 101f 	movw	r0, #2335	@ 0x91f
 801a26a:	f001 fbcb 	bl	801ba04 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a26e:	7bfb      	ldrb	r3, [r7, #15]
 801a270:	2101      	movs	r1, #1
 801a272:	4618      	mov	r0, r3
 801a274:	f001 fcd4 	bl	801bc20 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a278:	f000 fefa 	bl	801b070 <SUBGRF_SetTxContinuousWave>
}
 801a27c:	bf00      	nop
 801a27e:	3710      	adds	r7, #16
 801a280:	46bd      	mov	sp, r7
 801a282:	bd80      	pop	{r7, pc}

0801a284 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a284:	b480      	push	{r7}
 801a286:	b089      	sub	sp, #36	@ 0x24
 801a288:	af00      	add	r7, sp, #0
 801a28a:	60f8      	str	r0, [r7, #12]
 801a28c:	60b9      	str	r1, [r7, #8]
 801a28e:	4613      	mov	r3, r2
 801a290:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a292:	2300      	movs	r3, #0
 801a294:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a296:	2300      	movs	r3, #0
 801a298:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a29a:	2300      	movs	r3, #0
 801a29c:	61bb      	str	r3, [r7, #24]
 801a29e:	e011      	b.n	801a2c4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a2a0:	69bb      	ldr	r3, [r7, #24]
 801a2a2:	68ba      	ldr	r2, [r7, #8]
 801a2a4:	4413      	add	r3, r2
 801a2a6:	781a      	ldrb	r2, [r3, #0]
 801a2a8:	69bb      	ldr	r3, [r7, #24]
 801a2aa:	68b9      	ldr	r1, [r7, #8]
 801a2ac:	440b      	add	r3, r1
 801a2ae:	43d2      	mvns	r2, r2
 801a2b0:	b2d2      	uxtb	r2, r2
 801a2b2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a2b4:	69bb      	ldr	r3, [r7, #24]
 801a2b6:	68fa      	ldr	r2, [r7, #12]
 801a2b8:	4413      	add	r3, r2
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a2be:	69bb      	ldr	r3, [r7, #24]
 801a2c0:	3301      	adds	r3, #1
 801a2c2:	61bb      	str	r3, [r7, #24]
 801a2c4:	79fb      	ldrb	r3, [r7, #7]
 801a2c6:	69ba      	ldr	r2, [r7, #24]
 801a2c8:	429a      	cmp	r2, r3
 801a2ca:	dbe9      	blt.n	801a2a0 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a2cc:	2300      	movs	r3, #0
 801a2ce:	61bb      	str	r3, [r7, #24]
 801a2d0:	e049      	b.n	801a366 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a2d2:	69bb      	ldr	r3, [r7, #24]
 801a2d4:	425a      	negs	r2, r3
 801a2d6:	f003 0307 	and.w	r3, r3, #7
 801a2da:	f002 0207 	and.w	r2, r2, #7
 801a2de:	bf58      	it	pl
 801a2e0:	4253      	negpl	r3, r2
 801a2e2:	b2db      	uxtb	r3, r3
 801a2e4:	f1c3 0307 	rsb	r3, r3, #7
 801a2e8:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a2ea:	69bb      	ldr	r3, [r7, #24]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	da00      	bge.n	801a2f2 <payload_integration+0x6e>
 801a2f0:	3307      	adds	r3, #7
 801a2f2:	10db      	asrs	r3, r3, #3
 801a2f4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a2f6:	69bb      	ldr	r3, [r7, #24]
 801a2f8:	3301      	adds	r3, #1
 801a2fa:	425a      	negs	r2, r3
 801a2fc:	f003 0307 	and.w	r3, r3, #7
 801a300:	f002 0207 	and.w	r2, r2, #7
 801a304:	bf58      	it	pl
 801a306:	4253      	negpl	r3, r2
 801a308:	b2db      	uxtb	r3, r3
 801a30a:	f1c3 0307 	rsb	r3, r3, #7
 801a30e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a310:	69bb      	ldr	r3, [r7, #24]
 801a312:	3301      	adds	r3, #1
 801a314:	2b00      	cmp	r3, #0
 801a316:	da00      	bge.n	801a31a <payload_integration+0x96>
 801a318:	3307      	adds	r3, #7
 801a31a:	10db      	asrs	r3, r3, #3
 801a31c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a31e:	7dbb      	ldrb	r3, [r7, #22]
 801a320:	68ba      	ldr	r2, [r7, #8]
 801a322:	4413      	add	r3, r2
 801a324:	781b      	ldrb	r3, [r3, #0]
 801a326:	461a      	mov	r2, r3
 801a328:	7dfb      	ldrb	r3, [r7, #23]
 801a32a:	fa42 f303 	asr.w	r3, r2, r3
 801a32e:	b2db      	uxtb	r3, r3
 801a330:	f003 0301 	and.w	r3, r3, #1
 801a334:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a336:	7ffa      	ldrb	r2, [r7, #31]
 801a338:	7cfb      	ldrb	r3, [r7, #19]
 801a33a:	4053      	eors	r3, r2
 801a33c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a33e:	7d3b      	ldrb	r3, [r7, #20]
 801a340:	68fa      	ldr	r2, [r7, #12]
 801a342:	4413      	add	r3, r2
 801a344:	781b      	ldrb	r3, [r3, #0]
 801a346:	b25a      	sxtb	r2, r3
 801a348:	7ff9      	ldrb	r1, [r7, #31]
 801a34a:	7d7b      	ldrb	r3, [r7, #21]
 801a34c:	fa01 f303 	lsl.w	r3, r1, r3
 801a350:	b25b      	sxtb	r3, r3
 801a352:	4313      	orrs	r3, r2
 801a354:	b259      	sxtb	r1, r3
 801a356:	7d3b      	ldrb	r3, [r7, #20]
 801a358:	68fa      	ldr	r2, [r7, #12]
 801a35a:	4413      	add	r3, r2
 801a35c:	b2ca      	uxtb	r2, r1
 801a35e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a360:	69bb      	ldr	r3, [r7, #24]
 801a362:	3301      	adds	r3, #1
 801a364:	61bb      	str	r3, [r7, #24]
 801a366:	79fb      	ldrb	r3, [r7, #7]
 801a368:	00db      	lsls	r3, r3, #3
 801a36a:	69ba      	ldr	r2, [r7, #24]
 801a36c:	429a      	cmp	r2, r3
 801a36e:	dbb0      	blt.n	801a2d2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a370:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801a374:	01db      	lsls	r3, r3, #7
 801a376:	b25a      	sxtb	r2, r3
 801a378:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801a37c:	019b      	lsls	r3, r3, #6
 801a37e:	b25b      	sxtb	r3, r3
 801a380:	4313      	orrs	r3, r2
 801a382:	b25b      	sxtb	r3, r3
 801a384:	7ffa      	ldrb	r2, [r7, #31]
 801a386:	2a00      	cmp	r2, #0
 801a388:	d101      	bne.n	801a38e <payload_integration+0x10a>
 801a38a:	2220      	movs	r2, #32
 801a38c:	e000      	b.n	801a390 <payload_integration+0x10c>
 801a38e:	2200      	movs	r2, #0
 801a390:	4313      	orrs	r3, r2
 801a392:	b259      	sxtb	r1, r3
 801a394:	79fb      	ldrb	r3, [r7, #7]
 801a396:	68fa      	ldr	r2, [r7, #12]
 801a398:	4413      	add	r3, r2
 801a39a:	b2ca      	uxtb	r2, r1
 801a39c:	701a      	strb	r2, [r3, #0]
}
 801a39e:	bf00      	nop
 801a3a0:	3724      	adds	r7, #36	@ 0x24
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	bc80      	pop	{r7}
 801a3a6:	4770      	bx	lr

0801a3a8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b08c      	sub	sp, #48	@ 0x30
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	60b9      	str	r1, [r7, #8]
 801a3b0:	607a      	str	r2, [r7, #4]
 801a3b2:	603b      	str	r3, [r7, #0]
 801a3b4:	4603      	mov	r3, r0
 801a3b6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 801a3bc:	f107 0320 	add.w	r3, r7, #32
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	601a      	str	r2, [r3, #0]
 801a3c4:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a3c6:	f001 fe1e 	bl	801c006 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d001      	beq.n	801a3d4 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	bf14      	ite	ne
 801a3da:	2301      	movne	r3, #1
 801a3dc:	2300      	moveq	r3, #0
 801a3de:	b2da      	uxtb	r2, r3
 801a3e0:	4ba3      	ldr	r3, [pc, #652]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a3e2:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a3e4:	7bfb      	ldrb	r3, [r7, #15]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d003      	beq.n	801a3f2 <RadioSetRxGenericConfig+0x4a>
 801a3ea:	2b01      	cmp	r3, #1
 801a3ec:	f000 80dc 	beq.w	801a5a8 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a3f0:	e195      	b.n	801a71e <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a3f2:	68bb      	ldr	r3, [r7, #8]
 801a3f4:	689b      	ldr	r3, [r3, #8]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d003      	beq.n	801a402 <RadioSetRxGenericConfig+0x5a>
 801a3fa:	68bb      	ldr	r3, [r7, #8]
 801a3fc:	68db      	ldr	r3, [r3, #12]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d102      	bne.n	801a408 <RadioSetRxGenericConfig+0x60>
            return -1;
 801a402:	f04f 33ff 	mov.w	r3, #4294967295
 801a406:	e18b      	b.n	801a720 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 801a408:	68bb      	ldr	r3, [r7, #8]
 801a40a:	7f9b      	ldrb	r3, [r3, #30]
 801a40c:	2b08      	cmp	r3, #8
 801a40e:	d902      	bls.n	801a416 <RadioSetRxGenericConfig+0x6e>
            return -1;
 801a410:	f04f 33ff 	mov.w	r3, #4294967295
 801a414:	e184      	b.n	801a720 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a416:	68bb      	ldr	r3, [r7, #8]
 801a418:	6919      	ldr	r1, [r3, #16]
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	7f9b      	ldrb	r3, [r3, #30]
 801a41e:	461a      	mov	r2, r3
 801a420:	f107 0320 	add.w	r3, r7, #32
 801a424:	4618      	mov	r0, r3
 801a426:	f001 fee1 	bl	801c1ec <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a42a:	68bb      	ldr	r3, [r7, #8]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	bf14      	ite	ne
 801a432:	2301      	movne	r3, #1
 801a434:	2300      	moveq	r3, #0
 801a436:	b2db      	uxtb	r3, r3
 801a438:	4618      	mov	r0, r3
 801a43a:	f000 fe2b 	bl	801b094 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a43e:	4b8c      	ldr	r3, [pc, #560]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a440:	2200      	movs	r2, #0
 801a442:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a446:	68bb      	ldr	r3, [r7, #8]
 801a448:	689b      	ldr	r3, [r3, #8]
 801a44a:	4a89      	ldr	r2, [pc, #548]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a44c:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a44e:	68bb      	ldr	r3, [r7, #8]
 801a450:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a454:	4b86      	ldr	r3, [pc, #536]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a456:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a45a:	68bb      	ldr	r3, [r7, #8]
 801a45c:	685b      	ldr	r3, [r3, #4]
 801a45e:	4618      	mov	r0, r3
 801a460:	f001 fd04 	bl	801be6c <SUBGRF_GetFskBandwidthRegValue>
 801a464:	4603      	mov	r3, r0
 801a466:	461a      	mov	r2, r3
 801a468:	4b81      	ldr	r3, [pc, #516]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a46a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a46e:	4b80      	ldr	r3, [pc, #512]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a470:	2200      	movs	r2, #0
 801a472:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a474:	68bb      	ldr	r3, [r7, #8]
 801a476:	68db      	ldr	r3, [r3, #12]
 801a478:	b29b      	uxth	r3, r3
 801a47a:	00db      	lsls	r3, r3, #3
 801a47c:	b29a      	uxth	r2, r3
 801a47e:	4b7c      	ldr	r3, [pc, #496]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a480:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a482:	68bb      	ldr	r3, [r7, #8]
 801a484:	7fda      	ldrb	r2, [r3, #31]
 801a486:	4b7a      	ldr	r3, [pc, #488]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a488:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a48a:	68bb      	ldr	r3, [r7, #8]
 801a48c:	7f9b      	ldrb	r3, [r3, #30]
 801a48e:	00db      	lsls	r3, r3, #3
 801a490:	b2da      	uxtb	r2, r3
 801a492:	4b77      	ldr	r3, [pc, #476]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a494:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a496:	68bb      	ldr	r3, [r7, #8]
 801a498:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801a49c:	4b74      	ldr	r3, [pc, #464]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a49e:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a4a0:	68bb      	ldr	r3, [r7, #8]
 801a4a2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d105      	bne.n	801a4b6 <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a4aa:	68bb      	ldr	r3, [r7, #8]
 801a4ac:	695b      	ldr	r3, [r3, #20]
 801a4ae:	b2da      	uxtb	r2, r3
 801a4b0:	4b6f      	ldr	r3, [pc, #444]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a4b2:	759a      	strb	r2, [r3, #22]
 801a4b4:	e00b      	b.n	801a4ce <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a4b6:	68bb      	ldr	r3, [r7, #8]
 801a4b8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801a4bc:	2b02      	cmp	r3, #2
 801a4be:	d103      	bne.n	801a4c8 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a4c0:	4b6b      	ldr	r3, [pc, #428]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a4c2:	22ff      	movs	r2, #255	@ 0xff
 801a4c4:	759a      	strb	r2, [r3, #22]
 801a4c6:	e002      	b.n	801a4ce <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a4c8:	4b69      	ldr	r3, [pc, #420]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a4ca:	22ff      	movs	r2, #255	@ 0xff
 801a4cc:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a4ce:	68bb      	ldr	r3, [r7, #8]
 801a4d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801a4d4:	2b02      	cmp	r3, #2
 801a4d6:	d004      	beq.n	801a4e2 <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a4d8:	68bb      	ldr	r3, [r7, #8]
 801a4da:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801a4de:	2b02      	cmp	r3, #2
 801a4e0:	d12d      	bne.n	801a53e <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a4e2:	68bb      	ldr	r3, [r7, #8]
 801a4e4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a4e8:	2bf1      	cmp	r3, #241	@ 0xf1
 801a4ea:	d00c      	beq.n	801a506 <RadioSetRxGenericConfig+0x15e>
 801a4ec:	68bb      	ldr	r3, [r7, #8]
 801a4ee:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a4f2:	2bf2      	cmp	r3, #242	@ 0xf2
 801a4f4:	d007      	beq.n	801a506 <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a4f6:	68bb      	ldr	r3, [r7, #8]
 801a4f8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a4fc:	2b01      	cmp	r3, #1
 801a4fe:	d002      	beq.n	801a506 <RadioSetRxGenericConfig+0x15e>
                return -1;
 801a500:	f04f 33ff 	mov.w	r3, #4294967295
 801a504:	e10c      	b.n	801a720 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 801a506:	2300      	movs	r3, #0
 801a508:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801a50a:	68bb      	ldr	r3, [r7, #8]
 801a50c:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a50e:	4b59      	ldr	r3, [pc, #356]	@ (801a674 <RadioSetRxGenericConfig+0x2cc>)
 801a510:	6819      	ldr	r1, [r3, #0]
 801a512:	f107 0314 	add.w	r3, r7, #20
 801a516:	4a58      	ldr	r2, [pc, #352]	@ (801a678 <RadioSetRxGenericConfig+0x2d0>)
 801a518:	4618      	mov	r0, r3
 801a51a:	f001 fd67 	bl	801bfec <RFW_Init>
 801a51e:	4603      	mov	r3, r0
 801a520:	2b00      	cmp	r3, #0
 801a522:	d002      	beq.n	801a52a <RadioSetRxGenericConfig+0x182>
                return -1;
 801a524:	f04f 33ff 	mov.w	r3, #4294967295
 801a528:	e0fa      	b.n	801a720 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a52a:	4b51      	ldr	r3, [pc, #324]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a52c:	2200      	movs	r2, #0
 801a52e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a530:	4b4f      	ldr	r3, [pc, #316]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a532:	2201      	movs	r2, #1
 801a534:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a536:	4b4e      	ldr	r3, [pc, #312]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a538:	2200      	movs	r2, #0
 801a53a:	755a      	strb	r2, [r3, #21]
        {
 801a53c:	e00e      	b.n	801a55c <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a53e:	68bb      	ldr	r3, [r7, #8]
 801a540:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801a544:	4b4a      	ldr	r3, [pc, #296]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a546:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a548:	68bb      	ldr	r3, [r7, #8]
 801a54a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801a54e:	4b48      	ldr	r3, [pc, #288]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a550:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a552:	68bb      	ldr	r3, [r7, #8]
 801a554:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801a558:	4b45      	ldr	r3, [pc, #276]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a55a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a55c:	f7ff fa3b 	bl	80199d6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a560:	2000      	movs	r0, #0
 801a562:	f7fe fbcf 	bl	8018d04 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a566:	4845      	ldr	r0, [pc, #276]	@ (801a67c <RadioSetRxGenericConfig+0x2d4>)
 801a568:	f001 f838 	bl	801b5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a56c:	4844      	ldr	r0, [pc, #272]	@ (801a680 <RadioSetRxGenericConfig+0x2d8>)
 801a56e:	f001 f903 	bl	801b778 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a572:	f107 0320 	add.w	r3, r7, #32
 801a576:	4618      	mov	r0, r3
 801a578:	f000 fbc3 	bl	801ad02 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a57c:	68bb      	ldr	r3, [r7, #8]
 801a57e:	8b9b      	ldrh	r3, [r3, #28]
 801a580:	4618      	mov	r0, r3
 801a582:	f000 fc0d 	bl	801ada0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a586:	68bb      	ldr	r3, [r7, #8]
 801a588:	8b1b      	ldrh	r3, [r3, #24]
 801a58a:	4618      	mov	r0, r3
 801a58c:	f000 fbe8 	bl	801ad60 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a590:	683b      	ldr	r3, [r7, #0]
 801a592:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801a596:	fb03 f202 	mul.w	r2, r3, r2
 801a59a:	68bb      	ldr	r3, [r7, #8]
 801a59c:	689b      	ldr	r3, [r3, #8]
 801a59e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a5a2:	4a33      	ldr	r2, [pc, #204]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a5a4:	6093      	str	r3, [r2, #8]
        break;
 801a5a6:	e0ba      	b.n	801a71e <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 801a5a8:	68bb      	ldr	r3, [r7, #8]
 801a5aa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d102      	bne.n	801a5b6 <RadioSetRxGenericConfig+0x20e>
            return -1;
 801a5b0:	f04f 33ff 	mov.w	r3, #4294967295
 801a5b4:	e0b4      	b.n	801a720 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801a5bc:	2b01      	cmp	r3, #1
 801a5be:	d105      	bne.n	801a5cc <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 801a5c0:	68bb      	ldr	r3, [r7, #8]
 801a5c2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801a5c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801a5ca:	e002      	b.n	801a5d2 <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 801a5cc:	23ff      	movs	r3, #255	@ 0xff
 801a5ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	bf14      	ite	ne
 801a5da:	2301      	movne	r3, #1
 801a5dc:	2300      	moveq	r3, #0
 801a5de:	b2db      	uxtb	r3, r3
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	f000 fd57 	bl	801b094 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a5e6:	683b      	ldr	r3, [r7, #0]
 801a5e8:	b2db      	uxtb	r3, r3
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f000 fd61 	bl	801b0b2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a5f0:	4b1f      	ldr	r3, [pc, #124]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a5f2:	2201      	movs	r2, #1
 801a5f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a5f8:	68bb      	ldr	r3, [r7, #8]
 801a5fa:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801a5fe:	4b1c      	ldr	r3, [pc, #112]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a604:	68bb      	ldr	r3, [r7, #8]
 801a606:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801a60a:	4b19      	ldr	r3, [pc, #100]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a60c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a610:	68bb      	ldr	r3, [r7, #8]
 801a612:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801a616:	4b16      	ldr	r3, [pc, #88]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a618:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a61c:	68bb      	ldr	r3, [r7, #8]
 801a61e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a622:	2b02      	cmp	r3, #2
 801a624:	d010      	beq.n	801a648 <RadioSetRxGenericConfig+0x2a0>
 801a626:	2b02      	cmp	r3, #2
 801a628:	dc2c      	bgt.n	801a684 <RadioSetRxGenericConfig+0x2dc>
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d002      	beq.n	801a634 <RadioSetRxGenericConfig+0x28c>
 801a62e:	2b01      	cmp	r3, #1
 801a630:	d005      	beq.n	801a63e <RadioSetRxGenericConfig+0x296>
            break;
 801a632:	e027      	b.n	801a684 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a634:	4b0e      	ldr	r3, [pc, #56]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a636:	2200      	movs	r2, #0
 801a638:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a63c:	e023      	b.n	801a686 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a63e:	4b0c      	ldr	r3, [pc, #48]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a640:	2201      	movs	r2, #1
 801a642:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a646:	e01e      	b.n	801a686 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a648:	68bb      	ldr	r3, [r7, #8]
 801a64a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a64e:	2b0b      	cmp	r3, #11
 801a650:	d004      	beq.n	801a65c <RadioSetRxGenericConfig+0x2b4>
 801a652:	68bb      	ldr	r3, [r7, #8]
 801a654:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a658:	2b0c      	cmp	r3, #12
 801a65a:	d104      	bne.n	801a666 <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a65c:	4b04      	ldr	r3, [pc, #16]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a65e:	2201      	movs	r2, #1
 801a660:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a664:	e00f      	b.n	801a686 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a666:	4b02      	ldr	r3, [pc, #8]	@ (801a670 <RadioSetRxGenericConfig+0x2c8>)
 801a668:	2200      	movs	r2, #0
 801a66a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a66e:	e00a      	b.n	801a686 <RadioSetRxGenericConfig+0x2de>
 801a670:	20001e30 	.word	0x20001e30
 801a674:	20001e2c 	.word	0x20001e2c
 801a678:	20001ea4 	.word	0x20001ea4
 801a67c:	20001e68 	.word	0x20001e68
 801a680:	20001e3e 	.word	0x20001e3e
            break;
 801a684:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a686:	4b28      	ldr	r3, [pc, #160]	@ (801a728 <RadioSetRxGenericConfig+0x380>)
 801a688:	2201      	movs	r2, #1
 801a68a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a68c:	68bb      	ldr	r3, [r7, #8]
 801a68e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801a690:	4b25      	ldr	r3, [pc, #148]	@ (801a728 <RadioSetRxGenericConfig+0x380>)
 801a692:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a694:	68bb      	ldr	r3, [r7, #8]
 801a696:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801a69a:	4b23      	ldr	r3, [pc, #140]	@ (801a728 <RadioSetRxGenericConfig+0x380>)
 801a69c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a69e:	4a22      	ldr	r2, [pc, #136]	@ (801a728 <RadioSetRxGenericConfig+0x380>)
 801a6a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a6a4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a6a6:	68bb      	ldr	r3, [r7, #8]
 801a6a8:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801a6ac:	4b1e      	ldr	r3, [pc, #120]	@ (801a728 <RadioSetRxGenericConfig+0x380>)
 801a6ae:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a6b2:	68bb      	ldr	r3, [r7, #8]
 801a6b4:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 801a6b8:	4b1b      	ldr	r3, [pc, #108]	@ (801a728 <RadioSetRxGenericConfig+0x380>)
 801a6ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801a6be:	f7ff f98a 	bl	80199d6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a6c2:	2001      	movs	r0, #1
 801a6c4:	f7fe fb1e 	bl	8018d04 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a6c8:	4818      	ldr	r0, [pc, #96]	@ (801a72c <RadioSetRxGenericConfig+0x384>)
 801a6ca:	f000 ff87 	bl	801b5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a6ce:	4818      	ldr	r0, [pc, #96]	@ (801a730 <RadioSetRxGenericConfig+0x388>)
 801a6d0:	f001 f852 	bl	801b778 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a6d4:	4b14      	ldr	r3, [pc, #80]	@ (801a728 <RadioSetRxGenericConfig+0x380>)
 801a6d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801a6da:	2b01      	cmp	r3, #1
 801a6dc:	d10d      	bne.n	801a6fa <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a6de:	f240 7036 	movw	r0, #1846	@ 0x736
 801a6e2:	f001 f9b1 	bl	801ba48 <SUBGRF_ReadRegister>
 801a6e6:	4603      	mov	r3, r0
 801a6e8:	f023 0304 	bic.w	r3, r3, #4
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	4619      	mov	r1, r3
 801a6f0:	f240 7036 	movw	r0, #1846	@ 0x736
 801a6f4:	f001 f986 	bl	801ba04 <SUBGRF_WriteRegister>
 801a6f8:	e00c      	b.n	801a714 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a6fa:	f240 7036 	movw	r0, #1846	@ 0x736
 801a6fe:	f001 f9a3 	bl	801ba48 <SUBGRF_ReadRegister>
 801a702:	4603      	mov	r3, r0
 801a704:	f043 0304 	orr.w	r3, r3, #4
 801a708:	b2db      	uxtb	r3, r3
 801a70a:	4619      	mov	r1, r3
 801a70c:	f240 7036 	movw	r0, #1846	@ 0x736
 801a710:	f001 f978 	bl	801ba04 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a714:	4b04      	ldr	r3, [pc, #16]	@ (801a728 <RadioSetRxGenericConfig+0x380>)
 801a716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a71a:	609a      	str	r2, [r3, #8]
        break;
 801a71c:	bf00      	nop
    }
    return status;
 801a71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a720:	4618      	mov	r0, r3
 801a722:	3730      	adds	r7, #48	@ 0x30
 801a724:	46bd      	mov	sp, r7
 801a726:	bd80      	pop	{r7, pc}
 801a728:	20001e30 	.word	0x20001e30
 801a72c:	20001e68 	.word	0x20001e68
 801a730:	20001e3e 	.word	0x20001e3e

0801a734 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b08e      	sub	sp, #56	@ 0x38
 801a738:	af00      	add	r7, sp, #0
 801a73a:	60b9      	str	r1, [r7, #8]
 801a73c:	607b      	str	r3, [r7, #4]
 801a73e:	4603      	mov	r3, r0
 801a740:	73fb      	strb	r3, [r7, #15]
 801a742:	4613      	mov	r3, r2
 801a744:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a746:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a74a:	2200      	movs	r2, #0
 801a74c:	601a      	str	r2, [r3, #0]
 801a74e:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a750:	f001 fc59 	bl	801c006 <RFW_DeInit>
    switch( modem )
 801a754:	7bfb      	ldrb	r3, [r7, #15]
 801a756:	2b03      	cmp	r3, #3
 801a758:	f200 8205 	bhi.w	801ab66 <RadioSetTxGenericConfig+0x432>
 801a75c:	a201      	add	r2, pc, #4	@ (adr r2, 801a764 <RadioSetTxGenericConfig+0x30>)
 801a75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a762:	bf00      	nop
 801a764:	0801a8e9 	.word	0x0801a8e9
 801a768:	0801aa31 	.word	0x0801aa31
 801a76c:	0801ab29 	.word	0x0801ab29
 801a770:	0801a775 	.word	0x0801a775
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a774:	68bb      	ldr	r3, [r7, #8]
 801a776:	7c9b      	ldrb	r3, [r3, #18]
 801a778:	2b08      	cmp	r3, #8
 801a77a:	d902      	bls.n	801a782 <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 801a77c:	f04f 33ff 	mov.w	r3, #4294967295
 801a780:	e206      	b.n	801ab90 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801a782:	68bb      	ldr	r3, [r7, #8]
 801a784:	6899      	ldr	r1, [r3, #8]
 801a786:	68bb      	ldr	r3, [r7, #8]
 801a788:	7c9b      	ldrb	r3, [r3, #18]
 801a78a:	461a      	mov	r2, r3
 801a78c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a790:	4618      	mov	r0, r3
 801a792:	f001 fd2b 	bl	801c1ec <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d102      	bne.n	801a7a4 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 801a79e:	f04f 33ff 	mov.w	r3, #4294967295
 801a7a2:	e1f5      	b.n	801ab90 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 801a7a4:	68bb      	ldr	r3, [r7, #8]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	f242 7210 	movw	r2, #10000	@ 0x2710
 801a7ac:	4293      	cmp	r3, r2
 801a7ae:	d813      	bhi.n	801a7d8 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801a7b0:	2302      	movs	r3, #2
 801a7b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a7b6:	4b99      	ldr	r3, [pc, #612]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a7b8:	2203      	movs	r2, #3
 801a7ba:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a7bc:	4b97      	ldr	r3, [pc, #604]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a7be:	2203      	movs	r2, #3
 801a7c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	4a94      	ldr	r2, [pc, #592]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a7ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a7cc:	68bb      	ldr	r3, [r7, #8]
 801a7ce:	7cda      	ldrb	r2, [r3, #19]
 801a7d0:	4b92      	ldr	r3, [pc, #584]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a7d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a7d6:	e017      	b.n	801a808 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801a7d8:	2300      	movs	r3, #0
 801a7da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a7de:	4b8f      	ldr	r3, [pc, #572]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a7e4:	4b8d      	ldr	r3, [pc, #564]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a7e6:	2200      	movs	r2, #0
 801a7e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a7ec:	68bb      	ldr	r3, [r7, #8]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	4a8a      	ldr	r2, [pc, #552]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a7f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	7cda      	ldrb	r2, [r3, #19]
 801a7f8:	4b88      	ldr	r3, [pc, #544]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a7fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801a7fe:	68bb      	ldr	r3, [r7, #8]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	089b      	lsrs	r3, r3, #2
 801a804:	4a85      	ldr	r2, [pc, #532]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a806:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a808:	68bb      	ldr	r3, [r7, #8]
 801a80a:	685b      	ldr	r3, [r3, #4]
 801a80c:	b29b      	uxth	r3, r3
 801a80e:	00db      	lsls	r3, r3, #3
 801a810:	b29a      	uxth	r2, r3
 801a812:	4b82      	ldr	r3, [pc, #520]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a814:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a816:	4b81      	ldr	r3, [pc, #516]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a818:	2204      	movs	r2, #4
 801a81a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801a81c:	68bb      	ldr	r3, [r7, #8]
 801a81e:	7c9b      	ldrb	r3, [r3, #18]
 801a820:	00db      	lsls	r3, r3, #3
 801a822:	b2da      	uxtb	r2, r3
 801a824:	4b7d      	ldr	r3, [pc, #500]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a826:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a828:	4b7c      	ldr	r3, [pc, #496]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a82a:	2200      	movs	r2, #0
 801a82c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a82e:	68bb      	ldr	r3, [r7, #8]
 801a830:	7d9b      	ldrb	r3, [r3, #22]
 801a832:	2b02      	cmp	r3, #2
 801a834:	d003      	beq.n	801a83e <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a836:	68bb      	ldr	r3, [r7, #8]
 801a838:	7d1b      	ldrb	r3, [r3, #20]
 801a83a:	2b02      	cmp	r3, #2
 801a83c:	d12b      	bne.n	801a896 <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a83e:	68bb      	ldr	r3, [r7, #8]
 801a840:	7d5b      	ldrb	r3, [r3, #21]
 801a842:	2bf1      	cmp	r3, #241	@ 0xf1
 801a844:	d00a      	beq.n	801a85c <RadioSetTxGenericConfig+0x128>
 801a846:	68bb      	ldr	r3, [r7, #8]
 801a848:	7d5b      	ldrb	r3, [r3, #21]
 801a84a:	2bf2      	cmp	r3, #242	@ 0xf2
 801a84c:	d006      	beq.n	801a85c <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a84e:	68bb      	ldr	r3, [r7, #8]
 801a850:	7d5b      	ldrb	r3, [r3, #21]
 801a852:	2b01      	cmp	r3, #1
 801a854:	d002      	beq.n	801a85c <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 801a856:	f04f 33ff 	mov.w	r3, #4294967295
 801a85a:	e199      	b.n	801ab90 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801a85c:	68bb      	ldr	r3, [r7, #8]
 801a85e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801a860:	2301      	movs	r3, #1
 801a862:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a866:	4b6e      	ldr	r3, [pc, #440]	@ (801aa20 <RadioSetTxGenericConfig+0x2ec>)
 801a868:	6819      	ldr	r1, [r3, #0]
 801a86a:	f107 0320 	add.w	r3, r7, #32
 801a86e:	4a6d      	ldr	r2, [pc, #436]	@ (801aa24 <RadioSetTxGenericConfig+0x2f0>)
 801a870:	4618      	mov	r0, r3
 801a872:	f001 fbbb 	bl	801bfec <RFW_Init>
 801a876:	4603      	mov	r3, r0
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d002      	beq.n	801a882 <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 801a87c:	f04f 33ff 	mov.w	r3, #4294967295
 801a880:	e186      	b.n	801ab90 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a882:	4b66      	ldr	r3, [pc, #408]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a884:	2200      	movs	r2, #0
 801a886:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a888:	4b64      	ldr	r3, [pc, #400]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a88a:	2201      	movs	r2, #1
 801a88c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a88e:	4b63      	ldr	r3, [pc, #396]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a890:	2200      	movs	r2, #0
 801a892:	755a      	strb	r2, [r3, #21]
        {
 801a894:	e00b      	b.n	801a8ae <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a896:	68bb      	ldr	r3, [r7, #8]
 801a898:	7d5a      	ldrb	r2, [r3, #21]
 801a89a:	4b60      	ldr	r3, [pc, #384]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a89c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a89e:	68bb      	ldr	r3, [r7, #8]
 801a8a0:	7d9a      	ldrb	r2, [r3, #22]
 801a8a2:	4b5e      	ldr	r3, [pc, #376]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a8a4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a8a6:	68bb      	ldr	r3, [r7, #8]
 801a8a8:	7d1a      	ldrb	r2, [r3, #20]
 801a8aa:	4b5c      	ldr	r3, [pc, #368]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a8ac:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a8ae:	f7ff f892 	bl	80199d6 <RadioStandby>
        RadioSetModem( radio_modem );
 801a8b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f7fe fa24 	bl	8018d04 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a8bc:	485a      	ldr	r0, [pc, #360]	@ (801aa28 <RadioSetTxGenericConfig+0x2f4>)
 801a8be:	f000 fe8d 	bl	801b5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a8c2:	485a      	ldr	r0, [pc, #360]	@ (801aa2c <RadioSetTxGenericConfig+0x2f8>)
 801a8c4:	f000 ff58 	bl	801b778 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a8c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	f000 fa18 	bl	801ad02 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a8d2:	68bb      	ldr	r3, [r7, #8]
 801a8d4:	8a1b      	ldrh	r3, [r3, #16]
 801a8d6:	4618      	mov	r0, r3
 801a8d8:	f000 fa62 	bl	801ada0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801a8dc:	68bb      	ldr	r3, [r7, #8]
 801a8de:	899b      	ldrh	r3, [r3, #12]
 801a8e0:	4618      	mov	r0, r3
 801a8e2:	f000 fa3d 	bl	801ad60 <SUBGRF_SetCrcPolynomial>
        break;
 801a8e6:	e13f      	b.n	801ab68 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d102      	bne.n	801a8f6 <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 801a8f0:	f04f 33ff 	mov.w	r3, #4294967295
 801a8f4:	e14c      	b.n	801ab90 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a8f6:	68bb      	ldr	r3, [r7, #8]
 801a8f8:	7c9b      	ldrb	r3, [r3, #18]
 801a8fa:	2b08      	cmp	r3, #8
 801a8fc:	d902      	bls.n	801a904 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 801a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a902:	e145      	b.n	801ab90 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a904:	68bb      	ldr	r3, [r7, #8]
 801a906:	6899      	ldr	r1, [r3, #8]
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	7c9b      	ldrb	r3, [r3, #18]
 801a90c:	461a      	mov	r2, r3
 801a90e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a912:	4618      	mov	r0, r3
 801a914:	f001 fc6a 	bl	801c1ec <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a918:	4b40      	ldr	r3, [pc, #256]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a91a:	2200      	movs	r2, #0
 801a91c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	4a3d      	ldr	r2, [pc, #244]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a926:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a928:	68bb      	ldr	r3, [r7, #8]
 801a92a:	7cda      	ldrb	r2, [r3, #19]
 801a92c:	4b3b      	ldr	r3, [pc, #236]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a92e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a932:	68bb      	ldr	r3, [r7, #8]
 801a934:	699b      	ldr	r3, [r3, #24]
 801a936:	4a39      	ldr	r2, [pc, #228]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a938:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a93a:	4b38      	ldr	r3, [pc, #224]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a93c:	2200      	movs	r2, #0
 801a93e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a940:	68bb      	ldr	r3, [r7, #8]
 801a942:	685b      	ldr	r3, [r3, #4]
 801a944:	b29b      	uxth	r3, r3
 801a946:	00db      	lsls	r3, r3, #3
 801a948:	b29a      	uxth	r2, r3
 801a94a:	4b34      	ldr	r3, [pc, #208]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a94c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a94e:	4b33      	ldr	r3, [pc, #204]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a950:	2204      	movs	r2, #4
 801a952:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a954:	68bb      	ldr	r3, [r7, #8]
 801a956:	7c9b      	ldrb	r3, [r3, #18]
 801a958:	00db      	lsls	r3, r3, #3
 801a95a:	b2da      	uxtb	r2, r3
 801a95c:	4b2f      	ldr	r3, [pc, #188]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a95e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a960:	4b2e      	ldr	r3, [pc, #184]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a962:	2200      	movs	r2, #0
 801a964:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	7d9b      	ldrb	r3, [r3, #22]
 801a96a:	2b02      	cmp	r3, #2
 801a96c:	d003      	beq.n	801a976 <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a96e:	68bb      	ldr	r3, [r7, #8]
 801a970:	7d1b      	ldrb	r3, [r3, #20]
 801a972:	2b02      	cmp	r3, #2
 801a974:	d12a      	bne.n	801a9cc <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a976:	68bb      	ldr	r3, [r7, #8]
 801a978:	7d5b      	ldrb	r3, [r3, #21]
 801a97a:	2bf1      	cmp	r3, #241	@ 0xf1
 801a97c:	d00a      	beq.n	801a994 <RadioSetTxGenericConfig+0x260>
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	7d5b      	ldrb	r3, [r3, #21]
 801a982:	2bf2      	cmp	r3, #242	@ 0xf2
 801a984:	d006      	beq.n	801a994 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a986:	68bb      	ldr	r3, [r7, #8]
 801a988:	7d5b      	ldrb	r3, [r3, #21]
 801a98a:	2b01      	cmp	r3, #1
 801a98c:	d002      	beq.n	801a994 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 801a98e:	f04f 33ff 	mov.w	r3, #4294967295
 801a992:	e0fd      	b.n	801ab90 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a994:	2301      	movs	r3, #1
 801a996:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a998:	68bb      	ldr	r3, [r7, #8]
 801a99a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a99c:	4b20      	ldr	r3, [pc, #128]	@ (801aa20 <RadioSetTxGenericConfig+0x2ec>)
 801a99e:	6819      	ldr	r1, [r3, #0]
 801a9a0:	f107 0314 	add.w	r3, r7, #20
 801a9a4:	4a1f      	ldr	r2, [pc, #124]	@ (801aa24 <RadioSetTxGenericConfig+0x2f0>)
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	f001 fb20 	bl	801bfec <RFW_Init>
 801a9ac:	4603      	mov	r3, r0
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d002      	beq.n	801a9b8 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 801a9b2:	f04f 33ff 	mov.w	r3, #4294967295
 801a9b6:	e0eb      	b.n	801ab90 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a9b8:	4b18      	ldr	r3, [pc, #96]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a9be:	4b17      	ldr	r3, [pc, #92]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a9c0:	2201      	movs	r2, #1
 801a9c2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a9c4:	4b15      	ldr	r3, [pc, #84]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	755a      	strb	r2, [r3, #21]
        {
 801a9ca:	e00b      	b.n	801a9e4 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a9cc:	68bb      	ldr	r3, [r7, #8]
 801a9ce:	7d5a      	ldrb	r2, [r3, #21]
 801a9d0:	4b12      	ldr	r3, [pc, #72]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a9d2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	7d9a      	ldrb	r2, [r3, #22]
 801a9d8:	4b10      	ldr	r3, [pc, #64]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a9da:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	7d1a      	ldrb	r2, [r3, #20]
 801a9e0:	4b0e      	ldr	r3, [pc, #56]	@ (801aa1c <RadioSetTxGenericConfig+0x2e8>)
 801a9e2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a9e4:	f7fe fff7 	bl	80199d6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a9e8:	2000      	movs	r0, #0
 801a9ea:	f7fe f98b 	bl	8018d04 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a9ee:	480e      	ldr	r0, [pc, #56]	@ (801aa28 <RadioSetTxGenericConfig+0x2f4>)
 801a9f0:	f000 fdf4 	bl	801b5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a9f4:	480d      	ldr	r0, [pc, #52]	@ (801aa2c <RadioSetTxGenericConfig+0x2f8>)
 801a9f6:	f000 febf 	bl	801b778 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a9fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a9fe:	4618      	mov	r0, r3
 801aa00:	f000 f97f 	bl	801ad02 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	8a1b      	ldrh	r3, [r3, #16]
 801aa08:	4618      	mov	r0, r3
 801aa0a:	f000 f9c9 	bl	801ada0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801aa0e:	68bb      	ldr	r3, [r7, #8]
 801aa10:	899b      	ldrh	r3, [r3, #12]
 801aa12:	4618      	mov	r0, r3
 801aa14:	f000 f9a4 	bl	801ad60 <SUBGRF_SetCrcPolynomial>
        break;
 801aa18:	e0a6      	b.n	801ab68 <RadioSetTxGenericConfig+0x434>
 801aa1a:	bf00      	nop
 801aa1c:	20001e30 	.word	0x20001e30
 801aa20:	20001e2c 	.word	0x20001e2c
 801aa24:	20001e8c 	.word	0x20001e8c
 801aa28:	20001e68 	.word	0x20001e68
 801aa2c:	20001e3e 	.word	0x20001e3e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801aa30:	4b59      	ldr	r3, [pc, #356]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aa32:	2201      	movs	r2, #1
 801aa34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801aa38:	68bb      	ldr	r3, [r7, #8]
 801aa3a:	781a      	ldrb	r2, [r3, #0]
 801aa3c:	4b56      	ldr	r3, [pc, #344]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aa3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801aa42:	68bb      	ldr	r3, [r7, #8]
 801aa44:	785a      	ldrb	r2, [r3, #1]
 801aa46:	4b54      	ldr	r3, [pc, #336]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aa48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	789a      	ldrb	r2, [r3, #2]
 801aa50:	4b51      	ldr	r3, [pc, #324]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aa52:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801aa56:	68bb      	ldr	r3, [r7, #8]
 801aa58:	78db      	ldrb	r3, [r3, #3]
 801aa5a:	2b02      	cmp	r3, #2
 801aa5c:	d010      	beq.n	801aa80 <RadioSetTxGenericConfig+0x34c>
 801aa5e:	2b02      	cmp	r3, #2
 801aa60:	dc20      	bgt.n	801aaa4 <RadioSetTxGenericConfig+0x370>
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d002      	beq.n	801aa6c <RadioSetTxGenericConfig+0x338>
 801aa66:	2b01      	cmp	r3, #1
 801aa68:	d005      	beq.n	801aa76 <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801aa6a:	e01b      	b.n	801aaa4 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aa6c:	4b4a      	ldr	r3, [pc, #296]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aa6e:	2200      	movs	r2, #0
 801aa70:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aa74:	e017      	b.n	801aaa6 <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aa76:	4b48      	ldr	r3, [pc, #288]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aa78:	2201      	movs	r2, #1
 801aa7a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aa7e:	e012      	b.n	801aaa6 <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801aa80:	68bb      	ldr	r3, [r7, #8]
 801aa82:	781b      	ldrb	r3, [r3, #0]
 801aa84:	2b0b      	cmp	r3, #11
 801aa86:	d003      	beq.n	801aa90 <RadioSetTxGenericConfig+0x35c>
 801aa88:	68bb      	ldr	r3, [r7, #8]
 801aa8a:	781b      	ldrb	r3, [r3, #0]
 801aa8c:	2b0c      	cmp	r3, #12
 801aa8e:	d104      	bne.n	801aa9a <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aa90:	4b41      	ldr	r3, [pc, #260]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aa92:	2201      	movs	r2, #1
 801aa94:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aa98:	e005      	b.n	801aaa6 <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aa9a:	4b3f      	ldr	r3, [pc, #252]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aaa2:	e000      	b.n	801aaa6 <RadioSetTxGenericConfig+0x372>
            break;
 801aaa4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801aaa6:	4b3c      	ldr	r3, [pc, #240]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aaa8:	2201      	movs	r2, #1
 801aaaa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801aaac:	68bb      	ldr	r3, [r7, #8]
 801aaae:	889a      	ldrh	r2, [r3, #4]
 801aab0:	4b39      	ldr	r3, [pc, #228]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aab2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801aab4:	68bb      	ldr	r3, [r7, #8]
 801aab6:	799a      	ldrb	r2, [r3, #6]
 801aab8:	4b37      	ldr	r3, [pc, #220]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aaba:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801aabc:	68bb      	ldr	r3, [r7, #8]
 801aabe:	79da      	ldrb	r2, [r3, #7]
 801aac0:	4b35      	ldr	r3, [pc, #212]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aac2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801aac6:	68bb      	ldr	r3, [r7, #8]
 801aac8:	7a1a      	ldrb	r2, [r3, #8]
 801aaca:	4b33      	ldr	r3, [pc, #204]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aacc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801aad0:	f7fe ff81 	bl	80199d6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801aad4:	2001      	movs	r0, #1
 801aad6:	f7fe f915 	bl	8018d04 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aada:	4830      	ldr	r0, [pc, #192]	@ (801ab9c <RadioSetTxGenericConfig+0x468>)
 801aadc:	f000 fd7e 	bl	801b5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aae0:	482f      	ldr	r0, [pc, #188]	@ (801aba0 <RadioSetTxGenericConfig+0x46c>)
 801aae2:	f000 fe49 	bl	801b778 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801aae6:	4b2c      	ldr	r3, [pc, #176]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801aae8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801aaec:	2b06      	cmp	r3, #6
 801aaee:	d10d      	bne.n	801ab0c <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801aaf0:	f640 0089 	movw	r0, #2185	@ 0x889
 801aaf4:	f000 ffa8 	bl	801ba48 <SUBGRF_ReadRegister>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	f023 0304 	bic.w	r3, r3, #4
 801aafe:	b2db      	uxtb	r3, r3
 801ab00:	4619      	mov	r1, r3
 801ab02:	f640 0089 	movw	r0, #2185	@ 0x889
 801ab06:	f000 ff7d 	bl	801ba04 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801ab0a:	e02d      	b.n	801ab68 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ab0c:	f640 0089 	movw	r0, #2185	@ 0x889
 801ab10:	f000 ff9a 	bl	801ba48 <SUBGRF_ReadRegister>
 801ab14:	4603      	mov	r3, r0
 801ab16:	f043 0304 	orr.w	r3, r3, #4
 801ab1a:	b2db      	uxtb	r3, r3
 801ab1c:	4619      	mov	r1, r3
 801ab1e:	f640 0089 	movw	r0, #2185	@ 0x889
 801ab22:	f000 ff6f 	bl	801ba04 <SUBGRF_WriteRegister>
        break;
 801ab26:	e01f      	b.n	801ab68 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d004      	beq.n	801ab3a <RadioSetTxGenericConfig+0x406>
 801ab30:	68bb      	ldr	r3, [r7, #8]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ab38:	d902      	bls.n	801ab40 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 801ab3a:	f04f 33ff 	mov.w	r3, #4294967295
 801ab3e:	e027      	b.n	801ab90 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 801ab40:	2003      	movs	r0, #3
 801ab42:	f7fe f8df 	bl	8018d04 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801ab46:	4b14      	ldr	r3, [pc, #80]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801ab48:	2202      	movs	r2, #2
 801ab4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801ab4e:	68bb      	ldr	r3, [r7, #8]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	4a11      	ldr	r2, [pc, #68]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801ab54:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801ab56:	4b10      	ldr	r3, [pc, #64]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801ab58:	2216      	movs	r2, #22
 801ab5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ab5e:	480f      	ldr	r0, [pc, #60]	@ (801ab9c <RadioSetTxGenericConfig+0x468>)
 801ab60:	f000 fd3c 	bl	801b5dc <SUBGRF_SetModulationParams>
        break;
 801ab64:	e000      	b.n	801ab68 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 801ab66:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801ab68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ab6c:	4618      	mov	r0, r3
 801ab6e:	f001 f87f 	bl	801bc70 <SUBGRF_SetRfTxPower>
 801ab72:	4603      	mov	r3, r0
 801ab74:	461a      	mov	r2, r3
 801ab76:	4b08      	ldr	r3, [pc, #32]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801ab78:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801ab7c:	4b06      	ldr	r3, [pc, #24]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801ab7e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801ab82:	4618      	mov	r0, r3
 801ab84:	f001 fa53 	bl	801c02e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801ab88:	4a03      	ldr	r2, [pc, #12]	@ (801ab98 <RadioSetTxGenericConfig+0x464>)
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	6053      	str	r3, [r2, #4]
    return 0;
 801ab8e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ab90:	4618      	mov	r0, r3
 801ab92:	3738      	adds	r7, #56	@ 0x38
 801ab94:	46bd      	mov	sp, r7
 801ab96:	bd80      	pop	{r7, pc}
 801ab98:	20001e30 	.word	0x20001e30
 801ab9c:	20001e68 	.word	0x20001e68
 801aba0:	20001e3e 	.word	0x20001e3e

0801aba4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801aba4:	b480      	push	{r7}
 801aba6:	b085      	sub	sp, #20
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801abac:	2301      	movs	r3, #1
 801abae:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801abb0:	7bfb      	ldrb	r3, [r7, #15]
}
 801abb2:	4618      	mov	r0, r3
 801abb4:	3714      	adds	r7, #20
 801abb6:	46bd      	mov	sp, r7
 801abb8:	bc80      	pop	{r7}
 801abba:	4770      	bx	lr

0801abbc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801abbc:	b480      	push	{r7}
 801abbe:	b083      	sub	sp, #12
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
 801abc4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801abc6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801abc8:	4618      	mov	r0, r3
 801abca:	370c      	adds	r7, #12
 801abcc:	46bd      	mov	sp, r7
 801abce:	bc80      	pop	{r7}
 801abd0:	4770      	bx	lr
	...

0801abd4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b084      	sub	sp, #16
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d002      	beq.n	801abe8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801abe2:	4a1d      	ldr	r2, [pc, #116]	@ (801ac58 <SUBGRF_Init+0x84>)
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801abe8:	f7e7 fc1e 	bl	8002428 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801abec:	2002      	movs	r0, #2
 801abee:	f001 f91b 	bl	801be28 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801abf2:	4b1a      	ldr	r3, [pc, #104]	@ (801ac5c <SUBGRF_Init+0x88>)
 801abf4:	2200      	movs	r2, #0
 801abf6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801abf8:	2000      	movs	r0, #0
 801abfa:	f000 f97f 	bl	801aefc <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801abfe:	f7f1 fab7 	bl	800c170 <RBI_IsTCXO>
 801ac02:	4603      	mov	r3, r0
 801ac04:	2b01      	cmp	r3, #1
 801ac06:	d10e      	bne.n	801ac26 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801ac08:	2140      	movs	r1, #64	@ 0x40
 801ac0a:	2001      	movs	r0, #1
 801ac0c:	f000 fb8a 	bl	801b324 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801ac10:	2100      	movs	r1, #0
 801ac12:	f640 1011 	movw	r0, #2321	@ 0x911
 801ac16:	f000 fef5 	bl	801ba04 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801ac1a:	237f      	movs	r3, #127	@ 0x7f
 801ac1c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801ac1e:	7b38      	ldrb	r0, [r7, #12]
 801ac20:	f000 fa8d 	bl	801b13e <SUBGRF_Calibrate>
 801ac24:	e009      	b.n	801ac3a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ac26:	2120      	movs	r1, #32
 801ac28:	f640 1011 	movw	r0, #2321	@ 0x911
 801ac2c:	f000 feea 	bl	801ba04 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ac30:	2120      	movs	r1, #32
 801ac32:	f640 1012 	movw	r0, #2322	@ 0x912
 801ac36:	f000 fee5 	bl	801ba04 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801ac3a:	210e      	movs	r1, #14
 801ac3c:	f640 101f 	movw	r0, #2335	@ 0x91f
 801ac40:	f000 fee0 	bl	801ba04 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801ac44:	f7f1 fa78 	bl	800c138 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801ac48:	4b05      	ldr	r3, [pc, #20]	@ (801ac60 <SUBGRF_Init+0x8c>)
 801ac4a:	2201      	movs	r2, #1
 801ac4c:	701a      	strb	r2, [r3, #0]
}
 801ac4e:	bf00      	nop
 801ac50:	3710      	adds	r7, #16
 801ac52:	46bd      	mov	sp, r7
 801ac54:	bd80      	pop	{r7, pc}
 801ac56:	bf00      	nop
 801ac58:	20001ec8 	.word	0x20001ec8
 801ac5c:	20001ec4 	.word	0x20001ec4
 801ac60:	20001ebc 	.word	0x20001ebc

0801ac64 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801ac64:	b480      	push	{r7}
 801ac66:	af00      	add	r7, sp, #0
    return OperatingMode;
 801ac68:	4b02      	ldr	r3, [pc, #8]	@ (801ac74 <SUBGRF_GetOperatingMode+0x10>)
 801ac6a:	781b      	ldrb	r3, [r3, #0]
}
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	bc80      	pop	{r7}
 801ac72:	4770      	bx	lr
 801ac74:	20001ebc 	.word	0x20001ebc

0801ac78 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b082      	sub	sp, #8
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
 801ac80:	460b      	mov	r3, r1
 801ac82:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801ac84:	78fb      	ldrb	r3, [r7, #3]
 801ac86:	461a      	mov	r2, r3
 801ac88:	6879      	ldr	r1, [r7, #4]
 801ac8a:	2000      	movs	r0, #0
 801ac8c:	f000 ff40 	bl	801bb10 <SUBGRF_WriteBuffer>
}
 801ac90:	bf00      	nop
 801ac92:	3708      	adds	r7, #8
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}

0801ac98 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801ac98:	b580      	push	{r7, lr}
 801ac9a:	b086      	sub	sp, #24
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	60f8      	str	r0, [r7, #12]
 801aca0:	60b9      	str	r1, [r7, #8]
 801aca2:	4613      	mov	r3, r2
 801aca4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801aca6:	2300      	movs	r3, #0
 801aca8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801acaa:	f107 0317 	add.w	r3, r7, #23
 801acae:	4619      	mov	r1, r3
 801acb0:	68b8      	ldr	r0, [r7, #8]
 801acb2:	f000 fe29 	bl	801b908 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801acb6:	68bb      	ldr	r3, [r7, #8]
 801acb8:	781b      	ldrb	r3, [r3, #0]
 801acba:	79fa      	ldrb	r2, [r7, #7]
 801acbc:	429a      	cmp	r2, r3
 801acbe:	d201      	bcs.n	801acc4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801acc0:	2301      	movs	r3, #1
 801acc2:	e007      	b.n	801acd4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801acc4:	7df8      	ldrb	r0, [r7, #23]
 801acc6:	68bb      	ldr	r3, [r7, #8]
 801acc8:	781b      	ldrb	r3, [r3, #0]
 801acca:	461a      	mov	r2, r3
 801accc:	68f9      	ldr	r1, [r7, #12]
 801acce:	f000 ff41 	bl	801bb54 <SUBGRF_ReadBuffer>

    return 0;
 801acd2:	2300      	movs	r3, #0
}
 801acd4:	4618      	mov	r0, r3
 801acd6:	3718      	adds	r7, #24
 801acd8:	46bd      	mov	sp, r7
 801acda:	bd80      	pop	{r7, pc}

0801acdc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b084      	sub	sp, #16
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	60f8      	str	r0, [r7, #12]
 801ace4:	460b      	mov	r3, r1
 801ace6:	607a      	str	r2, [r7, #4]
 801ace8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801acea:	7afb      	ldrb	r3, [r7, #11]
 801acec:	4619      	mov	r1, r3
 801acee:	68f8      	ldr	r0, [r7, #12]
 801acf0:	f7ff ffc2 	bl	801ac78 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801acf4:	6878      	ldr	r0, [r7, #4]
 801acf6:	f000 f91d 	bl	801af34 <SUBGRF_SetTx>
}
 801acfa:	bf00      	nop
 801acfc:	3710      	adds	r7, #16
 801acfe:	46bd      	mov	sp, r7
 801ad00:	bd80      	pop	{r7, pc}

0801ad02 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801ad02:	b580      	push	{r7, lr}
 801ad04:	b082      	sub	sp, #8
 801ad06:	af00      	add	r7, sp, #0
 801ad08:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801ad0a:	2208      	movs	r2, #8
 801ad0c:	6879      	ldr	r1, [r7, #4]
 801ad0e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801ad12:	f000 feb9 	bl	801ba88 <SUBGRF_WriteRegisters>
    return 0;
 801ad16:	2300      	movs	r3, #0
}
 801ad18:	4618      	mov	r0, r3
 801ad1a:	3708      	adds	r7, #8
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	bd80      	pop	{r7, pc}

0801ad20 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b084      	sub	sp, #16
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	4603      	mov	r3, r0
 801ad28:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801ad2a:	88fb      	ldrh	r3, [r7, #6]
 801ad2c:	0a1b      	lsrs	r3, r3, #8
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	b2db      	uxtb	r3, r3
 801ad32:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801ad34:	88fb      	ldrh	r3, [r7, #6]
 801ad36:	b2db      	uxtb	r3, r3
 801ad38:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ad3a:	f000 fb77 	bl	801b42c <SUBGRF_GetPacketType>
 801ad3e:	4603      	mov	r3, r0
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d108      	bne.n	801ad56 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801ad44:	f107 030c 	add.w	r3, r7, #12
 801ad48:	2202      	movs	r2, #2
 801ad4a:	4619      	mov	r1, r3
 801ad4c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801ad50:	f000 fe9a 	bl	801ba88 <SUBGRF_WriteRegisters>
            break;
 801ad54:	e000      	b.n	801ad58 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801ad56:	bf00      	nop
    }
}
 801ad58:	bf00      	nop
 801ad5a:	3710      	adds	r7, #16
 801ad5c:	46bd      	mov	sp, r7
 801ad5e:	bd80      	pop	{r7, pc}

0801ad60 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801ad60:	b580      	push	{r7, lr}
 801ad62:	b084      	sub	sp, #16
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	4603      	mov	r3, r0
 801ad68:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801ad6a:	88fb      	ldrh	r3, [r7, #6]
 801ad6c:	0a1b      	lsrs	r3, r3, #8
 801ad6e:	b29b      	uxth	r3, r3
 801ad70:	b2db      	uxtb	r3, r3
 801ad72:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801ad74:	88fb      	ldrh	r3, [r7, #6]
 801ad76:	b2db      	uxtb	r3, r3
 801ad78:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ad7a:	f000 fb57 	bl	801b42c <SUBGRF_GetPacketType>
 801ad7e:	4603      	mov	r3, r0
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d108      	bne.n	801ad96 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801ad84:	f107 030c 	add.w	r3, r7, #12
 801ad88:	2202      	movs	r2, #2
 801ad8a:	4619      	mov	r1, r3
 801ad8c:	f240 60be 	movw	r0, #1726	@ 0x6be
 801ad90:	f000 fe7a 	bl	801ba88 <SUBGRF_WriteRegisters>
            break;
 801ad94:	e000      	b.n	801ad98 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801ad96:	bf00      	nop
    }
}
 801ad98:	bf00      	nop
 801ad9a:	3710      	adds	r7, #16
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}

0801ada0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b084      	sub	sp, #16
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	4603      	mov	r3, r0
 801ada8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801adaa:	2300      	movs	r3, #0
 801adac:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801adae:	f000 fb3d 	bl	801b42c <SUBGRF_GetPacketType>
 801adb2:	4603      	mov	r3, r0
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d121      	bne.n	801adfc <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801adb8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801adbc:	f000 fe44 	bl	801ba48 <SUBGRF_ReadRegister>
 801adc0:	4603      	mov	r3, r0
 801adc2:	f023 0301 	bic.w	r3, r3, #1
 801adc6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801adc8:	88fb      	ldrh	r3, [r7, #6]
 801adca:	0a1b      	lsrs	r3, r3, #8
 801adcc:	b29b      	uxth	r3, r3
 801adce:	b25b      	sxtb	r3, r3
 801add0:	f003 0301 	and.w	r3, r3, #1
 801add4:	b25a      	sxtb	r2, r3
 801add6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801adda:	4313      	orrs	r3, r2
 801addc:	b25b      	sxtb	r3, r3
 801adde:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801ade0:	7bfb      	ldrb	r3, [r7, #15]
 801ade2:	4619      	mov	r1, r3
 801ade4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801ade8:	f000 fe0c 	bl	801ba04 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801adec:	88fb      	ldrh	r3, [r7, #6]
 801adee:	b2db      	uxtb	r3, r3
 801adf0:	4619      	mov	r1, r3
 801adf2:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801adf6:	f000 fe05 	bl	801ba04 <SUBGRF_WriteRegister>
            break;
 801adfa:	e000      	b.n	801adfe <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801adfc:	bf00      	nop
    }
}
 801adfe:	bf00      	nop
 801ae00:	3710      	adds	r7, #16
 801ae02:	46bd      	mov	sp, r7
 801ae04:	bd80      	pop	{r7, pc}

0801ae06 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801ae06:	b580      	push	{r7, lr}
 801ae08:	b082      	sub	sp, #8
 801ae0a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801ae10:	2300      	movs	r3, #0
 801ae12:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801ae14:	2300      	movs	r3, #0
 801ae16:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801ae18:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801ae1c:	f000 fe14 	bl	801ba48 <SUBGRF_ReadRegister>
 801ae20:	4603      	mov	r3, r0
 801ae22:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801ae24:	79fb      	ldrb	r3, [r7, #7]
 801ae26:	f023 0301 	bic.w	r3, r3, #1
 801ae2a:	b2db      	uxtb	r3, r3
 801ae2c:	4619      	mov	r1, r3
 801ae2e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801ae32:	f000 fde7 	bl	801ba04 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801ae36:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801ae3a:	f000 fe05 	bl	801ba48 <SUBGRF_ReadRegister>
 801ae3e:	4603      	mov	r3, r0
 801ae40:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801ae42:	79bb      	ldrb	r3, [r7, #6]
 801ae44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ae48:	b2db      	uxtb	r3, r3
 801ae4a:	4619      	mov	r1, r3
 801ae4c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801ae50:	f000 fdd8 	bl	801ba04 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801ae54:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801ae58:	f000 f88c 	bl	801af74 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801ae5c:	463b      	mov	r3, r7
 801ae5e:	2204      	movs	r2, #4
 801ae60:	4619      	mov	r1, r3
 801ae62:	f640 0019 	movw	r0, #2073	@ 0x819
 801ae66:	f000 fe31 	bl	801bacc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801ae6a:	2000      	movs	r0, #0
 801ae6c:	f000 f846 	bl	801aefc <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801ae70:	79fb      	ldrb	r3, [r7, #7]
 801ae72:	4619      	mov	r1, r3
 801ae74:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801ae78:	f000 fdc4 	bl	801ba04 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801ae7c:	79bb      	ldrb	r3, [r7, #6]
 801ae7e:	4619      	mov	r1, r3
 801ae80:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801ae84:	f000 fdbe 	bl	801ba04 <SUBGRF_WriteRegister>

    return number;
 801ae88:	683b      	ldr	r3, [r7, #0]
}
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	3708      	adds	r7, #8
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	bd80      	pop	{r7, pc}
	...

0801ae94 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b084      	sub	sp, #16
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801ae9c:	2000      	movs	r0, #0
 801ae9e:	f7f1 f952 	bl	800c146 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801aea2:	2002      	movs	r0, #2
 801aea4:	f000 ffc0 	bl	801be28 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aea8:	793b      	ldrb	r3, [r7, #4]
 801aeaa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801aeae:	b2db      	uxtb	r3, r3
 801aeb0:	b25b      	sxtb	r3, r3
 801aeb2:	009b      	lsls	r3, r3, #2
 801aeb4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801aeb6:	793b      	ldrb	r3, [r7, #4]
 801aeb8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801aebc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aebe:	b25b      	sxtb	r3, r3
 801aec0:	005b      	lsls	r3, r3, #1
 801aec2:	b25b      	sxtb	r3, r3
 801aec4:	4313      	orrs	r3, r2
 801aec6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801aec8:	793b      	ldrb	r3, [r7, #4]
 801aeca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801aece:	b2db      	uxtb	r3, r3
 801aed0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801aed2:	4313      	orrs	r3, r2
 801aed4:	b25b      	sxtb	r3, r3
 801aed6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aed8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801aeda:	f107 030f 	add.w	r3, r7, #15
 801aede:	2201      	movs	r2, #1
 801aee0:	4619      	mov	r1, r3
 801aee2:	2084      	movs	r0, #132	@ 0x84
 801aee4:	f000 fe58 	bl	801bb98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801aee8:	4b03      	ldr	r3, [pc, #12]	@ (801aef8 <SUBGRF_SetSleep+0x64>)
 801aeea:	2200      	movs	r2, #0
 801aeec:	701a      	strb	r2, [r3, #0]
}
 801aeee:	bf00      	nop
 801aef0:	3710      	adds	r7, #16
 801aef2:	46bd      	mov	sp, r7
 801aef4:	bd80      	pop	{r7, pc}
 801aef6:	bf00      	nop
 801aef8:	20001ebc 	.word	0x20001ebc

0801aefc <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b082      	sub	sp, #8
 801af00:	af00      	add	r7, sp, #0
 801af02:	4603      	mov	r3, r0
 801af04:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801af06:	1dfb      	adds	r3, r7, #7
 801af08:	2201      	movs	r2, #1
 801af0a:	4619      	mov	r1, r3
 801af0c:	2080      	movs	r0, #128	@ 0x80
 801af0e:	f000 fe43 	bl	801bb98 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801af12:	79fb      	ldrb	r3, [r7, #7]
 801af14:	2b00      	cmp	r3, #0
 801af16:	d103      	bne.n	801af20 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801af18:	4b05      	ldr	r3, [pc, #20]	@ (801af30 <SUBGRF_SetStandby+0x34>)
 801af1a:	2201      	movs	r2, #1
 801af1c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801af1e:	e002      	b.n	801af26 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801af20:	4b03      	ldr	r3, [pc, #12]	@ (801af30 <SUBGRF_SetStandby+0x34>)
 801af22:	2202      	movs	r2, #2
 801af24:	701a      	strb	r2, [r3, #0]
}
 801af26:	bf00      	nop
 801af28:	3708      	adds	r7, #8
 801af2a:	46bd      	mov	sp, r7
 801af2c:	bd80      	pop	{r7, pc}
 801af2e:	bf00      	nop
 801af30:	20001ebc 	.word	0x20001ebc

0801af34 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801af34:	b580      	push	{r7, lr}
 801af36:	b084      	sub	sp, #16
 801af38:	af00      	add	r7, sp, #0
 801af3a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801af3c:	4b0c      	ldr	r3, [pc, #48]	@ (801af70 <SUBGRF_SetTx+0x3c>)
 801af3e:	2204      	movs	r2, #4
 801af40:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	0c1b      	lsrs	r3, r3, #16
 801af46:	b2db      	uxtb	r3, r3
 801af48:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	0a1b      	lsrs	r3, r3, #8
 801af4e:	b2db      	uxtb	r3, r3
 801af50:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	b2db      	uxtb	r3, r3
 801af56:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801af58:	f107 030c 	add.w	r3, r7, #12
 801af5c:	2203      	movs	r2, #3
 801af5e:	4619      	mov	r1, r3
 801af60:	2083      	movs	r0, #131	@ 0x83
 801af62:	f000 fe19 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801af66:	bf00      	nop
 801af68:	3710      	adds	r7, #16
 801af6a:	46bd      	mov	sp, r7
 801af6c:	bd80      	pop	{r7, pc}
 801af6e:	bf00      	nop
 801af70:	20001ebc 	.word	0x20001ebc

0801af74 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b084      	sub	sp, #16
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801af7c:	4b0c      	ldr	r3, [pc, #48]	@ (801afb0 <SUBGRF_SetRx+0x3c>)
 801af7e:	2205      	movs	r2, #5
 801af80:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	0c1b      	lsrs	r3, r3, #16
 801af86:	b2db      	uxtb	r3, r3
 801af88:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	0a1b      	lsrs	r3, r3, #8
 801af8e:	b2db      	uxtb	r3, r3
 801af90:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	b2db      	uxtb	r3, r3
 801af96:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801af98:	f107 030c 	add.w	r3, r7, #12
 801af9c:	2203      	movs	r2, #3
 801af9e:	4619      	mov	r1, r3
 801afa0:	2082      	movs	r0, #130	@ 0x82
 801afa2:	f000 fdf9 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801afa6:	bf00      	nop
 801afa8:	3710      	adds	r7, #16
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}
 801afae:	bf00      	nop
 801afb0:	20001ebc 	.word	0x20001ebc

0801afb4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b084      	sub	sp, #16
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801afbc:	4b0e      	ldr	r3, [pc, #56]	@ (801aff8 <SUBGRF_SetRxBoosted+0x44>)
 801afbe:	2205      	movs	r2, #5
 801afc0:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801afc2:	2197      	movs	r1, #151	@ 0x97
 801afc4:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801afc8:	f000 fd1c 	bl	801ba04 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	0c1b      	lsrs	r3, r3, #16
 801afd0:	b2db      	uxtb	r3, r3
 801afd2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	0a1b      	lsrs	r3, r3, #8
 801afd8:	b2db      	uxtb	r3, r3
 801afda:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	b2db      	uxtb	r3, r3
 801afe0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801afe2:	f107 030c 	add.w	r3, r7, #12
 801afe6:	2203      	movs	r2, #3
 801afe8:	4619      	mov	r1, r3
 801afea:	2082      	movs	r0, #130	@ 0x82
 801afec:	f000 fdd4 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801aff0:	bf00      	nop
 801aff2:	3710      	adds	r7, #16
 801aff4:	46bd      	mov	sp, r7
 801aff6:	bd80      	pop	{r7, pc}
 801aff8:	20001ebc 	.word	0x20001ebc

0801affc <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801affc:	b580      	push	{r7, lr}
 801affe:	b084      	sub	sp, #16
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
 801b004:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	0c1b      	lsrs	r3, r3, #16
 801b00a:	b2db      	uxtb	r3, r3
 801b00c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	0a1b      	lsrs	r3, r3, #8
 801b012:	b2db      	uxtb	r3, r3
 801b014:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	b2db      	uxtb	r3, r3
 801b01a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b01c:	683b      	ldr	r3, [r7, #0]
 801b01e:	0c1b      	lsrs	r3, r3, #16
 801b020:	b2db      	uxtb	r3, r3
 801b022:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	0a1b      	lsrs	r3, r3, #8
 801b028:	b2db      	uxtb	r3, r3
 801b02a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b02c:	683b      	ldr	r3, [r7, #0]
 801b02e:	b2db      	uxtb	r3, r3
 801b030:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b032:	f107 0308 	add.w	r3, r7, #8
 801b036:	2206      	movs	r2, #6
 801b038:	4619      	mov	r1, r3
 801b03a:	2094      	movs	r0, #148	@ 0x94
 801b03c:	f000 fdac 	bl	801bb98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b040:	4b03      	ldr	r3, [pc, #12]	@ (801b050 <SUBGRF_SetRxDutyCycle+0x54>)
 801b042:	2206      	movs	r2, #6
 801b044:	701a      	strb	r2, [r3, #0]
}
 801b046:	bf00      	nop
 801b048:	3710      	adds	r7, #16
 801b04a:	46bd      	mov	sp, r7
 801b04c:	bd80      	pop	{r7, pc}
 801b04e:	bf00      	nop
 801b050:	20001ebc 	.word	0x20001ebc

0801b054 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b054:	b580      	push	{r7, lr}
 801b056:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b058:	2200      	movs	r2, #0
 801b05a:	2100      	movs	r1, #0
 801b05c:	20c5      	movs	r0, #197	@ 0xc5
 801b05e:	f000 fd9b 	bl	801bb98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b062:	4b02      	ldr	r3, [pc, #8]	@ (801b06c <SUBGRF_SetCad+0x18>)
 801b064:	2207      	movs	r2, #7
 801b066:	701a      	strb	r2, [r3, #0]
}
 801b068:	bf00      	nop
 801b06a:	bd80      	pop	{r7, pc}
 801b06c:	20001ebc 	.word	0x20001ebc

0801b070 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b070:	b580      	push	{r7, lr}
 801b072:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b074:	2200      	movs	r2, #0
 801b076:	2100      	movs	r1, #0
 801b078:	20d1      	movs	r0, #209	@ 0xd1
 801b07a:	f000 fd8d 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b07e:	bf00      	nop
 801b080:	bd80      	pop	{r7, pc}

0801b082 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b082:	b580      	push	{r7, lr}
 801b084:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b086:	2200      	movs	r2, #0
 801b088:	2100      	movs	r1, #0
 801b08a:	20d2      	movs	r0, #210	@ 0xd2
 801b08c:	f000 fd84 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b090:	bf00      	nop
 801b092:	bd80      	pop	{r7, pc}

0801b094 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b094:	b580      	push	{r7, lr}
 801b096:	b082      	sub	sp, #8
 801b098:	af00      	add	r7, sp, #0
 801b09a:	4603      	mov	r3, r0
 801b09c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b09e:	1dfb      	adds	r3, r7, #7
 801b0a0:	2201      	movs	r2, #1
 801b0a2:	4619      	mov	r1, r3
 801b0a4:	209f      	movs	r0, #159	@ 0x9f
 801b0a6:	f000 fd77 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b0aa:	bf00      	nop
 801b0ac:	3708      	adds	r7, #8
 801b0ae:	46bd      	mov	sp, r7
 801b0b0:	bd80      	pop	{r7, pc}

0801b0b2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b0b2:	b580      	push	{r7, lr}
 801b0b4:	b084      	sub	sp, #16
 801b0b6:	af00      	add	r7, sp, #0
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b0bc:	1dfb      	adds	r3, r7, #7
 801b0be:	2201      	movs	r2, #1
 801b0c0:	4619      	mov	r1, r3
 801b0c2:	20a0      	movs	r0, #160	@ 0xa0
 801b0c4:	f000 fd68 	bl	801bb98 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b0c8:	79fb      	ldrb	r3, [r7, #7]
 801b0ca:	2b3f      	cmp	r3, #63	@ 0x3f
 801b0cc:	d91c      	bls.n	801b108 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b0ce:	79fb      	ldrb	r3, [r7, #7]
 801b0d0:	085b      	lsrs	r3, r3, #1
 801b0d2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b0d8:	2300      	movs	r3, #0
 801b0da:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b0dc:	e005      	b.n	801b0ea <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b0de:	7bfb      	ldrb	r3, [r7, #15]
 801b0e0:	089b      	lsrs	r3, r3, #2
 801b0e2:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b0e4:	7bbb      	ldrb	r3, [r7, #14]
 801b0e6:	3301      	adds	r3, #1
 801b0e8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b0ea:	7bfb      	ldrb	r3, [r7, #15]
 801b0ec:	2b1f      	cmp	r3, #31
 801b0ee:	d8f6      	bhi.n	801b0de <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b0f0:	7bfb      	ldrb	r3, [r7, #15]
 801b0f2:	00db      	lsls	r3, r3, #3
 801b0f4:	b2da      	uxtb	r2, r3
 801b0f6:	7bbb      	ldrb	r3, [r7, #14]
 801b0f8:	4413      	add	r3, r2
 801b0fa:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b0fc:	7b7b      	ldrb	r3, [r7, #13]
 801b0fe:	4619      	mov	r1, r3
 801b100:	f240 7006 	movw	r0, #1798	@ 0x706
 801b104:	f000 fc7e 	bl	801ba04 <SUBGRF_WriteRegister>
    }
}
 801b108:	bf00      	nop
 801b10a:	3710      	adds	r7, #16
 801b10c:	46bd      	mov	sp, r7
 801b10e:	bd80      	pop	{r7, pc}

0801b110 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b110:	b580      	push	{r7, lr}
 801b112:	b082      	sub	sp, #8
 801b114:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b116:	f7f1 f832 	bl	800c17e <RBI_IsDCDC>
 801b11a:	4603      	mov	r3, r0
 801b11c:	2b01      	cmp	r3, #1
 801b11e:	d102      	bne.n	801b126 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b120:	2301      	movs	r3, #1
 801b122:	71fb      	strb	r3, [r7, #7]
 801b124:	e001      	b.n	801b12a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b126:	2300      	movs	r3, #0
 801b128:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b12a:	1dfb      	adds	r3, r7, #7
 801b12c:	2201      	movs	r2, #1
 801b12e:	4619      	mov	r1, r3
 801b130:	2096      	movs	r0, #150	@ 0x96
 801b132:	f000 fd31 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b136:	bf00      	nop
 801b138:	3708      	adds	r7, #8
 801b13a:	46bd      	mov	sp, r7
 801b13c:	bd80      	pop	{r7, pc}

0801b13e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b13e:	b580      	push	{r7, lr}
 801b140:	b084      	sub	sp, #16
 801b142:	af00      	add	r7, sp, #0
 801b144:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b146:	793b      	ldrb	r3, [r7, #4]
 801b148:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b14c:	b2db      	uxtb	r3, r3
 801b14e:	b25b      	sxtb	r3, r3
 801b150:	019b      	lsls	r3, r3, #6
 801b152:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b154:	793b      	ldrb	r3, [r7, #4]
 801b156:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b15a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b15c:	b25b      	sxtb	r3, r3
 801b15e:	015b      	lsls	r3, r3, #5
 801b160:	b25b      	sxtb	r3, r3
 801b162:	4313      	orrs	r3, r2
 801b164:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b166:	793b      	ldrb	r3, [r7, #4]
 801b168:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b16c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b16e:	b25b      	sxtb	r3, r3
 801b170:	011b      	lsls	r3, r3, #4
 801b172:	b25b      	sxtb	r3, r3
 801b174:	4313      	orrs	r3, r2
 801b176:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b178:	793b      	ldrb	r3, [r7, #4]
 801b17a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b17e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b180:	b25b      	sxtb	r3, r3
 801b182:	00db      	lsls	r3, r3, #3
 801b184:	b25b      	sxtb	r3, r3
 801b186:	4313      	orrs	r3, r2
 801b188:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b18a:	793b      	ldrb	r3, [r7, #4]
 801b18c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b190:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b192:	b25b      	sxtb	r3, r3
 801b194:	009b      	lsls	r3, r3, #2
 801b196:	b25b      	sxtb	r3, r3
 801b198:	4313      	orrs	r3, r2
 801b19a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b19c:	793b      	ldrb	r3, [r7, #4]
 801b19e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b1a2:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b1a4:	b25b      	sxtb	r3, r3
 801b1a6:	005b      	lsls	r3, r3, #1
 801b1a8:	b25b      	sxtb	r3, r3
 801b1aa:	4313      	orrs	r3, r2
 801b1ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b1ae:	793b      	ldrb	r3, [r7, #4]
 801b1b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b1b4:	b2db      	uxtb	r3, r3
 801b1b6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b1b8:	4313      	orrs	r3, r2
 801b1ba:	b25b      	sxtb	r3, r3
 801b1bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b1be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b1c0:	f107 030f 	add.w	r3, r7, #15
 801b1c4:	2201      	movs	r2, #1
 801b1c6:	4619      	mov	r1, r3
 801b1c8:	2089      	movs	r0, #137	@ 0x89
 801b1ca:	f000 fce5 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b1ce:	bf00      	nop
 801b1d0:	3710      	adds	r7, #16
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	bd80      	pop	{r7, pc}
	...

0801b1d8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b1d8:	b580      	push	{r7, lr}
 801b1da:	b084      	sub	sp, #16
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	4a1d      	ldr	r2, [pc, #116]	@ (801b258 <SUBGRF_CalibrateImage+0x80>)
 801b1e4:	4293      	cmp	r3, r2
 801b1e6:	d904      	bls.n	801b1f2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b1e8:	23e1      	movs	r3, #225	@ 0xe1
 801b1ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b1ec:	23e9      	movs	r3, #233	@ 0xe9
 801b1ee:	737b      	strb	r3, [r7, #13]
 801b1f0:	e027      	b.n	801b242 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	4a19      	ldr	r2, [pc, #100]	@ (801b25c <SUBGRF_CalibrateImage+0x84>)
 801b1f6:	4293      	cmp	r3, r2
 801b1f8:	d904      	bls.n	801b204 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b1fa:	23d7      	movs	r3, #215	@ 0xd7
 801b1fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b1fe:	23db      	movs	r3, #219	@ 0xdb
 801b200:	737b      	strb	r3, [r7, #13]
 801b202:	e01e      	b.n	801b242 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	4a16      	ldr	r2, [pc, #88]	@ (801b260 <SUBGRF_CalibrateImage+0x88>)
 801b208:	4293      	cmp	r3, r2
 801b20a:	d904      	bls.n	801b216 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b20c:	23c1      	movs	r3, #193	@ 0xc1
 801b20e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b210:	23c5      	movs	r3, #197	@ 0xc5
 801b212:	737b      	strb	r3, [r7, #13]
 801b214:	e015      	b.n	801b242 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	4a12      	ldr	r2, [pc, #72]	@ (801b264 <SUBGRF_CalibrateImage+0x8c>)
 801b21a:	4293      	cmp	r3, r2
 801b21c:	d904      	bls.n	801b228 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b21e:	2375      	movs	r3, #117	@ 0x75
 801b220:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b222:	2381      	movs	r3, #129	@ 0x81
 801b224:	737b      	strb	r3, [r7, #13]
 801b226:	e00c      	b.n	801b242 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	4a0f      	ldr	r2, [pc, #60]	@ (801b268 <SUBGRF_CalibrateImage+0x90>)
 801b22c:	4293      	cmp	r3, r2
 801b22e:	d904      	bls.n	801b23a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b230:	236b      	movs	r3, #107	@ 0x6b
 801b232:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b234:	236f      	movs	r3, #111	@ 0x6f
 801b236:	737b      	strb	r3, [r7, #13]
 801b238:	e003      	b.n	801b242 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b23a:	2329      	movs	r3, #41	@ 0x29
 801b23c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b23e:	232b      	movs	r3, #43	@ 0x2b
 801b240:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b242:	f107 030c 	add.w	r3, r7, #12
 801b246:	2202      	movs	r2, #2
 801b248:	4619      	mov	r1, r3
 801b24a:	2098      	movs	r0, #152	@ 0x98
 801b24c:	f000 fca4 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b250:	bf00      	nop
 801b252:	3710      	adds	r7, #16
 801b254:	46bd      	mov	sp, r7
 801b256:	bd80      	pop	{r7, pc}
 801b258:	35a4e900 	.word	0x35a4e900
 801b25c:	32a9f880 	.word	0x32a9f880
 801b260:	2de54480 	.word	0x2de54480
 801b264:	1b6b0b00 	.word	0x1b6b0b00
 801b268:	1954fc40 	.word	0x1954fc40

0801b26c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b26c:	b590      	push	{r4, r7, lr}
 801b26e:	b085      	sub	sp, #20
 801b270:	af00      	add	r7, sp, #0
 801b272:	4604      	mov	r4, r0
 801b274:	4608      	mov	r0, r1
 801b276:	4611      	mov	r1, r2
 801b278:	461a      	mov	r2, r3
 801b27a:	4623      	mov	r3, r4
 801b27c:	71fb      	strb	r3, [r7, #7]
 801b27e:	4603      	mov	r3, r0
 801b280:	71bb      	strb	r3, [r7, #6]
 801b282:	460b      	mov	r3, r1
 801b284:	717b      	strb	r3, [r7, #5]
 801b286:	4613      	mov	r3, r2
 801b288:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b28a:	79fb      	ldrb	r3, [r7, #7]
 801b28c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b28e:	79bb      	ldrb	r3, [r7, #6]
 801b290:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b292:	797b      	ldrb	r3, [r7, #5]
 801b294:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b296:	793b      	ldrb	r3, [r7, #4]
 801b298:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b29a:	f107 030c 	add.w	r3, r7, #12
 801b29e:	2204      	movs	r2, #4
 801b2a0:	4619      	mov	r1, r3
 801b2a2:	2095      	movs	r0, #149	@ 0x95
 801b2a4:	f000 fc78 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b2a8:	bf00      	nop
 801b2aa:	3714      	adds	r7, #20
 801b2ac:	46bd      	mov	sp, r7
 801b2ae:	bd90      	pop	{r4, r7, pc}

0801b2b0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b2b0:	b590      	push	{r4, r7, lr}
 801b2b2:	b085      	sub	sp, #20
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	4604      	mov	r4, r0
 801b2b8:	4608      	mov	r0, r1
 801b2ba:	4611      	mov	r1, r2
 801b2bc:	461a      	mov	r2, r3
 801b2be:	4623      	mov	r3, r4
 801b2c0:	80fb      	strh	r3, [r7, #6]
 801b2c2:	4603      	mov	r3, r0
 801b2c4:	80bb      	strh	r3, [r7, #4]
 801b2c6:	460b      	mov	r3, r1
 801b2c8:	807b      	strh	r3, [r7, #2]
 801b2ca:	4613      	mov	r3, r2
 801b2cc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b2ce:	88fb      	ldrh	r3, [r7, #6]
 801b2d0:	0a1b      	lsrs	r3, r3, #8
 801b2d2:	b29b      	uxth	r3, r3
 801b2d4:	b2db      	uxtb	r3, r3
 801b2d6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b2d8:	88fb      	ldrh	r3, [r7, #6]
 801b2da:	b2db      	uxtb	r3, r3
 801b2dc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b2de:	88bb      	ldrh	r3, [r7, #4]
 801b2e0:	0a1b      	lsrs	r3, r3, #8
 801b2e2:	b29b      	uxth	r3, r3
 801b2e4:	b2db      	uxtb	r3, r3
 801b2e6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b2e8:	88bb      	ldrh	r3, [r7, #4]
 801b2ea:	b2db      	uxtb	r3, r3
 801b2ec:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b2ee:	887b      	ldrh	r3, [r7, #2]
 801b2f0:	0a1b      	lsrs	r3, r3, #8
 801b2f2:	b29b      	uxth	r3, r3
 801b2f4:	b2db      	uxtb	r3, r3
 801b2f6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b2f8:	887b      	ldrh	r3, [r7, #2]
 801b2fa:	b2db      	uxtb	r3, r3
 801b2fc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b2fe:	883b      	ldrh	r3, [r7, #0]
 801b300:	0a1b      	lsrs	r3, r3, #8
 801b302:	b29b      	uxth	r3, r3
 801b304:	b2db      	uxtb	r3, r3
 801b306:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b308:	883b      	ldrh	r3, [r7, #0]
 801b30a:	b2db      	uxtb	r3, r3
 801b30c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b30e:	f107 0308 	add.w	r3, r7, #8
 801b312:	2208      	movs	r2, #8
 801b314:	4619      	mov	r1, r3
 801b316:	2008      	movs	r0, #8
 801b318:	f000 fc3e 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b31c:	bf00      	nop
 801b31e:	3714      	adds	r7, #20
 801b320:	46bd      	mov	sp, r7
 801b322:	bd90      	pop	{r4, r7, pc}

0801b324 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b324:	b580      	push	{r7, lr}
 801b326:	b084      	sub	sp, #16
 801b328:	af00      	add	r7, sp, #0
 801b32a:	4603      	mov	r3, r0
 801b32c:	6039      	str	r1, [r7, #0]
 801b32e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b330:	79fb      	ldrb	r3, [r7, #7]
 801b332:	f003 0307 	and.w	r3, r3, #7
 801b336:	b2db      	uxtb	r3, r3
 801b338:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b33a:	683b      	ldr	r3, [r7, #0]
 801b33c:	0c1b      	lsrs	r3, r3, #16
 801b33e:	b2db      	uxtb	r3, r3
 801b340:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b342:	683b      	ldr	r3, [r7, #0]
 801b344:	0a1b      	lsrs	r3, r3, #8
 801b346:	b2db      	uxtb	r3, r3
 801b348:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b34a:	683b      	ldr	r3, [r7, #0]
 801b34c:	b2db      	uxtb	r3, r3
 801b34e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b350:	f107 030c 	add.w	r3, r7, #12
 801b354:	2204      	movs	r2, #4
 801b356:	4619      	mov	r1, r3
 801b358:	2097      	movs	r0, #151	@ 0x97
 801b35a:	f000 fc1d 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b35e:	bf00      	nop
 801b360:	3710      	adds	r7, #16
 801b362:	46bd      	mov	sp, r7
 801b364:	bd80      	pop	{r7, pc}
	...

0801b368 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b368:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b36c:	b084      	sub	sp, #16
 801b36e:	af00      	add	r7, sp, #0
 801b370:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b372:	2300      	movs	r3, #0
 801b374:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b376:	4b1d      	ldr	r3, [pc, #116]	@ (801b3ec <SUBGRF_SetRfFrequency+0x84>)
 801b378:	781b      	ldrb	r3, [r3, #0]
 801b37a:	f083 0301 	eor.w	r3, r3, #1
 801b37e:	b2db      	uxtb	r3, r3
 801b380:	2b00      	cmp	r3, #0
 801b382:	d005      	beq.n	801b390 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b384:	6878      	ldr	r0, [r7, #4]
 801b386:	f7ff ff27 	bl	801b1d8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b38a:	4b18      	ldr	r3, [pc, #96]	@ (801b3ec <SUBGRF_SetRfFrequency+0x84>)
 801b38c:	2201      	movs	r2, #1
 801b38e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	2200      	movs	r2, #0
 801b394:	461c      	mov	r4, r3
 801b396:	4615      	mov	r5, r2
 801b398:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b39c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b3a0:	4a13      	ldr	r2, [pc, #76]	@ (801b3f0 <SUBGRF_SetRfFrequency+0x88>)
 801b3a2:	f04f 0300 	mov.w	r3, #0
 801b3a6:	4640      	mov	r0, r8
 801b3a8:	4649      	mov	r1, r9
 801b3aa:	f7e5 fe79 	bl	80010a0 <__aeabi_uldivmod>
 801b3ae:	4602      	mov	r2, r0
 801b3b0:	460b      	mov	r3, r1
 801b3b2:	4613      	mov	r3, r2
 801b3b4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b3b6:	68fb      	ldr	r3, [r7, #12]
 801b3b8:	0e1b      	lsrs	r3, r3, #24
 801b3ba:	b2db      	uxtb	r3, r3
 801b3bc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	0c1b      	lsrs	r3, r3, #16
 801b3c2:	b2db      	uxtb	r3, r3
 801b3c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	0a1b      	lsrs	r3, r3, #8
 801b3ca:	b2db      	uxtb	r3, r3
 801b3cc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b3ce:	68fb      	ldr	r3, [r7, #12]
 801b3d0:	b2db      	uxtb	r3, r3
 801b3d2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b3d4:	f107 0308 	add.w	r3, r7, #8
 801b3d8:	2204      	movs	r2, #4
 801b3da:	4619      	mov	r1, r3
 801b3dc:	2086      	movs	r0, #134	@ 0x86
 801b3de:	f000 fbdb 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b3e2:	bf00      	nop
 801b3e4:	3710      	adds	r7, #16
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b3ec:	20001ec4 	.word	0x20001ec4
 801b3f0:	01e84800 	.word	0x01e84800

0801b3f4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b082      	sub	sp, #8
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	4603      	mov	r3, r0
 801b3fc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b3fe:	79fa      	ldrb	r2, [r7, #7]
 801b400:	4b09      	ldr	r3, [pc, #36]	@ (801b428 <SUBGRF_SetPacketType+0x34>)
 801b402:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b404:	79fb      	ldrb	r3, [r7, #7]
 801b406:	2b00      	cmp	r3, #0
 801b408:	d104      	bne.n	801b414 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b40a:	2100      	movs	r1, #0
 801b40c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801b410:	f000 faf8 	bl	801ba04 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b414:	1dfb      	adds	r3, r7, #7
 801b416:	2201      	movs	r2, #1
 801b418:	4619      	mov	r1, r3
 801b41a:	208a      	movs	r0, #138	@ 0x8a
 801b41c:	f000 fbbc 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b420:	bf00      	nop
 801b422:	3708      	adds	r7, #8
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}
 801b428:	20001ebd 	.word	0x20001ebd

0801b42c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b42c:	b480      	push	{r7}
 801b42e:	af00      	add	r7, sp, #0
    return PacketType;
 801b430:	4b02      	ldr	r3, [pc, #8]	@ (801b43c <SUBGRF_GetPacketType+0x10>)
 801b432:	781b      	ldrb	r3, [r3, #0]
}
 801b434:	4618      	mov	r0, r3
 801b436:	46bd      	mov	sp, r7
 801b438:	bc80      	pop	{r7}
 801b43a:	4770      	bx	lr
 801b43c:	20001ebd 	.word	0x20001ebd

0801b440 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b440:	b580      	push	{r7, lr}
 801b442:	b084      	sub	sp, #16
 801b444:	af00      	add	r7, sp, #0
 801b446:	4603      	mov	r3, r0
 801b448:	71fb      	strb	r3, [r7, #7]
 801b44a:	460b      	mov	r3, r1
 801b44c:	71bb      	strb	r3, [r7, #6]
 801b44e:	4613      	mov	r3, r2
 801b450:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b452:	79fb      	ldrb	r3, [r7, #7]
 801b454:	2b01      	cmp	r3, #1
 801b456:	d149      	bne.n	801b4ec <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b458:	2000      	movs	r0, #0
 801b45a:	f7f0 fe97 	bl	800c18c <RBI_GetRFOMaxPowerConfig>
 801b45e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b460:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b464:	68fa      	ldr	r2, [r7, #12]
 801b466:	429a      	cmp	r2, r3
 801b468:	da01      	bge.n	801b46e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	2b0e      	cmp	r3, #14
 801b472:	d10e      	bne.n	801b492 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b474:	2301      	movs	r3, #1
 801b476:	2201      	movs	r2, #1
 801b478:	2100      	movs	r1, #0
 801b47a:	2004      	movs	r0, #4
 801b47c:	f7ff fef6 	bl	801b26c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b480:	79ba      	ldrb	r2, [r7, #6]
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	b2db      	uxtb	r3, r3
 801b486:	1ad3      	subs	r3, r2, r3
 801b488:	b2db      	uxtb	r3, r3
 801b48a:	330e      	adds	r3, #14
 801b48c:	b2db      	uxtb	r3, r3
 801b48e:	71bb      	strb	r3, [r7, #6]
 801b490:	e01f      	b.n	801b4d2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	2b0a      	cmp	r3, #10
 801b496:	d10e      	bne.n	801b4b6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b498:	2301      	movs	r3, #1
 801b49a:	2201      	movs	r2, #1
 801b49c:	2100      	movs	r1, #0
 801b49e:	2001      	movs	r0, #1
 801b4a0:	f7ff fee4 	bl	801b26c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b4a4:	79ba      	ldrb	r2, [r7, #6]
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	1ad3      	subs	r3, r2, r3
 801b4ac:	b2db      	uxtb	r3, r3
 801b4ae:	330d      	adds	r3, #13
 801b4b0:	b2db      	uxtb	r3, r3
 801b4b2:	71bb      	strb	r3, [r7, #6]
 801b4b4:	e00d      	b.n	801b4d2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801b4b6:	2301      	movs	r3, #1
 801b4b8:	2201      	movs	r2, #1
 801b4ba:	2100      	movs	r1, #0
 801b4bc:	2007      	movs	r0, #7
 801b4be:	f7ff fed5 	bl	801b26c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b4c2:	79ba      	ldrb	r2, [r7, #6]
 801b4c4:	68fb      	ldr	r3, [r7, #12]
 801b4c6:	b2db      	uxtb	r3, r3
 801b4c8:	1ad3      	subs	r3, r2, r3
 801b4ca:	b2db      	uxtb	r3, r3
 801b4cc:	330e      	adds	r3, #14
 801b4ce:	b2db      	uxtb	r3, r3
 801b4d0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b4d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b4d6:	f113 0f11 	cmn.w	r3, #17
 801b4da:	da01      	bge.n	801b4e0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b4dc:	23ef      	movs	r3, #239	@ 0xef
 801b4de:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b4e0:	2118      	movs	r1, #24
 801b4e2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b4e6:	f000 fa8d 	bl	801ba04 <SUBGRF_WriteRegister>
 801b4ea:	e067      	b.n	801b5bc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b4ec:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801b4f0:	f000 faaa 	bl	801ba48 <SUBGRF_ReadRegister>
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	f043 031e 	orr.w	r3, r3, #30
 801b4fa:	b2db      	uxtb	r3, r3
 801b4fc:	4619      	mov	r1, r3
 801b4fe:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801b502:	f000 fa7f 	bl	801ba04 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b506:	2001      	movs	r0, #1
 801b508:	f7f0 fe40 	bl	800c18c <RBI_GetRFOMaxPowerConfig>
 801b50c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b50e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b512:	68fa      	ldr	r2, [r7, #12]
 801b514:	429a      	cmp	r2, r3
 801b516:	da01      	bge.n	801b51c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	2b14      	cmp	r3, #20
 801b520:	d10e      	bne.n	801b540 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b522:	2301      	movs	r3, #1
 801b524:	2200      	movs	r2, #0
 801b526:	2105      	movs	r1, #5
 801b528:	2003      	movs	r0, #3
 801b52a:	f7ff fe9f 	bl	801b26c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b52e:	79ba      	ldrb	r2, [r7, #6]
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	b2db      	uxtb	r3, r3
 801b534:	1ad3      	subs	r3, r2, r3
 801b536:	b2db      	uxtb	r3, r3
 801b538:	3316      	adds	r3, #22
 801b53a:	b2db      	uxtb	r3, r3
 801b53c:	71bb      	strb	r3, [r7, #6]
 801b53e:	e031      	b.n	801b5a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	2b11      	cmp	r3, #17
 801b544:	d10e      	bne.n	801b564 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b546:	2301      	movs	r3, #1
 801b548:	2200      	movs	r2, #0
 801b54a:	2103      	movs	r1, #3
 801b54c:	2002      	movs	r0, #2
 801b54e:	f7ff fe8d 	bl	801b26c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b552:	79ba      	ldrb	r2, [r7, #6]
 801b554:	68fb      	ldr	r3, [r7, #12]
 801b556:	b2db      	uxtb	r3, r3
 801b558:	1ad3      	subs	r3, r2, r3
 801b55a:	b2db      	uxtb	r3, r3
 801b55c:	3316      	adds	r3, #22
 801b55e:	b2db      	uxtb	r3, r3
 801b560:	71bb      	strb	r3, [r7, #6]
 801b562:	e01f      	b.n	801b5a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	2b0e      	cmp	r3, #14
 801b568:	d10e      	bne.n	801b588 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b56a:	2301      	movs	r3, #1
 801b56c:	2200      	movs	r2, #0
 801b56e:	2102      	movs	r1, #2
 801b570:	2002      	movs	r0, #2
 801b572:	f7ff fe7b 	bl	801b26c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b576:	79ba      	ldrb	r2, [r7, #6]
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	b2db      	uxtb	r3, r3
 801b57c:	1ad3      	subs	r3, r2, r3
 801b57e:	b2db      	uxtb	r3, r3
 801b580:	330e      	adds	r3, #14
 801b582:	b2db      	uxtb	r3, r3
 801b584:	71bb      	strb	r3, [r7, #6]
 801b586:	e00d      	b.n	801b5a4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b588:	2301      	movs	r3, #1
 801b58a:	2200      	movs	r2, #0
 801b58c:	2107      	movs	r1, #7
 801b58e:	2004      	movs	r0, #4
 801b590:	f7ff fe6c 	bl	801b26c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b594:	79ba      	ldrb	r2, [r7, #6]
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	b2db      	uxtb	r3, r3
 801b59a:	1ad3      	subs	r3, r2, r3
 801b59c:	b2db      	uxtb	r3, r3
 801b59e:	3316      	adds	r3, #22
 801b5a0:	b2db      	uxtb	r3, r3
 801b5a2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b5a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b5a8:	f113 0f09 	cmn.w	r3, #9
 801b5ac:	da01      	bge.n	801b5b2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b5ae:	23f7      	movs	r3, #247	@ 0xf7
 801b5b0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b5b2:	2138      	movs	r1, #56	@ 0x38
 801b5b4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b5b8:	f000 fa24 	bl	801ba04 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b5bc:	79bb      	ldrb	r3, [r7, #6]
 801b5be:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b5c0:	797b      	ldrb	r3, [r7, #5]
 801b5c2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b5c4:	f107 0308 	add.w	r3, r7, #8
 801b5c8:	2202      	movs	r2, #2
 801b5ca:	4619      	mov	r1, r3
 801b5cc:	208e      	movs	r0, #142	@ 0x8e
 801b5ce:	f000 fae3 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b5d2:	bf00      	nop
 801b5d4:	3710      	adds	r7, #16
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	bd80      	pop	{r7, pc}
	...

0801b5dc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b5dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b5e0:	b086      	sub	sp, #24
 801b5e2:	af00      	add	r7, sp, #0
 801b5e4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b5ea:	f107 0308 	add.w	r3, r7, #8
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	601a      	str	r2, [r3, #0]
 801b5f2:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	781a      	ldrb	r2, [r3, #0]
 801b5f8:	4b5c      	ldr	r3, [pc, #368]	@ (801b76c <SUBGRF_SetModulationParams+0x190>)
 801b5fa:	781b      	ldrb	r3, [r3, #0]
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d004      	beq.n	801b60a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	781b      	ldrb	r3, [r3, #0]
 801b604:	4618      	mov	r0, r3
 801b606:	f7ff fef5 	bl	801b3f4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	781b      	ldrb	r3, [r3, #0]
 801b60e:	2b03      	cmp	r3, #3
 801b610:	f200 80a5 	bhi.w	801b75e <SUBGRF_SetModulationParams+0x182>
 801b614:	a201      	add	r2, pc, #4	@ (adr r2, 801b61c <SUBGRF_SetModulationParams+0x40>)
 801b616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b61a:	bf00      	nop
 801b61c:	0801b62d 	.word	0x0801b62d
 801b620:	0801b6ed 	.word	0x0801b6ed
 801b624:	0801b6af 	.word	0x0801b6af
 801b628:	0801b71b 	.word	0x0801b71b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b62c:	2308      	movs	r3, #8
 801b62e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	685b      	ldr	r3, [r3, #4]
 801b634:	4a4e      	ldr	r2, [pc, #312]	@ (801b770 <SUBGRF_SetModulationParams+0x194>)
 801b636:	fbb2 f3f3 	udiv	r3, r2, r3
 801b63a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	0c1b      	lsrs	r3, r3, #16
 801b640:	b2db      	uxtb	r3, r3
 801b642:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b644:	697b      	ldr	r3, [r7, #20]
 801b646:	0a1b      	lsrs	r3, r3, #8
 801b648:	b2db      	uxtb	r3, r3
 801b64a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b64c:	697b      	ldr	r3, [r7, #20]
 801b64e:	b2db      	uxtb	r3, r3
 801b650:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	7b1b      	ldrb	r3, [r3, #12]
 801b656:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	7b5b      	ldrb	r3, [r3, #13]
 801b65c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	689b      	ldr	r3, [r3, #8]
 801b662:	2200      	movs	r2, #0
 801b664:	461c      	mov	r4, r3
 801b666:	4615      	mov	r5, r2
 801b668:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b66c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b670:	4a40      	ldr	r2, [pc, #256]	@ (801b774 <SUBGRF_SetModulationParams+0x198>)
 801b672:	f04f 0300 	mov.w	r3, #0
 801b676:	4640      	mov	r0, r8
 801b678:	4649      	mov	r1, r9
 801b67a:	f7e5 fd11 	bl	80010a0 <__aeabi_uldivmod>
 801b67e:	4602      	mov	r2, r0
 801b680:	460b      	mov	r3, r1
 801b682:	4613      	mov	r3, r2
 801b684:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b686:	697b      	ldr	r3, [r7, #20]
 801b688:	0c1b      	lsrs	r3, r3, #16
 801b68a:	b2db      	uxtb	r3, r3
 801b68c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b68e:	697b      	ldr	r3, [r7, #20]
 801b690:	0a1b      	lsrs	r3, r3, #8
 801b692:	b2db      	uxtb	r3, r3
 801b694:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b696:	697b      	ldr	r3, [r7, #20]
 801b698:	b2db      	uxtb	r3, r3
 801b69a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b69c:	7cfb      	ldrb	r3, [r7, #19]
 801b69e:	b29a      	uxth	r2, r3
 801b6a0:	f107 0308 	add.w	r3, r7, #8
 801b6a4:	4619      	mov	r1, r3
 801b6a6:	208b      	movs	r0, #139	@ 0x8b
 801b6a8:	f000 fa76 	bl	801bb98 <SUBGRF_WriteCommand>
        break;
 801b6ac:	e058      	b.n	801b760 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b6ae:	2304      	movs	r3, #4
 801b6b0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	691b      	ldr	r3, [r3, #16]
 801b6b6:	4a2e      	ldr	r2, [pc, #184]	@ (801b770 <SUBGRF_SetModulationParams+0x194>)
 801b6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b6bc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b6be:	697b      	ldr	r3, [r7, #20]
 801b6c0:	0c1b      	lsrs	r3, r3, #16
 801b6c2:	b2db      	uxtb	r3, r3
 801b6c4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b6c6:	697b      	ldr	r3, [r7, #20]
 801b6c8:	0a1b      	lsrs	r3, r3, #8
 801b6ca:	b2db      	uxtb	r3, r3
 801b6cc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b6ce:	697b      	ldr	r3, [r7, #20]
 801b6d0:	b2db      	uxtb	r3, r3
 801b6d2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	7d1b      	ldrb	r3, [r3, #20]
 801b6d8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b6da:	7cfb      	ldrb	r3, [r7, #19]
 801b6dc:	b29a      	uxth	r2, r3
 801b6de:	f107 0308 	add.w	r3, r7, #8
 801b6e2:	4619      	mov	r1, r3
 801b6e4:	208b      	movs	r0, #139	@ 0x8b
 801b6e6:	f000 fa57 	bl	801bb98 <SUBGRF_WriteCommand>
        break;
 801b6ea:	e039      	b.n	801b760 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 801b6ec:	2304      	movs	r3, #4
 801b6ee:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	7e1b      	ldrb	r3, [r3, #24]
 801b6f4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	7e5b      	ldrb	r3, [r3, #25]
 801b6fa:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	7e9b      	ldrb	r3, [r3, #26]
 801b700:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	7edb      	ldrb	r3, [r3, #27]
 801b706:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b708:	7cfb      	ldrb	r3, [r7, #19]
 801b70a:	b29a      	uxth	r2, r3
 801b70c:	f107 0308 	add.w	r3, r7, #8
 801b710:	4619      	mov	r1, r3
 801b712:	208b      	movs	r0, #139	@ 0x8b
 801b714:	f000 fa40 	bl	801bb98 <SUBGRF_WriteCommand>

        break;
 801b718:	e022      	b.n	801b760 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b71a:	2305      	movs	r3, #5
 801b71c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	685b      	ldr	r3, [r3, #4]
 801b722:	4a13      	ldr	r2, [pc, #76]	@ (801b770 <SUBGRF_SetModulationParams+0x194>)
 801b724:	fbb2 f3f3 	udiv	r3, r2, r3
 801b728:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	0c1b      	lsrs	r3, r3, #16
 801b72e:	b2db      	uxtb	r3, r3
 801b730:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b732:	697b      	ldr	r3, [r7, #20]
 801b734:	0a1b      	lsrs	r3, r3, #8
 801b736:	b2db      	uxtb	r3, r3
 801b738:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b73a:	697b      	ldr	r3, [r7, #20]
 801b73c:	b2db      	uxtb	r3, r3
 801b73e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	7b1b      	ldrb	r3, [r3, #12]
 801b744:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	7b5b      	ldrb	r3, [r3, #13]
 801b74a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b74c:	7cfb      	ldrb	r3, [r7, #19]
 801b74e:	b29a      	uxth	r2, r3
 801b750:	f107 0308 	add.w	r3, r7, #8
 801b754:	4619      	mov	r1, r3
 801b756:	208b      	movs	r0, #139	@ 0x8b
 801b758:	f000 fa1e 	bl	801bb98 <SUBGRF_WriteCommand>
        break;
 801b75c:	e000      	b.n	801b760 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b75e:	bf00      	nop
    }
}
 801b760:	bf00      	nop
 801b762:	3718      	adds	r7, #24
 801b764:	46bd      	mov	sp, r7
 801b766:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b76a:	bf00      	nop
 801b76c:	20001ebd 	.word	0x20001ebd
 801b770:	3d090000 	.word	0x3d090000
 801b774:	01e84800 	.word	0x01e84800

0801b778 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b086      	sub	sp, #24
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b780:	2300      	movs	r3, #0
 801b782:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b784:	f107 030c 	add.w	r3, r7, #12
 801b788:	2200      	movs	r2, #0
 801b78a:	601a      	str	r2, [r3, #0]
 801b78c:	605a      	str	r2, [r3, #4]
 801b78e:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	781a      	ldrb	r2, [r3, #0]
 801b794:	4b44      	ldr	r3, [pc, #272]	@ (801b8a8 <SUBGRF_SetPacketParams+0x130>)
 801b796:	781b      	ldrb	r3, [r3, #0]
 801b798:	429a      	cmp	r2, r3
 801b79a:	d004      	beq.n	801b7a6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	781b      	ldrb	r3, [r3, #0]
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f7ff fe27 	bl	801b3f4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	781b      	ldrb	r3, [r3, #0]
 801b7aa:	2b03      	cmp	r3, #3
 801b7ac:	d878      	bhi.n	801b8a0 <SUBGRF_SetPacketParams+0x128>
 801b7ae:	a201      	add	r2, pc, #4	@ (adr r2, 801b7b4 <SUBGRF_SetPacketParams+0x3c>)
 801b7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7b4:	0801b7c5 	.word	0x0801b7c5
 801b7b8:	0801b855 	.word	0x0801b855
 801b7bc:	0801b849 	.word	0x0801b849
 801b7c0:	0801b7c5 	.word	0x0801b7c5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	7a5b      	ldrb	r3, [r3, #9]
 801b7c8:	2bf1      	cmp	r3, #241	@ 0xf1
 801b7ca:	d10a      	bne.n	801b7e2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b7cc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801b7d0:	f7ff faa6 	bl	801ad20 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b7d4:	f248 0005 	movw	r0, #32773	@ 0x8005
 801b7d8:	f7ff fac2 	bl	801ad60 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b7dc:	2302      	movs	r3, #2
 801b7de:	75bb      	strb	r3, [r7, #22]
 801b7e0:	e011      	b.n	801b806 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	7a5b      	ldrb	r3, [r3, #9]
 801b7e6:	2bf2      	cmp	r3, #242	@ 0xf2
 801b7e8:	d10a      	bne.n	801b800 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b7ea:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801b7ee:	f7ff fa97 	bl	801ad20 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b7f2:	f241 0021 	movw	r0, #4129	@ 0x1021
 801b7f6:	f7ff fab3 	bl	801ad60 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b7fa:	2306      	movs	r3, #6
 801b7fc:	75bb      	strb	r3, [r7, #22]
 801b7fe:	e002      	b.n	801b806 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	7a5b      	ldrb	r3, [r3, #9]
 801b804:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b806:	2309      	movs	r3, #9
 801b808:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	885b      	ldrh	r3, [r3, #2]
 801b80e:	0a1b      	lsrs	r3, r3, #8
 801b810:	b29b      	uxth	r3, r3
 801b812:	b2db      	uxtb	r3, r3
 801b814:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	885b      	ldrh	r3, [r3, #2]
 801b81a:	b2db      	uxtb	r3, r3
 801b81c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	791b      	ldrb	r3, [r3, #4]
 801b822:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	795b      	ldrb	r3, [r3, #5]
 801b828:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	799b      	ldrb	r3, [r3, #6]
 801b82e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	79db      	ldrb	r3, [r3, #7]
 801b834:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	7a1b      	ldrb	r3, [r3, #8]
 801b83a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b83c:	7dbb      	ldrb	r3, [r7, #22]
 801b83e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	7a9b      	ldrb	r3, [r3, #10]
 801b844:	753b      	strb	r3, [r7, #20]
        break;
 801b846:	e022      	b.n	801b88e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b848:	2301      	movs	r3, #1
 801b84a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	7b1b      	ldrb	r3, [r3, #12]
 801b850:	733b      	strb	r3, [r7, #12]
        break;
 801b852:	e01c      	b.n	801b88e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b854:	2306      	movs	r3, #6
 801b856:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	89db      	ldrh	r3, [r3, #14]
 801b85c:	0a1b      	lsrs	r3, r3, #8
 801b85e:	b29b      	uxth	r3, r3
 801b860:	b2db      	uxtb	r3, r3
 801b862:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	89db      	ldrh	r3, [r3, #14]
 801b868:	b2db      	uxtb	r3, r3
 801b86a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	7c1a      	ldrb	r2, [r3, #16]
 801b870:	4b0e      	ldr	r3, [pc, #56]	@ (801b8ac <SUBGRF_SetPacketParams+0x134>)
 801b872:	4611      	mov	r1, r2
 801b874:	7019      	strb	r1, [r3, #0]
 801b876:	4613      	mov	r3, r2
 801b878:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	7c5b      	ldrb	r3, [r3, #17]
 801b87e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	7c9b      	ldrb	r3, [r3, #18]
 801b884:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	7cdb      	ldrb	r3, [r3, #19]
 801b88a:	747b      	strb	r3, [r7, #17]
        break;
 801b88c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b88e:	7dfb      	ldrb	r3, [r7, #23]
 801b890:	b29a      	uxth	r2, r3
 801b892:	f107 030c 	add.w	r3, r7, #12
 801b896:	4619      	mov	r1, r3
 801b898:	208c      	movs	r0, #140	@ 0x8c
 801b89a:	f000 f97d 	bl	801bb98 <SUBGRF_WriteCommand>
 801b89e:	e000      	b.n	801b8a2 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b8a0:	bf00      	nop
}
 801b8a2:	3718      	adds	r7, #24
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	bd80      	pop	{r7, pc}
 801b8a8:	20001ebd 	.word	0x20001ebd
 801b8ac:	20001ebe 	.word	0x20001ebe

0801b8b0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b8b0:	b580      	push	{r7, lr}
 801b8b2:	b084      	sub	sp, #16
 801b8b4:	af00      	add	r7, sp, #0
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	460a      	mov	r2, r1
 801b8ba:	71fb      	strb	r3, [r7, #7]
 801b8bc:	4613      	mov	r3, r2
 801b8be:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b8c0:	79fb      	ldrb	r3, [r7, #7]
 801b8c2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b8c4:	79bb      	ldrb	r3, [r7, #6]
 801b8c6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b8c8:	f107 030c 	add.w	r3, r7, #12
 801b8cc:	2202      	movs	r2, #2
 801b8ce:	4619      	mov	r1, r3
 801b8d0:	208f      	movs	r0, #143	@ 0x8f
 801b8d2:	f000 f961 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b8d6:	bf00      	nop
 801b8d8:	3710      	adds	r7, #16
 801b8da:	46bd      	mov	sp, r7
 801b8dc:	bd80      	pop	{r7, pc}

0801b8de <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b8de:	b580      	push	{r7, lr}
 801b8e0:	b082      	sub	sp, #8
 801b8e2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b8e8:	1d3b      	adds	r3, r7, #4
 801b8ea:	2201      	movs	r2, #1
 801b8ec:	4619      	mov	r1, r3
 801b8ee:	2015      	movs	r0, #21
 801b8f0:	f000 f974 	bl	801bbdc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b8f4:	793b      	ldrb	r3, [r7, #4]
 801b8f6:	425b      	negs	r3, r3
 801b8f8:	105b      	asrs	r3, r3, #1
 801b8fa:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b8fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b900:	4618      	mov	r0, r3
 801b902:	3708      	adds	r7, #8
 801b904:	46bd      	mov	sp, r7
 801b906:	bd80      	pop	{r7, pc}

0801b908 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	b084      	sub	sp, #16
 801b90c:	af00      	add	r7, sp, #0
 801b90e:	6078      	str	r0, [r7, #4]
 801b910:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b912:	f107 030c 	add.w	r3, r7, #12
 801b916:	2202      	movs	r2, #2
 801b918:	4619      	mov	r1, r3
 801b91a:	2013      	movs	r0, #19
 801b91c:	f000 f95e 	bl	801bbdc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b920:	f7ff fd84 	bl	801b42c <SUBGRF_GetPacketType>
 801b924:	4603      	mov	r3, r0
 801b926:	2b01      	cmp	r3, #1
 801b928:	d10d      	bne.n	801b946 <SUBGRF_GetRxBufferStatus+0x3e>
 801b92a:	4b0c      	ldr	r3, [pc, #48]	@ (801b95c <SUBGRF_GetRxBufferStatus+0x54>)
 801b92c:	781b      	ldrb	r3, [r3, #0]
 801b92e:	b2db      	uxtb	r3, r3
 801b930:	2b01      	cmp	r3, #1
 801b932:	d108      	bne.n	801b946 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b934:	f240 7002 	movw	r0, #1794	@ 0x702
 801b938:	f000 f886 	bl	801ba48 <SUBGRF_ReadRegister>
 801b93c:	4603      	mov	r3, r0
 801b93e:	461a      	mov	r2, r3
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	701a      	strb	r2, [r3, #0]
 801b944:	e002      	b.n	801b94c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b946:	7b3a      	ldrb	r2, [r7, #12]
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b94c:	7b7a      	ldrb	r2, [r7, #13]
 801b94e:	683b      	ldr	r3, [r7, #0]
 801b950:	701a      	strb	r2, [r3, #0]
}
 801b952:	bf00      	nop
 801b954:	3710      	adds	r7, #16
 801b956:	46bd      	mov	sp, r7
 801b958:	bd80      	pop	{r7, pc}
 801b95a:	bf00      	nop
 801b95c:	20001ebe 	.word	0x20001ebe

0801b960 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b084      	sub	sp, #16
 801b964:	af00      	add	r7, sp, #0
 801b966:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b968:	f107 030c 	add.w	r3, r7, #12
 801b96c:	2203      	movs	r2, #3
 801b96e:	4619      	mov	r1, r3
 801b970:	2014      	movs	r0, #20
 801b972:	f000 f933 	bl	801bbdc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b976:	f7ff fd59 	bl	801b42c <SUBGRF_GetPacketType>
 801b97a:	4603      	mov	r3, r0
 801b97c:	461a      	mov	r2, r3
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	781b      	ldrb	r3, [r3, #0]
 801b986:	2b00      	cmp	r3, #0
 801b988:	d002      	beq.n	801b990 <SUBGRF_GetPacketStatus+0x30>
 801b98a:	2b01      	cmp	r3, #1
 801b98c:	d013      	beq.n	801b9b6 <SUBGRF_GetPacketStatus+0x56>
 801b98e:	e02a      	b.n	801b9e6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b990:	7b3a      	ldrb	r2, [r7, #12]
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b996:	7b7b      	ldrb	r3, [r7, #13]
 801b998:	425b      	negs	r3, r3
 801b99a:	105b      	asrs	r3, r3, #1
 801b99c:	b25a      	sxtb	r2, r3
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b9a2:	7bbb      	ldrb	r3, [r7, #14]
 801b9a4:	425b      	negs	r3, r3
 801b9a6:	105b      	asrs	r3, r3, #1
 801b9a8:	b25a      	sxtb	r2, r3
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	2200      	movs	r2, #0
 801b9b2:	609a      	str	r2, [r3, #8]
            break;
 801b9b4:	e020      	b.n	801b9f8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b9b6:	7b3b      	ldrb	r3, [r7, #12]
 801b9b8:	425b      	negs	r3, r3
 801b9ba:	105b      	asrs	r3, r3, #1
 801b9bc:	b25a      	sxtb	r2, r3
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b9c2:	7b7b      	ldrb	r3, [r7, #13]
 801b9c4:	b25b      	sxtb	r3, r3
 801b9c6:	3302      	adds	r3, #2
 801b9c8:	109b      	asrs	r3, r3, #2
 801b9ca:	b25a      	sxtb	r2, r3
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b9d0:	7bbb      	ldrb	r3, [r7, #14]
 801b9d2:	425b      	negs	r3, r3
 801b9d4:	105b      	asrs	r3, r3, #1
 801b9d6:	b25a      	sxtb	r2, r3
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b9dc:	4b08      	ldr	r3, [pc, #32]	@ (801ba00 <SUBGRF_GetPacketStatus+0xa0>)
 801b9de:	681a      	ldr	r2, [r3, #0]
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	611a      	str	r2, [r3, #16]
            break;
 801b9e4:	e008      	b.n	801b9f8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b9e6:	2214      	movs	r2, #20
 801b9e8:	2100      	movs	r1, #0
 801b9ea:	6878      	ldr	r0, [r7, #4]
 801b9ec:	f000 fc1d 	bl	801c22a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	220f      	movs	r2, #15
 801b9f4:	701a      	strb	r2, [r3, #0]
            break;
 801b9f6:	bf00      	nop
    }
}
 801b9f8:	bf00      	nop
 801b9fa:	3710      	adds	r7, #16
 801b9fc:	46bd      	mov	sp, r7
 801b9fe:	bd80      	pop	{r7, pc}
 801ba00:	20001ec0 	.word	0x20001ec0

0801ba04 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b086      	sub	sp, #24
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	4603      	mov	r3, r0
 801ba0c:	460a      	mov	r2, r1
 801ba0e:	80fb      	strh	r3, [r7, #6]
 801ba10:	4613      	mov	r3, r2
 801ba12:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba14:	f3ef 8310 	mrs	r3, PRIMASK
 801ba18:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba1a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ba1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba1e:	b672      	cpsid	i
}
 801ba20:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801ba22:	1d7a      	adds	r2, r7, #5
 801ba24:	88f9      	ldrh	r1, [r7, #6]
 801ba26:	2301      	movs	r3, #1
 801ba28:	4806      	ldr	r0, [pc, #24]	@ (801ba44 <SUBGRF_WriteRegister+0x40>)
 801ba2a:	f7ec ff2d 	bl	8008888 <HAL_SUBGHZ_WriteRegisters>
 801ba2e:	697b      	ldr	r3, [r7, #20]
 801ba30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba32:	693b      	ldr	r3, [r7, #16]
 801ba34:	f383 8810 	msr	PRIMASK, r3
}
 801ba38:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ba3a:	bf00      	nop
 801ba3c:	3718      	adds	r7, #24
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	bd80      	pop	{r7, pc}
 801ba42:	bf00      	nop
 801ba44:	20000418 	.word	0x20000418

0801ba48 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	b086      	sub	sp, #24
 801ba4c:	af00      	add	r7, sp, #0
 801ba4e:	4603      	mov	r3, r0
 801ba50:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba52:	f3ef 8310 	mrs	r3, PRIMASK
 801ba56:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba58:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 801ba5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba5c:	b672      	cpsid	i
}
 801ba5e:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801ba60:	f107 020b 	add.w	r2, r7, #11
 801ba64:	88f9      	ldrh	r1, [r7, #6]
 801ba66:	2301      	movs	r3, #1
 801ba68:	4806      	ldr	r0, [pc, #24]	@ (801ba84 <SUBGRF_ReadRegister+0x3c>)
 801ba6a:	f7ec ff6c 	bl	8008946 <HAL_SUBGHZ_ReadRegisters>
 801ba6e:	697b      	ldr	r3, [r7, #20]
 801ba70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba72:	693b      	ldr	r3, [r7, #16]
 801ba74:	f383 8810 	msr	PRIMASK, r3
}
 801ba78:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 801ba7a:	7afb      	ldrb	r3, [r7, #11]
}
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	3718      	adds	r7, #24
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd80      	pop	{r7, pc}
 801ba84:	20000418 	.word	0x20000418

0801ba88 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b086      	sub	sp, #24
 801ba8c:	af00      	add	r7, sp, #0
 801ba8e:	4603      	mov	r3, r0
 801ba90:	6039      	str	r1, [r7, #0]
 801ba92:	80fb      	strh	r3, [r7, #6]
 801ba94:	4613      	mov	r3, r2
 801ba96:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba98:	f3ef 8310 	mrs	r3, PRIMASK
 801ba9c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801baa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801baa2:	b672      	cpsid	i
}
 801baa4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801baa6:	88bb      	ldrh	r3, [r7, #4]
 801baa8:	88f9      	ldrh	r1, [r7, #6]
 801baaa:	683a      	ldr	r2, [r7, #0]
 801baac:	4806      	ldr	r0, [pc, #24]	@ (801bac8 <SUBGRF_WriteRegisters+0x40>)
 801baae:	f7ec feeb 	bl	8008888 <HAL_SUBGHZ_WriteRegisters>
 801bab2:	697b      	ldr	r3, [r7, #20]
 801bab4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bab6:	693b      	ldr	r3, [r7, #16]
 801bab8:	f383 8810 	msr	PRIMASK, r3
}
 801babc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801babe:	bf00      	nop
 801bac0:	3718      	adds	r7, #24
 801bac2:	46bd      	mov	sp, r7
 801bac4:	bd80      	pop	{r7, pc}
 801bac6:	bf00      	nop
 801bac8:	20000418 	.word	0x20000418

0801bacc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bacc:	b580      	push	{r7, lr}
 801bace:	b086      	sub	sp, #24
 801bad0:	af00      	add	r7, sp, #0
 801bad2:	4603      	mov	r3, r0
 801bad4:	6039      	str	r1, [r7, #0]
 801bad6:	80fb      	strh	r3, [r7, #6]
 801bad8:	4613      	mov	r3, r2
 801bada:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801badc:	f3ef 8310 	mrs	r3, PRIMASK
 801bae0:	60fb      	str	r3, [r7, #12]
  return(result);
 801bae2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bae4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bae6:	b672      	cpsid	i
}
 801bae8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801baea:	88bb      	ldrh	r3, [r7, #4]
 801baec:	88f9      	ldrh	r1, [r7, #6]
 801baee:	683a      	ldr	r2, [r7, #0]
 801baf0:	4806      	ldr	r0, [pc, #24]	@ (801bb0c <SUBGRF_ReadRegisters+0x40>)
 801baf2:	f7ec ff28 	bl	8008946 <HAL_SUBGHZ_ReadRegisters>
 801baf6:	697b      	ldr	r3, [r7, #20]
 801baf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bafa:	693b      	ldr	r3, [r7, #16]
 801bafc:	f383 8810 	msr	PRIMASK, r3
}
 801bb00:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb02:	bf00      	nop
 801bb04:	3718      	adds	r7, #24
 801bb06:	46bd      	mov	sp, r7
 801bb08:	bd80      	pop	{r7, pc}
 801bb0a:	bf00      	nop
 801bb0c:	20000418 	.word	0x20000418

0801bb10 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b086      	sub	sp, #24
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	4603      	mov	r3, r0
 801bb18:	6039      	str	r1, [r7, #0]
 801bb1a:	71fb      	strb	r3, [r7, #7]
 801bb1c:	4613      	mov	r3, r2
 801bb1e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb20:	f3ef 8310 	mrs	r3, PRIMASK
 801bb24:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bb28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb2a:	b672      	cpsid	i
}
 801bb2c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801bb2e:	79bb      	ldrb	r3, [r7, #6]
 801bb30:	b29b      	uxth	r3, r3
 801bb32:	79f9      	ldrb	r1, [r7, #7]
 801bb34:	683a      	ldr	r2, [r7, #0]
 801bb36:	4806      	ldr	r0, [pc, #24]	@ (801bb50 <SUBGRF_WriteBuffer+0x40>)
 801bb38:	f7ed f819 	bl	8008b6e <HAL_SUBGHZ_WriteBuffer>
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb40:	693b      	ldr	r3, [r7, #16]
 801bb42:	f383 8810 	msr	PRIMASK, r3
}
 801bb46:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb48:	bf00      	nop
 801bb4a:	3718      	adds	r7, #24
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}
 801bb50:	20000418 	.word	0x20000418

0801bb54 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b086      	sub	sp, #24
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	6039      	str	r1, [r7, #0]
 801bb5e:	71fb      	strb	r3, [r7, #7]
 801bb60:	4613      	mov	r3, r2
 801bb62:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb64:	f3ef 8310 	mrs	r3, PRIMASK
 801bb68:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bb6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb6e:	b672      	cpsid	i
}
 801bb70:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bb72:	79bb      	ldrb	r3, [r7, #6]
 801bb74:	b29b      	uxth	r3, r3
 801bb76:	79f9      	ldrb	r1, [r7, #7]
 801bb78:	683a      	ldr	r2, [r7, #0]
 801bb7a:	4806      	ldr	r0, [pc, #24]	@ (801bb94 <SUBGRF_ReadBuffer+0x40>)
 801bb7c:	f7ed f84a 	bl	8008c14 <HAL_SUBGHZ_ReadBuffer>
 801bb80:	697b      	ldr	r3, [r7, #20]
 801bb82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb84:	693b      	ldr	r3, [r7, #16]
 801bb86:	f383 8810 	msr	PRIMASK, r3
}
 801bb8a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb8c:	bf00      	nop
 801bb8e:	3718      	adds	r7, #24
 801bb90:	46bd      	mov	sp, r7
 801bb92:	bd80      	pop	{r7, pc}
 801bb94:	20000418 	.word	0x20000418

0801bb98 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bb98:	b580      	push	{r7, lr}
 801bb9a:	b086      	sub	sp, #24
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	4603      	mov	r3, r0
 801bba0:	6039      	str	r1, [r7, #0]
 801bba2:	71fb      	strb	r3, [r7, #7]
 801bba4:	4613      	mov	r3, r2
 801bba6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bba8:	f3ef 8310 	mrs	r3, PRIMASK
 801bbac:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bbb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbb2:	b672      	cpsid	i
}
 801bbb4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bbb6:	88bb      	ldrh	r3, [r7, #4]
 801bbb8:	79f9      	ldrb	r1, [r7, #7]
 801bbba:	683a      	ldr	r2, [r7, #0]
 801bbbc:	4806      	ldr	r0, [pc, #24]	@ (801bbd8 <SUBGRF_WriteCommand+0x40>)
 801bbbe:	f7ec ff23 	bl	8008a08 <HAL_SUBGHZ_ExecSetCmd>
 801bbc2:	697b      	ldr	r3, [r7, #20]
 801bbc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbc6:	693b      	ldr	r3, [r7, #16]
 801bbc8:	f383 8810 	msr	PRIMASK, r3
}
 801bbcc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bbce:	bf00      	nop
 801bbd0:	3718      	adds	r7, #24
 801bbd2:	46bd      	mov	sp, r7
 801bbd4:	bd80      	pop	{r7, pc}
 801bbd6:	bf00      	nop
 801bbd8:	20000418 	.word	0x20000418

0801bbdc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b086      	sub	sp, #24
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	6039      	str	r1, [r7, #0]
 801bbe6:	71fb      	strb	r3, [r7, #7]
 801bbe8:	4613      	mov	r3, r2
 801bbea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbec:	f3ef 8310 	mrs	r3, PRIMASK
 801bbf0:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbf2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bbf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbf6:	b672      	cpsid	i
}
 801bbf8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bbfa:	88bb      	ldrh	r3, [r7, #4]
 801bbfc:	79f9      	ldrb	r1, [r7, #7]
 801bbfe:	683a      	ldr	r2, [r7, #0]
 801bc00:	4806      	ldr	r0, [pc, #24]	@ (801bc1c <SUBGRF_ReadCommand+0x40>)
 801bc02:	f7ec ff60 	bl	8008ac6 <HAL_SUBGHZ_ExecGetCmd>
 801bc06:	697b      	ldr	r3, [r7, #20]
 801bc08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc0a:	693b      	ldr	r3, [r7, #16]
 801bc0c:	f383 8810 	msr	PRIMASK, r3
}
 801bc10:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bc12:	bf00      	nop
 801bc14:	3718      	adds	r7, #24
 801bc16:	46bd      	mov	sp, r7
 801bc18:	bd80      	pop	{r7, pc}
 801bc1a:	bf00      	nop
 801bc1c:	20000418 	.word	0x20000418

0801bc20 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b084      	sub	sp, #16
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	4603      	mov	r3, r0
 801bc28:	460a      	mov	r2, r1
 801bc2a:	71fb      	strb	r3, [r7, #7]
 801bc2c:	4613      	mov	r3, r2
 801bc2e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bc30:	2301      	movs	r3, #1
 801bc32:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bc34:	79bb      	ldrb	r3, [r7, #6]
 801bc36:	2b01      	cmp	r3, #1
 801bc38:	d10d      	bne.n	801bc56 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bc3a:	79fb      	ldrb	r3, [r7, #7]
 801bc3c:	2b01      	cmp	r3, #1
 801bc3e:	d104      	bne.n	801bc4a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bc40:	2302      	movs	r3, #2
 801bc42:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801bc44:	2004      	movs	r0, #4
 801bc46:	f000 f8ef 	bl	801be28 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801bc4a:	79fb      	ldrb	r3, [r7, #7]
 801bc4c:	2b02      	cmp	r3, #2
 801bc4e:	d107      	bne.n	801bc60 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801bc50:	2303      	movs	r3, #3
 801bc52:	73fb      	strb	r3, [r7, #15]
 801bc54:	e004      	b.n	801bc60 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801bc56:	79bb      	ldrb	r3, [r7, #6]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d101      	bne.n	801bc60 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801bc5c:	2301      	movs	r3, #1
 801bc5e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801bc60:	7bfb      	ldrb	r3, [r7, #15]
 801bc62:	4618      	mov	r0, r3
 801bc64:	f7f0 fa6f 	bl	800c146 <RBI_ConfigRFSwitch>
}
 801bc68:	bf00      	nop
 801bc6a:	3710      	adds	r7, #16
 801bc6c:	46bd      	mov	sp, r7
 801bc6e:	bd80      	pop	{r7, pc}

0801bc70 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801bc70:	b580      	push	{r7, lr}
 801bc72:	b084      	sub	sp, #16
 801bc74:	af00      	add	r7, sp, #0
 801bc76:	4603      	mov	r3, r0
 801bc78:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801bc7a:	2301      	movs	r3, #1
 801bc7c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801bc7e:	f7f0 fa70 	bl	800c162 <RBI_GetTxConfig>
 801bc82:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801bc84:	68bb      	ldr	r3, [r7, #8]
 801bc86:	2b02      	cmp	r3, #2
 801bc88:	d016      	beq.n	801bcb8 <SUBGRF_SetRfTxPower+0x48>
 801bc8a:	68bb      	ldr	r3, [r7, #8]
 801bc8c:	2b02      	cmp	r3, #2
 801bc8e:	dc16      	bgt.n	801bcbe <SUBGRF_SetRfTxPower+0x4e>
 801bc90:	68bb      	ldr	r3, [r7, #8]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d003      	beq.n	801bc9e <SUBGRF_SetRfTxPower+0x2e>
 801bc96:	68bb      	ldr	r3, [r7, #8]
 801bc98:	2b01      	cmp	r3, #1
 801bc9a:	d00a      	beq.n	801bcb2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801bc9c:	e00f      	b.n	801bcbe <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801bc9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bca2:	2b0f      	cmp	r3, #15
 801bca4:	dd02      	ble.n	801bcac <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801bca6:	2302      	movs	r3, #2
 801bca8:	73fb      	strb	r3, [r7, #15]
            break;
 801bcaa:	e009      	b.n	801bcc0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801bcac:	2301      	movs	r3, #1
 801bcae:	73fb      	strb	r3, [r7, #15]
            break;
 801bcb0:	e006      	b.n	801bcc0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801bcb2:	2301      	movs	r3, #1
 801bcb4:	73fb      	strb	r3, [r7, #15]
            break;
 801bcb6:	e003      	b.n	801bcc0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801bcb8:	2302      	movs	r3, #2
 801bcba:	73fb      	strb	r3, [r7, #15]
            break;
 801bcbc:	e000      	b.n	801bcc0 <SUBGRF_SetRfTxPower+0x50>
            break;
 801bcbe:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801bcc0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801bcc4:	7bfb      	ldrb	r3, [r7, #15]
 801bcc6:	2202      	movs	r2, #2
 801bcc8:	4618      	mov	r0, r3
 801bcca:	f7ff fbb9 	bl	801b440 <SUBGRF_SetTxParams>

    return paSelect;
 801bcce:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	3710      	adds	r7, #16
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bd80      	pop	{r7, pc}

0801bcd8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801bcd8:	b480      	push	{r7}
 801bcda:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801bcdc:	2301      	movs	r3, #1
}
 801bcde:	4618      	mov	r0, r3
 801bce0:	46bd      	mov	sp, r7
 801bce2:	bc80      	pop	{r7}
 801bce4:	4770      	bx	lr
	...

0801bce8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b082      	sub	sp, #8
 801bcec:	af00      	add	r7, sp, #0
 801bcee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801bcf0:	4b03      	ldr	r3, [pc, #12]	@ (801bd00 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	2001      	movs	r0, #1
 801bcf6:	4798      	blx	r3
}
 801bcf8:	bf00      	nop
 801bcfa:	3708      	adds	r7, #8
 801bcfc:	46bd      	mov	sp, r7
 801bcfe:	bd80      	pop	{r7, pc}
 801bd00:	20001ec8 	.word	0x20001ec8

0801bd04 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b082      	sub	sp, #8
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801bd0c:	4b03      	ldr	r3, [pc, #12]	@ (801bd1c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	2002      	movs	r0, #2
 801bd12:	4798      	blx	r3
}
 801bd14:	bf00      	nop
 801bd16:	3708      	adds	r7, #8
 801bd18:	46bd      	mov	sp, r7
 801bd1a:	bd80      	pop	{r7, pc}
 801bd1c:	20001ec8 	.word	0x20001ec8

0801bd20 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b082      	sub	sp, #8
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801bd28:	4b03      	ldr	r3, [pc, #12]	@ (801bd38 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	2040      	movs	r0, #64	@ 0x40
 801bd2e:	4798      	blx	r3
}
 801bd30:	bf00      	nop
 801bd32:	3708      	adds	r7, #8
 801bd34:	46bd      	mov	sp, r7
 801bd36:	bd80      	pop	{r7, pc}
 801bd38:	20001ec8 	.word	0x20001ec8

0801bd3c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801bd3c:	b580      	push	{r7, lr}
 801bd3e:	b082      	sub	sp, #8
 801bd40:	af00      	add	r7, sp, #0
 801bd42:	6078      	str	r0, [r7, #4]
 801bd44:	460b      	mov	r3, r1
 801bd46:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801bd48:	78fb      	ldrb	r3, [r7, #3]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d002      	beq.n	801bd54 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801bd4e:	2b01      	cmp	r3, #1
 801bd50:	d005      	beq.n	801bd5e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801bd52:	e00a      	b.n	801bd6a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801bd54:	4b07      	ldr	r3, [pc, #28]	@ (801bd74 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	2080      	movs	r0, #128	@ 0x80
 801bd5a:	4798      	blx	r3
            break;
 801bd5c:	e005      	b.n	801bd6a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801bd5e:	4b05      	ldr	r3, [pc, #20]	@ (801bd74 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801bd66:	4798      	blx	r3
            break;
 801bd68:	bf00      	nop
    }
}
 801bd6a:	bf00      	nop
 801bd6c:	3708      	adds	r7, #8
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	bd80      	pop	{r7, pc}
 801bd72:	bf00      	nop
 801bd74:	20001ec8 	.word	0x20001ec8

0801bd78 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd78:	b580      	push	{r7, lr}
 801bd7a:	b082      	sub	sp, #8
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801bd80:	4b04      	ldr	r3, [pc, #16]	@ (801bd94 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801bd88:	4798      	blx	r3
}
 801bd8a:	bf00      	nop
 801bd8c:	3708      	adds	r7, #8
 801bd8e:	46bd      	mov	sp, r7
 801bd90:	bd80      	pop	{r7, pc}
 801bd92:	bf00      	nop
 801bd94:	20001ec8 	.word	0x20001ec8

0801bd98 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b082      	sub	sp, #8
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801bda0:	4b03      	ldr	r3, [pc, #12]	@ (801bdb0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	2020      	movs	r0, #32
 801bda6:	4798      	blx	r3
}
 801bda8:	bf00      	nop
 801bdaa:	3708      	adds	r7, #8
 801bdac:	46bd      	mov	sp, r7
 801bdae:	bd80      	pop	{r7, pc}
 801bdb0:	20001ec8 	.word	0x20001ec8

0801bdb4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b082      	sub	sp, #8
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801bdbc:	4b03      	ldr	r3, [pc, #12]	@ (801bdcc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	2004      	movs	r0, #4
 801bdc2:	4798      	blx	r3
}
 801bdc4:	bf00      	nop
 801bdc6:	3708      	adds	r7, #8
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	bd80      	pop	{r7, pc}
 801bdcc:	20001ec8 	.word	0x20001ec8

0801bdd0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b082      	sub	sp, #8
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801bdd8:	4b03      	ldr	r3, [pc, #12]	@ (801bde8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	2008      	movs	r0, #8
 801bdde:	4798      	blx	r3
}
 801bde0:	bf00      	nop
 801bde2:	3708      	adds	r7, #8
 801bde4:	46bd      	mov	sp, r7
 801bde6:	bd80      	pop	{r7, pc}
 801bde8:	20001ec8 	.word	0x20001ec8

0801bdec <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bdec:	b580      	push	{r7, lr}
 801bdee:	b082      	sub	sp, #8
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801bdf4:	4b03      	ldr	r3, [pc, #12]	@ (801be04 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	2010      	movs	r0, #16
 801bdfa:	4798      	blx	r3
}
 801bdfc:	bf00      	nop
 801bdfe:	3708      	adds	r7, #8
 801be00:	46bd      	mov	sp, r7
 801be02:	bd80      	pop	{r7, pc}
 801be04:	20001ec8 	.word	0x20001ec8

0801be08 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b082      	sub	sp, #8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801be10:	4b04      	ldr	r3, [pc, #16]	@ (801be24 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801be18:	4798      	blx	r3
}
 801be1a:	bf00      	nop
 801be1c:	3708      	adds	r7, #8
 801be1e:	46bd      	mov	sp, r7
 801be20:	bd80      	pop	{r7, pc}
 801be22:	bf00      	nop
 801be24:	20001ec8 	.word	0x20001ec8

0801be28 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801be28:	b580      	push	{r7, lr}
 801be2a:	b084      	sub	sp, #16
 801be2c:	af00      	add	r7, sp, #0
 801be2e:	4603      	mov	r3, r0
 801be30:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801be32:	f7f0 f9a4 	bl	800c17e <RBI_IsDCDC>
 801be36:	4603      	mov	r3, r0
 801be38:	2b01      	cmp	r3, #1
 801be3a:	d112      	bne.n	801be62 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801be3c:	f640 1023 	movw	r0, #2339	@ 0x923
 801be40:	f7ff fe02 	bl	801ba48 <SUBGRF_ReadRegister>
 801be44:	4603      	mov	r3, r0
 801be46:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801be48:	7bfb      	ldrb	r3, [r7, #15]
 801be4a:	f023 0306 	bic.w	r3, r3, #6
 801be4e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801be50:	7bfa      	ldrb	r2, [r7, #15]
 801be52:	79fb      	ldrb	r3, [r7, #7]
 801be54:	4313      	orrs	r3, r2
 801be56:	b2db      	uxtb	r3, r3
 801be58:	4619      	mov	r1, r3
 801be5a:	f640 1023 	movw	r0, #2339	@ 0x923
 801be5e:	f7ff fdd1 	bl	801ba04 <SUBGRF_WriteRegister>
  }
}
 801be62:	bf00      	nop
 801be64:	3710      	adds	r7, #16
 801be66:	46bd      	mov	sp, r7
 801be68:	bd80      	pop	{r7, pc}
	...

0801be6c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801be6c:	b480      	push	{r7}
 801be6e:	b085      	sub	sp, #20
 801be70:	af00      	add	r7, sp, #0
 801be72:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d101      	bne.n	801be7e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801be7a:	231f      	movs	r3, #31
 801be7c:	e017      	b.n	801beae <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801be7e:	2300      	movs	r3, #0
 801be80:	73fb      	strb	r3, [r7, #15]
 801be82:	e00f      	b.n	801bea4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801be84:	7bfb      	ldrb	r3, [r7, #15]
 801be86:	4a0c      	ldr	r2, [pc, #48]	@ (801beb8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801be88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801be8c:	687a      	ldr	r2, [r7, #4]
 801be8e:	429a      	cmp	r2, r3
 801be90:	d205      	bcs.n	801be9e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801be92:	7bfb      	ldrb	r3, [r7, #15]
 801be94:	4a08      	ldr	r2, [pc, #32]	@ (801beb8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801be96:	00db      	lsls	r3, r3, #3
 801be98:	4413      	add	r3, r2
 801be9a:	791b      	ldrb	r3, [r3, #4]
 801be9c:	e007      	b.n	801beae <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801be9e:	7bfb      	ldrb	r3, [r7, #15]
 801bea0:	3301      	adds	r3, #1
 801bea2:	73fb      	strb	r3, [r7, #15]
 801bea4:	7bfb      	ldrb	r3, [r7, #15]
 801bea6:	2b15      	cmp	r3, #21
 801bea8:	d9ec      	bls.n	801be84 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801beaa:	bf00      	nop
 801beac:	e7fd      	b.n	801beaa <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801beae:	4618      	mov	r0, r3
 801beb0:	3714      	adds	r7, #20
 801beb2:	46bd      	mov	sp, r7
 801beb4:	bc80      	pop	{r7}
 801beb6:	4770      	bx	lr
 801beb8:	08020d70 	.word	0x08020d70

0801bebc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801bebc:	b580      	push	{r7, lr}
 801bebe:	b08a      	sub	sp, #40	@ 0x28
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
 801bec4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801bec6:	4b35      	ldr	r3, [pc, #212]	@ (801bf9c <SUBGRF_GetCFO+0xe0>)
 801bec8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801beca:	f640 0007 	movw	r0, #2055	@ 0x807
 801bece:	f7ff fdbb 	bl	801ba48 <SUBGRF_ReadRegister>
 801bed2:	4603      	mov	r3, r0
 801bed4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801bed6:	7ffb      	ldrb	r3, [r7, #31]
 801bed8:	08db      	lsrs	r3, r3, #3
 801beda:	b2db      	uxtb	r3, r3
 801bedc:	f003 0303 	and.w	r3, r3, #3
 801bee0:	3328      	adds	r3, #40	@ 0x28
 801bee2:	443b      	add	r3, r7
 801bee4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801bee8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801beea:	7ffb      	ldrb	r3, [r7, #31]
 801beec:	f003 0307 	and.w	r3, r3, #7
 801bef0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801bef2:	7fba      	ldrb	r2, [r7, #30]
 801bef4:	7f7b      	ldrb	r3, [r7, #29]
 801bef6:	3301      	adds	r3, #1
 801bef8:	fa02 f303 	lsl.w	r3, r2, r3
 801befc:	461a      	mov	r2, r3
 801befe:	4b28      	ldr	r3, [pc, #160]	@ (801bfa0 <SUBGRF_GetCFO+0xe4>)
 801bf00:	fbb3 f3f2 	udiv	r3, r3, r2
 801bf04:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801bf06:	69ba      	ldr	r2, [r7, #24]
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	fbb2 f3f3 	udiv	r3, r2, r3
 801bf0e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801bf10:	2301      	movs	r3, #1
 801bf12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801bf16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bf1a:	697a      	ldr	r2, [r7, #20]
 801bf1c:	fb02 f303 	mul.w	r3, r2, r3
 801bf20:	2b07      	cmp	r3, #7
 801bf22:	d802      	bhi.n	801bf2a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801bf24:	2302      	movs	r3, #2
 801bf26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801bf2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bf2e:	697a      	ldr	r2, [r7, #20]
 801bf30:	fb02 f303 	mul.w	r3, r2, r3
 801bf34:	2b03      	cmp	r3, #3
 801bf36:	d802      	bhi.n	801bf3e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801bf38:	2304      	movs	r3, #4
 801bf3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801bf3e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801bf42:	69bb      	ldr	r3, [r7, #24]
 801bf44:	fb02 f303 	mul.w	r3, r2, r3
 801bf48:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801bf4a:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801bf4e:	f7ff fd7b 	bl	801ba48 <SUBGRF_ReadRegister>
 801bf52:	4603      	mov	r3, r0
 801bf54:	021b      	lsls	r3, r3, #8
 801bf56:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801bf5a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801bf5c:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801bf60:	f7ff fd72 	bl	801ba48 <SUBGRF_ReadRegister>
 801bf64:	4603      	mov	r3, r0
 801bf66:	461a      	mov	r2, r3
 801bf68:	6a3b      	ldr	r3, [r7, #32]
 801bf6a:	4313      	orrs	r3, r2
 801bf6c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801bf6e:	6a3b      	ldr	r3, [r7, #32]
 801bf70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d005      	beq.n	801bf84 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801bf78:	6a3b      	ldr	r3, [r7, #32]
 801bf7a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801bf7e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801bf82:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801bf84:	693b      	ldr	r3, [r7, #16]
 801bf86:	095b      	lsrs	r3, r3, #5
 801bf88:	6a3a      	ldr	r2, [r7, #32]
 801bf8a:	fb02 f303 	mul.w	r3, r2, r3
 801bf8e:	11da      	asrs	r2, r3, #7
 801bf90:	683b      	ldr	r3, [r7, #0]
 801bf92:	601a      	str	r2, [r3, #0]
}
 801bf94:	bf00      	nop
 801bf96:	3728      	adds	r7, #40	@ 0x28
 801bf98:	46bd      	mov	sp, r7
 801bf9a:	bd80      	pop	{r7, pc}
 801bf9c:	0c0a0804 	.word	0x0c0a0804
 801bfa0:	01e84800 	.word	0x01e84800

0801bfa4 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801bfa4:	b480      	push	{r7}
 801bfa6:	b087      	sub	sp, #28
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	4603      	mov	r3, r0
 801bfac:	60b9      	str	r1, [r7, #8]
 801bfae:	607a      	str	r2, [r7, #4]
 801bfb0:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801bfb2:	2300      	movs	r3, #0
 801bfb4:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801bfb6:	f04f 33ff 	mov.w	r3, #4294967295
 801bfba:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801bfbc:	697b      	ldr	r3, [r7, #20]
}
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	371c      	adds	r7, #28
 801bfc2:	46bd      	mov	sp, r7
 801bfc4:	bc80      	pop	{r7}
 801bfc6:	4770      	bx	lr

0801bfc8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801bfc8:	b480      	push	{r7}
 801bfca:	b087      	sub	sp, #28
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	4603      	mov	r3, r0
 801bfd0:	60b9      	str	r1, [r7, #8]
 801bfd2:	607a      	str	r2, [r7, #4]
 801bfd4:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801bfda:	f04f 33ff 	mov.w	r3, #4294967295
 801bfde:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801bfe0:	697b      	ldr	r3, [r7, #20]
}
 801bfe2:	4618      	mov	r0, r3
 801bfe4:	371c      	adds	r7, #28
 801bfe6:	46bd      	mov	sp, r7
 801bfe8:	bc80      	pop	{r7}
 801bfea:	4770      	bx	lr

0801bfec <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801bfec:	b480      	push	{r7}
 801bfee:	b085      	sub	sp, #20
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	60f8      	str	r0, [r7, #12]
 801bff4:	60b9      	str	r1, [r7, #8]
 801bff6:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801bff8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801bffc:	4618      	mov	r0, r3
 801bffe:	3714      	adds	r7, #20
 801c000:	46bd      	mov	sp, r7
 801c002:	bc80      	pop	{r7}
 801c004:	4770      	bx	lr

0801c006 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c006:	b480      	push	{r7}
 801c008:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c00a:	bf00      	nop
 801c00c:	46bd      	mov	sp, r7
 801c00e:	bc80      	pop	{r7}
 801c010:	4770      	bx	lr

0801c012 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c012:	b480      	push	{r7}
 801c014:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c016:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c018:	4618      	mov	r0, r3
 801c01a:	46bd      	mov	sp, r7
 801c01c:	bc80      	pop	{r7}
 801c01e:	4770      	bx	lr

0801c020 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c020:	b480      	push	{r7}
 801c022:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c024:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c026:	4618      	mov	r0, r3
 801c028:	46bd      	mov	sp, r7
 801c02a:	bc80      	pop	{r7}
 801c02c:	4770      	bx	lr

0801c02e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c02e:	b480      	push	{r7}
 801c030:	b083      	sub	sp, #12
 801c032:	af00      	add	r7, sp, #0
 801c034:	4603      	mov	r3, r0
 801c036:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c038:	bf00      	nop
 801c03a:	370c      	adds	r7, #12
 801c03c:	46bd      	mov	sp, r7
 801c03e:	bc80      	pop	{r7}
 801c040:	4770      	bx	lr

0801c042 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c042:	b480      	push	{r7}
 801c044:	b087      	sub	sp, #28
 801c046:	af00      	add	r7, sp, #0
 801c048:	60f8      	str	r0, [r7, #12]
 801c04a:	460b      	mov	r3, r1
 801c04c:	607a      	str	r2, [r7, #4]
 801c04e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c050:	f04f 33ff 	mov.w	r3, #4294967295
 801c054:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c056:	697b      	ldr	r3, [r7, #20]
}
 801c058:	4618      	mov	r0, r3
 801c05a:	371c      	adds	r7, #28
 801c05c:	46bd      	mov	sp, r7
 801c05e:	bc80      	pop	{r7}
 801c060:	4770      	bx	lr

0801c062 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c062:	b480      	push	{r7}
 801c064:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c066:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801c06a:	4618      	mov	r0, r3
 801c06c:	46bd      	mov	sp, r7
 801c06e:	bc80      	pop	{r7}
 801c070:	4770      	bx	lr

0801c072 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c072:	b480      	push	{r7}
 801c074:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c076:	bf00      	nop
 801c078:	46bd      	mov	sp, r7
 801c07a:	bc80      	pop	{r7}
 801c07c:	4770      	bx	lr

0801c07e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c07e:	b480      	push	{r7}
 801c080:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c082:	bf00      	nop
 801c084:	46bd      	mov	sp, r7
 801c086:	bc80      	pop	{r7}
 801c088:	4770      	bx	lr

0801c08a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c08a:	b480      	push	{r7}
 801c08c:	b083      	sub	sp, #12
 801c08e:	af00      	add	r7, sp, #0
 801c090:	4603      	mov	r3, r0
 801c092:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c094:	bf00      	nop
 801c096:	370c      	adds	r7, #12
 801c098:	46bd      	mov	sp, r7
 801c09a:	bc80      	pop	{r7}
 801c09c:	4770      	bx	lr
	...

0801c0a0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c0a0:	b480      	push	{r7}
 801c0a2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c0a4:	4b04      	ldr	r3, [pc, #16]	@ (801c0b8 <UTIL_LPM_Init+0x18>)
 801c0a6:	2200      	movs	r2, #0
 801c0a8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c0aa:	4b04      	ldr	r3, [pc, #16]	@ (801c0bc <UTIL_LPM_Init+0x1c>)
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c0b0:	bf00      	nop
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	bc80      	pop	{r7}
 801c0b6:	4770      	bx	lr
 801c0b8:	20001ecc 	.word	0x20001ecc
 801c0bc:	20001ed0 	.word	0x20001ed0

0801c0c0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c0c0:	b480      	push	{r7}
 801c0c2:	b087      	sub	sp, #28
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
 801c0c8:	460b      	mov	r3, r1
 801c0ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0cc:	f3ef 8310 	mrs	r3, PRIMASK
 801c0d0:	613b      	str	r3, [r7, #16]
  return(result);
 801c0d2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c0d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0d6:	b672      	cpsid	i
}
 801c0d8:	bf00      	nop
  
  switch( state )
 801c0da:	78fb      	ldrb	r3, [r7, #3]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d008      	beq.n	801c0f2 <UTIL_LPM_SetStopMode+0x32>
 801c0e0:	2b01      	cmp	r3, #1
 801c0e2:	d10e      	bne.n	801c102 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c0e4:	4b0d      	ldr	r3, [pc, #52]	@ (801c11c <UTIL_LPM_SetStopMode+0x5c>)
 801c0e6:	681a      	ldr	r2, [r3, #0]
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	4313      	orrs	r3, r2
 801c0ec:	4a0b      	ldr	r2, [pc, #44]	@ (801c11c <UTIL_LPM_SetStopMode+0x5c>)
 801c0ee:	6013      	str	r3, [r2, #0]
      break;
 801c0f0:	e008      	b.n	801c104 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	43da      	mvns	r2, r3
 801c0f6:	4b09      	ldr	r3, [pc, #36]	@ (801c11c <UTIL_LPM_SetStopMode+0x5c>)
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	4013      	ands	r3, r2
 801c0fc:	4a07      	ldr	r2, [pc, #28]	@ (801c11c <UTIL_LPM_SetStopMode+0x5c>)
 801c0fe:	6013      	str	r3, [r2, #0]
      break;
 801c100:	e000      	b.n	801c104 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c102:	bf00      	nop
 801c104:	697b      	ldr	r3, [r7, #20]
 801c106:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c108:	68fb      	ldr	r3, [r7, #12]
 801c10a:	f383 8810 	msr	PRIMASK, r3
}
 801c10e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c110:	bf00      	nop
 801c112:	371c      	adds	r7, #28
 801c114:	46bd      	mov	sp, r7
 801c116:	bc80      	pop	{r7}
 801c118:	4770      	bx	lr
 801c11a:	bf00      	nop
 801c11c:	20001ecc 	.word	0x20001ecc

0801c120 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c120:	b480      	push	{r7}
 801c122:	b087      	sub	sp, #28
 801c124:	af00      	add	r7, sp, #0
 801c126:	6078      	str	r0, [r7, #4]
 801c128:	460b      	mov	r3, r1
 801c12a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c12c:	f3ef 8310 	mrs	r3, PRIMASK
 801c130:	613b      	str	r3, [r7, #16]
  return(result);
 801c132:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c136:	b672      	cpsid	i
}
 801c138:	bf00      	nop
  
  switch(state)
 801c13a:	78fb      	ldrb	r3, [r7, #3]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d008      	beq.n	801c152 <UTIL_LPM_SetOffMode+0x32>
 801c140:	2b01      	cmp	r3, #1
 801c142:	d10e      	bne.n	801c162 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c144:	4b0d      	ldr	r3, [pc, #52]	@ (801c17c <UTIL_LPM_SetOffMode+0x5c>)
 801c146:	681a      	ldr	r2, [r3, #0]
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	4313      	orrs	r3, r2
 801c14c:	4a0b      	ldr	r2, [pc, #44]	@ (801c17c <UTIL_LPM_SetOffMode+0x5c>)
 801c14e:	6013      	str	r3, [r2, #0]
      break;
 801c150:	e008      	b.n	801c164 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	43da      	mvns	r2, r3
 801c156:	4b09      	ldr	r3, [pc, #36]	@ (801c17c <UTIL_LPM_SetOffMode+0x5c>)
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	4013      	ands	r3, r2
 801c15c:	4a07      	ldr	r2, [pc, #28]	@ (801c17c <UTIL_LPM_SetOffMode+0x5c>)
 801c15e:	6013      	str	r3, [r2, #0]
      break;
 801c160:	e000      	b.n	801c164 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c162:	bf00      	nop
 801c164:	697b      	ldr	r3, [r7, #20]
 801c166:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	f383 8810 	msr	PRIMASK, r3
}
 801c16e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c170:	bf00      	nop
 801c172:	371c      	adds	r7, #28
 801c174:	46bd      	mov	sp, r7
 801c176:	bc80      	pop	{r7}
 801c178:	4770      	bx	lr
 801c17a:	bf00      	nop
 801c17c:	20001ed0 	.word	0x20001ed0

0801c180 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b084      	sub	sp, #16
 801c184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c186:	f3ef 8310 	mrs	r3, PRIMASK
 801c18a:	60bb      	str	r3, [r7, #8]
  return(result);
 801c18c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c18e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c190:	b672      	cpsid	i
}
 801c192:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c194:	4b12      	ldr	r3, [pc, #72]	@ (801c1e0 <UTIL_LPM_EnterLowPower+0x60>)
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d006      	beq.n	801c1aa <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c19c:	4b11      	ldr	r3, [pc, #68]	@ (801c1e4 <UTIL_LPM_EnterLowPower+0x64>)
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c1a2:	4b10      	ldr	r3, [pc, #64]	@ (801c1e4 <UTIL_LPM_EnterLowPower+0x64>)
 801c1a4:	685b      	ldr	r3, [r3, #4]
 801c1a6:	4798      	blx	r3
 801c1a8:	e010      	b.n	801c1cc <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c1aa:	4b0f      	ldr	r3, [pc, #60]	@ (801c1e8 <UTIL_LPM_EnterLowPower+0x68>)
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d006      	beq.n	801c1c0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c1b2:	4b0c      	ldr	r3, [pc, #48]	@ (801c1e4 <UTIL_LPM_EnterLowPower+0x64>)
 801c1b4:	689b      	ldr	r3, [r3, #8]
 801c1b6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c1b8:	4b0a      	ldr	r3, [pc, #40]	@ (801c1e4 <UTIL_LPM_EnterLowPower+0x64>)
 801c1ba:	68db      	ldr	r3, [r3, #12]
 801c1bc:	4798      	blx	r3
 801c1be:	e005      	b.n	801c1cc <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c1c0:	4b08      	ldr	r3, [pc, #32]	@ (801c1e4 <UTIL_LPM_EnterLowPower+0x64>)
 801c1c2:	691b      	ldr	r3, [r3, #16]
 801c1c4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c1c6:	4b07      	ldr	r3, [pc, #28]	@ (801c1e4 <UTIL_LPM_EnterLowPower+0x64>)
 801c1c8:	695b      	ldr	r3, [r3, #20]
 801c1ca:	4798      	blx	r3
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	f383 8810 	msr	PRIMASK, r3
}
 801c1d6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c1d8:	bf00      	nop
 801c1da:	3710      	adds	r7, #16
 801c1dc:	46bd      	mov	sp, r7
 801c1de:	bd80      	pop	{r7, pc}
 801c1e0:	20001ecc 	.word	0x20001ecc
 801c1e4:	080207e4 	.word	0x080207e4
 801c1e8:	20001ed0 	.word	0x20001ed0

0801c1ec <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c1ec:	b480      	push	{r7}
 801c1ee:	b087      	sub	sp, #28
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	60f8      	str	r0, [r7, #12]
 801c1f4:	60b9      	str	r1, [r7, #8]
 801c1f6:	4613      	mov	r3, r2
 801c1f8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c1fe:	68bb      	ldr	r3, [r7, #8]
 801c200:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c202:	e007      	b.n	801c214 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c204:	693a      	ldr	r2, [r7, #16]
 801c206:	1c53      	adds	r3, r2, #1
 801c208:	613b      	str	r3, [r7, #16]
 801c20a:	697b      	ldr	r3, [r7, #20]
 801c20c:	1c59      	adds	r1, r3, #1
 801c20e:	6179      	str	r1, [r7, #20]
 801c210:	7812      	ldrb	r2, [r2, #0]
 801c212:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c214:	88fb      	ldrh	r3, [r7, #6]
 801c216:	1e5a      	subs	r2, r3, #1
 801c218:	80fa      	strh	r2, [r7, #6]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d1f2      	bne.n	801c204 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c21e:	bf00      	nop
 801c220:	bf00      	nop
 801c222:	371c      	adds	r7, #28
 801c224:	46bd      	mov	sp, r7
 801c226:	bc80      	pop	{r7}
 801c228:	4770      	bx	lr

0801c22a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c22a:	b480      	push	{r7}
 801c22c:	b085      	sub	sp, #20
 801c22e:	af00      	add	r7, sp, #0
 801c230:	6078      	str	r0, [r7, #4]
 801c232:	460b      	mov	r3, r1
 801c234:	70fb      	strb	r3, [r7, #3]
 801c236:	4613      	mov	r3, r2
 801c238:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c23e:	e004      	b.n	801c24a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c240:	68fb      	ldr	r3, [r7, #12]
 801c242:	1c5a      	adds	r2, r3, #1
 801c244:	60fa      	str	r2, [r7, #12]
 801c246:	78fa      	ldrb	r2, [r7, #3]
 801c248:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c24a:	883b      	ldrh	r3, [r7, #0]
 801c24c:	1e5a      	subs	r2, r3, #1
 801c24e:	803a      	strh	r2, [r7, #0]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d1f5      	bne.n	801c240 <UTIL_MEM_set_8+0x16>
  }
}
 801c254:	bf00      	nop
 801c256:	bf00      	nop
 801c258:	3714      	adds	r7, #20
 801c25a:	46bd      	mov	sp, r7
 801c25c:	bc80      	pop	{r7}
 801c25e:	4770      	bx	lr

0801c260 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c260:	b082      	sub	sp, #8
 801c262:	b480      	push	{r7}
 801c264:	b087      	sub	sp, #28
 801c266:	af00      	add	r7, sp, #0
 801c268:	60f8      	str	r0, [r7, #12]
 801c26a:	1d38      	adds	r0, r7, #4
 801c26c:	e880 0006 	stmia.w	r0, {r1, r2}
 801c270:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c272:	2300      	movs	r3, #0
 801c274:	613b      	str	r3, [r7, #16]
 801c276:	2300      	movs	r3, #0
 801c278:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c27a:	687a      	ldr	r2, [r7, #4]
 801c27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c27e:	4413      	add	r3, r2
 801c280:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c282:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c286:	b29a      	uxth	r2, r3
 801c288:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c28c:	b29b      	uxth	r3, r3
 801c28e:	4413      	add	r3, r2
 801c290:	b29b      	uxth	r3, r3
 801c292:	b21b      	sxth	r3, r3
 801c294:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c296:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c29a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c29e:	db0a      	blt.n	801c2b6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c2a0:	693b      	ldr	r3, [r7, #16]
 801c2a2:	3301      	adds	r3, #1
 801c2a4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c2a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c2aa:	b29b      	uxth	r3, r3
 801c2ac:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801c2b0:	b29b      	uxth	r3, r3
 801c2b2:	b21b      	sxth	r3, r3
 801c2b4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	461a      	mov	r2, r3
 801c2ba:	f107 0310 	add.w	r3, r7, #16
 801c2be:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c2c2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c2c6:	68f8      	ldr	r0, [r7, #12]
 801c2c8:	371c      	adds	r7, #28
 801c2ca:	46bd      	mov	sp, r7
 801c2cc:	bc80      	pop	{r7}
 801c2ce:	b002      	add	sp, #8
 801c2d0:	4770      	bx	lr

0801c2d2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c2d2:	b082      	sub	sp, #8
 801c2d4:	b480      	push	{r7}
 801c2d6:	b087      	sub	sp, #28
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	60f8      	str	r0, [r7, #12]
 801c2dc:	1d38      	adds	r0, r7, #4
 801c2de:	e880 0006 	stmia.w	r0, {r1, r2}
 801c2e2:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	613b      	str	r3, [r7, #16]
 801c2e8:	2300      	movs	r3, #0
 801c2ea:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c2ec:	687a      	ldr	r2, [r7, #4]
 801c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2f0:	1ad3      	subs	r3, r2, r3
 801c2f2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c2f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c2f8:	b29a      	uxth	r2, r3
 801c2fa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c2fe:	b29b      	uxth	r3, r3
 801c300:	1ad3      	subs	r3, r2, r3
 801c302:	b29b      	uxth	r3, r3
 801c304:	b21b      	sxth	r3, r3
 801c306:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c308:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	da0a      	bge.n	801c326 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c310:	693b      	ldr	r3, [r7, #16]
 801c312:	3b01      	subs	r3, #1
 801c314:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c316:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c31a:	b29b      	uxth	r3, r3
 801c31c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801c320:	b29b      	uxth	r3, r3
 801c322:	b21b      	sxth	r3, r3
 801c324:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	461a      	mov	r2, r3
 801c32a:	f107 0310 	add.w	r3, r7, #16
 801c32e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c332:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c336:	68f8      	ldr	r0, [r7, #12]
 801c338:	371c      	adds	r7, #28
 801c33a:	46bd      	mov	sp, r7
 801c33c:	bc80      	pop	{r7}
 801c33e:	b002      	add	sp, #8
 801c340:	4770      	bx	lr
	...

0801c344 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c344:	b580      	push	{r7, lr}
 801c346:	b088      	sub	sp, #32
 801c348:	af02      	add	r7, sp, #8
 801c34a:	463b      	mov	r3, r7
 801c34c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c350:	2300      	movs	r3, #0
 801c352:	60bb      	str	r3, [r7, #8]
 801c354:	2300      	movs	r3, #0
 801c356:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c358:	4b10      	ldr	r3, [pc, #64]	@ (801c39c <SysTimeSet+0x58>)
 801c35a:	691b      	ldr	r3, [r3, #16]
 801c35c:	f107 0208 	add.w	r2, r7, #8
 801c360:	3204      	adds	r2, #4
 801c362:	4610      	mov	r0, r2
 801c364:	4798      	blx	r3
 801c366:	4603      	mov	r3, r0
 801c368:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c36a:	f107 0010 	add.w	r0, r7, #16
 801c36e:	68fb      	ldr	r3, [r7, #12]
 801c370:	9300      	str	r3, [sp, #0]
 801c372:	68bb      	ldr	r3, [r7, #8]
 801c374:	463a      	mov	r2, r7
 801c376:	ca06      	ldmia	r2, {r1, r2}
 801c378:	f7ff ffab 	bl	801c2d2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c37c:	4b07      	ldr	r3, [pc, #28]	@ (801c39c <SysTimeSet+0x58>)
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	693a      	ldr	r2, [r7, #16]
 801c382:	4610      	mov	r0, r2
 801c384:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c386:	4b05      	ldr	r3, [pc, #20]	@ (801c39c <SysTimeSet+0x58>)
 801c388:	689b      	ldr	r3, [r3, #8]
 801c38a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c38e:	4610      	mov	r0, r2
 801c390:	4798      	blx	r3
}
 801c392:	bf00      	nop
 801c394:	3718      	adds	r7, #24
 801c396:	46bd      	mov	sp, r7
 801c398:	bd80      	pop	{r7, pc}
 801c39a:	bf00      	nop
 801c39c:	080208c8 	.word	0x080208c8

0801c3a0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b08a      	sub	sp, #40	@ 0x28
 801c3a4:	af02      	add	r7, sp, #8
 801c3a6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	61bb      	str	r3, [r7, #24]
 801c3ac:	2300      	movs	r3, #0
 801c3ae:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c3b0:	2300      	movs	r3, #0
 801c3b2:	613b      	str	r3, [r7, #16]
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c3b8:	4b14      	ldr	r3, [pc, #80]	@ (801c40c <SysTimeGet+0x6c>)
 801c3ba:	691b      	ldr	r3, [r3, #16]
 801c3bc:	f107 0218 	add.w	r2, r7, #24
 801c3c0:	3204      	adds	r2, #4
 801c3c2:	4610      	mov	r0, r2
 801c3c4:	4798      	blx	r3
 801c3c6:	4603      	mov	r3, r0
 801c3c8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c3ca:	4b10      	ldr	r3, [pc, #64]	@ (801c40c <SysTimeGet+0x6c>)
 801c3cc:	68db      	ldr	r3, [r3, #12]
 801c3ce:	4798      	blx	r3
 801c3d0:	4603      	mov	r3, r0
 801c3d2:	b21b      	sxth	r3, r3
 801c3d4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c3d6:	4b0d      	ldr	r3, [pc, #52]	@ (801c40c <SysTimeGet+0x6c>)
 801c3d8:	685b      	ldr	r3, [r3, #4]
 801c3da:	4798      	blx	r3
 801c3dc:	4603      	mov	r3, r0
 801c3de:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c3e0:	f107 0010 	add.w	r0, r7, #16
 801c3e4:	69fb      	ldr	r3, [r7, #28]
 801c3e6:	9300      	str	r3, [sp, #0]
 801c3e8:	69bb      	ldr	r3, [r7, #24]
 801c3ea:	f107 0208 	add.w	r2, r7, #8
 801c3ee:	ca06      	ldmia	r2, {r1, r2}
 801c3f0:	f7ff ff36 	bl	801c260 <SysTimeAdd>

  return sysTime;
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	461a      	mov	r2, r3
 801c3f8:	f107 0310 	add.w	r3, r7, #16
 801c3fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c400:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c404:	6878      	ldr	r0, [r7, #4]
 801c406:	3720      	adds	r7, #32
 801c408:	46bd      	mov	sp, r7
 801c40a:	bd80      	pop	{r7, pc}
 801c40c:	080208c8 	.word	0x080208c8

0801c410 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c410:	b580      	push	{r7, lr}
 801c412:	b084      	sub	sp, #16
 801c414:	af00      	add	r7, sp, #0
 801c416:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c418:	2300      	movs	r3, #0
 801c41a:	60bb      	str	r3, [r7, #8]
 801c41c:	2300      	movs	r3, #0
 801c41e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c420:	4b0a      	ldr	r3, [pc, #40]	@ (801c44c <SysTimeGetMcuTime+0x3c>)
 801c422:	691b      	ldr	r3, [r3, #16]
 801c424:	f107 0208 	add.w	r2, r7, #8
 801c428:	3204      	adds	r2, #4
 801c42a:	4610      	mov	r0, r2
 801c42c:	4798      	blx	r3
 801c42e:	4603      	mov	r3, r0
 801c430:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	461a      	mov	r2, r3
 801c436:	f107 0308 	add.w	r3, r7, #8
 801c43a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c43e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c442:	6878      	ldr	r0, [r7, #4]
 801c444:	3710      	adds	r7, #16
 801c446:	46bd      	mov	sp, r7
 801c448:	bd80      	pop	{r7, pc}
 801c44a:	bf00      	nop
 801c44c:	080208c8 	.word	0x080208c8

0801c450 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c450:	b580      	push	{r7, lr}
 801c452:	b090      	sub	sp, #64	@ 0x40
 801c454:	af00      	add	r7, sp, #0
 801c456:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c458:	4b73      	ldr	r3, [pc, #460]	@ (801c628 <UTIL_SEQ_Run+0x1d8>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801c45e:	4b72      	ldr	r3, [pc, #456]	@ (801c628 <UTIL_SEQ_Run+0x1d8>)
 801c460:	681a      	ldr	r2, [r3, #0]
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	4013      	ands	r3, r2
 801c466:	4a70      	ldr	r2, [pc, #448]	@ (801c628 <UTIL_SEQ_Run+0x1d8>)
 801c468:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c46a:	4b70      	ldr	r3, [pc, #448]	@ (801c62c <UTIL_SEQ_Run+0x1dc>)
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c470:	4b6f      	ldr	r3, [pc, #444]	@ (801c630 <UTIL_SEQ_Run+0x1e0>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c476:	4b6f      	ldr	r3, [pc, #444]	@ (801c634 <UTIL_SEQ_Run+0x1e4>)
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801c47c:	4b6e      	ldr	r3, [pc, #440]	@ (801c638 <UTIL_SEQ_Run+0x1e8>)
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c482:	e08d      	b.n	801c5a0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c484:	2300      	movs	r3, #0
 801c486:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c488:	e002      	b.n	801c490 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c48c:	3301      	adds	r3, #1
 801c48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c490:	4a6a      	ldr	r2, [pc, #424]	@ (801c63c <UTIL_SEQ_Run+0x1ec>)
 801c492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c494:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c49a:	401a      	ands	r2, r3
 801c49c:	4b62      	ldr	r3, [pc, #392]	@ (801c628 <UTIL_SEQ_Run+0x1d8>)
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	4013      	ands	r3, r2
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d0f1      	beq.n	801c48a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c4a6:	4a65      	ldr	r2, [pc, #404]	@ (801c63c <UTIL_SEQ_Run+0x1ec>)
 801c4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c4aa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4b0:	401a      	ands	r2, r3
 801c4b2:	4b5d      	ldr	r3, [pc, #372]	@ (801c628 <UTIL_SEQ_Run+0x1d8>)
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	4013      	ands	r3, r2
 801c4b8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c4ba:	4a60      	ldr	r2, [pc, #384]	@ (801c63c <UTIL_SEQ_Run+0x1ec>)
 801c4bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c4be:	00db      	lsls	r3, r3, #3
 801c4c0:	4413      	add	r3, r2
 801c4c2:	685a      	ldr	r2, [r3, #4]
 801c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4c6:	4013      	ands	r3, r2
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d106      	bne.n	801c4da <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c4cc:	4a5b      	ldr	r2, [pc, #364]	@ (801c63c <UTIL_SEQ_Run+0x1ec>)
 801c4ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c4d0:	00db      	lsls	r3, r3, #3
 801c4d2:	4413      	add	r3, r2
 801c4d4:	f04f 32ff 	mov.w	r2, #4294967295
 801c4d8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c4da:	4a58      	ldr	r2, [pc, #352]	@ (801c63c <UTIL_SEQ_Run+0x1ec>)
 801c4dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c4de:	00db      	lsls	r3, r3, #3
 801c4e0:	4413      	add	r3, r2
 801c4e2:	685a      	ldr	r2, [r3, #4]
 801c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4e6:	4013      	ands	r3, r2
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	f000 f907 	bl	801c6fc <SEQ_BitPosition>
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	461a      	mov	r2, r3
 801c4f2:	4b53      	ldr	r3, [pc, #332]	@ (801c640 <UTIL_SEQ_Run+0x1f0>)
 801c4f4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c4f6:	4a51      	ldr	r2, [pc, #324]	@ (801c63c <UTIL_SEQ_Run+0x1ec>)
 801c4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c4fa:	00db      	lsls	r3, r3, #3
 801c4fc:	4413      	add	r3, r2
 801c4fe:	685a      	ldr	r2, [r3, #4]
 801c500:	4b4f      	ldr	r3, [pc, #316]	@ (801c640 <UTIL_SEQ_Run+0x1f0>)
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	2101      	movs	r1, #1
 801c506:	fa01 f303 	lsl.w	r3, r1, r3
 801c50a:	43db      	mvns	r3, r3
 801c50c:	401a      	ands	r2, r3
 801c50e:	494b      	ldr	r1, [pc, #300]	@ (801c63c <UTIL_SEQ_Run+0x1ec>)
 801c510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c512:	00db      	lsls	r3, r3, #3
 801c514:	440b      	add	r3, r1
 801c516:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c518:	f3ef 8310 	mrs	r3, PRIMASK
 801c51c:	61bb      	str	r3, [r7, #24]
  return(result);
 801c51e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c520:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c522:	b672      	cpsid	i
}
 801c524:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c526:	4b46      	ldr	r3, [pc, #280]	@ (801c640 <UTIL_SEQ_Run+0x1f0>)
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	2201      	movs	r2, #1
 801c52c:	fa02 f303 	lsl.w	r3, r2, r3
 801c530:	43da      	mvns	r2, r3
 801c532:	4b3e      	ldr	r3, [pc, #248]	@ (801c62c <UTIL_SEQ_Run+0x1dc>)
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	4013      	ands	r3, r2
 801c538:	4a3c      	ldr	r2, [pc, #240]	@ (801c62c <UTIL_SEQ_Run+0x1dc>)
 801c53a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c53c:	2305      	movs	r3, #5
 801c53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c540:	e013      	b.n	801c56a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c544:	3b01      	subs	r3, #1
 801c546:	4a3d      	ldr	r2, [pc, #244]	@ (801c63c <UTIL_SEQ_Run+0x1ec>)
 801c548:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c54c:	4b3c      	ldr	r3, [pc, #240]	@ (801c640 <UTIL_SEQ_Run+0x1f0>)
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	2201      	movs	r2, #1
 801c552:	fa02 f303 	lsl.w	r3, r2, r3
 801c556:	43da      	mvns	r2, r3
 801c558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c55a:	3b01      	subs	r3, #1
 801c55c:	400a      	ands	r2, r1
 801c55e:	4937      	ldr	r1, [pc, #220]	@ (801c63c <UTIL_SEQ_Run+0x1ec>)
 801c560:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c566:	3b01      	subs	r3, #1
 801c568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d1e8      	bne.n	801c542 <UTIL_SEQ_Run+0xf2>
 801c570:	6a3b      	ldr	r3, [r7, #32]
 801c572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c574:	697b      	ldr	r3, [r7, #20]
 801c576:	f383 8810 	msr	PRIMASK, r3
}
 801c57a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c57c:	4b30      	ldr	r3, [pc, #192]	@ (801c640 <UTIL_SEQ_Run+0x1f0>)
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	4a30      	ldr	r2, [pc, #192]	@ (801c644 <UTIL_SEQ_Run+0x1f4>)
 801c582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c586:	4798      	blx	r3

    local_taskset = TaskSet;
 801c588:	4b28      	ldr	r3, [pc, #160]	@ (801c62c <UTIL_SEQ_Run+0x1dc>)
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801c58e:	4b28      	ldr	r3, [pc, #160]	@ (801c630 <UTIL_SEQ_Run+0x1e0>)
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801c594:	4b27      	ldr	r3, [pc, #156]	@ (801c634 <UTIL_SEQ_Run+0x1e4>)
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801c59a:	4b27      	ldr	r3, [pc, #156]	@ (801c638 <UTIL_SEQ_Run+0x1e8>)
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c5a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5a4:	401a      	ands	r2, r3
 801c5a6:	4b20      	ldr	r3, [pc, #128]	@ (801c628 <UTIL_SEQ_Run+0x1d8>)
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	4013      	ands	r3, r2
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d005      	beq.n	801c5bc <UTIL_SEQ_Run+0x16c>
 801c5b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5b4:	4013      	ands	r3, r2
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	f43f af64 	beq.w	801c484 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c5bc:	4b20      	ldr	r3, [pc, #128]	@ (801c640 <UTIL_SEQ_Run+0x1f0>)
 801c5be:	f04f 32ff 	mov.w	r2, #4294967295
 801c5c2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c5c4:	f000 f88e 	bl	801c6e4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5c8:	f3ef 8310 	mrs	r3, PRIMASK
 801c5cc:	613b      	str	r3, [r7, #16]
  return(result);
 801c5ce:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c5d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5d2:	b672      	cpsid	i
}
 801c5d4:	bf00      	nop
  local_taskset = TaskSet;
 801c5d6:	4b15      	ldr	r3, [pc, #84]	@ (801c62c <UTIL_SEQ_Run+0x1dc>)
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c5dc:	4b14      	ldr	r3, [pc, #80]	@ (801c630 <UTIL_SEQ_Run+0x1e0>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c5e2:	4b14      	ldr	r3, [pc, #80]	@ (801c634 <UTIL_SEQ_Run+0x1e4>)
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c5e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5ec:	401a      	ands	r2, r3
 801c5ee:	4b0e      	ldr	r3, [pc, #56]	@ (801c628 <UTIL_SEQ_Run+0x1d8>)
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	4013      	ands	r3, r2
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d107      	bne.n	801c608 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c5f8:	4b0f      	ldr	r3, [pc, #60]	@ (801c638 <UTIL_SEQ_Run+0x1e8>)
 801c5fa:	681a      	ldr	r2, [r3, #0]
 801c5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5fe:	4013      	ands	r3, r2
 801c600:	2b00      	cmp	r3, #0
 801c602:	d101      	bne.n	801c608 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c604:	f7e6 f850 	bl	80026a8 <UTIL_SEQ_Idle>
 801c608:	69fb      	ldr	r3, [r7, #28]
 801c60a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	f383 8810 	msr	PRIMASK, r3
}
 801c612:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c614:	f000 f86c 	bl	801c6f0 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c618:	4a03      	ldr	r2, [pc, #12]	@ (801c628 <UTIL_SEQ_Run+0x1d8>)
 801c61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c61c:	6013      	str	r3, [r2, #0]

  return;
 801c61e:	bf00      	nop
}
 801c620:	3740      	adds	r7, #64	@ 0x40
 801c622:	46bd      	mov	sp, r7
 801c624:	bd80      	pop	{r7, pc}
 801c626:	bf00      	nop
 801c628:	2000013c 	.word	0x2000013c
 801c62c:	20001ed4 	.word	0x20001ed4
 801c630:	20001ed8 	.word	0x20001ed8
 801c634:	20000138 	.word	0x20000138
 801c638:	20001edc 	.word	0x20001edc
 801c63c:	20001efc 	.word	0x20001efc
 801c640:	20001ee0 	.word	0x20001ee0
 801c644:	20001ee4 	.word	0x20001ee4

0801c648 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c648:	b580      	push	{r7, lr}
 801c64a:	b088      	sub	sp, #32
 801c64c:	af00      	add	r7, sp, #0
 801c64e:	60f8      	str	r0, [r7, #12]
 801c650:	60b9      	str	r1, [r7, #8]
 801c652:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c654:	f3ef 8310 	mrs	r3, PRIMASK
 801c658:	617b      	str	r3, [r7, #20]
  return(result);
 801c65a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c65c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c65e:	b672      	cpsid	i
}
 801c660:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c662:	68f8      	ldr	r0, [r7, #12]
 801c664:	f000 f84a 	bl	801c6fc <SEQ_BitPosition>
 801c668:	4603      	mov	r3, r0
 801c66a:	4619      	mov	r1, r3
 801c66c:	4a06      	ldr	r2, [pc, #24]	@ (801c688 <UTIL_SEQ_RegTask+0x40>)
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c674:	69fb      	ldr	r3, [r7, #28]
 801c676:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c678:	69bb      	ldr	r3, [r7, #24]
 801c67a:	f383 8810 	msr	PRIMASK, r3
}
 801c67e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c680:	bf00      	nop
}
 801c682:	3720      	adds	r7, #32
 801c684:	46bd      	mov	sp, r7
 801c686:	bd80      	pop	{r7, pc}
 801c688:	20001ee4 	.word	0x20001ee4

0801c68c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c68c:	b480      	push	{r7}
 801c68e:	b087      	sub	sp, #28
 801c690:	af00      	add	r7, sp, #0
 801c692:	6078      	str	r0, [r7, #4]
 801c694:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c696:	f3ef 8310 	mrs	r3, PRIMASK
 801c69a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c69c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c69e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c6a0:	b672      	cpsid	i
}
 801c6a2:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c6a4:	4b0d      	ldr	r3, [pc, #52]	@ (801c6dc <UTIL_SEQ_SetTask+0x50>)
 801c6a6:	681a      	ldr	r2, [r3, #0]
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	4313      	orrs	r3, r2
 801c6ac:	4a0b      	ldr	r2, [pc, #44]	@ (801c6dc <UTIL_SEQ_SetTask+0x50>)
 801c6ae:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c6b0:	4a0b      	ldr	r2, [pc, #44]	@ (801c6e0 <UTIL_SEQ_SetTask+0x54>)
 801c6b2:	683b      	ldr	r3, [r7, #0]
 801c6b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	431a      	orrs	r2, r3
 801c6bc:	4908      	ldr	r1, [pc, #32]	@ (801c6e0 <UTIL_SEQ_SetTask+0x54>)
 801c6be:	683b      	ldr	r3, [r7, #0]
 801c6c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c6c4:	697b      	ldr	r3, [r7, #20]
 801c6c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c6c8:	693b      	ldr	r3, [r7, #16]
 801c6ca:	f383 8810 	msr	PRIMASK, r3
}
 801c6ce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c6d0:	bf00      	nop
}
 801c6d2:	371c      	adds	r7, #28
 801c6d4:	46bd      	mov	sp, r7
 801c6d6:	bc80      	pop	{r7}
 801c6d8:	4770      	bx	lr
 801c6da:	bf00      	nop
 801c6dc:	20001ed4 	.word	0x20001ed4
 801c6e0:	20001efc 	.word	0x20001efc

0801c6e4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c6e4:	b480      	push	{r7}
 801c6e6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c6e8:	bf00      	nop
}
 801c6ea:	46bd      	mov	sp, r7
 801c6ec:	bc80      	pop	{r7}
 801c6ee:	4770      	bx	lr

0801c6f0 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c6f0:	b480      	push	{r7}
 801c6f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c6f4:	bf00      	nop
}
 801c6f6:	46bd      	mov	sp, r7
 801c6f8:	bc80      	pop	{r7}
 801c6fa:	4770      	bx	lr

0801c6fc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c6fc:	b480      	push	{r7}
 801c6fe:	b085      	sub	sp, #20
 801c700:	af00      	add	r7, sp, #0
 801c702:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c704:	2300      	movs	r3, #0
 801c706:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c70c:	68bb      	ldr	r3, [r7, #8]
 801c70e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c712:	d204      	bcs.n	801c71e <SEQ_BitPosition+0x22>
 801c714:	2310      	movs	r3, #16
 801c716:	73fb      	strb	r3, [r7, #15]
 801c718:	68bb      	ldr	r3, [r7, #8]
 801c71a:	041b      	lsls	r3, r3, #16
 801c71c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c71e:	68bb      	ldr	r3, [r7, #8]
 801c720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c724:	d205      	bcs.n	801c732 <SEQ_BitPosition+0x36>
 801c726:	7bfb      	ldrb	r3, [r7, #15]
 801c728:	3308      	adds	r3, #8
 801c72a:	73fb      	strb	r3, [r7, #15]
 801c72c:	68bb      	ldr	r3, [r7, #8]
 801c72e:	021b      	lsls	r3, r3, #8
 801c730:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c732:	68bb      	ldr	r3, [r7, #8]
 801c734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c738:	d205      	bcs.n	801c746 <SEQ_BitPosition+0x4a>
 801c73a:	7bfb      	ldrb	r3, [r7, #15]
 801c73c:	3304      	adds	r3, #4
 801c73e:	73fb      	strb	r3, [r7, #15]
 801c740:	68bb      	ldr	r3, [r7, #8]
 801c742:	011b      	lsls	r3, r3, #4
 801c744:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c746:	68bb      	ldr	r3, [r7, #8]
 801c748:	0f1b      	lsrs	r3, r3, #28
 801c74a:	4a07      	ldr	r2, [pc, #28]	@ (801c768 <SEQ_BitPosition+0x6c>)
 801c74c:	5cd2      	ldrb	r2, [r2, r3]
 801c74e:	7bfb      	ldrb	r3, [r7, #15]
 801c750:	4413      	add	r3, r2
 801c752:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c754:	7bfb      	ldrb	r3, [r7, #15]
 801c756:	f1c3 031f 	rsb	r3, r3, #31
 801c75a:	b2db      	uxtb	r3, r3
}
 801c75c:	4618      	mov	r0, r3
 801c75e:	3714      	adds	r7, #20
 801c760:	46bd      	mov	sp, r7
 801c762:	bc80      	pop	{r7}
 801c764:	4770      	bx	lr
 801c766:	bf00      	nop
 801c768:	08020e20 	.word	0x08020e20

0801c76c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c76c:	b580      	push	{r7, lr}
 801c76e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c770:	4b04      	ldr	r3, [pc, #16]	@ (801c784 <UTIL_TIMER_Init+0x18>)
 801c772:	2200      	movs	r2, #0
 801c774:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c776:	4b04      	ldr	r3, [pc, #16]	@ (801c788 <UTIL_TIMER_Init+0x1c>)
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	4798      	blx	r3
 801c77c:	4603      	mov	r3, r0
}
 801c77e:	4618      	mov	r0, r3
 801c780:	bd80      	pop	{r7, pc}
 801c782:	bf00      	nop
 801c784:	20001f24 	.word	0x20001f24
 801c788:	0802089c 	.word	0x0802089c

0801c78c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c78c:	b580      	push	{r7, lr}
 801c78e:	b084      	sub	sp, #16
 801c790:	af00      	add	r7, sp, #0
 801c792:	60f8      	str	r0, [r7, #12]
 801c794:	60b9      	str	r1, [r7, #8]
 801c796:	603b      	str	r3, [r7, #0]
 801c798:	4613      	mov	r3, r2
 801c79a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d023      	beq.n	801c7ea <UTIL_TIMER_Create+0x5e>
 801c7a2:	683b      	ldr	r3, [r7, #0]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d020      	beq.n	801c7ea <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	2200      	movs	r2, #0
 801c7ac:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c7ae:	4b11      	ldr	r3, [pc, #68]	@ (801c7f4 <UTIL_TIMER_Create+0x68>)
 801c7b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c7b2:	68b8      	ldr	r0, [r7, #8]
 801c7b4:	4798      	blx	r3
 801c7b6:	4602      	mov	r2, r0
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	2200      	movs	r2, #0
 801c7c0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	2200      	movs	r2, #0
 801c7c6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	683a      	ldr	r2, [r7, #0]
 801c7d2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	69ba      	ldr	r2, [r7, #24]
 801c7d8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	79fa      	ldrb	r2, [r7, #7]
 801c7de:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	2200      	movs	r2, #0
 801c7e4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	e000      	b.n	801c7ec <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c7ea:	2301      	movs	r3, #1
  }
}
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	3710      	adds	r7, #16
 801c7f0:	46bd      	mov	sp, r7
 801c7f2:	bd80      	pop	{r7, pc}
 801c7f4:	0802089c 	.word	0x0802089c

0801c7f8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b08a      	sub	sp, #40	@ 0x28
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c800:	2300      	movs	r3, #0
 801c802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d056      	beq.n	801c8ba <UTIL_TIMER_Start+0xc2>
 801c80c:	6878      	ldr	r0, [r7, #4]
 801c80e:	f000 f9a9 	bl	801cb64 <TimerExists>
 801c812:	4603      	mov	r3, r0
 801c814:	f083 0301 	eor.w	r3, r3, #1
 801c818:	b2db      	uxtb	r3, r3
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d04d      	beq.n	801c8ba <UTIL_TIMER_Start+0xc2>
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	7a5b      	ldrb	r3, [r3, #9]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d149      	bne.n	801c8ba <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c826:	f3ef 8310 	mrs	r3, PRIMASK
 801c82a:	613b      	str	r3, [r7, #16]
  return(result);
 801c82c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c82e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c830:	b672      	cpsid	i
}
 801c832:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	685b      	ldr	r3, [r3, #4]
 801c838:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c83a:	4b24      	ldr	r3, [pc, #144]	@ (801c8cc <UTIL_TIMER_Start+0xd4>)
 801c83c:	6a1b      	ldr	r3, [r3, #32]
 801c83e:	4798      	blx	r3
 801c840:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c842:	6a3a      	ldr	r2, [r7, #32]
 801c844:	69bb      	ldr	r3, [r7, #24]
 801c846:	429a      	cmp	r2, r3
 801c848:	d201      	bcs.n	801c84e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c84a:	69bb      	ldr	r3, [r7, #24]
 801c84c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	6a3a      	ldr	r2, [r7, #32]
 801c852:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	2200      	movs	r2, #0
 801c858:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	2201      	movs	r2, #1
 801c85e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	2200      	movs	r2, #0
 801c864:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c866:	4b1a      	ldr	r3, [pc, #104]	@ (801c8d0 <UTIL_TIMER_Start+0xd8>)
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d106      	bne.n	801c87c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c86e:	4b17      	ldr	r3, [pc, #92]	@ (801c8cc <UTIL_TIMER_Start+0xd4>)
 801c870:	691b      	ldr	r3, [r3, #16]
 801c872:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c874:	6878      	ldr	r0, [r7, #4]
 801c876:	f000 f9eb 	bl	801cc50 <TimerInsertNewHeadTimer>
 801c87a:	e017      	b.n	801c8ac <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c87c:	4b13      	ldr	r3, [pc, #76]	@ (801c8cc <UTIL_TIMER_Start+0xd4>)
 801c87e:	699b      	ldr	r3, [r3, #24]
 801c880:	4798      	blx	r3
 801c882:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	681a      	ldr	r2, [r3, #0]
 801c888:	697b      	ldr	r3, [r7, #20]
 801c88a:	441a      	add	r2, r3
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	681a      	ldr	r2, [r3, #0]
 801c894:	4b0e      	ldr	r3, [pc, #56]	@ (801c8d0 <UTIL_TIMER_Start+0xd8>)
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	429a      	cmp	r2, r3
 801c89c:	d203      	bcs.n	801c8a6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c89e:	6878      	ldr	r0, [r7, #4]
 801c8a0:	f000 f9d6 	bl	801cc50 <TimerInsertNewHeadTimer>
 801c8a4:	e002      	b.n	801c8ac <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c8a6:	6878      	ldr	r0, [r7, #4]
 801c8a8:	f000 f9a2 	bl	801cbf0 <TimerInsertTimer>
 801c8ac:	69fb      	ldr	r3, [r7, #28]
 801c8ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	f383 8810 	msr	PRIMASK, r3
}
 801c8b6:	bf00      	nop
  {
 801c8b8:	e002      	b.n	801c8c0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c8ba:	2301      	movs	r3, #1
 801c8bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801c8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	3728      	adds	r7, #40	@ 0x28
 801c8c8:	46bd      	mov	sp, r7
 801c8ca:	bd80      	pop	{r7, pc}
 801c8cc:	0802089c 	.word	0x0802089c
 801c8d0:	20001f24 	.word	0x20001f24

0801c8d4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b088      	sub	sp, #32
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c8dc:	2300      	movs	r3, #0
 801c8de:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d05b      	beq.n	801c99e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8e6:	f3ef 8310 	mrs	r3, PRIMASK
 801c8ea:	60fb      	str	r3, [r7, #12]
  return(result);
 801c8ec:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c8ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c8f0:	b672      	cpsid	i
}
 801c8f2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c8f4:	4b2d      	ldr	r3, [pc, #180]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c8fa:	4b2c      	ldr	r3, [pc, #176]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	2201      	movs	r2, #1
 801c904:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c906:	4b29      	ldr	r3, [pc, #164]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d041      	beq.n	801c992 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	2200      	movs	r2, #0
 801c912:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c914:	4b25      	ldr	r3, [pc, #148]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c916:	681b      	ldr	r3, [r3, #0]
 801c918:	687a      	ldr	r2, [r7, #4]
 801c91a:	429a      	cmp	r2, r3
 801c91c:	d134      	bne.n	801c988 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c91e:	4b23      	ldr	r3, [pc, #140]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	2200      	movs	r2, #0
 801c924:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c926:	4b21      	ldr	r3, [pc, #132]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	695b      	ldr	r3, [r3, #20]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d00a      	beq.n	801c946 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c930:	4b1e      	ldr	r3, [pc, #120]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	695b      	ldr	r3, [r3, #20]
 801c936:	4a1d      	ldr	r2, [pc, #116]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c938:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c93a:	4b1c      	ldr	r3, [pc, #112]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	4618      	mov	r0, r3
 801c940:	f000 f92c 	bl	801cb9c <TimerSetTimeout>
 801c944:	e023      	b.n	801c98e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c946:	4b1a      	ldr	r3, [pc, #104]	@ (801c9b0 <UTIL_TIMER_Stop+0xdc>)
 801c948:	68db      	ldr	r3, [r3, #12]
 801c94a:	4798      	blx	r3
            TimerListHead = NULL;
 801c94c:	4b17      	ldr	r3, [pc, #92]	@ (801c9ac <UTIL_TIMER_Stop+0xd8>)
 801c94e:	2200      	movs	r2, #0
 801c950:	601a      	str	r2, [r3, #0]
 801c952:	e01c      	b.n	801c98e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c954:	697a      	ldr	r2, [r7, #20]
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	429a      	cmp	r2, r3
 801c95a:	d110      	bne.n	801c97e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c95c:	697b      	ldr	r3, [r7, #20]
 801c95e:	695b      	ldr	r3, [r3, #20]
 801c960:	2b00      	cmp	r3, #0
 801c962:	d006      	beq.n	801c972 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c964:	697b      	ldr	r3, [r7, #20]
 801c966:	695b      	ldr	r3, [r3, #20]
 801c968:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c96a:	69bb      	ldr	r3, [r7, #24]
 801c96c:	697a      	ldr	r2, [r7, #20]
 801c96e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c970:	e00d      	b.n	801c98e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c972:	2300      	movs	r3, #0
 801c974:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c976:	69bb      	ldr	r3, [r7, #24]
 801c978:	697a      	ldr	r2, [r7, #20]
 801c97a:	615a      	str	r2, [r3, #20]
            break;
 801c97c:	e007      	b.n	801c98e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c97e:	697b      	ldr	r3, [r7, #20]
 801c980:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c982:	697b      	ldr	r3, [r7, #20]
 801c984:	695b      	ldr	r3, [r3, #20]
 801c986:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c988:	697b      	ldr	r3, [r7, #20]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d1e2      	bne.n	801c954 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c98e:	2300      	movs	r3, #0
 801c990:	77fb      	strb	r3, [r7, #31]
 801c992:	693b      	ldr	r3, [r7, #16]
 801c994:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c996:	68bb      	ldr	r3, [r7, #8]
 801c998:	f383 8810 	msr	PRIMASK, r3
}
 801c99c:	e001      	b.n	801c9a2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c99e:	2301      	movs	r3, #1
 801c9a0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c9a2:	7ffb      	ldrb	r3, [r7, #31]
}
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	3720      	adds	r7, #32
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bd80      	pop	{r7, pc}
 801c9ac:	20001f24 	.word	0x20001f24
 801c9b0:	0802089c 	.word	0x0802089c

0801c9b4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c9b4:	b580      	push	{r7, lr}
 801c9b6:	b084      	sub	sp, #16
 801c9b8:	af00      	add	r7, sp, #0
 801c9ba:	6078      	str	r0, [r7, #4]
 801c9bc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c9be:	2300      	movs	r3, #0
 801c9c0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d102      	bne.n	801c9ce <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c9c8:	2301      	movs	r3, #1
 801c9ca:	73fb      	strb	r3, [r7, #15]
 801c9cc:	e014      	b.n	801c9f8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c9ce:	4b0d      	ldr	r3, [pc, #52]	@ (801ca04 <UTIL_TIMER_SetPeriod+0x50>)
 801c9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c9d2:	6838      	ldr	r0, [r7, #0]
 801c9d4:	4798      	blx	r3
 801c9d6:	4602      	mov	r2, r0
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c9dc:	6878      	ldr	r0, [r7, #4]
 801c9de:	f000 f8c1 	bl	801cb64 <TimerExists>
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d007      	beq.n	801c9f8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c9e8:	6878      	ldr	r0, [r7, #4]
 801c9ea:	f7ff ff73 	bl	801c8d4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c9ee:	6878      	ldr	r0, [r7, #4]
 801c9f0:	f7ff ff02 	bl	801c7f8 <UTIL_TIMER_Start>
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	3710      	adds	r7, #16
 801c9fe:	46bd      	mov	sp, r7
 801ca00:	bd80      	pop	{r7, pc}
 801ca02:	bf00      	nop
 801ca04:	0802089c 	.word	0x0802089c

0801ca08 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ca08:	b590      	push	{r4, r7, lr}
 801ca0a:	b089      	sub	sp, #36	@ 0x24
 801ca0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca0e:	f3ef 8310 	mrs	r3, PRIMASK
 801ca12:	60bb      	str	r3, [r7, #8]
  return(result);
 801ca14:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ca16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca18:	b672      	cpsid	i
}
 801ca1a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ca1c:	4b38      	ldr	r3, [pc, #224]	@ (801cb00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ca1e:	695b      	ldr	r3, [r3, #20]
 801ca20:	4798      	blx	r3
 801ca22:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ca24:	4b36      	ldr	r3, [pc, #216]	@ (801cb00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ca26:	691b      	ldr	r3, [r3, #16]
 801ca28:	4798      	blx	r3
 801ca2a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ca2c:	693a      	ldr	r2, [r7, #16]
 801ca2e:	697b      	ldr	r3, [r7, #20]
 801ca30:	1ad3      	subs	r3, r2, r3
 801ca32:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ca34:	4b33      	ldr	r3, [pc, #204]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d037      	beq.n	801caac <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801ca3c:	4b31      	ldr	r3, [pc, #196]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ca42:	69fb      	ldr	r3, [r7, #28]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	68fa      	ldr	r2, [r7, #12]
 801ca48:	429a      	cmp	r2, r3
 801ca4a:	d206      	bcs.n	801ca5a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ca4c:	69fb      	ldr	r3, [r7, #28]
 801ca4e:	681a      	ldr	r2, [r3, #0]
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	1ad2      	subs	r2, r2, r3
 801ca54:	69fb      	ldr	r3, [r7, #28]
 801ca56:	601a      	str	r2, [r3, #0]
 801ca58:	e002      	b.n	801ca60 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801ca5a:	69fb      	ldr	r3, [r7, #28]
 801ca5c:	2200      	movs	r2, #0
 801ca5e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ca60:	69fb      	ldr	r3, [r7, #28]
 801ca62:	695b      	ldr	r3, [r3, #20]
 801ca64:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ca66:	69fb      	ldr	r3, [r7, #28]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d1ea      	bne.n	801ca42 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ca6c:	e01e      	b.n	801caac <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801ca6e:	4b25      	ldr	r3, [pc, #148]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801ca74:	4b23      	ldr	r3, [pc, #140]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	695b      	ldr	r3, [r3, #20]
 801ca7a:	4a22      	ldr	r2, [pc, #136]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca7c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801ca7e:	69fb      	ldr	r3, [r7, #28]
 801ca80:	2200      	movs	r2, #0
 801ca82:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801ca84:	69fb      	ldr	r3, [r7, #28]
 801ca86:	2200      	movs	r2, #0
 801ca88:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801ca8a:	69fb      	ldr	r3, [r7, #28]
 801ca8c:	68db      	ldr	r3, [r3, #12]
 801ca8e:	69fa      	ldr	r2, [r7, #28]
 801ca90:	6912      	ldr	r2, [r2, #16]
 801ca92:	4610      	mov	r0, r2
 801ca94:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801ca96:	69fb      	ldr	r3, [r7, #28]
 801ca98:	7adb      	ldrb	r3, [r3, #11]
 801ca9a:	2b01      	cmp	r3, #1
 801ca9c:	d106      	bne.n	801caac <UTIL_TIMER_IRQ_Handler+0xa4>
 801ca9e:	69fb      	ldr	r3, [r7, #28]
 801caa0:	7a9b      	ldrb	r3, [r3, #10]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d102      	bne.n	801caac <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801caa6:	69f8      	ldr	r0, [r7, #28]
 801caa8:	f7ff fea6 	bl	801c7f8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801caac:	4b15      	ldr	r3, [pc, #84]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d00d      	beq.n	801cad0 <UTIL_TIMER_IRQ_Handler+0xc8>
 801cab4:	4b13      	ldr	r3, [pc, #76]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d0d7      	beq.n	801ca6e <UTIL_TIMER_IRQ_Handler+0x66>
 801cabe:	4b11      	ldr	r3, [pc, #68]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	681c      	ldr	r4, [r3, #0]
 801cac4:	4b0e      	ldr	r3, [pc, #56]	@ (801cb00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cac6:	699b      	ldr	r3, [r3, #24]
 801cac8:	4798      	blx	r3
 801caca:	4603      	mov	r3, r0
 801cacc:	429c      	cmp	r4, r3
 801cace:	d3ce      	bcc.n	801ca6e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801cad0:	4b0c      	ldr	r3, [pc, #48]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d009      	beq.n	801caec <UTIL_TIMER_IRQ_Handler+0xe4>
 801cad8:	4b0a      	ldr	r3, [pc, #40]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	7a1b      	ldrb	r3, [r3, #8]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d104      	bne.n	801caec <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801cae2:	4b08      	ldr	r3, [pc, #32]	@ (801cb04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	4618      	mov	r0, r3
 801cae8:	f000 f858 	bl	801cb9c <TimerSetTimeout>
 801caec:	69bb      	ldr	r3, [r7, #24]
 801caee:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	f383 8810 	msr	PRIMASK, r3
}
 801caf6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801caf8:	bf00      	nop
 801cafa:	3724      	adds	r7, #36	@ 0x24
 801cafc:	46bd      	mov	sp, r7
 801cafe:	bd90      	pop	{r4, r7, pc}
 801cb00:	0802089c 	.word	0x0802089c
 801cb04:	20001f24 	.word	0x20001f24

0801cb08 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cb08:	b580      	push	{r7, lr}
 801cb0a:	b082      	sub	sp, #8
 801cb0c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cb0e:	4b06      	ldr	r3, [pc, #24]	@ (801cb28 <UTIL_TIMER_GetCurrentTime+0x20>)
 801cb10:	69db      	ldr	r3, [r3, #28]
 801cb12:	4798      	blx	r3
 801cb14:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cb16:	4b04      	ldr	r3, [pc, #16]	@ (801cb28 <UTIL_TIMER_GetCurrentTime+0x20>)
 801cb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb1a:	6878      	ldr	r0, [r7, #4]
 801cb1c:	4798      	blx	r3
 801cb1e:	4603      	mov	r3, r0
}
 801cb20:	4618      	mov	r0, r3
 801cb22:	3708      	adds	r7, #8
 801cb24:	46bd      	mov	sp, r7
 801cb26:	bd80      	pop	{r7, pc}
 801cb28:	0802089c 	.word	0x0802089c

0801cb2c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b084      	sub	sp, #16
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cb34:	4b0a      	ldr	r3, [pc, #40]	@ (801cb60 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cb36:	69db      	ldr	r3, [r3, #28]
 801cb38:	4798      	blx	r3
 801cb3a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cb3c:	4b08      	ldr	r3, [pc, #32]	@ (801cb60 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb40:	6878      	ldr	r0, [r7, #4]
 801cb42:	4798      	blx	r3
 801cb44:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cb46:	4b06      	ldr	r3, [pc, #24]	@ (801cb60 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cb48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb4a:	68f9      	ldr	r1, [r7, #12]
 801cb4c:	68ba      	ldr	r2, [r7, #8]
 801cb4e:	1a8a      	subs	r2, r1, r2
 801cb50:	4610      	mov	r0, r2
 801cb52:	4798      	blx	r3
 801cb54:	4603      	mov	r3, r0
}
 801cb56:	4618      	mov	r0, r3
 801cb58:	3710      	adds	r7, #16
 801cb5a:	46bd      	mov	sp, r7
 801cb5c:	bd80      	pop	{r7, pc}
 801cb5e:	bf00      	nop
 801cb60:	0802089c 	.word	0x0802089c

0801cb64 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cb64:	b480      	push	{r7}
 801cb66:	b085      	sub	sp, #20
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cb6c:	4b0a      	ldr	r3, [pc, #40]	@ (801cb98 <TimerExists+0x34>)
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cb72:	e008      	b.n	801cb86 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cb74:	68fa      	ldr	r2, [r7, #12]
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	429a      	cmp	r2, r3
 801cb7a:	d101      	bne.n	801cb80 <TimerExists+0x1c>
    {
      return true;
 801cb7c:	2301      	movs	r3, #1
 801cb7e:	e006      	b.n	801cb8e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	695b      	ldr	r3, [r3, #20]
 801cb84:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d1f3      	bne.n	801cb74 <TimerExists+0x10>
  }
  return false;
 801cb8c:	2300      	movs	r3, #0
}
 801cb8e:	4618      	mov	r0, r3
 801cb90:	3714      	adds	r7, #20
 801cb92:	46bd      	mov	sp, r7
 801cb94:	bc80      	pop	{r7}
 801cb96:	4770      	bx	lr
 801cb98:	20001f24 	.word	0x20001f24

0801cb9c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cb9c:	b590      	push	{r4, r7, lr}
 801cb9e:	b085      	sub	sp, #20
 801cba0:	af00      	add	r7, sp, #0
 801cba2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cba4:	4b11      	ldr	r3, [pc, #68]	@ (801cbec <TimerSetTimeout+0x50>)
 801cba6:	6a1b      	ldr	r3, [r3, #32]
 801cba8:	4798      	blx	r3
 801cbaa:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	2201      	movs	r2, #1
 801cbb0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681c      	ldr	r4, [r3, #0]
 801cbb6:	4b0d      	ldr	r3, [pc, #52]	@ (801cbec <TimerSetTimeout+0x50>)
 801cbb8:	699b      	ldr	r3, [r3, #24]
 801cbba:	4798      	blx	r3
 801cbbc:	4602      	mov	r2, r0
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	4413      	add	r3, r2
 801cbc2:	429c      	cmp	r4, r3
 801cbc4:	d207      	bcs.n	801cbd6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cbc6:	4b09      	ldr	r3, [pc, #36]	@ (801cbec <TimerSetTimeout+0x50>)
 801cbc8:	699b      	ldr	r3, [r3, #24]
 801cbca:	4798      	blx	r3
 801cbcc:	4602      	mov	r2, r0
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	441a      	add	r2, r3
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cbd6:	4b05      	ldr	r3, [pc, #20]	@ (801cbec <TimerSetTimeout+0x50>)
 801cbd8:	689b      	ldr	r3, [r3, #8]
 801cbda:	687a      	ldr	r2, [r7, #4]
 801cbdc:	6812      	ldr	r2, [r2, #0]
 801cbde:	4610      	mov	r0, r2
 801cbe0:	4798      	blx	r3
}
 801cbe2:	bf00      	nop
 801cbe4:	3714      	adds	r7, #20
 801cbe6:	46bd      	mov	sp, r7
 801cbe8:	bd90      	pop	{r4, r7, pc}
 801cbea:	bf00      	nop
 801cbec:	0802089c 	.word	0x0802089c

0801cbf0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cbf0:	b480      	push	{r7}
 801cbf2:	b085      	sub	sp, #20
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cbf8:	4b14      	ldr	r3, [pc, #80]	@ (801cc4c <TimerInsertTimer+0x5c>)
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801cbfe:	4b13      	ldr	r3, [pc, #76]	@ (801cc4c <TimerInsertTimer+0x5c>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	695b      	ldr	r3, [r3, #20]
 801cc04:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801cc06:	e012      	b.n	801cc2e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	681a      	ldr	r2, [r3, #0]
 801cc0c:	68bb      	ldr	r3, [r7, #8]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	429a      	cmp	r2, r3
 801cc12:	d905      	bls.n	801cc20 <TimerInsertTimer+0x30>
    {
        cur = next;
 801cc14:	68bb      	ldr	r3, [r7, #8]
 801cc16:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cc18:	68bb      	ldr	r3, [r7, #8]
 801cc1a:	695b      	ldr	r3, [r3, #20]
 801cc1c:	60bb      	str	r3, [r7, #8]
 801cc1e:	e006      	b.n	801cc2e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cc20:	68fb      	ldr	r3, [r7, #12]
 801cc22:	687a      	ldr	r2, [r7, #4]
 801cc24:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	68ba      	ldr	r2, [r7, #8]
 801cc2a:	615a      	str	r2, [r3, #20]
        return;
 801cc2c:	e009      	b.n	801cc42 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	695b      	ldr	r3, [r3, #20]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d1e8      	bne.n	801cc08 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	687a      	ldr	r2, [r7, #4]
 801cc3a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	2200      	movs	r2, #0
 801cc40:	615a      	str	r2, [r3, #20]
}
 801cc42:	3714      	adds	r7, #20
 801cc44:	46bd      	mov	sp, r7
 801cc46:	bc80      	pop	{r7}
 801cc48:	4770      	bx	lr
 801cc4a:	bf00      	nop
 801cc4c:	20001f24 	.word	0x20001f24

0801cc50 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801cc50:	b580      	push	{r7, lr}
 801cc52:	b084      	sub	sp, #16
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cc58:	4b0b      	ldr	r3, [pc, #44]	@ (801cc88 <TimerInsertNewHeadTimer+0x38>)
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801cc5e:	68fb      	ldr	r3, [r7, #12]
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d002      	beq.n	801cc6a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	2200      	movs	r2, #0
 801cc68:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	68fa      	ldr	r2, [r7, #12]
 801cc6e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801cc70:	4a05      	ldr	r2, [pc, #20]	@ (801cc88 <TimerInsertNewHeadTimer+0x38>)
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801cc76:	4b04      	ldr	r3, [pc, #16]	@ (801cc88 <TimerInsertNewHeadTimer+0x38>)
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	f7ff ff8e 	bl	801cb9c <TimerSetTimeout>
}
 801cc80:	bf00      	nop
 801cc82:	3710      	adds	r7, #16
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}
 801cc88:	20001f24 	.word	0x20001f24

0801cc8c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801cc8c:	b580      	push	{r7, lr}
 801cc8e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801cc90:	2218      	movs	r2, #24
 801cc92:	2100      	movs	r1, #0
 801cc94:	4807      	ldr	r0, [pc, #28]	@ (801ccb4 <UTIL_ADV_TRACE_Init+0x28>)
 801cc96:	f7ff fac8 	bl	801c22a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801cc9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801cc9e:	2100      	movs	r1, #0
 801cca0:	4805      	ldr	r0, [pc, #20]	@ (801ccb8 <UTIL_ADV_TRACE_Init+0x2c>)
 801cca2:	f7ff fac2 	bl	801c22a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801cca6:	4b05      	ldr	r3, [pc, #20]	@ (801ccbc <UTIL_ADV_TRACE_Init+0x30>)
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	4805      	ldr	r0, [pc, #20]	@ (801ccc0 <UTIL_ADV_TRACE_Init+0x34>)
 801ccac:	4798      	blx	r3
 801ccae:	4603      	mov	r3, r0
}
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	bd80      	pop	{r7, pc}
 801ccb4:	20001f28 	.word	0x20001f28
 801ccb8:	20001f40 	.word	0x20001f40
 801ccbc:	080208dc 	.word	0x080208dc
 801ccc0:	0801cf2d 	.word	0x0801cf2d

0801ccc4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ccc4:	b480      	push	{r7}
 801ccc6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ccc8:	4b06      	ldr	r3, [pc, #24]	@ (801cce4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ccca:	8a5a      	ldrh	r2, [r3, #18]
 801cccc:	4b05      	ldr	r3, [pc, #20]	@ (801cce4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ccce:	8a1b      	ldrh	r3, [r3, #16]
 801ccd0:	429a      	cmp	r2, r3
 801ccd2:	d101      	bne.n	801ccd8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801ccd4:	2301      	movs	r3, #1
 801ccd6:	e000      	b.n	801ccda <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801ccd8:	2300      	movs	r3, #0
}
 801ccda:	4618      	mov	r0, r3
 801ccdc:	46bd      	mov	sp, r7
 801ccde:	bc80      	pop	{r7}
 801cce0:	4770      	bx	lr
 801cce2:	bf00      	nop
 801cce4:	20001f28 	.word	0x20001f28

0801cce8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801cce8:	b408      	push	{r3}
 801ccea:	b580      	push	{r7, lr}
 801ccec:	b08d      	sub	sp, #52	@ 0x34
 801ccee:	af00      	add	r7, sp, #0
 801ccf0:	60f8      	str	r0, [r7, #12]
 801ccf2:	60b9      	str	r1, [r7, #8]
 801ccf4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801ccf6:	2300      	movs	r3, #0
 801ccf8:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801ccfa:	2300      	movs	r3, #0
 801ccfc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801ccfe:	4b37      	ldr	r3, [pc, #220]	@ (801cddc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cd00:	7a1b      	ldrb	r3, [r3, #8]
 801cd02:	461a      	mov	r2, r3
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	4293      	cmp	r3, r2
 801cd08:	d902      	bls.n	801cd10 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801cd0a:	f06f 0304 	mvn.w	r3, #4
 801cd0e:	e05e      	b.n	801cdce <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801cd10:	4b32      	ldr	r3, [pc, #200]	@ (801cddc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cd12:	68da      	ldr	r2, [r3, #12]
 801cd14:	68bb      	ldr	r3, [r7, #8]
 801cd16:	4013      	ands	r3, r2
 801cd18:	68ba      	ldr	r2, [r7, #8]
 801cd1a:	429a      	cmp	r2, r3
 801cd1c:	d002      	beq.n	801cd24 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801cd1e:	f06f 0305 	mvn.w	r3, #5
 801cd22:	e054      	b.n	801cdce <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801cd24:	4b2d      	ldr	r3, [pc, #180]	@ (801cddc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cd26:	685b      	ldr	r3, [r3, #4]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d00a      	beq.n	801cd42 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d007      	beq.n	801cd42 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801cd32:	4b2a      	ldr	r3, [pc, #168]	@ (801cddc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cd34:	685b      	ldr	r3, [r3, #4]
 801cd36:	f107 0116 	add.w	r1, r7, #22
 801cd3a:	f107 0218 	add.w	r2, r7, #24
 801cd3e:	4610      	mov	r0, r2
 801cd40:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801cd42:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801cd46:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cd4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cd50:	4823      	ldr	r0, [pc, #140]	@ (801cde0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801cd52:	f000 ffcb 	bl	801dcec <vsniprintf>
 801cd56:	4603      	mov	r3, r0
 801cd58:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801cd5a:	f000 f9f1 	bl	801d140 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801cd5e:	8afa      	ldrh	r2, [r7, #22]
 801cd60:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801cd62:	4413      	add	r3, r2
 801cd64:	b29b      	uxth	r3, r3
 801cd66:	f107 0214 	add.w	r2, r7, #20
 801cd6a:	4611      	mov	r1, r2
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	f000 f969 	bl	801d044 <TRACE_AllocateBufer>
 801cd72:	4603      	mov	r3, r0
 801cd74:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd78:	d025      	beq.n	801cdc6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801cd7a:	2300      	movs	r3, #0
 801cd7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801cd7e:	e00e      	b.n	801cd9e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801cd80:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cd82:	8aba      	ldrh	r2, [r7, #20]
 801cd84:	3330      	adds	r3, #48	@ 0x30
 801cd86:	443b      	add	r3, r7
 801cd88:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801cd8c:	4b15      	ldr	r3, [pc, #84]	@ (801cde4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801cd8e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801cd90:	8abb      	ldrh	r3, [r7, #20]
 801cd92:	3301      	adds	r3, #1
 801cd94:	b29b      	uxth	r3, r3
 801cd96:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801cd98:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cd9a:	3301      	adds	r3, #1
 801cd9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801cd9e:	8afb      	ldrh	r3, [r7, #22]
 801cda0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cda2:	429a      	cmp	r2, r3
 801cda4:	d3ec      	bcc.n	801cd80 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cda6:	8abb      	ldrh	r3, [r7, #20]
 801cda8:	461a      	mov	r2, r3
 801cdaa:	4b0e      	ldr	r3, [pc, #56]	@ (801cde4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801cdac:	18d0      	adds	r0, r2, r3
 801cdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cdb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cdb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cdb6:	f000 ff99 	bl	801dcec <vsniprintf>
    va_end(vaArgs);

    TRACE_UnLock();
 801cdba:	f000 f9df 	bl	801d17c <TRACE_UnLock>

    return TRACE_Send();
 801cdbe:	f000 f831 	bl	801ce24 <TRACE_Send>
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	e003      	b.n	801cdce <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801cdc6:	f000 f9d9 	bl	801d17c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801cdca:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801cdce:	4618      	mov	r0, r3
 801cdd0:	3734      	adds	r7, #52	@ 0x34
 801cdd2:	46bd      	mov	sp, r7
 801cdd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cdd8:	b001      	add	sp, #4
 801cdda:	4770      	bx	lr
 801cddc:	20001f28 	.word	0x20001f28
 801cde0:	20002340 	.word	0x20002340
 801cde4:	20001f40 	.word	0x20001f40

0801cde8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801cde8:	b480      	push	{r7}
 801cdea:	b083      	sub	sp, #12
 801cdec:	af00      	add	r7, sp, #0
 801cdee:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801cdf0:	4a03      	ldr	r2, [pc, #12]	@ (801ce00 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	6053      	str	r3, [r2, #4]
}
 801cdf6:	bf00      	nop
 801cdf8:	370c      	adds	r7, #12
 801cdfa:	46bd      	mov	sp, r7
 801cdfc:	bc80      	pop	{r7}
 801cdfe:	4770      	bx	lr
 801ce00:	20001f28 	.word	0x20001f28

0801ce04 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801ce04:	b480      	push	{r7}
 801ce06:	b083      	sub	sp, #12
 801ce08:	af00      	add	r7, sp, #0
 801ce0a:	4603      	mov	r3, r0
 801ce0c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801ce0e:	4a04      	ldr	r2, [pc, #16]	@ (801ce20 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801ce10:	79fb      	ldrb	r3, [r7, #7]
 801ce12:	7213      	strb	r3, [r2, #8]
}
 801ce14:	bf00      	nop
 801ce16:	370c      	adds	r7, #12
 801ce18:	46bd      	mov	sp, r7
 801ce1a:	bc80      	pop	{r7}
 801ce1c:	4770      	bx	lr
 801ce1e:	bf00      	nop
 801ce20:	20001f28 	.word	0x20001f28

0801ce24 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801ce24:	b580      	push	{r7, lr}
 801ce26:	b088      	sub	sp, #32
 801ce28:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801ce2e:	2300      	movs	r3, #0
 801ce30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce32:	f3ef 8310 	mrs	r3, PRIMASK
 801ce36:	613b      	str	r3, [r7, #16]
  return(result);
 801ce38:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ce3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce3c:	b672      	cpsid	i
}
 801ce3e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801ce40:	f000 f9ba 	bl	801d1b8 <TRACE_IsLocked>
 801ce44:	4603      	mov	r3, r0
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d15d      	bne.n	801cf06 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801ce4a:	f000 f979 	bl	801d140 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801ce4e:	4b34      	ldr	r3, [pc, #208]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce50:	8a1a      	ldrh	r2, [r3, #16]
 801ce52:	4b33      	ldr	r3, [pc, #204]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce54:	8a5b      	ldrh	r3, [r3, #18]
 801ce56:	429a      	cmp	r2, r3
 801ce58:	d04d      	beq.n	801cef6 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ce5a:	4b31      	ldr	r3, [pc, #196]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce5c:	789b      	ldrb	r3, [r3, #2]
 801ce5e:	2b01      	cmp	r3, #1
 801ce60:	d117      	bne.n	801ce92 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801ce62:	4b2f      	ldr	r3, [pc, #188]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce64:	881a      	ldrh	r2, [r3, #0]
 801ce66:	4b2e      	ldr	r3, [pc, #184]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce68:	8a1b      	ldrh	r3, [r3, #16]
 801ce6a:	1ad3      	subs	r3, r2, r3
 801ce6c:	b29a      	uxth	r2, r3
 801ce6e:	4b2c      	ldr	r3, [pc, #176]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce70:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ce72:	4b2b      	ldr	r3, [pc, #172]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce74:	2202      	movs	r2, #2
 801ce76:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ce78:	4b29      	ldr	r3, [pc, #164]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ce7e:	4b28      	ldr	r3, [pc, #160]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce80:	8a9b      	ldrh	r3, [r3, #20]
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d105      	bne.n	801ce92 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ce86:	4b26      	ldr	r3, [pc, #152]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce88:	2200      	movs	r2, #0
 801ce8a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ce8c:	4b24      	ldr	r3, [pc, #144]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce8e:	2200      	movs	r2, #0
 801ce90:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ce92:	4b23      	ldr	r3, [pc, #140]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce94:	789b      	ldrb	r3, [r3, #2]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d115      	bne.n	801cec6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ce9a:	4b21      	ldr	r3, [pc, #132]	@ (801cf20 <TRACE_Send+0xfc>)
 801ce9c:	8a5a      	ldrh	r2, [r3, #18]
 801ce9e:	4b20      	ldr	r3, [pc, #128]	@ (801cf20 <TRACE_Send+0xfc>)
 801cea0:	8a1b      	ldrh	r3, [r3, #16]
 801cea2:	429a      	cmp	r2, r3
 801cea4:	d908      	bls.n	801ceb8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cea6:	4b1e      	ldr	r3, [pc, #120]	@ (801cf20 <TRACE_Send+0xfc>)
 801cea8:	8a5a      	ldrh	r2, [r3, #18]
 801ceaa:	4b1d      	ldr	r3, [pc, #116]	@ (801cf20 <TRACE_Send+0xfc>)
 801ceac:	8a1b      	ldrh	r3, [r3, #16]
 801ceae:	1ad3      	subs	r3, r2, r3
 801ceb0:	b29a      	uxth	r2, r3
 801ceb2:	4b1b      	ldr	r3, [pc, #108]	@ (801cf20 <TRACE_Send+0xfc>)
 801ceb4:	829a      	strh	r2, [r3, #20]
 801ceb6:	e006      	b.n	801cec6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ceb8:	4b19      	ldr	r3, [pc, #100]	@ (801cf20 <TRACE_Send+0xfc>)
 801ceba:	8a1b      	ldrh	r3, [r3, #16]
 801cebc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cec0:	b29a      	uxth	r2, r3
 801cec2:	4b17      	ldr	r3, [pc, #92]	@ (801cf20 <TRACE_Send+0xfc>)
 801cec4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cec6:	4b16      	ldr	r3, [pc, #88]	@ (801cf20 <TRACE_Send+0xfc>)
 801cec8:	8a1b      	ldrh	r3, [r3, #16]
 801ceca:	461a      	mov	r2, r3
 801cecc:	4b15      	ldr	r3, [pc, #84]	@ (801cf24 <TRACE_Send+0x100>)
 801cece:	4413      	add	r3, r2
 801ced0:	61bb      	str	r3, [r7, #24]
 801ced2:	697b      	ldr	r3, [r7, #20]
 801ced4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	f383 8810 	msr	PRIMASK, r3
}
 801cedc:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801cede:	f7e5 fceb 	bl	80028b8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cee2:	4b11      	ldr	r3, [pc, #68]	@ (801cf28 <TRACE_Send+0x104>)
 801cee4:	68db      	ldr	r3, [r3, #12]
 801cee6:	4a0e      	ldr	r2, [pc, #56]	@ (801cf20 <TRACE_Send+0xfc>)
 801cee8:	8a92      	ldrh	r2, [r2, #20]
 801ceea:	4611      	mov	r1, r2
 801ceec:	69b8      	ldr	r0, [r7, #24]
 801ceee:	4798      	blx	r3
 801cef0:	4603      	mov	r3, r0
 801cef2:	77fb      	strb	r3, [r7, #31]
 801cef4:	e00d      	b.n	801cf12 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801cef6:	f000 f941 	bl	801d17c <TRACE_UnLock>
 801cefa:	697b      	ldr	r3, [r7, #20]
 801cefc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cefe:	68bb      	ldr	r3, [r7, #8]
 801cf00:	f383 8810 	msr	PRIMASK, r3
}
 801cf04:	e005      	b.n	801cf12 <TRACE_Send+0xee>
 801cf06:	697b      	ldr	r3, [r7, #20]
 801cf08:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	f383 8810 	msr	PRIMASK, r3
}
 801cf10:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801cf12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cf16:	4618      	mov	r0, r3
 801cf18:	3720      	adds	r7, #32
 801cf1a:	46bd      	mov	sp, r7
 801cf1c:	bd80      	pop	{r7, pc}
 801cf1e:	bf00      	nop
 801cf20:	20001f28 	.word	0x20001f28
 801cf24:	20001f40 	.word	0x20001f40
 801cf28:	080208dc 	.word	0x080208dc

0801cf2c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801cf2c:	b580      	push	{r7, lr}
 801cf2e:	b088      	sub	sp, #32
 801cf30:	af00      	add	r7, sp, #0
 801cf32:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801cf34:	2300      	movs	r3, #0
 801cf36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf38:	f3ef 8310 	mrs	r3, PRIMASK
 801cf3c:	617b      	str	r3, [r7, #20]
  return(result);
 801cf3e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cf40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf42:	b672      	cpsid	i
}
 801cf44:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801cf46:	4b3c      	ldr	r3, [pc, #240]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf48:	789b      	ldrb	r3, [r3, #2]
 801cf4a:	2b02      	cmp	r3, #2
 801cf4c:	d106      	bne.n	801cf5c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cf4e:	4b3a      	ldr	r3, [pc, #232]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf50:	2200      	movs	r2, #0
 801cf52:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cf54:	4b38      	ldr	r3, [pc, #224]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf56:	2200      	movs	r2, #0
 801cf58:	821a      	strh	r2, [r3, #16]
 801cf5a:	e00a      	b.n	801cf72 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cf5c:	4b36      	ldr	r3, [pc, #216]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf5e:	8a1a      	ldrh	r2, [r3, #16]
 801cf60:	4b35      	ldr	r3, [pc, #212]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf62:	8a9b      	ldrh	r3, [r3, #20]
 801cf64:	4413      	add	r3, r2
 801cf66:	b29b      	uxth	r3, r3
 801cf68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cf6c:	b29a      	uxth	r2, r3
 801cf6e:	4b32      	ldr	r3, [pc, #200]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf70:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801cf72:	4b31      	ldr	r3, [pc, #196]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf74:	8a1a      	ldrh	r2, [r3, #16]
 801cf76:	4b30      	ldr	r3, [pc, #192]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf78:	8a5b      	ldrh	r3, [r3, #18]
 801cf7a:	429a      	cmp	r2, r3
 801cf7c:	d04d      	beq.n	801d01a <TRACE_TxCpltCallback+0xee>
 801cf7e:	4b2e      	ldr	r3, [pc, #184]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf80:	8adb      	ldrh	r3, [r3, #22]
 801cf82:	2b01      	cmp	r3, #1
 801cf84:	d149      	bne.n	801d01a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cf86:	4b2c      	ldr	r3, [pc, #176]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf88:	789b      	ldrb	r3, [r3, #2]
 801cf8a:	2b01      	cmp	r3, #1
 801cf8c:	d117      	bne.n	801cfbe <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801cf8e:	4b2a      	ldr	r3, [pc, #168]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf90:	881a      	ldrh	r2, [r3, #0]
 801cf92:	4b29      	ldr	r3, [pc, #164]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf94:	8a1b      	ldrh	r3, [r3, #16]
 801cf96:	1ad3      	subs	r3, r2, r3
 801cf98:	b29a      	uxth	r2, r3
 801cf9a:	4b27      	ldr	r3, [pc, #156]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cf9c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cf9e:	4b26      	ldr	r3, [pc, #152]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfa0:	2202      	movs	r2, #2
 801cfa2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cfa4:	4b24      	ldr	r3, [pc, #144]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfa6:	2200      	movs	r2, #0
 801cfa8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cfaa:	4b23      	ldr	r3, [pc, #140]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfac:	8a9b      	ldrh	r3, [r3, #20]
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d105      	bne.n	801cfbe <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cfb2:	4b21      	ldr	r3, [pc, #132]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfb4:	2200      	movs	r2, #0
 801cfb6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cfb8:	4b1f      	ldr	r3, [pc, #124]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfba:	2200      	movs	r2, #0
 801cfbc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cfbe:	4b1e      	ldr	r3, [pc, #120]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfc0:	789b      	ldrb	r3, [r3, #2]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d115      	bne.n	801cff2 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cfc6:	4b1c      	ldr	r3, [pc, #112]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfc8:	8a5a      	ldrh	r2, [r3, #18]
 801cfca:	4b1b      	ldr	r3, [pc, #108]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfcc:	8a1b      	ldrh	r3, [r3, #16]
 801cfce:	429a      	cmp	r2, r3
 801cfd0:	d908      	bls.n	801cfe4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cfd2:	4b19      	ldr	r3, [pc, #100]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfd4:	8a5a      	ldrh	r2, [r3, #18]
 801cfd6:	4b18      	ldr	r3, [pc, #96]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfd8:	8a1b      	ldrh	r3, [r3, #16]
 801cfda:	1ad3      	subs	r3, r2, r3
 801cfdc:	b29a      	uxth	r2, r3
 801cfde:	4b16      	ldr	r3, [pc, #88]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfe0:	829a      	strh	r2, [r3, #20]
 801cfe2:	e006      	b.n	801cff2 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cfe4:	4b14      	ldr	r3, [pc, #80]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cfe6:	8a1b      	ldrh	r3, [r3, #16]
 801cfe8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cfec:	b29a      	uxth	r2, r3
 801cfee:	4b12      	ldr	r3, [pc, #72]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cff0:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cff2:	4b11      	ldr	r3, [pc, #68]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801cff4:	8a1b      	ldrh	r3, [r3, #16]
 801cff6:	461a      	mov	r2, r3
 801cff8:	4b10      	ldr	r3, [pc, #64]	@ (801d03c <TRACE_TxCpltCallback+0x110>)
 801cffa:	4413      	add	r3, r2
 801cffc:	61fb      	str	r3, [r7, #28]
 801cffe:	69bb      	ldr	r3, [r7, #24]
 801d000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d002:	693b      	ldr	r3, [r7, #16]
 801d004:	f383 8810 	msr	PRIMASK, r3
}
 801d008:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d00a:	4b0d      	ldr	r3, [pc, #52]	@ (801d040 <TRACE_TxCpltCallback+0x114>)
 801d00c:	68db      	ldr	r3, [r3, #12]
 801d00e:	4a0a      	ldr	r2, [pc, #40]	@ (801d038 <TRACE_TxCpltCallback+0x10c>)
 801d010:	8a92      	ldrh	r2, [r2, #20]
 801d012:	4611      	mov	r1, r2
 801d014:	69f8      	ldr	r0, [r7, #28]
 801d016:	4798      	blx	r3
 801d018:	e00a      	b.n	801d030 <TRACE_TxCpltCallback+0x104>
 801d01a:	69bb      	ldr	r3, [r7, #24]
 801d01c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	f383 8810 	msr	PRIMASK, r3
}
 801d024:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d026:	f7e5 fc4f 	bl	80028c8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d02a:	f000 f8a7 	bl	801d17c <TRACE_UnLock>
  }
}
 801d02e:	bf00      	nop
 801d030:	bf00      	nop
 801d032:	3720      	adds	r7, #32
 801d034:	46bd      	mov	sp, r7
 801d036:	bd80      	pop	{r7, pc}
 801d038:	20001f28 	.word	0x20001f28
 801d03c:	20001f40 	.word	0x20001f40
 801d040:	080208dc 	.word	0x080208dc

0801d044 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d044:	b480      	push	{r7}
 801d046:	b087      	sub	sp, #28
 801d048:	af00      	add	r7, sp, #0
 801d04a:	4603      	mov	r3, r0
 801d04c:	6039      	str	r1, [r7, #0]
 801d04e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d050:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d054:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d056:	f3ef 8310 	mrs	r3, PRIMASK
 801d05a:	60fb      	str	r3, [r7, #12]
  return(result);
 801d05c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d05e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d060:	b672      	cpsid	i
}
 801d062:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d064:	4b35      	ldr	r3, [pc, #212]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d066:	8a5a      	ldrh	r2, [r3, #18]
 801d068:	4b34      	ldr	r3, [pc, #208]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d06a:	8a1b      	ldrh	r3, [r3, #16]
 801d06c:	429a      	cmp	r2, r3
 801d06e:	d11b      	bne.n	801d0a8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d070:	4b32      	ldr	r3, [pc, #200]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d072:	8a5b      	ldrh	r3, [r3, #18]
 801d074:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d078:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801d07a:	88fa      	ldrh	r2, [r7, #6]
 801d07c:	8afb      	ldrh	r3, [r7, #22]
 801d07e:	429a      	cmp	r2, r3
 801d080:	d33a      	bcc.n	801d0f8 <TRACE_AllocateBufer+0xb4>
 801d082:	4b2e      	ldr	r3, [pc, #184]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d084:	8a1b      	ldrh	r3, [r3, #16]
 801d086:	88fa      	ldrh	r2, [r7, #6]
 801d088:	429a      	cmp	r2, r3
 801d08a:	d235      	bcs.n	801d0f8 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d08c:	4b2b      	ldr	r3, [pc, #172]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d08e:	2201      	movs	r2, #1
 801d090:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d092:	4b2a      	ldr	r3, [pc, #168]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d094:	8a5a      	ldrh	r2, [r3, #18]
 801d096:	4b29      	ldr	r3, [pc, #164]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d098:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d09a:	4b28      	ldr	r3, [pc, #160]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d09c:	8a1b      	ldrh	r3, [r3, #16]
 801d09e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d0a0:	4b26      	ldr	r3, [pc, #152]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	825a      	strh	r2, [r3, #18]
 801d0a6:	e027      	b.n	801d0f8 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d0a8:	4b24      	ldr	r3, [pc, #144]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0aa:	8a5a      	ldrh	r2, [r3, #18]
 801d0ac:	4b23      	ldr	r3, [pc, #140]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0ae:	8a1b      	ldrh	r3, [r3, #16]
 801d0b0:	429a      	cmp	r2, r3
 801d0b2:	d91b      	bls.n	801d0ec <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d0b4:	4b21      	ldr	r3, [pc, #132]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0b6:	8a5b      	ldrh	r3, [r3, #18]
 801d0b8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d0bc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d0be:	88fa      	ldrh	r2, [r7, #6]
 801d0c0:	8afb      	ldrh	r3, [r7, #22]
 801d0c2:	429a      	cmp	r2, r3
 801d0c4:	d318      	bcc.n	801d0f8 <TRACE_AllocateBufer+0xb4>
 801d0c6:	4b1d      	ldr	r3, [pc, #116]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0c8:	8a1b      	ldrh	r3, [r3, #16]
 801d0ca:	88fa      	ldrh	r2, [r7, #6]
 801d0cc:	429a      	cmp	r2, r3
 801d0ce:	d213      	bcs.n	801d0f8 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d0d0:	4b1a      	ldr	r3, [pc, #104]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0d2:	2201      	movs	r2, #1
 801d0d4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d0d6:	4b19      	ldr	r3, [pc, #100]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0d8:	8a5a      	ldrh	r2, [r3, #18]
 801d0da:	4b18      	ldr	r3, [pc, #96]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0dc:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d0de:	4b17      	ldr	r3, [pc, #92]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0e0:	8a1b      	ldrh	r3, [r3, #16]
 801d0e2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d0e4:	4b15      	ldr	r3, [pc, #84]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0e6:	2200      	movs	r2, #0
 801d0e8:	825a      	strh	r2, [r3, #18]
 801d0ea:	e005      	b.n	801d0f8 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d0ec:	4b13      	ldr	r3, [pc, #76]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0ee:	8a1a      	ldrh	r2, [r3, #16]
 801d0f0:	4b12      	ldr	r3, [pc, #72]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d0f2:	8a5b      	ldrh	r3, [r3, #18]
 801d0f4:	1ad3      	subs	r3, r2, r3
 801d0f6:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d0f8:	8afa      	ldrh	r2, [r7, #22]
 801d0fa:	88fb      	ldrh	r3, [r7, #6]
 801d0fc:	429a      	cmp	r2, r3
 801d0fe:	d90f      	bls.n	801d120 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d100:	4b0e      	ldr	r3, [pc, #56]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d102:	8a5a      	ldrh	r2, [r3, #18]
 801d104:	683b      	ldr	r3, [r7, #0]
 801d106:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d108:	4b0c      	ldr	r3, [pc, #48]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d10a:	8a5a      	ldrh	r2, [r3, #18]
 801d10c:	88fb      	ldrh	r3, [r7, #6]
 801d10e:	4413      	add	r3, r2
 801d110:	b29b      	uxth	r3, r3
 801d112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d116:	b29a      	uxth	r2, r3
 801d118:	4b08      	ldr	r3, [pc, #32]	@ (801d13c <TRACE_AllocateBufer+0xf8>)
 801d11a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d11c:	2300      	movs	r3, #0
 801d11e:	82bb      	strh	r3, [r7, #20]
 801d120:	693b      	ldr	r3, [r7, #16]
 801d122:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d124:	68bb      	ldr	r3, [r7, #8]
 801d126:	f383 8810 	msr	PRIMASK, r3
}
 801d12a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d12c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d130:	4618      	mov	r0, r3
 801d132:	371c      	adds	r7, #28
 801d134:	46bd      	mov	sp, r7
 801d136:	bc80      	pop	{r7}
 801d138:	4770      	bx	lr
 801d13a:	bf00      	nop
 801d13c:	20001f28 	.word	0x20001f28

0801d140 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d140:	b480      	push	{r7}
 801d142:	b085      	sub	sp, #20
 801d144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d146:	f3ef 8310 	mrs	r3, PRIMASK
 801d14a:	607b      	str	r3, [r7, #4]
  return(result);
 801d14c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d14e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d150:	b672      	cpsid	i
}
 801d152:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d154:	4b08      	ldr	r3, [pc, #32]	@ (801d178 <TRACE_Lock+0x38>)
 801d156:	8adb      	ldrh	r3, [r3, #22]
 801d158:	3301      	adds	r3, #1
 801d15a:	b29a      	uxth	r2, r3
 801d15c:	4b06      	ldr	r3, [pc, #24]	@ (801d178 <TRACE_Lock+0x38>)
 801d15e:	82da      	strh	r2, [r3, #22]
 801d160:	68fb      	ldr	r3, [r7, #12]
 801d162:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d164:	68bb      	ldr	r3, [r7, #8]
 801d166:	f383 8810 	msr	PRIMASK, r3
}
 801d16a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d16c:	bf00      	nop
 801d16e:	3714      	adds	r7, #20
 801d170:	46bd      	mov	sp, r7
 801d172:	bc80      	pop	{r7}
 801d174:	4770      	bx	lr
 801d176:	bf00      	nop
 801d178:	20001f28 	.word	0x20001f28

0801d17c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d17c:	b480      	push	{r7}
 801d17e:	b085      	sub	sp, #20
 801d180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d182:	f3ef 8310 	mrs	r3, PRIMASK
 801d186:	607b      	str	r3, [r7, #4]
  return(result);
 801d188:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d18a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d18c:	b672      	cpsid	i
}
 801d18e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d190:	4b08      	ldr	r3, [pc, #32]	@ (801d1b4 <TRACE_UnLock+0x38>)
 801d192:	8adb      	ldrh	r3, [r3, #22]
 801d194:	3b01      	subs	r3, #1
 801d196:	b29a      	uxth	r2, r3
 801d198:	4b06      	ldr	r3, [pc, #24]	@ (801d1b4 <TRACE_UnLock+0x38>)
 801d19a:	82da      	strh	r2, [r3, #22]
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1a0:	68bb      	ldr	r3, [r7, #8]
 801d1a2:	f383 8810 	msr	PRIMASK, r3
}
 801d1a6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d1a8:	bf00      	nop
 801d1aa:	3714      	adds	r7, #20
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bc80      	pop	{r7}
 801d1b0:	4770      	bx	lr
 801d1b2:	bf00      	nop
 801d1b4:	20001f28 	.word	0x20001f28

0801d1b8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d1b8:	b480      	push	{r7}
 801d1ba:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d1bc:	4b05      	ldr	r3, [pc, #20]	@ (801d1d4 <TRACE_IsLocked+0x1c>)
 801d1be:	8adb      	ldrh	r3, [r3, #22]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	bf14      	ite	ne
 801d1c4:	2301      	movne	r3, #1
 801d1c6:	2300      	moveq	r3, #0
 801d1c8:	b2db      	uxtb	r3, r3
}
 801d1ca:	4618      	mov	r0, r3
 801d1cc:	46bd      	mov	sp, r7
 801d1ce:	bc80      	pop	{r7}
 801d1d0:	4770      	bx	lr
 801d1d2:	bf00      	nop
 801d1d4:	20001f28 	.word	0x20001f28

0801d1d8 <__cvt>:
 801d1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d1dc:	b088      	sub	sp, #32
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	461d      	mov	r5, r3
 801d1e2:	4614      	mov	r4, r2
 801d1e4:	bfbc      	itt	lt
 801d1e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801d1ea:	4614      	movlt	r4, r2
 801d1ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d1ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801d1f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801d1f4:	bfb6      	itet	lt
 801d1f6:	461d      	movlt	r5, r3
 801d1f8:	2300      	movge	r3, #0
 801d1fa:	232d      	movlt	r3, #45	@ 0x2d
 801d1fc:	7013      	strb	r3, [r2, #0]
 801d1fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d200:	f023 0820 	bic.w	r8, r3, #32
 801d204:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d208:	d005      	beq.n	801d216 <__cvt+0x3e>
 801d20a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d20e:	d100      	bne.n	801d212 <__cvt+0x3a>
 801d210:	3601      	adds	r6, #1
 801d212:	2302      	movs	r3, #2
 801d214:	e000      	b.n	801d218 <__cvt+0x40>
 801d216:	2303      	movs	r3, #3
 801d218:	aa07      	add	r2, sp, #28
 801d21a:	9204      	str	r2, [sp, #16]
 801d21c:	aa06      	add	r2, sp, #24
 801d21e:	e9cd a202 	strd	sl, r2, [sp, #8]
 801d222:	e9cd 3600 	strd	r3, r6, [sp]
 801d226:	4622      	mov	r2, r4
 801d228:	462b      	mov	r3, r5
 801d22a:	f000 fe75 	bl	801df18 <_dtoa_r>
 801d22e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d232:	4607      	mov	r7, r0
 801d234:	d119      	bne.n	801d26a <__cvt+0x92>
 801d236:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d238:	07db      	lsls	r3, r3, #31
 801d23a:	d50e      	bpl.n	801d25a <__cvt+0x82>
 801d23c:	eb00 0906 	add.w	r9, r0, r6
 801d240:	2200      	movs	r2, #0
 801d242:	2300      	movs	r3, #0
 801d244:	4620      	mov	r0, r4
 801d246:	4629      	mov	r1, r5
 801d248:	f7e3 fc16 	bl	8000a78 <__aeabi_dcmpeq>
 801d24c:	b108      	cbz	r0, 801d252 <__cvt+0x7a>
 801d24e:	f8cd 901c 	str.w	r9, [sp, #28]
 801d252:	2230      	movs	r2, #48	@ 0x30
 801d254:	9b07      	ldr	r3, [sp, #28]
 801d256:	454b      	cmp	r3, r9
 801d258:	d31e      	bcc.n	801d298 <__cvt+0xc0>
 801d25a:	9b07      	ldr	r3, [sp, #28]
 801d25c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d25e:	1bdb      	subs	r3, r3, r7
 801d260:	4638      	mov	r0, r7
 801d262:	6013      	str	r3, [r2, #0]
 801d264:	b008      	add	sp, #32
 801d266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d26a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d26e:	eb00 0906 	add.w	r9, r0, r6
 801d272:	d1e5      	bne.n	801d240 <__cvt+0x68>
 801d274:	7803      	ldrb	r3, [r0, #0]
 801d276:	2b30      	cmp	r3, #48	@ 0x30
 801d278:	d10a      	bne.n	801d290 <__cvt+0xb8>
 801d27a:	2200      	movs	r2, #0
 801d27c:	2300      	movs	r3, #0
 801d27e:	4620      	mov	r0, r4
 801d280:	4629      	mov	r1, r5
 801d282:	f7e3 fbf9 	bl	8000a78 <__aeabi_dcmpeq>
 801d286:	b918      	cbnz	r0, 801d290 <__cvt+0xb8>
 801d288:	f1c6 0601 	rsb	r6, r6, #1
 801d28c:	f8ca 6000 	str.w	r6, [sl]
 801d290:	f8da 3000 	ldr.w	r3, [sl]
 801d294:	4499      	add	r9, r3
 801d296:	e7d3      	b.n	801d240 <__cvt+0x68>
 801d298:	1c59      	adds	r1, r3, #1
 801d29a:	9107      	str	r1, [sp, #28]
 801d29c:	701a      	strb	r2, [r3, #0]
 801d29e:	e7d9      	b.n	801d254 <__cvt+0x7c>

0801d2a0 <__exponent>:
 801d2a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d2a2:	2900      	cmp	r1, #0
 801d2a4:	bfba      	itte	lt
 801d2a6:	4249      	neglt	r1, r1
 801d2a8:	232d      	movlt	r3, #45	@ 0x2d
 801d2aa:	232b      	movge	r3, #43	@ 0x2b
 801d2ac:	2909      	cmp	r1, #9
 801d2ae:	7002      	strb	r2, [r0, #0]
 801d2b0:	7043      	strb	r3, [r0, #1]
 801d2b2:	dd29      	ble.n	801d308 <__exponent+0x68>
 801d2b4:	f10d 0307 	add.w	r3, sp, #7
 801d2b8:	461d      	mov	r5, r3
 801d2ba:	270a      	movs	r7, #10
 801d2bc:	461a      	mov	r2, r3
 801d2be:	fbb1 f6f7 	udiv	r6, r1, r7
 801d2c2:	fb07 1416 	mls	r4, r7, r6, r1
 801d2c6:	3430      	adds	r4, #48	@ 0x30
 801d2c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d2cc:	460c      	mov	r4, r1
 801d2ce:	2c63      	cmp	r4, #99	@ 0x63
 801d2d0:	f103 33ff 	add.w	r3, r3, #4294967295
 801d2d4:	4631      	mov	r1, r6
 801d2d6:	dcf1      	bgt.n	801d2bc <__exponent+0x1c>
 801d2d8:	3130      	adds	r1, #48	@ 0x30
 801d2da:	1e94      	subs	r4, r2, #2
 801d2dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d2e0:	1c41      	adds	r1, r0, #1
 801d2e2:	4623      	mov	r3, r4
 801d2e4:	42ab      	cmp	r3, r5
 801d2e6:	d30a      	bcc.n	801d2fe <__exponent+0x5e>
 801d2e8:	f10d 0309 	add.w	r3, sp, #9
 801d2ec:	1a9b      	subs	r3, r3, r2
 801d2ee:	42ac      	cmp	r4, r5
 801d2f0:	bf88      	it	hi
 801d2f2:	2300      	movhi	r3, #0
 801d2f4:	3302      	adds	r3, #2
 801d2f6:	4403      	add	r3, r0
 801d2f8:	1a18      	subs	r0, r3, r0
 801d2fa:	b003      	add	sp, #12
 801d2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d302:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d306:	e7ed      	b.n	801d2e4 <__exponent+0x44>
 801d308:	2330      	movs	r3, #48	@ 0x30
 801d30a:	3130      	adds	r1, #48	@ 0x30
 801d30c:	7083      	strb	r3, [r0, #2]
 801d30e:	70c1      	strb	r1, [r0, #3]
 801d310:	1d03      	adds	r3, r0, #4
 801d312:	e7f1      	b.n	801d2f8 <__exponent+0x58>

0801d314 <_printf_float>:
 801d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d318:	b091      	sub	sp, #68	@ 0x44
 801d31a:	460c      	mov	r4, r1
 801d31c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801d320:	4616      	mov	r6, r2
 801d322:	461f      	mov	r7, r3
 801d324:	4605      	mov	r5, r0
 801d326:	f000 fcf7 	bl	801dd18 <_localeconv_r>
 801d32a:	6803      	ldr	r3, [r0, #0]
 801d32c:	9308      	str	r3, [sp, #32]
 801d32e:	4618      	mov	r0, r3
 801d330:	f7e2 ff76 	bl	8000220 <strlen>
 801d334:	2300      	movs	r3, #0
 801d336:	930e      	str	r3, [sp, #56]	@ 0x38
 801d338:	f8d8 3000 	ldr.w	r3, [r8]
 801d33c:	9009      	str	r0, [sp, #36]	@ 0x24
 801d33e:	3307      	adds	r3, #7
 801d340:	f023 0307 	bic.w	r3, r3, #7
 801d344:	f103 0208 	add.w	r2, r3, #8
 801d348:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d34c:	f8d4 b000 	ldr.w	fp, [r4]
 801d350:	f8c8 2000 	str.w	r2, [r8]
 801d354:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d358:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d35c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d35e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801d362:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d366:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d36a:	4b9d      	ldr	r3, [pc, #628]	@ (801d5e0 <_printf_float+0x2cc>)
 801d36c:	f04f 32ff 	mov.w	r2, #4294967295
 801d370:	f7e3 fbb4 	bl	8000adc <__aeabi_dcmpun>
 801d374:	bb70      	cbnz	r0, 801d3d4 <_printf_float+0xc0>
 801d376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d37a:	4b99      	ldr	r3, [pc, #612]	@ (801d5e0 <_printf_float+0x2cc>)
 801d37c:	f04f 32ff 	mov.w	r2, #4294967295
 801d380:	f7e3 fb8e 	bl	8000aa0 <__aeabi_dcmple>
 801d384:	bb30      	cbnz	r0, 801d3d4 <_printf_float+0xc0>
 801d386:	2200      	movs	r2, #0
 801d388:	2300      	movs	r3, #0
 801d38a:	4640      	mov	r0, r8
 801d38c:	4649      	mov	r1, r9
 801d38e:	f7e3 fb7d 	bl	8000a8c <__aeabi_dcmplt>
 801d392:	b110      	cbz	r0, 801d39a <_printf_float+0x86>
 801d394:	232d      	movs	r3, #45	@ 0x2d
 801d396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d39a:	4a92      	ldr	r2, [pc, #584]	@ (801d5e4 <_printf_float+0x2d0>)
 801d39c:	4b92      	ldr	r3, [pc, #584]	@ (801d5e8 <_printf_float+0x2d4>)
 801d39e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d3a2:	bf8c      	ite	hi
 801d3a4:	4690      	movhi	r8, r2
 801d3a6:	4698      	movls	r8, r3
 801d3a8:	2303      	movs	r3, #3
 801d3aa:	6123      	str	r3, [r4, #16]
 801d3ac:	f02b 0304 	bic.w	r3, fp, #4
 801d3b0:	6023      	str	r3, [r4, #0]
 801d3b2:	f04f 0900 	mov.w	r9, #0
 801d3b6:	9700      	str	r7, [sp, #0]
 801d3b8:	4633      	mov	r3, r6
 801d3ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 801d3bc:	4621      	mov	r1, r4
 801d3be:	4628      	mov	r0, r5
 801d3c0:	f000 f9d4 	bl	801d76c <_printf_common>
 801d3c4:	3001      	adds	r0, #1
 801d3c6:	f040 808f 	bne.w	801d4e8 <_printf_float+0x1d4>
 801d3ca:	f04f 30ff 	mov.w	r0, #4294967295
 801d3ce:	b011      	add	sp, #68	@ 0x44
 801d3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3d4:	4642      	mov	r2, r8
 801d3d6:	464b      	mov	r3, r9
 801d3d8:	4640      	mov	r0, r8
 801d3da:	4649      	mov	r1, r9
 801d3dc:	f7e3 fb7e 	bl	8000adc <__aeabi_dcmpun>
 801d3e0:	b140      	cbz	r0, 801d3f4 <_printf_float+0xe0>
 801d3e2:	464b      	mov	r3, r9
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	bfbc      	itt	lt
 801d3e8:	232d      	movlt	r3, #45	@ 0x2d
 801d3ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d3ee:	4a7f      	ldr	r2, [pc, #508]	@ (801d5ec <_printf_float+0x2d8>)
 801d3f0:	4b7f      	ldr	r3, [pc, #508]	@ (801d5f0 <_printf_float+0x2dc>)
 801d3f2:	e7d4      	b.n	801d39e <_printf_float+0x8a>
 801d3f4:	6863      	ldr	r3, [r4, #4]
 801d3f6:	1c5a      	adds	r2, r3, #1
 801d3f8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801d3fc:	d13f      	bne.n	801d47e <_printf_float+0x16a>
 801d3fe:	2306      	movs	r3, #6
 801d400:	6063      	str	r3, [r4, #4]
 801d402:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801d406:	2200      	movs	r2, #0
 801d408:	6023      	str	r3, [r4, #0]
 801d40a:	9206      	str	r2, [sp, #24]
 801d40c:	aa0e      	add	r2, sp, #56	@ 0x38
 801d40e:	e9cd a204 	strd	sl, r2, [sp, #16]
 801d412:	aa0d      	add	r2, sp, #52	@ 0x34
 801d414:	9203      	str	r2, [sp, #12]
 801d416:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801d41a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801d41e:	6863      	ldr	r3, [r4, #4]
 801d420:	9300      	str	r3, [sp, #0]
 801d422:	4642      	mov	r2, r8
 801d424:	464b      	mov	r3, r9
 801d426:	4628      	mov	r0, r5
 801d428:	910a      	str	r1, [sp, #40]	@ 0x28
 801d42a:	f7ff fed5 	bl	801d1d8 <__cvt>
 801d42e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d430:	2947      	cmp	r1, #71	@ 0x47
 801d432:	4680      	mov	r8, r0
 801d434:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d436:	d128      	bne.n	801d48a <_printf_float+0x176>
 801d438:	1cc8      	adds	r0, r1, #3
 801d43a:	db02      	blt.n	801d442 <_printf_float+0x12e>
 801d43c:	6863      	ldr	r3, [r4, #4]
 801d43e:	4299      	cmp	r1, r3
 801d440:	dd40      	ble.n	801d4c4 <_printf_float+0x1b0>
 801d442:	f1aa 0a02 	sub.w	sl, sl, #2
 801d446:	fa5f fa8a 	uxtb.w	sl, sl
 801d44a:	3901      	subs	r1, #1
 801d44c:	4652      	mov	r2, sl
 801d44e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d452:	910d      	str	r1, [sp, #52]	@ 0x34
 801d454:	f7ff ff24 	bl	801d2a0 <__exponent>
 801d458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d45a:	1813      	adds	r3, r2, r0
 801d45c:	2a01      	cmp	r2, #1
 801d45e:	4681      	mov	r9, r0
 801d460:	6123      	str	r3, [r4, #16]
 801d462:	dc02      	bgt.n	801d46a <_printf_float+0x156>
 801d464:	6822      	ldr	r2, [r4, #0]
 801d466:	07d2      	lsls	r2, r2, #31
 801d468:	d501      	bpl.n	801d46e <_printf_float+0x15a>
 801d46a:	3301      	adds	r3, #1
 801d46c:	6123      	str	r3, [r4, #16]
 801d46e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801d472:	2b00      	cmp	r3, #0
 801d474:	d09f      	beq.n	801d3b6 <_printf_float+0xa2>
 801d476:	232d      	movs	r3, #45	@ 0x2d
 801d478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d47c:	e79b      	b.n	801d3b6 <_printf_float+0xa2>
 801d47e:	2947      	cmp	r1, #71	@ 0x47
 801d480:	d1bf      	bne.n	801d402 <_printf_float+0xee>
 801d482:	2b00      	cmp	r3, #0
 801d484:	d1bd      	bne.n	801d402 <_printf_float+0xee>
 801d486:	2301      	movs	r3, #1
 801d488:	e7ba      	b.n	801d400 <_printf_float+0xec>
 801d48a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d48e:	d9dc      	bls.n	801d44a <_printf_float+0x136>
 801d490:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d494:	d118      	bne.n	801d4c8 <_printf_float+0x1b4>
 801d496:	2900      	cmp	r1, #0
 801d498:	6863      	ldr	r3, [r4, #4]
 801d49a:	dd0b      	ble.n	801d4b4 <_printf_float+0x1a0>
 801d49c:	6121      	str	r1, [r4, #16]
 801d49e:	b913      	cbnz	r3, 801d4a6 <_printf_float+0x192>
 801d4a0:	6822      	ldr	r2, [r4, #0]
 801d4a2:	07d0      	lsls	r0, r2, #31
 801d4a4:	d502      	bpl.n	801d4ac <_printf_float+0x198>
 801d4a6:	3301      	adds	r3, #1
 801d4a8:	440b      	add	r3, r1
 801d4aa:	6123      	str	r3, [r4, #16]
 801d4ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d4ae:	f04f 0900 	mov.w	r9, #0
 801d4b2:	e7dc      	b.n	801d46e <_printf_float+0x15a>
 801d4b4:	b913      	cbnz	r3, 801d4bc <_printf_float+0x1a8>
 801d4b6:	6822      	ldr	r2, [r4, #0]
 801d4b8:	07d2      	lsls	r2, r2, #31
 801d4ba:	d501      	bpl.n	801d4c0 <_printf_float+0x1ac>
 801d4bc:	3302      	adds	r3, #2
 801d4be:	e7f4      	b.n	801d4aa <_printf_float+0x196>
 801d4c0:	2301      	movs	r3, #1
 801d4c2:	e7f2      	b.n	801d4aa <_printf_float+0x196>
 801d4c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d4ca:	4299      	cmp	r1, r3
 801d4cc:	db05      	blt.n	801d4da <_printf_float+0x1c6>
 801d4ce:	6823      	ldr	r3, [r4, #0]
 801d4d0:	6121      	str	r1, [r4, #16]
 801d4d2:	07d8      	lsls	r0, r3, #31
 801d4d4:	d5ea      	bpl.n	801d4ac <_printf_float+0x198>
 801d4d6:	1c4b      	adds	r3, r1, #1
 801d4d8:	e7e7      	b.n	801d4aa <_printf_float+0x196>
 801d4da:	2900      	cmp	r1, #0
 801d4dc:	bfd4      	ite	le
 801d4de:	f1c1 0202 	rsble	r2, r1, #2
 801d4e2:	2201      	movgt	r2, #1
 801d4e4:	4413      	add	r3, r2
 801d4e6:	e7e0      	b.n	801d4aa <_printf_float+0x196>
 801d4e8:	6823      	ldr	r3, [r4, #0]
 801d4ea:	055a      	lsls	r2, r3, #21
 801d4ec:	d407      	bmi.n	801d4fe <_printf_float+0x1ea>
 801d4ee:	6923      	ldr	r3, [r4, #16]
 801d4f0:	4642      	mov	r2, r8
 801d4f2:	4631      	mov	r1, r6
 801d4f4:	4628      	mov	r0, r5
 801d4f6:	47b8      	blx	r7
 801d4f8:	3001      	adds	r0, #1
 801d4fa:	d12b      	bne.n	801d554 <_printf_float+0x240>
 801d4fc:	e765      	b.n	801d3ca <_printf_float+0xb6>
 801d4fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d502:	f240 80dd 	bls.w	801d6c0 <_printf_float+0x3ac>
 801d506:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d50a:	2200      	movs	r2, #0
 801d50c:	2300      	movs	r3, #0
 801d50e:	f7e3 fab3 	bl	8000a78 <__aeabi_dcmpeq>
 801d512:	2800      	cmp	r0, #0
 801d514:	d033      	beq.n	801d57e <_printf_float+0x26a>
 801d516:	4a37      	ldr	r2, [pc, #220]	@ (801d5f4 <_printf_float+0x2e0>)
 801d518:	2301      	movs	r3, #1
 801d51a:	4631      	mov	r1, r6
 801d51c:	4628      	mov	r0, r5
 801d51e:	47b8      	blx	r7
 801d520:	3001      	adds	r0, #1
 801d522:	f43f af52 	beq.w	801d3ca <_printf_float+0xb6>
 801d526:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801d52a:	4543      	cmp	r3, r8
 801d52c:	db02      	blt.n	801d534 <_printf_float+0x220>
 801d52e:	6823      	ldr	r3, [r4, #0]
 801d530:	07d8      	lsls	r0, r3, #31
 801d532:	d50f      	bpl.n	801d554 <_printf_float+0x240>
 801d534:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d538:	4631      	mov	r1, r6
 801d53a:	4628      	mov	r0, r5
 801d53c:	47b8      	blx	r7
 801d53e:	3001      	adds	r0, #1
 801d540:	f43f af43 	beq.w	801d3ca <_printf_float+0xb6>
 801d544:	f04f 0900 	mov.w	r9, #0
 801d548:	f108 38ff 	add.w	r8, r8, #4294967295
 801d54c:	f104 0a1a 	add.w	sl, r4, #26
 801d550:	45c8      	cmp	r8, r9
 801d552:	dc09      	bgt.n	801d568 <_printf_float+0x254>
 801d554:	6823      	ldr	r3, [r4, #0]
 801d556:	079b      	lsls	r3, r3, #30
 801d558:	f100 8103 	bmi.w	801d762 <_printf_float+0x44e>
 801d55c:	68e0      	ldr	r0, [r4, #12]
 801d55e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d560:	4298      	cmp	r0, r3
 801d562:	bfb8      	it	lt
 801d564:	4618      	movlt	r0, r3
 801d566:	e732      	b.n	801d3ce <_printf_float+0xba>
 801d568:	2301      	movs	r3, #1
 801d56a:	4652      	mov	r2, sl
 801d56c:	4631      	mov	r1, r6
 801d56e:	4628      	mov	r0, r5
 801d570:	47b8      	blx	r7
 801d572:	3001      	adds	r0, #1
 801d574:	f43f af29 	beq.w	801d3ca <_printf_float+0xb6>
 801d578:	f109 0901 	add.w	r9, r9, #1
 801d57c:	e7e8      	b.n	801d550 <_printf_float+0x23c>
 801d57e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d580:	2b00      	cmp	r3, #0
 801d582:	dc39      	bgt.n	801d5f8 <_printf_float+0x2e4>
 801d584:	4a1b      	ldr	r2, [pc, #108]	@ (801d5f4 <_printf_float+0x2e0>)
 801d586:	2301      	movs	r3, #1
 801d588:	4631      	mov	r1, r6
 801d58a:	4628      	mov	r0, r5
 801d58c:	47b8      	blx	r7
 801d58e:	3001      	adds	r0, #1
 801d590:	f43f af1b 	beq.w	801d3ca <_printf_float+0xb6>
 801d594:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801d598:	ea59 0303 	orrs.w	r3, r9, r3
 801d59c:	d102      	bne.n	801d5a4 <_printf_float+0x290>
 801d59e:	6823      	ldr	r3, [r4, #0]
 801d5a0:	07d9      	lsls	r1, r3, #31
 801d5a2:	d5d7      	bpl.n	801d554 <_printf_float+0x240>
 801d5a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d5a8:	4631      	mov	r1, r6
 801d5aa:	4628      	mov	r0, r5
 801d5ac:	47b8      	blx	r7
 801d5ae:	3001      	adds	r0, #1
 801d5b0:	f43f af0b 	beq.w	801d3ca <_printf_float+0xb6>
 801d5b4:	f04f 0a00 	mov.w	sl, #0
 801d5b8:	f104 0b1a 	add.w	fp, r4, #26
 801d5bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d5be:	425b      	negs	r3, r3
 801d5c0:	4553      	cmp	r3, sl
 801d5c2:	dc01      	bgt.n	801d5c8 <_printf_float+0x2b4>
 801d5c4:	464b      	mov	r3, r9
 801d5c6:	e793      	b.n	801d4f0 <_printf_float+0x1dc>
 801d5c8:	2301      	movs	r3, #1
 801d5ca:	465a      	mov	r2, fp
 801d5cc:	4631      	mov	r1, r6
 801d5ce:	4628      	mov	r0, r5
 801d5d0:	47b8      	blx	r7
 801d5d2:	3001      	adds	r0, #1
 801d5d4:	f43f aef9 	beq.w	801d3ca <_printf_float+0xb6>
 801d5d8:	f10a 0a01 	add.w	sl, sl, #1
 801d5dc:	e7ee      	b.n	801d5bc <_printf_float+0x2a8>
 801d5de:	bf00      	nop
 801d5e0:	7fefffff 	.word	0x7fefffff
 801d5e4:	08020e34 	.word	0x08020e34
 801d5e8:	08020e30 	.word	0x08020e30
 801d5ec:	08020e3c 	.word	0x08020e3c
 801d5f0:	08020e38 	.word	0x08020e38
 801d5f4:	08020e40 	.word	0x08020e40
 801d5f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d5fa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801d5fe:	4553      	cmp	r3, sl
 801d600:	bfa8      	it	ge
 801d602:	4653      	movge	r3, sl
 801d604:	2b00      	cmp	r3, #0
 801d606:	4699      	mov	r9, r3
 801d608:	dc36      	bgt.n	801d678 <_printf_float+0x364>
 801d60a:	f04f 0b00 	mov.w	fp, #0
 801d60e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d612:	f104 021a 	add.w	r2, r4, #26
 801d616:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d618:	930a      	str	r3, [sp, #40]	@ 0x28
 801d61a:	eba3 0309 	sub.w	r3, r3, r9
 801d61e:	455b      	cmp	r3, fp
 801d620:	dc31      	bgt.n	801d686 <_printf_float+0x372>
 801d622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d624:	459a      	cmp	sl, r3
 801d626:	dc3a      	bgt.n	801d69e <_printf_float+0x38a>
 801d628:	6823      	ldr	r3, [r4, #0]
 801d62a:	07da      	lsls	r2, r3, #31
 801d62c:	d437      	bmi.n	801d69e <_printf_float+0x38a>
 801d62e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d630:	ebaa 0903 	sub.w	r9, sl, r3
 801d634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d636:	ebaa 0303 	sub.w	r3, sl, r3
 801d63a:	4599      	cmp	r9, r3
 801d63c:	bfa8      	it	ge
 801d63e:	4699      	movge	r9, r3
 801d640:	f1b9 0f00 	cmp.w	r9, #0
 801d644:	dc33      	bgt.n	801d6ae <_printf_float+0x39a>
 801d646:	f04f 0800 	mov.w	r8, #0
 801d64a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d64e:	f104 0b1a 	add.w	fp, r4, #26
 801d652:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d654:	ebaa 0303 	sub.w	r3, sl, r3
 801d658:	eba3 0309 	sub.w	r3, r3, r9
 801d65c:	4543      	cmp	r3, r8
 801d65e:	f77f af79 	ble.w	801d554 <_printf_float+0x240>
 801d662:	2301      	movs	r3, #1
 801d664:	465a      	mov	r2, fp
 801d666:	4631      	mov	r1, r6
 801d668:	4628      	mov	r0, r5
 801d66a:	47b8      	blx	r7
 801d66c:	3001      	adds	r0, #1
 801d66e:	f43f aeac 	beq.w	801d3ca <_printf_float+0xb6>
 801d672:	f108 0801 	add.w	r8, r8, #1
 801d676:	e7ec      	b.n	801d652 <_printf_float+0x33e>
 801d678:	4642      	mov	r2, r8
 801d67a:	4631      	mov	r1, r6
 801d67c:	4628      	mov	r0, r5
 801d67e:	47b8      	blx	r7
 801d680:	3001      	adds	r0, #1
 801d682:	d1c2      	bne.n	801d60a <_printf_float+0x2f6>
 801d684:	e6a1      	b.n	801d3ca <_printf_float+0xb6>
 801d686:	2301      	movs	r3, #1
 801d688:	4631      	mov	r1, r6
 801d68a:	4628      	mov	r0, r5
 801d68c:	920a      	str	r2, [sp, #40]	@ 0x28
 801d68e:	47b8      	blx	r7
 801d690:	3001      	adds	r0, #1
 801d692:	f43f ae9a 	beq.w	801d3ca <_printf_float+0xb6>
 801d696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d698:	f10b 0b01 	add.w	fp, fp, #1
 801d69c:	e7bb      	b.n	801d616 <_printf_float+0x302>
 801d69e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d6a2:	4631      	mov	r1, r6
 801d6a4:	4628      	mov	r0, r5
 801d6a6:	47b8      	blx	r7
 801d6a8:	3001      	adds	r0, #1
 801d6aa:	d1c0      	bne.n	801d62e <_printf_float+0x31a>
 801d6ac:	e68d      	b.n	801d3ca <_printf_float+0xb6>
 801d6ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d6b0:	464b      	mov	r3, r9
 801d6b2:	4442      	add	r2, r8
 801d6b4:	4631      	mov	r1, r6
 801d6b6:	4628      	mov	r0, r5
 801d6b8:	47b8      	blx	r7
 801d6ba:	3001      	adds	r0, #1
 801d6bc:	d1c3      	bne.n	801d646 <_printf_float+0x332>
 801d6be:	e684      	b.n	801d3ca <_printf_float+0xb6>
 801d6c0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801d6c4:	f1ba 0f01 	cmp.w	sl, #1
 801d6c8:	dc01      	bgt.n	801d6ce <_printf_float+0x3ba>
 801d6ca:	07db      	lsls	r3, r3, #31
 801d6cc:	d536      	bpl.n	801d73c <_printf_float+0x428>
 801d6ce:	2301      	movs	r3, #1
 801d6d0:	4642      	mov	r2, r8
 801d6d2:	4631      	mov	r1, r6
 801d6d4:	4628      	mov	r0, r5
 801d6d6:	47b8      	blx	r7
 801d6d8:	3001      	adds	r0, #1
 801d6da:	f43f ae76 	beq.w	801d3ca <_printf_float+0xb6>
 801d6de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d6e2:	4631      	mov	r1, r6
 801d6e4:	4628      	mov	r0, r5
 801d6e6:	47b8      	blx	r7
 801d6e8:	3001      	adds	r0, #1
 801d6ea:	f43f ae6e 	beq.w	801d3ca <_printf_float+0xb6>
 801d6ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d6f2:	2200      	movs	r2, #0
 801d6f4:	2300      	movs	r3, #0
 801d6f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d6fa:	f7e3 f9bd 	bl	8000a78 <__aeabi_dcmpeq>
 801d6fe:	b9c0      	cbnz	r0, 801d732 <_printf_float+0x41e>
 801d700:	4653      	mov	r3, sl
 801d702:	f108 0201 	add.w	r2, r8, #1
 801d706:	4631      	mov	r1, r6
 801d708:	4628      	mov	r0, r5
 801d70a:	47b8      	blx	r7
 801d70c:	3001      	adds	r0, #1
 801d70e:	d10c      	bne.n	801d72a <_printf_float+0x416>
 801d710:	e65b      	b.n	801d3ca <_printf_float+0xb6>
 801d712:	2301      	movs	r3, #1
 801d714:	465a      	mov	r2, fp
 801d716:	4631      	mov	r1, r6
 801d718:	4628      	mov	r0, r5
 801d71a:	47b8      	blx	r7
 801d71c:	3001      	adds	r0, #1
 801d71e:	f43f ae54 	beq.w	801d3ca <_printf_float+0xb6>
 801d722:	f108 0801 	add.w	r8, r8, #1
 801d726:	45d0      	cmp	r8, sl
 801d728:	dbf3      	blt.n	801d712 <_printf_float+0x3fe>
 801d72a:	464b      	mov	r3, r9
 801d72c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d730:	e6df      	b.n	801d4f2 <_printf_float+0x1de>
 801d732:	f04f 0800 	mov.w	r8, #0
 801d736:	f104 0b1a 	add.w	fp, r4, #26
 801d73a:	e7f4      	b.n	801d726 <_printf_float+0x412>
 801d73c:	2301      	movs	r3, #1
 801d73e:	4642      	mov	r2, r8
 801d740:	e7e1      	b.n	801d706 <_printf_float+0x3f2>
 801d742:	2301      	movs	r3, #1
 801d744:	464a      	mov	r2, r9
 801d746:	4631      	mov	r1, r6
 801d748:	4628      	mov	r0, r5
 801d74a:	47b8      	blx	r7
 801d74c:	3001      	adds	r0, #1
 801d74e:	f43f ae3c 	beq.w	801d3ca <_printf_float+0xb6>
 801d752:	f108 0801 	add.w	r8, r8, #1
 801d756:	68e3      	ldr	r3, [r4, #12]
 801d758:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d75a:	1a5b      	subs	r3, r3, r1
 801d75c:	4543      	cmp	r3, r8
 801d75e:	dcf0      	bgt.n	801d742 <_printf_float+0x42e>
 801d760:	e6fc      	b.n	801d55c <_printf_float+0x248>
 801d762:	f04f 0800 	mov.w	r8, #0
 801d766:	f104 0919 	add.w	r9, r4, #25
 801d76a:	e7f4      	b.n	801d756 <_printf_float+0x442>

0801d76c <_printf_common>:
 801d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d770:	4616      	mov	r6, r2
 801d772:	4698      	mov	r8, r3
 801d774:	688a      	ldr	r2, [r1, #8]
 801d776:	690b      	ldr	r3, [r1, #16]
 801d778:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d77c:	4293      	cmp	r3, r2
 801d77e:	bfb8      	it	lt
 801d780:	4613      	movlt	r3, r2
 801d782:	6033      	str	r3, [r6, #0]
 801d784:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d788:	4607      	mov	r7, r0
 801d78a:	460c      	mov	r4, r1
 801d78c:	b10a      	cbz	r2, 801d792 <_printf_common+0x26>
 801d78e:	3301      	adds	r3, #1
 801d790:	6033      	str	r3, [r6, #0]
 801d792:	6823      	ldr	r3, [r4, #0]
 801d794:	0699      	lsls	r1, r3, #26
 801d796:	bf42      	ittt	mi
 801d798:	6833      	ldrmi	r3, [r6, #0]
 801d79a:	3302      	addmi	r3, #2
 801d79c:	6033      	strmi	r3, [r6, #0]
 801d79e:	6825      	ldr	r5, [r4, #0]
 801d7a0:	f015 0506 	ands.w	r5, r5, #6
 801d7a4:	d106      	bne.n	801d7b4 <_printf_common+0x48>
 801d7a6:	f104 0a19 	add.w	sl, r4, #25
 801d7aa:	68e3      	ldr	r3, [r4, #12]
 801d7ac:	6832      	ldr	r2, [r6, #0]
 801d7ae:	1a9b      	subs	r3, r3, r2
 801d7b0:	42ab      	cmp	r3, r5
 801d7b2:	dc26      	bgt.n	801d802 <_printf_common+0x96>
 801d7b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d7b8:	6822      	ldr	r2, [r4, #0]
 801d7ba:	3b00      	subs	r3, #0
 801d7bc:	bf18      	it	ne
 801d7be:	2301      	movne	r3, #1
 801d7c0:	0692      	lsls	r2, r2, #26
 801d7c2:	d42b      	bmi.n	801d81c <_printf_common+0xb0>
 801d7c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d7c8:	4641      	mov	r1, r8
 801d7ca:	4638      	mov	r0, r7
 801d7cc:	47c8      	blx	r9
 801d7ce:	3001      	adds	r0, #1
 801d7d0:	d01e      	beq.n	801d810 <_printf_common+0xa4>
 801d7d2:	6823      	ldr	r3, [r4, #0]
 801d7d4:	6922      	ldr	r2, [r4, #16]
 801d7d6:	f003 0306 	and.w	r3, r3, #6
 801d7da:	2b04      	cmp	r3, #4
 801d7dc:	bf02      	ittt	eq
 801d7de:	68e5      	ldreq	r5, [r4, #12]
 801d7e0:	6833      	ldreq	r3, [r6, #0]
 801d7e2:	1aed      	subeq	r5, r5, r3
 801d7e4:	68a3      	ldr	r3, [r4, #8]
 801d7e6:	bf0c      	ite	eq
 801d7e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d7ec:	2500      	movne	r5, #0
 801d7ee:	4293      	cmp	r3, r2
 801d7f0:	bfc4      	itt	gt
 801d7f2:	1a9b      	subgt	r3, r3, r2
 801d7f4:	18ed      	addgt	r5, r5, r3
 801d7f6:	2600      	movs	r6, #0
 801d7f8:	341a      	adds	r4, #26
 801d7fa:	42b5      	cmp	r5, r6
 801d7fc:	d11a      	bne.n	801d834 <_printf_common+0xc8>
 801d7fe:	2000      	movs	r0, #0
 801d800:	e008      	b.n	801d814 <_printf_common+0xa8>
 801d802:	2301      	movs	r3, #1
 801d804:	4652      	mov	r2, sl
 801d806:	4641      	mov	r1, r8
 801d808:	4638      	mov	r0, r7
 801d80a:	47c8      	blx	r9
 801d80c:	3001      	adds	r0, #1
 801d80e:	d103      	bne.n	801d818 <_printf_common+0xac>
 801d810:	f04f 30ff 	mov.w	r0, #4294967295
 801d814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d818:	3501      	adds	r5, #1
 801d81a:	e7c6      	b.n	801d7aa <_printf_common+0x3e>
 801d81c:	18e1      	adds	r1, r4, r3
 801d81e:	1c5a      	adds	r2, r3, #1
 801d820:	2030      	movs	r0, #48	@ 0x30
 801d822:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d826:	4422      	add	r2, r4
 801d828:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d82c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d830:	3302      	adds	r3, #2
 801d832:	e7c7      	b.n	801d7c4 <_printf_common+0x58>
 801d834:	2301      	movs	r3, #1
 801d836:	4622      	mov	r2, r4
 801d838:	4641      	mov	r1, r8
 801d83a:	4638      	mov	r0, r7
 801d83c:	47c8      	blx	r9
 801d83e:	3001      	adds	r0, #1
 801d840:	d0e6      	beq.n	801d810 <_printf_common+0xa4>
 801d842:	3601      	adds	r6, #1
 801d844:	e7d9      	b.n	801d7fa <_printf_common+0x8e>
	...

0801d848 <_printf_i>:
 801d848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d84c:	7e0f      	ldrb	r7, [r1, #24]
 801d84e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d850:	2f78      	cmp	r7, #120	@ 0x78
 801d852:	4691      	mov	r9, r2
 801d854:	4680      	mov	r8, r0
 801d856:	460c      	mov	r4, r1
 801d858:	469a      	mov	sl, r3
 801d85a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d85e:	d807      	bhi.n	801d870 <_printf_i+0x28>
 801d860:	2f62      	cmp	r7, #98	@ 0x62
 801d862:	d80a      	bhi.n	801d87a <_printf_i+0x32>
 801d864:	2f00      	cmp	r7, #0
 801d866:	f000 80d1 	beq.w	801da0c <_printf_i+0x1c4>
 801d86a:	2f58      	cmp	r7, #88	@ 0x58
 801d86c:	f000 80b8 	beq.w	801d9e0 <_printf_i+0x198>
 801d870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d874:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d878:	e03a      	b.n	801d8f0 <_printf_i+0xa8>
 801d87a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d87e:	2b15      	cmp	r3, #21
 801d880:	d8f6      	bhi.n	801d870 <_printf_i+0x28>
 801d882:	a101      	add	r1, pc, #4	@ (adr r1, 801d888 <_printf_i+0x40>)
 801d884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d888:	0801d8e1 	.word	0x0801d8e1
 801d88c:	0801d8f5 	.word	0x0801d8f5
 801d890:	0801d871 	.word	0x0801d871
 801d894:	0801d871 	.word	0x0801d871
 801d898:	0801d871 	.word	0x0801d871
 801d89c:	0801d871 	.word	0x0801d871
 801d8a0:	0801d8f5 	.word	0x0801d8f5
 801d8a4:	0801d871 	.word	0x0801d871
 801d8a8:	0801d871 	.word	0x0801d871
 801d8ac:	0801d871 	.word	0x0801d871
 801d8b0:	0801d871 	.word	0x0801d871
 801d8b4:	0801d9f3 	.word	0x0801d9f3
 801d8b8:	0801d91f 	.word	0x0801d91f
 801d8bc:	0801d9ad 	.word	0x0801d9ad
 801d8c0:	0801d871 	.word	0x0801d871
 801d8c4:	0801d871 	.word	0x0801d871
 801d8c8:	0801da15 	.word	0x0801da15
 801d8cc:	0801d871 	.word	0x0801d871
 801d8d0:	0801d91f 	.word	0x0801d91f
 801d8d4:	0801d871 	.word	0x0801d871
 801d8d8:	0801d871 	.word	0x0801d871
 801d8dc:	0801d9b5 	.word	0x0801d9b5
 801d8e0:	6833      	ldr	r3, [r6, #0]
 801d8e2:	1d1a      	adds	r2, r3, #4
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	6032      	str	r2, [r6, #0]
 801d8e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d8ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d8f0:	2301      	movs	r3, #1
 801d8f2:	e09c      	b.n	801da2e <_printf_i+0x1e6>
 801d8f4:	6833      	ldr	r3, [r6, #0]
 801d8f6:	6820      	ldr	r0, [r4, #0]
 801d8f8:	1d19      	adds	r1, r3, #4
 801d8fa:	6031      	str	r1, [r6, #0]
 801d8fc:	0606      	lsls	r6, r0, #24
 801d8fe:	d501      	bpl.n	801d904 <_printf_i+0xbc>
 801d900:	681d      	ldr	r5, [r3, #0]
 801d902:	e003      	b.n	801d90c <_printf_i+0xc4>
 801d904:	0645      	lsls	r5, r0, #25
 801d906:	d5fb      	bpl.n	801d900 <_printf_i+0xb8>
 801d908:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d90c:	2d00      	cmp	r5, #0
 801d90e:	da03      	bge.n	801d918 <_printf_i+0xd0>
 801d910:	232d      	movs	r3, #45	@ 0x2d
 801d912:	426d      	negs	r5, r5
 801d914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d918:	4858      	ldr	r0, [pc, #352]	@ (801da7c <_printf_i+0x234>)
 801d91a:	230a      	movs	r3, #10
 801d91c:	e011      	b.n	801d942 <_printf_i+0xfa>
 801d91e:	6821      	ldr	r1, [r4, #0]
 801d920:	6833      	ldr	r3, [r6, #0]
 801d922:	0608      	lsls	r0, r1, #24
 801d924:	f853 5b04 	ldr.w	r5, [r3], #4
 801d928:	d402      	bmi.n	801d930 <_printf_i+0xe8>
 801d92a:	0649      	lsls	r1, r1, #25
 801d92c:	bf48      	it	mi
 801d92e:	b2ad      	uxthmi	r5, r5
 801d930:	2f6f      	cmp	r7, #111	@ 0x6f
 801d932:	4852      	ldr	r0, [pc, #328]	@ (801da7c <_printf_i+0x234>)
 801d934:	6033      	str	r3, [r6, #0]
 801d936:	bf14      	ite	ne
 801d938:	230a      	movne	r3, #10
 801d93a:	2308      	moveq	r3, #8
 801d93c:	2100      	movs	r1, #0
 801d93e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d942:	6866      	ldr	r6, [r4, #4]
 801d944:	60a6      	str	r6, [r4, #8]
 801d946:	2e00      	cmp	r6, #0
 801d948:	db05      	blt.n	801d956 <_printf_i+0x10e>
 801d94a:	6821      	ldr	r1, [r4, #0]
 801d94c:	432e      	orrs	r6, r5
 801d94e:	f021 0104 	bic.w	r1, r1, #4
 801d952:	6021      	str	r1, [r4, #0]
 801d954:	d04b      	beq.n	801d9ee <_printf_i+0x1a6>
 801d956:	4616      	mov	r6, r2
 801d958:	fbb5 f1f3 	udiv	r1, r5, r3
 801d95c:	fb03 5711 	mls	r7, r3, r1, r5
 801d960:	5dc7      	ldrb	r7, [r0, r7]
 801d962:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d966:	462f      	mov	r7, r5
 801d968:	42bb      	cmp	r3, r7
 801d96a:	460d      	mov	r5, r1
 801d96c:	d9f4      	bls.n	801d958 <_printf_i+0x110>
 801d96e:	2b08      	cmp	r3, #8
 801d970:	d10b      	bne.n	801d98a <_printf_i+0x142>
 801d972:	6823      	ldr	r3, [r4, #0]
 801d974:	07df      	lsls	r7, r3, #31
 801d976:	d508      	bpl.n	801d98a <_printf_i+0x142>
 801d978:	6923      	ldr	r3, [r4, #16]
 801d97a:	6861      	ldr	r1, [r4, #4]
 801d97c:	4299      	cmp	r1, r3
 801d97e:	bfde      	ittt	le
 801d980:	2330      	movle	r3, #48	@ 0x30
 801d982:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d986:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d98a:	1b92      	subs	r2, r2, r6
 801d98c:	6122      	str	r2, [r4, #16]
 801d98e:	f8cd a000 	str.w	sl, [sp]
 801d992:	464b      	mov	r3, r9
 801d994:	aa03      	add	r2, sp, #12
 801d996:	4621      	mov	r1, r4
 801d998:	4640      	mov	r0, r8
 801d99a:	f7ff fee7 	bl	801d76c <_printf_common>
 801d99e:	3001      	adds	r0, #1
 801d9a0:	d14a      	bne.n	801da38 <_printf_i+0x1f0>
 801d9a2:	f04f 30ff 	mov.w	r0, #4294967295
 801d9a6:	b004      	add	sp, #16
 801d9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9ac:	6823      	ldr	r3, [r4, #0]
 801d9ae:	f043 0320 	orr.w	r3, r3, #32
 801d9b2:	6023      	str	r3, [r4, #0]
 801d9b4:	4832      	ldr	r0, [pc, #200]	@ (801da80 <_printf_i+0x238>)
 801d9b6:	2778      	movs	r7, #120	@ 0x78
 801d9b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d9bc:	6823      	ldr	r3, [r4, #0]
 801d9be:	6831      	ldr	r1, [r6, #0]
 801d9c0:	061f      	lsls	r7, r3, #24
 801d9c2:	f851 5b04 	ldr.w	r5, [r1], #4
 801d9c6:	d402      	bmi.n	801d9ce <_printf_i+0x186>
 801d9c8:	065f      	lsls	r7, r3, #25
 801d9ca:	bf48      	it	mi
 801d9cc:	b2ad      	uxthmi	r5, r5
 801d9ce:	6031      	str	r1, [r6, #0]
 801d9d0:	07d9      	lsls	r1, r3, #31
 801d9d2:	bf44      	itt	mi
 801d9d4:	f043 0320 	orrmi.w	r3, r3, #32
 801d9d8:	6023      	strmi	r3, [r4, #0]
 801d9da:	b11d      	cbz	r5, 801d9e4 <_printf_i+0x19c>
 801d9dc:	2310      	movs	r3, #16
 801d9de:	e7ad      	b.n	801d93c <_printf_i+0xf4>
 801d9e0:	4826      	ldr	r0, [pc, #152]	@ (801da7c <_printf_i+0x234>)
 801d9e2:	e7e9      	b.n	801d9b8 <_printf_i+0x170>
 801d9e4:	6823      	ldr	r3, [r4, #0]
 801d9e6:	f023 0320 	bic.w	r3, r3, #32
 801d9ea:	6023      	str	r3, [r4, #0]
 801d9ec:	e7f6      	b.n	801d9dc <_printf_i+0x194>
 801d9ee:	4616      	mov	r6, r2
 801d9f0:	e7bd      	b.n	801d96e <_printf_i+0x126>
 801d9f2:	6833      	ldr	r3, [r6, #0]
 801d9f4:	6825      	ldr	r5, [r4, #0]
 801d9f6:	6961      	ldr	r1, [r4, #20]
 801d9f8:	1d18      	adds	r0, r3, #4
 801d9fa:	6030      	str	r0, [r6, #0]
 801d9fc:	062e      	lsls	r6, r5, #24
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	d501      	bpl.n	801da06 <_printf_i+0x1be>
 801da02:	6019      	str	r1, [r3, #0]
 801da04:	e002      	b.n	801da0c <_printf_i+0x1c4>
 801da06:	0668      	lsls	r0, r5, #25
 801da08:	d5fb      	bpl.n	801da02 <_printf_i+0x1ba>
 801da0a:	8019      	strh	r1, [r3, #0]
 801da0c:	2300      	movs	r3, #0
 801da0e:	6123      	str	r3, [r4, #16]
 801da10:	4616      	mov	r6, r2
 801da12:	e7bc      	b.n	801d98e <_printf_i+0x146>
 801da14:	6833      	ldr	r3, [r6, #0]
 801da16:	1d1a      	adds	r2, r3, #4
 801da18:	6032      	str	r2, [r6, #0]
 801da1a:	681e      	ldr	r6, [r3, #0]
 801da1c:	6862      	ldr	r2, [r4, #4]
 801da1e:	2100      	movs	r1, #0
 801da20:	4630      	mov	r0, r6
 801da22:	f7e2 fbad 	bl	8000180 <memchr>
 801da26:	b108      	cbz	r0, 801da2c <_printf_i+0x1e4>
 801da28:	1b80      	subs	r0, r0, r6
 801da2a:	6060      	str	r0, [r4, #4]
 801da2c:	6863      	ldr	r3, [r4, #4]
 801da2e:	6123      	str	r3, [r4, #16]
 801da30:	2300      	movs	r3, #0
 801da32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801da36:	e7aa      	b.n	801d98e <_printf_i+0x146>
 801da38:	6923      	ldr	r3, [r4, #16]
 801da3a:	4632      	mov	r2, r6
 801da3c:	4649      	mov	r1, r9
 801da3e:	4640      	mov	r0, r8
 801da40:	47d0      	blx	sl
 801da42:	3001      	adds	r0, #1
 801da44:	d0ad      	beq.n	801d9a2 <_printf_i+0x15a>
 801da46:	6823      	ldr	r3, [r4, #0]
 801da48:	079b      	lsls	r3, r3, #30
 801da4a:	d413      	bmi.n	801da74 <_printf_i+0x22c>
 801da4c:	68e0      	ldr	r0, [r4, #12]
 801da4e:	9b03      	ldr	r3, [sp, #12]
 801da50:	4298      	cmp	r0, r3
 801da52:	bfb8      	it	lt
 801da54:	4618      	movlt	r0, r3
 801da56:	e7a6      	b.n	801d9a6 <_printf_i+0x15e>
 801da58:	2301      	movs	r3, #1
 801da5a:	4632      	mov	r2, r6
 801da5c:	4649      	mov	r1, r9
 801da5e:	4640      	mov	r0, r8
 801da60:	47d0      	blx	sl
 801da62:	3001      	adds	r0, #1
 801da64:	d09d      	beq.n	801d9a2 <_printf_i+0x15a>
 801da66:	3501      	adds	r5, #1
 801da68:	68e3      	ldr	r3, [r4, #12]
 801da6a:	9903      	ldr	r1, [sp, #12]
 801da6c:	1a5b      	subs	r3, r3, r1
 801da6e:	42ab      	cmp	r3, r5
 801da70:	dcf2      	bgt.n	801da58 <_printf_i+0x210>
 801da72:	e7eb      	b.n	801da4c <_printf_i+0x204>
 801da74:	2500      	movs	r5, #0
 801da76:	f104 0619 	add.w	r6, r4, #25
 801da7a:	e7f5      	b.n	801da68 <_printf_i+0x220>
 801da7c:	08020e42 	.word	0x08020e42
 801da80:	08020e53 	.word	0x08020e53

0801da84 <std>:
 801da84:	2300      	movs	r3, #0
 801da86:	b510      	push	{r4, lr}
 801da88:	4604      	mov	r4, r0
 801da8a:	e9c0 3300 	strd	r3, r3, [r0]
 801da8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801da92:	6083      	str	r3, [r0, #8]
 801da94:	8181      	strh	r1, [r0, #12]
 801da96:	6643      	str	r3, [r0, #100]	@ 0x64
 801da98:	81c2      	strh	r2, [r0, #14]
 801da9a:	6183      	str	r3, [r0, #24]
 801da9c:	4619      	mov	r1, r3
 801da9e:	2208      	movs	r2, #8
 801daa0:	305c      	adds	r0, #92	@ 0x5c
 801daa2:	f000 f931 	bl	801dd08 <memset>
 801daa6:	4b0d      	ldr	r3, [pc, #52]	@ (801dadc <std+0x58>)
 801daa8:	6263      	str	r3, [r4, #36]	@ 0x24
 801daaa:	4b0d      	ldr	r3, [pc, #52]	@ (801dae0 <std+0x5c>)
 801daac:	62a3      	str	r3, [r4, #40]	@ 0x28
 801daae:	4b0d      	ldr	r3, [pc, #52]	@ (801dae4 <std+0x60>)
 801dab0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801dab2:	4b0d      	ldr	r3, [pc, #52]	@ (801dae8 <std+0x64>)
 801dab4:	6323      	str	r3, [r4, #48]	@ 0x30
 801dab6:	4b0d      	ldr	r3, [pc, #52]	@ (801daec <std+0x68>)
 801dab8:	6224      	str	r4, [r4, #32]
 801daba:	429c      	cmp	r4, r3
 801dabc:	d006      	beq.n	801dacc <std+0x48>
 801dabe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801dac2:	4294      	cmp	r4, r2
 801dac4:	d002      	beq.n	801dacc <std+0x48>
 801dac6:	33d0      	adds	r3, #208	@ 0xd0
 801dac8:	429c      	cmp	r4, r3
 801daca:	d105      	bne.n	801dad8 <std+0x54>
 801dacc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801dad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dad4:	f000 b994 	b.w	801de00 <__retarget_lock_init_recursive>
 801dad8:	bd10      	pop	{r4, pc}
 801dada:	bf00      	nop
 801dadc:	0801dc09 	.word	0x0801dc09
 801dae0:	0801dc2b 	.word	0x0801dc2b
 801dae4:	0801dc63 	.word	0x0801dc63
 801dae8:	0801dc87 	.word	0x0801dc87
 801daec:	20002540 	.word	0x20002540

0801daf0 <stdio_exit_handler>:
 801daf0:	4a02      	ldr	r2, [pc, #8]	@ (801dafc <stdio_exit_handler+0xc>)
 801daf2:	4903      	ldr	r1, [pc, #12]	@ (801db00 <stdio_exit_handler+0x10>)
 801daf4:	4803      	ldr	r0, [pc, #12]	@ (801db04 <stdio_exit_handler+0x14>)
 801daf6:	f000 b869 	b.w	801dbcc <_fwalk_sglue>
 801dafa:	bf00      	nop
 801dafc:	20000140 	.word	0x20000140
 801db00:	0801f759 	.word	0x0801f759
 801db04:	20000150 	.word	0x20000150

0801db08 <cleanup_stdio>:
 801db08:	6841      	ldr	r1, [r0, #4]
 801db0a:	4b0c      	ldr	r3, [pc, #48]	@ (801db3c <cleanup_stdio+0x34>)
 801db0c:	4299      	cmp	r1, r3
 801db0e:	b510      	push	{r4, lr}
 801db10:	4604      	mov	r4, r0
 801db12:	d001      	beq.n	801db18 <cleanup_stdio+0x10>
 801db14:	f001 fe20 	bl	801f758 <_fflush_r>
 801db18:	68a1      	ldr	r1, [r4, #8]
 801db1a:	4b09      	ldr	r3, [pc, #36]	@ (801db40 <cleanup_stdio+0x38>)
 801db1c:	4299      	cmp	r1, r3
 801db1e:	d002      	beq.n	801db26 <cleanup_stdio+0x1e>
 801db20:	4620      	mov	r0, r4
 801db22:	f001 fe19 	bl	801f758 <_fflush_r>
 801db26:	68e1      	ldr	r1, [r4, #12]
 801db28:	4b06      	ldr	r3, [pc, #24]	@ (801db44 <cleanup_stdio+0x3c>)
 801db2a:	4299      	cmp	r1, r3
 801db2c:	d004      	beq.n	801db38 <cleanup_stdio+0x30>
 801db2e:	4620      	mov	r0, r4
 801db30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db34:	f001 be10 	b.w	801f758 <_fflush_r>
 801db38:	bd10      	pop	{r4, pc}
 801db3a:	bf00      	nop
 801db3c:	20002540 	.word	0x20002540
 801db40:	200025a8 	.word	0x200025a8
 801db44:	20002610 	.word	0x20002610

0801db48 <global_stdio_init.part.0>:
 801db48:	b510      	push	{r4, lr}
 801db4a:	4b0b      	ldr	r3, [pc, #44]	@ (801db78 <global_stdio_init.part.0+0x30>)
 801db4c:	4c0b      	ldr	r4, [pc, #44]	@ (801db7c <global_stdio_init.part.0+0x34>)
 801db4e:	4a0c      	ldr	r2, [pc, #48]	@ (801db80 <global_stdio_init.part.0+0x38>)
 801db50:	601a      	str	r2, [r3, #0]
 801db52:	4620      	mov	r0, r4
 801db54:	2200      	movs	r2, #0
 801db56:	2104      	movs	r1, #4
 801db58:	f7ff ff94 	bl	801da84 <std>
 801db5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801db60:	2201      	movs	r2, #1
 801db62:	2109      	movs	r1, #9
 801db64:	f7ff ff8e 	bl	801da84 <std>
 801db68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801db6c:	2202      	movs	r2, #2
 801db6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db72:	2112      	movs	r1, #18
 801db74:	f7ff bf86 	b.w	801da84 <std>
 801db78:	20002678 	.word	0x20002678
 801db7c:	20002540 	.word	0x20002540
 801db80:	0801daf1 	.word	0x0801daf1

0801db84 <__sfp_lock_acquire>:
 801db84:	4801      	ldr	r0, [pc, #4]	@ (801db8c <__sfp_lock_acquire+0x8>)
 801db86:	f000 b93c 	b.w	801de02 <__retarget_lock_acquire_recursive>
 801db8a:	bf00      	nop
 801db8c:	20002681 	.word	0x20002681

0801db90 <__sfp_lock_release>:
 801db90:	4801      	ldr	r0, [pc, #4]	@ (801db98 <__sfp_lock_release+0x8>)
 801db92:	f000 b937 	b.w	801de04 <__retarget_lock_release_recursive>
 801db96:	bf00      	nop
 801db98:	20002681 	.word	0x20002681

0801db9c <__sinit>:
 801db9c:	b510      	push	{r4, lr}
 801db9e:	4604      	mov	r4, r0
 801dba0:	f7ff fff0 	bl	801db84 <__sfp_lock_acquire>
 801dba4:	6a23      	ldr	r3, [r4, #32]
 801dba6:	b11b      	cbz	r3, 801dbb0 <__sinit+0x14>
 801dba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbac:	f7ff bff0 	b.w	801db90 <__sfp_lock_release>
 801dbb0:	4b04      	ldr	r3, [pc, #16]	@ (801dbc4 <__sinit+0x28>)
 801dbb2:	6223      	str	r3, [r4, #32]
 801dbb4:	4b04      	ldr	r3, [pc, #16]	@ (801dbc8 <__sinit+0x2c>)
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d1f5      	bne.n	801dba8 <__sinit+0xc>
 801dbbc:	f7ff ffc4 	bl	801db48 <global_stdio_init.part.0>
 801dbc0:	e7f2      	b.n	801dba8 <__sinit+0xc>
 801dbc2:	bf00      	nop
 801dbc4:	0801db09 	.word	0x0801db09
 801dbc8:	20002678 	.word	0x20002678

0801dbcc <_fwalk_sglue>:
 801dbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbd0:	4607      	mov	r7, r0
 801dbd2:	4688      	mov	r8, r1
 801dbd4:	4614      	mov	r4, r2
 801dbd6:	2600      	movs	r6, #0
 801dbd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dbdc:	f1b9 0901 	subs.w	r9, r9, #1
 801dbe0:	d505      	bpl.n	801dbee <_fwalk_sglue+0x22>
 801dbe2:	6824      	ldr	r4, [r4, #0]
 801dbe4:	2c00      	cmp	r4, #0
 801dbe6:	d1f7      	bne.n	801dbd8 <_fwalk_sglue+0xc>
 801dbe8:	4630      	mov	r0, r6
 801dbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbee:	89ab      	ldrh	r3, [r5, #12]
 801dbf0:	2b01      	cmp	r3, #1
 801dbf2:	d907      	bls.n	801dc04 <_fwalk_sglue+0x38>
 801dbf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dbf8:	3301      	adds	r3, #1
 801dbfa:	d003      	beq.n	801dc04 <_fwalk_sglue+0x38>
 801dbfc:	4629      	mov	r1, r5
 801dbfe:	4638      	mov	r0, r7
 801dc00:	47c0      	blx	r8
 801dc02:	4306      	orrs	r6, r0
 801dc04:	3568      	adds	r5, #104	@ 0x68
 801dc06:	e7e9      	b.n	801dbdc <_fwalk_sglue+0x10>

0801dc08 <__sread>:
 801dc08:	b510      	push	{r4, lr}
 801dc0a:	460c      	mov	r4, r1
 801dc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc10:	f000 f8a8 	bl	801dd64 <_read_r>
 801dc14:	2800      	cmp	r0, #0
 801dc16:	bfab      	itete	ge
 801dc18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801dc1a:	89a3      	ldrhlt	r3, [r4, #12]
 801dc1c:	181b      	addge	r3, r3, r0
 801dc1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801dc22:	bfac      	ite	ge
 801dc24:	6563      	strge	r3, [r4, #84]	@ 0x54
 801dc26:	81a3      	strhlt	r3, [r4, #12]
 801dc28:	bd10      	pop	{r4, pc}

0801dc2a <__swrite>:
 801dc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc2e:	461f      	mov	r7, r3
 801dc30:	898b      	ldrh	r3, [r1, #12]
 801dc32:	05db      	lsls	r3, r3, #23
 801dc34:	4605      	mov	r5, r0
 801dc36:	460c      	mov	r4, r1
 801dc38:	4616      	mov	r6, r2
 801dc3a:	d505      	bpl.n	801dc48 <__swrite+0x1e>
 801dc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc40:	2302      	movs	r3, #2
 801dc42:	2200      	movs	r2, #0
 801dc44:	f000 f87c 	bl	801dd40 <_lseek_r>
 801dc48:	89a3      	ldrh	r3, [r4, #12]
 801dc4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801dc52:	81a3      	strh	r3, [r4, #12]
 801dc54:	4632      	mov	r2, r6
 801dc56:	463b      	mov	r3, r7
 801dc58:	4628      	mov	r0, r5
 801dc5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dc5e:	f000 b893 	b.w	801dd88 <_write_r>

0801dc62 <__sseek>:
 801dc62:	b510      	push	{r4, lr}
 801dc64:	460c      	mov	r4, r1
 801dc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc6a:	f000 f869 	bl	801dd40 <_lseek_r>
 801dc6e:	1c43      	adds	r3, r0, #1
 801dc70:	89a3      	ldrh	r3, [r4, #12]
 801dc72:	bf15      	itete	ne
 801dc74:	6560      	strne	r0, [r4, #84]	@ 0x54
 801dc76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801dc7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801dc7e:	81a3      	strheq	r3, [r4, #12]
 801dc80:	bf18      	it	ne
 801dc82:	81a3      	strhne	r3, [r4, #12]
 801dc84:	bd10      	pop	{r4, pc}

0801dc86 <__sclose>:
 801dc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc8a:	f000 b849 	b.w	801dd20 <_close_r>

0801dc8e <_vsniprintf_r>:
 801dc8e:	b530      	push	{r4, r5, lr}
 801dc90:	4614      	mov	r4, r2
 801dc92:	2c00      	cmp	r4, #0
 801dc94:	b09b      	sub	sp, #108	@ 0x6c
 801dc96:	4605      	mov	r5, r0
 801dc98:	461a      	mov	r2, r3
 801dc9a:	da05      	bge.n	801dca8 <_vsniprintf_r+0x1a>
 801dc9c:	238b      	movs	r3, #139	@ 0x8b
 801dc9e:	6003      	str	r3, [r0, #0]
 801dca0:	f04f 30ff 	mov.w	r0, #4294967295
 801dca4:	b01b      	add	sp, #108	@ 0x6c
 801dca6:	bd30      	pop	{r4, r5, pc}
 801dca8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801dcac:	f8ad 300c 	strh.w	r3, [sp, #12]
 801dcb0:	f04f 0300 	mov.w	r3, #0
 801dcb4:	9319      	str	r3, [sp, #100]	@ 0x64
 801dcb6:	bf14      	ite	ne
 801dcb8:	f104 33ff 	addne.w	r3, r4, #4294967295
 801dcbc:	4623      	moveq	r3, r4
 801dcbe:	9302      	str	r3, [sp, #8]
 801dcc0:	9305      	str	r3, [sp, #20]
 801dcc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801dcc6:	9100      	str	r1, [sp, #0]
 801dcc8:	9104      	str	r1, [sp, #16]
 801dcca:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dcce:	4669      	mov	r1, sp
 801dcd0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801dcd2:	f001 fbc5 	bl	801f460 <_svfiprintf_r>
 801dcd6:	1c43      	adds	r3, r0, #1
 801dcd8:	bfbc      	itt	lt
 801dcda:	238b      	movlt	r3, #139	@ 0x8b
 801dcdc:	602b      	strlt	r3, [r5, #0]
 801dcde:	2c00      	cmp	r4, #0
 801dce0:	d0e0      	beq.n	801dca4 <_vsniprintf_r+0x16>
 801dce2:	9b00      	ldr	r3, [sp, #0]
 801dce4:	2200      	movs	r2, #0
 801dce6:	701a      	strb	r2, [r3, #0]
 801dce8:	e7dc      	b.n	801dca4 <_vsniprintf_r+0x16>
	...

0801dcec <vsniprintf>:
 801dcec:	b507      	push	{r0, r1, r2, lr}
 801dcee:	9300      	str	r3, [sp, #0]
 801dcf0:	4613      	mov	r3, r2
 801dcf2:	460a      	mov	r2, r1
 801dcf4:	4601      	mov	r1, r0
 801dcf6:	4803      	ldr	r0, [pc, #12]	@ (801dd04 <vsniprintf+0x18>)
 801dcf8:	6800      	ldr	r0, [r0, #0]
 801dcfa:	f7ff ffc8 	bl	801dc8e <_vsniprintf_r>
 801dcfe:	b003      	add	sp, #12
 801dd00:	f85d fb04 	ldr.w	pc, [sp], #4
 801dd04:	2000014c 	.word	0x2000014c

0801dd08 <memset>:
 801dd08:	4402      	add	r2, r0
 801dd0a:	4603      	mov	r3, r0
 801dd0c:	4293      	cmp	r3, r2
 801dd0e:	d100      	bne.n	801dd12 <memset+0xa>
 801dd10:	4770      	bx	lr
 801dd12:	f803 1b01 	strb.w	r1, [r3], #1
 801dd16:	e7f9      	b.n	801dd0c <memset+0x4>

0801dd18 <_localeconv_r>:
 801dd18:	4800      	ldr	r0, [pc, #0]	@ (801dd1c <_localeconv_r+0x4>)
 801dd1a:	4770      	bx	lr
 801dd1c:	2000028c 	.word	0x2000028c

0801dd20 <_close_r>:
 801dd20:	b538      	push	{r3, r4, r5, lr}
 801dd22:	4d06      	ldr	r5, [pc, #24]	@ (801dd3c <_close_r+0x1c>)
 801dd24:	2300      	movs	r3, #0
 801dd26:	4604      	mov	r4, r0
 801dd28:	4608      	mov	r0, r1
 801dd2a:	602b      	str	r3, [r5, #0]
 801dd2c:	f7e4 fece 	bl	8002acc <_close>
 801dd30:	1c43      	adds	r3, r0, #1
 801dd32:	d102      	bne.n	801dd3a <_close_r+0x1a>
 801dd34:	682b      	ldr	r3, [r5, #0]
 801dd36:	b103      	cbz	r3, 801dd3a <_close_r+0x1a>
 801dd38:	6023      	str	r3, [r4, #0]
 801dd3a:	bd38      	pop	{r3, r4, r5, pc}
 801dd3c:	2000267c 	.word	0x2000267c

0801dd40 <_lseek_r>:
 801dd40:	b538      	push	{r3, r4, r5, lr}
 801dd42:	4d07      	ldr	r5, [pc, #28]	@ (801dd60 <_lseek_r+0x20>)
 801dd44:	4604      	mov	r4, r0
 801dd46:	4608      	mov	r0, r1
 801dd48:	4611      	mov	r1, r2
 801dd4a:	2200      	movs	r2, #0
 801dd4c:	602a      	str	r2, [r5, #0]
 801dd4e:	461a      	mov	r2, r3
 801dd50:	f7e4 fee0 	bl	8002b14 <_lseek>
 801dd54:	1c43      	adds	r3, r0, #1
 801dd56:	d102      	bne.n	801dd5e <_lseek_r+0x1e>
 801dd58:	682b      	ldr	r3, [r5, #0]
 801dd5a:	b103      	cbz	r3, 801dd5e <_lseek_r+0x1e>
 801dd5c:	6023      	str	r3, [r4, #0]
 801dd5e:	bd38      	pop	{r3, r4, r5, pc}
 801dd60:	2000267c 	.word	0x2000267c

0801dd64 <_read_r>:
 801dd64:	b538      	push	{r3, r4, r5, lr}
 801dd66:	4d07      	ldr	r5, [pc, #28]	@ (801dd84 <_read_r+0x20>)
 801dd68:	4604      	mov	r4, r0
 801dd6a:	4608      	mov	r0, r1
 801dd6c:	4611      	mov	r1, r2
 801dd6e:	2200      	movs	r2, #0
 801dd70:	602a      	str	r2, [r5, #0]
 801dd72:	461a      	mov	r2, r3
 801dd74:	f7e4 fe71 	bl	8002a5a <_read>
 801dd78:	1c43      	adds	r3, r0, #1
 801dd7a:	d102      	bne.n	801dd82 <_read_r+0x1e>
 801dd7c:	682b      	ldr	r3, [r5, #0]
 801dd7e:	b103      	cbz	r3, 801dd82 <_read_r+0x1e>
 801dd80:	6023      	str	r3, [r4, #0]
 801dd82:	bd38      	pop	{r3, r4, r5, pc}
 801dd84:	2000267c 	.word	0x2000267c

0801dd88 <_write_r>:
 801dd88:	b538      	push	{r3, r4, r5, lr}
 801dd8a:	4d07      	ldr	r5, [pc, #28]	@ (801dda8 <_write_r+0x20>)
 801dd8c:	4604      	mov	r4, r0
 801dd8e:	4608      	mov	r0, r1
 801dd90:	4611      	mov	r1, r2
 801dd92:	2200      	movs	r2, #0
 801dd94:	602a      	str	r2, [r5, #0]
 801dd96:	461a      	mov	r2, r3
 801dd98:	f7e4 fe7c 	bl	8002a94 <_write>
 801dd9c:	1c43      	adds	r3, r0, #1
 801dd9e:	d102      	bne.n	801dda6 <_write_r+0x1e>
 801dda0:	682b      	ldr	r3, [r5, #0]
 801dda2:	b103      	cbz	r3, 801dda6 <_write_r+0x1e>
 801dda4:	6023      	str	r3, [r4, #0]
 801dda6:	bd38      	pop	{r3, r4, r5, pc}
 801dda8:	2000267c 	.word	0x2000267c

0801ddac <__errno>:
 801ddac:	4b01      	ldr	r3, [pc, #4]	@ (801ddb4 <__errno+0x8>)
 801ddae:	6818      	ldr	r0, [r3, #0]
 801ddb0:	4770      	bx	lr
 801ddb2:	bf00      	nop
 801ddb4:	2000014c 	.word	0x2000014c

0801ddb8 <__libc_init_array>:
 801ddb8:	b570      	push	{r4, r5, r6, lr}
 801ddba:	4d0d      	ldr	r5, [pc, #52]	@ (801ddf0 <__libc_init_array+0x38>)
 801ddbc:	4c0d      	ldr	r4, [pc, #52]	@ (801ddf4 <__libc_init_array+0x3c>)
 801ddbe:	1b64      	subs	r4, r4, r5
 801ddc0:	10a4      	asrs	r4, r4, #2
 801ddc2:	2600      	movs	r6, #0
 801ddc4:	42a6      	cmp	r6, r4
 801ddc6:	d109      	bne.n	801dddc <__libc_init_array+0x24>
 801ddc8:	4d0b      	ldr	r5, [pc, #44]	@ (801ddf8 <__libc_init_array+0x40>)
 801ddca:	4c0c      	ldr	r4, [pc, #48]	@ (801ddfc <__libc_init_array+0x44>)
 801ddcc:	f002 f8e0 	bl	801ff90 <_init>
 801ddd0:	1b64      	subs	r4, r4, r5
 801ddd2:	10a4      	asrs	r4, r4, #2
 801ddd4:	2600      	movs	r6, #0
 801ddd6:	42a6      	cmp	r6, r4
 801ddd8:	d105      	bne.n	801dde6 <__libc_init_array+0x2e>
 801ddda:	bd70      	pop	{r4, r5, r6, pc}
 801dddc:	f855 3b04 	ldr.w	r3, [r5], #4
 801dde0:	4798      	blx	r3
 801dde2:	3601      	adds	r6, #1
 801dde4:	e7ee      	b.n	801ddc4 <__libc_init_array+0xc>
 801dde6:	f855 3b04 	ldr.w	r3, [r5], #4
 801ddea:	4798      	blx	r3
 801ddec:	3601      	adds	r6, #1
 801ddee:	e7f2      	b.n	801ddd6 <__libc_init_array+0x1e>
 801ddf0:	08021284 	.word	0x08021284
 801ddf4:	08021284 	.word	0x08021284
 801ddf8:	08021284 	.word	0x08021284
 801ddfc:	08021288 	.word	0x08021288

0801de00 <__retarget_lock_init_recursive>:
 801de00:	4770      	bx	lr

0801de02 <__retarget_lock_acquire_recursive>:
 801de02:	4770      	bx	lr

0801de04 <__retarget_lock_release_recursive>:
 801de04:	4770      	bx	lr

0801de06 <quorem>:
 801de06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de0a:	6903      	ldr	r3, [r0, #16]
 801de0c:	690c      	ldr	r4, [r1, #16]
 801de0e:	42a3      	cmp	r3, r4
 801de10:	4607      	mov	r7, r0
 801de12:	db7e      	blt.n	801df12 <quorem+0x10c>
 801de14:	3c01      	subs	r4, #1
 801de16:	f101 0814 	add.w	r8, r1, #20
 801de1a:	00a3      	lsls	r3, r4, #2
 801de1c:	f100 0514 	add.w	r5, r0, #20
 801de20:	9300      	str	r3, [sp, #0]
 801de22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801de26:	9301      	str	r3, [sp, #4]
 801de28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801de2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801de30:	3301      	adds	r3, #1
 801de32:	429a      	cmp	r2, r3
 801de34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801de38:	fbb2 f6f3 	udiv	r6, r2, r3
 801de3c:	d32e      	bcc.n	801de9c <quorem+0x96>
 801de3e:	f04f 0a00 	mov.w	sl, #0
 801de42:	46c4      	mov	ip, r8
 801de44:	46ae      	mov	lr, r5
 801de46:	46d3      	mov	fp, sl
 801de48:	f85c 3b04 	ldr.w	r3, [ip], #4
 801de4c:	b298      	uxth	r0, r3
 801de4e:	fb06 a000 	mla	r0, r6, r0, sl
 801de52:	0c02      	lsrs	r2, r0, #16
 801de54:	0c1b      	lsrs	r3, r3, #16
 801de56:	fb06 2303 	mla	r3, r6, r3, r2
 801de5a:	f8de 2000 	ldr.w	r2, [lr]
 801de5e:	b280      	uxth	r0, r0
 801de60:	b292      	uxth	r2, r2
 801de62:	1a12      	subs	r2, r2, r0
 801de64:	445a      	add	r2, fp
 801de66:	f8de 0000 	ldr.w	r0, [lr]
 801de6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801de6e:	b29b      	uxth	r3, r3
 801de70:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801de74:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801de78:	b292      	uxth	r2, r2
 801de7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801de7e:	45e1      	cmp	r9, ip
 801de80:	f84e 2b04 	str.w	r2, [lr], #4
 801de84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801de88:	d2de      	bcs.n	801de48 <quorem+0x42>
 801de8a:	9b00      	ldr	r3, [sp, #0]
 801de8c:	58eb      	ldr	r3, [r5, r3]
 801de8e:	b92b      	cbnz	r3, 801de9c <quorem+0x96>
 801de90:	9b01      	ldr	r3, [sp, #4]
 801de92:	3b04      	subs	r3, #4
 801de94:	429d      	cmp	r5, r3
 801de96:	461a      	mov	r2, r3
 801de98:	d32f      	bcc.n	801defa <quorem+0xf4>
 801de9a:	613c      	str	r4, [r7, #16]
 801de9c:	4638      	mov	r0, r7
 801de9e:	f001 f97d 	bl	801f19c <__mcmp>
 801dea2:	2800      	cmp	r0, #0
 801dea4:	db25      	blt.n	801def2 <quorem+0xec>
 801dea6:	4629      	mov	r1, r5
 801dea8:	2000      	movs	r0, #0
 801deaa:	f858 2b04 	ldr.w	r2, [r8], #4
 801deae:	f8d1 c000 	ldr.w	ip, [r1]
 801deb2:	fa1f fe82 	uxth.w	lr, r2
 801deb6:	fa1f f38c 	uxth.w	r3, ip
 801deba:	eba3 030e 	sub.w	r3, r3, lr
 801debe:	4403      	add	r3, r0
 801dec0:	0c12      	lsrs	r2, r2, #16
 801dec2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801dec6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801deca:	b29b      	uxth	r3, r3
 801decc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ded0:	45c1      	cmp	r9, r8
 801ded2:	f841 3b04 	str.w	r3, [r1], #4
 801ded6:	ea4f 4022 	mov.w	r0, r2, asr #16
 801deda:	d2e6      	bcs.n	801deaa <quorem+0xa4>
 801dedc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801dee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801dee4:	b922      	cbnz	r2, 801def0 <quorem+0xea>
 801dee6:	3b04      	subs	r3, #4
 801dee8:	429d      	cmp	r5, r3
 801deea:	461a      	mov	r2, r3
 801deec:	d30b      	bcc.n	801df06 <quorem+0x100>
 801deee:	613c      	str	r4, [r7, #16]
 801def0:	3601      	adds	r6, #1
 801def2:	4630      	mov	r0, r6
 801def4:	b003      	add	sp, #12
 801def6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801defa:	6812      	ldr	r2, [r2, #0]
 801defc:	3b04      	subs	r3, #4
 801defe:	2a00      	cmp	r2, #0
 801df00:	d1cb      	bne.n	801de9a <quorem+0x94>
 801df02:	3c01      	subs	r4, #1
 801df04:	e7c6      	b.n	801de94 <quorem+0x8e>
 801df06:	6812      	ldr	r2, [r2, #0]
 801df08:	3b04      	subs	r3, #4
 801df0a:	2a00      	cmp	r2, #0
 801df0c:	d1ef      	bne.n	801deee <quorem+0xe8>
 801df0e:	3c01      	subs	r4, #1
 801df10:	e7ea      	b.n	801dee8 <quorem+0xe2>
 801df12:	2000      	movs	r0, #0
 801df14:	e7ee      	b.n	801def4 <quorem+0xee>
	...

0801df18 <_dtoa_r>:
 801df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df1c:	69c7      	ldr	r7, [r0, #28]
 801df1e:	b097      	sub	sp, #92	@ 0x5c
 801df20:	4614      	mov	r4, r2
 801df22:	461d      	mov	r5, r3
 801df24:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801df28:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801df2a:	4681      	mov	r9, r0
 801df2c:	b97f      	cbnz	r7, 801df4e <_dtoa_r+0x36>
 801df2e:	2010      	movs	r0, #16
 801df30:	f000 fe0c 	bl	801eb4c <malloc>
 801df34:	4602      	mov	r2, r0
 801df36:	f8c9 001c 	str.w	r0, [r9, #28]
 801df3a:	b920      	cbnz	r0, 801df46 <_dtoa_r+0x2e>
 801df3c:	4baa      	ldr	r3, [pc, #680]	@ (801e1e8 <_dtoa_r+0x2d0>)
 801df3e:	21ef      	movs	r1, #239	@ 0xef
 801df40:	48aa      	ldr	r0, [pc, #680]	@ (801e1ec <_dtoa_r+0x2d4>)
 801df42:	f001 fc69 	bl	801f818 <__assert_func>
 801df46:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801df4a:	6007      	str	r7, [r0, #0]
 801df4c:	60c7      	str	r7, [r0, #12]
 801df4e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801df52:	6819      	ldr	r1, [r3, #0]
 801df54:	b159      	cbz	r1, 801df6e <_dtoa_r+0x56>
 801df56:	685a      	ldr	r2, [r3, #4]
 801df58:	604a      	str	r2, [r1, #4]
 801df5a:	2301      	movs	r3, #1
 801df5c:	4093      	lsls	r3, r2
 801df5e:	608b      	str	r3, [r1, #8]
 801df60:	4648      	mov	r0, r9
 801df62:	f000 fee9 	bl	801ed38 <_Bfree>
 801df66:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801df6a:	2200      	movs	r2, #0
 801df6c:	601a      	str	r2, [r3, #0]
 801df6e:	1e2b      	subs	r3, r5, #0
 801df70:	bfb9      	ittee	lt
 801df72:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801df76:	9307      	strlt	r3, [sp, #28]
 801df78:	2300      	movge	r3, #0
 801df7a:	6033      	strge	r3, [r6, #0]
 801df7c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801df80:	4b9b      	ldr	r3, [pc, #620]	@ (801e1f0 <_dtoa_r+0x2d8>)
 801df82:	bfbc      	itt	lt
 801df84:	2201      	movlt	r2, #1
 801df86:	6032      	strlt	r2, [r6, #0]
 801df88:	ea33 0308 	bics.w	r3, r3, r8
 801df8c:	d112      	bne.n	801dfb4 <_dtoa_r+0x9c>
 801df8e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801df90:	f242 730f 	movw	r3, #9999	@ 0x270f
 801df94:	6013      	str	r3, [r2, #0]
 801df96:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801df9a:	4323      	orrs	r3, r4
 801df9c:	f000 855b 	beq.w	801ea56 <_dtoa_r+0xb3e>
 801dfa0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dfa2:	f8df a250 	ldr.w	sl, [pc, #592]	@ 801e1f4 <_dtoa_r+0x2dc>
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	f000 855d 	beq.w	801ea66 <_dtoa_r+0xb4e>
 801dfac:	f10a 0303 	add.w	r3, sl, #3
 801dfb0:	f000 bd57 	b.w	801ea62 <_dtoa_r+0xb4a>
 801dfb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801dfb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801dfbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dfc0:	2200      	movs	r2, #0
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	f7e2 fd58 	bl	8000a78 <__aeabi_dcmpeq>
 801dfc8:	4607      	mov	r7, r0
 801dfca:	b158      	cbz	r0, 801dfe4 <_dtoa_r+0xcc>
 801dfcc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801dfce:	2301      	movs	r3, #1
 801dfd0:	6013      	str	r3, [r2, #0]
 801dfd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dfd4:	b113      	cbz	r3, 801dfdc <_dtoa_r+0xc4>
 801dfd6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801dfd8:	4b87      	ldr	r3, [pc, #540]	@ (801e1f8 <_dtoa_r+0x2e0>)
 801dfda:	6013      	str	r3, [r2, #0]
 801dfdc:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801e1fc <_dtoa_r+0x2e4>
 801dfe0:	f000 bd41 	b.w	801ea66 <_dtoa_r+0xb4e>
 801dfe4:	ab14      	add	r3, sp, #80	@ 0x50
 801dfe6:	9301      	str	r3, [sp, #4]
 801dfe8:	ab15      	add	r3, sp, #84	@ 0x54
 801dfea:	9300      	str	r3, [sp, #0]
 801dfec:	4648      	mov	r0, r9
 801dfee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801dff2:	f001 f981 	bl	801f2f8 <__d2b>
 801dff6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801dffa:	9003      	str	r0, [sp, #12]
 801dffc:	2e00      	cmp	r6, #0
 801dffe:	d077      	beq.n	801e0f0 <_dtoa_r+0x1d8>
 801e000:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e002:	9712      	str	r7, [sp, #72]	@ 0x48
 801e004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e00c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e010:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e014:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e018:	4619      	mov	r1, r3
 801e01a:	2200      	movs	r2, #0
 801e01c:	4b78      	ldr	r3, [pc, #480]	@ (801e200 <_dtoa_r+0x2e8>)
 801e01e:	f7e2 f90b 	bl	8000238 <__aeabi_dsub>
 801e022:	a36b      	add	r3, pc, #428	@ (adr r3, 801e1d0 <_dtoa_r+0x2b8>)
 801e024:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e028:	f7e2 fabe 	bl	80005a8 <__aeabi_dmul>
 801e02c:	a36a      	add	r3, pc, #424	@ (adr r3, 801e1d8 <_dtoa_r+0x2c0>)
 801e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e032:	f7e2 f903 	bl	800023c <__adddf3>
 801e036:	4604      	mov	r4, r0
 801e038:	4630      	mov	r0, r6
 801e03a:	460d      	mov	r5, r1
 801e03c:	f7e2 fa4a 	bl	80004d4 <__aeabi_i2d>
 801e040:	a367      	add	r3, pc, #412	@ (adr r3, 801e1e0 <_dtoa_r+0x2c8>)
 801e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e046:	f7e2 faaf 	bl	80005a8 <__aeabi_dmul>
 801e04a:	4602      	mov	r2, r0
 801e04c:	460b      	mov	r3, r1
 801e04e:	4620      	mov	r0, r4
 801e050:	4629      	mov	r1, r5
 801e052:	f7e2 f8f3 	bl	800023c <__adddf3>
 801e056:	4604      	mov	r4, r0
 801e058:	460d      	mov	r5, r1
 801e05a:	f7e2 fd55 	bl	8000b08 <__aeabi_d2iz>
 801e05e:	2200      	movs	r2, #0
 801e060:	4607      	mov	r7, r0
 801e062:	2300      	movs	r3, #0
 801e064:	4620      	mov	r0, r4
 801e066:	4629      	mov	r1, r5
 801e068:	f7e2 fd10 	bl	8000a8c <__aeabi_dcmplt>
 801e06c:	b140      	cbz	r0, 801e080 <_dtoa_r+0x168>
 801e06e:	4638      	mov	r0, r7
 801e070:	f7e2 fa30 	bl	80004d4 <__aeabi_i2d>
 801e074:	4622      	mov	r2, r4
 801e076:	462b      	mov	r3, r5
 801e078:	f7e2 fcfe 	bl	8000a78 <__aeabi_dcmpeq>
 801e07c:	b900      	cbnz	r0, 801e080 <_dtoa_r+0x168>
 801e07e:	3f01      	subs	r7, #1
 801e080:	2f16      	cmp	r7, #22
 801e082:	d853      	bhi.n	801e12c <_dtoa_r+0x214>
 801e084:	4b5f      	ldr	r3, [pc, #380]	@ (801e204 <_dtoa_r+0x2ec>)
 801e086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e08e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e092:	f7e2 fcfb 	bl	8000a8c <__aeabi_dcmplt>
 801e096:	2800      	cmp	r0, #0
 801e098:	d04a      	beq.n	801e130 <_dtoa_r+0x218>
 801e09a:	3f01      	subs	r7, #1
 801e09c:	2300      	movs	r3, #0
 801e09e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e0a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e0a2:	1b9b      	subs	r3, r3, r6
 801e0a4:	1e5a      	subs	r2, r3, #1
 801e0a6:	bf45      	ittet	mi
 801e0a8:	f1c3 0301 	rsbmi	r3, r3, #1
 801e0ac:	9304      	strmi	r3, [sp, #16]
 801e0ae:	2300      	movpl	r3, #0
 801e0b0:	2300      	movmi	r3, #0
 801e0b2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e0b4:	bf54      	ite	pl
 801e0b6:	9304      	strpl	r3, [sp, #16]
 801e0b8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801e0ba:	2f00      	cmp	r7, #0
 801e0bc:	db3a      	blt.n	801e134 <_dtoa_r+0x21c>
 801e0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0c0:	970e      	str	r7, [sp, #56]	@ 0x38
 801e0c2:	443b      	add	r3, r7
 801e0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e0c6:	2300      	movs	r3, #0
 801e0c8:	930a      	str	r3, [sp, #40]	@ 0x28
 801e0ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e0cc:	2b09      	cmp	r3, #9
 801e0ce:	d864      	bhi.n	801e19a <_dtoa_r+0x282>
 801e0d0:	2b05      	cmp	r3, #5
 801e0d2:	bfc4      	itt	gt
 801e0d4:	3b04      	subgt	r3, #4
 801e0d6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801e0d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e0da:	f1a3 0302 	sub.w	r3, r3, #2
 801e0de:	bfcc      	ite	gt
 801e0e0:	2400      	movgt	r4, #0
 801e0e2:	2401      	movle	r4, #1
 801e0e4:	2b03      	cmp	r3, #3
 801e0e6:	d864      	bhi.n	801e1b2 <_dtoa_r+0x29a>
 801e0e8:	e8df f003 	tbb	[pc, r3]
 801e0ec:	2c385553 	.word	0x2c385553
 801e0f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801e0f4:	441e      	add	r6, r3
 801e0f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801e0fa:	2b20      	cmp	r3, #32
 801e0fc:	bfc1      	itttt	gt
 801e0fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801e102:	fa08 f803 	lslgt.w	r8, r8, r3
 801e106:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801e10a:	fa24 f303 	lsrgt.w	r3, r4, r3
 801e10e:	bfd6      	itet	le
 801e110:	f1c3 0320 	rsble	r3, r3, #32
 801e114:	ea48 0003 	orrgt.w	r0, r8, r3
 801e118:	fa04 f003 	lslle.w	r0, r4, r3
 801e11c:	f7e2 f9ca 	bl	80004b4 <__aeabi_ui2d>
 801e120:	2201      	movs	r2, #1
 801e122:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e126:	3e01      	subs	r6, #1
 801e128:	9212      	str	r2, [sp, #72]	@ 0x48
 801e12a:	e775      	b.n	801e018 <_dtoa_r+0x100>
 801e12c:	2301      	movs	r3, #1
 801e12e:	e7b6      	b.n	801e09e <_dtoa_r+0x186>
 801e130:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e132:	e7b5      	b.n	801e0a0 <_dtoa_r+0x188>
 801e134:	9b04      	ldr	r3, [sp, #16]
 801e136:	1bdb      	subs	r3, r3, r7
 801e138:	9304      	str	r3, [sp, #16]
 801e13a:	427b      	negs	r3, r7
 801e13c:	930a      	str	r3, [sp, #40]	@ 0x28
 801e13e:	2300      	movs	r3, #0
 801e140:	930e      	str	r3, [sp, #56]	@ 0x38
 801e142:	e7c2      	b.n	801e0ca <_dtoa_r+0x1b2>
 801e144:	2301      	movs	r3, #1
 801e146:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e148:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e14a:	eb07 0b03 	add.w	fp, r7, r3
 801e14e:	f10b 0301 	add.w	r3, fp, #1
 801e152:	2b01      	cmp	r3, #1
 801e154:	9308      	str	r3, [sp, #32]
 801e156:	bfb8      	it	lt
 801e158:	2301      	movlt	r3, #1
 801e15a:	e006      	b.n	801e16a <_dtoa_r+0x252>
 801e15c:	2301      	movs	r3, #1
 801e15e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e160:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e162:	2b00      	cmp	r3, #0
 801e164:	dd28      	ble.n	801e1b8 <_dtoa_r+0x2a0>
 801e166:	469b      	mov	fp, r3
 801e168:	9308      	str	r3, [sp, #32]
 801e16a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801e16e:	2100      	movs	r1, #0
 801e170:	2204      	movs	r2, #4
 801e172:	f102 0514 	add.w	r5, r2, #20
 801e176:	429d      	cmp	r5, r3
 801e178:	d926      	bls.n	801e1c8 <_dtoa_r+0x2b0>
 801e17a:	6041      	str	r1, [r0, #4]
 801e17c:	4648      	mov	r0, r9
 801e17e:	f000 fd9b 	bl	801ecb8 <_Balloc>
 801e182:	4682      	mov	sl, r0
 801e184:	2800      	cmp	r0, #0
 801e186:	d141      	bne.n	801e20c <_dtoa_r+0x2f4>
 801e188:	4b1f      	ldr	r3, [pc, #124]	@ (801e208 <_dtoa_r+0x2f0>)
 801e18a:	4602      	mov	r2, r0
 801e18c:	f240 11af 	movw	r1, #431	@ 0x1af
 801e190:	e6d6      	b.n	801df40 <_dtoa_r+0x28>
 801e192:	2300      	movs	r3, #0
 801e194:	e7e3      	b.n	801e15e <_dtoa_r+0x246>
 801e196:	2300      	movs	r3, #0
 801e198:	e7d5      	b.n	801e146 <_dtoa_r+0x22e>
 801e19a:	2401      	movs	r4, #1
 801e19c:	2300      	movs	r3, #0
 801e19e:	9320      	str	r3, [sp, #128]	@ 0x80
 801e1a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e1a2:	f04f 3bff 	mov.w	fp, #4294967295
 801e1a6:	2200      	movs	r2, #0
 801e1a8:	f8cd b020 	str.w	fp, [sp, #32]
 801e1ac:	2312      	movs	r3, #18
 801e1ae:	9221      	str	r2, [sp, #132]	@ 0x84
 801e1b0:	e7db      	b.n	801e16a <_dtoa_r+0x252>
 801e1b2:	2301      	movs	r3, #1
 801e1b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e1b6:	e7f4      	b.n	801e1a2 <_dtoa_r+0x28a>
 801e1b8:	f04f 0b01 	mov.w	fp, #1
 801e1bc:	f8cd b020 	str.w	fp, [sp, #32]
 801e1c0:	465b      	mov	r3, fp
 801e1c2:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 801e1c6:	e7d0      	b.n	801e16a <_dtoa_r+0x252>
 801e1c8:	3101      	adds	r1, #1
 801e1ca:	0052      	lsls	r2, r2, #1
 801e1cc:	e7d1      	b.n	801e172 <_dtoa_r+0x25a>
 801e1ce:	bf00      	nop
 801e1d0:	636f4361 	.word	0x636f4361
 801e1d4:	3fd287a7 	.word	0x3fd287a7
 801e1d8:	8b60c8b3 	.word	0x8b60c8b3
 801e1dc:	3fc68a28 	.word	0x3fc68a28
 801e1e0:	509f79fb 	.word	0x509f79fb
 801e1e4:	3fd34413 	.word	0x3fd34413
 801e1e8:	08020e71 	.word	0x08020e71
 801e1ec:	08020e88 	.word	0x08020e88
 801e1f0:	7ff00000 	.word	0x7ff00000
 801e1f4:	08020e6d 	.word	0x08020e6d
 801e1f8:	08020e41 	.word	0x08020e41
 801e1fc:	08020e40 	.word	0x08020e40
 801e200:	3ff80000 	.word	0x3ff80000
 801e204:	08020fd8 	.word	0x08020fd8
 801e208:	08020ee0 	.word	0x08020ee0
 801e20c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801e210:	6018      	str	r0, [r3, #0]
 801e212:	9b08      	ldr	r3, [sp, #32]
 801e214:	2b0e      	cmp	r3, #14
 801e216:	f200 80a1 	bhi.w	801e35c <_dtoa_r+0x444>
 801e21a:	2c00      	cmp	r4, #0
 801e21c:	f000 809e 	beq.w	801e35c <_dtoa_r+0x444>
 801e220:	2f00      	cmp	r7, #0
 801e222:	dd33      	ble.n	801e28c <_dtoa_r+0x374>
 801e224:	4b9c      	ldr	r3, [pc, #624]	@ (801e498 <_dtoa_r+0x580>)
 801e226:	f007 020f 	and.w	r2, r7, #15
 801e22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e22e:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e232:	05f8      	lsls	r0, r7, #23
 801e234:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 801e238:	ea4f 1427 	mov.w	r4, r7, asr #4
 801e23c:	d516      	bpl.n	801e26c <_dtoa_r+0x354>
 801e23e:	4b97      	ldr	r3, [pc, #604]	@ (801e49c <_dtoa_r+0x584>)
 801e240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e248:	f7e2 fad8 	bl	80007fc <__aeabi_ddiv>
 801e24c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e250:	f004 040f 	and.w	r4, r4, #15
 801e254:	2603      	movs	r6, #3
 801e256:	4d91      	ldr	r5, [pc, #580]	@ (801e49c <_dtoa_r+0x584>)
 801e258:	b954      	cbnz	r4, 801e270 <_dtoa_r+0x358>
 801e25a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e25e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e262:	f7e2 facb 	bl	80007fc <__aeabi_ddiv>
 801e266:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e26a:	e028      	b.n	801e2be <_dtoa_r+0x3a6>
 801e26c:	2602      	movs	r6, #2
 801e26e:	e7f2      	b.n	801e256 <_dtoa_r+0x33e>
 801e270:	07e1      	lsls	r1, r4, #31
 801e272:	d508      	bpl.n	801e286 <_dtoa_r+0x36e>
 801e274:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e278:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e27c:	f7e2 f994 	bl	80005a8 <__aeabi_dmul>
 801e280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e284:	3601      	adds	r6, #1
 801e286:	1064      	asrs	r4, r4, #1
 801e288:	3508      	adds	r5, #8
 801e28a:	e7e5      	b.n	801e258 <_dtoa_r+0x340>
 801e28c:	f000 80af 	beq.w	801e3ee <_dtoa_r+0x4d6>
 801e290:	427c      	negs	r4, r7
 801e292:	4b81      	ldr	r3, [pc, #516]	@ (801e498 <_dtoa_r+0x580>)
 801e294:	4d81      	ldr	r5, [pc, #516]	@ (801e49c <_dtoa_r+0x584>)
 801e296:	f004 020f 	and.w	r2, r4, #15
 801e29a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e2a6:	f7e2 f97f 	bl	80005a8 <__aeabi_dmul>
 801e2aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e2ae:	1124      	asrs	r4, r4, #4
 801e2b0:	2300      	movs	r3, #0
 801e2b2:	2602      	movs	r6, #2
 801e2b4:	2c00      	cmp	r4, #0
 801e2b6:	f040 808f 	bne.w	801e3d8 <_dtoa_r+0x4c0>
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	d1d3      	bne.n	801e266 <_dtoa_r+0x34e>
 801e2be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e2c0:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	f000 8094 	beq.w	801e3f2 <_dtoa_r+0x4da>
 801e2ca:	4b75      	ldr	r3, [pc, #468]	@ (801e4a0 <_dtoa_r+0x588>)
 801e2cc:	2200      	movs	r2, #0
 801e2ce:	4620      	mov	r0, r4
 801e2d0:	4629      	mov	r1, r5
 801e2d2:	f7e2 fbdb 	bl	8000a8c <__aeabi_dcmplt>
 801e2d6:	2800      	cmp	r0, #0
 801e2d8:	f000 808b 	beq.w	801e3f2 <_dtoa_r+0x4da>
 801e2dc:	9b08      	ldr	r3, [sp, #32]
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	f000 8087 	beq.w	801e3f2 <_dtoa_r+0x4da>
 801e2e4:	f1bb 0f00 	cmp.w	fp, #0
 801e2e8:	dd34      	ble.n	801e354 <_dtoa_r+0x43c>
 801e2ea:	4620      	mov	r0, r4
 801e2ec:	4b6d      	ldr	r3, [pc, #436]	@ (801e4a4 <_dtoa_r+0x58c>)
 801e2ee:	2200      	movs	r2, #0
 801e2f0:	4629      	mov	r1, r5
 801e2f2:	f7e2 f959 	bl	80005a8 <__aeabi_dmul>
 801e2f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e2fa:	f107 38ff 	add.w	r8, r7, #4294967295
 801e2fe:	3601      	adds	r6, #1
 801e300:	465c      	mov	r4, fp
 801e302:	4630      	mov	r0, r6
 801e304:	f7e2 f8e6 	bl	80004d4 <__aeabi_i2d>
 801e308:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e30c:	f7e2 f94c 	bl	80005a8 <__aeabi_dmul>
 801e310:	4b65      	ldr	r3, [pc, #404]	@ (801e4a8 <_dtoa_r+0x590>)
 801e312:	2200      	movs	r2, #0
 801e314:	f7e1 ff92 	bl	800023c <__adddf3>
 801e318:	4605      	mov	r5, r0
 801e31a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801e31e:	2c00      	cmp	r4, #0
 801e320:	d16a      	bne.n	801e3f8 <_dtoa_r+0x4e0>
 801e322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e326:	4b61      	ldr	r3, [pc, #388]	@ (801e4ac <_dtoa_r+0x594>)
 801e328:	2200      	movs	r2, #0
 801e32a:	f7e1 ff85 	bl	8000238 <__aeabi_dsub>
 801e32e:	4602      	mov	r2, r0
 801e330:	460b      	mov	r3, r1
 801e332:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e336:	462a      	mov	r2, r5
 801e338:	4633      	mov	r3, r6
 801e33a:	f7e2 fbc5 	bl	8000ac8 <__aeabi_dcmpgt>
 801e33e:	2800      	cmp	r0, #0
 801e340:	f040 8298 	bne.w	801e874 <_dtoa_r+0x95c>
 801e344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e348:	462a      	mov	r2, r5
 801e34a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e34e:	f7e2 fb9d 	bl	8000a8c <__aeabi_dcmplt>
 801e352:	bb38      	cbnz	r0, 801e3a4 <_dtoa_r+0x48c>
 801e354:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801e358:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801e35c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e35e:	2b00      	cmp	r3, #0
 801e360:	f2c0 8157 	blt.w	801e612 <_dtoa_r+0x6fa>
 801e364:	2f0e      	cmp	r7, #14
 801e366:	f300 8154 	bgt.w	801e612 <_dtoa_r+0x6fa>
 801e36a:	4b4b      	ldr	r3, [pc, #300]	@ (801e498 <_dtoa_r+0x580>)
 801e36c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e370:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e374:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801e378:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	f280 80e5 	bge.w	801e54a <_dtoa_r+0x632>
 801e380:	9b08      	ldr	r3, [sp, #32]
 801e382:	2b00      	cmp	r3, #0
 801e384:	f300 80e1 	bgt.w	801e54a <_dtoa_r+0x632>
 801e388:	d10c      	bne.n	801e3a4 <_dtoa_r+0x48c>
 801e38a:	4b48      	ldr	r3, [pc, #288]	@ (801e4ac <_dtoa_r+0x594>)
 801e38c:	2200      	movs	r2, #0
 801e38e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e392:	f7e2 f909 	bl	80005a8 <__aeabi_dmul>
 801e396:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e39a:	f7e2 fb8b 	bl	8000ab4 <__aeabi_dcmpge>
 801e39e:	2800      	cmp	r0, #0
 801e3a0:	f000 8266 	beq.w	801e870 <_dtoa_r+0x958>
 801e3a4:	2400      	movs	r4, #0
 801e3a6:	4625      	mov	r5, r4
 801e3a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e3aa:	4656      	mov	r6, sl
 801e3ac:	ea6f 0803 	mvn.w	r8, r3
 801e3b0:	2700      	movs	r7, #0
 801e3b2:	4621      	mov	r1, r4
 801e3b4:	4648      	mov	r0, r9
 801e3b6:	f000 fcbf 	bl	801ed38 <_Bfree>
 801e3ba:	2d00      	cmp	r5, #0
 801e3bc:	f000 80bd 	beq.w	801e53a <_dtoa_r+0x622>
 801e3c0:	b12f      	cbz	r7, 801e3ce <_dtoa_r+0x4b6>
 801e3c2:	42af      	cmp	r7, r5
 801e3c4:	d003      	beq.n	801e3ce <_dtoa_r+0x4b6>
 801e3c6:	4639      	mov	r1, r7
 801e3c8:	4648      	mov	r0, r9
 801e3ca:	f000 fcb5 	bl	801ed38 <_Bfree>
 801e3ce:	4629      	mov	r1, r5
 801e3d0:	4648      	mov	r0, r9
 801e3d2:	f000 fcb1 	bl	801ed38 <_Bfree>
 801e3d6:	e0b0      	b.n	801e53a <_dtoa_r+0x622>
 801e3d8:	07e2      	lsls	r2, r4, #31
 801e3da:	d505      	bpl.n	801e3e8 <_dtoa_r+0x4d0>
 801e3dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e3e0:	f7e2 f8e2 	bl	80005a8 <__aeabi_dmul>
 801e3e4:	3601      	adds	r6, #1
 801e3e6:	2301      	movs	r3, #1
 801e3e8:	1064      	asrs	r4, r4, #1
 801e3ea:	3508      	adds	r5, #8
 801e3ec:	e762      	b.n	801e2b4 <_dtoa_r+0x39c>
 801e3ee:	2602      	movs	r6, #2
 801e3f0:	e765      	b.n	801e2be <_dtoa_r+0x3a6>
 801e3f2:	9c08      	ldr	r4, [sp, #32]
 801e3f4:	46b8      	mov	r8, r7
 801e3f6:	e784      	b.n	801e302 <_dtoa_r+0x3ea>
 801e3f8:	4b27      	ldr	r3, [pc, #156]	@ (801e498 <_dtoa_r+0x580>)
 801e3fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e3fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e400:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e404:	4454      	add	r4, sl
 801e406:	2900      	cmp	r1, #0
 801e408:	d054      	beq.n	801e4b4 <_dtoa_r+0x59c>
 801e40a:	4929      	ldr	r1, [pc, #164]	@ (801e4b0 <_dtoa_r+0x598>)
 801e40c:	2000      	movs	r0, #0
 801e40e:	f7e2 f9f5 	bl	80007fc <__aeabi_ddiv>
 801e412:	4633      	mov	r3, r6
 801e414:	462a      	mov	r2, r5
 801e416:	f7e1 ff0f 	bl	8000238 <__aeabi_dsub>
 801e41a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e41e:	4656      	mov	r6, sl
 801e420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e424:	f7e2 fb70 	bl	8000b08 <__aeabi_d2iz>
 801e428:	4605      	mov	r5, r0
 801e42a:	f7e2 f853 	bl	80004d4 <__aeabi_i2d>
 801e42e:	4602      	mov	r2, r0
 801e430:	460b      	mov	r3, r1
 801e432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e436:	f7e1 feff 	bl	8000238 <__aeabi_dsub>
 801e43a:	3530      	adds	r5, #48	@ 0x30
 801e43c:	4602      	mov	r2, r0
 801e43e:	460b      	mov	r3, r1
 801e440:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e444:	f806 5b01 	strb.w	r5, [r6], #1
 801e448:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e44c:	f7e2 fb1e 	bl	8000a8c <__aeabi_dcmplt>
 801e450:	2800      	cmp	r0, #0
 801e452:	d172      	bne.n	801e53a <_dtoa_r+0x622>
 801e454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e458:	4911      	ldr	r1, [pc, #68]	@ (801e4a0 <_dtoa_r+0x588>)
 801e45a:	2000      	movs	r0, #0
 801e45c:	f7e1 feec 	bl	8000238 <__aeabi_dsub>
 801e460:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e464:	f7e2 fb12 	bl	8000a8c <__aeabi_dcmplt>
 801e468:	2800      	cmp	r0, #0
 801e46a:	f040 80b4 	bne.w	801e5d6 <_dtoa_r+0x6be>
 801e46e:	42a6      	cmp	r6, r4
 801e470:	f43f af70 	beq.w	801e354 <_dtoa_r+0x43c>
 801e474:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e478:	4b0a      	ldr	r3, [pc, #40]	@ (801e4a4 <_dtoa_r+0x58c>)
 801e47a:	2200      	movs	r2, #0
 801e47c:	f7e2 f894 	bl	80005a8 <__aeabi_dmul>
 801e480:	4b08      	ldr	r3, [pc, #32]	@ (801e4a4 <_dtoa_r+0x58c>)
 801e482:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e486:	2200      	movs	r2, #0
 801e488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e48c:	f7e2 f88c 	bl	80005a8 <__aeabi_dmul>
 801e490:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e494:	e7c4      	b.n	801e420 <_dtoa_r+0x508>
 801e496:	bf00      	nop
 801e498:	08020fd8 	.word	0x08020fd8
 801e49c:	08020fb0 	.word	0x08020fb0
 801e4a0:	3ff00000 	.word	0x3ff00000
 801e4a4:	40240000 	.word	0x40240000
 801e4a8:	401c0000 	.word	0x401c0000
 801e4ac:	40140000 	.word	0x40140000
 801e4b0:	3fe00000 	.word	0x3fe00000
 801e4b4:	4631      	mov	r1, r6
 801e4b6:	4628      	mov	r0, r5
 801e4b8:	f7e2 f876 	bl	80005a8 <__aeabi_dmul>
 801e4bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e4c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801e4c2:	4656      	mov	r6, sl
 801e4c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e4c8:	f7e2 fb1e 	bl	8000b08 <__aeabi_d2iz>
 801e4cc:	4605      	mov	r5, r0
 801e4ce:	f7e2 f801 	bl	80004d4 <__aeabi_i2d>
 801e4d2:	4602      	mov	r2, r0
 801e4d4:	460b      	mov	r3, r1
 801e4d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e4da:	f7e1 fead 	bl	8000238 <__aeabi_dsub>
 801e4de:	3530      	adds	r5, #48	@ 0x30
 801e4e0:	f806 5b01 	strb.w	r5, [r6], #1
 801e4e4:	4602      	mov	r2, r0
 801e4e6:	460b      	mov	r3, r1
 801e4e8:	42a6      	cmp	r6, r4
 801e4ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e4ee:	f04f 0200 	mov.w	r2, #0
 801e4f2:	d124      	bne.n	801e53e <_dtoa_r+0x626>
 801e4f4:	4baf      	ldr	r3, [pc, #700]	@ (801e7b4 <_dtoa_r+0x89c>)
 801e4f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e4fa:	f7e1 fe9f 	bl	800023c <__adddf3>
 801e4fe:	4602      	mov	r2, r0
 801e500:	460b      	mov	r3, r1
 801e502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e506:	f7e2 fadf 	bl	8000ac8 <__aeabi_dcmpgt>
 801e50a:	2800      	cmp	r0, #0
 801e50c:	d163      	bne.n	801e5d6 <_dtoa_r+0x6be>
 801e50e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e512:	49a8      	ldr	r1, [pc, #672]	@ (801e7b4 <_dtoa_r+0x89c>)
 801e514:	2000      	movs	r0, #0
 801e516:	f7e1 fe8f 	bl	8000238 <__aeabi_dsub>
 801e51a:	4602      	mov	r2, r0
 801e51c:	460b      	mov	r3, r1
 801e51e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e522:	f7e2 fab3 	bl	8000a8c <__aeabi_dcmplt>
 801e526:	2800      	cmp	r0, #0
 801e528:	f43f af14 	beq.w	801e354 <_dtoa_r+0x43c>
 801e52c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e52e:	1e73      	subs	r3, r6, #1
 801e530:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e532:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e536:	2b30      	cmp	r3, #48	@ 0x30
 801e538:	d0f8      	beq.n	801e52c <_dtoa_r+0x614>
 801e53a:	4647      	mov	r7, r8
 801e53c:	e03b      	b.n	801e5b6 <_dtoa_r+0x69e>
 801e53e:	4b9e      	ldr	r3, [pc, #632]	@ (801e7b8 <_dtoa_r+0x8a0>)
 801e540:	f7e2 f832 	bl	80005a8 <__aeabi_dmul>
 801e544:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e548:	e7bc      	b.n	801e4c4 <_dtoa_r+0x5ac>
 801e54a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801e54e:	4656      	mov	r6, sl
 801e550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e554:	4620      	mov	r0, r4
 801e556:	4629      	mov	r1, r5
 801e558:	f7e2 f950 	bl	80007fc <__aeabi_ddiv>
 801e55c:	f7e2 fad4 	bl	8000b08 <__aeabi_d2iz>
 801e560:	4680      	mov	r8, r0
 801e562:	f7e1 ffb7 	bl	80004d4 <__aeabi_i2d>
 801e566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e56a:	f7e2 f81d 	bl	80005a8 <__aeabi_dmul>
 801e56e:	4602      	mov	r2, r0
 801e570:	460b      	mov	r3, r1
 801e572:	4620      	mov	r0, r4
 801e574:	4629      	mov	r1, r5
 801e576:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801e57a:	f7e1 fe5d 	bl	8000238 <__aeabi_dsub>
 801e57e:	f806 4b01 	strb.w	r4, [r6], #1
 801e582:	9d08      	ldr	r5, [sp, #32]
 801e584:	eba6 040a 	sub.w	r4, r6, sl
 801e588:	42a5      	cmp	r5, r4
 801e58a:	4602      	mov	r2, r0
 801e58c:	460b      	mov	r3, r1
 801e58e:	d133      	bne.n	801e5f8 <_dtoa_r+0x6e0>
 801e590:	f7e1 fe54 	bl	800023c <__adddf3>
 801e594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e598:	4604      	mov	r4, r0
 801e59a:	460d      	mov	r5, r1
 801e59c:	f7e2 fa94 	bl	8000ac8 <__aeabi_dcmpgt>
 801e5a0:	b9c0      	cbnz	r0, 801e5d4 <_dtoa_r+0x6bc>
 801e5a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e5a6:	4620      	mov	r0, r4
 801e5a8:	4629      	mov	r1, r5
 801e5aa:	f7e2 fa65 	bl	8000a78 <__aeabi_dcmpeq>
 801e5ae:	b110      	cbz	r0, 801e5b6 <_dtoa_r+0x69e>
 801e5b0:	f018 0f01 	tst.w	r8, #1
 801e5b4:	d10e      	bne.n	801e5d4 <_dtoa_r+0x6bc>
 801e5b6:	9903      	ldr	r1, [sp, #12]
 801e5b8:	4648      	mov	r0, r9
 801e5ba:	f000 fbbd 	bl	801ed38 <_Bfree>
 801e5be:	2300      	movs	r3, #0
 801e5c0:	7033      	strb	r3, [r6, #0]
 801e5c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e5c4:	3701      	adds	r7, #1
 801e5c6:	601f      	str	r7, [r3, #0]
 801e5c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	f000 824b 	beq.w	801ea66 <_dtoa_r+0xb4e>
 801e5d0:	601e      	str	r6, [r3, #0]
 801e5d2:	e248      	b.n	801ea66 <_dtoa_r+0xb4e>
 801e5d4:	46b8      	mov	r8, r7
 801e5d6:	4633      	mov	r3, r6
 801e5d8:	461e      	mov	r6, r3
 801e5da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e5de:	2a39      	cmp	r2, #57	@ 0x39
 801e5e0:	d106      	bne.n	801e5f0 <_dtoa_r+0x6d8>
 801e5e2:	459a      	cmp	sl, r3
 801e5e4:	d1f8      	bne.n	801e5d8 <_dtoa_r+0x6c0>
 801e5e6:	2230      	movs	r2, #48	@ 0x30
 801e5e8:	f108 0801 	add.w	r8, r8, #1
 801e5ec:	f88a 2000 	strb.w	r2, [sl]
 801e5f0:	781a      	ldrb	r2, [r3, #0]
 801e5f2:	3201      	adds	r2, #1
 801e5f4:	701a      	strb	r2, [r3, #0]
 801e5f6:	e7a0      	b.n	801e53a <_dtoa_r+0x622>
 801e5f8:	4b6f      	ldr	r3, [pc, #444]	@ (801e7b8 <_dtoa_r+0x8a0>)
 801e5fa:	2200      	movs	r2, #0
 801e5fc:	f7e1 ffd4 	bl	80005a8 <__aeabi_dmul>
 801e600:	2200      	movs	r2, #0
 801e602:	2300      	movs	r3, #0
 801e604:	4604      	mov	r4, r0
 801e606:	460d      	mov	r5, r1
 801e608:	f7e2 fa36 	bl	8000a78 <__aeabi_dcmpeq>
 801e60c:	2800      	cmp	r0, #0
 801e60e:	d09f      	beq.n	801e550 <_dtoa_r+0x638>
 801e610:	e7d1      	b.n	801e5b6 <_dtoa_r+0x69e>
 801e612:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e614:	2a00      	cmp	r2, #0
 801e616:	f000 80ea 	beq.w	801e7ee <_dtoa_r+0x8d6>
 801e61a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e61c:	2a01      	cmp	r2, #1
 801e61e:	f300 80cd 	bgt.w	801e7bc <_dtoa_r+0x8a4>
 801e622:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e624:	2a00      	cmp	r2, #0
 801e626:	f000 80c1 	beq.w	801e7ac <_dtoa_r+0x894>
 801e62a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801e62e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e630:	9e04      	ldr	r6, [sp, #16]
 801e632:	9a04      	ldr	r2, [sp, #16]
 801e634:	441a      	add	r2, r3
 801e636:	9204      	str	r2, [sp, #16]
 801e638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e63a:	2101      	movs	r1, #1
 801e63c:	441a      	add	r2, r3
 801e63e:	4648      	mov	r0, r9
 801e640:	9209      	str	r2, [sp, #36]	@ 0x24
 801e642:	f000 fc2d 	bl	801eea0 <__i2b>
 801e646:	4605      	mov	r5, r0
 801e648:	b166      	cbz	r6, 801e664 <_dtoa_r+0x74c>
 801e64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	dd09      	ble.n	801e664 <_dtoa_r+0x74c>
 801e650:	42b3      	cmp	r3, r6
 801e652:	9a04      	ldr	r2, [sp, #16]
 801e654:	bfa8      	it	ge
 801e656:	4633      	movge	r3, r6
 801e658:	1ad2      	subs	r2, r2, r3
 801e65a:	9204      	str	r2, [sp, #16]
 801e65c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e65e:	1af6      	subs	r6, r6, r3
 801e660:	1ad3      	subs	r3, r2, r3
 801e662:	9309      	str	r3, [sp, #36]	@ 0x24
 801e664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e666:	b30b      	cbz	r3, 801e6ac <_dtoa_r+0x794>
 801e668:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	f000 80c6 	beq.w	801e7fc <_dtoa_r+0x8e4>
 801e670:	2c00      	cmp	r4, #0
 801e672:	f000 80c0 	beq.w	801e7f6 <_dtoa_r+0x8de>
 801e676:	4629      	mov	r1, r5
 801e678:	4622      	mov	r2, r4
 801e67a:	4648      	mov	r0, r9
 801e67c:	f000 fcc8 	bl	801f010 <__pow5mult>
 801e680:	9a03      	ldr	r2, [sp, #12]
 801e682:	4601      	mov	r1, r0
 801e684:	4605      	mov	r5, r0
 801e686:	4648      	mov	r0, r9
 801e688:	f000 fc20 	bl	801eecc <__multiply>
 801e68c:	9903      	ldr	r1, [sp, #12]
 801e68e:	4680      	mov	r8, r0
 801e690:	4648      	mov	r0, r9
 801e692:	f000 fb51 	bl	801ed38 <_Bfree>
 801e696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e698:	1b1b      	subs	r3, r3, r4
 801e69a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e69c:	f000 80b1 	beq.w	801e802 <_dtoa_r+0x8ea>
 801e6a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e6a2:	4641      	mov	r1, r8
 801e6a4:	4648      	mov	r0, r9
 801e6a6:	f000 fcb3 	bl	801f010 <__pow5mult>
 801e6aa:	9003      	str	r0, [sp, #12]
 801e6ac:	2101      	movs	r1, #1
 801e6ae:	4648      	mov	r0, r9
 801e6b0:	f000 fbf6 	bl	801eea0 <__i2b>
 801e6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6b6:	4604      	mov	r4, r0
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	f000 81d8 	beq.w	801ea6e <_dtoa_r+0xb56>
 801e6be:	461a      	mov	r2, r3
 801e6c0:	4601      	mov	r1, r0
 801e6c2:	4648      	mov	r0, r9
 801e6c4:	f000 fca4 	bl	801f010 <__pow5mult>
 801e6c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e6ca:	2b01      	cmp	r3, #1
 801e6cc:	4604      	mov	r4, r0
 801e6ce:	f300 809f 	bgt.w	801e810 <_dtoa_r+0x8f8>
 801e6d2:	9b06      	ldr	r3, [sp, #24]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	f040 8097 	bne.w	801e808 <_dtoa_r+0x8f0>
 801e6da:	9b07      	ldr	r3, [sp, #28]
 801e6dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	f040 8093 	bne.w	801e80c <_dtoa_r+0x8f4>
 801e6e6:	9b07      	ldr	r3, [sp, #28]
 801e6e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e6ec:	0d1b      	lsrs	r3, r3, #20
 801e6ee:	051b      	lsls	r3, r3, #20
 801e6f0:	b133      	cbz	r3, 801e700 <_dtoa_r+0x7e8>
 801e6f2:	9b04      	ldr	r3, [sp, #16]
 801e6f4:	3301      	adds	r3, #1
 801e6f6:	9304      	str	r3, [sp, #16]
 801e6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e6fa:	3301      	adds	r3, #1
 801e6fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801e6fe:	2301      	movs	r3, #1
 801e700:	930a      	str	r3, [sp, #40]	@ 0x28
 801e702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e704:	2b00      	cmp	r3, #0
 801e706:	f000 81b8 	beq.w	801ea7a <_dtoa_r+0xb62>
 801e70a:	6923      	ldr	r3, [r4, #16]
 801e70c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e710:	6918      	ldr	r0, [r3, #16]
 801e712:	f000 fb79 	bl	801ee08 <__hi0bits>
 801e716:	f1c0 0020 	rsb	r0, r0, #32
 801e71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e71c:	4418      	add	r0, r3
 801e71e:	f010 001f 	ands.w	r0, r0, #31
 801e722:	f000 8082 	beq.w	801e82a <_dtoa_r+0x912>
 801e726:	f1c0 0320 	rsb	r3, r0, #32
 801e72a:	2b04      	cmp	r3, #4
 801e72c:	dd73      	ble.n	801e816 <_dtoa_r+0x8fe>
 801e72e:	9b04      	ldr	r3, [sp, #16]
 801e730:	f1c0 001c 	rsb	r0, r0, #28
 801e734:	4403      	add	r3, r0
 801e736:	9304      	str	r3, [sp, #16]
 801e738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e73a:	4403      	add	r3, r0
 801e73c:	4406      	add	r6, r0
 801e73e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e740:	9b04      	ldr	r3, [sp, #16]
 801e742:	2b00      	cmp	r3, #0
 801e744:	dd05      	ble.n	801e752 <_dtoa_r+0x83a>
 801e746:	9903      	ldr	r1, [sp, #12]
 801e748:	461a      	mov	r2, r3
 801e74a:	4648      	mov	r0, r9
 801e74c:	f000 fcba 	bl	801f0c4 <__lshift>
 801e750:	9003      	str	r0, [sp, #12]
 801e752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e754:	2b00      	cmp	r3, #0
 801e756:	dd05      	ble.n	801e764 <_dtoa_r+0x84c>
 801e758:	4621      	mov	r1, r4
 801e75a:	461a      	mov	r2, r3
 801e75c:	4648      	mov	r0, r9
 801e75e:	f000 fcb1 	bl	801f0c4 <__lshift>
 801e762:	4604      	mov	r4, r0
 801e764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e766:	2b00      	cmp	r3, #0
 801e768:	d061      	beq.n	801e82e <_dtoa_r+0x916>
 801e76a:	9803      	ldr	r0, [sp, #12]
 801e76c:	4621      	mov	r1, r4
 801e76e:	f000 fd15 	bl	801f19c <__mcmp>
 801e772:	2800      	cmp	r0, #0
 801e774:	da5b      	bge.n	801e82e <_dtoa_r+0x916>
 801e776:	2300      	movs	r3, #0
 801e778:	9903      	ldr	r1, [sp, #12]
 801e77a:	220a      	movs	r2, #10
 801e77c:	4648      	mov	r0, r9
 801e77e:	f000 fafd 	bl	801ed7c <__multadd>
 801e782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e784:	9003      	str	r0, [sp, #12]
 801e786:	f107 38ff 	add.w	r8, r7, #4294967295
 801e78a:	2b00      	cmp	r3, #0
 801e78c:	f000 8177 	beq.w	801ea7e <_dtoa_r+0xb66>
 801e790:	4629      	mov	r1, r5
 801e792:	2300      	movs	r3, #0
 801e794:	220a      	movs	r2, #10
 801e796:	4648      	mov	r0, r9
 801e798:	f000 faf0 	bl	801ed7c <__multadd>
 801e79c:	f1bb 0f00 	cmp.w	fp, #0
 801e7a0:	4605      	mov	r5, r0
 801e7a2:	dc6f      	bgt.n	801e884 <_dtoa_r+0x96c>
 801e7a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e7a6:	2b02      	cmp	r3, #2
 801e7a8:	dc49      	bgt.n	801e83e <_dtoa_r+0x926>
 801e7aa:	e06b      	b.n	801e884 <_dtoa_r+0x96c>
 801e7ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e7ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e7b2:	e73c      	b.n	801e62e <_dtoa_r+0x716>
 801e7b4:	3fe00000 	.word	0x3fe00000
 801e7b8:	40240000 	.word	0x40240000
 801e7bc:	9b08      	ldr	r3, [sp, #32]
 801e7be:	1e5c      	subs	r4, r3, #1
 801e7c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7c2:	42a3      	cmp	r3, r4
 801e7c4:	db09      	blt.n	801e7da <_dtoa_r+0x8c2>
 801e7c6:	1b1c      	subs	r4, r3, r4
 801e7c8:	9b08      	ldr	r3, [sp, #32]
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	f6bf af30 	bge.w	801e630 <_dtoa_r+0x718>
 801e7d0:	9b04      	ldr	r3, [sp, #16]
 801e7d2:	9a08      	ldr	r2, [sp, #32]
 801e7d4:	1a9e      	subs	r6, r3, r2
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	e72b      	b.n	801e632 <_dtoa_r+0x71a>
 801e7da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e7de:	940a      	str	r4, [sp, #40]	@ 0x28
 801e7e0:	1ae3      	subs	r3, r4, r3
 801e7e2:	441a      	add	r2, r3
 801e7e4:	9e04      	ldr	r6, [sp, #16]
 801e7e6:	9b08      	ldr	r3, [sp, #32]
 801e7e8:	920e      	str	r2, [sp, #56]	@ 0x38
 801e7ea:	2400      	movs	r4, #0
 801e7ec:	e721      	b.n	801e632 <_dtoa_r+0x71a>
 801e7ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e7f0:	9e04      	ldr	r6, [sp, #16]
 801e7f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e7f4:	e728      	b.n	801e648 <_dtoa_r+0x730>
 801e7f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801e7fa:	e751      	b.n	801e6a0 <_dtoa_r+0x788>
 801e7fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e7fe:	9903      	ldr	r1, [sp, #12]
 801e800:	e750      	b.n	801e6a4 <_dtoa_r+0x78c>
 801e802:	f8cd 800c 	str.w	r8, [sp, #12]
 801e806:	e751      	b.n	801e6ac <_dtoa_r+0x794>
 801e808:	2300      	movs	r3, #0
 801e80a:	e779      	b.n	801e700 <_dtoa_r+0x7e8>
 801e80c:	9b06      	ldr	r3, [sp, #24]
 801e80e:	e777      	b.n	801e700 <_dtoa_r+0x7e8>
 801e810:	2300      	movs	r3, #0
 801e812:	930a      	str	r3, [sp, #40]	@ 0x28
 801e814:	e779      	b.n	801e70a <_dtoa_r+0x7f2>
 801e816:	d093      	beq.n	801e740 <_dtoa_r+0x828>
 801e818:	9a04      	ldr	r2, [sp, #16]
 801e81a:	331c      	adds	r3, #28
 801e81c:	441a      	add	r2, r3
 801e81e:	9204      	str	r2, [sp, #16]
 801e820:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e822:	441a      	add	r2, r3
 801e824:	441e      	add	r6, r3
 801e826:	9209      	str	r2, [sp, #36]	@ 0x24
 801e828:	e78a      	b.n	801e740 <_dtoa_r+0x828>
 801e82a:	4603      	mov	r3, r0
 801e82c:	e7f4      	b.n	801e818 <_dtoa_r+0x900>
 801e82e:	9b08      	ldr	r3, [sp, #32]
 801e830:	2b00      	cmp	r3, #0
 801e832:	46b8      	mov	r8, r7
 801e834:	dc20      	bgt.n	801e878 <_dtoa_r+0x960>
 801e836:	469b      	mov	fp, r3
 801e838:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e83a:	2b02      	cmp	r3, #2
 801e83c:	dd1e      	ble.n	801e87c <_dtoa_r+0x964>
 801e83e:	f1bb 0f00 	cmp.w	fp, #0
 801e842:	f47f adb1 	bne.w	801e3a8 <_dtoa_r+0x490>
 801e846:	4621      	mov	r1, r4
 801e848:	465b      	mov	r3, fp
 801e84a:	2205      	movs	r2, #5
 801e84c:	4648      	mov	r0, r9
 801e84e:	f000 fa95 	bl	801ed7c <__multadd>
 801e852:	4601      	mov	r1, r0
 801e854:	4604      	mov	r4, r0
 801e856:	9803      	ldr	r0, [sp, #12]
 801e858:	f000 fca0 	bl	801f19c <__mcmp>
 801e85c:	2800      	cmp	r0, #0
 801e85e:	f77f ada3 	ble.w	801e3a8 <_dtoa_r+0x490>
 801e862:	4656      	mov	r6, sl
 801e864:	2331      	movs	r3, #49	@ 0x31
 801e866:	f806 3b01 	strb.w	r3, [r6], #1
 801e86a:	f108 0801 	add.w	r8, r8, #1
 801e86e:	e59f      	b.n	801e3b0 <_dtoa_r+0x498>
 801e870:	9c08      	ldr	r4, [sp, #32]
 801e872:	46b8      	mov	r8, r7
 801e874:	4625      	mov	r5, r4
 801e876:	e7f4      	b.n	801e862 <_dtoa_r+0x94a>
 801e878:	f8dd b020 	ldr.w	fp, [sp, #32]
 801e87c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e87e:	2b00      	cmp	r3, #0
 801e880:	f000 8101 	beq.w	801ea86 <_dtoa_r+0xb6e>
 801e884:	2e00      	cmp	r6, #0
 801e886:	dd05      	ble.n	801e894 <_dtoa_r+0x97c>
 801e888:	4629      	mov	r1, r5
 801e88a:	4632      	mov	r2, r6
 801e88c:	4648      	mov	r0, r9
 801e88e:	f000 fc19 	bl	801f0c4 <__lshift>
 801e892:	4605      	mov	r5, r0
 801e894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e896:	2b00      	cmp	r3, #0
 801e898:	d05c      	beq.n	801e954 <_dtoa_r+0xa3c>
 801e89a:	6869      	ldr	r1, [r5, #4]
 801e89c:	4648      	mov	r0, r9
 801e89e:	f000 fa0b 	bl	801ecb8 <_Balloc>
 801e8a2:	4606      	mov	r6, r0
 801e8a4:	b928      	cbnz	r0, 801e8b2 <_dtoa_r+0x99a>
 801e8a6:	4b82      	ldr	r3, [pc, #520]	@ (801eab0 <_dtoa_r+0xb98>)
 801e8a8:	4602      	mov	r2, r0
 801e8aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e8ae:	f7ff bb47 	b.w	801df40 <_dtoa_r+0x28>
 801e8b2:	692a      	ldr	r2, [r5, #16]
 801e8b4:	3202      	adds	r2, #2
 801e8b6:	0092      	lsls	r2, r2, #2
 801e8b8:	f105 010c 	add.w	r1, r5, #12
 801e8bc:	300c      	adds	r0, #12
 801e8be:	f000 ff9d 	bl	801f7fc <memcpy>
 801e8c2:	2201      	movs	r2, #1
 801e8c4:	4631      	mov	r1, r6
 801e8c6:	4648      	mov	r0, r9
 801e8c8:	f000 fbfc 	bl	801f0c4 <__lshift>
 801e8cc:	f10a 0301 	add.w	r3, sl, #1
 801e8d0:	9304      	str	r3, [sp, #16]
 801e8d2:	eb0a 030b 	add.w	r3, sl, fp
 801e8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801e8d8:	9b06      	ldr	r3, [sp, #24]
 801e8da:	f003 0301 	and.w	r3, r3, #1
 801e8de:	462f      	mov	r7, r5
 801e8e0:	9309      	str	r3, [sp, #36]	@ 0x24
 801e8e2:	4605      	mov	r5, r0
 801e8e4:	9b04      	ldr	r3, [sp, #16]
 801e8e6:	9803      	ldr	r0, [sp, #12]
 801e8e8:	4621      	mov	r1, r4
 801e8ea:	f103 3bff 	add.w	fp, r3, #4294967295
 801e8ee:	f7ff fa8a 	bl	801de06 <quorem>
 801e8f2:	4603      	mov	r3, r0
 801e8f4:	3330      	adds	r3, #48	@ 0x30
 801e8f6:	9006      	str	r0, [sp, #24]
 801e8f8:	4639      	mov	r1, r7
 801e8fa:	9803      	ldr	r0, [sp, #12]
 801e8fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e8fe:	f000 fc4d 	bl	801f19c <__mcmp>
 801e902:	462a      	mov	r2, r5
 801e904:	9008      	str	r0, [sp, #32]
 801e906:	4621      	mov	r1, r4
 801e908:	4648      	mov	r0, r9
 801e90a:	f000 fc63 	bl	801f1d4 <__mdiff>
 801e90e:	68c2      	ldr	r2, [r0, #12]
 801e910:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e912:	4606      	mov	r6, r0
 801e914:	bb02      	cbnz	r2, 801e958 <_dtoa_r+0xa40>
 801e916:	4601      	mov	r1, r0
 801e918:	9803      	ldr	r0, [sp, #12]
 801e91a:	f000 fc3f 	bl	801f19c <__mcmp>
 801e91e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e920:	4602      	mov	r2, r0
 801e922:	4631      	mov	r1, r6
 801e924:	4648      	mov	r0, r9
 801e926:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 801e92a:	f000 fa05 	bl	801ed38 <_Bfree>
 801e92e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e930:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e932:	9e04      	ldr	r6, [sp, #16]
 801e934:	ea42 0103 	orr.w	r1, r2, r3
 801e938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e93a:	4319      	orrs	r1, r3
 801e93c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e93e:	d10d      	bne.n	801e95c <_dtoa_r+0xa44>
 801e940:	2b39      	cmp	r3, #57	@ 0x39
 801e942:	d027      	beq.n	801e994 <_dtoa_r+0xa7c>
 801e944:	9a08      	ldr	r2, [sp, #32]
 801e946:	2a00      	cmp	r2, #0
 801e948:	dd01      	ble.n	801e94e <_dtoa_r+0xa36>
 801e94a:	9b06      	ldr	r3, [sp, #24]
 801e94c:	3331      	adds	r3, #49	@ 0x31
 801e94e:	f88b 3000 	strb.w	r3, [fp]
 801e952:	e52e      	b.n	801e3b2 <_dtoa_r+0x49a>
 801e954:	4628      	mov	r0, r5
 801e956:	e7b9      	b.n	801e8cc <_dtoa_r+0x9b4>
 801e958:	2201      	movs	r2, #1
 801e95a:	e7e2      	b.n	801e922 <_dtoa_r+0xa0a>
 801e95c:	9908      	ldr	r1, [sp, #32]
 801e95e:	2900      	cmp	r1, #0
 801e960:	db04      	blt.n	801e96c <_dtoa_r+0xa54>
 801e962:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801e964:	4301      	orrs	r1, r0
 801e966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e968:	4301      	orrs	r1, r0
 801e96a:	d120      	bne.n	801e9ae <_dtoa_r+0xa96>
 801e96c:	2a00      	cmp	r2, #0
 801e96e:	ddee      	ble.n	801e94e <_dtoa_r+0xa36>
 801e970:	9903      	ldr	r1, [sp, #12]
 801e972:	9304      	str	r3, [sp, #16]
 801e974:	2201      	movs	r2, #1
 801e976:	4648      	mov	r0, r9
 801e978:	f000 fba4 	bl	801f0c4 <__lshift>
 801e97c:	4621      	mov	r1, r4
 801e97e:	9003      	str	r0, [sp, #12]
 801e980:	f000 fc0c 	bl	801f19c <__mcmp>
 801e984:	2800      	cmp	r0, #0
 801e986:	9b04      	ldr	r3, [sp, #16]
 801e988:	dc02      	bgt.n	801e990 <_dtoa_r+0xa78>
 801e98a:	d1e0      	bne.n	801e94e <_dtoa_r+0xa36>
 801e98c:	07da      	lsls	r2, r3, #31
 801e98e:	d5de      	bpl.n	801e94e <_dtoa_r+0xa36>
 801e990:	2b39      	cmp	r3, #57	@ 0x39
 801e992:	d1da      	bne.n	801e94a <_dtoa_r+0xa32>
 801e994:	2339      	movs	r3, #57	@ 0x39
 801e996:	f88b 3000 	strb.w	r3, [fp]
 801e99a:	4633      	mov	r3, r6
 801e99c:	461e      	mov	r6, r3
 801e99e:	3b01      	subs	r3, #1
 801e9a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e9a4:	2a39      	cmp	r2, #57	@ 0x39
 801e9a6:	d04e      	beq.n	801ea46 <_dtoa_r+0xb2e>
 801e9a8:	3201      	adds	r2, #1
 801e9aa:	701a      	strb	r2, [r3, #0]
 801e9ac:	e501      	b.n	801e3b2 <_dtoa_r+0x49a>
 801e9ae:	2a00      	cmp	r2, #0
 801e9b0:	dd03      	ble.n	801e9ba <_dtoa_r+0xaa2>
 801e9b2:	2b39      	cmp	r3, #57	@ 0x39
 801e9b4:	d0ee      	beq.n	801e994 <_dtoa_r+0xa7c>
 801e9b6:	3301      	adds	r3, #1
 801e9b8:	e7c9      	b.n	801e94e <_dtoa_r+0xa36>
 801e9ba:	9a04      	ldr	r2, [sp, #16]
 801e9bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e9be:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e9c2:	428a      	cmp	r2, r1
 801e9c4:	d028      	beq.n	801ea18 <_dtoa_r+0xb00>
 801e9c6:	9903      	ldr	r1, [sp, #12]
 801e9c8:	2300      	movs	r3, #0
 801e9ca:	220a      	movs	r2, #10
 801e9cc:	4648      	mov	r0, r9
 801e9ce:	f000 f9d5 	bl	801ed7c <__multadd>
 801e9d2:	42af      	cmp	r7, r5
 801e9d4:	9003      	str	r0, [sp, #12]
 801e9d6:	f04f 0300 	mov.w	r3, #0
 801e9da:	f04f 020a 	mov.w	r2, #10
 801e9de:	4639      	mov	r1, r7
 801e9e0:	4648      	mov	r0, r9
 801e9e2:	d107      	bne.n	801e9f4 <_dtoa_r+0xadc>
 801e9e4:	f000 f9ca 	bl	801ed7c <__multadd>
 801e9e8:	4607      	mov	r7, r0
 801e9ea:	4605      	mov	r5, r0
 801e9ec:	9b04      	ldr	r3, [sp, #16]
 801e9ee:	3301      	adds	r3, #1
 801e9f0:	9304      	str	r3, [sp, #16]
 801e9f2:	e777      	b.n	801e8e4 <_dtoa_r+0x9cc>
 801e9f4:	f000 f9c2 	bl	801ed7c <__multadd>
 801e9f8:	4629      	mov	r1, r5
 801e9fa:	4607      	mov	r7, r0
 801e9fc:	2300      	movs	r3, #0
 801e9fe:	220a      	movs	r2, #10
 801ea00:	4648      	mov	r0, r9
 801ea02:	f000 f9bb 	bl	801ed7c <__multadd>
 801ea06:	4605      	mov	r5, r0
 801ea08:	e7f0      	b.n	801e9ec <_dtoa_r+0xad4>
 801ea0a:	f1bb 0f00 	cmp.w	fp, #0
 801ea0e:	bfcc      	ite	gt
 801ea10:	465e      	movgt	r6, fp
 801ea12:	2601      	movle	r6, #1
 801ea14:	4456      	add	r6, sl
 801ea16:	2700      	movs	r7, #0
 801ea18:	9903      	ldr	r1, [sp, #12]
 801ea1a:	9304      	str	r3, [sp, #16]
 801ea1c:	2201      	movs	r2, #1
 801ea1e:	4648      	mov	r0, r9
 801ea20:	f000 fb50 	bl	801f0c4 <__lshift>
 801ea24:	4621      	mov	r1, r4
 801ea26:	9003      	str	r0, [sp, #12]
 801ea28:	f000 fbb8 	bl	801f19c <__mcmp>
 801ea2c:	2800      	cmp	r0, #0
 801ea2e:	dcb4      	bgt.n	801e99a <_dtoa_r+0xa82>
 801ea30:	d102      	bne.n	801ea38 <_dtoa_r+0xb20>
 801ea32:	9b04      	ldr	r3, [sp, #16]
 801ea34:	07db      	lsls	r3, r3, #31
 801ea36:	d4b0      	bmi.n	801e99a <_dtoa_r+0xa82>
 801ea38:	4633      	mov	r3, r6
 801ea3a:	461e      	mov	r6, r3
 801ea3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ea40:	2a30      	cmp	r2, #48	@ 0x30
 801ea42:	d0fa      	beq.n	801ea3a <_dtoa_r+0xb22>
 801ea44:	e4b5      	b.n	801e3b2 <_dtoa_r+0x49a>
 801ea46:	459a      	cmp	sl, r3
 801ea48:	d1a8      	bne.n	801e99c <_dtoa_r+0xa84>
 801ea4a:	2331      	movs	r3, #49	@ 0x31
 801ea4c:	f108 0801 	add.w	r8, r8, #1
 801ea50:	f88a 3000 	strb.w	r3, [sl]
 801ea54:	e4ad      	b.n	801e3b2 <_dtoa_r+0x49a>
 801ea56:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ea58:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801eab4 <_dtoa_r+0xb9c>
 801ea5c:	b11b      	cbz	r3, 801ea66 <_dtoa_r+0xb4e>
 801ea5e:	f10a 0308 	add.w	r3, sl, #8
 801ea62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ea64:	6013      	str	r3, [r2, #0]
 801ea66:	4650      	mov	r0, sl
 801ea68:	b017      	add	sp, #92	@ 0x5c
 801ea6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ea70:	2b01      	cmp	r3, #1
 801ea72:	f77f ae2e 	ble.w	801e6d2 <_dtoa_r+0x7ba>
 801ea76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea78:	930a      	str	r3, [sp, #40]	@ 0x28
 801ea7a:	2001      	movs	r0, #1
 801ea7c:	e64d      	b.n	801e71a <_dtoa_r+0x802>
 801ea7e:	f1bb 0f00 	cmp.w	fp, #0
 801ea82:	f77f aed9 	ble.w	801e838 <_dtoa_r+0x920>
 801ea86:	4656      	mov	r6, sl
 801ea88:	9803      	ldr	r0, [sp, #12]
 801ea8a:	4621      	mov	r1, r4
 801ea8c:	f7ff f9bb 	bl	801de06 <quorem>
 801ea90:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801ea94:	f806 3b01 	strb.w	r3, [r6], #1
 801ea98:	eba6 020a 	sub.w	r2, r6, sl
 801ea9c:	4593      	cmp	fp, r2
 801ea9e:	ddb4      	ble.n	801ea0a <_dtoa_r+0xaf2>
 801eaa0:	9903      	ldr	r1, [sp, #12]
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	220a      	movs	r2, #10
 801eaa6:	4648      	mov	r0, r9
 801eaa8:	f000 f968 	bl	801ed7c <__multadd>
 801eaac:	9003      	str	r0, [sp, #12]
 801eaae:	e7eb      	b.n	801ea88 <_dtoa_r+0xb70>
 801eab0:	08020ee0 	.word	0x08020ee0
 801eab4:	08020e64 	.word	0x08020e64

0801eab8 <_free_r>:
 801eab8:	b538      	push	{r3, r4, r5, lr}
 801eaba:	4605      	mov	r5, r0
 801eabc:	2900      	cmp	r1, #0
 801eabe:	d041      	beq.n	801eb44 <_free_r+0x8c>
 801eac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eac4:	1f0c      	subs	r4, r1, #4
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	bfb8      	it	lt
 801eaca:	18e4      	addlt	r4, r4, r3
 801eacc:	f000 f8e8 	bl	801eca0 <__malloc_lock>
 801ead0:	4a1d      	ldr	r2, [pc, #116]	@ (801eb48 <_free_r+0x90>)
 801ead2:	6813      	ldr	r3, [r2, #0]
 801ead4:	b933      	cbnz	r3, 801eae4 <_free_r+0x2c>
 801ead6:	6063      	str	r3, [r4, #4]
 801ead8:	6014      	str	r4, [r2, #0]
 801eada:	4628      	mov	r0, r5
 801eadc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eae0:	f000 b8e4 	b.w	801ecac <__malloc_unlock>
 801eae4:	42a3      	cmp	r3, r4
 801eae6:	d908      	bls.n	801eafa <_free_r+0x42>
 801eae8:	6820      	ldr	r0, [r4, #0]
 801eaea:	1821      	adds	r1, r4, r0
 801eaec:	428b      	cmp	r3, r1
 801eaee:	bf01      	itttt	eq
 801eaf0:	6819      	ldreq	r1, [r3, #0]
 801eaf2:	685b      	ldreq	r3, [r3, #4]
 801eaf4:	1809      	addeq	r1, r1, r0
 801eaf6:	6021      	streq	r1, [r4, #0]
 801eaf8:	e7ed      	b.n	801ead6 <_free_r+0x1e>
 801eafa:	461a      	mov	r2, r3
 801eafc:	685b      	ldr	r3, [r3, #4]
 801eafe:	b10b      	cbz	r3, 801eb04 <_free_r+0x4c>
 801eb00:	42a3      	cmp	r3, r4
 801eb02:	d9fa      	bls.n	801eafa <_free_r+0x42>
 801eb04:	6811      	ldr	r1, [r2, #0]
 801eb06:	1850      	adds	r0, r2, r1
 801eb08:	42a0      	cmp	r0, r4
 801eb0a:	d10b      	bne.n	801eb24 <_free_r+0x6c>
 801eb0c:	6820      	ldr	r0, [r4, #0]
 801eb0e:	4401      	add	r1, r0
 801eb10:	1850      	adds	r0, r2, r1
 801eb12:	4283      	cmp	r3, r0
 801eb14:	6011      	str	r1, [r2, #0]
 801eb16:	d1e0      	bne.n	801eada <_free_r+0x22>
 801eb18:	6818      	ldr	r0, [r3, #0]
 801eb1a:	685b      	ldr	r3, [r3, #4]
 801eb1c:	6053      	str	r3, [r2, #4]
 801eb1e:	4408      	add	r0, r1
 801eb20:	6010      	str	r0, [r2, #0]
 801eb22:	e7da      	b.n	801eada <_free_r+0x22>
 801eb24:	d902      	bls.n	801eb2c <_free_r+0x74>
 801eb26:	230c      	movs	r3, #12
 801eb28:	602b      	str	r3, [r5, #0]
 801eb2a:	e7d6      	b.n	801eada <_free_r+0x22>
 801eb2c:	6820      	ldr	r0, [r4, #0]
 801eb2e:	1821      	adds	r1, r4, r0
 801eb30:	428b      	cmp	r3, r1
 801eb32:	bf04      	itt	eq
 801eb34:	6819      	ldreq	r1, [r3, #0]
 801eb36:	685b      	ldreq	r3, [r3, #4]
 801eb38:	6063      	str	r3, [r4, #4]
 801eb3a:	bf04      	itt	eq
 801eb3c:	1809      	addeq	r1, r1, r0
 801eb3e:	6021      	streq	r1, [r4, #0]
 801eb40:	6054      	str	r4, [r2, #4]
 801eb42:	e7ca      	b.n	801eada <_free_r+0x22>
 801eb44:	bd38      	pop	{r3, r4, r5, pc}
 801eb46:	bf00      	nop
 801eb48:	20002688 	.word	0x20002688

0801eb4c <malloc>:
 801eb4c:	4b02      	ldr	r3, [pc, #8]	@ (801eb58 <malloc+0xc>)
 801eb4e:	4601      	mov	r1, r0
 801eb50:	6818      	ldr	r0, [r3, #0]
 801eb52:	f000 b825 	b.w	801eba0 <_malloc_r>
 801eb56:	bf00      	nop
 801eb58:	2000014c 	.word	0x2000014c

0801eb5c <sbrk_aligned>:
 801eb5c:	b570      	push	{r4, r5, r6, lr}
 801eb5e:	4e0f      	ldr	r6, [pc, #60]	@ (801eb9c <sbrk_aligned+0x40>)
 801eb60:	460c      	mov	r4, r1
 801eb62:	6831      	ldr	r1, [r6, #0]
 801eb64:	4605      	mov	r5, r0
 801eb66:	b911      	cbnz	r1, 801eb6e <sbrk_aligned+0x12>
 801eb68:	f000 fe38 	bl	801f7dc <_sbrk_r>
 801eb6c:	6030      	str	r0, [r6, #0]
 801eb6e:	4621      	mov	r1, r4
 801eb70:	4628      	mov	r0, r5
 801eb72:	f000 fe33 	bl	801f7dc <_sbrk_r>
 801eb76:	1c43      	adds	r3, r0, #1
 801eb78:	d103      	bne.n	801eb82 <sbrk_aligned+0x26>
 801eb7a:	f04f 34ff 	mov.w	r4, #4294967295
 801eb7e:	4620      	mov	r0, r4
 801eb80:	bd70      	pop	{r4, r5, r6, pc}
 801eb82:	1cc4      	adds	r4, r0, #3
 801eb84:	f024 0403 	bic.w	r4, r4, #3
 801eb88:	42a0      	cmp	r0, r4
 801eb8a:	d0f8      	beq.n	801eb7e <sbrk_aligned+0x22>
 801eb8c:	1a21      	subs	r1, r4, r0
 801eb8e:	4628      	mov	r0, r5
 801eb90:	f000 fe24 	bl	801f7dc <_sbrk_r>
 801eb94:	3001      	adds	r0, #1
 801eb96:	d1f2      	bne.n	801eb7e <sbrk_aligned+0x22>
 801eb98:	e7ef      	b.n	801eb7a <sbrk_aligned+0x1e>
 801eb9a:	bf00      	nop
 801eb9c:	20002684 	.word	0x20002684

0801eba0 <_malloc_r>:
 801eba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eba4:	1ccd      	adds	r5, r1, #3
 801eba6:	f025 0503 	bic.w	r5, r5, #3
 801ebaa:	3508      	adds	r5, #8
 801ebac:	2d0c      	cmp	r5, #12
 801ebae:	bf38      	it	cc
 801ebb0:	250c      	movcc	r5, #12
 801ebb2:	2d00      	cmp	r5, #0
 801ebb4:	4606      	mov	r6, r0
 801ebb6:	db01      	blt.n	801ebbc <_malloc_r+0x1c>
 801ebb8:	42a9      	cmp	r1, r5
 801ebba:	d904      	bls.n	801ebc6 <_malloc_r+0x26>
 801ebbc:	230c      	movs	r3, #12
 801ebbe:	6033      	str	r3, [r6, #0]
 801ebc0:	2000      	movs	r0, #0
 801ebc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ebc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ec9c <_malloc_r+0xfc>
 801ebca:	f000 f869 	bl	801eca0 <__malloc_lock>
 801ebce:	f8d8 3000 	ldr.w	r3, [r8]
 801ebd2:	461c      	mov	r4, r3
 801ebd4:	bb44      	cbnz	r4, 801ec28 <_malloc_r+0x88>
 801ebd6:	4629      	mov	r1, r5
 801ebd8:	4630      	mov	r0, r6
 801ebda:	f7ff ffbf 	bl	801eb5c <sbrk_aligned>
 801ebde:	1c43      	adds	r3, r0, #1
 801ebe0:	4604      	mov	r4, r0
 801ebe2:	d158      	bne.n	801ec96 <_malloc_r+0xf6>
 801ebe4:	f8d8 4000 	ldr.w	r4, [r8]
 801ebe8:	4627      	mov	r7, r4
 801ebea:	2f00      	cmp	r7, #0
 801ebec:	d143      	bne.n	801ec76 <_malloc_r+0xd6>
 801ebee:	2c00      	cmp	r4, #0
 801ebf0:	d04b      	beq.n	801ec8a <_malloc_r+0xea>
 801ebf2:	6823      	ldr	r3, [r4, #0]
 801ebf4:	4639      	mov	r1, r7
 801ebf6:	4630      	mov	r0, r6
 801ebf8:	eb04 0903 	add.w	r9, r4, r3
 801ebfc:	f000 fdee 	bl	801f7dc <_sbrk_r>
 801ec00:	4581      	cmp	r9, r0
 801ec02:	d142      	bne.n	801ec8a <_malloc_r+0xea>
 801ec04:	6821      	ldr	r1, [r4, #0]
 801ec06:	1a6d      	subs	r5, r5, r1
 801ec08:	4629      	mov	r1, r5
 801ec0a:	4630      	mov	r0, r6
 801ec0c:	f7ff ffa6 	bl	801eb5c <sbrk_aligned>
 801ec10:	3001      	adds	r0, #1
 801ec12:	d03a      	beq.n	801ec8a <_malloc_r+0xea>
 801ec14:	6823      	ldr	r3, [r4, #0]
 801ec16:	442b      	add	r3, r5
 801ec18:	6023      	str	r3, [r4, #0]
 801ec1a:	f8d8 3000 	ldr.w	r3, [r8]
 801ec1e:	685a      	ldr	r2, [r3, #4]
 801ec20:	bb62      	cbnz	r2, 801ec7c <_malloc_r+0xdc>
 801ec22:	f8c8 7000 	str.w	r7, [r8]
 801ec26:	e00f      	b.n	801ec48 <_malloc_r+0xa8>
 801ec28:	6822      	ldr	r2, [r4, #0]
 801ec2a:	1b52      	subs	r2, r2, r5
 801ec2c:	d420      	bmi.n	801ec70 <_malloc_r+0xd0>
 801ec2e:	2a0b      	cmp	r2, #11
 801ec30:	d917      	bls.n	801ec62 <_malloc_r+0xc2>
 801ec32:	1961      	adds	r1, r4, r5
 801ec34:	42a3      	cmp	r3, r4
 801ec36:	6025      	str	r5, [r4, #0]
 801ec38:	bf18      	it	ne
 801ec3a:	6059      	strne	r1, [r3, #4]
 801ec3c:	6863      	ldr	r3, [r4, #4]
 801ec3e:	bf08      	it	eq
 801ec40:	f8c8 1000 	streq.w	r1, [r8]
 801ec44:	5162      	str	r2, [r4, r5]
 801ec46:	604b      	str	r3, [r1, #4]
 801ec48:	4630      	mov	r0, r6
 801ec4a:	f000 f82f 	bl	801ecac <__malloc_unlock>
 801ec4e:	f104 000b 	add.w	r0, r4, #11
 801ec52:	1d23      	adds	r3, r4, #4
 801ec54:	f020 0007 	bic.w	r0, r0, #7
 801ec58:	1ac2      	subs	r2, r0, r3
 801ec5a:	bf1c      	itt	ne
 801ec5c:	1a1b      	subne	r3, r3, r0
 801ec5e:	50a3      	strne	r3, [r4, r2]
 801ec60:	e7af      	b.n	801ebc2 <_malloc_r+0x22>
 801ec62:	6862      	ldr	r2, [r4, #4]
 801ec64:	42a3      	cmp	r3, r4
 801ec66:	bf0c      	ite	eq
 801ec68:	f8c8 2000 	streq.w	r2, [r8]
 801ec6c:	605a      	strne	r2, [r3, #4]
 801ec6e:	e7eb      	b.n	801ec48 <_malloc_r+0xa8>
 801ec70:	4623      	mov	r3, r4
 801ec72:	6864      	ldr	r4, [r4, #4]
 801ec74:	e7ae      	b.n	801ebd4 <_malloc_r+0x34>
 801ec76:	463c      	mov	r4, r7
 801ec78:	687f      	ldr	r7, [r7, #4]
 801ec7a:	e7b6      	b.n	801ebea <_malloc_r+0x4a>
 801ec7c:	461a      	mov	r2, r3
 801ec7e:	685b      	ldr	r3, [r3, #4]
 801ec80:	42a3      	cmp	r3, r4
 801ec82:	d1fb      	bne.n	801ec7c <_malloc_r+0xdc>
 801ec84:	2300      	movs	r3, #0
 801ec86:	6053      	str	r3, [r2, #4]
 801ec88:	e7de      	b.n	801ec48 <_malloc_r+0xa8>
 801ec8a:	230c      	movs	r3, #12
 801ec8c:	6033      	str	r3, [r6, #0]
 801ec8e:	4630      	mov	r0, r6
 801ec90:	f000 f80c 	bl	801ecac <__malloc_unlock>
 801ec94:	e794      	b.n	801ebc0 <_malloc_r+0x20>
 801ec96:	6005      	str	r5, [r0, #0]
 801ec98:	e7d6      	b.n	801ec48 <_malloc_r+0xa8>
 801ec9a:	bf00      	nop
 801ec9c:	20002688 	.word	0x20002688

0801eca0 <__malloc_lock>:
 801eca0:	4801      	ldr	r0, [pc, #4]	@ (801eca8 <__malloc_lock+0x8>)
 801eca2:	f7ff b8ae 	b.w	801de02 <__retarget_lock_acquire_recursive>
 801eca6:	bf00      	nop
 801eca8:	20002680 	.word	0x20002680

0801ecac <__malloc_unlock>:
 801ecac:	4801      	ldr	r0, [pc, #4]	@ (801ecb4 <__malloc_unlock+0x8>)
 801ecae:	f7ff b8a9 	b.w	801de04 <__retarget_lock_release_recursive>
 801ecb2:	bf00      	nop
 801ecb4:	20002680 	.word	0x20002680

0801ecb8 <_Balloc>:
 801ecb8:	b570      	push	{r4, r5, r6, lr}
 801ecba:	69c6      	ldr	r6, [r0, #28]
 801ecbc:	4604      	mov	r4, r0
 801ecbe:	460d      	mov	r5, r1
 801ecc0:	b976      	cbnz	r6, 801ece0 <_Balloc+0x28>
 801ecc2:	2010      	movs	r0, #16
 801ecc4:	f7ff ff42 	bl	801eb4c <malloc>
 801ecc8:	4602      	mov	r2, r0
 801ecca:	61e0      	str	r0, [r4, #28]
 801eccc:	b920      	cbnz	r0, 801ecd8 <_Balloc+0x20>
 801ecce:	4b18      	ldr	r3, [pc, #96]	@ (801ed30 <_Balloc+0x78>)
 801ecd0:	4818      	ldr	r0, [pc, #96]	@ (801ed34 <_Balloc+0x7c>)
 801ecd2:	216b      	movs	r1, #107	@ 0x6b
 801ecd4:	f000 fda0 	bl	801f818 <__assert_func>
 801ecd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ecdc:	6006      	str	r6, [r0, #0]
 801ecde:	60c6      	str	r6, [r0, #12]
 801ece0:	69e6      	ldr	r6, [r4, #28]
 801ece2:	68f3      	ldr	r3, [r6, #12]
 801ece4:	b183      	cbz	r3, 801ed08 <_Balloc+0x50>
 801ece6:	69e3      	ldr	r3, [r4, #28]
 801ece8:	68db      	ldr	r3, [r3, #12]
 801ecea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ecee:	b9b8      	cbnz	r0, 801ed20 <_Balloc+0x68>
 801ecf0:	2101      	movs	r1, #1
 801ecf2:	fa01 f605 	lsl.w	r6, r1, r5
 801ecf6:	1d72      	adds	r2, r6, #5
 801ecf8:	0092      	lsls	r2, r2, #2
 801ecfa:	4620      	mov	r0, r4
 801ecfc:	f000 fdaa 	bl	801f854 <_calloc_r>
 801ed00:	b160      	cbz	r0, 801ed1c <_Balloc+0x64>
 801ed02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ed06:	e00e      	b.n	801ed26 <_Balloc+0x6e>
 801ed08:	2221      	movs	r2, #33	@ 0x21
 801ed0a:	2104      	movs	r1, #4
 801ed0c:	4620      	mov	r0, r4
 801ed0e:	f000 fda1 	bl	801f854 <_calloc_r>
 801ed12:	69e3      	ldr	r3, [r4, #28]
 801ed14:	60f0      	str	r0, [r6, #12]
 801ed16:	68db      	ldr	r3, [r3, #12]
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	d1e4      	bne.n	801ece6 <_Balloc+0x2e>
 801ed1c:	2000      	movs	r0, #0
 801ed1e:	bd70      	pop	{r4, r5, r6, pc}
 801ed20:	6802      	ldr	r2, [r0, #0]
 801ed22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ed26:	2300      	movs	r3, #0
 801ed28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ed2c:	e7f7      	b.n	801ed1e <_Balloc+0x66>
 801ed2e:	bf00      	nop
 801ed30:	08020e71 	.word	0x08020e71
 801ed34:	08020ef1 	.word	0x08020ef1

0801ed38 <_Bfree>:
 801ed38:	b570      	push	{r4, r5, r6, lr}
 801ed3a:	69c6      	ldr	r6, [r0, #28]
 801ed3c:	4605      	mov	r5, r0
 801ed3e:	460c      	mov	r4, r1
 801ed40:	b976      	cbnz	r6, 801ed60 <_Bfree+0x28>
 801ed42:	2010      	movs	r0, #16
 801ed44:	f7ff ff02 	bl	801eb4c <malloc>
 801ed48:	4602      	mov	r2, r0
 801ed4a:	61e8      	str	r0, [r5, #28]
 801ed4c:	b920      	cbnz	r0, 801ed58 <_Bfree+0x20>
 801ed4e:	4b09      	ldr	r3, [pc, #36]	@ (801ed74 <_Bfree+0x3c>)
 801ed50:	4809      	ldr	r0, [pc, #36]	@ (801ed78 <_Bfree+0x40>)
 801ed52:	218f      	movs	r1, #143	@ 0x8f
 801ed54:	f000 fd60 	bl	801f818 <__assert_func>
 801ed58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ed5c:	6006      	str	r6, [r0, #0]
 801ed5e:	60c6      	str	r6, [r0, #12]
 801ed60:	b13c      	cbz	r4, 801ed72 <_Bfree+0x3a>
 801ed62:	69eb      	ldr	r3, [r5, #28]
 801ed64:	6862      	ldr	r2, [r4, #4]
 801ed66:	68db      	ldr	r3, [r3, #12]
 801ed68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ed6c:	6021      	str	r1, [r4, #0]
 801ed6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ed72:	bd70      	pop	{r4, r5, r6, pc}
 801ed74:	08020e71 	.word	0x08020e71
 801ed78:	08020ef1 	.word	0x08020ef1

0801ed7c <__multadd>:
 801ed7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed80:	690d      	ldr	r5, [r1, #16]
 801ed82:	4607      	mov	r7, r0
 801ed84:	460c      	mov	r4, r1
 801ed86:	461e      	mov	r6, r3
 801ed88:	f101 0c14 	add.w	ip, r1, #20
 801ed8c:	2000      	movs	r0, #0
 801ed8e:	f8dc 3000 	ldr.w	r3, [ip]
 801ed92:	b299      	uxth	r1, r3
 801ed94:	fb02 6101 	mla	r1, r2, r1, r6
 801ed98:	0c1e      	lsrs	r6, r3, #16
 801ed9a:	0c0b      	lsrs	r3, r1, #16
 801ed9c:	fb02 3306 	mla	r3, r2, r6, r3
 801eda0:	b289      	uxth	r1, r1
 801eda2:	3001      	adds	r0, #1
 801eda4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801eda8:	4285      	cmp	r5, r0
 801edaa:	f84c 1b04 	str.w	r1, [ip], #4
 801edae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801edb2:	dcec      	bgt.n	801ed8e <__multadd+0x12>
 801edb4:	b30e      	cbz	r6, 801edfa <__multadd+0x7e>
 801edb6:	68a3      	ldr	r3, [r4, #8]
 801edb8:	42ab      	cmp	r3, r5
 801edba:	dc19      	bgt.n	801edf0 <__multadd+0x74>
 801edbc:	6861      	ldr	r1, [r4, #4]
 801edbe:	4638      	mov	r0, r7
 801edc0:	3101      	adds	r1, #1
 801edc2:	f7ff ff79 	bl	801ecb8 <_Balloc>
 801edc6:	4680      	mov	r8, r0
 801edc8:	b928      	cbnz	r0, 801edd6 <__multadd+0x5a>
 801edca:	4602      	mov	r2, r0
 801edcc:	4b0c      	ldr	r3, [pc, #48]	@ (801ee00 <__multadd+0x84>)
 801edce:	480d      	ldr	r0, [pc, #52]	@ (801ee04 <__multadd+0x88>)
 801edd0:	21ba      	movs	r1, #186	@ 0xba
 801edd2:	f000 fd21 	bl	801f818 <__assert_func>
 801edd6:	6922      	ldr	r2, [r4, #16]
 801edd8:	3202      	adds	r2, #2
 801edda:	f104 010c 	add.w	r1, r4, #12
 801edde:	0092      	lsls	r2, r2, #2
 801ede0:	300c      	adds	r0, #12
 801ede2:	f000 fd0b 	bl	801f7fc <memcpy>
 801ede6:	4621      	mov	r1, r4
 801ede8:	4638      	mov	r0, r7
 801edea:	f7ff ffa5 	bl	801ed38 <_Bfree>
 801edee:	4644      	mov	r4, r8
 801edf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801edf4:	3501      	adds	r5, #1
 801edf6:	615e      	str	r6, [r3, #20]
 801edf8:	6125      	str	r5, [r4, #16]
 801edfa:	4620      	mov	r0, r4
 801edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee00:	08020ee0 	.word	0x08020ee0
 801ee04:	08020ef1 	.word	0x08020ef1

0801ee08 <__hi0bits>:
 801ee08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ee0c:	4603      	mov	r3, r0
 801ee0e:	bf36      	itet	cc
 801ee10:	0403      	lslcc	r3, r0, #16
 801ee12:	2000      	movcs	r0, #0
 801ee14:	2010      	movcc	r0, #16
 801ee16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ee1a:	bf3c      	itt	cc
 801ee1c:	021b      	lslcc	r3, r3, #8
 801ee1e:	3008      	addcc	r0, #8
 801ee20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ee24:	bf3c      	itt	cc
 801ee26:	011b      	lslcc	r3, r3, #4
 801ee28:	3004      	addcc	r0, #4
 801ee2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ee2e:	bf3c      	itt	cc
 801ee30:	009b      	lslcc	r3, r3, #2
 801ee32:	3002      	addcc	r0, #2
 801ee34:	2b00      	cmp	r3, #0
 801ee36:	db05      	blt.n	801ee44 <__hi0bits+0x3c>
 801ee38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ee3c:	f100 0001 	add.w	r0, r0, #1
 801ee40:	bf08      	it	eq
 801ee42:	2020      	moveq	r0, #32
 801ee44:	4770      	bx	lr

0801ee46 <__lo0bits>:
 801ee46:	6803      	ldr	r3, [r0, #0]
 801ee48:	4602      	mov	r2, r0
 801ee4a:	f013 0007 	ands.w	r0, r3, #7
 801ee4e:	d00b      	beq.n	801ee68 <__lo0bits+0x22>
 801ee50:	07d9      	lsls	r1, r3, #31
 801ee52:	d421      	bmi.n	801ee98 <__lo0bits+0x52>
 801ee54:	0798      	lsls	r0, r3, #30
 801ee56:	bf49      	itett	mi
 801ee58:	085b      	lsrmi	r3, r3, #1
 801ee5a:	089b      	lsrpl	r3, r3, #2
 801ee5c:	2001      	movmi	r0, #1
 801ee5e:	6013      	strmi	r3, [r2, #0]
 801ee60:	bf5c      	itt	pl
 801ee62:	6013      	strpl	r3, [r2, #0]
 801ee64:	2002      	movpl	r0, #2
 801ee66:	4770      	bx	lr
 801ee68:	b299      	uxth	r1, r3
 801ee6a:	b909      	cbnz	r1, 801ee70 <__lo0bits+0x2a>
 801ee6c:	0c1b      	lsrs	r3, r3, #16
 801ee6e:	2010      	movs	r0, #16
 801ee70:	b2d9      	uxtb	r1, r3
 801ee72:	b909      	cbnz	r1, 801ee78 <__lo0bits+0x32>
 801ee74:	3008      	adds	r0, #8
 801ee76:	0a1b      	lsrs	r3, r3, #8
 801ee78:	0719      	lsls	r1, r3, #28
 801ee7a:	bf04      	itt	eq
 801ee7c:	091b      	lsreq	r3, r3, #4
 801ee7e:	3004      	addeq	r0, #4
 801ee80:	0799      	lsls	r1, r3, #30
 801ee82:	bf04      	itt	eq
 801ee84:	089b      	lsreq	r3, r3, #2
 801ee86:	3002      	addeq	r0, #2
 801ee88:	07d9      	lsls	r1, r3, #31
 801ee8a:	d403      	bmi.n	801ee94 <__lo0bits+0x4e>
 801ee8c:	085b      	lsrs	r3, r3, #1
 801ee8e:	f100 0001 	add.w	r0, r0, #1
 801ee92:	d003      	beq.n	801ee9c <__lo0bits+0x56>
 801ee94:	6013      	str	r3, [r2, #0]
 801ee96:	4770      	bx	lr
 801ee98:	2000      	movs	r0, #0
 801ee9a:	4770      	bx	lr
 801ee9c:	2020      	movs	r0, #32
 801ee9e:	4770      	bx	lr

0801eea0 <__i2b>:
 801eea0:	b510      	push	{r4, lr}
 801eea2:	460c      	mov	r4, r1
 801eea4:	2101      	movs	r1, #1
 801eea6:	f7ff ff07 	bl	801ecb8 <_Balloc>
 801eeaa:	4602      	mov	r2, r0
 801eeac:	b928      	cbnz	r0, 801eeba <__i2b+0x1a>
 801eeae:	4b05      	ldr	r3, [pc, #20]	@ (801eec4 <__i2b+0x24>)
 801eeb0:	4805      	ldr	r0, [pc, #20]	@ (801eec8 <__i2b+0x28>)
 801eeb2:	f240 1145 	movw	r1, #325	@ 0x145
 801eeb6:	f000 fcaf 	bl	801f818 <__assert_func>
 801eeba:	2301      	movs	r3, #1
 801eebc:	6144      	str	r4, [r0, #20]
 801eebe:	6103      	str	r3, [r0, #16]
 801eec0:	bd10      	pop	{r4, pc}
 801eec2:	bf00      	nop
 801eec4:	08020ee0 	.word	0x08020ee0
 801eec8:	08020ef1 	.word	0x08020ef1

0801eecc <__multiply>:
 801eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eed0:	4617      	mov	r7, r2
 801eed2:	690a      	ldr	r2, [r1, #16]
 801eed4:	693b      	ldr	r3, [r7, #16]
 801eed6:	429a      	cmp	r2, r3
 801eed8:	bfa8      	it	ge
 801eeda:	463b      	movge	r3, r7
 801eedc:	4689      	mov	r9, r1
 801eede:	bfa4      	itt	ge
 801eee0:	460f      	movge	r7, r1
 801eee2:	4699      	movge	r9, r3
 801eee4:	693d      	ldr	r5, [r7, #16]
 801eee6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801eeea:	68bb      	ldr	r3, [r7, #8]
 801eeec:	6879      	ldr	r1, [r7, #4]
 801eeee:	eb05 060a 	add.w	r6, r5, sl
 801eef2:	42b3      	cmp	r3, r6
 801eef4:	b085      	sub	sp, #20
 801eef6:	bfb8      	it	lt
 801eef8:	3101      	addlt	r1, #1
 801eefa:	f7ff fedd 	bl	801ecb8 <_Balloc>
 801eefe:	b930      	cbnz	r0, 801ef0e <__multiply+0x42>
 801ef00:	4602      	mov	r2, r0
 801ef02:	4b41      	ldr	r3, [pc, #260]	@ (801f008 <__multiply+0x13c>)
 801ef04:	4841      	ldr	r0, [pc, #260]	@ (801f00c <__multiply+0x140>)
 801ef06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ef0a:	f000 fc85 	bl	801f818 <__assert_func>
 801ef0e:	f100 0414 	add.w	r4, r0, #20
 801ef12:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801ef16:	4623      	mov	r3, r4
 801ef18:	2200      	movs	r2, #0
 801ef1a:	4573      	cmp	r3, lr
 801ef1c:	d320      	bcc.n	801ef60 <__multiply+0x94>
 801ef1e:	f107 0814 	add.w	r8, r7, #20
 801ef22:	f109 0114 	add.w	r1, r9, #20
 801ef26:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801ef2a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801ef2e:	9302      	str	r3, [sp, #8]
 801ef30:	1beb      	subs	r3, r5, r7
 801ef32:	3b15      	subs	r3, #21
 801ef34:	f023 0303 	bic.w	r3, r3, #3
 801ef38:	3304      	adds	r3, #4
 801ef3a:	3715      	adds	r7, #21
 801ef3c:	42bd      	cmp	r5, r7
 801ef3e:	bf38      	it	cc
 801ef40:	2304      	movcc	r3, #4
 801ef42:	9301      	str	r3, [sp, #4]
 801ef44:	9b02      	ldr	r3, [sp, #8]
 801ef46:	9103      	str	r1, [sp, #12]
 801ef48:	428b      	cmp	r3, r1
 801ef4a:	d80c      	bhi.n	801ef66 <__multiply+0x9a>
 801ef4c:	2e00      	cmp	r6, #0
 801ef4e:	dd03      	ble.n	801ef58 <__multiply+0x8c>
 801ef50:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d055      	beq.n	801f004 <__multiply+0x138>
 801ef58:	6106      	str	r6, [r0, #16]
 801ef5a:	b005      	add	sp, #20
 801ef5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef60:	f843 2b04 	str.w	r2, [r3], #4
 801ef64:	e7d9      	b.n	801ef1a <__multiply+0x4e>
 801ef66:	f8b1 a000 	ldrh.w	sl, [r1]
 801ef6a:	f1ba 0f00 	cmp.w	sl, #0
 801ef6e:	d01f      	beq.n	801efb0 <__multiply+0xe4>
 801ef70:	46c4      	mov	ip, r8
 801ef72:	46a1      	mov	r9, r4
 801ef74:	2700      	movs	r7, #0
 801ef76:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ef7a:	f8d9 3000 	ldr.w	r3, [r9]
 801ef7e:	fa1f fb82 	uxth.w	fp, r2
 801ef82:	b29b      	uxth	r3, r3
 801ef84:	fb0a 330b 	mla	r3, sl, fp, r3
 801ef88:	443b      	add	r3, r7
 801ef8a:	f8d9 7000 	ldr.w	r7, [r9]
 801ef8e:	0c12      	lsrs	r2, r2, #16
 801ef90:	0c3f      	lsrs	r7, r7, #16
 801ef92:	fb0a 7202 	mla	r2, sl, r2, r7
 801ef96:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801ef9a:	b29b      	uxth	r3, r3
 801ef9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801efa0:	4565      	cmp	r5, ip
 801efa2:	f849 3b04 	str.w	r3, [r9], #4
 801efa6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801efaa:	d8e4      	bhi.n	801ef76 <__multiply+0xaa>
 801efac:	9b01      	ldr	r3, [sp, #4]
 801efae:	50e7      	str	r7, [r4, r3]
 801efb0:	9b03      	ldr	r3, [sp, #12]
 801efb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801efb6:	3104      	adds	r1, #4
 801efb8:	f1b9 0f00 	cmp.w	r9, #0
 801efbc:	d020      	beq.n	801f000 <__multiply+0x134>
 801efbe:	6823      	ldr	r3, [r4, #0]
 801efc0:	4647      	mov	r7, r8
 801efc2:	46a4      	mov	ip, r4
 801efc4:	f04f 0a00 	mov.w	sl, #0
 801efc8:	f8b7 b000 	ldrh.w	fp, [r7]
 801efcc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801efd0:	fb09 220b 	mla	r2, r9, fp, r2
 801efd4:	4452      	add	r2, sl
 801efd6:	b29b      	uxth	r3, r3
 801efd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801efdc:	f84c 3b04 	str.w	r3, [ip], #4
 801efe0:	f857 3b04 	ldr.w	r3, [r7], #4
 801efe4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801efe8:	f8bc 3000 	ldrh.w	r3, [ip]
 801efec:	fb09 330a 	mla	r3, r9, sl, r3
 801eff0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801eff4:	42bd      	cmp	r5, r7
 801eff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801effa:	d8e5      	bhi.n	801efc8 <__multiply+0xfc>
 801effc:	9a01      	ldr	r2, [sp, #4]
 801effe:	50a3      	str	r3, [r4, r2]
 801f000:	3404      	adds	r4, #4
 801f002:	e79f      	b.n	801ef44 <__multiply+0x78>
 801f004:	3e01      	subs	r6, #1
 801f006:	e7a1      	b.n	801ef4c <__multiply+0x80>
 801f008:	08020ee0 	.word	0x08020ee0
 801f00c:	08020ef1 	.word	0x08020ef1

0801f010 <__pow5mult>:
 801f010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f014:	4615      	mov	r5, r2
 801f016:	f012 0203 	ands.w	r2, r2, #3
 801f01a:	4607      	mov	r7, r0
 801f01c:	460e      	mov	r6, r1
 801f01e:	d007      	beq.n	801f030 <__pow5mult+0x20>
 801f020:	4c25      	ldr	r4, [pc, #148]	@ (801f0b8 <__pow5mult+0xa8>)
 801f022:	3a01      	subs	r2, #1
 801f024:	2300      	movs	r3, #0
 801f026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f02a:	f7ff fea7 	bl	801ed7c <__multadd>
 801f02e:	4606      	mov	r6, r0
 801f030:	10ad      	asrs	r5, r5, #2
 801f032:	d03d      	beq.n	801f0b0 <__pow5mult+0xa0>
 801f034:	69fc      	ldr	r4, [r7, #28]
 801f036:	b97c      	cbnz	r4, 801f058 <__pow5mult+0x48>
 801f038:	2010      	movs	r0, #16
 801f03a:	f7ff fd87 	bl	801eb4c <malloc>
 801f03e:	4602      	mov	r2, r0
 801f040:	61f8      	str	r0, [r7, #28]
 801f042:	b928      	cbnz	r0, 801f050 <__pow5mult+0x40>
 801f044:	4b1d      	ldr	r3, [pc, #116]	@ (801f0bc <__pow5mult+0xac>)
 801f046:	481e      	ldr	r0, [pc, #120]	@ (801f0c0 <__pow5mult+0xb0>)
 801f048:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801f04c:	f000 fbe4 	bl	801f818 <__assert_func>
 801f050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f054:	6004      	str	r4, [r0, #0]
 801f056:	60c4      	str	r4, [r0, #12]
 801f058:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801f05c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f060:	b94c      	cbnz	r4, 801f076 <__pow5mult+0x66>
 801f062:	f240 2171 	movw	r1, #625	@ 0x271
 801f066:	4638      	mov	r0, r7
 801f068:	f7ff ff1a 	bl	801eea0 <__i2b>
 801f06c:	2300      	movs	r3, #0
 801f06e:	f8c8 0008 	str.w	r0, [r8, #8]
 801f072:	4604      	mov	r4, r0
 801f074:	6003      	str	r3, [r0, #0]
 801f076:	f04f 0900 	mov.w	r9, #0
 801f07a:	07eb      	lsls	r3, r5, #31
 801f07c:	d50a      	bpl.n	801f094 <__pow5mult+0x84>
 801f07e:	4631      	mov	r1, r6
 801f080:	4622      	mov	r2, r4
 801f082:	4638      	mov	r0, r7
 801f084:	f7ff ff22 	bl	801eecc <__multiply>
 801f088:	4631      	mov	r1, r6
 801f08a:	4680      	mov	r8, r0
 801f08c:	4638      	mov	r0, r7
 801f08e:	f7ff fe53 	bl	801ed38 <_Bfree>
 801f092:	4646      	mov	r6, r8
 801f094:	106d      	asrs	r5, r5, #1
 801f096:	d00b      	beq.n	801f0b0 <__pow5mult+0xa0>
 801f098:	6820      	ldr	r0, [r4, #0]
 801f09a:	b938      	cbnz	r0, 801f0ac <__pow5mult+0x9c>
 801f09c:	4622      	mov	r2, r4
 801f09e:	4621      	mov	r1, r4
 801f0a0:	4638      	mov	r0, r7
 801f0a2:	f7ff ff13 	bl	801eecc <__multiply>
 801f0a6:	6020      	str	r0, [r4, #0]
 801f0a8:	f8c0 9000 	str.w	r9, [r0]
 801f0ac:	4604      	mov	r4, r0
 801f0ae:	e7e4      	b.n	801f07a <__pow5mult+0x6a>
 801f0b0:	4630      	mov	r0, r6
 801f0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f0b6:	bf00      	nop
 801f0b8:	08020fa4 	.word	0x08020fa4
 801f0bc:	08020e71 	.word	0x08020e71
 801f0c0:	08020ef1 	.word	0x08020ef1

0801f0c4 <__lshift>:
 801f0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0c8:	460c      	mov	r4, r1
 801f0ca:	6849      	ldr	r1, [r1, #4]
 801f0cc:	6923      	ldr	r3, [r4, #16]
 801f0ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f0d2:	68a3      	ldr	r3, [r4, #8]
 801f0d4:	4607      	mov	r7, r0
 801f0d6:	4691      	mov	r9, r2
 801f0d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f0dc:	f108 0601 	add.w	r6, r8, #1
 801f0e0:	42b3      	cmp	r3, r6
 801f0e2:	db0b      	blt.n	801f0fc <__lshift+0x38>
 801f0e4:	4638      	mov	r0, r7
 801f0e6:	f7ff fde7 	bl	801ecb8 <_Balloc>
 801f0ea:	4605      	mov	r5, r0
 801f0ec:	b948      	cbnz	r0, 801f102 <__lshift+0x3e>
 801f0ee:	4602      	mov	r2, r0
 801f0f0:	4b28      	ldr	r3, [pc, #160]	@ (801f194 <__lshift+0xd0>)
 801f0f2:	4829      	ldr	r0, [pc, #164]	@ (801f198 <__lshift+0xd4>)
 801f0f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f0f8:	f000 fb8e 	bl	801f818 <__assert_func>
 801f0fc:	3101      	adds	r1, #1
 801f0fe:	005b      	lsls	r3, r3, #1
 801f100:	e7ee      	b.n	801f0e0 <__lshift+0x1c>
 801f102:	2300      	movs	r3, #0
 801f104:	f100 0114 	add.w	r1, r0, #20
 801f108:	f100 0210 	add.w	r2, r0, #16
 801f10c:	4618      	mov	r0, r3
 801f10e:	4553      	cmp	r3, sl
 801f110:	db33      	blt.n	801f17a <__lshift+0xb6>
 801f112:	6920      	ldr	r0, [r4, #16]
 801f114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f118:	f104 0314 	add.w	r3, r4, #20
 801f11c:	f019 091f 	ands.w	r9, r9, #31
 801f120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f124:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f128:	d02b      	beq.n	801f182 <__lshift+0xbe>
 801f12a:	f1c9 0e20 	rsb	lr, r9, #32
 801f12e:	468a      	mov	sl, r1
 801f130:	2200      	movs	r2, #0
 801f132:	6818      	ldr	r0, [r3, #0]
 801f134:	fa00 f009 	lsl.w	r0, r0, r9
 801f138:	4310      	orrs	r0, r2
 801f13a:	f84a 0b04 	str.w	r0, [sl], #4
 801f13e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f142:	459c      	cmp	ip, r3
 801f144:	fa22 f20e 	lsr.w	r2, r2, lr
 801f148:	d8f3      	bhi.n	801f132 <__lshift+0x6e>
 801f14a:	ebac 0304 	sub.w	r3, ip, r4
 801f14e:	3b15      	subs	r3, #21
 801f150:	f023 0303 	bic.w	r3, r3, #3
 801f154:	3304      	adds	r3, #4
 801f156:	f104 0015 	add.w	r0, r4, #21
 801f15a:	4560      	cmp	r0, ip
 801f15c:	bf88      	it	hi
 801f15e:	2304      	movhi	r3, #4
 801f160:	50ca      	str	r2, [r1, r3]
 801f162:	b10a      	cbz	r2, 801f168 <__lshift+0xa4>
 801f164:	f108 0602 	add.w	r6, r8, #2
 801f168:	3e01      	subs	r6, #1
 801f16a:	4638      	mov	r0, r7
 801f16c:	612e      	str	r6, [r5, #16]
 801f16e:	4621      	mov	r1, r4
 801f170:	f7ff fde2 	bl	801ed38 <_Bfree>
 801f174:	4628      	mov	r0, r5
 801f176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f17a:	f842 0f04 	str.w	r0, [r2, #4]!
 801f17e:	3301      	adds	r3, #1
 801f180:	e7c5      	b.n	801f10e <__lshift+0x4a>
 801f182:	3904      	subs	r1, #4
 801f184:	f853 2b04 	ldr.w	r2, [r3], #4
 801f188:	f841 2f04 	str.w	r2, [r1, #4]!
 801f18c:	459c      	cmp	ip, r3
 801f18e:	d8f9      	bhi.n	801f184 <__lshift+0xc0>
 801f190:	e7ea      	b.n	801f168 <__lshift+0xa4>
 801f192:	bf00      	nop
 801f194:	08020ee0 	.word	0x08020ee0
 801f198:	08020ef1 	.word	0x08020ef1

0801f19c <__mcmp>:
 801f19c:	690a      	ldr	r2, [r1, #16]
 801f19e:	4603      	mov	r3, r0
 801f1a0:	6900      	ldr	r0, [r0, #16]
 801f1a2:	1a80      	subs	r0, r0, r2
 801f1a4:	b530      	push	{r4, r5, lr}
 801f1a6:	d10e      	bne.n	801f1c6 <__mcmp+0x2a>
 801f1a8:	3314      	adds	r3, #20
 801f1aa:	3114      	adds	r1, #20
 801f1ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f1b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f1b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f1b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f1bc:	4295      	cmp	r5, r2
 801f1be:	d003      	beq.n	801f1c8 <__mcmp+0x2c>
 801f1c0:	d205      	bcs.n	801f1ce <__mcmp+0x32>
 801f1c2:	f04f 30ff 	mov.w	r0, #4294967295
 801f1c6:	bd30      	pop	{r4, r5, pc}
 801f1c8:	42a3      	cmp	r3, r4
 801f1ca:	d3f3      	bcc.n	801f1b4 <__mcmp+0x18>
 801f1cc:	e7fb      	b.n	801f1c6 <__mcmp+0x2a>
 801f1ce:	2001      	movs	r0, #1
 801f1d0:	e7f9      	b.n	801f1c6 <__mcmp+0x2a>
	...

0801f1d4 <__mdiff>:
 801f1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1d8:	4689      	mov	r9, r1
 801f1da:	4606      	mov	r6, r0
 801f1dc:	4611      	mov	r1, r2
 801f1de:	4648      	mov	r0, r9
 801f1e0:	4614      	mov	r4, r2
 801f1e2:	f7ff ffdb 	bl	801f19c <__mcmp>
 801f1e6:	1e05      	subs	r5, r0, #0
 801f1e8:	d112      	bne.n	801f210 <__mdiff+0x3c>
 801f1ea:	4629      	mov	r1, r5
 801f1ec:	4630      	mov	r0, r6
 801f1ee:	f7ff fd63 	bl	801ecb8 <_Balloc>
 801f1f2:	4602      	mov	r2, r0
 801f1f4:	b928      	cbnz	r0, 801f202 <__mdiff+0x2e>
 801f1f6:	4b3e      	ldr	r3, [pc, #248]	@ (801f2f0 <__mdiff+0x11c>)
 801f1f8:	f240 2137 	movw	r1, #567	@ 0x237
 801f1fc:	483d      	ldr	r0, [pc, #244]	@ (801f2f4 <__mdiff+0x120>)
 801f1fe:	f000 fb0b 	bl	801f818 <__assert_func>
 801f202:	2301      	movs	r3, #1
 801f204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f208:	4610      	mov	r0, r2
 801f20a:	b003      	add	sp, #12
 801f20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f210:	bfbc      	itt	lt
 801f212:	464b      	movlt	r3, r9
 801f214:	46a1      	movlt	r9, r4
 801f216:	4630      	mov	r0, r6
 801f218:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f21c:	bfba      	itte	lt
 801f21e:	461c      	movlt	r4, r3
 801f220:	2501      	movlt	r5, #1
 801f222:	2500      	movge	r5, #0
 801f224:	f7ff fd48 	bl	801ecb8 <_Balloc>
 801f228:	4602      	mov	r2, r0
 801f22a:	b918      	cbnz	r0, 801f234 <__mdiff+0x60>
 801f22c:	4b30      	ldr	r3, [pc, #192]	@ (801f2f0 <__mdiff+0x11c>)
 801f22e:	f240 2145 	movw	r1, #581	@ 0x245
 801f232:	e7e3      	b.n	801f1fc <__mdiff+0x28>
 801f234:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f238:	6926      	ldr	r6, [r4, #16]
 801f23a:	60c5      	str	r5, [r0, #12]
 801f23c:	f109 0310 	add.w	r3, r9, #16
 801f240:	f109 0514 	add.w	r5, r9, #20
 801f244:	f104 0e14 	add.w	lr, r4, #20
 801f248:	f100 0b14 	add.w	fp, r0, #20
 801f24c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f250:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f254:	9301      	str	r3, [sp, #4]
 801f256:	46d9      	mov	r9, fp
 801f258:	f04f 0c00 	mov.w	ip, #0
 801f25c:	9b01      	ldr	r3, [sp, #4]
 801f25e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f262:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f266:	9301      	str	r3, [sp, #4]
 801f268:	b281      	uxth	r1, r0
 801f26a:	fa1f f38a 	uxth.w	r3, sl
 801f26e:	1a5b      	subs	r3, r3, r1
 801f270:	0c00      	lsrs	r0, r0, #16
 801f272:	4463      	add	r3, ip
 801f274:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f278:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f27c:	b29b      	uxth	r3, r3
 801f27e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f282:	4576      	cmp	r6, lr
 801f284:	f849 3b04 	str.w	r3, [r9], #4
 801f288:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f28c:	d8e6      	bhi.n	801f25c <__mdiff+0x88>
 801f28e:	1b33      	subs	r3, r6, r4
 801f290:	3b15      	subs	r3, #21
 801f292:	f023 0303 	bic.w	r3, r3, #3
 801f296:	3415      	adds	r4, #21
 801f298:	3304      	adds	r3, #4
 801f29a:	42a6      	cmp	r6, r4
 801f29c:	bf38      	it	cc
 801f29e:	2304      	movcc	r3, #4
 801f2a0:	441d      	add	r5, r3
 801f2a2:	445b      	add	r3, fp
 801f2a4:	461e      	mov	r6, r3
 801f2a6:	462c      	mov	r4, r5
 801f2a8:	4544      	cmp	r4, r8
 801f2aa:	d30e      	bcc.n	801f2ca <__mdiff+0xf6>
 801f2ac:	f108 0103 	add.w	r1, r8, #3
 801f2b0:	1b49      	subs	r1, r1, r5
 801f2b2:	f021 0103 	bic.w	r1, r1, #3
 801f2b6:	3d03      	subs	r5, #3
 801f2b8:	45a8      	cmp	r8, r5
 801f2ba:	bf38      	it	cc
 801f2bc:	2100      	movcc	r1, #0
 801f2be:	440b      	add	r3, r1
 801f2c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f2c4:	b191      	cbz	r1, 801f2ec <__mdiff+0x118>
 801f2c6:	6117      	str	r7, [r2, #16]
 801f2c8:	e79e      	b.n	801f208 <__mdiff+0x34>
 801f2ca:	f854 1b04 	ldr.w	r1, [r4], #4
 801f2ce:	46e6      	mov	lr, ip
 801f2d0:	0c08      	lsrs	r0, r1, #16
 801f2d2:	fa1c fc81 	uxtah	ip, ip, r1
 801f2d6:	4471      	add	r1, lr
 801f2d8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f2dc:	b289      	uxth	r1, r1
 801f2de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f2e2:	f846 1b04 	str.w	r1, [r6], #4
 801f2e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f2ea:	e7dd      	b.n	801f2a8 <__mdiff+0xd4>
 801f2ec:	3f01      	subs	r7, #1
 801f2ee:	e7e7      	b.n	801f2c0 <__mdiff+0xec>
 801f2f0:	08020ee0 	.word	0x08020ee0
 801f2f4:	08020ef1 	.word	0x08020ef1

0801f2f8 <__d2b>:
 801f2f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801f2fc:	2101      	movs	r1, #1
 801f2fe:	9e08      	ldr	r6, [sp, #32]
 801f300:	4690      	mov	r8, r2
 801f302:	4699      	mov	r9, r3
 801f304:	f7ff fcd8 	bl	801ecb8 <_Balloc>
 801f308:	4604      	mov	r4, r0
 801f30a:	b930      	cbnz	r0, 801f31a <__d2b+0x22>
 801f30c:	4602      	mov	r2, r0
 801f30e:	4b24      	ldr	r3, [pc, #144]	@ (801f3a0 <__d2b+0xa8>)
 801f310:	4824      	ldr	r0, [pc, #144]	@ (801f3a4 <__d2b+0xac>)
 801f312:	f240 310f 	movw	r1, #783	@ 0x30f
 801f316:	f000 fa7f 	bl	801f818 <__assert_func>
 801f31a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f31e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f322:	b10d      	cbz	r5, 801f328 <__d2b+0x30>
 801f324:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f328:	9301      	str	r3, [sp, #4]
 801f32a:	f1b8 0300 	subs.w	r3, r8, #0
 801f32e:	d024      	beq.n	801f37a <__d2b+0x82>
 801f330:	4668      	mov	r0, sp
 801f332:	9300      	str	r3, [sp, #0]
 801f334:	f7ff fd87 	bl	801ee46 <__lo0bits>
 801f338:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f33c:	b1d8      	cbz	r0, 801f376 <__d2b+0x7e>
 801f33e:	f1c0 0320 	rsb	r3, r0, #32
 801f342:	fa02 f303 	lsl.w	r3, r2, r3
 801f346:	430b      	orrs	r3, r1
 801f348:	40c2      	lsrs	r2, r0
 801f34a:	6163      	str	r3, [r4, #20]
 801f34c:	9201      	str	r2, [sp, #4]
 801f34e:	9b01      	ldr	r3, [sp, #4]
 801f350:	61a3      	str	r3, [r4, #24]
 801f352:	2b00      	cmp	r3, #0
 801f354:	bf0c      	ite	eq
 801f356:	2201      	moveq	r2, #1
 801f358:	2202      	movne	r2, #2
 801f35a:	6122      	str	r2, [r4, #16]
 801f35c:	b1ad      	cbz	r5, 801f38a <__d2b+0x92>
 801f35e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f362:	4405      	add	r5, r0
 801f364:	6035      	str	r5, [r6, #0]
 801f366:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f36c:	6018      	str	r0, [r3, #0]
 801f36e:	4620      	mov	r0, r4
 801f370:	b002      	add	sp, #8
 801f372:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801f376:	6161      	str	r1, [r4, #20]
 801f378:	e7e9      	b.n	801f34e <__d2b+0x56>
 801f37a:	a801      	add	r0, sp, #4
 801f37c:	f7ff fd63 	bl	801ee46 <__lo0bits>
 801f380:	9b01      	ldr	r3, [sp, #4]
 801f382:	6163      	str	r3, [r4, #20]
 801f384:	3020      	adds	r0, #32
 801f386:	2201      	movs	r2, #1
 801f388:	e7e7      	b.n	801f35a <__d2b+0x62>
 801f38a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f38e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f392:	6030      	str	r0, [r6, #0]
 801f394:	6918      	ldr	r0, [r3, #16]
 801f396:	f7ff fd37 	bl	801ee08 <__hi0bits>
 801f39a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f39e:	e7e4      	b.n	801f36a <__d2b+0x72>
 801f3a0:	08020ee0 	.word	0x08020ee0
 801f3a4:	08020ef1 	.word	0x08020ef1

0801f3a8 <__ssputs_r>:
 801f3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3ac:	688e      	ldr	r6, [r1, #8]
 801f3ae:	461f      	mov	r7, r3
 801f3b0:	42be      	cmp	r6, r7
 801f3b2:	680b      	ldr	r3, [r1, #0]
 801f3b4:	4682      	mov	sl, r0
 801f3b6:	460c      	mov	r4, r1
 801f3b8:	4690      	mov	r8, r2
 801f3ba:	d82d      	bhi.n	801f418 <__ssputs_r+0x70>
 801f3bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f3c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f3c4:	d026      	beq.n	801f414 <__ssputs_r+0x6c>
 801f3c6:	6965      	ldr	r5, [r4, #20]
 801f3c8:	6909      	ldr	r1, [r1, #16]
 801f3ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f3ce:	eba3 0901 	sub.w	r9, r3, r1
 801f3d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f3d6:	1c7b      	adds	r3, r7, #1
 801f3d8:	444b      	add	r3, r9
 801f3da:	106d      	asrs	r5, r5, #1
 801f3dc:	429d      	cmp	r5, r3
 801f3de:	bf38      	it	cc
 801f3e0:	461d      	movcc	r5, r3
 801f3e2:	0553      	lsls	r3, r2, #21
 801f3e4:	d527      	bpl.n	801f436 <__ssputs_r+0x8e>
 801f3e6:	4629      	mov	r1, r5
 801f3e8:	f7ff fbda 	bl	801eba0 <_malloc_r>
 801f3ec:	4606      	mov	r6, r0
 801f3ee:	b360      	cbz	r0, 801f44a <__ssputs_r+0xa2>
 801f3f0:	6921      	ldr	r1, [r4, #16]
 801f3f2:	464a      	mov	r2, r9
 801f3f4:	f000 fa02 	bl	801f7fc <memcpy>
 801f3f8:	89a3      	ldrh	r3, [r4, #12]
 801f3fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f3fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f402:	81a3      	strh	r3, [r4, #12]
 801f404:	6126      	str	r6, [r4, #16]
 801f406:	6165      	str	r5, [r4, #20]
 801f408:	444e      	add	r6, r9
 801f40a:	eba5 0509 	sub.w	r5, r5, r9
 801f40e:	6026      	str	r6, [r4, #0]
 801f410:	60a5      	str	r5, [r4, #8]
 801f412:	463e      	mov	r6, r7
 801f414:	42be      	cmp	r6, r7
 801f416:	d900      	bls.n	801f41a <__ssputs_r+0x72>
 801f418:	463e      	mov	r6, r7
 801f41a:	6820      	ldr	r0, [r4, #0]
 801f41c:	4632      	mov	r2, r6
 801f41e:	4641      	mov	r1, r8
 801f420:	f000 f9c2 	bl	801f7a8 <memmove>
 801f424:	68a3      	ldr	r3, [r4, #8]
 801f426:	1b9b      	subs	r3, r3, r6
 801f428:	60a3      	str	r3, [r4, #8]
 801f42a:	6823      	ldr	r3, [r4, #0]
 801f42c:	4433      	add	r3, r6
 801f42e:	6023      	str	r3, [r4, #0]
 801f430:	2000      	movs	r0, #0
 801f432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f436:	462a      	mov	r2, r5
 801f438:	f000 fa32 	bl	801f8a0 <_realloc_r>
 801f43c:	4606      	mov	r6, r0
 801f43e:	2800      	cmp	r0, #0
 801f440:	d1e0      	bne.n	801f404 <__ssputs_r+0x5c>
 801f442:	6921      	ldr	r1, [r4, #16]
 801f444:	4650      	mov	r0, sl
 801f446:	f7ff fb37 	bl	801eab8 <_free_r>
 801f44a:	230c      	movs	r3, #12
 801f44c:	f8ca 3000 	str.w	r3, [sl]
 801f450:	89a3      	ldrh	r3, [r4, #12]
 801f452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f456:	81a3      	strh	r3, [r4, #12]
 801f458:	f04f 30ff 	mov.w	r0, #4294967295
 801f45c:	e7e9      	b.n	801f432 <__ssputs_r+0x8a>
	...

0801f460 <_svfiprintf_r>:
 801f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f464:	4698      	mov	r8, r3
 801f466:	898b      	ldrh	r3, [r1, #12]
 801f468:	061b      	lsls	r3, r3, #24
 801f46a:	b09d      	sub	sp, #116	@ 0x74
 801f46c:	4607      	mov	r7, r0
 801f46e:	460d      	mov	r5, r1
 801f470:	4614      	mov	r4, r2
 801f472:	d510      	bpl.n	801f496 <_svfiprintf_r+0x36>
 801f474:	690b      	ldr	r3, [r1, #16]
 801f476:	b973      	cbnz	r3, 801f496 <_svfiprintf_r+0x36>
 801f478:	2140      	movs	r1, #64	@ 0x40
 801f47a:	f7ff fb91 	bl	801eba0 <_malloc_r>
 801f47e:	6028      	str	r0, [r5, #0]
 801f480:	6128      	str	r0, [r5, #16]
 801f482:	b930      	cbnz	r0, 801f492 <_svfiprintf_r+0x32>
 801f484:	230c      	movs	r3, #12
 801f486:	603b      	str	r3, [r7, #0]
 801f488:	f04f 30ff 	mov.w	r0, #4294967295
 801f48c:	b01d      	add	sp, #116	@ 0x74
 801f48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f492:	2340      	movs	r3, #64	@ 0x40
 801f494:	616b      	str	r3, [r5, #20]
 801f496:	2300      	movs	r3, #0
 801f498:	9309      	str	r3, [sp, #36]	@ 0x24
 801f49a:	2320      	movs	r3, #32
 801f49c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f4a0:	f8cd 800c 	str.w	r8, [sp, #12]
 801f4a4:	2330      	movs	r3, #48	@ 0x30
 801f4a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801f644 <_svfiprintf_r+0x1e4>
 801f4aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f4ae:	f04f 0901 	mov.w	r9, #1
 801f4b2:	4623      	mov	r3, r4
 801f4b4:	469a      	mov	sl, r3
 801f4b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f4ba:	b10a      	cbz	r2, 801f4c0 <_svfiprintf_r+0x60>
 801f4bc:	2a25      	cmp	r2, #37	@ 0x25
 801f4be:	d1f9      	bne.n	801f4b4 <_svfiprintf_r+0x54>
 801f4c0:	ebba 0b04 	subs.w	fp, sl, r4
 801f4c4:	d00b      	beq.n	801f4de <_svfiprintf_r+0x7e>
 801f4c6:	465b      	mov	r3, fp
 801f4c8:	4622      	mov	r2, r4
 801f4ca:	4629      	mov	r1, r5
 801f4cc:	4638      	mov	r0, r7
 801f4ce:	f7ff ff6b 	bl	801f3a8 <__ssputs_r>
 801f4d2:	3001      	adds	r0, #1
 801f4d4:	f000 80a7 	beq.w	801f626 <_svfiprintf_r+0x1c6>
 801f4d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f4da:	445a      	add	r2, fp
 801f4dc:	9209      	str	r2, [sp, #36]	@ 0x24
 801f4de:	f89a 3000 	ldrb.w	r3, [sl]
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	f000 809f 	beq.w	801f626 <_svfiprintf_r+0x1c6>
 801f4e8:	2300      	movs	r3, #0
 801f4ea:	f04f 32ff 	mov.w	r2, #4294967295
 801f4ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f4f2:	f10a 0a01 	add.w	sl, sl, #1
 801f4f6:	9304      	str	r3, [sp, #16]
 801f4f8:	9307      	str	r3, [sp, #28]
 801f4fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f4fe:	931a      	str	r3, [sp, #104]	@ 0x68
 801f500:	4654      	mov	r4, sl
 801f502:	2205      	movs	r2, #5
 801f504:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f508:	484e      	ldr	r0, [pc, #312]	@ (801f644 <_svfiprintf_r+0x1e4>)
 801f50a:	f7e0 fe39 	bl	8000180 <memchr>
 801f50e:	9a04      	ldr	r2, [sp, #16]
 801f510:	b9d8      	cbnz	r0, 801f54a <_svfiprintf_r+0xea>
 801f512:	06d0      	lsls	r0, r2, #27
 801f514:	bf44      	itt	mi
 801f516:	2320      	movmi	r3, #32
 801f518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f51c:	0711      	lsls	r1, r2, #28
 801f51e:	bf44      	itt	mi
 801f520:	232b      	movmi	r3, #43	@ 0x2b
 801f522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f526:	f89a 3000 	ldrb.w	r3, [sl]
 801f52a:	2b2a      	cmp	r3, #42	@ 0x2a
 801f52c:	d015      	beq.n	801f55a <_svfiprintf_r+0xfa>
 801f52e:	9a07      	ldr	r2, [sp, #28]
 801f530:	4654      	mov	r4, sl
 801f532:	2000      	movs	r0, #0
 801f534:	f04f 0c0a 	mov.w	ip, #10
 801f538:	4621      	mov	r1, r4
 801f53a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f53e:	3b30      	subs	r3, #48	@ 0x30
 801f540:	2b09      	cmp	r3, #9
 801f542:	d94b      	bls.n	801f5dc <_svfiprintf_r+0x17c>
 801f544:	b1b0      	cbz	r0, 801f574 <_svfiprintf_r+0x114>
 801f546:	9207      	str	r2, [sp, #28]
 801f548:	e014      	b.n	801f574 <_svfiprintf_r+0x114>
 801f54a:	eba0 0308 	sub.w	r3, r0, r8
 801f54e:	fa09 f303 	lsl.w	r3, r9, r3
 801f552:	4313      	orrs	r3, r2
 801f554:	9304      	str	r3, [sp, #16]
 801f556:	46a2      	mov	sl, r4
 801f558:	e7d2      	b.n	801f500 <_svfiprintf_r+0xa0>
 801f55a:	9b03      	ldr	r3, [sp, #12]
 801f55c:	1d19      	adds	r1, r3, #4
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	9103      	str	r1, [sp, #12]
 801f562:	2b00      	cmp	r3, #0
 801f564:	bfbb      	ittet	lt
 801f566:	425b      	neglt	r3, r3
 801f568:	f042 0202 	orrlt.w	r2, r2, #2
 801f56c:	9307      	strge	r3, [sp, #28]
 801f56e:	9307      	strlt	r3, [sp, #28]
 801f570:	bfb8      	it	lt
 801f572:	9204      	strlt	r2, [sp, #16]
 801f574:	7823      	ldrb	r3, [r4, #0]
 801f576:	2b2e      	cmp	r3, #46	@ 0x2e
 801f578:	d10a      	bne.n	801f590 <_svfiprintf_r+0x130>
 801f57a:	7863      	ldrb	r3, [r4, #1]
 801f57c:	2b2a      	cmp	r3, #42	@ 0x2a
 801f57e:	d132      	bne.n	801f5e6 <_svfiprintf_r+0x186>
 801f580:	9b03      	ldr	r3, [sp, #12]
 801f582:	1d1a      	adds	r2, r3, #4
 801f584:	681b      	ldr	r3, [r3, #0]
 801f586:	9203      	str	r2, [sp, #12]
 801f588:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f58c:	3402      	adds	r4, #2
 801f58e:	9305      	str	r3, [sp, #20]
 801f590:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 801f648 <_svfiprintf_r+0x1e8>
 801f594:	7821      	ldrb	r1, [r4, #0]
 801f596:	2203      	movs	r2, #3
 801f598:	4650      	mov	r0, sl
 801f59a:	f7e0 fdf1 	bl	8000180 <memchr>
 801f59e:	b138      	cbz	r0, 801f5b0 <_svfiprintf_r+0x150>
 801f5a0:	9b04      	ldr	r3, [sp, #16]
 801f5a2:	eba0 000a 	sub.w	r0, r0, sl
 801f5a6:	2240      	movs	r2, #64	@ 0x40
 801f5a8:	4082      	lsls	r2, r0
 801f5aa:	4313      	orrs	r3, r2
 801f5ac:	3401      	adds	r4, #1
 801f5ae:	9304      	str	r3, [sp, #16]
 801f5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f5b4:	4825      	ldr	r0, [pc, #148]	@ (801f64c <_svfiprintf_r+0x1ec>)
 801f5b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f5ba:	2206      	movs	r2, #6
 801f5bc:	f7e0 fde0 	bl	8000180 <memchr>
 801f5c0:	2800      	cmp	r0, #0
 801f5c2:	d036      	beq.n	801f632 <_svfiprintf_r+0x1d2>
 801f5c4:	4b22      	ldr	r3, [pc, #136]	@ (801f650 <_svfiprintf_r+0x1f0>)
 801f5c6:	bb1b      	cbnz	r3, 801f610 <_svfiprintf_r+0x1b0>
 801f5c8:	9b03      	ldr	r3, [sp, #12]
 801f5ca:	3307      	adds	r3, #7
 801f5cc:	f023 0307 	bic.w	r3, r3, #7
 801f5d0:	3308      	adds	r3, #8
 801f5d2:	9303      	str	r3, [sp, #12]
 801f5d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5d6:	4433      	add	r3, r6
 801f5d8:	9309      	str	r3, [sp, #36]	@ 0x24
 801f5da:	e76a      	b.n	801f4b2 <_svfiprintf_r+0x52>
 801f5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 801f5e0:	460c      	mov	r4, r1
 801f5e2:	2001      	movs	r0, #1
 801f5e4:	e7a8      	b.n	801f538 <_svfiprintf_r+0xd8>
 801f5e6:	2300      	movs	r3, #0
 801f5e8:	3401      	adds	r4, #1
 801f5ea:	9305      	str	r3, [sp, #20]
 801f5ec:	4619      	mov	r1, r3
 801f5ee:	f04f 0c0a 	mov.w	ip, #10
 801f5f2:	4620      	mov	r0, r4
 801f5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f5f8:	3a30      	subs	r2, #48	@ 0x30
 801f5fa:	2a09      	cmp	r2, #9
 801f5fc:	d903      	bls.n	801f606 <_svfiprintf_r+0x1a6>
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d0c6      	beq.n	801f590 <_svfiprintf_r+0x130>
 801f602:	9105      	str	r1, [sp, #20]
 801f604:	e7c4      	b.n	801f590 <_svfiprintf_r+0x130>
 801f606:	fb0c 2101 	mla	r1, ip, r1, r2
 801f60a:	4604      	mov	r4, r0
 801f60c:	2301      	movs	r3, #1
 801f60e:	e7f0      	b.n	801f5f2 <_svfiprintf_r+0x192>
 801f610:	ab03      	add	r3, sp, #12
 801f612:	9300      	str	r3, [sp, #0]
 801f614:	462a      	mov	r2, r5
 801f616:	4b0f      	ldr	r3, [pc, #60]	@ (801f654 <_svfiprintf_r+0x1f4>)
 801f618:	a904      	add	r1, sp, #16
 801f61a:	4638      	mov	r0, r7
 801f61c:	f7fd fe7a 	bl	801d314 <_printf_float>
 801f620:	1c42      	adds	r2, r0, #1
 801f622:	4606      	mov	r6, r0
 801f624:	d1d6      	bne.n	801f5d4 <_svfiprintf_r+0x174>
 801f626:	89ab      	ldrh	r3, [r5, #12]
 801f628:	065b      	lsls	r3, r3, #25
 801f62a:	f53f af2d 	bmi.w	801f488 <_svfiprintf_r+0x28>
 801f62e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f630:	e72c      	b.n	801f48c <_svfiprintf_r+0x2c>
 801f632:	ab03      	add	r3, sp, #12
 801f634:	9300      	str	r3, [sp, #0]
 801f636:	462a      	mov	r2, r5
 801f638:	4b06      	ldr	r3, [pc, #24]	@ (801f654 <_svfiprintf_r+0x1f4>)
 801f63a:	a904      	add	r1, sp, #16
 801f63c:	4638      	mov	r0, r7
 801f63e:	f7fe f903 	bl	801d848 <_printf_i>
 801f642:	e7ed      	b.n	801f620 <_svfiprintf_r+0x1c0>
 801f644:	08020f4a 	.word	0x08020f4a
 801f648:	08020f50 	.word	0x08020f50
 801f64c:	08020f54 	.word	0x08020f54
 801f650:	0801d315 	.word	0x0801d315
 801f654:	0801f3a9 	.word	0x0801f3a9

0801f658 <__sflush_r>:
 801f658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f65e:	0716      	lsls	r6, r2, #28
 801f660:	4605      	mov	r5, r0
 801f662:	460c      	mov	r4, r1
 801f664:	d454      	bmi.n	801f710 <__sflush_r+0xb8>
 801f666:	684b      	ldr	r3, [r1, #4]
 801f668:	2b00      	cmp	r3, #0
 801f66a:	dc02      	bgt.n	801f672 <__sflush_r+0x1a>
 801f66c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f66e:	2b00      	cmp	r3, #0
 801f670:	dd48      	ble.n	801f704 <__sflush_r+0xac>
 801f672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f674:	2e00      	cmp	r6, #0
 801f676:	d045      	beq.n	801f704 <__sflush_r+0xac>
 801f678:	2300      	movs	r3, #0
 801f67a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f67e:	682f      	ldr	r7, [r5, #0]
 801f680:	6a21      	ldr	r1, [r4, #32]
 801f682:	602b      	str	r3, [r5, #0]
 801f684:	d030      	beq.n	801f6e8 <__sflush_r+0x90>
 801f686:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f688:	89a3      	ldrh	r3, [r4, #12]
 801f68a:	0759      	lsls	r1, r3, #29
 801f68c:	d505      	bpl.n	801f69a <__sflush_r+0x42>
 801f68e:	6863      	ldr	r3, [r4, #4]
 801f690:	1ad2      	subs	r2, r2, r3
 801f692:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f694:	b10b      	cbz	r3, 801f69a <__sflush_r+0x42>
 801f696:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f698:	1ad2      	subs	r2, r2, r3
 801f69a:	2300      	movs	r3, #0
 801f69c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f69e:	6a21      	ldr	r1, [r4, #32]
 801f6a0:	4628      	mov	r0, r5
 801f6a2:	47b0      	blx	r6
 801f6a4:	1c43      	adds	r3, r0, #1
 801f6a6:	89a3      	ldrh	r3, [r4, #12]
 801f6a8:	d106      	bne.n	801f6b8 <__sflush_r+0x60>
 801f6aa:	6829      	ldr	r1, [r5, #0]
 801f6ac:	291d      	cmp	r1, #29
 801f6ae:	d82b      	bhi.n	801f708 <__sflush_r+0xb0>
 801f6b0:	4a28      	ldr	r2, [pc, #160]	@ (801f754 <__sflush_r+0xfc>)
 801f6b2:	40ca      	lsrs	r2, r1
 801f6b4:	07d6      	lsls	r6, r2, #31
 801f6b6:	d527      	bpl.n	801f708 <__sflush_r+0xb0>
 801f6b8:	2200      	movs	r2, #0
 801f6ba:	6062      	str	r2, [r4, #4]
 801f6bc:	04d9      	lsls	r1, r3, #19
 801f6be:	6922      	ldr	r2, [r4, #16]
 801f6c0:	6022      	str	r2, [r4, #0]
 801f6c2:	d504      	bpl.n	801f6ce <__sflush_r+0x76>
 801f6c4:	1c42      	adds	r2, r0, #1
 801f6c6:	d101      	bne.n	801f6cc <__sflush_r+0x74>
 801f6c8:	682b      	ldr	r3, [r5, #0]
 801f6ca:	b903      	cbnz	r3, 801f6ce <__sflush_r+0x76>
 801f6cc:	6560      	str	r0, [r4, #84]	@ 0x54
 801f6ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f6d0:	602f      	str	r7, [r5, #0]
 801f6d2:	b1b9      	cbz	r1, 801f704 <__sflush_r+0xac>
 801f6d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f6d8:	4299      	cmp	r1, r3
 801f6da:	d002      	beq.n	801f6e2 <__sflush_r+0x8a>
 801f6dc:	4628      	mov	r0, r5
 801f6de:	f7ff f9eb 	bl	801eab8 <_free_r>
 801f6e2:	2300      	movs	r3, #0
 801f6e4:	6363      	str	r3, [r4, #52]	@ 0x34
 801f6e6:	e00d      	b.n	801f704 <__sflush_r+0xac>
 801f6e8:	2301      	movs	r3, #1
 801f6ea:	4628      	mov	r0, r5
 801f6ec:	47b0      	blx	r6
 801f6ee:	4602      	mov	r2, r0
 801f6f0:	1c50      	adds	r0, r2, #1
 801f6f2:	d1c9      	bne.n	801f688 <__sflush_r+0x30>
 801f6f4:	682b      	ldr	r3, [r5, #0]
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d0c6      	beq.n	801f688 <__sflush_r+0x30>
 801f6fa:	2b1d      	cmp	r3, #29
 801f6fc:	d001      	beq.n	801f702 <__sflush_r+0xaa>
 801f6fe:	2b16      	cmp	r3, #22
 801f700:	d11d      	bne.n	801f73e <__sflush_r+0xe6>
 801f702:	602f      	str	r7, [r5, #0]
 801f704:	2000      	movs	r0, #0
 801f706:	e021      	b.n	801f74c <__sflush_r+0xf4>
 801f708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f70c:	b21b      	sxth	r3, r3
 801f70e:	e01a      	b.n	801f746 <__sflush_r+0xee>
 801f710:	690f      	ldr	r7, [r1, #16]
 801f712:	2f00      	cmp	r7, #0
 801f714:	d0f6      	beq.n	801f704 <__sflush_r+0xac>
 801f716:	0793      	lsls	r3, r2, #30
 801f718:	680e      	ldr	r6, [r1, #0]
 801f71a:	bf08      	it	eq
 801f71c:	694b      	ldreq	r3, [r1, #20]
 801f71e:	600f      	str	r7, [r1, #0]
 801f720:	bf18      	it	ne
 801f722:	2300      	movne	r3, #0
 801f724:	1bf6      	subs	r6, r6, r7
 801f726:	608b      	str	r3, [r1, #8]
 801f728:	2e00      	cmp	r6, #0
 801f72a:	ddeb      	ble.n	801f704 <__sflush_r+0xac>
 801f72c:	6a21      	ldr	r1, [r4, #32]
 801f72e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801f732:	4633      	mov	r3, r6
 801f734:	463a      	mov	r2, r7
 801f736:	4628      	mov	r0, r5
 801f738:	47e0      	blx	ip
 801f73a:	2800      	cmp	r0, #0
 801f73c:	dc07      	bgt.n	801f74e <__sflush_r+0xf6>
 801f73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f746:	81a3      	strh	r3, [r4, #12]
 801f748:	f04f 30ff 	mov.w	r0, #4294967295
 801f74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f74e:	4407      	add	r7, r0
 801f750:	1a36      	subs	r6, r6, r0
 801f752:	e7e9      	b.n	801f728 <__sflush_r+0xd0>
 801f754:	20400001 	.word	0x20400001

0801f758 <_fflush_r>:
 801f758:	b538      	push	{r3, r4, r5, lr}
 801f75a:	690b      	ldr	r3, [r1, #16]
 801f75c:	4605      	mov	r5, r0
 801f75e:	460c      	mov	r4, r1
 801f760:	b913      	cbnz	r3, 801f768 <_fflush_r+0x10>
 801f762:	2500      	movs	r5, #0
 801f764:	4628      	mov	r0, r5
 801f766:	bd38      	pop	{r3, r4, r5, pc}
 801f768:	b118      	cbz	r0, 801f772 <_fflush_r+0x1a>
 801f76a:	6a03      	ldr	r3, [r0, #32]
 801f76c:	b90b      	cbnz	r3, 801f772 <_fflush_r+0x1a>
 801f76e:	f7fe fa15 	bl	801db9c <__sinit>
 801f772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f776:	2b00      	cmp	r3, #0
 801f778:	d0f3      	beq.n	801f762 <_fflush_r+0xa>
 801f77a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f77c:	07d0      	lsls	r0, r2, #31
 801f77e:	d404      	bmi.n	801f78a <_fflush_r+0x32>
 801f780:	0599      	lsls	r1, r3, #22
 801f782:	d402      	bmi.n	801f78a <_fflush_r+0x32>
 801f784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f786:	f7fe fb3c 	bl	801de02 <__retarget_lock_acquire_recursive>
 801f78a:	4628      	mov	r0, r5
 801f78c:	4621      	mov	r1, r4
 801f78e:	f7ff ff63 	bl	801f658 <__sflush_r>
 801f792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f794:	07da      	lsls	r2, r3, #31
 801f796:	4605      	mov	r5, r0
 801f798:	d4e4      	bmi.n	801f764 <_fflush_r+0xc>
 801f79a:	89a3      	ldrh	r3, [r4, #12]
 801f79c:	059b      	lsls	r3, r3, #22
 801f79e:	d4e1      	bmi.n	801f764 <_fflush_r+0xc>
 801f7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f7a2:	f7fe fb2f 	bl	801de04 <__retarget_lock_release_recursive>
 801f7a6:	e7dd      	b.n	801f764 <_fflush_r+0xc>

0801f7a8 <memmove>:
 801f7a8:	4288      	cmp	r0, r1
 801f7aa:	b510      	push	{r4, lr}
 801f7ac:	eb01 0402 	add.w	r4, r1, r2
 801f7b0:	d902      	bls.n	801f7b8 <memmove+0x10>
 801f7b2:	4284      	cmp	r4, r0
 801f7b4:	4623      	mov	r3, r4
 801f7b6:	d807      	bhi.n	801f7c8 <memmove+0x20>
 801f7b8:	1e43      	subs	r3, r0, #1
 801f7ba:	42a1      	cmp	r1, r4
 801f7bc:	d008      	beq.n	801f7d0 <memmove+0x28>
 801f7be:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f7c6:	e7f8      	b.n	801f7ba <memmove+0x12>
 801f7c8:	4402      	add	r2, r0
 801f7ca:	4601      	mov	r1, r0
 801f7cc:	428a      	cmp	r2, r1
 801f7ce:	d100      	bne.n	801f7d2 <memmove+0x2a>
 801f7d0:	bd10      	pop	{r4, pc}
 801f7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f7da:	e7f7      	b.n	801f7cc <memmove+0x24>

0801f7dc <_sbrk_r>:
 801f7dc:	b538      	push	{r3, r4, r5, lr}
 801f7de:	4d06      	ldr	r5, [pc, #24]	@ (801f7f8 <_sbrk_r+0x1c>)
 801f7e0:	2300      	movs	r3, #0
 801f7e2:	4604      	mov	r4, r0
 801f7e4:	4608      	mov	r0, r1
 801f7e6:	602b      	str	r3, [r5, #0]
 801f7e8:	f7e3 f9a0 	bl	8002b2c <_sbrk>
 801f7ec:	1c43      	adds	r3, r0, #1
 801f7ee:	d102      	bne.n	801f7f6 <_sbrk_r+0x1a>
 801f7f0:	682b      	ldr	r3, [r5, #0]
 801f7f2:	b103      	cbz	r3, 801f7f6 <_sbrk_r+0x1a>
 801f7f4:	6023      	str	r3, [r4, #0]
 801f7f6:	bd38      	pop	{r3, r4, r5, pc}
 801f7f8:	2000267c 	.word	0x2000267c

0801f7fc <memcpy>:
 801f7fc:	440a      	add	r2, r1
 801f7fe:	4291      	cmp	r1, r2
 801f800:	f100 33ff 	add.w	r3, r0, #4294967295
 801f804:	d100      	bne.n	801f808 <memcpy+0xc>
 801f806:	4770      	bx	lr
 801f808:	b510      	push	{r4, lr}
 801f80a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f80e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f812:	4291      	cmp	r1, r2
 801f814:	d1f9      	bne.n	801f80a <memcpy+0xe>
 801f816:	bd10      	pop	{r4, pc}

0801f818 <__assert_func>:
 801f818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f81a:	4614      	mov	r4, r2
 801f81c:	461a      	mov	r2, r3
 801f81e:	4b09      	ldr	r3, [pc, #36]	@ (801f844 <__assert_func+0x2c>)
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	4605      	mov	r5, r0
 801f824:	68d8      	ldr	r0, [r3, #12]
 801f826:	b14c      	cbz	r4, 801f83c <__assert_func+0x24>
 801f828:	4b07      	ldr	r3, [pc, #28]	@ (801f848 <__assert_func+0x30>)
 801f82a:	9100      	str	r1, [sp, #0]
 801f82c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f830:	4906      	ldr	r1, [pc, #24]	@ (801f84c <__assert_func+0x34>)
 801f832:	462b      	mov	r3, r5
 801f834:	f000 f870 	bl	801f918 <fiprintf>
 801f838:	f000 f880 	bl	801f93c <abort>
 801f83c:	4b04      	ldr	r3, [pc, #16]	@ (801f850 <__assert_func+0x38>)
 801f83e:	461c      	mov	r4, r3
 801f840:	e7f3      	b.n	801f82a <__assert_func+0x12>
 801f842:	bf00      	nop
 801f844:	2000014c 	.word	0x2000014c
 801f848:	08020f65 	.word	0x08020f65
 801f84c:	08020f72 	.word	0x08020f72
 801f850:	08020fa0 	.word	0x08020fa0

0801f854 <_calloc_r>:
 801f854:	b570      	push	{r4, r5, r6, lr}
 801f856:	fba1 5402 	umull	r5, r4, r1, r2
 801f85a:	b934      	cbnz	r4, 801f86a <_calloc_r+0x16>
 801f85c:	4629      	mov	r1, r5
 801f85e:	f7ff f99f 	bl	801eba0 <_malloc_r>
 801f862:	4606      	mov	r6, r0
 801f864:	b928      	cbnz	r0, 801f872 <_calloc_r+0x1e>
 801f866:	4630      	mov	r0, r6
 801f868:	bd70      	pop	{r4, r5, r6, pc}
 801f86a:	220c      	movs	r2, #12
 801f86c:	6002      	str	r2, [r0, #0]
 801f86e:	2600      	movs	r6, #0
 801f870:	e7f9      	b.n	801f866 <_calloc_r+0x12>
 801f872:	462a      	mov	r2, r5
 801f874:	4621      	mov	r1, r4
 801f876:	f7fe fa47 	bl	801dd08 <memset>
 801f87a:	e7f4      	b.n	801f866 <_calloc_r+0x12>

0801f87c <__ascii_mbtowc>:
 801f87c:	b082      	sub	sp, #8
 801f87e:	b901      	cbnz	r1, 801f882 <__ascii_mbtowc+0x6>
 801f880:	a901      	add	r1, sp, #4
 801f882:	b142      	cbz	r2, 801f896 <__ascii_mbtowc+0x1a>
 801f884:	b14b      	cbz	r3, 801f89a <__ascii_mbtowc+0x1e>
 801f886:	7813      	ldrb	r3, [r2, #0]
 801f888:	600b      	str	r3, [r1, #0]
 801f88a:	7812      	ldrb	r2, [r2, #0]
 801f88c:	1e10      	subs	r0, r2, #0
 801f88e:	bf18      	it	ne
 801f890:	2001      	movne	r0, #1
 801f892:	b002      	add	sp, #8
 801f894:	4770      	bx	lr
 801f896:	4610      	mov	r0, r2
 801f898:	e7fb      	b.n	801f892 <__ascii_mbtowc+0x16>
 801f89a:	f06f 0001 	mvn.w	r0, #1
 801f89e:	e7f8      	b.n	801f892 <__ascii_mbtowc+0x16>

0801f8a0 <_realloc_r>:
 801f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8a4:	4607      	mov	r7, r0
 801f8a6:	4614      	mov	r4, r2
 801f8a8:	460d      	mov	r5, r1
 801f8aa:	b921      	cbnz	r1, 801f8b6 <_realloc_r+0x16>
 801f8ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f8b0:	4611      	mov	r1, r2
 801f8b2:	f7ff b975 	b.w	801eba0 <_malloc_r>
 801f8b6:	b92a      	cbnz	r2, 801f8c4 <_realloc_r+0x24>
 801f8b8:	f7ff f8fe 	bl	801eab8 <_free_r>
 801f8bc:	4625      	mov	r5, r4
 801f8be:	4628      	mov	r0, r5
 801f8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8c4:	f000 f841 	bl	801f94a <_malloc_usable_size_r>
 801f8c8:	4284      	cmp	r4, r0
 801f8ca:	4606      	mov	r6, r0
 801f8cc:	d802      	bhi.n	801f8d4 <_realloc_r+0x34>
 801f8ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f8d2:	d8f4      	bhi.n	801f8be <_realloc_r+0x1e>
 801f8d4:	4621      	mov	r1, r4
 801f8d6:	4638      	mov	r0, r7
 801f8d8:	f7ff f962 	bl	801eba0 <_malloc_r>
 801f8dc:	4680      	mov	r8, r0
 801f8de:	b908      	cbnz	r0, 801f8e4 <_realloc_r+0x44>
 801f8e0:	4645      	mov	r5, r8
 801f8e2:	e7ec      	b.n	801f8be <_realloc_r+0x1e>
 801f8e4:	42b4      	cmp	r4, r6
 801f8e6:	4622      	mov	r2, r4
 801f8e8:	4629      	mov	r1, r5
 801f8ea:	bf28      	it	cs
 801f8ec:	4632      	movcs	r2, r6
 801f8ee:	f7ff ff85 	bl	801f7fc <memcpy>
 801f8f2:	4629      	mov	r1, r5
 801f8f4:	4638      	mov	r0, r7
 801f8f6:	f7ff f8df 	bl	801eab8 <_free_r>
 801f8fa:	e7f1      	b.n	801f8e0 <_realloc_r+0x40>

0801f8fc <__ascii_wctomb>:
 801f8fc:	4603      	mov	r3, r0
 801f8fe:	4608      	mov	r0, r1
 801f900:	b141      	cbz	r1, 801f914 <__ascii_wctomb+0x18>
 801f902:	2aff      	cmp	r2, #255	@ 0xff
 801f904:	d904      	bls.n	801f910 <__ascii_wctomb+0x14>
 801f906:	228a      	movs	r2, #138	@ 0x8a
 801f908:	601a      	str	r2, [r3, #0]
 801f90a:	f04f 30ff 	mov.w	r0, #4294967295
 801f90e:	4770      	bx	lr
 801f910:	700a      	strb	r2, [r1, #0]
 801f912:	2001      	movs	r0, #1
 801f914:	4770      	bx	lr
	...

0801f918 <fiprintf>:
 801f918:	b40e      	push	{r1, r2, r3}
 801f91a:	b503      	push	{r0, r1, lr}
 801f91c:	4601      	mov	r1, r0
 801f91e:	ab03      	add	r3, sp, #12
 801f920:	4805      	ldr	r0, [pc, #20]	@ (801f938 <fiprintf+0x20>)
 801f922:	f853 2b04 	ldr.w	r2, [r3], #4
 801f926:	6800      	ldr	r0, [r0, #0]
 801f928:	9301      	str	r3, [sp, #4]
 801f92a:	f000 f83d 	bl	801f9a8 <_vfiprintf_r>
 801f92e:	b002      	add	sp, #8
 801f930:	f85d eb04 	ldr.w	lr, [sp], #4
 801f934:	b003      	add	sp, #12
 801f936:	4770      	bx	lr
 801f938:	2000014c 	.word	0x2000014c

0801f93c <abort>:
 801f93c:	b508      	push	{r3, lr}
 801f93e:	2006      	movs	r0, #6
 801f940:	f000 fa06 	bl	801fd50 <raise>
 801f944:	2001      	movs	r0, #1
 801f946:	f7e3 f87d 	bl	8002a44 <_exit>

0801f94a <_malloc_usable_size_r>:
 801f94a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f94e:	1f18      	subs	r0, r3, #4
 801f950:	2b00      	cmp	r3, #0
 801f952:	bfbc      	itt	lt
 801f954:	580b      	ldrlt	r3, [r1, r0]
 801f956:	18c0      	addlt	r0, r0, r3
 801f958:	4770      	bx	lr

0801f95a <__sfputc_r>:
 801f95a:	6893      	ldr	r3, [r2, #8]
 801f95c:	3b01      	subs	r3, #1
 801f95e:	2b00      	cmp	r3, #0
 801f960:	b410      	push	{r4}
 801f962:	6093      	str	r3, [r2, #8]
 801f964:	da07      	bge.n	801f976 <__sfputc_r+0x1c>
 801f966:	6994      	ldr	r4, [r2, #24]
 801f968:	42a3      	cmp	r3, r4
 801f96a:	db01      	blt.n	801f970 <__sfputc_r+0x16>
 801f96c:	290a      	cmp	r1, #10
 801f96e:	d102      	bne.n	801f976 <__sfputc_r+0x1c>
 801f970:	bc10      	pop	{r4}
 801f972:	f000 b931 	b.w	801fbd8 <__swbuf_r>
 801f976:	6813      	ldr	r3, [r2, #0]
 801f978:	1c58      	adds	r0, r3, #1
 801f97a:	6010      	str	r0, [r2, #0]
 801f97c:	7019      	strb	r1, [r3, #0]
 801f97e:	4608      	mov	r0, r1
 801f980:	bc10      	pop	{r4}
 801f982:	4770      	bx	lr

0801f984 <__sfputs_r>:
 801f984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f986:	4606      	mov	r6, r0
 801f988:	460f      	mov	r7, r1
 801f98a:	4614      	mov	r4, r2
 801f98c:	18d5      	adds	r5, r2, r3
 801f98e:	42ac      	cmp	r4, r5
 801f990:	d101      	bne.n	801f996 <__sfputs_r+0x12>
 801f992:	2000      	movs	r0, #0
 801f994:	e007      	b.n	801f9a6 <__sfputs_r+0x22>
 801f996:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f99a:	463a      	mov	r2, r7
 801f99c:	4630      	mov	r0, r6
 801f99e:	f7ff ffdc 	bl	801f95a <__sfputc_r>
 801f9a2:	1c43      	adds	r3, r0, #1
 801f9a4:	d1f3      	bne.n	801f98e <__sfputs_r+0xa>
 801f9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f9a8 <_vfiprintf_r>:
 801f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9ac:	460d      	mov	r5, r1
 801f9ae:	b09d      	sub	sp, #116	@ 0x74
 801f9b0:	4614      	mov	r4, r2
 801f9b2:	4698      	mov	r8, r3
 801f9b4:	4606      	mov	r6, r0
 801f9b6:	b118      	cbz	r0, 801f9c0 <_vfiprintf_r+0x18>
 801f9b8:	6a03      	ldr	r3, [r0, #32]
 801f9ba:	b90b      	cbnz	r3, 801f9c0 <_vfiprintf_r+0x18>
 801f9bc:	f7fe f8ee 	bl	801db9c <__sinit>
 801f9c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f9c2:	07d9      	lsls	r1, r3, #31
 801f9c4:	d405      	bmi.n	801f9d2 <_vfiprintf_r+0x2a>
 801f9c6:	89ab      	ldrh	r3, [r5, #12]
 801f9c8:	059a      	lsls	r2, r3, #22
 801f9ca:	d402      	bmi.n	801f9d2 <_vfiprintf_r+0x2a>
 801f9cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f9ce:	f7fe fa18 	bl	801de02 <__retarget_lock_acquire_recursive>
 801f9d2:	89ab      	ldrh	r3, [r5, #12]
 801f9d4:	071b      	lsls	r3, r3, #28
 801f9d6:	d501      	bpl.n	801f9dc <_vfiprintf_r+0x34>
 801f9d8:	692b      	ldr	r3, [r5, #16]
 801f9da:	b99b      	cbnz	r3, 801fa04 <_vfiprintf_r+0x5c>
 801f9dc:	4629      	mov	r1, r5
 801f9de:	4630      	mov	r0, r6
 801f9e0:	f000 f938 	bl	801fc54 <__swsetup_r>
 801f9e4:	b170      	cbz	r0, 801fa04 <_vfiprintf_r+0x5c>
 801f9e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f9e8:	07dc      	lsls	r4, r3, #31
 801f9ea:	d504      	bpl.n	801f9f6 <_vfiprintf_r+0x4e>
 801f9ec:	f04f 30ff 	mov.w	r0, #4294967295
 801f9f0:	b01d      	add	sp, #116	@ 0x74
 801f9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9f6:	89ab      	ldrh	r3, [r5, #12]
 801f9f8:	0598      	lsls	r0, r3, #22
 801f9fa:	d4f7      	bmi.n	801f9ec <_vfiprintf_r+0x44>
 801f9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f9fe:	f7fe fa01 	bl	801de04 <__retarget_lock_release_recursive>
 801fa02:	e7f3      	b.n	801f9ec <_vfiprintf_r+0x44>
 801fa04:	2300      	movs	r3, #0
 801fa06:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa08:	2320      	movs	r3, #32
 801fa0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fa0e:	f8cd 800c 	str.w	r8, [sp, #12]
 801fa12:	2330      	movs	r3, #48	@ 0x30
 801fa14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801fbc4 <_vfiprintf_r+0x21c>
 801fa18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fa1c:	f04f 0901 	mov.w	r9, #1
 801fa20:	4623      	mov	r3, r4
 801fa22:	469a      	mov	sl, r3
 801fa24:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa28:	b10a      	cbz	r2, 801fa2e <_vfiprintf_r+0x86>
 801fa2a:	2a25      	cmp	r2, #37	@ 0x25
 801fa2c:	d1f9      	bne.n	801fa22 <_vfiprintf_r+0x7a>
 801fa2e:	ebba 0b04 	subs.w	fp, sl, r4
 801fa32:	d00b      	beq.n	801fa4c <_vfiprintf_r+0xa4>
 801fa34:	465b      	mov	r3, fp
 801fa36:	4622      	mov	r2, r4
 801fa38:	4629      	mov	r1, r5
 801fa3a:	4630      	mov	r0, r6
 801fa3c:	f7ff ffa2 	bl	801f984 <__sfputs_r>
 801fa40:	3001      	adds	r0, #1
 801fa42:	f000 80a7 	beq.w	801fb94 <_vfiprintf_r+0x1ec>
 801fa46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fa48:	445a      	add	r2, fp
 801fa4a:	9209      	str	r2, [sp, #36]	@ 0x24
 801fa4c:	f89a 3000 	ldrb.w	r3, [sl]
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	f000 809f 	beq.w	801fb94 <_vfiprintf_r+0x1ec>
 801fa56:	2300      	movs	r3, #0
 801fa58:	f04f 32ff 	mov.w	r2, #4294967295
 801fa5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fa60:	f10a 0a01 	add.w	sl, sl, #1
 801fa64:	9304      	str	r3, [sp, #16]
 801fa66:	9307      	str	r3, [sp, #28]
 801fa68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fa6c:	931a      	str	r3, [sp, #104]	@ 0x68
 801fa6e:	4654      	mov	r4, sl
 801fa70:	2205      	movs	r2, #5
 801fa72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa76:	4853      	ldr	r0, [pc, #332]	@ (801fbc4 <_vfiprintf_r+0x21c>)
 801fa78:	f7e0 fb82 	bl	8000180 <memchr>
 801fa7c:	9a04      	ldr	r2, [sp, #16]
 801fa7e:	b9d8      	cbnz	r0, 801fab8 <_vfiprintf_r+0x110>
 801fa80:	06d1      	lsls	r1, r2, #27
 801fa82:	bf44      	itt	mi
 801fa84:	2320      	movmi	r3, #32
 801fa86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fa8a:	0713      	lsls	r3, r2, #28
 801fa8c:	bf44      	itt	mi
 801fa8e:	232b      	movmi	r3, #43	@ 0x2b
 801fa90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fa94:	f89a 3000 	ldrb.w	r3, [sl]
 801fa98:	2b2a      	cmp	r3, #42	@ 0x2a
 801fa9a:	d015      	beq.n	801fac8 <_vfiprintf_r+0x120>
 801fa9c:	9a07      	ldr	r2, [sp, #28]
 801fa9e:	4654      	mov	r4, sl
 801faa0:	2000      	movs	r0, #0
 801faa2:	f04f 0c0a 	mov.w	ip, #10
 801faa6:	4621      	mov	r1, r4
 801faa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801faac:	3b30      	subs	r3, #48	@ 0x30
 801faae:	2b09      	cmp	r3, #9
 801fab0:	d94b      	bls.n	801fb4a <_vfiprintf_r+0x1a2>
 801fab2:	b1b0      	cbz	r0, 801fae2 <_vfiprintf_r+0x13a>
 801fab4:	9207      	str	r2, [sp, #28]
 801fab6:	e014      	b.n	801fae2 <_vfiprintf_r+0x13a>
 801fab8:	eba0 0308 	sub.w	r3, r0, r8
 801fabc:	fa09 f303 	lsl.w	r3, r9, r3
 801fac0:	4313      	orrs	r3, r2
 801fac2:	9304      	str	r3, [sp, #16]
 801fac4:	46a2      	mov	sl, r4
 801fac6:	e7d2      	b.n	801fa6e <_vfiprintf_r+0xc6>
 801fac8:	9b03      	ldr	r3, [sp, #12]
 801faca:	1d19      	adds	r1, r3, #4
 801facc:	681b      	ldr	r3, [r3, #0]
 801face:	9103      	str	r1, [sp, #12]
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	bfbb      	ittet	lt
 801fad4:	425b      	neglt	r3, r3
 801fad6:	f042 0202 	orrlt.w	r2, r2, #2
 801fada:	9307      	strge	r3, [sp, #28]
 801fadc:	9307      	strlt	r3, [sp, #28]
 801fade:	bfb8      	it	lt
 801fae0:	9204      	strlt	r2, [sp, #16]
 801fae2:	7823      	ldrb	r3, [r4, #0]
 801fae4:	2b2e      	cmp	r3, #46	@ 0x2e
 801fae6:	d10a      	bne.n	801fafe <_vfiprintf_r+0x156>
 801fae8:	7863      	ldrb	r3, [r4, #1]
 801faea:	2b2a      	cmp	r3, #42	@ 0x2a
 801faec:	d132      	bne.n	801fb54 <_vfiprintf_r+0x1ac>
 801faee:	9b03      	ldr	r3, [sp, #12]
 801faf0:	1d1a      	adds	r2, r3, #4
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	9203      	str	r2, [sp, #12]
 801faf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fafa:	3402      	adds	r4, #2
 801fafc:	9305      	str	r3, [sp, #20]
 801fafe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801fbc8 <_vfiprintf_r+0x220>
 801fb02:	7821      	ldrb	r1, [r4, #0]
 801fb04:	2203      	movs	r2, #3
 801fb06:	4650      	mov	r0, sl
 801fb08:	f7e0 fb3a 	bl	8000180 <memchr>
 801fb0c:	b138      	cbz	r0, 801fb1e <_vfiprintf_r+0x176>
 801fb0e:	9b04      	ldr	r3, [sp, #16]
 801fb10:	eba0 000a 	sub.w	r0, r0, sl
 801fb14:	2240      	movs	r2, #64	@ 0x40
 801fb16:	4082      	lsls	r2, r0
 801fb18:	4313      	orrs	r3, r2
 801fb1a:	3401      	adds	r4, #1
 801fb1c:	9304      	str	r3, [sp, #16]
 801fb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb22:	482a      	ldr	r0, [pc, #168]	@ (801fbcc <_vfiprintf_r+0x224>)
 801fb24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fb28:	2206      	movs	r2, #6
 801fb2a:	f7e0 fb29 	bl	8000180 <memchr>
 801fb2e:	2800      	cmp	r0, #0
 801fb30:	d03f      	beq.n	801fbb2 <_vfiprintf_r+0x20a>
 801fb32:	4b27      	ldr	r3, [pc, #156]	@ (801fbd0 <_vfiprintf_r+0x228>)
 801fb34:	bb1b      	cbnz	r3, 801fb7e <_vfiprintf_r+0x1d6>
 801fb36:	9b03      	ldr	r3, [sp, #12]
 801fb38:	3307      	adds	r3, #7
 801fb3a:	f023 0307 	bic.w	r3, r3, #7
 801fb3e:	3308      	adds	r3, #8
 801fb40:	9303      	str	r3, [sp, #12]
 801fb42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb44:	443b      	add	r3, r7
 801fb46:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb48:	e76a      	b.n	801fa20 <_vfiprintf_r+0x78>
 801fb4a:	fb0c 3202 	mla	r2, ip, r2, r3
 801fb4e:	460c      	mov	r4, r1
 801fb50:	2001      	movs	r0, #1
 801fb52:	e7a8      	b.n	801faa6 <_vfiprintf_r+0xfe>
 801fb54:	2300      	movs	r3, #0
 801fb56:	3401      	adds	r4, #1
 801fb58:	9305      	str	r3, [sp, #20]
 801fb5a:	4619      	mov	r1, r3
 801fb5c:	f04f 0c0a 	mov.w	ip, #10
 801fb60:	4620      	mov	r0, r4
 801fb62:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fb66:	3a30      	subs	r2, #48	@ 0x30
 801fb68:	2a09      	cmp	r2, #9
 801fb6a:	d903      	bls.n	801fb74 <_vfiprintf_r+0x1cc>
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d0c6      	beq.n	801fafe <_vfiprintf_r+0x156>
 801fb70:	9105      	str	r1, [sp, #20]
 801fb72:	e7c4      	b.n	801fafe <_vfiprintf_r+0x156>
 801fb74:	fb0c 2101 	mla	r1, ip, r1, r2
 801fb78:	4604      	mov	r4, r0
 801fb7a:	2301      	movs	r3, #1
 801fb7c:	e7f0      	b.n	801fb60 <_vfiprintf_r+0x1b8>
 801fb7e:	ab03      	add	r3, sp, #12
 801fb80:	9300      	str	r3, [sp, #0]
 801fb82:	462a      	mov	r2, r5
 801fb84:	4b13      	ldr	r3, [pc, #76]	@ (801fbd4 <_vfiprintf_r+0x22c>)
 801fb86:	a904      	add	r1, sp, #16
 801fb88:	4630      	mov	r0, r6
 801fb8a:	f7fd fbc3 	bl	801d314 <_printf_float>
 801fb8e:	4607      	mov	r7, r0
 801fb90:	1c78      	adds	r0, r7, #1
 801fb92:	d1d6      	bne.n	801fb42 <_vfiprintf_r+0x19a>
 801fb94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fb96:	07d9      	lsls	r1, r3, #31
 801fb98:	d405      	bmi.n	801fba6 <_vfiprintf_r+0x1fe>
 801fb9a:	89ab      	ldrh	r3, [r5, #12]
 801fb9c:	059a      	lsls	r2, r3, #22
 801fb9e:	d402      	bmi.n	801fba6 <_vfiprintf_r+0x1fe>
 801fba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fba2:	f7fe f92f 	bl	801de04 <__retarget_lock_release_recursive>
 801fba6:	89ab      	ldrh	r3, [r5, #12]
 801fba8:	065b      	lsls	r3, r3, #25
 801fbaa:	f53f af1f 	bmi.w	801f9ec <_vfiprintf_r+0x44>
 801fbae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fbb0:	e71e      	b.n	801f9f0 <_vfiprintf_r+0x48>
 801fbb2:	ab03      	add	r3, sp, #12
 801fbb4:	9300      	str	r3, [sp, #0]
 801fbb6:	462a      	mov	r2, r5
 801fbb8:	4b06      	ldr	r3, [pc, #24]	@ (801fbd4 <_vfiprintf_r+0x22c>)
 801fbba:	a904      	add	r1, sp, #16
 801fbbc:	4630      	mov	r0, r6
 801fbbe:	f7fd fe43 	bl	801d848 <_printf_i>
 801fbc2:	e7e4      	b.n	801fb8e <_vfiprintf_r+0x1e6>
 801fbc4:	08020f4a 	.word	0x08020f4a
 801fbc8:	08020f50 	.word	0x08020f50
 801fbcc:	08020f54 	.word	0x08020f54
 801fbd0:	0801d315 	.word	0x0801d315
 801fbd4:	0801f985 	.word	0x0801f985

0801fbd8 <__swbuf_r>:
 801fbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbda:	460e      	mov	r6, r1
 801fbdc:	4614      	mov	r4, r2
 801fbde:	4605      	mov	r5, r0
 801fbe0:	b118      	cbz	r0, 801fbea <__swbuf_r+0x12>
 801fbe2:	6a03      	ldr	r3, [r0, #32]
 801fbe4:	b90b      	cbnz	r3, 801fbea <__swbuf_r+0x12>
 801fbe6:	f7fd ffd9 	bl	801db9c <__sinit>
 801fbea:	69a3      	ldr	r3, [r4, #24]
 801fbec:	60a3      	str	r3, [r4, #8]
 801fbee:	89a3      	ldrh	r3, [r4, #12]
 801fbf0:	071a      	lsls	r2, r3, #28
 801fbf2:	d501      	bpl.n	801fbf8 <__swbuf_r+0x20>
 801fbf4:	6923      	ldr	r3, [r4, #16]
 801fbf6:	b943      	cbnz	r3, 801fc0a <__swbuf_r+0x32>
 801fbf8:	4621      	mov	r1, r4
 801fbfa:	4628      	mov	r0, r5
 801fbfc:	f000 f82a 	bl	801fc54 <__swsetup_r>
 801fc00:	b118      	cbz	r0, 801fc0a <__swbuf_r+0x32>
 801fc02:	f04f 37ff 	mov.w	r7, #4294967295
 801fc06:	4638      	mov	r0, r7
 801fc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc0a:	6823      	ldr	r3, [r4, #0]
 801fc0c:	6922      	ldr	r2, [r4, #16]
 801fc0e:	1a98      	subs	r0, r3, r2
 801fc10:	6963      	ldr	r3, [r4, #20]
 801fc12:	b2f6      	uxtb	r6, r6
 801fc14:	4283      	cmp	r3, r0
 801fc16:	4637      	mov	r7, r6
 801fc18:	dc05      	bgt.n	801fc26 <__swbuf_r+0x4e>
 801fc1a:	4621      	mov	r1, r4
 801fc1c:	4628      	mov	r0, r5
 801fc1e:	f7ff fd9b 	bl	801f758 <_fflush_r>
 801fc22:	2800      	cmp	r0, #0
 801fc24:	d1ed      	bne.n	801fc02 <__swbuf_r+0x2a>
 801fc26:	68a3      	ldr	r3, [r4, #8]
 801fc28:	3b01      	subs	r3, #1
 801fc2a:	60a3      	str	r3, [r4, #8]
 801fc2c:	6823      	ldr	r3, [r4, #0]
 801fc2e:	1c5a      	adds	r2, r3, #1
 801fc30:	6022      	str	r2, [r4, #0]
 801fc32:	701e      	strb	r6, [r3, #0]
 801fc34:	6962      	ldr	r2, [r4, #20]
 801fc36:	1c43      	adds	r3, r0, #1
 801fc38:	429a      	cmp	r2, r3
 801fc3a:	d004      	beq.n	801fc46 <__swbuf_r+0x6e>
 801fc3c:	89a3      	ldrh	r3, [r4, #12]
 801fc3e:	07db      	lsls	r3, r3, #31
 801fc40:	d5e1      	bpl.n	801fc06 <__swbuf_r+0x2e>
 801fc42:	2e0a      	cmp	r6, #10
 801fc44:	d1df      	bne.n	801fc06 <__swbuf_r+0x2e>
 801fc46:	4621      	mov	r1, r4
 801fc48:	4628      	mov	r0, r5
 801fc4a:	f7ff fd85 	bl	801f758 <_fflush_r>
 801fc4e:	2800      	cmp	r0, #0
 801fc50:	d0d9      	beq.n	801fc06 <__swbuf_r+0x2e>
 801fc52:	e7d6      	b.n	801fc02 <__swbuf_r+0x2a>

0801fc54 <__swsetup_r>:
 801fc54:	b538      	push	{r3, r4, r5, lr}
 801fc56:	4b29      	ldr	r3, [pc, #164]	@ (801fcfc <__swsetup_r+0xa8>)
 801fc58:	4605      	mov	r5, r0
 801fc5a:	6818      	ldr	r0, [r3, #0]
 801fc5c:	460c      	mov	r4, r1
 801fc5e:	b118      	cbz	r0, 801fc68 <__swsetup_r+0x14>
 801fc60:	6a03      	ldr	r3, [r0, #32]
 801fc62:	b90b      	cbnz	r3, 801fc68 <__swsetup_r+0x14>
 801fc64:	f7fd ff9a 	bl	801db9c <__sinit>
 801fc68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc6c:	0719      	lsls	r1, r3, #28
 801fc6e:	d422      	bmi.n	801fcb6 <__swsetup_r+0x62>
 801fc70:	06da      	lsls	r2, r3, #27
 801fc72:	d407      	bmi.n	801fc84 <__swsetup_r+0x30>
 801fc74:	2209      	movs	r2, #9
 801fc76:	602a      	str	r2, [r5, #0]
 801fc78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fc7c:	81a3      	strh	r3, [r4, #12]
 801fc7e:	f04f 30ff 	mov.w	r0, #4294967295
 801fc82:	e033      	b.n	801fcec <__swsetup_r+0x98>
 801fc84:	0758      	lsls	r0, r3, #29
 801fc86:	d512      	bpl.n	801fcae <__swsetup_r+0x5a>
 801fc88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fc8a:	b141      	cbz	r1, 801fc9e <__swsetup_r+0x4a>
 801fc8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801fc90:	4299      	cmp	r1, r3
 801fc92:	d002      	beq.n	801fc9a <__swsetup_r+0x46>
 801fc94:	4628      	mov	r0, r5
 801fc96:	f7fe ff0f 	bl	801eab8 <_free_r>
 801fc9a:	2300      	movs	r3, #0
 801fc9c:	6363      	str	r3, [r4, #52]	@ 0x34
 801fc9e:	89a3      	ldrh	r3, [r4, #12]
 801fca0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801fca4:	81a3      	strh	r3, [r4, #12]
 801fca6:	2300      	movs	r3, #0
 801fca8:	6063      	str	r3, [r4, #4]
 801fcaa:	6923      	ldr	r3, [r4, #16]
 801fcac:	6023      	str	r3, [r4, #0]
 801fcae:	89a3      	ldrh	r3, [r4, #12]
 801fcb0:	f043 0308 	orr.w	r3, r3, #8
 801fcb4:	81a3      	strh	r3, [r4, #12]
 801fcb6:	6923      	ldr	r3, [r4, #16]
 801fcb8:	b94b      	cbnz	r3, 801fcce <__swsetup_r+0x7a>
 801fcba:	89a3      	ldrh	r3, [r4, #12]
 801fcbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801fcc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801fcc4:	d003      	beq.n	801fcce <__swsetup_r+0x7a>
 801fcc6:	4621      	mov	r1, r4
 801fcc8:	4628      	mov	r0, r5
 801fcca:	f000 f883 	bl	801fdd4 <__smakebuf_r>
 801fcce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fcd2:	f013 0201 	ands.w	r2, r3, #1
 801fcd6:	d00a      	beq.n	801fcee <__swsetup_r+0x9a>
 801fcd8:	2200      	movs	r2, #0
 801fcda:	60a2      	str	r2, [r4, #8]
 801fcdc:	6962      	ldr	r2, [r4, #20]
 801fcde:	4252      	negs	r2, r2
 801fce0:	61a2      	str	r2, [r4, #24]
 801fce2:	6922      	ldr	r2, [r4, #16]
 801fce4:	b942      	cbnz	r2, 801fcf8 <__swsetup_r+0xa4>
 801fce6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801fcea:	d1c5      	bne.n	801fc78 <__swsetup_r+0x24>
 801fcec:	bd38      	pop	{r3, r4, r5, pc}
 801fcee:	0799      	lsls	r1, r3, #30
 801fcf0:	bf58      	it	pl
 801fcf2:	6962      	ldrpl	r2, [r4, #20]
 801fcf4:	60a2      	str	r2, [r4, #8]
 801fcf6:	e7f4      	b.n	801fce2 <__swsetup_r+0x8e>
 801fcf8:	2000      	movs	r0, #0
 801fcfa:	e7f7      	b.n	801fcec <__swsetup_r+0x98>
 801fcfc:	2000014c 	.word	0x2000014c

0801fd00 <_raise_r>:
 801fd00:	291f      	cmp	r1, #31
 801fd02:	b538      	push	{r3, r4, r5, lr}
 801fd04:	4605      	mov	r5, r0
 801fd06:	460c      	mov	r4, r1
 801fd08:	d904      	bls.n	801fd14 <_raise_r+0x14>
 801fd0a:	2316      	movs	r3, #22
 801fd0c:	6003      	str	r3, [r0, #0]
 801fd0e:	f04f 30ff 	mov.w	r0, #4294967295
 801fd12:	bd38      	pop	{r3, r4, r5, pc}
 801fd14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801fd16:	b112      	cbz	r2, 801fd1e <_raise_r+0x1e>
 801fd18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fd1c:	b94b      	cbnz	r3, 801fd32 <_raise_r+0x32>
 801fd1e:	4628      	mov	r0, r5
 801fd20:	f000 f830 	bl	801fd84 <_getpid_r>
 801fd24:	4622      	mov	r2, r4
 801fd26:	4601      	mov	r1, r0
 801fd28:	4628      	mov	r0, r5
 801fd2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd2e:	f000 b817 	b.w	801fd60 <_kill_r>
 801fd32:	2b01      	cmp	r3, #1
 801fd34:	d00a      	beq.n	801fd4c <_raise_r+0x4c>
 801fd36:	1c59      	adds	r1, r3, #1
 801fd38:	d103      	bne.n	801fd42 <_raise_r+0x42>
 801fd3a:	2316      	movs	r3, #22
 801fd3c:	6003      	str	r3, [r0, #0]
 801fd3e:	2001      	movs	r0, #1
 801fd40:	e7e7      	b.n	801fd12 <_raise_r+0x12>
 801fd42:	2100      	movs	r1, #0
 801fd44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801fd48:	4620      	mov	r0, r4
 801fd4a:	4798      	blx	r3
 801fd4c:	2000      	movs	r0, #0
 801fd4e:	e7e0      	b.n	801fd12 <_raise_r+0x12>

0801fd50 <raise>:
 801fd50:	4b02      	ldr	r3, [pc, #8]	@ (801fd5c <raise+0xc>)
 801fd52:	4601      	mov	r1, r0
 801fd54:	6818      	ldr	r0, [r3, #0]
 801fd56:	f7ff bfd3 	b.w	801fd00 <_raise_r>
 801fd5a:	bf00      	nop
 801fd5c:	2000014c 	.word	0x2000014c

0801fd60 <_kill_r>:
 801fd60:	b538      	push	{r3, r4, r5, lr}
 801fd62:	4d07      	ldr	r5, [pc, #28]	@ (801fd80 <_kill_r+0x20>)
 801fd64:	2300      	movs	r3, #0
 801fd66:	4604      	mov	r4, r0
 801fd68:	4608      	mov	r0, r1
 801fd6a:	4611      	mov	r1, r2
 801fd6c:	602b      	str	r3, [r5, #0]
 801fd6e:	f7e2 fe59 	bl	8002a24 <_kill>
 801fd72:	1c43      	adds	r3, r0, #1
 801fd74:	d102      	bne.n	801fd7c <_kill_r+0x1c>
 801fd76:	682b      	ldr	r3, [r5, #0]
 801fd78:	b103      	cbz	r3, 801fd7c <_kill_r+0x1c>
 801fd7a:	6023      	str	r3, [r4, #0]
 801fd7c:	bd38      	pop	{r3, r4, r5, pc}
 801fd7e:	bf00      	nop
 801fd80:	2000267c 	.word	0x2000267c

0801fd84 <_getpid_r>:
 801fd84:	f7e2 be47 	b.w	8002a16 <_getpid>

0801fd88 <__swhatbuf_r>:
 801fd88:	b570      	push	{r4, r5, r6, lr}
 801fd8a:	460c      	mov	r4, r1
 801fd8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd90:	2900      	cmp	r1, #0
 801fd92:	b096      	sub	sp, #88	@ 0x58
 801fd94:	4615      	mov	r5, r2
 801fd96:	461e      	mov	r6, r3
 801fd98:	da0d      	bge.n	801fdb6 <__swhatbuf_r+0x2e>
 801fd9a:	89a3      	ldrh	r3, [r4, #12]
 801fd9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801fda0:	f04f 0100 	mov.w	r1, #0
 801fda4:	bf14      	ite	ne
 801fda6:	2340      	movne	r3, #64	@ 0x40
 801fda8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801fdac:	2000      	movs	r0, #0
 801fdae:	6031      	str	r1, [r6, #0]
 801fdb0:	602b      	str	r3, [r5, #0]
 801fdb2:	b016      	add	sp, #88	@ 0x58
 801fdb4:	bd70      	pop	{r4, r5, r6, pc}
 801fdb6:	466a      	mov	r2, sp
 801fdb8:	f000 f848 	bl	801fe4c <_fstat_r>
 801fdbc:	2800      	cmp	r0, #0
 801fdbe:	dbec      	blt.n	801fd9a <__swhatbuf_r+0x12>
 801fdc0:	9901      	ldr	r1, [sp, #4]
 801fdc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801fdc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801fdca:	4259      	negs	r1, r3
 801fdcc:	4159      	adcs	r1, r3
 801fdce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801fdd2:	e7eb      	b.n	801fdac <__swhatbuf_r+0x24>

0801fdd4 <__smakebuf_r>:
 801fdd4:	898b      	ldrh	r3, [r1, #12]
 801fdd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fdd8:	079d      	lsls	r5, r3, #30
 801fdda:	4606      	mov	r6, r0
 801fddc:	460c      	mov	r4, r1
 801fdde:	d507      	bpl.n	801fdf0 <__smakebuf_r+0x1c>
 801fde0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801fde4:	6023      	str	r3, [r4, #0]
 801fde6:	6123      	str	r3, [r4, #16]
 801fde8:	2301      	movs	r3, #1
 801fdea:	6163      	str	r3, [r4, #20]
 801fdec:	b003      	add	sp, #12
 801fdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fdf0:	ab01      	add	r3, sp, #4
 801fdf2:	466a      	mov	r2, sp
 801fdf4:	f7ff ffc8 	bl	801fd88 <__swhatbuf_r>
 801fdf8:	9f00      	ldr	r7, [sp, #0]
 801fdfa:	4605      	mov	r5, r0
 801fdfc:	4639      	mov	r1, r7
 801fdfe:	4630      	mov	r0, r6
 801fe00:	f7fe fece 	bl	801eba0 <_malloc_r>
 801fe04:	b948      	cbnz	r0, 801fe1a <__smakebuf_r+0x46>
 801fe06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fe0a:	059a      	lsls	r2, r3, #22
 801fe0c:	d4ee      	bmi.n	801fdec <__smakebuf_r+0x18>
 801fe0e:	f023 0303 	bic.w	r3, r3, #3
 801fe12:	f043 0302 	orr.w	r3, r3, #2
 801fe16:	81a3      	strh	r3, [r4, #12]
 801fe18:	e7e2      	b.n	801fde0 <__smakebuf_r+0xc>
 801fe1a:	89a3      	ldrh	r3, [r4, #12]
 801fe1c:	6020      	str	r0, [r4, #0]
 801fe1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fe22:	81a3      	strh	r3, [r4, #12]
 801fe24:	9b01      	ldr	r3, [sp, #4]
 801fe26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801fe2a:	b15b      	cbz	r3, 801fe44 <__smakebuf_r+0x70>
 801fe2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fe30:	4630      	mov	r0, r6
 801fe32:	f000 f81d 	bl	801fe70 <_isatty_r>
 801fe36:	b128      	cbz	r0, 801fe44 <__smakebuf_r+0x70>
 801fe38:	89a3      	ldrh	r3, [r4, #12]
 801fe3a:	f023 0303 	bic.w	r3, r3, #3
 801fe3e:	f043 0301 	orr.w	r3, r3, #1
 801fe42:	81a3      	strh	r3, [r4, #12]
 801fe44:	89a3      	ldrh	r3, [r4, #12]
 801fe46:	431d      	orrs	r5, r3
 801fe48:	81a5      	strh	r5, [r4, #12]
 801fe4a:	e7cf      	b.n	801fdec <__smakebuf_r+0x18>

0801fe4c <_fstat_r>:
 801fe4c:	b538      	push	{r3, r4, r5, lr}
 801fe4e:	4d07      	ldr	r5, [pc, #28]	@ (801fe6c <_fstat_r+0x20>)
 801fe50:	2300      	movs	r3, #0
 801fe52:	4604      	mov	r4, r0
 801fe54:	4608      	mov	r0, r1
 801fe56:	4611      	mov	r1, r2
 801fe58:	602b      	str	r3, [r5, #0]
 801fe5a:	f7e2 fe42 	bl	8002ae2 <_fstat>
 801fe5e:	1c43      	adds	r3, r0, #1
 801fe60:	d102      	bne.n	801fe68 <_fstat_r+0x1c>
 801fe62:	682b      	ldr	r3, [r5, #0]
 801fe64:	b103      	cbz	r3, 801fe68 <_fstat_r+0x1c>
 801fe66:	6023      	str	r3, [r4, #0]
 801fe68:	bd38      	pop	{r3, r4, r5, pc}
 801fe6a:	bf00      	nop
 801fe6c:	2000267c 	.word	0x2000267c

0801fe70 <_isatty_r>:
 801fe70:	b538      	push	{r3, r4, r5, lr}
 801fe72:	4d06      	ldr	r5, [pc, #24]	@ (801fe8c <_isatty_r+0x1c>)
 801fe74:	2300      	movs	r3, #0
 801fe76:	4604      	mov	r4, r0
 801fe78:	4608      	mov	r0, r1
 801fe7a:	602b      	str	r3, [r5, #0]
 801fe7c:	f7e2 fe40 	bl	8002b00 <_isatty>
 801fe80:	1c43      	adds	r3, r0, #1
 801fe82:	d102      	bne.n	801fe8a <_isatty_r+0x1a>
 801fe84:	682b      	ldr	r3, [r5, #0]
 801fe86:	b103      	cbz	r3, 801fe8a <_isatty_r+0x1a>
 801fe88:	6023      	str	r3, [r4, #0]
 801fe8a:	bd38      	pop	{r3, r4, r5, pc}
 801fe8c:	2000267c 	.word	0x2000267c

0801fe90 <floor>:
 801fe90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe94:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801fe98:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801fe9c:	2e13      	cmp	r6, #19
 801fe9e:	4602      	mov	r2, r0
 801fea0:	460b      	mov	r3, r1
 801fea2:	460c      	mov	r4, r1
 801fea4:	4605      	mov	r5, r0
 801fea6:	4680      	mov	r8, r0
 801fea8:	dc35      	bgt.n	801ff16 <floor+0x86>
 801feaa:	2e00      	cmp	r6, #0
 801feac:	da17      	bge.n	801fede <floor+0x4e>
 801feae:	a334      	add	r3, pc, #208	@ (adr r3, 801ff80 <floor+0xf0>)
 801feb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feb4:	f7e0 f9c2 	bl	800023c <__adddf3>
 801feb8:	2200      	movs	r2, #0
 801feba:	2300      	movs	r3, #0
 801febc:	f7e0 fe04 	bl	8000ac8 <__aeabi_dcmpgt>
 801fec0:	b150      	cbz	r0, 801fed8 <floor+0x48>
 801fec2:	2c00      	cmp	r4, #0
 801fec4:	da57      	bge.n	801ff76 <floor+0xe6>
 801fec6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801feca:	432c      	orrs	r4, r5
 801fecc:	2500      	movs	r5, #0
 801fece:	42ac      	cmp	r4, r5
 801fed0:	4c2d      	ldr	r4, [pc, #180]	@ (801ff88 <floor+0xf8>)
 801fed2:	bf08      	it	eq
 801fed4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801fed8:	4623      	mov	r3, r4
 801feda:	462a      	mov	r2, r5
 801fedc:	e024      	b.n	801ff28 <floor+0x98>
 801fede:	4f2b      	ldr	r7, [pc, #172]	@ (801ff8c <floor+0xfc>)
 801fee0:	4137      	asrs	r7, r6
 801fee2:	ea01 0c07 	and.w	ip, r1, r7
 801fee6:	ea5c 0c00 	orrs.w	ip, ip, r0
 801feea:	d01d      	beq.n	801ff28 <floor+0x98>
 801feec:	a324      	add	r3, pc, #144	@ (adr r3, 801ff80 <floor+0xf0>)
 801feee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fef2:	f7e0 f9a3 	bl	800023c <__adddf3>
 801fef6:	2200      	movs	r2, #0
 801fef8:	2300      	movs	r3, #0
 801fefa:	f7e0 fde5 	bl	8000ac8 <__aeabi_dcmpgt>
 801fefe:	2800      	cmp	r0, #0
 801ff00:	d0ea      	beq.n	801fed8 <floor+0x48>
 801ff02:	2c00      	cmp	r4, #0
 801ff04:	bfbe      	ittt	lt
 801ff06:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801ff0a:	4133      	asrlt	r3, r6
 801ff0c:	18e4      	addlt	r4, r4, r3
 801ff0e:	ea24 0407 	bic.w	r4, r4, r7
 801ff12:	2500      	movs	r5, #0
 801ff14:	e7e0      	b.n	801fed8 <floor+0x48>
 801ff16:	2e33      	cmp	r6, #51	@ 0x33
 801ff18:	dd0a      	ble.n	801ff30 <floor+0xa0>
 801ff1a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801ff1e:	d103      	bne.n	801ff28 <floor+0x98>
 801ff20:	f7e0 f98c 	bl	800023c <__adddf3>
 801ff24:	4602      	mov	r2, r0
 801ff26:	460b      	mov	r3, r1
 801ff28:	4610      	mov	r0, r2
 801ff2a:	4619      	mov	r1, r3
 801ff2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff30:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801ff34:	f04f 3cff 	mov.w	ip, #4294967295
 801ff38:	fa2c f707 	lsr.w	r7, ip, r7
 801ff3c:	4207      	tst	r7, r0
 801ff3e:	d0f3      	beq.n	801ff28 <floor+0x98>
 801ff40:	a30f      	add	r3, pc, #60	@ (adr r3, 801ff80 <floor+0xf0>)
 801ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff46:	f7e0 f979 	bl	800023c <__adddf3>
 801ff4a:	2200      	movs	r2, #0
 801ff4c:	2300      	movs	r3, #0
 801ff4e:	f7e0 fdbb 	bl	8000ac8 <__aeabi_dcmpgt>
 801ff52:	2800      	cmp	r0, #0
 801ff54:	d0c0      	beq.n	801fed8 <floor+0x48>
 801ff56:	2c00      	cmp	r4, #0
 801ff58:	da0a      	bge.n	801ff70 <floor+0xe0>
 801ff5a:	2e14      	cmp	r6, #20
 801ff5c:	d101      	bne.n	801ff62 <floor+0xd2>
 801ff5e:	3401      	adds	r4, #1
 801ff60:	e006      	b.n	801ff70 <floor+0xe0>
 801ff62:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801ff66:	2301      	movs	r3, #1
 801ff68:	40b3      	lsls	r3, r6
 801ff6a:	441d      	add	r5, r3
 801ff6c:	4545      	cmp	r5, r8
 801ff6e:	d3f6      	bcc.n	801ff5e <floor+0xce>
 801ff70:	ea25 0507 	bic.w	r5, r5, r7
 801ff74:	e7b0      	b.n	801fed8 <floor+0x48>
 801ff76:	2500      	movs	r5, #0
 801ff78:	462c      	mov	r4, r5
 801ff7a:	e7ad      	b.n	801fed8 <floor+0x48>
 801ff7c:	f3af 8000 	nop.w
 801ff80:	8800759c 	.word	0x8800759c
 801ff84:	7e37e43c 	.word	0x7e37e43c
 801ff88:	bff00000 	.word	0xbff00000
 801ff8c:	000fffff 	.word	0x000fffff

0801ff90 <_init>:
 801ff90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff92:	bf00      	nop
 801ff94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff96:	bc08      	pop	{r3}
 801ff98:	469e      	mov	lr, r3
 801ff9a:	4770      	bx	lr

0801ff9c <_fini>:
 801ff9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff9e:	bf00      	nop
 801ffa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ffa2:	bc08      	pop	{r3}
 801ffa4:	469e      	mov	lr, r3
 801ffa6:	4770      	bx	lr


Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cfd0  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f5c  0801d108  0801d108  0001e108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801e064  0801e064  0001f064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801e13c  0801e13c  00020148  2**0
                  CONTENTS
  5 .ARM          00000008  0801e13c  0801e13c  0001f13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801e144  0801e144  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801e144  0801e144  0001f144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801e148  0801e148  0001f148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0801e14c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002208  20000148  0801e294  00020148  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002350  0801e294  00020350  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   000435db  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a734  00000000  00000000  0006374d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000035e0  00000000  00000000  0006de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000293d  00000000  00000000  00071468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002968f  00000000  00000000  00073da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043b9f  00000000  00000000  0009d434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cebca  00000000  00000000  000e0fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001afb9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de84  00000000  00000000  001afbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001bda64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801d0f0 	.word	0x0801d0f0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801d0f0 	.word	0x0801d0f0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ce:	2afd      	cmp	r2, #253	@ 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	@ 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	@ 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	@ 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f5e:	4a24      	ldr	r2, [pc, #144]	@ (8000ff0 <MX_ADC_Init+0x98>)
 8000f60:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f62:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f68:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <MX_ADC_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fda:	f002 fa91 	bl	8003500 <HAL_ADC_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fe4:	f000 fe5c 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000164 	.word	0x20000164
 8000ff0:	40012400 	.word	0x40012400

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <HAL_ADC_MspInit+0x54>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d113      	bne.n	800103e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001016:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800101a:	f7ff ff73 	bl	8000f04 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2002      	movs	r0, #2
 8001020:	f7ff ff58 	bl	8000ed4 <LL_AHB2_GRP1_EnableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin;
 8001024:	f246 0318 	movw	r3, #24600	@ 0x6018
 8001028:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <HAL_ADC_MspInit+0x58>)
 800103a:	f004 f861 	bl	8005100 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012400 	.word	0x40012400
 800104c:	48000400 	.word	0x48000400

08001050 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_ADC_MspDeInit+0x2c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d108      	bne.n	8001074 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001062:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001066:	f7ff ff65 	bl	8000f34 <LL_APB2_GRP1_DisableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin);
 800106a:	f246 0118 	movw	r1, #24600	@ 0x6018
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <HAL_ADC_MspDeInit+0x30>)
 8001070:	f004 f9a6 	bl	80053c0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40012400 	.word	0x40012400
 8001080:	48000400 	.word	0x48000400

08001084 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <SYS_InitMeasurement+0x14>)
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <SYS_InitMeasurement+0x18>)
 800108c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000164 	.word	0x20000164
 800109c:	40012400 	.word	0x40012400

080010a0 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80010ae:	f000 f869 	bl	8001184 <SYS_GetBatteryLevel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80010b6:	482d      	ldr	r0, [pc, #180]	@ (800116c <SYS_GetTemperatureLevel+0xcc>)
 80010b8:	f000 f926 	bl	8001308 <ADC_ReadChannels>
 80010bc:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80010be:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d026      	beq.n	8001118 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80010ca:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d01c      	beq.n	8001110 <SYS_GetTemperatureLevel+0x70>
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	4a25      	ldr	r2, [pc, #148]	@ (8001178 <SYS_GetTemperatureLevel+0xd8>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2264      	movs	r2, #100	@ 0x64
 80010f2:	fb03 f202 	mul.w	r2, r3, r2
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	1acb      	subs	r3, r1, r3
 8001102:	fb92 f3f3 	sdiv	r3, r2, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	331e      	adds	r3, #30
 800110a:	b29b      	uxth	r3, r3
 800110c:	b21b      	sxth	r3, r3
 800110e:	e001      	b.n	8001114 <SYS_GetTemperatureLevel+0x74>
 8001110:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001114:	803b      	strh	r3, [r7, #0]
 8001116:	e01d      	b.n	8001154 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	fb03 f202 	mul.w	r2, r3, r2
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <SYS_GetTemperatureLevel+0xdc>)
 8001122:	fba3 1302 	umull	r1, r3, r3, r2
 8001126:	1ad2      	subs	r2, r2, r3
 8001128:	0852      	lsrs	r2, r2, #1
 800112a:	4413      	add	r3, r2
 800112c:	0adb      	lsrs	r3, r3, #11
 800112e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 800113a:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <SYS_GetTemperatureLevel+0xe0>)
 8001140:	fb82 1203 	smull	r1, r2, r2, r3
 8001144:	1292      	asrs	r2, r2, #10
 8001146:	17db      	asrs	r3, r3, #31
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	b29b      	uxth	r3, r3
 800114c:	331e      	adds	r3, #30
 800114e:	b29b      	uxth	r3, r3
 8001150:	b21b      	sxth	r3, r3
 8001152:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001154:	883b      	ldrh	r3, [r7, #0]
 8001156:	b21b      	sxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21b      	sxth	r3, r3
 800115c:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 800115e:	883b      	ldrh	r3, [r7, #0]
 8001160:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	b0001000 	.word	0xb0001000
 8001170:	1fff75c8 	.word	0x1fff75c8
 8001174:	1fff75a8 	.word	0x1fff75a8
 8001178:	09ee009f 	.word	0x09ee009f
 800117c:	00100101 	.word	0x00100101
 8001180:	68db8bad 	.word	0x68db8bad

08001184 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001192:	4813      	ldr	r0, [pc, #76]	@ (80011e0 <SYS_GetBatteryLevel+0x5c>)
 8001194:	f000 f8b8 	bl	8001308 <ADC_ReadChannels>
 8001198:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	e016      	b.n	80011d4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <SYS_GetBatteryLevel+0x60>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00b      	beq.n	80011ca <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <SYS_GetBatteryLevel+0x60>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80011bc:	fb03 f202 	mul.w	r2, r3, r2
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	e004      	b.n	80011d4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80011ca:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <SYS_GetBatteryLevel+0x64>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	b4002000 	.word	0xb4002000
 80011e4:	1fff75aa 	.word	0x1fff75aa
 80011e8:	004c08d8 	.word	0x004c08d8

080011ec <SYS_GetADC0>:

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */
uint16_t SYS_GetADC0(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_0);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 f884 	bl	8001308 <ADC_ReadChannels>
 8001200:	4603      	mov	r3, r0
 8001202:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	461a      	mov	r2, r3
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <SYS_GetADC0+0x40>)
 8001212:	fba3 1302 	umull	r1, r3, r3, r2
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	0852      	lsrs	r2, r2, #1
 800121a:	4413      	add	r3, r2
 800121c:	0adb      	lsrs	r3, r3, #11
 800121e:	603b      	str	r3, [r7, #0]
	return outvoltage;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b29b      	uxth	r3, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	00100101 	.word	0x00100101

08001230 <SYS_GetADC1>:

uint16_t SYS_GetADC1(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_1);
 800123e:	480c      	ldr	r0, [pc, #48]	@ (8001270 <SYS_GetADC1+0x40>)
 8001240:	f000 f862 	bl	8001308 <ADC_ReadChannels>
 8001244:	4603      	mov	r3, r0
 8001246:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	461a      	mov	r2, r3
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <SYS_GetADC1+0x44>)
 8001256:	fba3 1302 	umull	r1, r3, r3, r2
 800125a:	1ad2      	subs	r2, r2, r3
 800125c:	0852      	lsrs	r2, r2, #1
 800125e:	4413      	add	r3, r2
 8001260:	0adb      	lsrs	r3, r3, #11
 8001262:	603b      	str	r3, [r7, #0]
	return outvoltage;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b29b      	uxth	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	04000002 	.word	0x04000002
 8001274:	00100101 	.word	0x00100101

08001278 <SYS_GetADC2>:

uint16_t SYS_GetADC2(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_2);
 8001286:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <SYS_GetADC2+0x40>)
 8001288:	f000 f83e 	bl	8001308 <ADC_ReadChannels>
 800128c:	4603      	mov	r3, r0
 800128e:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	461a      	mov	r2, r3
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <SYS_GetADC2+0x44>)
 800129e:	fba3 1302 	umull	r1, r3, r3, r2
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	0852      	lsrs	r2, r2, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	0adb      	lsrs	r3, r3, #11
 80012aa:	603b      	str	r3, [r7, #0]
	return outvoltage;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b29b      	uxth	r3, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	08000004 	.word	0x08000004
 80012bc:	00100101 	.word	0x00100101

080012c0 <SYS_GetADC3>:

uint16_t SYS_GetADC3(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_3);
 80012ce:	480c      	ldr	r0, [pc, #48]	@ (8001300 <SYS_GetADC3+0x40>)
 80012d0:	f000 f81a 	bl	8001308 <ADC_ReadChannels>
 80012d4:	4603      	mov	r3, r0
 80012d6:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <SYS_GetADC3+0x44>)
 80012e6:	fba3 1302 	umull	r1, r3, r3, r2
 80012ea:	1ad2      	subs	r2, r2, r3
 80012ec:	0852      	lsrs	r2, r2, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	0adb      	lsrs	r3, r3, #11
 80012f2:	603b      	str	r3, [r7, #0]
	return outvoltage;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b29b      	uxth	r3, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0c000008 	.word	0x0c000008
 8001304:	00100101 	.word	0x00100101

08001308 <ADC_ReadChannels>:
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001320:	f7ff fe1a 	bl	8000f58 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001324:	481a      	ldr	r0, [pc, #104]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001326:	f002 ff0a 	bl	800413e <HAL_ADCEx_Calibration_Start>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001330:	f000 fcb6 	bl	8001ca0 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4619      	mov	r1, r3
 8001346:	4812      	ldr	r0, [pc, #72]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001348:	f002 fc16 	bl	8003b78 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001352:	f000 fca5 	bl	8001ca0 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001356:	480e      	ldr	r0, [pc, #56]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001358:	f002 faf2 	bl	8003940 <HAL_ADC_Start>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001362:	f000 fc9d 	bl	8001ca0 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001366:	f04f 31ff 	mov.w	r1, #4294967295
 800136a:	4809      	ldr	r0, [pc, #36]	@ (8001390 <ADC_ReadChannels+0x88>)
 800136c:	f002 fb60 	bl	8003a30 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001370:	4807      	ldr	r0, [pc, #28]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001372:	f002 fb2b 	bl	80039cc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001376:	4806      	ldr	r0, [pc, #24]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001378:	f002 fbf1 	bl	8003b5e <HAL_ADC_GetValue>
 800137c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800137e:	4804      	ldr	r0, [pc, #16]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001380:	f002 fa52 	bl	8003828 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001384:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000164 	.word	0x20000164

08001394 <LL_AHB1_GRP1_EnableClock>:
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800139c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80013a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013c8:	2004      	movs	r0, #4
 80013ca:	f7ff ffe3 	bl	8001394 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ffe0 	bl	8001394 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2102      	movs	r1, #2
 80013d8:	200b      	movs	r0, #11
 80013da:	f003 f856 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013de:	200b      	movs	r0, #11
 80013e0:	f003 f86d 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	200c      	movs	r0, #12
 80013ea:	f003 f84e 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013ee:	200c      	movs	r0, #12
 80013f0:	f003 f865 	bl	80044be <HAL_NVIC_EnableIRQ>

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001404:	23ff      	movs	r3, #255	@ 0xff
 8001406:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800140e:	d311      	bcc.n	8001434 <FLASH_IF_Write+0x3c>
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <FLASH_IF_Write+0x48>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	029a      	lsls	r2, r3, #10
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <FLASH_IF_Write+0x4c>)
 8001418:	4013      	ands	r3, r2
 800141a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800141e:	3b01      	subs	r3, #1
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4293      	cmp	r3, r2
 8001424:	d306      	bcc.n	8001434 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f85a 	bl	80014e4 <FLASH_IF_INT_Write>
 8001430:	4603      	mov	r3, r0
 8001432:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	1fff75e0 	.word	0x1fff75e0
 8001444:	03fffc00 	.word	0x03fffc00

08001448 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001454:	23ff      	movs	r3, #255	@ 0xff
 8001456:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800145e:	d311      	bcc.n	8001484 <FLASH_IF_Read+0x3c>
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <FLASH_IF_Read+0x48>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	029a      	lsls	r2, r3, #10
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <FLASH_IF_Read+0x4c>)
 8001468:	4013      	ands	r3, r2
 800146a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800146e:	3b01      	subs	r3, #1
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	4293      	cmp	r3, r2
 8001474:	d306      	bcc.n	8001484 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f93a 	bl	80016f4 <FLASH_IF_INT_Read>
 8001480:	4603      	mov	r3, r0
 8001482:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	1fff75e0 	.word	0x1fff75e0
 8001494:	03fffc00 	.word	0x03fffc00

08001498 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014a2:	23ff      	movs	r3, #255	@ 0xff
 80014a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80014ac:	d310      	bcc.n	80014d0 <FLASH_IF_Erase+0x38>
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <FLASH_IF_Erase+0x44>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	029a      	lsls	r2, r3, #10
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <FLASH_IF_Erase+0x48>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80014bc:	3b01      	subs	r3, #1
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d305      	bcc.n	80014d0 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80014c4:	6839      	ldr	r1, [r7, #0]
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f932 	bl	8001730 <FLASH_IF_INT_Erase>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	1fff75e0 	.word	0x1fff75e0
 80014e0:	03fffc00 	.word	0x03fffc00

080014e4 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b090      	sub	sp, #64	@ 0x40
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00c      	beq.n	8001522 <FLASH_IF_INT_Write+0x3e>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <FLASH_IF_INT_Write+0x3e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d104      	bne.n	8001522 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001522:	f06f 0305 	mvn.w	r3, #5
 8001526:	e0da      	b.n	80016de <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001528:	f000 f992 	bl	8001850 <FLASH_IF_INT_Clear_Error>
 800152c:	4603      	mov	r3, r0
 800152e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8001532:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 80cf 	bne.w	80016da <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800153c:	f003 fc0a 	bl	8004d54 <HAL_FLASH_Unlock>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 80c6 	bne.w	80016d4 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800154a:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 800154e:	4b66      	ldr	r3, [pc, #408]	@ (80016e8 <FLASH_IF_INT_Write+0x204>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	0299      	lsls	r1, r3, #10
 8001554:	4b65      	ldr	r3, [pc, #404]	@ (80016ec <FLASH_IF_INT_Write+0x208>)
 8001556:	400b      	ands	r3, r1
 8001558:	fbb2 f1f3 	udiv	r1, r2, r3
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	0adb      	lsrs	r3, r3, #11
 8001564:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001566:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001570:	3b01      	subs	r3, #1
 8001572:	4a5d      	ldr	r2, [pc, #372]	@ (80016e8 <FLASH_IF_INT_Write+0x204>)
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	0291      	lsls	r1, r2, #10
 8001578:	4a5c      	ldr	r2, [pc, #368]	@ (80016ec <FLASH_IF_INT_Write+0x208>)
 800157a:	400a      	ands	r2, r1
 800157c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001580:	fb01 f202 	mul.w	r2, r1, r2
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	0ada      	lsrs	r2, r3, #11
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d905      	bls.n	80015a2 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800159c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015a0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015a6:	e089      	b.n	80016bc <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80015a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015aa:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80015ae:	02db      	lsls	r3, r3, #11
 80015b0:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80015b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 f925 	bl	8001804 <FLASH_IF_INT_IsEmpty>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d031      	beq.n	8001624 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80015c0:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <FLASH_IF_INT_Write+0x20c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d103      	bne.n	80015d0 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80015c8:	23fa      	movs	r3, #250	@ 0xfa
 80015ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80015ce:	e07e      	b.n	80016ce <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80015d0:	4b47      	ldr	r3, [pc, #284]	@ (80016f0 <FLASH_IF_INT_Write+0x20c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6939      	ldr	r1, [r7, #16]
 80015d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f88a 	bl	80016f4 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80015e0:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <FLASH_IF_INT_Write+0x20c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ea:	4413      	add	r3, r2
 80015ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80015ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015f0:	b292      	uxth	r2, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f01a fa72 	bl	801badc <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f896 	bl	8001730 <FLASH_IF_INT_Erase>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800160a:	23fe      	movs	r3, #254	@ 0xfe
 800160c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001610:	e05d      	b.n	80016ce <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001616:	4b36      	ldr	r3, [pc, #216]	@ (80016f0 <FLASH_IF_INT_Write+0x20c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 800161c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	e005      	b.n	8001630 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 8001628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162a:	623b      	str	r3, [r7, #32]
          current_length = length;
 800162c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800162e:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001634:	e026      	b.n	8001684 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001636:	6a3a      	ldr	r2, [r7, #32]
 8001638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163a:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001642:	2001      	movs	r0, #1
 8001644:	f003 fb42 	bl	8004ccc <HAL_FLASH_Program>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d113      	bne.n	8001676 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001654:	6a3a      	ldr	r2, [r7, #32]
 8001656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001658:	4413      	add	r3, r2
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	4299      	cmp	r1, r3
 8001660:	bf08      	it	eq
 8001662:	4290      	cmpeq	r0, r2
 8001664:	d003      	beq.n	800166e <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001666:	23fc      	movs	r3, #252	@ 0xfc
 8001668:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 800166c:	e00e      	b.n	800168c <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	3308      	adds	r3, #8
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
 8001674:	e003      	b.n	800167e <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001676:	23fc      	movs	r3, #252	@ 0xfc
 8001678:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800167c:	e006      	b.n	800168c <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800167e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001680:	3308      	adds	r3, #8
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3d4      	bcc.n	8001636 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 800168c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11b      	bne.n	80016cc <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001694:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001698:	4413      	add	r3, r2
 800169a:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 800169c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a0:	4413      	add	r3, r2
 80016a2:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ae:	bf28      	it	cs
 80016b0:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80016b4:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80016b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b8:	3301      	adds	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	4413      	add	r3, r2
 80016c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f4ff af6f 	bcc.w	80015a8 <FLASH_IF_INT_Write+0xc4>
 80016ca:	e000      	b.n	80016ce <FLASH_IF_INT_Write+0x1ea>
          break;
 80016cc:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80016ce:	f003 fb63 	bl	8004d98 <HAL_FLASH_Lock>
 80016d2:	e002      	b.n	80016da <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80016d4:	23fb      	movs	r3, #251	@ 0xfb
 80016d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80016da:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3740      	adds	r7, #64	@ 0x40
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	1fff75e0 	.word	0x1fff75e0
 80016ec:	03fffc00 	.word	0x03fffc00
 80016f0:	200001c8 	.word	0x200001c8

080016f4 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <FLASH_IF_INT_Read+0x1c>
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001710:	f06f 0305 	mvn.w	r3, #5
 8001714:	e008      	b.n	8001728 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	b29b      	uxth	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f01a f9dc 	bl	801badc <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001724:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001750:	f06f 0305 	mvn.w	r3, #5
 8001754:	e04e      	b.n	80017f4 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001756:	f000 f87b 	bl	8001850 <FLASH_IF_INT_Clear_Error>
 800175a:	4603      	mov	r3, r0
 800175c:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800175e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d144      	bne.n	80017f0 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001766:	f003 faf5 	bl	8004d54 <HAL_FLASH_Unlock>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d13d      	bne.n	80017ec <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001770:	2302      	movs	r3, #2
 8001772:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <FLASH_IF_INT_Erase+0xcc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0299      	lsls	r1, r3, #10
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <FLASH_IF_INT_Erase+0xd0>)
 8001782:	400b      	ands	r3, r1
 8001784:	fbb2 f1f3 	udiv	r1, r2, r3
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	0adb      	lsrs	r3, r3, #11
 8001790:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800179c:	3b01      	subs	r3, #1
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <FLASH_IF_INT_Erase+0xcc>)
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	0291      	lsls	r1, r2, #10
 80017a4:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <FLASH_IF_INT_Erase+0xd0>)
 80017a6:	400a      	ands	r2, r1
 80017a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80017ac:	fb01 f202 	mul.w	r2, r1, r2
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	0ada      	lsrs	r2, r3, #11
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80017bc:	f107 0214 	add.w	r2, r7, #20
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fbc6 	bl	8004f58 <HAL_FLASHEx_Erase>
 80017cc:	4603      	mov	r3, r0
 80017ce:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80017d0:	7fbb      	ldrb	r3, [r7, #30]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80017d6:	7fbb      	ldrb	r3, [r7, #30]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d101      	bne.n	80017e0 <FLASH_IF_INT_Erase+0xb0>
 80017dc:	2301      	movs	r3, #1
 80017de:	e001      	b.n	80017e4 <FLASH_IF_INT_Erase+0xb4>
 80017e0:	f06f 0301 	mvn.w	r3, #1
 80017e4:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80017e6:	f003 fad7 	bl	8004d98 <HAL_FLASH_Lock>
 80017ea:	e001      	b.n	80017f0 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80017ec:	23fb      	movs	r3, #251	@ 0xfb
 80017ee:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80017f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	1fff75e0 	.word	0x1fff75e0
 8001800:	03fffc00 	.word	0x03fffc00

08001804 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	e011      	b.n	800183c <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001822:	bf08      	it	eq
 8001824:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001828:	d002      	beq.n	8001830 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800182a:	2301      	movs	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
      break;
 800182e:	e009      	b.n	8001844 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3308      	adds	r3, #8
 8001834:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3308      	adds	r3, #8
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d3e9      	bcc.n	8001818 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001844:	68fb      	ldr	r3, [r7, #12]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001856:	23fb      	movs	r3, #251	@ 0xfb
 8001858:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800185a:	f003 fa7b 	bl	8004d54 <HAL_FLASH_Unlock>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d110      	bne.n	8001886 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <FLASH_IF_INT_Clear_Error+0x44>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <FLASH_IF_INT_Clear_Error+0x44>)
 800186a:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <FLASH_IF_INT_Clear_Error+0x44>)
 8001872:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001876:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001878:	f003 fa8e 	bl	8004d98 <HAL_FLASH_Lock>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	58004000 	.word	0x58004000

08001898 <LL_AHB2_GRP1_EnableClock>:
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018bc:	68fb      	ldr	r3, [r7, #12]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	2001      	movs	r0, #1
 80018de:	f7ff ffdb 	bl	8001898 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2002      	movs	r0, #2
 80018e4:	f7ff ffd8 	bl	8001898 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	2004      	movs	r0, #4
 80018ea:	f7ff ffd5 	bl	8001898 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	2080      	movs	r0, #128	@ 0x80
 80018f0:	f7ff ffd2 	bl	8001898 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|VCC_OUT_EN_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f248 0131 	movw	r1, #32817	@ 0x8031
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fe:	f003 fe2d 	bl	800555c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001908:	483c      	ldr	r0, [pc, #240]	@ (80019fc <MX_GPIO_Init+0x134>)
 800190a:	f003 fe27 	bl	800555c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_RE_GPIO_Port, RS485_RE_Pin, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	2102      	movs	r1, #2
 8001912:	483b      	ldr	r0, [pc, #236]	@ (8001a00 <MX_GPIO_Init+0x138>)
 8001914:	f003 fe22 	bl	800555c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	2101      	movs	r1, #1
 800191c:	4838      	ldr	r0, [pc, #224]	@ (8001a00 <MX_GPIO_Init+0x138>)
 800191e:	f003 fe1d 	bl	800555c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA14 PA12 PA13 PA11
                           PA6 PA1 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11
 8001922:	f647 13c2 	movw	r3, #31170	@ 0x79c2
 8001926:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001928:	2303      	movs	r3, #3
 800192a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001938:	f003 fbe2 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800193c:	f248 0330 	movw	r3, #32816	@ 0x8030
 8001940:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001956:	f003 fbd3 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800195a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800195e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4822      	ldr	r0, [pc, #136]	@ (80019fc <MX_GPIO_Init+0x134>)
 8001972:	f003 fbc5 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB5 PB8 PB2
                           PB12 PB1 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_2
 8001976:	f641 7326 	movw	r3, #7974	@ 0x1f26
 800197a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197c:	2303      	movs	r3, #3
 800197e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	4619      	mov	r1, r3
 8001988:	481c      	ldr	r0, [pc, #112]	@ (80019fc <MX_GPIO_Init+0x134>)
 800198a:	f003 fbb9 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC2 PC3 PC5
                           PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800198e:	f242 037c 	movw	r3, #8316	@ 0x207c
 8001992:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001994:	2303      	movs	r3, #3
 8001996:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4817      	ldr	r0, [pc, #92]	@ (8001a00 <MX_GPIO_Init+0x138>)
 80019a2:	f003 fbad 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_EN_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_EN_Pin;
 80019a6:	2301      	movs	r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VCC_OUT_EN_GPIO_Port, &GPIO_InitStruct);
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019be:	f003 fb9f 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_RE_Pin RS485_DE_Pin */
  GPIO_InitStruct.Pin = RS485_RE_Pin|RS485_DE_Pin;
 80019c2:	2303      	movs	r3, #3
 80019c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	480a      	ldr	r0, [pc, #40]	@ (8001a00 <MX_GPIO_Init+0x138>)
 80019d8:	f003 fb92 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019dc:	2308      	movs	r3, #8
 80019de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e0:	2303      	movs	r3, #3
 80019e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <MX_GPIO_Init+0x13c>)
 80019ee:	f003 fb87 	bl	8005100 <HAL_GPIO_Init>

}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48001c00 	.word	0x48001c00

08001a08 <LL_AHB2_GRP1_EnableClock>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <LL_APB1_GRP1_EnableClock>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <MX_I2C1_Init+0x78>)
 8001a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <MX_I2C1_Init+0x7c>)
 8001a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 136;
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a7a:	2288      	movs	r2, #136	@ 0x88
 8001a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a84:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aa2:	480e      	ldr	r0, [pc, #56]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001aa4:	f003 fd71 	bl	800558a <HAL_I2C_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aae:	f000 f8f7 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4809      	ldr	r0, [pc, #36]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001ab6:	f004 fab3 	bl	8006020 <HAL_I2CEx_ConfigAnalogFilter>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ac0:	f000 f8ee 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_I2C1_Init+0x74>)
 8001ac8:	f004 faf4 	bl	80060b4 <HAL_I2CEx_ConfigDigitalFilter>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ad2:	f000 f8e5 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200001cc 	.word	0x200001cc
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	10805d88 	.word	0x10805d88

08001ae8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b096      	sub	sp, #88	@ 0x58
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2238      	movs	r2, #56	@ 0x38
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f01b fa43 	bl	801cf94 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a21      	ldr	r2, [pc, #132]	@ (8001b98 <HAL_I2C_MspInit+0xb0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d13a      	bne.n	8001b8e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b18:	2340      	movs	r3, #64	@ 0x40
 8001b1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b1c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001b20:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	4618      	mov	r0, r3
 8001b28:	f005 fd80 	bl	800762c <HAL_RCCEx_PeriphCLKConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b32:	f000 f8b5 	bl	8001ca0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7ff ff66 	bl	8001a08 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff ff63 	bl	8001a08 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = HDC_SDA_Pin;
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b46:	2312      	movs	r3, #18
 8001b48:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b52:	2304      	movs	r3, #4
 8001b54:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480f      	ldr	r0, [pc, #60]	@ (8001b9c <HAL_I2C_MspInit+0xb4>)
 8001b5e:	f003 facf 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HDC_SCL_Pin;
 8001b62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b66:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b74:	2304      	movs	r3, #4
 8001b76:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b82:	f003 fabd 	bl	8005100 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b86:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001b8a:	f7ff ff55 	bl	8001a38 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b8e:	bf00      	nop
 8001b90:	3758      	adds	r7, #88	@ 0x58
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40005400 	.word	0x40005400
 8001b9c:	48000400 	.word	0x48000400

08001ba0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb0:	f023 0218 	bic.w	r2, r3, #24
 8001bb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bce:	f001 faa9 	bl	8003124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd2:	f000 f80b 	bl	8001bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd6:	f7ff fe77 	bl	80018c8 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001bda:	f009 f8d1 	bl	800ad80 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001bde:	f000 ff1b 	bl	8002a18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001be2:	f7ff ff41 	bl	8001a68 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001be6:	f009 f8d3 	bl	800ad90 <MX_LoRaWAN_Process>
 8001bea:	e7fc      	b.n	8001be6 <main+0x1c>

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b09a      	sub	sp, #104	@ 0x68
 8001bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	2248      	movs	r2, #72	@ 0x48
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f01b f9ca 	bl	801cf94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c00:	f107 0308 	add.w	r3, r7, #8
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c12:	f004 fa9b 	bl	800614c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff ffc2 	bl	8001ba0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <SystemClock_Config+0xb0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c24:	4a1d      	ldr	r2, [pc, #116]	@ (8001c9c <SystemClock_Config+0xb0>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <SystemClock_Config+0xb0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001c38:	2324      	movs	r3, #36	@ 0x24
 8001c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c3c:	2381      	movs	r3, #129	@ 0x81
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c40:	2301      	movs	r3, #1
 8001c42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001c48:	23b0      	movs	r3, #176	@ 0xb0
 8001c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 fdc5 	bl	80067e4 <HAL_RCC_OscConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001c60:	f000 f81e 	bl	8001ca0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001c64:	234f      	movs	r3, #79	@ 0x4f
 8001c66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	2102      	movs	r1, #2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f005 f930 	bl	8006ee8 <HAL_RCC_ClockConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c8e:	f000 f807 	bl	8001ca0 <Error_Handler>
  }
}
 8001c92:	bf00      	nop
 8001c94:	3768      	adds	r7, #104	@ 0x68
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58000400 	.word	0x58000400

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <Error_Handler+0x8>

08001cac <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <LL_APB1_GRP1_EnableClock>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	222c      	movs	r2, #44	@ 0x2c
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f01b f943 	bl	801cf94 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d10:	4a22      	ldr	r2, [pc, #136]	@ (8001d9c <MX_RTC_Init+0xa0>)
 8001d12:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d16:	221f      	movs	r2, #31
 8001d18:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d20:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d26:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d32:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d42:	4815      	ldr	r0, [pc, #84]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d44:	f005 fd8c 	bl	8007860 <HAL_RTC_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001d4e:	f7ff ffa7 	bl	8001ca0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001d52:	4811      	ldr	r0, [pc, #68]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d54:	f006 f882 	bl	8007e5c <HAL_RTCEx_SetSSRU_IT>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001d5e:	f7ff ff9f 	bl	8001ca0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d6e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d72:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <MX_RTC_Init+0x9c>)
 8001d82:	f005 fdef 	bl	8007964 <HAL_RTC_SetAlarm_IT>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001d8c:	f7ff ff88 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	3730      	adds	r7, #48	@ 0x30
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000220 	.word	0x20000220
 8001d9c:	40002800 	.word	0x40002800

08001da0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b090      	sub	sp, #64	@ 0x40
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	2238      	movs	r2, #56	@ 0x38
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f01b f8ef 	bl	801cf94 <memset>
  if(rtcHandle->Instance==RTC)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a16      	ldr	r2, [pc, #88]	@ (8001e14 <HAL_RTC_MspInit+0x74>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d125      	bne.n	8001e0c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dc4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001dc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dca:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f005 fc2b 	bl	800762c <HAL_RCCEx_PeriphCLKConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ddc:	f7ff ff60 	bl	8001ca0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001de0:	f7ff ff64 	bl	8001cac <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001de4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001de8:	f7ff ff70 	bl	8001ccc <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	2002      	movs	r0, #2
 8001df2:	f002 fb4a 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001df6:	2002      	movs	r0, #2
 8001df8:	f002 fb61 	bl	80044be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	202a      	movs	r0, #42	@ 0x2a
 8001e02:	f002 fb42 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001e06:	202a      	movs	r0, #42	@ 0x2a
 8001e08:	f002 fb59 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3740      	adds	r7, #64	@ 0x40
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40002800 	.word	0x40002800

08001e18 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	58000400 	.word	0x58000400

08001e30 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001e4c:	f001 f98a 	bl	8003164 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001e50:	f7ff ffe2 	bl	8001e18 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f004 fa0b 	bl	8006270 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001e62:	f001 f98d 	bl	8003180 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001e66:	f001 f80d 	bl	8002e84 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001e72:	f001 f977 	bl	8003164 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001e76:	2101      	movs	r1, #1
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f004 f975 	bl	8006168 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001e86:	f001 f97b 	bl	8003180 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e9e:	bf00      	nop
 8001ea0:	e7fd      	b.n	8001e9e <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	bf00      	nop
 8001ea8:	e7fd      	b.n	8001ea6 <HardFault_Handler+0x4>

08001eaa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eae:	bf00      	nop
 8001eb0:	e7fd      	b.n	8001eae <MemManage_Handler+0x4>

08001eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb6:	bf00      	nop
 8001eb8:	e7fd      	b.n	8001eb6 <BusFault_Handler+0x4>

08001eba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebe:	bf00      	nop
 8001ec0:	e7fd      	b.n	8001ebe <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
	...

08001ef4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001ef8:	4802      	ldr	r0, [pc, #8]	@ (8001f04 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001efa:	f005 ffeb 	bl	8007ed4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000220 	.word	0x20000220

08001f08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <DMA1_Channel1_IRQHandler+0x10>)
 8001f0e:	f002 fd6d 	bl	80049ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000394 	.word	0x20000394

08001f1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001f20:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <DMA1_Channel2_IRQHandler+0x10>)
 8001f22:	f002 fd63 	bl	80049ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200003f4 	.word	0x200003f4

08001f30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f34:	4802      	ldr	r0, [pc, #8]	@ (8001f40 <USART1_IRQHandler+0x10>)
 8001f36:	f006 fe27 	bl	8008b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000026c 	.word	0x2000026c

08001f44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f48:	4802      	ldr	r0, [pc, #8]	@ (8001f54 <USART2_IRQHandler+0x10>)
 8001f4a:	f006 fe1d 	bl	8008b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000300 	.word	0x20000300

08001f58 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001f5c:	4802      	ldr	r0, [pc, #8]	@ (8001f68 <RTC_Alarm_IRQHandler+0x10>)
 8001f5e:	f005 fe69 	bl	8007c34 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000220 	.word	0x20000220

08001f6c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001f70:	4802      	ldr	r0, [pc, #8]	@ (8001f7c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001f72:	f006 fb1d 	bl	80085b0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000258 	.word	0x20000258

08001f80 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f8c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f9c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_SUBGHZ_Init+0x20>)
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_SUBGHZ_Init+0x20>)
 8001fbc:	f006 f876 	bl	80080ac <HAL_SUBGHZ_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001fc6:	f7ff fe6b 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000258 	.word	0x20000258

08001fd4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7ff ffcf 	bl	8001f80 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2032      	movs	r0, #50	@ 0x32
 8001fe8:	f002 fa4f 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001fec:	2032      	movs	r0, #50	@ 0x32
 8001fee:	f002 fa66 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800200c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002024:	4b02      	ldr	r3, [pc, #8]	@ (8002030 <LL_FLASH_GetUDN+0x10>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	1fff7580 	.word	0x1fff7580

08002034 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002038:	4b03      	ldr	r3, [pc, #12]	@ (8002048 <LL_FLASH_GetDeviceID+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	1fff7584 	.word	0x1fff7584

0800204c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <LL_FLASH_GetSTCompanyID+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0a1b      	lsrs	r3, r3, #8
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	1fff7584 	.word	0x1fff7584

08002064 <sht40>:
#define SHT40_CMD_HEATER_01S_110MW	0x24
#define SHT40_CMD_HEATER_1S_20MW	0x1E
#define SHT40_CMD_HEATER_01S_20MW	0x15

uint16_t sht40(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08e      	sub	sp, #56	@ 0x38
 8002068:	af02      	add	r7, sp, #8
	uint8_t tx_data[10]={0};
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	811a      	strh	r2, [r3, #8]
	uint8_t rx_data[10]={0};
 8002076:	463b      	mov	r3, r7
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	811a      	strh	r2, [r3, #8]
	uint32_t t_ticks=0, checksum_t=0, rh_ticks=0, checksum_rh=0, t_degC=0, rh_pRH=0;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
	tx_data[0] = SHT40_CMD_HPR;
 8002098:	23fd      	movs	r3, #253	@ 0xfd
 800209a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, SHT40_ADR, tx_data, 1, 10);
 800209c:	f107 020c 	add.w	r2, r7, #12
 80020a0:	230a      	movs	r3, #10
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2301      	movs	r3, #1
 80020a6:	2188      	movs	r1, #136	@ 0x88
 80020a8:	481e      	ldr	r0, [pc, #120]	@ (8002124 <sht40+0xc0>)
 80020aa:	f003 fb09 	bl	80056c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80020ae:	200a      	movs	r0, #10
 80020b0:	f000 f9b0 	bl	8002414 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, (SHT40_ADR | 0x01), rx_data, 6, 10);
 80020b4:	463a      	mov	r2, r7
 80020b6:	230a      	movs	r3, #10
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2306      	movs	r3, #6
 80020bc:	2189      	movs	r1, #137	@ 0x89
 80020be:	4819      	ldr	r0, [pc, #100]	@ (8002124 <sht40+0xc0>)
 80020c0:	f003 fc16 	bl	80058f0 <HAL_I2C_Master_Receive>
	t_ticks = rx_data[0] * 256 + rx_data[1];
 80020c4:	783b      	ldrb	r3, [r7, #0]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	787a      	ldrb	r2, [r7, #1]
 80020ca:	4413      	add	r3, r2
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	checksum_t = rx_data[2];
 80020ce:	78bb      	ldrb	r3, [r7, #2]
 80020d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	rh_ticks = rx_data[3] * 256 + rx_data[4];
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	793a      	ldrb	r2, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
	checksum_rh = rx_data[5];
 80020dc:	797b      	ldrb	r3, [r7, #5]
 80020de:	623b      	str	r3, [r7, #32]
	t_degC = -45 + 175 * t_ticks/65535;
 80020e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e2:	22af      	movs	r2, #175	@ 0xaf
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002128 <sht40+0xc4>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0bdb      	lsrs	r3, r3, #15
 80020f0:	3b2d      	subs	r3, #45	@ 0x2d
 80020f2:	61fb      	str	r3, [r7, #28]
	rh_pRH = -6 + 125 * rh_ticks/65535;
 80020f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f6:	4613      	mov	r3, r2
 80020f8:	015b      	lsls	r3, r3, #5
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <sht40+0xc4>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0bdb      	lsrs	r3, r3, #15
 8002108:	3b06      	subs	r3, #6
 800210a:	61bb      	str	r3, [r7, #24]
	return (uint16_t)((t_degC << 8) | rh_pRH);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	b29b      	uxth	r3, r3
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	b29a      	uxth	r2, r3
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	b29b      	uxth	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b29b      	uxth	r3, r3
		rh_pRH = 100;
	if (rh_pRH < 0)
		rh_pRH = 0;
	*/

}
 800211c:	4618      	mov	r0, r3
 800211e:	3730      	adds	r7, #48	@ 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200001cc 	.word	0x200001cc
 8002128:	80008001 	.word	0x80008001

0800212c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff ff62 	bl	8001ffa <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002136:	f01a f9f7 	bl	801c528 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <SystemApp_Init+0x48>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002140:	f000 f974 	bl	800242c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002144:	f01a fc80 	bl	801ca48 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002148:	480b      	ldr	r0, [pc, #44]	@ (8002178 <SystemApp_Init+0x4c>)
 800214a:	f01a fd2b 	bl	801cba4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800214e:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <SystemApp_Init+0x50>)
 8002150:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002154:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002156:	2002      	movs	r0, #2
 8002158:	f01a fd32 	bl	801cbc0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800215c:	f7fe ff92 	bl	8001084 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002160:	f000 f9a0 	bl	80024a4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002164:	f019 fc14 	bl	801b990 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002168:	2101      	movs	r1, #1
 800216a:	2001      	movs	r0, #1
 800216c:	f019 fc50 	bl	801ba10 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000264 	.word	0x20000264
 8002178:	0800234d 	.word	0x0800234d
 800217c:	58004000 	.word	0x58004000

08002180 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002184:	f019 fc74 	bl	801ba70 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002196:	f7fe fff5 	bl	8001184 <SYS_GetBatteryLevel>
 800219a:	4603      	mov	r3, r0
 800219c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800219e:	88bb      	ldrh	r3, [r7, #4]
 80021a0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d902      	bls.n	80021ae <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80021a8:	23fe      	movs	r3, #254	@ 0xfe
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	e014      	b.n	80021d8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80021b4:	d202      	bcs.n	80021bc <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	71fb      	strb	r3, [r7, #7]
 80021ba:	e00d      	b.n	80021d8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80021bc:	88bb      	ldrh	r3, [r7, #4]
 80021be:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80021c2:	461a      	mov	r2, r3
 80021c4:	4613      	mov	r3, r2
 80021c6:	01db      	lsls	r3, r3, #7
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <GetBatteryLevel+0x58>)
 80021d0:	fba3 2302 	umull	r2, r3, r3, r2
 80021d4:	09db      	lsrs	r3, r3, #7
 80021d6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80021d8:	79fb      	ldrb	r3, [r7, #7]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	1b4e81b5 	.word	0x1b4e81b5

080021e8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f923 	bl	8002440 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fc8d 	bl	8000b1c <__aeabi_f2iz>
 8002202:	4603      	mov	r3, r0
 8002204:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002206:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002212:	b590      	push	{r4, r7, lr}
 8002214:	b087      	sub	sp, #28
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800221e:	f7ff feff 	bl	8002020 <LL_FLASH_GetUDN>
 8002222:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222a:	d138      	bne.n	800229e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800222c:	f000 ffb6 	bl	800319c <HAL_GetUIDw0>
 8002230:	4604      	mov	r4, r0
 8002232:	f000 ffc7 	bl	80031c4 <HAL_GetUIDw2>
 8002236:	4603      	mov	r3, r0
 8002238:	4423      	add	r3, r4
 800223a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800223c:	f000 ffb8 	bl	80031b0 <HAL_GetUIDw1>
 8002240:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	0e1a      	lsrs	r2, r3, #24
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3307      	adds	r3, #7
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	0c1a      	lsrs	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3306      	adds	r3, #6
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	0a1a      	lsrs	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3305      	adds	r3, #5
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	0e1a      	lsrs	r2, r3, #24
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3303      	adds	r3, #3
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	0c1a      	lsrs	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3302      	adds	r3, #2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	0a1a      	lsrs	r2, r3, #8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3301      	adds	r3, #1
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800229c:	e031      	b.n	8002302 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3307      	adds	r3, #7
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	0a1a      	lsrs	r2, r3, #8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3306      	adds	r3, #6
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	0c1a      	lsrs	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3305      	adds	r3, #5
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	0e1a      	lsrs	r2, r3, #24
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80022cc:	f7ff feb2 	bl	8002034 <LL_FLASH_GetDeviceID>
 80022d0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3303      	adds	r3, #3
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80022dc:	f7ff feb6 	bl	800204c <LL_FLASH_GetSTCompanyID>
 80022e0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3302      	adds	r3, #2
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	0a1a      	lsrs	r2, r3, #8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3301      	adds	r3, #1
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	701a      	strb	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd90      	pop	{r4, r7, pc}

0800230a <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 800230a:	b590      	push	{r4, r7, lr}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002312:	f7ff fe85 	bl	8002020 <LL_FLASH_GetUDN>
 8002316:	4602      	mov	r2, r0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d10d      	bne.n	8002342 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002326:	f000 ff39 	bl	800319c <HAL_GetUIDw0>
 800232a:	4604      	mov	r4, r0
 800232c:	f000 ff40 	bl	80031b0 <HAL_GetUIDw1>
 8002330:	4603      	mov	r3, r0
 8002332:	405c      	eors	r4, r3
 8002334:	f000 ff46 	bl	80031c4 <HAL_GetUIDw2>
 8002338:	4603      	mov	r3, r0
 800233a:	ea84 0203 	eor.w	r2, r4, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
	...

0800234c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af02      	add	r7, sp, #8
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4618      	mov	r0, r3
 800235c:	f019 fc98 	bl	801bc90 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002366:	9200      	str	r2, [sp, #0]
 8002368:	4a07      	ldr	r2, [pc, #28]	@ (8002388 <TimestampNow+0x3c>)
 800236a:	2110      	movs	r1, #16
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f81d 	bl	80023ac <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fd ff00 	bl	8000178 <strlen>
 8002378:	4603      	mov	r3, r0
 800237a:	b29a      	uxth	r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	0801d108 	.word	0x0801d108

0800238c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f019 fb0c 	bl	801b9b0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80023a0:	2100      	movs	r1, #0
 80023a2:	2002      	movs	r0, #2
 80023a4:	f019 fb04 	bl	801b9b0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}

080023ac <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80023ac:	b40c      	push	{r2, r3}
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80023be:	6839      	ldr	r1, [r7, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f019 fdcf 	bl	801bf68 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023d4:	b002      	add	sp, #8
 80023d6:	4770      	bx	lr

080023d8 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_GetTick+0x24>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80023fe:	f000 f91d 	bl	800263c <TIMER_IF_GetTimerValue>
 8002402:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002404:	687b      	ldr	r3, [r7, #4]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000264 	.word	0x20000264

08002414 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f993 	bl	800274a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8002430:	f000 fed2 	bl	80031d8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002434:	f000 fed6 	bl	80031e4 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002438:	f000 feda 	bl	80031f0 <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <EnvSensors_Read+0x50>)
 800244a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <EnvSensors_Read+0x54>)
 800244e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <EnvSensors_Read+0x58>)
 8002452:	60fb      	str	r3, [r7, #12]

  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002454:	f7fe fe24 	bl	80010a0 <SYS_GetTemperatureLevel>
 8002458:	4603      	mov	r3, r0
 800245a:	121b      	asrs	r3, r3, #8
 800245c:	b21b      	sxth	r3, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f9b8 	bl	80007d4 <__aeabi_i2f>
 8002464:	4603      	mov	r3, r0
 8002466:	613b      	str	r3, [r7, #16]

  sensor_data->humidity    = HUMIDITY_Value;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a07      	ldr	r2, [pc, #28]	@ (800249c <EnvSensors_Read+0x5c>)
 800247e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <EnvSensors_Read+0x60>)
 8002484:	611a      	str	r2, [r3, #16]

  return 0;
 8002486:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	42480000 	.word	0x42480000
 8002494:	41900000 	.word	0x41900000
 8002498:	447a0000 	.word	0x447a0000
 800249c:	003e090d 	.word	0x003e090d
 80024a0:	000503ab 	.word	0x000503ab

080024a4 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80024ae:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <TIMER_IF_Init+0x5c>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	f083 0301 	eor.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01b      	beq.n	800252c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80024f4:	4b11      	ldr	r3, [pc, #68]	@ (800253c <TIMER_IF_Init+0x60>)
 80024f6:	f04f 32ff 	mov.w	r2, #4294967295
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80024fc:	f7ff fbfe 	bl	8001cfc <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002500:	f000 f856 	bl	80025b0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002504:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002508:	480c      	ldr	r0, [pc, #48]	@ (800253c <TIMER_IF_Init+0x60>)
 800250a:	f005 fb37 	bl	8007b7c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <TIMER_IF_Init+0x60>)
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002516:	4809      	ldr	r0, [pc, #36]	@ (800253c <TIMER_IF_Init+0x60>)
 8002518:	f005 fc6e 	bl	8007df8 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 800251c:	2000      	movs	r0, #0
 800251e:	f000 f9d3 	bl	80028c8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002522:	f000 f85f 	bl	80025e4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <TIMER_IF_Init+0x5c>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800252c:	79fb      	ldrb	r3, [r7, #7]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000265 	.word	0x20000265
 800253c:	20000220 	.word	0x20000220

08002540 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08e      	sub	sp, #56	@ 0x38
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800254e:	f107 0308 	add.w	r3, r7, #8
 8002552:	222c      	movs	r2, #44	@ 0x2c
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f01a fd1c 	bl	801cf94 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 800255c:	f000 f828 	bl	80025b0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002560:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <TIMER_IF_StartTimer+0x68>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	43db      	mvns	r3, r3
 8002572:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002578:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800257c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800257e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002582:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	2201      	movs	r2, #1
 800258a:	4619      	mov	r1, r3
 800258c:	4807      	ldr	r0, [pc, #28]	@ (80025ac <TIMER_IF_StartTimer+0x6c>)
 800258e:	f005 f9e9 	bl	8007964 <HAL_RTC_SetAlarm_IT>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002598:	f7ff fb82 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800259c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3738      	adds	r7, #56	@ 0x38
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000268 	.word	0x20000268
 80025ac:	20000220 	.word	0x20000220

080025b0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80025ba:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <TIMER_IF_StopTimer+0x2c>)
 80025bc:	2201      	movs	r2, #1
 80025be:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80025c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025c4:	4806      	ldr	r0, [pc, #24]	@ (80025e0 <TIMER_IF_StopTimer+0x30>)
 80025c6:	f005 fad9 	bl	8007b7c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80025ca:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <TIMER_IF_StopTimer+0x30>)
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80025d2:	79fb      	ldrb	r3, [r7, #7]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40002800 	.word	0x40002800
 80025e0:	20000220 	.word	0x20000220

080025e4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80025e8:	f000 f98e 	bl	8002908 <GetTimerTicks>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4a03      	ldr	r2, [pc, #12]	@ (80025fc <TIMER_IF_SetTimerContext+0x18>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80025f2:	4b02      	ldr	r3, [pc, #8]	@ (80025fc <TIMER_IF_SetTimerContext+0x18>)
 80025f4:	681b      	ldr	r3, [r3, #0]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000268 	.word	0x20000268

08002600 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002604:	4b02      	ldr	r3, [pc, #8]	@ (8002610 <TIMER_IF_GetTimerContext+0x10>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	20000268 	.word	0x20000268

08002614 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800261e:	f000 f973 	bl	8002908 <GetTimerTicks>
 8002622:	4602      	mov	r2, r0
 8002624:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000268 	.word	0x20000268

0800263c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <TIMER_IF_GetTimerValue+0x24>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800264e:	f000 f95b 	bl	8002908 <GetTimerTicks>
 8002652:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002654:	687b      	ldr	r3, [r7, #4]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000265 	.word	0x20000265

08002664 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800266e:	2303      	movs	r3, #3
 8002670:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002672:	687b      	ldr	r3, [r7, #4]
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800267e:	b5b0      	push	{r4, r5, r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002686:	2100      	movs	r1, #0
 8002688:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	2000      	movs	r0, #0
 800268e:	460a      	mov	r2, r1
 8002690:	4603      	mov	r3, r0
 8002692:	0d95      	lsrs	r5, r2, #22
 8002694:	0294      	lsls	r4, r2, #10
 8002696:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	4620      	mov	r0, r4
 80026a0:	4629      	mov	r1, r5
 80026a2:	f7fe fa81 	bl	8000ba8 <__aeabi_uldivmod>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4613      	mov	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bdb0      	pop	{r4, r5, r7, pc}

080026b8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80026b8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80026c2:	2100      	movs	r1, #0
 80026c4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	2000      	movs	r0, #0
 80026ca:	460c      	mov	r4, r1
 80026cc:	4605      	mov	r5, r0
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f04f 0a00 	mov.w	sl, #0
 80026d6:	f04f 0b00 	mov.w	fp, #0
 80026da:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80026de:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80026e2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80026e6:	4650      	mov	r0, sl
 80026e8:	4659      	mov	r1, fp
 80026ea:	1b02      	subs	r2, r0, r4
 80026ec:	eb61 0305 	sbc.w	r3, r1, r5
 80026f0:	f04f 0000 	mov.w	r0, #0
 80026f4:	f04f 0100 	mov.w	r1, #0
 80026f8:	0099      	lsls	r1, r3, #2
 80026fa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80026fe:	0090      	lsls	r0, r2, #2
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	eb12 0804 	adds.w	r8, r2, r4
 8002708:	eb43 0905 	adc.w	r9, r3, r5
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002718:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002720:	4690      	mov	r8, r2
 8002722:	4699      	mov	r9, r3
 8002724:	4640      	mov	r0, r8
 8002726:	4649      	mov	r1, r9
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	0a82      	lsrs	r2, r0, #10
 8002732:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002736:	0a8b      	lsrs	r3, r1, #10
 8002738:	4613      	mov	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800273c:	68fb      	ldr	r3, [r7, #12]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002748:	4770      	bx	lr

0800274a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ff93 	bl	800267e <TIMER_IF_Convert_ms2Tick>
 8002758:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800275a:	f000 f8d5 	bl	8002908 <GetTimerTicks>
 800275e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002760:	e000      	b.n	8002764 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002762:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002764:	f000 f8d0 	bl	8002908 <GetTimerTicks>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	429a      	cmp	r2, r3
 8002772:	d8f6      	bhi.n	8002762 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002786:	f01a f81d 	bl	801c7c4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800279a:	f000 f8a5 	bl	80028e8 <TIMER_IF_BkUp_Read_MSBticks>
 800279e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f88f 	bl	80028c8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80027b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b6:	b08c      	sub	sp, #48	@ 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80027c0:	f000 f8a2 	bl	8002908 <GetTimerTicks>
 80027c4:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80027c6:	f000 f88f 	bl	80028e8 <TIMER_IF_BkUp_Read_MSBticks>
 80027ca:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	2200      	movs	r2, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	60fa      	str	r2, [r7, #12]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	000b      	movs	r3, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027e4:	2000      	movs	r0, #0
 80027e6:	460c      	mov	r4, r1
 80027e8:	4605      	mov	r5, r0
 80027ea:	eb12 0804 	adds.w	r8, r2, r4
 80027ee:	eb43 0905 	adc.w	r9, r3, r5
 80027f2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80027f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	0a82      	lsrs	r2, r0, #10
 8002804:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002808:	0a8b      	lsrs	r3, r1, #10
 800280a:	4613      	mov	r3, r2
 800280c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2200      	movs	r2, #0
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800281c:	f04f 0b00 	mov.w	fp, #0
 8002820:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff46 	bl	80026b8 <TIMER_IF_Convert_Tick2ms>
 800282c:	4603      	mov	r3, r0
 800282e:	b29a      	uxth	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002836:	4618      	mov	r0, r3
 8002838:	3730      	adds	r7, #48	@ 0x30
 800283a:	46bd      	mov	sp, r7
 800283c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002840 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	2100      	movs	r1, #0
 800284c:	4803      	ldr	r0, [pc, #12]	@ (800285c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800284e:	f005 fb65 	bl	8007f1c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000220 	.word	0x20000220

08002860 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	2101      	movs	r1, #1
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800286e:	f005 fb55 	bl	8007f1c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000220 	.word	0x20000220

08002880 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800288a:	2100      	movs	r1, #0
 800288c:	4804      	ldr	r0, [pc, #16]	@ (80028a0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800288e:	f005 fb5d 	bl	8007f4c <HAL_RTCEx_BKUPRead>
 8002892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002894:	687b      	ldr	r3, [r7, #4]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000220 	.word	0x20000220

080028a4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80028ae:	2101      	movs	r1, #1
 80028b0:	4804      	ldr	r0, [pc, #16]	@ (80028c4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80028b2:	f005 fb4b 	bl	8007f4c <HAL_RTCEx_BKUPRead>
 80028b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80028b8:	687b      	ldr	r3, [r7, #4]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000220 	.word	0x20000220

080028c8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	2102      	movs	r1, #2
 80028d4:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80028d6:	f005 fb21 	bl	8007f1c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000220 	.word	0x20000220

080028e8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80028ee:	2102      	movs	r1, #2
 80028f0:	4804      	ldr	r0, [pc, #16]	@ (8002904 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80028f2:	f005 fb2b 	bl	8007f4c <HAL_RTCEx_BKUPRead>
 80028f6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80028f8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000220 	.word	0x20000220

08002908 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800290e:	480b      	ldr	r0, [pc, #44]	@ (800293c <GetTimerTicks+0x34>)
 8002910:	f7ff fdd9 	bl	80024c6 <LL_RTC_TIME_GetSubSecond>
 8002914:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002916:	e003      	b.n	8002920 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002918:	4808      	ldr	r0, [pc, #32]	@ (800293c <GetTimerTicks+0x34>)
 800291a:	f7ff fdd4 	bl	80024c6 <LL_RTC_TIME_GetSubSecond>
 800291e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002920:	4806      	ldr	r0, [pc, #24]	@ (800293c <GetTimerTicks+0x34>)
 8002922:	f7ff fdd0 	bl	80024c6 <LL_RTC_TIME_GetSubSecond>
 8002926:	4602      	mov	r2, r0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4293      	cmp	r3, r2
 800292c:	d1f4      	bne.n	8002918 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40002800 	.word	0x40002800

08002940 <LL_AHB2_GRP1_EnableClock>:
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800294e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002964:	68fb      	ldr	r3, [r7, #12]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <LL_APB1_GRP1_EnableClock>:
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800297e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4313      	orrs	r3, r2
 8002986:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4013      	ands	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002994:	68fb      	ldr	r3, [r7, #12]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <LL_APB1_GRP1_DisableClock>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80029a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029b6:	4013      	ands	r3, r2
 80029b8:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <LL_APB2_GRP1_EnableClock>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4313      	orrs	r3, r2
 80029da:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029e8:	68fb      	ldr	r3, [r7, #12]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_APB2_GRP1_DisableClock>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a1e:	4a23      	ldr	r2, [pc, #140]	@ (8002aac <MX_USART2_UART_Init+0x94>)
 8002a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a22:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a42:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a48:	4b17      	ldr	r3, [pc, #92]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4e:	4b16      	ldr	r3, [pc, #88]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a54:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5a:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a60:	4811      	ldr	r0, [pc, #68]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a62:	f005 ff74 	bl	800894e <HAL_UART_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a6c:	f7ff f918 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a70:	2100      	movs	r1, #0
 8002a72:	480d      	ldr	r0, [pc, #52]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a74:	f008 f89a 	bl	800abac <HAL_UARTEx_SetTxFifoThreshold>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a7e:	f7ff f90f 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a82:	2100      	movs	r1, #0
 8002a84:	4808      	ldr	r0, [pc, #32]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a86:	f008 f8cf 	bl	800ac28 <HAL_UARTEx_SetRxFifoThreshold>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a90:	f7ff f906 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a94:	4804      	ldr	r0, [pc, #16]	@ (8002aa8 <MX_USART2_UART_Init+0x90>)
 8002a96:	f008 f851 	bl	800ab3c <HAL_UARTEx_DisableFifoMode>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002aa0:	f7ff f8fe 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000300 	.word	0x20000300
 8002aac:	40004400 	.word	0x40004400

08002ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b096      	sub	sp, #88	@ 0x58
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	2238      	movs	r2, #56	@ 0x38
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f01a fa5f 	bl	801cf94 <memset>
  if(uartHandle->Instance==USART1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a68      	ldr	r2, [pc, #416]	@ (8002c7c <HAL_UART_MspInit+0x1cc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d16c      	bne.n	8002bba <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ae4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002ae8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 fd9c 	bl	800762c <HAL_RCCEx_PeriphCLKConfig>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002afa:	f7ff f8d1 	bl	8001ca0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002afe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b02:	f7ff ff5f 	bl	80029c4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7ff ff1a 	bl	8002940 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	2002      	movs	r0, #2
 8002b0e:	f7ff ff17 	bl	8002940 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002b12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b16:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b24:	2307      	movs	r3, #7
 8002b26:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002b28:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b32:	f002 fae5 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002b36:	2340      	movs	r3, #64	@ 0x40
 8002b38:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b46:	2307      	movs	r3, #7
 8002b48:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b4e:	4619      	mov	r1, r3
 8002b50:	484b      	ldr	r0, [pc, #300]	@ (8002c80 <HAL_UART_MspInit+0x1d0>)
 8002b52:	f002 fad5 	bl	8005100 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002b56:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b58:	4a4b      	ldr	r2, [pc, #300]	@ (8002c88 <HAL_UART_MspInit+0x1d8>)
 8002b5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b5c:	4b49      	ldr	r3, [pc, #292]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b5e:	2212      	movs	r2, #18
 8002b60:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b62:	4b48      	ldr	r3, [pc, #288]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b64:	2210      	movs	r2, #16
 8002b66:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b68:	4b46      	ldr	r3, [pc, #280]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b6e:	4b45      	ldr	r3, [pc, #276]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b70:	2280      	movs	r2, #128	@ 0x80
 8002b72:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b74:	4b43      	ldr	r3, [pc, #268]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b7a:	4b42      	ldr	r3, [pc, #264]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b80:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b86:	4b3f      	ldr	r3, [pc, #252]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b8c:	483d      	ldr	r0, [pc, #244]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002b8e:	f001 fcb3 	bl	80044f8 <HAL_DMA_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8002b98:	f7ff f882 	bl	8001ca0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a39      	ldr	r2, [pc, #228]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002ba0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ba2:	4a38      	ldr	r2, [pc, #224]	@ (8002c84 <HAL_UART_MspInit+0x1d4>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2102      	movs	r1, #2
 8002bac:	2024      	movs	r0, #36	@ 0x24
 8002bae:	f001 fc6c 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bb2:	2024      	movs	r0, #36	@ 0x24
 8002bb4:	f001 fc83 	bl	80044be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bb8:	e05c      	b.n	8002c74 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a33      	ldr	r2, [pc, #204]	@ (8002c8c <HAL_UART_MspInit+0x1dc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d157      	bne.n	8002c74 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bc8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002bcc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bce:	f107 030c 	add.w	r3, r7, #12
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 fd2a 	bl	800762c <HAL_RCCEx_PeriphCLKConfig>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002bde:	f7ff f85f 	bl	8001ca0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002be2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002be6:	f7ff fec3 	bl	8002970 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	2001      	movs	r0, #1
 8002bec:	f7ff fea8 	bl	8002940 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c00:	2307      	movs	r3, #7
 8002c02:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c0e:	f002 fa77 	bl	8005100 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002c12:	4b1f      	ldr	r3, [pc, #124]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c14:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <HAL_UART_MspInit+0x1e4>)
 8002c16:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002c18:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c1a:	2214      	movs	r2, #20
 8002c1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c20:	2210      	movs	r2, #16
 8002c22:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c24:	4b1a      	ldr	r3, [pc, #104]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c2a:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c30:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c36:	4b16      	ldr	r3, [pc, #88]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c42:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002c48:	4811      	ldr	r0, [pc, #68]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c4a:	f001 fc55 	bl	80044f8 <HAL_DMA_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002c54:	f7ff f824 	bl	8001ca0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c5c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c90 <HAL_UART_MspInit+0x1e0>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2100      	movs	r1, #0
 8002c68:	2025      	movs	r0, #37	@ 0x25
 8002c6a:	f001 fc0e 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c6e:	2025      	movs	r0, #37	@ 0x25
 8002c70:	f001 fc25 	bl	80044be <HAL_NVIC_EnableIRQ>
}
 8002c74:	bf00      	nop
 8002c76:	3758      	adds	r7, #88	@ 0x58
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	48000400 	.word	0x48000400
 8002c84:	20000394 	.word	0x20000394
 8002c88:	40020008 	.word	0x40020008
 8002c8c:	40004400 	.word	0x40004400
 8002c90:	200003f4 	.word	0x200003f4
 8002c94:	4002001c 	.word	0x4002001c

08002c98 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a19      	ldr	r2, [pc, #100]	@ (8002d0c <HAL_UART_MspDeInit+0x74>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d116      	bne.n	8002cd8 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002caa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002cae:	f7ff fea1 	bl	80029f4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(RS485_RX_GPIO_Port, RS485_RX_Pin);
 8002cb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cba:	f002 fb81 	bl	80053c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(RS485_TX_GPIO_Port, RS485_TX_Pin);
 8002cbe:	2140      	movs	r1, #64	@ 0x40
 8002cc0:	4813      	ldr	r0, [pc, #76]	@ (8002d10 <HAL_UART_MspDeInit+0x78>)
 8002cc2:	f002 fb7d 	bl	80053c0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 fcbc 	bl	8004648 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002cd0:	2024      	movs	r0, #36	@ 0x24
 8002cd2:	f001 fc02 	bl	80044da <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002cd6:	e015      	b.n	8002d04 <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <HAL_UART_MspDeInit+0x7c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d110      	bne.n	8002d04 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002ce2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002ce6:	f7ff fe5b 	bl	80029a0 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002cea:	210c      	movs	r1, #12
 8002cec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cf0:	f002 fb66 	bl	80053c0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 fca5 	bl	8004648 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002cfe:	2025      	movs	r0, #37	@ 0x25
 8002d00:	f001 fbeb 	bl	80044da <HAL_NVIC_DisableIRQ>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	48000400 	.word	0x48000400
 8002d14:	40004400 	.word	0x40004400

08002d18 <LL_APB1_GRP1_ForceReset>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <LL_APB1_GRP1_ReleaseReset>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d50:	4013      	ands	r3, r2
 8002d52:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
	...

08002d60 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002d6e:	4905      	ldr	r1, [pc, #20]	@ (8002d84 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	58000800 	.word	0x58000800

08002d88 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002d90:	4a07      	ldr	r2, [pc, #28]	@ (8002db0 <vcom_Init+0x28>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002d96:	f7fe fb15 	bl	80013c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002d9a:	f7ff fe3d 	bl	8002a18 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002d9e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002da2:	f7ff ffdd 	bl	8002d60 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002da6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000458 	.word	0x20000458

08002db4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002db8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002dbc:	f7ff ffac 	bl	8002d18 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002dc0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002dc4:	f7ff ffb9 	bl	8002d3a <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <vcom_DeInit+0x28>)
 8002dca:	f7ff ff65 	bl	8002c98 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002dce:	200f      	movs	r0, #15
 8002dd0:	f001 fb83 	bl	80044da <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002dd4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000300 	.word	0x20000300

08002de0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	461a      	mov	r2, r3
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4804      	ldr	r0, [pc, #16]	@ (8002e04 <vcom_Trace_DMA+0x24>)
 8002df4:	f005 fe48 	bl	8008a88 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002df8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000300 	.word	0x20000300

08002e08 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002e10:	4a19      	ldr	r2, [pc, #100]	@ (8002e78 <vcom_ReceiveInit+0x70>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002e16:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e1a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002e1c:	f107 0308 	add.w	r3, r7, #8
 8002e20:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e24:	4815      	ldr	r0, [pc, #84]	@ (8002e7c <vcom_ReceiveInit+0x74>)
 8002e26:	f007 fdfc 	bl	800aa22 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002e2a:	bf00      	nop
 8002e2c:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <vcom_ReceiveInit+0x74>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e3a:	d0f7      	beq.n	8002e2c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002e3c:	bf00      	nop
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <vcom_ReceiveInit+0x74>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e4c:	d1f7      	bne.n	8002e3e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <vcom_ReceiveInit+0x74>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <vcom_ReceiveInit+0x74>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002e5c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002e5e:	4807      	ldr	r0, [pc, #28]	@ (8002e7c <vcom_ReceiveInit+0x74>)
 8002e60:	f007 fe3a 	bl	800aad8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002e64:	2201      	movs	r2, #1
 8002e66:	4906      	ldr	r1, [pc, #24]	@ (8002e80 <vcom_ReceiveInit+0x78>)
 8002e68:	4804      	ldr	r0, [pc, #16]	@ (8002e7c <vcom_ReceiveInit+0x74>)
 8002e6a:	f005 fdc1 	bl	80089f0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002e6e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000045c 	.word	0x2000045c
 8002e7c:	20000300 	.word	0x20000300
 8002e80:	20000454 	.word	0x20000454

08002e84 <vcom_Resume>:

void vcom_Resume(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e88:	4808      	ldr	r0, [pc, #32]	@ (8002eac <vcom_Resume+0x28>)
 8002e8a:	f005 fd60 	bl	800894e <HAL_UART_Init>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002e94:	f7fe ff04 	bl	8001ca0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e98:	4805      	ldr	r0, [pc, #20]	@ (8002eb0 <vcom_Resume+0x2c>)
 8002e9a:	f001 fb2d 	bl	80044f8 <HAL_DMA_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002ea4:	f7fe fefc 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000300 	.word	0x20000300
 8002eb0:	200003f4 	.word	0x200003f4

08002eb4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a05      	ldr	r2, [pc, #20]	@ (8002ed8 <HAL_UART_TxCpltCallback+0x24>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d103      	bne.n	8002ece <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_UART_TxCpltCallback+0x28>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2000      	movs	r0, #0
 8002ecc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40004400 	.word	0x40004400
 8002edc:	20000458 	.word	0x20000458

08002ee0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0d      	ldr	r2, [pc, #52]	@ (8002f24 <HAL_UART_RxCpltCallback+0x44>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d113      	bne.n	8002f1a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f28 <HAL_UART_RxCpltCallback+0x48>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_UART_RxCpltCallback+0x30>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002f04:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <HAL_UART_RxCpltCallback+0x48>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4807      	ldr	r0, [pc, #28]	@ (8002f2c <HAL_UART_RxCpltCallback+0x4c>)
 8002f0e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002f10:	2201      	movs	r2, #1
 8002f12:	4906      	ldr	r1, [pc, #24]	@ (8002f2c <HAL_UART_RxCpltCallback+0x4c>)
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f005 fd6b 	bl	80089f0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40004400 	.word	0x40004400
 8002f28:	2000045c 	.word	0x2000045c
 8002f2c:	20000454 	.word	0x20000454

08002f30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f30:	480d      	ldr	r0, [pc, #52]	@ (8002f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f34:	f7ff fac1 	bl	80024ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f38:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f3a:	490d      	ldr	r1, [pc, #52]	@ (8002f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f74 <LoopForever+0xe>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f40:	e002      	b.n	8002f48 <LoopCopyDataInit>

08002f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f46:	3304      	adds	r3, #4

08002f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f4c:	d3f9      	bcc.n	8002f42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f50:	4c0a      	ldr	r4, [pc, #40]	@ (8002f7c <LoopForever+0x16>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f54:	e001      	b.n	8002f5a <LoopFillZerobss>

08002f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f58:	3204      	adds	r2, #4

08002f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f5c:	d3fb      	bcc.n	8002f56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f5e:	f01a f821 	bl	801cfa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f62:	f7fe fe32 	bl	8001bca <main>

08002f66 <LoopForever>:

LoopForever:
    b LoopForever
 8002f66:	e7fe      	b.n	8002f66 <LoopForever>
  ldr   r0, =_estack
 8002f68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f70:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8002f74:	0801e14c 	.word	0x0801e14c
  ldr r2, =_sbss
 8002f78:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8002f7c:	20002350 	.word	0x20002350

08002f80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f80:	e7fe      	b.n	8002f80 <ADC_IRQHandler>

08002f82 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002f96:	2310      	movs	r3, #16
 8002f98:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fae:	f002 f8a7 	bl	8005100 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fbe:	f002 f89f 	bl	8005100 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2120      	movs	r1, #32
 8002fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fca:	f002 fac7 	bl	800555c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fd6:	f002 fac1 	bl	800555c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d83f      	bhi.n	8003074 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ffc <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	08003027 	.word	0x08003027
 8003004:	08003041 	.word	0x08003041
 8003008:	0800305b 	.word	0x0800305b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800300c:	2200      	movs	r2, #0
 800300e:	2110      	movs	r1, #16
 8003010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003014:	f002 faa2 	bl	800555c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003018:	2200      	movs	r2, #0
 800301a:	2120      	movs	r1, #32
 800301c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003020:	f002 fa9c 	bl	800555c <HAL_GPIO_WritePin>
      break;      
 8003024:	e027      	b.n	8003076 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003026:	2201      	movs	r2, #1
 8003028:	2110      	movs	r1, #16
 800302a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800302e:	f002 fa95 	bl	800555c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003032:	2200      	movs	r2, #0
 8003034:	2120      	movs	r1, #32
 8003036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800303a:	f002 fa8f 	bl	800555c <HAL_GPIO_WritePin>
      break;
 800303e:	e01a      	b.n	8003076 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003040:	2201      	movs	r2, #1
 8003042:	2110      	movs	r1, #16
 8003044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003048:	f002 fa88 	bl	800555c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800304c:	2201      	movs	r2, #1
 800304e:	2120      	movs	r1, #32
 8003050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003054:	f002 fa82 	bl	800555c <HAL_GPIO_WritePin>
      break;
 8003058:	e00d      	b.n	8003076 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800305a:	2200      	movs	r2, #0
 800305c:	2110      	movs	r1, #16
 800305e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003062:	f002 fa7b 	bl	800555c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003066:	2201      	movs	r2, #1
 8003068:	2120      	movs	r1, #32
 800306a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800306e:	f002 fa75 	bl	800555c <HAL_GPIO_WritePin>
      break;
 8003072:	e000      	b.n	8003076 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003074:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003084:	2302      	movs	r3, #2
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003092:	2301      	movs	r3, #1
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80030a0:	2301      	movs	r3, #1
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80030ba:	230f      	movs	r3, #15
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	e001      	b.n	80030c4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80030c0:	2316      	movs	r3, #22
 80030c2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80030c4:	68fb      	ldr	r3, [r7, #12]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <LL_DBGMCU_DisableDBGSleepMode>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a03      	ldr	r2, [pc, #12]	@ (80030e8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6053      	str	r3, [r2, #4]
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	e0042000 	.word	0xe0042000

080030ec <LL_DBGMCU_DisableDBGStopMode>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80030f0:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a03      	ldr	r2, [pc, #12]	@ (8003104 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80030f6:	f023 0302 	bic.w	r3, r3, #2
 80030fa:	6053      	str	r3, [r2, #4]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	e0042000 	.word	0xe0042000

08003108 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800310c:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a03      	ldr	r2, [pc, #12]	@ (8003120 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003112:	f023 0304 	bic.w	r3, r3, #4
 8003116:	6053      	str	r3, [r2, #4]
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	e0042000 	.word	0xe0042000

08003124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312e:	2003      	movs	r0, #3
 8003130:	f001 f9a0 	bl	8004474 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003134:	f004 f89c 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 8003138:	4603      	mov	r3, r0
 800313a:	4a09      	ldr	r2, [pc, #36]	@ (8003160 <HAL_Init+0x3c>)
 800313c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800313e:	200f      	movs	r0, #15
 8003140:	f7ff f94a 	bl	80023d8 <HAL_InitTick>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	71fb      	strb	r3, [r7, #7]
 800314e:	e001      	b.n	8003154 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003150:	f7fe fe9d 	bl	8001e8e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003154:	79fb      	ldrb	r3, [r7, #7]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000

08003164 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003168:	4b04      	ldr	r3, [pc, #16]	@ (800317c <HAL_SuspendTick+0x18>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a03      	ldr	r2, [pc, #12]	@ (800317c <HAL_SuspendTick+0x18>)
 800316e:	f023 0302 	bic.w	r3, r3, #2
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	e000e010 	.word	0xe000e010

08003180 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003184:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <HAL_ResumeTick+0x18>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a03      	ldr	r2, [pc, #12]	@ (8003198 <HAL_ResumeTick+0x18>)
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	6013      	str	r3, [r2, #0]
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	e000e010 	.word	0xe000e010

0800319c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80031a0:	4b02      	ldr	r3, [pc, #8]	@ (80031ac <HAL_GetUIDw0+0x10>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	1fff7590 	.word	0x1fff7590

080031b0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80031b4:	4b02      	ldr	r3, [pc, #8]	@ (80031c0 <HAL_GetUIDw1+0x10>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	1fff7594 	.word	0x1fff7594

080031c4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80031c8:	4b02      	ldr	r3, [pc, #8]	@ (80031d4 <HAL_GetUIDw2+0x10>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	1fff7598 	.word	0x1fff7598

080031d8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80031dc:	f7ff ff78 	bl	80030d0 <LL_DBGMCU_DisableDBGSleepMode>
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80031e8:	f7ff ff80 	bl	80030ec <LL_DBGMCU_DisableDBGStopMode>
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80031f4:	f7ff ff88 	bl	8003108 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}

080031fc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2107      	movs	r1, #7
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	401a      	ands	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	431a      	orrs	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2107      	movs	r1, #7
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	210f      	movs	r1, #15
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	401a      	ands	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	f003 010f 	and.w	r1, r3, #15
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003344:	43db      	mvns	r3, r3
 8003346:	401a      	ands	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	43db      	mvns	r3, r3
 800336c:	401a      	ands	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	0219      	lsls	r1, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	400b      	ands	r3, r1
 8003376:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800337a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800337e:	431a      	orrs	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800339e:	f023 0317 	bic.w	r3, r3, #23
 80033a2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033c4:	f023 0317 	bic.w	r3, r3, #23
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6093      	str	r3, [r2, #8]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ea:	d101      	bne.n	80033f0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800340c:	f023 0317 	bic.w	r3, r3, #23
 8003410:	f043 0201 	orr.w	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003432:	f023 0317 	bic.w	r3, r3, #23
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <LL_ADC_IsEnabled+0x18>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <LL_ADC_IsEnabled+0x1a>
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d101      	bne.n	8003484 <LL_ADC_IsDisableOngoing+0x18>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <LL_ADC_IsDisableOngoing+0x1a>
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034a0:	f023 0317 	bic.w	r3, r3, #23
 80034a4:	f043 0204 	orr.w	r2, r3, #4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034c6:	f023 0317 	bic.w	r3, r3, #23
 80034ca:	f043 0210 	orr.w	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d101      	bne.n	80034f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e17e      	b.n	8003820 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fd fd5f 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff44 	bl	80033d6 <LL_ADC_IsInternalRegulatorEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d115      	bne.n	8003580 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff18 	bl	800338e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800355e:	4b9e      	ldr	r3, [pc, #632]	@ (80037d8 <HAL_ADC_Init+0x2d8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	099b      	lsrs	r3, r3, #6
 8003564:	4a9d      	ldr	r2, [pc, #628]	@ (80037dc <HAL_ADC_Init+0x2dc>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	3301      	adds	r3, #1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003572:	e002      	b.n	800357a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3b01      	subs	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f9      	bne.n	8003574 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff26 	bl	80033d6 <LL_ADC_IsInternalRegulatorEnabled>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10d      	bne.n	80035ac <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003594:	f043 0210 	orr.w	r2, r3, #16
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff93 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 80035b6:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 8124 	bne.w	800380e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f040 8120 	bne.w	800380e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80035d6:	f043 0202 	orr.w	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff30 	bl	8003448 <LL_ADC_IsEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 80a7 	bne.w	800373e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7e1b      	ldrb	r3, [r3, #24]
 80035f8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80035fa:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7e5b      	ldrb	r3, [r3, #25]
 8003600:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003602:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7e9b      	ldrb	r3, [r3, #26]
 8003608:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800360a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003610:	2a00      	cmp	r2, #0
 8003612:	d002      	beq.n	800361a <HAL_ADC_Init+0x11a>
 8003614:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003618:	e000      	b.n	800361c <HAL_ADC_Init+0x11c>
 800361a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800361c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003622:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	da04      	bge.n	8003636 <HAL_ADC_Init+0x136>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003634:	e001      	b.n	800363a <HAL_ADC_Init+0x13a>
 8003636:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800363a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003642:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003644:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d114      	bne.n	8003680 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7e9b      	ldrb	r3, [r3, #26]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e00b      	b.n	8003680 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003694:	4313      	orrs	r3, r2
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80036a6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	69b9      	ldr	r1, [r7, #24]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036c0:	4313      	orrs	r3, r2
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d111      	bne.n	80036f6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036de:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80036e4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80036ea:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	4b38      	ldr	r3, [pc, #224]	@ (80037e0 <HAL_ADC_Init+0x2e0>)
 80036fe:	4013      	ands	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	6979      	ldr	r1, [r7, #20]
 8003706:	430b      	orrs	r3, r1
 8003708:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003712:	d014      	beq.n	800373e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371c:	d00f      	beq.n	800373e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003726:	d00a      	beq.n	800373e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003728:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <HAL_ADC_Init+0x2e4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003738:	492a      	ldr	r1, [pc, #168]	@ (80037e4 <HAL_ADC_Init+0x2e4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003746:	461a      	mov	r2, r3
 8003748:	2100      	movs	r1, #0
 800374a:	f7ff fd76 	bl	800323a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003756:	461a      	mov	r2, r3
 8003758:	4923      	ldr	r1, [pc, #140]	@ (80037e8 <HAL_ADC_Init+0x2e8>)
 800375a:	f7ff fd6e 	bl	800323a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d108      	bne.n	8003778 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f062 020f 	orn	r2, r2, #15
 8003774:	629a      	str	r2, [r3, #40]	@ 0x28
 8003776:	e017      	b.n	80037a8 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003780:	d112      	bne.n	80037a8 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	3b01      	subs	r3, #1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	f003 031c 	and.w	r3, r3, #28
 8003794:	f06f 020f 	mvn.w	r2, #15
 8003798:	fa02 f103 	lsl.w	r1, r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fd61 	bl	8003276 <LL_ADC_GetSamplingTimeCommonChannels>
 80037b4:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d116      	bne.n	80037ec <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c8:	f023 0303 	bic.w	r3, r3, #3
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037d4:	e023      	b.n	800381e <HAL_ADC_Init+0x31e>
 80037d6:	bf00      	nop
 80037d8:	20000000 	.word	0x20000000
 80037dc:	053e2d63 	.word	0x053e2d63
 80037e0:	1ffffc02 	.word	0x1ffffc02
 80037e4:	40012708 	.word	0x40012708
 80037e8:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	f023 0312 	bic.w	r3, r3, #18
 80037f4:	f043 0210 	orr.w	r2, r3, #16
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800380c:	e007      	b.n	800381e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003812:	f043 0210 	orr.w	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800381e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07a      	b.n	8003930 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	f043 0202 	orr.w	r2, r3, #2
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 face 	bl	8003de8 <ADC_ConversionStop>
 800384c:	4603      	mov	r3, r0
 800384e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fb92 	bl	8003f80 <ADC_Disable>
 800385c:	4603      	mov	r3, r0
 800385e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fd9f 	bl	80033b4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003884:	f023 0303 	bic.w	r3, r3, #3
 8003888:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f240 329f 	movw	r2, #927	@ 0x39f
 8003892:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68d9      	ldr	r1, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b26      	ldr	r3, [pc, #152]	@ (8003938 <HAL_ADC_DeInit+0x110>)
 80038a0:	400b      	ands	r3, r1
 80038a2:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0207 	bic.w	r2, r2, #7
 80038b2:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80038d0:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80038e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80038f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003900:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003902:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <HAL_ADC_DeInit+0x114>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a0d      	ldr	r2, [pc, #52]	@ (800393c <HAL_ADC_DeInit+0x114>)
 8003908:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800390c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fb9e 	bl	8001050 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	833e0200 	.word	0x833e0200
 800393c:	40012708 	.word	0x40012708

08003940 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fdc5 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d132      	bne.n	80039be <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_ADC_Start+0x26>
 8003962:	2302      	movs	r3, #2
 8003964:	e02e      	b.n	80039c4 <HAL_ADC_Start+0x84>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa80 	bl	8003e74 <ADC_Enable>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d11a      	bne.n	80039b4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003982:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	221c      	movs	r2, #28
 800399e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fd6f 	bl	8003490 <LL_ADC_REG_StartConversion>
 80039b2:	e006      	b.n	80039c2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80039bc:	e001      	b.n	80039c2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039be:	2302      	movs	r3, #2
 80039c0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_Stop+0x16>
 80039de:	2302      	movs	r3, #2
 80039e0:	e022      	b.n	8003a28 <HAL_ADC_Stop+0x5c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f9fc 	bl	8003de8 <ADC_ConversionStop>
 80039f0:	4603      	mov	r3, r0
 80039f2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d111      	bne.n	8003a1e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fac0 	bl	8003f80 <ADC_Disable>
 8003a00:	4603      	mov	r3, r0
 8003a02:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d102      	bne.n	8003a48 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003a42:	2308      	movs	r3, #8
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e010      	b.n	8003a6a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e077      	b.n	8003b56 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003a66:	2304      	movs	r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a6a:	f7fe fcbf 	bl	80023ec <HAL_GetTick>
 8003a6e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a70:	e021      	b.n	8003ab6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d01d      	beq.n	8003ab6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a7a:	f7fe fcb7 	bl	80023ec <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <HAL_ADC_PollForConversion+0x60>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d112      	bne.n	8003ab6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e04f      	b.n	8003b56 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0d6      	beq.n	8003a72 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fbe6 	bl	80032a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d031      	beq.n	8003b44 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7e9b      	ldrb	r3, [r3, #26]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d12d      	bne.n	8003b44 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d126      	bne.n	8003b44 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fcee 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d112      	bne.n	8003b2c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 020c 	bic.w	r2, r2, #12
 8003b14:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	f043 0201 	orr.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b2a:	e00b      	b.n	8003b44 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	7e1b      	ldrb	r3, [r3, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	220c      	movs	r2, #12
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x28>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e110      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x24a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fc95 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f040 80f7 	bne.w	8003da8 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	f000 80b1 	beq.w	8003d26 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bcc:	d004      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bd2:	4a7e      	ldr	r2, [pc, #504]	@ (8003dcc <HAL_ADC_ConfigChannel+0x254>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f7ff fb92 	bl	800330c <LL_ADC_REG_SetSequencerChAdd>
 8003be8:	e041      	b.n	8003c6e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	210f      	movs	r1, #15
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	401a      	ands	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0xa0>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0e9b      	lsrs	r3, r3, #26
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	e011      	b.n	8003c3c <HAL_ADC_ConfigChannel+0xc4>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	fa93 f3a3 	rbit	r3, r3
 8003c24:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	e003      	b.n	8003c3c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	6839      	ldr	r1, [r7, #0]
 8003c3e:	6849      	ldr	r1, [r1, #4]
 8003c40:	f001 011f 	and.w	r1, r1, #31
 8003c44:	408b      	lsls	r3, r1
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d808      	bhi.n	8003c6e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f7ff fb2e 	bl	80032ca <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f7ff fb6b 	bl	8003356 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f280 8097 	bge.w	8003db8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c8a:	4851      	ldr	r0, [pc, #324]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x258>)
 8003c8c:	f7ff fac8 	bl	8003220 <LL_ADC_GetCommonPathInternalCh>
 8003c90:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd4 <HAL_ADC_ConfigChannel+0x25c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d120      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11b      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cac:	4619      	mov	r1, r3
 8003cae:	4848      	ldr	r0, [pc, #288]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x258>)
 8003cb0:	f7ff faa4 	bl	80031fc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cb4:	4b48      	ldr	r3, [pc, #288]	@ (8003dd8 <HAL_ADC_ConfigChannel+0x260>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	099b      	lsrs	r3, r3, #6
 8003cba:	4a48      	ldr	r2, [pc, #288]	@ (8003ddc <HAL_ADC_ConfigChannel+0x264>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cce:	e002      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f9      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003cdc:	e06c      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3f      	ldr	r2, [pc, #252]	@ (8003de0 <HAL_ADC_ConfigChannel+0x268>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10c      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d107      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4835      	ldr	r0, [pc, #212]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x258>)
 8003cfc:	f7ff fa7e 	bl	80031fc <LL_ADC_SetCommonPathInternalCh>
 8003d00:	e05a      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a37      	ldr	r2, [pc, #220]	@ (8003de4 <HAL_ADC_ConfigChannel+0x26c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d155      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d150      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	482c      	ldr	r0, [pc, #176]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x258>)
 8003d20:	f7ff fa6c 	bl	80031fc <LL_ADC_SetCommonPathInternalCh>
 8003d24:	e048      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d2e:	d004      	beq.n	8003d3a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d34:	4a25      	ldr	r2, [pc, #148]	@ (8003dcc <HAL_ADC_ConfigChannel+0x254>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d107      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7ff faf3 	bl	8003330 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da32      	bge.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d52:	481f      	ldr	r0, [pc, #124]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x258>)
 8003d54:	f7ff fa64 	bl	8003220 <LL_ADC_GetCommonPathInternalCh>
 8003d58:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd4 <HAL_ADC_ConfigChannel+0x25c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d107      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4818      	ldr	r0, [pc, #96]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x258>)
 8003d6e:	f7ff fa45 	bl	80031fc <LL_ADC_SetCommonPathInternalCh>
 8003d72:	e021      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a19      	ldr	r2, [pc, #100]	@ (8003de0 <HAL_ADC_ConfigChannel+0x268>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d107      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d84:	4619      	mov	r1, r3
 8003d86:	4812      	ldr	r0, [pc, #72]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x258>)
 8003d88:	f7ff fa38 	bl	80031fc <LL_ADC_SetCommonPathInternalCh>
 8003d8c:	e014      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a14      	ldr	r2, [pc, #80]	@ (8003de4 <HAL_ADC_ConfigChannel+0x26c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d10f      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003d9e:	4619      	mov	r1, r3
 8003da0:	480b      	ldr	r0, [pc, #44]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x258>)
 8003da2:	f7ff fa2b 	bl	80031fc <LL_ADC_SetCommonPathInternalCh>
 8003da6:	e007      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003dc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	80000004 	.word	0x80000004
 8003dd0:	40012708 	.word	0x40012708
 8003dd4:	b0001000 	.word	0xb0001000
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	053e2d63 	.word	0x053e2d63
 8003de0:	b8004000 	.word	0xb8004000
 8003de4:	b4002000 	.word	0xb4002000

08003de8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fb71 	bl	80034dc <LL_ADC_REG_IsConversionOngoing>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d033      	beq.n	8003e68 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fb31 	bl	800346c <LL_ADC_IsDisableOngoing>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d104      	bne.n	8003e1a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fb4e 	bl	80034b6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e1a:	f7fe fae7 	bl	80023ec <HAL_GetTick>
 8003e1e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e20:	e01b      	b.n	8003e5a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e22:	f7fe fae3 	bl	80023ec <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d914      	bls.n	8003e5a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	f043 0210 	orr.w	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e007      	b.n	8003e6a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1dc      	bne.n	8003e22 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fadf 	bl	8003448 <LL_ADC_IsEnabled>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d169      	bne.n	8003f64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <ADC_Enable+0xfc>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea2:	f043 0210 	orr.w	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eae:	f043 0201 	orr.w	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e055      	b.n	8003f66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fa9c 	bl	80033fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003ec4:	482b      	ldr	r0, [pc, #172]	@ (8003f74 <ADC_Enable+0x100>)
 8003ec6:	f7ff f9ab 	bl	8003220 <LL_ADC_GetCommonPathInternalCh>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00f      	beq.n	8003ef4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ed4:	4b28      	ldr	r3, [pc, #160]	@ (8003f78 <ADC_Enable+0x104>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	099b      	lsrs	r3, r3, #6
 8003eda:	4a28      	ldr	r2, [pc, #160]	@ (8003f7c <ADC_Enable+0x108>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	099b      	lsrs	r3, r3, #6
 8003ee2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003ee4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ee6:	e002      	b.n	8003eee <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f9      	bne.n	8003ee8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7e5b      	ldrb	r3, [r3, #25]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d033      	beq.n	8003f64 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003efc:	f7fe fa76 	bl	80023ec <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f02:	e028      	b.n	8003f56 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fa9d 	bl	8003448 <LL_ADC_IsEnabled>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d104      	bne.n	8003f1e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fa6f 	bl	80033fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f1e:	f7fe fa65 	bl	80023ec <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d914      	bls.n	8003f56 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d00d      	beq.n	8003f56 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3e:	f043 0210 	orr.w	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4a:	f043 0201 	orr.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e007      	b.n	8003f66 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d1cf      	bne.n	8003f04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	80000017 	.word	0x80000017
 8003f74:	40012708 	.word	0x40012708
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	053e2d63 	.word	0x053e2d63

08003f80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fa6d 	bl	800346c <LL_ADC_IsDisableOngoing>
 8003f92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fa55 	bl	8003448 <LL_ADC_IsEnabled>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d047      	beq.n	8004034 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d144      	bne.n	8004034 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0305 	and.w	r3, r3, #5
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d10c      	bne.n	8003fd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fa30 	bl	8003422 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fca:	f7fe fa0f 	bl	80023ec <HAL_GetTick>
 8003fce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fd0:	e029      	b.n	8004026 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd6:	f043 0210 	orr.w	r2, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e023      	b.n	8004036 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fee:	f7fe f9fd 	bl	80023ec <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d914      	bls.n	8004026 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	f043 0210 	orr.w	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e007      	b.n	8004036 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1dc      	bne.n	8003fee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <LL_ADC_SetCalibrationFactor>:
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800404e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <LL_ADC_GetCalibrationFactor>:
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <LL_ADC_Enable>:
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004092:	f023 0317 	bic.w	r3, r3, #23
 8004096:	f043 0201 	orr.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	609a      	str	r2, [r3, #8]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <LL_ADC_Disable>:
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040b8:	f023 0317 	bic.w	r3, r3, #23
 80040bc:	f043 0202 	orr.w	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	609a      	str	r2, [r3, #8]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr

080040ce <LL_ADC_IsEnabled>:
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <LL_ADC_IsEnabled+0x18>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <LL_ADC_IsEnabled+0x1a>
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <LL_ADC_StartCalibration>:
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004102:	f023 0317 	bic.w	r3, r3, #23
 8004106:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <LL_ADC_IsCalibrationOnGoing>:
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800412c:	d101      	bne.n	8004132 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b088      	sub	sp, #32
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_ADCEx_Calibration_Start+0x1e>
 8004158:	2302      	movs	r3, #2
 800415a:	e0b9      	b.n	80042d0 <HAL_ADCEx_Calibration_Start+0x192>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff0b 	bl	8003f80 <ADC_Disable>
 800416a:	4603      	mov	r3, r0
 800416c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ffab 	bl	80040ce <LL_ADC_IsEnabled>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 809d 	bne.w	80042ba <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004184:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004188:	f043 0202 	orr.w	r2, r3, #2
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	f248 0303 	movw	r3, #32771	@ 0x8003
 800419a:	4013      	ands	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041ac:	f023 0303 	bic.w	r3, r3, #3
 80041b0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	e02e      	b.n	8004216 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff98 	bl	80040f2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041c2:	e014      	b.n	80041ee <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	3301      	adds	r3, #1
 80041c8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80041d0:	d30d      	bcc.n	80041ee <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	f023 0312 	bic.w	r3, r3, #18
 80041da:	f043 0210 	orr.w	r2, r3, #16
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e070      	b.n	80042d0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ff90 	bl	8004118 <LL_ADC_IsCalibrationOnGoing>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e2      	bne.n	80041c4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ff2f 	bl	8004066 <LL_ADC_GetCalibrationFactor>
 8004208:	4602      	mov	r2, r0
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4413      	add	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3301      	adds	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b07      	cmp	r3, #7
 800421a:	d9cd      	bls.n	80041b8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ff29 	bl	8004082 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ff01 	bl	800403e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff31 	bl	80040a8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004246:	f7fe f8d1 	bl	80023ec <HAL_GetTick>
 800424a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800424c:	e01c      	b.n	8004288 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800424e:	f7fe f8cd 	bl	80023ec <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d915      	bls.n	8004288 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff ff34 	bl	80040ce <LL_ADC_IsEnabled>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004270:	f043 0210 	orr.w	r2, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e023      	b.n	80042d0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff1e 	bl	80040ce <LL_ADC_IsEnabled>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1da      	bne.n	800424e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68d9      	ldr	r1, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ac:	f023 0303 	bic.w	r3, r3, #3
 80042b0:	f043 0201 	orr.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80042b8:	e005      	b.n	80042c6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042be:	f043 0210 	orr.w	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <__NVIC_SetPriorityGrouping+0x44>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004300:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430a:	4a04      	ldr	r2, [pc, #16]	@ (800431c <__NVIC_SetPriorityGrouping+0x44>)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	60d3      	str	r3, [r2, #12]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004324:	4b04      	ldr	r3, [pc, #16]	@ (8004338 <__NVIC_GetPriorityGrouping+0x18>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	f003 0307 	and.w	r3, r3, #7
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	2b00      	cmp	r3, #0
 800434c:	db0b      	blt.n	8004366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	4906      	ldr	r1, [pc, #24]	@ (8004370 <__NVIC_EnableIRQ+0x34>)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2001      	movs	r0, #1
 800435e:	fa00 f202 	lsl.w	r2, r0, r2
 8004362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	e000e100 	.word	0xe000e100

08004374 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	2b00      	cmp	r3, #0
 8004384:	db12      	blt.n	80043ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	f003 021f 	and.w	r2, r3, #31
 800438c:	490a      	ldr	r1, [pc, #40]	@ (80043b8 <__NVIC_DisableIRQ+0x44>)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	2001      	movs	r0, #1
 8004396:	fa00 f202 	lsl.w	r2, r0, r2
 800439a:	3320      	adds	r3, #32
 800439c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80043a0:	f3bf 8f4f 	dsb	sy
}
 80043a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043a6:	f3bf 8f6f 	isb	sy
}
 80043aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	e000e100 	.word	0xe000e100

080043bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db0a      	blt.n	80043e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	490c      	ldr	r1, [pc, #48]	@ (8004408 <__NVIC_SetPriority+0x4c>)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	0112      	lsls	r2, r2, #4
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	440b      	add	r3, r1
 80043e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e4:	e00a      	b.n	80043fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4908      	ldr	r1, [pc, #32]	@ (800440c <__NVIC_SetPriority+0x50>)
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	3b04      	subs	r3, #4
 80043f4:	0112      	lsls	r2, r2, #4
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	440b      	add	r3, r1
 80043fa:	761a      	strb	r2, [r3, #24]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e100 	.word	0xe000e100
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	@ 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f1c3 0307 	rsb	r3, r3, #7
 800442a:	2b04      	cmp	r3, #4
 800442c:	bf28      	it	cs
 800442e:	2304      	movcs	r3, #4
 8004430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3304      	adds	r3, #4
 8004436:	2b06      	cmp	r3, #6
 8004438:	d902      	bls.n	8004440 <NVIC_EncodePriority+0x30>
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3b03      	subs	r3, #3
 800443e:	e000      	b.n	8004442 <NVIC_EncodePriority+0x32>
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004444:	f04f 32ff 	mov.w	r2, #4294967295
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43da      	mvns	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	401a      	ands	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004458:	f04f 31ff 	mov.w	r1, #4294967295
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	43d9      	mvns	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004468:	4313      	orrs	r3, r2
         );
}
 800446a:	4618      	mov	r0, r3
 800446c:	3724      	adds	r7, #36	@ 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff2b 	bl	80042d8 <__NVIC_SetPriorityGrouping>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	4603      	mov	r3, r0
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004498:	f7ff ff42 	bl	8004320 <__NVIC_GetPriorityGrouping>
 800449c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	f7ff ffb4 	bl	8004410 <NVIC_EncodePriority>
 80044a8:	4602      	mov	r2, r0
 80044aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff83 	bl	80043bc <__NVIC_SetPriority>
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	4603      	mov	r3, r0
 80044c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ff35 	bl	800433c <__NVIC_EnableIRQ>
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	4603      	mov	r3, r0
 80044e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ff43 	bl	8004374 <__NVIC_DisableIRQ>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e08e      	b.n	8004628 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	4b47      	ldr	r3, [pc, #284]	@ (8004630 <HAL_DMA_Init+0x138>)
 8004512:	429a      	cmp	r2, r3
 8004514:	d80f      	bhi.n	8004536 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	4b45      	ldr	r3, [pc, #276]	@ (8004634 <HAL_DMA_Init+0x13c>)
 800451e:	4413      	add	r3, r2
 8004520:	4a45      	ldr	r2, [pc, #276]	@ (8004638 <HAL_DMA_Init+0x140>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	009a      	lsls	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a42      	ldr	r2, [pc, #264]	@ (800463c <HAL_DMA_Init+0x144>)
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40
 8004534:	e00e      	b.n	8004554 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	4b40      	ldr	r3, [pc, #256]	@ (8004640 <HAL_DMA_Init+0x148>)
 800453e:	4413      	add	r3, r2
 8004540:	4a3d      	ldr	r2, [pc, #244]	@ (8004638 <HAL_DMA_Init+0x140>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	009a      	lsls	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a3c      	ldr	r2, [pc, #240]	@ (8004644 <HAL_DMA_Init+0x14c>)
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800456a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fb24 	bl	8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b4:	d102      	bne.n	80045bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <HAL_DMA_Init+0x106>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d80c      	bhi.n	80045fe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fb4d 	bl	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	e008      	b.n	8004610 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40020407 	.word	0x40020407
 8004634:	bffdfff8 	.word	0xbffdfff8
 8004638:	cccccccd 	.word	0xcccccccd
 800463c:	40020000 	.word	0x40020000
 8004640:	bffdfbf8 	.word	0xbffdfbf8
 8004644:	40020400 	.word	0x40020400

08004648 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e07b      	b.n	8004752 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0201 	bic.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	4b3a      	ldr	r3, [pc, #232]	@ (800475c <HAL_DMA_DeInit+0x114>)
 8004672:	429a      	cmp	r2, r3
 8004674:	d80f      	bhi.n	8004696 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	4b38      	ldr	r3, [pc, #224]	@ (8004760 <HAL_DMA_DeInit+0x118>)
 800467e:	4413      	add	r3, r2
 8004680:	4a38      	ldr	r2, [pc, #224]	@ (8004764 <HAL_DMA_DeInit+0x11c>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	009a      	lsls	r2, r3, #2
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a35      	ldr	r2, [pc, #212]	@ (8004768 <HAL_DMA_DeInit+0x120>)
 8004692:	641a      	str	r2, [r3, #64]	@ 0x40
 8004694:	e00e      	b.n	80046b4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	4b33      	ldr	r3, [pc, #204]	@ (800476c <HAL_DMA_DeInit+0x124>)
 800469e:	4413      	add	r3, r2
 80046a0:	4a30      	ldr	r2, [pc, #192]	@ (8004764 <HAL_DMA_DeInit+0x11c>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	009a      	lsls	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004770 <HAL_DMA_DeInit+0x128>)
 80046b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c0:	f003 021c 	and.w	r2, r3, #28
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	2101      	movs	r1, #1
 80046ca:	fa01 f202 	lsl.w	r2, r1, r2
 80046ce:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fa8f 	bl	8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046e6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00f      	beq.n	8004710 <HAL_DMA_DeInit+0xc8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d80b      	bhi.n	8004710 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fac3 	bl	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800470e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40020407 	.word	0x40020407
 8004760:	bffdfff8 	.word	0xbffdfff8
 8004764:	cccccccd 	.word	0xcccccccd
 8004768:	40020000 	.word	0x40020000
 800476c:	bffdfbf8 	.word	0xbffdfbf8
 8004770:	40020400 	.word	0x40020400

08004774 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_DMA_Start_IT+0x20>
 8004790:	2302      	movs	r3, #2
 8004792:	e069      	b.n	8004868 <HAL_DMA_Start_IT+0xf4>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d155      	bne.n	8004854 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f9d3 	bl	8004b78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 020e 	orr.w	r2, r2, #14
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e00f      	b.n	800480c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 020a 	orr.w	r2, r2, #10
 800480a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004828:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004840:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e008      	b.n	8004866 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2280      	movs	r2, #128	@ 0x80
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004866:	7dfb      	ldrb	r3, [r7, #23]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e04f      	b.n	8004922 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d008      	beq.n	80048a0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2204      	movs	r2, #4
 8004892:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e040      	b.n	8004922 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 020e 	bic.w	r2, r2, #14
 80048ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0201 	bic.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d4:	f003 021c 	and.w	r2, r3, #28
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f202 	lsl.w	r2, r1, r2
 80048e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004904:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800490e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d005      	beq.n	8004950 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2204      	movs	r2, #4
 8004948:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	e047      	b.n	80049e0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 020e 	bic.w	r2, r2, #14
 800495e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800497a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800497e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004984:	f003 021c 	and.w	r2, r3, #28
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f202 	lsl.w	r2, r1, r2
 8004992:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800499c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
    }
  }
  return status;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a08:	f003 031c 	and.w	r3, r3, #28
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d027      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x7c>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d022      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d107      	bne.n	8004a40 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0204 	bic.w	r2, r2, #4
 8004a3e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	f003 021c 	and.w	r2, r3, #28
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	2104      	movs	r1, #4
 8004a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a52:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8081 	beq.w	8004b60 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004a66:	e07b      	b.n	8004b60 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6c:	f003 031c 	and.w	r3, r3, #28
 8004a70:	2202      	movs	r2, #2
 8004a72:	409a      	lsls	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d03d      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x10c>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d038      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10b      	bne.n	8004aac <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 020a 	bic.w	r2, r2, #10
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b6c <HAL_DMA_IRQHandler+0x180>)
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d909      	bls.n	8004acc <HAL_DMA_IRQHandler+0xe0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abc:	f003 031c 	and.w	r3, r3, #28
 8004ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b70 <HAL_DMA_IRQHandler+0x184>)
 8004ac2:	2102      	movs	r1, #2
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	6053      	str	r3, [r2, #4]
 8004aca:	e008      	b.n	8004ade <HAL_DMA_IRQHandler+0xf2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad0:	f003 031c 	and.w	r3, r3, #28
 8004ad4:	4a27      	ldr	r2, [pc, #156]	@ (8004b74 <HAL_DMA_IRQHandler+0x188>)
 8004ad6:	2102      	movs	r1, #2
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d038      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004af6:	e033      	b.n	8004b60 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afc:	f003 031c 	and.w	r3, r3, #28
 8004b00:	2208      	movs	r2, #8
 8004b02:	409a      	lsls	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02a      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x176>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d025      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 020e 	bic.w	r2, r2, #14
 8004b24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2a:	f003 021c 	and.w	r2, r3, #28
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	2101      	movs	r1, #1
 8004b34:	fa01 f202 	lsl.w	r2, r1, r2
 8004b38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d004      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
}
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40020080 	.word	0x40020080
 8004b70:	40020400 	.word	0x40020400
 8004b74:	40020000 	.word	0x40020000

08004b78 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b8e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ba0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	f003 021c 	and.w	r2, r3, #28
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d108      	bne.n	8004bd8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bd6:	e007      	b.n	8004be8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	60da      	str	r2, [r3, #12]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
	...

08004bf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b1c      	ldr	r3, [pc, #112]	@ (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d813      	bhi.n	8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c14:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	3b08      	subs	r3, #8
 8004c24:	4a14      	ldr	r2, [pc, #80]	@ (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	e011      	b.n	8004c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	3b08      	subs	r3, #8
 8004c48:	4a0b      	ldr	r2, [pc, #44]	@ (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	3307      	adds	r3, #7
 8004c52:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0a      	ldr	r2, [pc, #40]	@ (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004c58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	2201      	movs	r2, #1
 8004c62:	409a      	lsls	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40020407 	.word	0x40020407
 8004c78:	cccccccd 	.word	0xcccccccd
 8004c7c:	4002081c 	.word	0x4002081c
 8004c80:	40020880 	.word	0x40020880

08004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c94:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a08      	ldr	r2, [pc, #32]	@ (8004cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ca8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr
 8004cc4:	1000823f 	.word	0x1000823f
 8004cc8:	40020940 	.word	0x40020940

08004ccc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004cda:	4b1c      	ldr	r3, [pc, #112]	@ (8004d4c <HAL_FLASH_Program+0x80>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_FLASH_Program+0x1a>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e02d      	b.n	8004d42 <HAL_FLASH_Program+0x76>
 8004ce6:	4b19      	ldr	r3, [pc, #100]	@ (8004d4c <HAL_FLASH_Program+0x80>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cec:	4b17      	ldr	r3, [pc, #92]	@ (8004d4c <HAL_FLASH_Program+0x80>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004cf2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cf6:	f000 f869 	bl	8004dcc <FLASH_WaitForLastOperation>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11a      	bne.n	8004d3a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d105      	bne.n	8004d16 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d0e:	68b8      	ldr	r0, [r7, #8]
 8004d10:	f000 f8be 	bl	8004e90 <FLASH_Program_DoubleWord>
 8004d14:	e004      	b.n	8004d20 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f000 f8de 	bl	8004edc <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d24:	f000 f852 	bl	8004dcc <FLASH_WaitForLastOperation>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004d2c:	4b08      	ldr	r3, [pc, #32]	@ (8004d50 <HAL_FLASH_Program+0x84>)
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	43db      	mvns	r3, r3
 8004d34:	4906      	ldr	r1, [pc, #24]	@ (8004d50 <HAL_FLASH_Program+0x84>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004d3a:	4b04      	ldr	r3, [pc, #16]	@ (8004d4c <HAL_FLASH_Program+0x80>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000460 	.word	0x20000460
 8004d50:	58004000 	.word	0x58004000

08004d54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <HAL_FLASH_Unlock+0x38>)
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da0b      	bge.n	8004d7e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d66:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_FLASH_Unlock+0x38>)
 8004d68:	4a09      	ldr	r2, [pc, #36]	@ (8004d90 <HAL_FLASH_Unlock+0x3c>)
 8004d6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d6c:	4b07      	ldr	r3, [pc, #28]	@ (8004d8c <HAL_FLASH_Unlock+0x38>)
 8004d6e:	4a09      	ldr	r2, [pc, #36]	@ (8004d94 <HAL_FLASH_Unlock+0x40>)
 8004d70:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d72:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_FLASH_Unlock+0x38>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	da01      	bge.n	8004d7e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	58004000 	.word	0x58004000
 8004d90:	45670123 	.word	0x45670123
 8004d94:	cdef89ab 	.word	0xcdef89ab

08004d98 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004da2:	4b09      	ldr	r3, [pc, #36]	@ (8004dc8 <HAL_FLASH_Lock+0x30>)
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	4a08      	ldr	r2, [pc, #32]	@ (8004dc8 <HAL_FLASH_Lock+0x30>)
 8004da8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dac:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004dae:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <HAL_FLASH_Lock+0x30>)
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	db01      	blt.n	8004dba <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004dba:	79fb      	ldrb	r3, [r7, #7]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	58004000 	.word	0x58004000

08004dcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004dd4:	f7fd fb0a 	bl	80023ec <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004dda:	e009      	b.n	8004df0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004ddc:	f7fd fb06 	bl	80023ec <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d801      	bhi.n	8004df0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e046      	b.n	8004e7e <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004df0:	4b25      	ldr	r3, [pc, #148]	@ (8004e88 <FLASH_WaitForLastOperation+0xbc>)
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfc:	d0ee      	beq.n	8004ddc <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004dfe:	4b22      	ldr	r3, [pc, #136]	@ (8004e88 <FLASH_WaitForLastOperation+0xbc>)
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <FLASH_WaitForLastOperation+0xbc>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e24:	d307      	bcc.n	8004e36 <FLASH_WaitForLastOperation+0x6a>
 8004e26:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <FLASH_WaitForLastOperation+0xbc>)
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004e30:	4915      	ldr	r1, [pc, #84]	@ (8004e88 <FLASH_WaitForLastOperation+0xbc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	618b      	str	r3, [r1, #24]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d004      	beq.n	8004e4a <FLASH_WaitForLastOperation+0x7e>
 8004e40:	4a11      	ldr	r2, [pc, #68]	@ (8004e88 <FLASH_WaitForLastOperation+0xbc>)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e48:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004e50:	4a0e      	ldr	r2, [pc, #56]	@ (8004e8c <FLASH_WaitForLastOperation+0xc0>)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e011      	b.n	8004e7e <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004e5a:	f7fd fac7 	bl	80023ec <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d801      	bhi.n	8004e6e <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e007      	b.n	8004e7e <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004e6e:	4b06      	ldr	r3, [pc, #24]	@ (8004e88 <FLASH_WaitForLastOperation+0xbc>)
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e7a:	d0ee      	beq.n	8004e5a <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	58004000 	.word	0x58004000
 8004e8c:	20000460 	.word	0x20000460

08004e90 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed8 <FLASH_Program_DoubleWord+0x48>)
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <FLASH_Program_DoubleWord+0x48>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004eae:	f3bf 8f6f 	isb	sy
}
 8004eb2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004eb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	000a      	movs	r2, r1
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	68f9      	ldr	r1, [r7, #12]
 8004ec6:	3104      	adds	r1, #4
 8004ec8:	4613      	mov	r3, r2
 8004eca:	600b      	str	r3, [r1, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	58004000 	.word	0x58004000

08004edc <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004edc:	b480      	push	{r7}
 8004ede:	b089      	sub	sp, #36	@ 0x24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004ee6:	2340      	movs	r3, #64	@ 0x40
 8004ee8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004ef2:	4b18      	ldr	r3, [pc, #96]	@ (8004f54 <FLASH_Program_Fast+0x78>)
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	4a17      	ldr	r2, [pc, #92]	@ (8004f54 <FLASH_Program_Fast+0x78>)
 8004ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004efc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004efe:	f3ef 8310 	mrs	r3, PRIMASK
 8004f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f04:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f08:	b672      	cpsid	i
}
 8004f0a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	3304      	adds	r3, #4
 8004f18:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004f20:	7ffb      	ldrb	r3, [r7, #31]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004f26:	7ffb      	ldrb	r3, [r7, #31]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1ef      	bne.n	8004f0c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004f2c:	bf00      	nop
 8004f2e:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <FLASH_Program_Fast+0x78>)
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f3a:	d0f8      	beq.n	8004f2e <FLASH_Program_Fast+0x52>
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f383 8810 	msr	PRIMASK, r3
}
 8004f46:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004f48:	bf00      	nop
 8004f4a:	3724      	adds	r7, #36	@ 0x24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	58004000 	.word	0x58004000

08004f58 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f62:	4b28      	ldr	r3, [pc, #160]	@ (8005004 <HAL_FLASHEx_Erase+0xac>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_FLASHEx_Erase+0x16>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e046      	b.n	8004ffc <HAL_FLASHEx_Erase+0xa4>
 8004f6e:	4b25      	ldr	r3, [pc, #148]	@ (8005004 <HAL_FLASHEx_Erase+0xac>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f74:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <HAL_FLASHEx_Erase+0xac>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f7e:	f7ff ff25 	bl	8004dcc <FLASH_WaitForLastOperation>
 8004f82:	4603      	mov	r3, r0
 8004f84:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d133      	bne.n	8004ff4 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d108      	bne.n	8004fa6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004f94:	f000 f838 	bl	8005008 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f9c:	f7ff ff16 	bl	8004dcc <FLASH_WaitForLastOperation>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	73fb      	strb	r3, [r7, #15]
 8004fa4:	e024      	b.n	8004ff0 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	e012      	b.n	8004fdc <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004fb6:	68b8      	ldr	r0, [r7, #8]
 8004fb8:	f000 f836 	bl	8005028 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fc0:	f7ff ff04 	bl	8004dcc <FLASH_WaitForLastOperation>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	601a      	str	r2, [r3, #0]
          break;
 8004fd4:	e00a      	b.n	8004fec <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d3e4      	bcc.n	8004fb6 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004fec:	f000 f878 	bl	80050e0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004ff0:	f000 f832 	bl	8005058 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ff4:	4b03      	ldr	r3, [pc, #12]	@ (8005004 <HAL_FLASHEx_Erase+0xac>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]

  return status;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000460 	.word	0x20000460

08005008 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800500c:	4b05      	ldr	r3, [pc, #20]	@ (8005024 <FLASH_MassErase+0x1c>)
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	4a04      	ldr	r2, [pc, #16]	@ (8005024 <FLASH_MassErase+0x1c>)
 8005012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005016:	f043 0304 	orr.w	r3, r3, #4
 800501a:	6153      	str	r3, [r2, #20]
#endif
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	58004000 	.word	0x58004000

08005028 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005030:	4b08      	ldr	r3, [pc, #32]	@ (8005054 <FLASH_PageErase+0x2c>)
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4313      	orrs	r3, r2
 800503e:	4a05      	ldr	r2, [pc, #20]	@ (8005054 <FLASH_PageErase+0x2c>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005044:	f043 0302 	orr.w	r3, r3, #2
 8005048:	6153      	str	r3, [r2, #20]
#endif
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	58004000 	.word	0x58004000

08005058 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800505c:	4b1f      	ldr	r3, [pc, #124]	@ (80050dc <FLASH_FlushCaches+0x84>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005064:	2b01      	cmp	r3, #1
 8005066:	d117      	bne.n	8005098 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005068:	4b1c      	ldr	r3, [pc, #112]	@ (80050dc <FLASH_FlushCaches+0x84>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <FLASH_FlushCaches+0x84>)
 800506e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005072:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005074:	4b19      	ldr	r3, [pc, #100]	@ (80050dc <FLASH_FlushCaches+0x84>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a18      	ldr	r2, [pc, #96]	@ (80050dc <FLASH_FlushCaches+0x84>)
 800507a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	4b16      	ldr	r3, [pc, #88]	@ (80050dc <FLASH_FlushCaches+0x84>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a15      	ldr	r2, [pc, #84]	@ (80050dc <FLASH_FlushCaches+0x84>)
 8005086:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800508a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800508c:	4b13      	ldr	r3, [pc, #76]	@ (80050dc <FLASH_FlushCaches+0x84>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a12      	ldr	r2, [pc, #72]	@ (80050dc <FLASH_FlushCaches+0x84>)
 8005092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005096:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005098:	4b10      	ldr	r3, [pc, #64]	@ (80050dc <FLASH_FlushCaches+0x84>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d117      	bne.n	80050d4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80050a4:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <FLASH_FlushCaches+0x84>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a0c      	ldr	r2, [pc, #48]	@ (80050dc <FLASH_FlushCaches+0x84>)
 80050aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050ae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <FLASH_FlushCaches+0x84>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a09      	ldr	r2, [pc, #36]	@ (80050dc <FLASH_FlushCaches+0x84>)
 80050b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b07      	ldr	r3, [pc, #28]	@ (80050dc <FLASH_FlushCaches+0x84>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a06      	ldr	r2, [pc, #24]	@ (80050dc <FLASH_FlushCaches+0x84>)
 80050c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80050c8:	4b04      	ldr	r3, [pc, #16]	@ (80050dc <FLASH_FlushCaches+0x84>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a03      	ldr	r2, [pc, #12]	@ (80050dc <FLASH_FlushCaches+0x84>)
 80050ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050d2:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr
 80050dc:	58004000 	.word	0x58004000

080050e0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80050e4:	4b05      	ldr	r3, [pc, #20]	@ (80050fc <FLASH_AcknowledgePageErase+0x1c>)
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	4a04      	ldr	r2, [pc, #16]	@ (80050fc <FLASH_AcknowledgePageErase+0x1c>)
 80050ea:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80050ee:	f023 0302 	bic.w	r3, r3, #2
 80050f2:	6153      	str	r3, [r2, #20]
#endif
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	58004000 	.word	0x58004000

08005100 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800510e:	e140      	b.n	8005392 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2101      	movs	r1, #1
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	fa01 f303 	lsl.w	r3, r1, r3
 800511c:	4013      	ands	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8132 	beq.w	800538c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	2b01      	cmp	r3, #1
 8005132:	d005      	beq.n	8005140 <HAL_GPIO_Init+0x40>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d130      	bne.n	80051a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	2203      	movs	r2, #3
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	43db      	mvns	r3, r3
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4013      	ands	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005176:	2201      	movs	r2, #1
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4013      	ands	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 0201 	and.w	r2, r3, #1
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d017      	beq.n	80051de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	2203      	movs	r2, #3
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	43db      	mvns	r3, r3
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4013      	ands	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d123      	bne.n	8005232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	08da      	lsrs	r2, r3, #3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3208      	adds	r2, #8
 80051f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	220f      	movs	r2, #15
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43db      	mvns	r3, r3
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4013      	ands	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	08da      	lsrs	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3208      	adds	r2, #8
 800522c:	6939      	ldr	r1, [r7, #16]
 800522e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	2203      	movs	r2, #3
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43db      	mvns	r3, r3
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4013      	ands	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f003 0203 	and.w	r2, r3, #3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 808c 	beq.w	800538c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005274:	4a4e      	ldr	r2, [pc, #312]	@ (80053b0 <HAL_GPIO_Init+0x2b0>)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	089b      	lsrs	r3, r3, #2
 800527a:	3302      	adds	r3, #2
 800527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	2207      	movs	r2, #7
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4013      	ands	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800529e:	d00d      	beq.n	80052bc <HAL_GPIO_Init+0x1bc>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a44      	ldr	r2, [pc, #272]	@ (80053b4 <HAL_GPIO_Init+0x2b4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <HAL_GPIO_Init+0x1b8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a43      	ldr	r2, [pc, #268]	@ (80053b8 <HAL_GPIO_Init+0x2b8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d101      	bne.n	80052b4 <HAL_GPIO_Init+0x1b4>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e004      	b.n	80052be <HAL_GPIO_Init+0x1be>
 80052b4:	2307      	movs	r3, #7
 80052b6:	e002      	b.n	80052be <HAL_GPIO_Init+0x1be>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <HAL_GPIO_Init+0x1be>
 80052bc:	2300      	movs	r3, #0
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	f002 0203 	and.w	r2, r2, #3
 80052c4:	0092      	lsls	r2, r2, #2
 80052c6:	4093      	lsls	r3, r2
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052ce:	4938      	ldr	r1, [pc, #224]	@ (80053b0 <HAL_GPIO_Init+0x2b0>)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	3302      	adds	r3, #2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052dc:	4b37      	ldr	r3, [pc, #220]	@ (80053bc <HAL_GPIO_Init+0x2bc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4013      	ands	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005300:	4a2e      	ldr	r2, [pc, #184]	@ (80053bc <HAL_GPIO_Init+0x2bc>)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005306:	4b2d      	ldr	r3, [pc, #180]	@ (80053bc <HAL_GPIO_Init+0x2bc>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	43db      	mvns	r3, r3
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4013      	ands	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800532a:	4a24      	ldr	r2, [pc, #144]	@ (80053bc <HAL_GPIO_Init+0x2bc>)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005330:	4b22      	ldr	r3, [pc, #136]	@ (80053bc <HAL_GPIO_Init+0x2bc>)
 8005332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005336:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	43db      	mvns	r3, r3
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4013      	ands	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005356:	4a19      	ldr	r2, [pc, #100]	@ (80053bc <HAL_GPIO_Init+0x2bc>)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800535e:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <HAL_GPIO_Init+0x2bc>)
 8005360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005364:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	43db      	mvns	r3, r3
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4013      	ands	r3, r2
 800536e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005384:	4a0d      	ldr	r2, [pc, #52]	@ (80053bc <HAL_GPIO_Init+0x2bc>)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	3301      	adds	r3, #1
 8005390:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	f47f aeb7 	bne.w	8005110 <HAL_GPIO_Init+0x10>
  }
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	48000400 	.word	0x48000400
 80053b8:	48000800 	.word	0x48000800
 80053bc:	58000800 	.word	0x58000800

080053c0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80053ce:	e0af      	b.n	8005530 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80053d0:	2201      	movs	r2, #1
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	4013      	ands	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80a2 	beq.w	800552a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80053e6:	4a59      	ldr	r2, [pc, #356]	@ (800554c <HAL_GPIO_DeInit+0x18c>)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	089b      	lsrs	r3, r3, #2
 80053ec:	3302      	adds	r3, #2
 80053ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	2207      	movs	r2, #7
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4013      	ands	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800540e:	d00d      	beq.n	800542c <HAL_GPIO_DeInit+0x6c>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a4f      	ldr	r2, [pc, #316]	@ (8005550 <HAL_GPIO_DeInit+0x190>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d007      	beq.n	8005428 <HAL_GPIO_DeInit+0x68>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a4e      	ldr	r2, [pc, #312]	@ (8005554 <HAL_GPIO_DeInit+0x194>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <HAL_GPIO_DeInit+0x64>
 8005420:	2302      	movs	r3, #2
 8005422:	e004      	b.n	800542e <HAL_GPIO_DeInit+0x6e>
 8005424:	2307      	movs	r3, #7
 8005426:	e002      	b.n	800542e <HAL_GPIO_DeInit+0x6e>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_GPIO_DeInit+0x6e>
 800542c:	2300      	movs	r3, #0
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	f002 0203 	and.w	r2, r2, #3
 8005434:	0092      	lsls	r2, r2, #2
 8005436:	4093      	lsls	r3, r2
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	429a      	cmp	r2, r3
 800543c:	d136      	bne.n	80054ac <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800543e:	4b46      	ldr	r3, [pc, #280]	@ (8005558 <HAL_GPIO_DeInit+0x198>)
 8005440:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	43db      	mvns	r3, r3
 8005448:	4943      	ldr	r1, [pc, #268]	@ (8005558 <HAL_GPIO_DeInit+0x198>)
 800544a:	4013      	ands	r3, r2
 800544c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005450:	4b41      	ldr	r3, [pc, #260]	@ (8005558 <HAL_GPIO_DeInit+0x198>)
 8005452:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	43db      	mvns	r3, r3
 800545a:	493f      	ldr	r1, [pc, #252]	@ (8005558 <HAL_GPIO_DeInit+0x198>)
 800545c:	4013      	ands	r3, r2
 800545e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005462:	4b3d      	ldr	r3, [pc, #244]	@ (8005558 <HAL_GPIO_DeInit+0x198>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	43db      	mvns	r3, r3
 800546a:	493b      	ldr	r1, [pc, #236]	@ (8005558 <HAL_GPIO_DeInit+0x198>)
 800546c:	4013      	ands	r3, r2
 800546e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005470:	4b39      	ldr	r3, [pc, #228]	@ (8005558 <HAL_GPIO_DeInit+0x198>)
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	43db      	mvns	r3, r3
 8005478:	4937      	ldr	r1, [pc, #220]	@ (8005558 <HAL_GPIO_DeInit+0x198>)
 800547a:	4013      	ands	r3, r2
 800547c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	2207      	movs	r2, #7
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800548e:	4a2f      	ldr	r2, [pc, #188]	@ (800554c <HAL_GPIO_DeInit+0x18c>)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	089b      	lsrs	r3, r3, #2
 8005494:	3302      	adds	r3, #2
 8005496:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	43da      	mvns	r2, r3
 800549e:	482b      	ldr	r0, [pc, #172]	@ (800554c <HAL_GPIO_DeInit+0x18c>)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	089b      	lsrs	r3, r3, #2
 80054a4:	400a      	ands	r2, r1
 80054a6:	3302      	adds	r3, #2
 80054a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	2103      	movs	r1, #3
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	08da      	lsrs	r2, r3, #3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3208      	adds	r2, #8
 80054c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	220f      	movs	r2, #15
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	08d2      	lsrs	r2, r2, #3
 80054e0:	4019      	ands	r1, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3208      	adds	r2, #8
 80054e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	2103      	movs	r1, #3
 80054f4:	fa01 f303 	lsl.w	r3, r1, r3
 80054f8:	43db      	mvns	r3, r3
 80054fa:	401a      	ands	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	2101      	movs	r1, #1
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	2103      	movs	r1, #3
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	401a      	ands	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]
    }

    position++;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	3301      	adds	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	f47f af49 	bne.w	80053d0 <HAL_GPIO_DeInit+0x10>
  }
}
 800553e:	bf00      	nop
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	48000400 	.word	0x48000400
 8005554:	48000800 	.word	0x48000800
 8005558:	58000800 	.word	0x58000800

0800555c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	807b      	strh	r3, [r7, #2]
 8005568:	4613      	mov	r3, r2
 800556a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800556c:	787b      	ldrb	r3, [r7, #1]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005572:	887a      	ldrh	r2, [r7, #2]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005578:	e002      	b.n	8005580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800557a:	887a      	ldrh	r2, [r7, #2]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e08d      	b.n	80056b8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fc fa99 	bl	8001ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2224      	movs	r2, #36	@ 0x24
 80055ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d107      	bne.n	8005604 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005600:	609a      	str	r2, [r3, #8]
 8005602:	e006      	b.n	8005612 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005610:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d108      	bne.n	800562c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005628:	605a      	str	r2, [r3, #4]
 800562a:	e007      	b.n	800563c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800563a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800564a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800564e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800565e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69d9      	ldr	r1, [r3, #28]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1a      	ldr	r2, [r3, #32]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	461a      	mov	r2, r3
 80056cc:	460b      	mov	r3, r1
 80056ce:	817b      	strh	r3, [r7, #10]
 80056d0:	4613      	mov	r3, r2
 80056d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b20      	cmp	r3, #32
 80056de:	f040 80fd 	bne.w	80058dc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_I2C_Master_Transmit+0x30>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e0f6      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056f8:	f7fc fe78 	bl	80023ec <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2319      	movs	r3, #25
 8005704:	2201      	movs	r2, #1
 8005706:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 fa09 	bl	8005b22 <I2C_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e0e1      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2221      	movs	r2, #33	@ 0x21
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2210      	movs	r2, #16
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	893a      	ldrh	r2, [r7, #8]
 800573a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	2bff      	cmp	r3, #255	@ 0xff
 800574a:	d906      	bls.n	800575a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	22ff      	movs	r2, #255	@ 0xff
 8005750:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005752:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e007      	b.n	800576a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005764:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005768:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d024      	beq.n	80057bc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	3301      	adds	r3, #1
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	8979      	ldrh	r1, [r7, #10]
 80057ae:	4b4e      	ldr	r3, [pc, #312]	@ (80058e8 <HAL_I2C_Master_Transmit+0x228>)
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fc03 	bl	8005fc0 <I2C_TransferConfig>
 80057ba:	e066      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	8979      	ldrh	r1, [r7, #10]
 80057c4:	4b48      	ldr	r3, [pc, #288]	@ (80058e8 <HAL_I2C_Master_Transmit+0x228>)
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fbf8 	bl	8005fc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80057d0:	e05b      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	6a39      	ldr	r1, [r7, #32]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f9fc 	bl	8005bd4 <I2C_WaitOnTXISFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e07b      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d034      	beq.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005824:	2b00      	cmp	r3, #0
 8005826:	d130      	bne.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	2200      	movs	r2, #0
 8005830:	2180      	movs	r1, #128	@ 0x80
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f975 	bl	8005b22 <I2C_WaitOnFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e04d      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	2bff      	cmp	r3, #255	@ 0xff
 800584a:	d90e      	bls.n	800586a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	22ff      	movs	r2, #255	@ 0xff
 8005850:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005856:	b2da      	uxtb	r2, r3
 8005858:	8979      	ldrh	r1, [r7, #10]
 800585a:	2300      	movs	r3, #0
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fbac 	bl	8005fc0 <I2C_TransferConfig>
 8005868:	e00f      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005878:	b2da      	uxtb	r2, r3
 800587a:	8979      	ldrh	r1, [r7, #10]
 800587c:	2300      	movs	r3, #0
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fb9b 	bl	8005fc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d19e      	bne.n	80057d2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	6a39      	ldr	r1, [r7, #32]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f9e2 	bl	8005c62 <I2C_WaitOnSTOPFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e01a      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2220      	movs	r2, #32
 80058ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <HAL_I2C_Master_Transmit+0x22c>)
 80058bc:	400b      	ands	r3, r1
 80058be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	e000      	b.n	80058de <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80058dc:	2302      	movs	r3, #2
  }
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	80002000 	.word	0x80002000
 80058ec:	fe00e800 	.word	0xfe00e800

080058f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	461a      	mov	r2, r3
 80058fc:	460b      	mov	r3, r1
 80058fe:	817b      	strh	r3, [r7, #10]
 8005900:	4613      	mov	r3, r2
 8005902:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b20      	cmp	r3, #32
 800590e:	f040 80db 	bne.w	8005ac8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_I2C_Master_Receive+0x30>
 800591c:	2302      	movs	r3, #2
 800591e:	e0d4      	b.n	8005aca <HAL_I2C_Master_Receive+0x1da>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005928:	f7fc fd60 	bl	80023ec <HAL_GetTick>
 800592c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	2319      	movs	r3, #25
 8005934:	2201      	movs	r2, #1
 8005936:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f8f1 	bl	8005b22 <I2C_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e0bf      	b.n	8005aca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2222      	movs	r2, #34	@ 0x22
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2210      	movs	r2, #16
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	893a      	ldrh	r2, [r7, #8]
 800596a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	2bff      	cmp	r3, #255	@ 0xff
 800597a:	d90e      	bls.n	800599a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	22ff      	movs	r2, #255	@ 0xff
 8005980:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005986:	b2da      	uxtb	r2, r3
 8005988:	8979      	ldrh	r1, [r7, #10]
 800598a:	4b52      	ldr	r3, [pc, #328]	@ (8005ad4 <HAL_I2C_Master_Receive+0x1e4>)
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fb14 	bl	8005fc0 <I2C_TransferConfig>
 8005998:	e06d      	b.n	8005a76 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	8979      	ldrh	r1, [r7, #10]
 80059ac:	4b49      	ldr	r3, [pc, #292]	@ (8005ad4 <HAL_I2C_Master_Receive+0x1e4>)
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 fb03 	bl	8005fc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80059ba:	e05c      	b.n	8005a76 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	6a39      	ldr	r1, [r7, #32]
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 f991 	bl	8005ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e07c      	b.n	8005aca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d034      	beq.n	8005a76 <HAL_I2C_Master_Receive+0x186>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d130      	bne.n	8005a76 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2180      	movs	r1, #128	@ 0x80
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f87f 	bl	8005b22 <I2C_WaitOnFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e04d      	b.n	8005aca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2bff      	cmp	r3, #255	@ 0xff
 8005a36:	d90e      	bls.n	8005a56 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	22ff      	movs	r2, #255	@ 0xff
 8005a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	8979      	ldrh	r1, [r7, #10]
 8005a46:	2300      	movs	r3, #0
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fab6 	bl	8005fc0 <I2C_TransferConfig>
 8005a54:	e00f      	b.n	8005a76 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	8979      	ldrh	r1, [r7, #10]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 faa5 	bl	8005fc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d19d      	bne.n	80059bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	6a39      	ldr	r1, [r7, #32]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f8ec 	bl	8005c62 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e01a      	b.n	8005aca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <HAL_I2C_Master_Receive+0x1e8>)
 8005aa8:	400b      	ands	r3, r1
 8005aaa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	80002400 	.word	0x80002400
 8005ad8:	fe00e800 	.word	0xfe00e800

08005adc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d103      	bne.n	8005afa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d007      	beq.n	8005b18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	619a      	str	r2, [r3, #24]
  }
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b32:	e03b      	b.n	8005bac <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f961 	bl	8005e00 <I2C_IsErrorOccurred>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e041      	b.n	8005bcc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d02d      	beq.n	8005bac <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b50:	f7fc fc4c 	bl	80023ec <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d302      	bcc.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d122      	bne.n	8005bac <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699a      	ldr	r2, [r3, #24]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d113      	bne.n	8005bac <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e00f      	b.n	8005bcc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	bf0c      	ite	eq
 8005bbc:	2301      	moveq	r3, #1
 8005bbe:	2300      	movne	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d0b4      	beq.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005be0:	e033      	b.n	8005c4a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f90a 	bl	8005e00 <I2C_IsErrorOccurred>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e031      	b.n	8005c5a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d025      	beq.n	8005c4a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfe:	f7fc fbf5 	bl	80023ec <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d302      	bcc.n	8005c14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11a      	bne.n	8005c4a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d013      	beq.n	8005c4a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e007      	b.n	8005c5a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d1c4      	bne.n	8005be2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c6e:	e02f      	b.n	8005cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f8c3 	bl	8005e00 <I2C_IsErrorOccurred>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e02d      	b.n	8005ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c84:	f7fc fbb2 	bl	80023ec <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d302      	bcc.n	8005c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d11a      	bne.n	8005cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d013      	beq.n	8005cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cac:	f043 0220 	orr.w	r2, r3, #32
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e007      	b.n	8005ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d1c8      	bne.n	8005c70 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005cf8:	e071      	b.n	8005dde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 f87e 	bl	8005e00 <I2C_IsErrorOccurred>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d13b      	bne.n	8005d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d138      	bne.n	8005d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d105      	bne.n	8005d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d121      	bne.n	8005d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2204      	movs	r2, #4
 8005d56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4b24      	ldr	r3, [pc, #144]	@ (8005dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005d6c:	400b      	ands	r3, r1
 8005d6e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]
 8005d8c:	e002      	b.n	8005d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005d94:	f7fc fb2a 	bl	80023ec <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d119      	bne.n	8005dde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d116      	bne.n	8005dde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d00f      	beq.n	8005dde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d002      	beq.n	8005df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d083      	beq.n	8005cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	fe00e800 	.word	0xfe00e800

08005e00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	@ 0x28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d068      	beq.n	8005efe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2210      	movs	r2, #16
 8005e32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e34:	e049      	b.n	8005eca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d045      	beq.n	8005eca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e3e:	f7fc fad5 	bl	80023ec <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d302      	bcc.n	8005e54 <I2C_IsErrorOccurred+0x54>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d13a      	bne.n	8005eca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e76:	d121      	bne.n	8005ebc <I2C_IsErrorOccurred+0xbc>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e7e:	d01d      	beq.n	8005ebc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e80:	7cfb      	ldrb	r3, [r7, #19]
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d01a      	beq.n	8005ebc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e96:	f7fc faa9 	bl	80023ec <HAL_GetTick>
 8005e9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e9c:	e00e      	b.n	8005ebc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e9e:	f7fc faa5 	bl	80023ec <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b19      	cmp	r3, #25
 8005eaa:	d907      	bls.n	8005ebc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	f043 0320 	orr.w	r3, r3, #32
 8005eb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005eba:	e006      	b.n	8005eca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d1e9      	bne.n	8005e9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d003      	beq.n	8005ee0 <I2C_IsErrorOccurred+0xe0>
 8005ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0aa      	beq.n	8005e36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2220      	movs	r2, #32
 8005eee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	f043 0304 	orr.w	r3, r3, #4
 8005ef6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	f043 0308 	orr.w	r3, r3, #8
 8005f38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	f043 0302 	orr.w	r3, r3, #2
 8005f5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01c      	beq.n	8005fae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fdb1 	bl	8005adc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b0d      	ldr	r3, [pc, #52]	@ (8005fbc <I2C_IsErrorOccurred+0x1bc>)
 8005f86:	400b      	ands	r3, r1
 8005f88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	431a      	orrs	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005fae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3728      	adds	r7, #40	@ 0x28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	fe00e800 	.word	0xfe00e800

08005fc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	817b      	strh	r3, [r7, #10]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fd2:	897b      	ldrh	r3, [r7, #10]
 8005fd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fd8:	7a7b      	ldrb	r3, [r7, #9]
 8005fda:	041b      	lsls	r3, r3, #16
 8005fdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fe0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	0d5b      	lsrs	r3, r3, #21
 8005ffa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005ffe:	4b07      	ldr	r3, [pc, #28]	@ (800601c <I2C_TransferConfig+0x5c>)
 8006000:	430b      	orrs	r3, r1
 8006002:	43db      	mvns	r3, r3
 8006004:	ea02 0103 	and.w	r1, r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr
 800601c:	03ff63ff 	.word	0x03ff63ff

08006020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b20      	cmp	r3, #32
 8006034:	d138      	bne.n	80060a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006040:	2302      	movs	r3, #2
 8006042:	e032      	b.n	80060aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	@ 0x24
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006072:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6819      	ldr	r1, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr

080060b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d139      	bne.n	800613e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e033      	b.n	8006140 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2224      	movs	r2, #36	@ 0x24
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006106:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
  }
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr
	...

0800614c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006150:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a03      	ldr	r2, [pc, #12]	@ (8006164 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800615a:	6013      	str	r3, [r2, #0]
}
 800615c:	bf00      	nop
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr
 8006164:	58000400 	.word	0x58000400

08006168 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10c      	bne.n	8006194 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800617a:	4b13      	ldr	r3, [pc, #76]	@ (80061c8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006186:	d10d      	bne.n	80061a4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006188:	f000 f83c 	bl	8006204 <HAL_PWREx_DisableLowPowerRunMode>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d008      	beq.n	80061a4 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006192:	e015      	b.n	80061c0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006194:	4b0c      	ldr	r3, [pc, #48]	@ (80061c8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80061a0:	f000 f822 	bl	80061e8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80061a4:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <HAL_PWR_EnterSLEEPMode+0x64>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	4a08      	ldr	r2, [pc, #32]	@ (80061cc <HAL_PWR_EnterSLEEPMode+0x64>)
 80061aa:	f023 0304 	bic.w	r3, r3, #4
 80061ae:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80061b6:	bf30      	wfi
 80061b8:	e002      	b.n	80061c0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80061ba:	bf40      	sev
    __WFE();
 80061bc:	bf20      	wfe
    __WFE();
 80061be:	bf20      	wfe
  }
}
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	58000400 	.word	0x58000400
 80061cc:	e000ed00 	.word	0xe000ed00

080061d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80061d4:	4b03      	ldr	r3, [pc, #12]	@ (80061e4 <HAL_PWREx_GetVoltageRange+0x14>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80061dc:	4618      	mov	r0, r3
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr
 80061e4:	58000400 	.word	0x58000400

080061e8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80061ec:	4b04      	ldr	r3, [pc, #16]	@ (8006200 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a03      	ldr	r2, [pc, #12]	@ (8006200 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80061f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061f6:	6013      	str	r3, [r2, #0]
}
 80061f8:	bf00      	nop
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr
 8006200:	58000400 	.word	0x58000400

08006204 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800620a:	4b16      	ldr	r3, [pc, #88]	@ (8006264 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a15      	ldr	r2, [pc, #84]	@ (8006264 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006210:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006214:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8006216:	4b14      	ldr	r3, [pc, #80]	@ (8006268 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2232      	movs	r2, #50	@ 0x32
 800621c:	fb02 f303 	mul.w	r3, r2, r3
 8006220:	4a12      	ldr	r2, [pc, #72]	@ (800626c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	0c9b      	lsrs	r3, r3, #18
 8006228:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800622a:	e002      	b.n	8006232 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3b01      	subs	r3, #1
 8006230:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006232:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800623a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800623e:	d102      	bne.n	8006246 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f2      	bne.n	800622c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006246:	4b07      	ldr	r3, [pc, #28]	@ (8006264 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800624e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006252:	d101      	bne.n	8006258 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e000      	b.n	800625a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	58000400 	.word	0x58000400
 8006268:	20000000 	.word	0x20000000
 800626c:	431bde83 	.word	0x431bde83

08006270 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800627a:	4b10      	ldr	r3, [pc, #64]	@ (80062bc <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f023 0307 	bic.w	r3, r3, #7
 8006282:	4a0e      	ldr	r2, [pc, #56]	@ (80062bc <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006284:	f043 0302 	orr.w	r3, r3, #2
 8006288:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800628a:	4b0d      	ldr	r3, [pc, #52]	@ (80062c0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	4a0c      	ldr	r2, [pc, #48]	@ (80062c0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006290:	f043 0304 	orr.w	r3, r3, #4
 8006294:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800629c:	bf30      	wfi
 800629e:	e002      	b.n	80062a6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80062a0:	bf40      	sev
    __WFE();
 80062a2:	bf20      	wfe
    __WFE();
 80062a4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80062a6:	4b06      	ldr	r3, [pc, #24]	@ (80062c0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	4a05      	ldr	r2, [pc, #20]	@ (80062c0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	6113      	str	r3, [r2, #16]
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr
 80062bc:	58000400 	.word	0x58000400
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80062c8:	4b06      	ldr	r3, [pc, #24]	@ (80062e4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d4:	d101      	bne.n	80062da <LL_PWR_IsEnabledBkUpAccess+0x16>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr
 80062e4:	58000400 	.word	0x58000400

080062e8 <LL_RCC_HSE_EnableTcxo>:
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80062ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062fa:	6013      	str	r3, [r2, #0]
}
 80062fc:	bf00      	nop
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <LL_RCC_HSE_DisableTcxo>:
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006312:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006316:	6013      	str	r3, [r2, #0]
}
 8006318:	bf00      	nop
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800632e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006332:	d101      	bne.n	8006338 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr

08006342 <LL_RCC_HSE_Enable>:
{
 8006342:	b480      	push	{r7}
 8006344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006354:	6013      	str	r3, [r2, #0]
}
 8006356:	bf00      	nop
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <LL_RCC_HSE_Disable>:
{
 800635e:	b480      	push	{r7}
 8006360:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800636c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006370:	6013      	str	r3, [r2, #0]
}
 8006372:	bf00      	nop
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <LL_RCC_HSE_IsReady>:
{
 800637a:	b480      	push	{r7}
 800637c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800637e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800638c:	d101      	bne.n	8006392 <LL_RCC_HSE_IsReady+0x18>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <LL_RCC_HSE_IsReady+0x1a>
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <LL_RCC_HSI_Enable>:
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80063a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063ae:	6013      	str	r3, [r2, #0]
}
 80063b0:	bf00      	nop
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <LL_RCC_HSI_Disable>:
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80063bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063ca:	6013      	str	r3, [r2, #0]
}
 80063cc:	bf00      	nop
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr

080063d4 <LL_RCC_HSI_IsReady>:
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80063d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e6:	d101      	bne.n	80063ec <LL_RCC_HSI_IsReady+0x18>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <LL_RCC_HSI_IsReady+0x1a>
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr

080063f6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80063fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	061b      	lsls	r3, r3, #24
 800640c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006410:	4313      	orrs	r3, r2
 8006412:	604b      	str	r3, [r1, #4]
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <LL_RCC_LSE_IsReady>:
{
 800641e:	b480      	push	{r7}
 8006420:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b02      	cmp	r3, #2
 8006430:	d101      	bne.n	8006436 <LL_RCC_LSE_IsReady+0x18>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <LL_RCC_LSE_IsReady+0x1a>
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <LL_RCC_LSI_Enable>:
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800644c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006450:	f043 0301 	orr.w	r3, r3, #1
 8006454:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006458:	bf00      	nop
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <LL_RCC_LSI_Disable>:
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800646c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006478:	bf00      	nop
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr

08006480 <LL_RCC_LSI_IsReady>:
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d101      	bne.n	8006498 <LL_RCC_LSI_IsReady+0x18>
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <LL_RCC_LSI_IsReady+0x1a>
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <LL_RCC_MSI_Enable>:
{
 80064a2:	b480      	push	{r7}
 80064a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80064a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	6013      	str	r3, [r2, #0]
}
 80064b6:	bf00      	nop
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr

080064be <LL_RCC_MSI_Disable>:
{
 80064be:	b480      	push	{r7}
 80064c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80064c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	6013      	str	r3, [r2, #0]
}
 80064d2:	bf00      	nop
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <LL_RCC_MSI_IsReady>:
{
 80064da:	b480      	push	{r7}
 80064dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80064de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d101      	bne.n	80064f0 <LL_RCC_MSI_IsReady+0x16>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <LL_RCC_MSI_IsReady+0x18>
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80064fa:	b480      	push	{r7}
 80064fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80064fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b08      	cmp	r3, #8
 800650a:	d101      	bne.n	8006510 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	bc80      	pop	{r7}
 8006518:	4770      	bx	lr

0800651a <LL_RCC_MSI_GetRange>:
{
 800651a:	b480      	push	{r7}
 800651c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800651e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006528:	4618      	mov	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800653c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8006540:	4618      	mov	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr

08006548 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006562:	4313      	orrs	r3, r2
 8006564:	604b      	str	r3, [r1, #4]
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr

08006570 <LL_RCC_SetSysClkSource>:
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f023 0203 	bic.w	r2, r3, #3
 8006582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4313      	orrs	r3, r2
 800658a:	608b      	str	r3, [r1, #8]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr

08006596 <LL_RCC_GetSysClkSource>:
{
 8006596:	b480      	push	{r7}
 8006598:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800659a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 030c 	and.w	r3, r3, #12
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <LL_RCC_SetAHBPrescaler>:
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80065b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	608b      	str	r3, [r1, #8]
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr

080065d2 <LL_RCC_SetAHB3Prescaler>:
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80065da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80065e2:	f023 020f 	bic.w	r2, r3, #15
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <LL_RCC_SetAPB1Prescaler>:
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006610:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4313      	orrs	r3, r2
 8006618:	608b      	str	r3, [r1, #8]
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <LL_RCC_SetAPB2Prescaler>:
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800662c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4313      	orrs	r3, r2
 800663e:	608b      	str	r3, [r1, #8]
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr

0800664a <LL_RCC_GetAHBPrescaler>:
{
 800664a:	b480      	push	{r7}
 800664c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800664e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006658:	4618      	mov	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <LL_RCC_GetAHB3Prescaler>:
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006668:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006672:	4618      	mov	r0, r3
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr

0800667a <LL_RCC_GetAPB1Prescaler>:
{
 800667a:	b480      	push	{r7}
 800667c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800667e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006688:	4618      	mov	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr

08006690 <LL_RCC_GetAPB2Prescaler>:
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800669e:	4618      	mov	r0, r3
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr

080066a6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80066a6:	b480      	push	{r7}
 80066a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80066aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066b8:	6013      	str	r3, [r2, #0]
}
 80066ba:	bf00      	nop
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr

080066c2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80066c2:	b480      	push	{r7}
 80066c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80066c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066d4:	6013      	str	r3, [r2, #0]
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80066de:	b480      	push	{r7}
 80066e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80066e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066f0:	d101      	bne.n	80066f6 <LL_RCC_PLL_IsReady+0x18>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <LL_RCC_PLL_IsReady+0x1a>
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006710:	4618      	mov	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800671c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006726:	4618      	mov	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800672e:	b480      	push	{r7}
 8006730:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800673c:	4618      	mov	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0303 	and.w	r3, r3, #3
}
 8006752:	4618      	mov	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr

0800675a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800675a:	b480      	push	{r7}
 800675c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800675e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676c:	d101      	bne.n	8006772 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	bc80      	pop	{r7}
 800677a:	4770      	bx	lr

0800677c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006784:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800678c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006790:	d101      	bne.n	8006796 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80067a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067b2:	d101      	bne.n	80067b8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80067c2:	b480      	push	{r7}
 80067c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80067c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067d4:	d101      	bne.n	80067da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr

080067e4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e36f      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067f6:	f7ff fece 	bl	8006596 <LL_RCC_GetSysClkSource>
 80067fa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067fc:	f7ff ffa2 	bl	8006744 <LL_RCC_PLL_GetMainSource>
 8006800:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80c4 	beq.w	8006998 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <HAL_RCC_OscConfig+0x3e>
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b0c      	cmp	r3, #12
 800681a:	d176      	bne.n	800690a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d173      	bne.n	800690a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e353      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <HAL_RCC_OscConfig+0x68>
 8006840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800684a:	e006      	b.n	800685a <HAL_RCC_OscConfig+0x76>
 800684c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006854:	091b      	lsrs	r3, r3, #4
 8006856:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800685a:	4293      	cmp	r3, r2
 800685c:	d222      	bcs.n	80068a4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fd3c 	bl	80072e0 <RCC_SetFlashLatencyFromMSIRange>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e331      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800687c:	f043 0308 	orr.w	r3, r3, #8
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006894:	4313      	orrs	r3, r2
 8006896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fe53 	bl	8006548 <LL_RCC_MSI_SetCalibTrimming>
 80068a2:	e021      	b.n	80068e8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068ae:	f043 0308 	orr.w	r3, r3, #8
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068c6:	4313      	orrs	r3, r2
 80068c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff fe3a 	bl	8006548 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fd01 	bl	80072e0 <RCC_SetFlashLatencyFromMSIRange>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e2f6      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80068e8:	f000 fcc2 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 80068ec:	4603      	mov	r3, r0
 80068ee:	4aa7      	ldr	r2, [pc, #668]	@ (8006b8c <HAL_RCC_OscConfig+0x3a8>)
 80068f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80068f2:	4ba7      	ldr	r3, [pc, #668]	@ (8006b90 <HAL_RCC_OscConfig+0x3ac>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fb fd6e 	bl	80023d8 <HAL_InitTick>
 80068fc:	4603      	mov	r3, r0
 80068fe:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006900:	7cfb      	ldrb	r3, [r7, #19]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d047      	beq.n	8006996 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	e2e5      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d02c      	beq.n	800696c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006912:	f7ff fdc6 	bl	80064a2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006916:	f7fb fd69 	bl	80023ec <HAL_GetTick>
 800691a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800691e:	f7fb fd65 	bl	80023ec <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e2d2      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006930:	f7ff fdd3 	bl	80064da <LL_RCC_MSI_IsReady>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0f1      	beq.n	800691e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800693a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006944:	f043 0308 	orr.w	r3, r3, #8
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006958:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800695c:	4313      	orrs	r3, r2
 800695e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fdef 	bl	8006548 <LL_RCC_MSI_SetCalibTrimming>
 800696a:	e015      	b.n	8006998 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800696c:	f7ff fda7 	bl	80064be <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006970:	f7fb fd3c 	bl	80023ec <HAL_GetTick>
 8006974:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006978:	f7fb fd38 	bl	80023ec <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e2a5      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800698a:	f7ff fda6 	bl	80064da <LL_RCC_MSI_IsReady>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f1      	bne.n	8006978 <HAL_RCC_OscConfig+0x194>
 8006994:	e000      	b.n	8006998 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006996:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d058      	beq.n	8006a56 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d005      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1d2>
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	2b0c      	cmp	r3, #12
 80069ae:	d108      	bne.n	80069c2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d105      	bne.n	80069c2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d14b      	bne.n	8006a56 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e289      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80069c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069d4:	4313      	orrs	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e0:	d102      	bne.n	80069e8 <HAL_RCC_OscConfig+0x204>
 80069e2:	f7ff fcae 	bl	8006342 <LL_RCC_HSE_Enable>
 80069e6:	e00d      	b.n	8006a04 <HAL_RCC_OscConfig+0x220>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80069f0:	d104      	bne.n	80069fc <HAL_RCC_OscConfig+0x218>
 80069f2:	f7ff fc79 	bl	80062e8 <LL_RCC_HSE_EnableTcxo>
 80069f6:	f7ff fca4 	bl	8006342 <LL_RCC_HSE_Enable>
 80069fa:	e003      	b.n	8006a04 <HAL_RCC_OscConfig+0x220>
 80069fc:	f7ff fcaf 	bl	800635e <LL_RCC_HSE_Disable>
 8006a00:	f7ff fc80 	bl	8006304 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d012      	beq.n	8006a32 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0c:	f7fb fcee 	bl	80023ec <HAL_GetTick>
 8006a10:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a14:	f7fb fcea 	bl	80023ec <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b64      	cmp	r3, #100	@ 0x64
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e257      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006a26:	f7ff fca8 	bl	800637a <LL_RCC_HSE_IsReady>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f1      	beq.n	8006a14 <HAL_RCC_OscConfig+0x230>
 8006a30:	e011      	b.n	8006a56 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a32:	f7fb fcdb 	bl	80023ec <HAL_GetTick>
 8006a36:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a3a:	f7fb fcd7 	bl	80023ec <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b64      	cmp	r3, #100	@ 0x64
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e244      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006a4c:	f7ff fc95 	bl	800637a <LL_RCC_HSE_IsReady>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f1      	bne.n	8006a3a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d046      	beq.n	8006af0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d005      	beq.n	8006a74 <HAL_RCC_OscConfig+0x290>
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	2b0c      	cmp	r3, #12
 8006a6c:	d10e      	bne.n	8006a8c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d10b      	bne.n	8006a8c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e22a      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fcb6 	bl	80063f6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006a8a:	e031      	b.n	8006af0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d019      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a94:	f7ff fc82 	bl	800639c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fb fca8 	bl	80023ec <HAL_GetTick>
 8006a9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aa0:	f7fb fca4 	bl	80023ec <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e211      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006ab2:	f7ff fc8f 	bl	80063d4 <LL_RCC_HSI_IsReady>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f1      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fc98 	bl	80063f6 <LL_RCC_HSI_SetCalibTrimming>
 8006ac6:	e013      	b.n	8006af0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ac8:	f7ff fc76 	bl	80063b8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006acc:	f7fb fc8e 	bl	80023ec <HAL_GetTick>
 8006ad0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ad4:	f7fb fc8a 	bl	80023ec <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e1f7      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006ae6:	f7ff fc75 	bl	80063d4 <LL_RCC_HSI_IsReady>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1f1      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d06e      	beq.n	8006bda <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d056      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b0c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f003 0310 	and.w	r3, r3, #16
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d031      	beq.n	8006b80 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d006      	beq.n	8006b34 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e1d0      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d013      	beq.n	8006b66 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8006b3e:	f7ff fc8f 	bl	8006460 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b42:	f7fb fc53 	bl	80023ec <HAL_GetTick>
 8006b46:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b4a:	f7fb fc4f 	bl	80023ec <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b11      	cmp	r3, #17
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e1bc      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006b5c:	f7ff fc90 	bl	8006480 <LL_RCC_LSI_IsReady>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f1      	bne.n	8006b4a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b6e:	f023 0210 	bic.w	r2, r3, #16
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b80:	f7ff fc5e 	bl	8006440 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b84:	f7fb fc32 	bl	80023ec <HAL_GetTick>
 8006b88:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006b8a:	e00c      	b.n	8006ba6 <HAL_RCC_OscConfig+0x3c2>
 8006b8c:	20000000 	.word	0x20000000
 8006b90:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b94:	f7fb fc2a 	bl	80023ec <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b11      	cmp	r3, #17
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e197      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006ba6:	f7ff fc6b 	bl	8006480 <LL_RCC_LSI_IsReady>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0f1      	beq.n	8006b94 <HAL_RCC_OscConfig+0x3b0>
 8006bb0:	e013      	b.n	8006bda <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bb2:	f7ff fc55 	bl	8006460 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bb6:	f7fb fc19 	bl	80023ec <HAL_GetTick>
 8006bba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bbe:	f7fb fc15 	bl	80023ec <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b11      	cmp	r3, #17
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e182      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006bd0:	f7ff fc56 	bl	8006480 <LL_RCC_LSI_IsReady>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f1      	bne.n	8006bbe <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 80d8 	beq.w	8006d98 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006be8:	f7ff fb6c 	bl	80062c4 <LL_PWR_IsEnabledBkUpAccess>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d113      	bne.n	8006c1a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006bf2:	f7ff faab 	bl	800614c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bf6:	f7fb fbf9 	bl	80023ec <HAL_GetTick>
 8006bfa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bfe:	f7fb fbf5 	bl	80023ec <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e162      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006c10:	f7ff fb58 	bl	80062c4 <LL_PWR_IsEnabledBkUpAccess>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f1      	beq.n	8006bfe <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d07b      	beq.n	8006d1a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b85      	cmp	r3, #133	@ 0x85
 8006c28:	d003      	beq.n	8006c32 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b05      	cmp	r3, #5
 8006c30:	d109      	bne.n	8006c46 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c3e:	f043 0304 	orr.w	r3, r3, #4
 8006c42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c46:	f7fb fbd1 	bl	80023ec <HAL_GetTick>
 8006c4a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006c60:	e00a      	b.n	8006c78 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c62:	f7fb fbc3 	bl	80023ec <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e12e      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006c78:	f7ff fbd1 	bl	800641e <LL_RCC_LSE_IsReady>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0ef      	beq.n	8006c62 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b81      	cmp	r3, #129	@ 0x81
 8006c88:	d003      	beq.n	8006c92 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2b85      	cmp	r3, #133	@ 0x85
 8006c90:	d121      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c92:	f7fb fbab 	bl	80023ec <HAL_GetTick>
 8006c96:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006cac:	e00a      	b.n	8006cc4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cae:	f7fb fb9d 	bl	80023ec <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d901      	bls.n	8006cc4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e108      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0ec      	beq.n	8006cae <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006cd4:	e060      	b.n	8006d98 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd6:	f7fb fb89 	bl	80023ec <HAL_GetTick>
 8006cda:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006cf0:	e00a      	b.n	8006d08 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf2:	f7fb fb7b 	bl	80023ec <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e0e6      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1ec      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x50e>
 8006d18:	e03e      	b.n	8006d98 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d1a:	f7fb fb67 	bl	80023ec <HAL_GetTick>
 8006d1e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d34:	e00a      	b.n	8006d4c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d36:	f7fb fb59 	bl	80023ec <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0c4      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1ec      	bne.n	8006d36 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d5c:	f7fb fb46 	bl	80023ec <HAL_GetTick>
 8006d60:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006d76:	e00a      	b.n	8006d8e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d78:	f7fb fb38 	bl	80023ec <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e0a3      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006d8e:	f7ff fb46 	bl	800641e <LL_RCC_LSE_IsReady>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1ef      	bne.n	8006d78 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8099 	beq.w	8006ed4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b0c      	cmp	r3, #12
 8006da6:	d06c      	beq.n	8006e82 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d14b      	bne.n	8006e48 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006db0:	f7ff fc87 	bl	80066c2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db4:	f7fb fb1a 	bl	80023ec <HAL_GetTick>
 8006db8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dbc:	f7fb fb16 	bl	80023ec <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b0a      	cmp	r3, #10
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e083      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006dce:	f7ff fc86 	bl	80066de <LL_RCC_PLL_IsReady>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f1      	bne.n	8006dbc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	4b40      	ldr	r3, [pc, #256]	@ (8006ee0 <HAL_RCC_OscConfig+0x6fc>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dea:	4311      	orrs	r1, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006df0:	0212      	lsls	r2, r2, #8
 8006df2:	4311      	orrs	r1, r2
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006df8:	4311      	orrs	r1, r2
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006dfe:	4311      	orrs	r1, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006e04:	430a      	orrs	r2, r1
 8006e06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e0e:	f7ff fc4a 	bl	80066a6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e20:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e22:	f7fb fae3 	bl	80023ec <HAL_GetTick>
 8006e26:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006e28:	e008      	b.n	8006e3c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e2a:	f7fb fadf 	bl	80023ec <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b0a      	cmp	r3, #10
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e04c      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006e3c:	f7ff fc4f 	bl	80066de <LL_RCC_PLL_IsReady>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f1      	beq.n	8006e2a <HAL_RCC_OscConfig+0x646>
 8006e46:	e045      	b.n	8006ed4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e48:	f7ff fc3b 	bl	80066c2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e4c:	f7fb face 	bl	80023ec <HAL_GetTick>
 8006e50:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e54:	f7fb faca 	bl	80023ec <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b0a      	cmp	r3, #10
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e037      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006e66:	f7ff fc3a 	bl	80066de <LL_RCC_PLL_IsReady>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f1      	bne.n	8006e54 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee4 <HAL_RCC_OscConfig+0x700>)
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	60cb      	str	r3, [r1, #12]
 8006e80:	e028      	b.n	8006ed4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e023      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f003 0203 	and.w	r2, r3, #3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d115      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d10e      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d106      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d001      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3720      	adds	r7, #32
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	11c1808c 	.word	0x11c1808c
 8006ee4:	eefefffc 	.word	0xeefefffc

08006ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e10f      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006efc:	4b89      	ldr	r3, [pc, #548]	@ (8007124 <HAL_RCC_ClockConfig+0x23c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d91b      	bls.n	8006f42 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0a:	4b86      	ldr	r3, [pc, #536]	@ (8007124 <HAL_RCC_ClockConfig+0x23c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f023 0207 	bic.w	r2, r3, #7
 8006f12:	4984      	ldr	r1, [pc, #528]	@ (8007124 <HAL_RCC_ClockConfig+0x23c>)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f1a:	f7fb fa67 	bl	80023ec <HAL_GetTick>
 8006f1e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006f22:	f7fb fa63 	bl	80023ec <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e0f3      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f34:	4b7b      	ldr	r3, [pc, #492]	@ (8007124 <HAL_RCC_ClockConfig+0x23c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d1ef      	bne.n	8006f22 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff fb2a 	bl	80065ac <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f58:	f7fb fa48 	bl	80023ec <HAL_GetTick>
 8006f5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f60:	f7fb fa44 	bl	80023ec <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e0d4      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006f72:	f7ff fbf2 	bl	800675a <LL_RCC_IsActiveFlag_HPRE>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0f1      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d016      	beq.n	8006fb6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff fb20 	bl	80065d2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f92:	f7fb fa2b 	bl	80023ec <HAL_GetTick>
 8006f96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006f98:	e008      	b.n	8006fac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f9a:	f7fb fa27 	bl	80023ec <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e0b7      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006fac:	f7ff fbe6 	bl	800677c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0f1      	beq.n	8006f9a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d016      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff fb19 	bl	80065fe <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006fcc:	f7fb fa0e 	bl	80023ec <HAL_GetTick>
 8006fd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006fd4:	f7fb fa0a 	bl	80023ec <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e09a      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006fe6:	f7ff fbdb 	bl	80067a0 <LL_RCC_IsActiveFlag_PPRE1>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0f1      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d017      	beq.n	800702c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fb0e 	bl	8006624 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007008:	f7fb f9f0 	bl	80023ec <HAL_GetTick>
 800700c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800700e:	e008      	b.n	8007022 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007010:	f7fb f9ec 	bl	80023ec <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e07c      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007022:	f7ff fbce 	bl	80067c2 <LL_RCC_IsActiveFlag_PPRE2>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f1      	beq.n	8007010 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d043      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d106      	bne.n	800704e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007040:	f7ff f99b 	bl	800637a <LL_RCC_HSE_IsReady>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d11e      	bne.n	8007088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e066      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b03      	cmp	r3, #3
 8007054:	d106      	bne.n	8007064 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007056:	f7ff fb42 	bl	80066de <LL_RCC_PLL_IsReady>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d113      	bne.n	8007088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e05b      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800706c:	f7ff fa35 	bl	80064da <LL_RCC_MSI_IsReady>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d108      	bne.n	8007088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e050      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800707a:	f7ff f9ab 	bl	80063d4 <LL_RCC_HSI_IsReady>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e049      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff fa6f 	bl	8006570 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007092:	f7fb f9ab 	bl	80023ec <HAL_GetTick>
 8007096:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007098:	e00a      	b.n	80070b0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800709a:	f7fb f9a7 	bl	80023ec <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d901      	bls.n	80070b0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e035      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b0:	f7ff fa71 	bl	8006596 <LL_RCC_GetSysClkSource>
 80070b4:	4602      	mov	r2, r0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	429a      	cmp	r2, r3
 80070be:	d1ec      	bne.n	800709a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070c0:	4b18      	ldr	r3, [pc, #96]	@ (8007124 <HAL_RCC_ClockConfig+0x23c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d21b      	bcs.n	8007106 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ce:	4b15      	ldr	r3, [pc, #84]	@ (8007124 <HAL_RCC_ClockConfig+0x23c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 0207 	bic.w	r2, r3, #7
 80070d6:	4913      	ldr	r1, [pc, #76]	@ (8007124 <HAL_RCC_ClockConfig+0x23c>)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	4313      	orrs	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070de:	f7fb f985 	bl	80023ec <HAL_GetTick>
 80070e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80070e6:	f7fb f981 	bl	80023ec <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e011      	b.n	800711c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007124 <HAL_RCC_ClockConfig+0x23c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d1ef      	bne.n	80070e6 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007106:	f000 f8b3 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 800710a:	4603      	mov	r3, r0
 800710c:	4a06      	ldr	r2, [pc, #24]	@ (8007128 <HAL_RCC_ClockConfig+0x240>)
 800710e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007110:	4b06      	ldr	r3, [pc, #24]	@ (800712c <HAL_RCC_ClockConfig+0x244>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f7fb f95f 	bl	80023d8 <HAL_InitTick>
 800711a:	4603      	mov	r3, r0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	58004000 	.word	0x58004000
 8007128:	20000000 	.word	0x20000000
 800712c:	20000004 	.word	0x20000004

08007130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800713e:	f7ff fa2a 	bl	8006596 <LL_RCC_GetSysClkSource>
 8007142:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007144:	f7ff fafe 	bl	8006744 <LL_RCC_PLL_GetMainSource>
 8007148:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <HAL_RCC_GetSysClockFreq+0x2c>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b0c      	cmp	r3, #12
 8007154:	d139      	bne.n	80071ca <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d136      	bne.n	80071ca <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800715c:	f7ff f9cd 	bl	80064fa <LL_RCC_MSI_IsEnabledRangeSelect>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d115      	bne.n	8007192 <HAL_RCC_GetSysClockFreq+0x62>
 8007166:	f7ff f9c8 	bl	80064fa <LL_RCC_MSI_IsEnabledRangeSelect>
 800716a:	4603      	mov	r3, r0
 800716c:	2b01      	cmp	r3, #1
 800716e:	d106      	bne.n	800717e <HAL_RCC_GetSysClockFreq+0x4e>
 8007170:	f7ff f9d3 	bl	800651a <LL_RCC_MSI_GetRange>
 8007174:	4603      	mov	r3, r0
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	e005      	b.n	800718a <HAL_RCC_GetSysClockFreq+0x5a>
 800717e:	f7ff f9d7 	bl	8006530 <LL_RCC_MSI_GetRangeAfterStandby>
 8007182:	4603      	mov	r3, r0
 8007184:	0a1b      	lsrs	r3, r3, #8
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	4a36      	ldr	r2, [pc, #216]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x134>)
 800718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007190:	e014      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0x8c>
 8007192:	f7ff f9b2 	bl	80064fa <LL_RCC_MSI_IsEnabledRangeSelect>
 8007196:	4603      	mov	r3, r0
 8007198:	2b01      	cmp	r3, #1
 800719a:	d106      	bne.n	80071aa <HAL_RCC_GetSysClockFreq+0x7a>
 800719c:	f7ff f9bd 	bl	800651a <LL_RCC_MSI_GetRange>
 80071a0:	4603      	mov	r3, r0
 80071a2:	091b      	lsrs	r3, r3, #4
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	e005      	b.n	80071b6 <HAL_RCC_GetSysClockFreq+0x86>
 80071aa:	f7ff f9c1 	bl	8006530 <LL_RCC_MSI_GetRangeAfterStandby>
 80071ae:	4603      	mov	r3, r0
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	4a2b      	ldr	r2, [pc, #172]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x134>)
 80071b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071bc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d115      	bne.n	80071f0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80071c8:	e012      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d102      	bne.n	80071d6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071d0:	4b25      	ldr	r3, [pc, #148]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x138>)
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	e00c      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d109      	bne.n	80071f0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80071dc:	f7ff f8a0 	bl	8006320 <LL_RCC_HSE_IsEnabledDiv2>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d102      	bne.n	80071ec <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80071e6:	4b20      	ldr	r3, [pc, #128]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x138>)
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	e001      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80071ec:	4b1f      	ldr	r3, [pc, #124]	@ (800726c <HAL_RCC_GetSysClockFreq+0x13c>)
 80071ee:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071f0:	f7ff f9d1 	bl	8006596 <LL_RCC_GetSysClkSource>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b0c      	cmp	r3, #12
 80071f8:	d12f      	bne.n	800725a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80071fa:	f7ff faa3 	bl	8006744 <LL_RCC_PLL_GetMainSource>
 80071fe:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b02      	cmp	r3, #2
 8007204:	d003      	beq.n	800720e <HAL_RCC_GetSysClockFreq+0xde>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d003      	beq.n	8007214 <HAL_RCC_GetSysClockFreq+0xe4>
 800720c:	e00d      	b.n	800722a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800720e:	4b16      	ldr	r3, [pc, #88]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x138>)
 8007210:	60fb      	str	r3, [r7, #12]
        break;
 8007212:	e00d      	b.n	8007230 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007214:	f7ff f884 	bl	8006320 <LL_RCC_HSE_IsEnabledDiv2>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d102      	bne.n	8007224 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800721e:	4b12      	ldr	r3, [pc, #72]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x138>)
 8007220:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007222:	e005      	b.n	8007230 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007224:	4b11      	ldr	r3, [pc, #68]	@ (800726c <HAL_RCC_GetSysClockFreq+0x13c>)
 8007226:	60fb      	str	r3, [r7, #12]
        break;
 8007228:	e002      	b.n	8007230 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	60fb      	str	r3, [r7, #12]
        break;
 800722e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007230:	f7ff fa66 	bl	8006700 <LL_RCC_PLL_GetN>
 8007234:	4602      	mov	r2, r0
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	fb03 f402 	mul.w	r4, r3, r2
 800723c:	f7ff fa77 	bl	800672e <LL_RCC_PLL_GetDivider>
 8007240:	4603      	mov	r3, r0
 8007242:	091b      	lsrs	r3, r3, #4
 8007244:	3301      	adds	r3, #1
 8007246:	fbb4 f4f3 	udiv	r4, r4, r3
 800724a:	f7ff fa65 	bl	8006718 <LL_RCC_PLL_GetR>
 800724e:	4603      	mov	r3, r0
 8007250:	0f5b      	lsrs	r3, r3, #29
 8007252:	3301      	adds	r3, #1
 8007254:	fbb4 f3f3 	udiv	r3, r4, r3
 8007258:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800725a:	697b      	ldr	r3, [r7, #20]
}
 800725c:	4618      	mov	r0, r3
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	bd90      	pop	{r4, r7, pc}
 8007264:	0801da90 	.word	0x0801da90
 8007268:	00f42400 	.word	0x00f42400
 800726c:	01e84800 	.word	0x01e84800

08007270 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007270:	b598      	push	{r3, r4, r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007274:	f7ff ff5c 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8007278:	4604      	mov	r4, r0
 800727a:	f7ff f9e6 	bl	800664a <LL_RCC_GetAHBPrescaler>
 800727e:	4603      	mov	r3, r0
 8007280:	091b      	lsrs	r3, r3, #4
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	4a03      	ldr	r2, [pc, #12]	@ (8007294 <HAL_RCC_GetHCLKFreq+0x24>)
 8007288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800728c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007290:	4618      	mov	r0, r3
 8007292:	bd98      	pop	{r3, r4, r7, pc}
 8007294:	0801da30 	.word	0x0801da30

08007298 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007298:	b598      	push	{r3, r4, r7, lr}
 800729a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800729c:	f7ff ffe8 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 80072a0:	4604      	mov	r4, r0
 80072a2:	f7ff f9ea 	bl	800667a <LL_RCC_GetAPB1Prescaler>
 80072a6:	4603      	mov	r3, r0
 80072a8:	0a1b      	lsrs	r3, r3, #8
 80072aa:	4a03      	ldr	r2, [pc, #12]	@ (80072b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	bd98      	pop	{r3, r4, r7, pc}
 80072b8:	0801da70 	.word	0x0801da70

080072bc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072bc:	b598      	push	{r3, r4, r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80072c0:	f7ff ffd6 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 80072c4:	4604      	mov	r4, r0
 80072c6:	f7ff f9e3 	bl	8006690 <LL_RCC_GetAPB2Prescaler>
 80072ca:	4603      	mov	r3, r0
 80072cc:	0adb      	lsrs	r3, r3, #11
 80072ce:	4a03      	ldr	r2, [pc, #12]	@ (80072dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80072d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80072d8:	4618      	mov	r0, r3
 80072da:	bd98      	pop	{r3, r4, r7, pc}
 80072dc:	0801da70 	.word	0x0801da70

080072e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	4a10      	ldr	r2, [pc, #64]	@ (8007334 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80072f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80072f8:	f7ff f9b2 	bl	8006660 <LL_RCC_GetAHB3Prescaler>
 80072fc:	4603      	mov	r3, r0
 80072fe:	091b      	lsrs	r3, r3, #4
 8007300:	f003 030f 	and.w	r3, r3, #15
 8007304:	4a0c      	ldr	r2, [pc, #48]	@ (8007338 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	4a09      	ldr	r2, [pc, #36]	@ (800733c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007316:	fba2 2303 	umull	r2, r3, r2, r3
 800731a:	0c9c      	lsrs	r4, r3, #18
 800731c:	f7fe ff58 	bl	80061d0 <HAL_PWREx_GetVoltageRange>
 8007320:	4603      	mov	r3, r0
 8007322:	4619      	mov	r1, r3
 8007324:	4620      	mov	r0, r4
 8007326:	f000 f80b 	bl	8007340 <RCC_SetFlashLatency>
 800732a:	4603      	mov	r3, r0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	bd90      	pop	{r4, r7, pc}
 8007334:	0801da90 	.word	0x0801da90
 8007338:	0801da30 	.word	0x0801da30
 800733c:	431bde83 	.word	0x431bde83

08007340 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08e      	sub	sp, #56	@ 0x38
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800734a:	4a3a      	ldr	r2, [pc, #232]	@ (8007434 <RCC_SetFlashLatency+0xf4>)
 800734c:	f107 0320 	add.w	r3, r7, #32
 8007350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007354:	6018      	str	r0, [r3, #0]
 8007356:	3304      	adds	r3, #4
 8007358:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800735a:	4a37      	ldr	r2, [pc, #220]	@ (8007438 <RCC_SetFlashLatency+0xf8>)
 800735c:	f107 0318 	add.w	r3, r7, #24
 8007360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007364:	6018      	str	r0, [r3, #0]
 8007366:	3304      	adds	r3, #4
 8007368:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800736a:	4a34      	ldr	r2, [pc, #208]	@ (800743c <RCC_SetFlashLatency+0xfc>)
 800736c:	f107 030c 	add.w	r3, r7, #12
 8007370:	ca07      	ldmia	r2, {r0, r1, r2}
 8007372:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007376:	2300      	movs	r3, #0
 8007378:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007380:	d11b      	bne.n	80073ba <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007382:	2300      	movs	r3, #0
 8007384:	633b      	str	r3, [r7, #48]	@ 0x30
 8007386:	e014      	b.n	80073b2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	3338      	adds	r3, #56	@ 0x38
 800738e:	443b      	add	r3, r7
 8007390:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007394:	461a      	mov	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4293      	cmp	r3, r2
 800739a:	d807      	bhi.n	80073ac <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	3338      	adds	r3, #56	@ 0x38
 80073a2:	443b      	add	r3, r7
 80073a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80073a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073aa:	e021      	b.n	80073f0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	3301      	adds	r3, #1
 80073b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d9e7      	bls.n	8007388 <RCC_SetFlashLatency+0x48>
 80073b8:	e01a      	b.n	80073f0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80073ba:	2300      	movs	r3, #0
 80073bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073be:	e014      	b.n	80073ea <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80073c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	3338      	adds	r3, #56	@ 0x38
 80073c6:	443b      	add	r3, r7
 80073c8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80073cc:	461a      	mov	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d807      	bhi.n	80073e4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80073d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	3338      	adds	r3, #56	@ 0x38
 80073da:	443b      	add	r3, r7
 80073dc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80073e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073e2:	e005      	b.n	80073f0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80073e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e6:	3301      	adds	r3, #1
 80073e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d9e7      	bls.n	80073c0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80073f0:	4b13      	ldr	r3, [pc, #76]	@ (8007440 <RCC_SetFlashLatency+0x100>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f023 0207 	bic.w	r2, r3, #7
 80073f8:	4911      	ldr	r1, [pc, #68]	@ (8007440 <RCC_SetFlashLatency+0x100>)
 80073fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fc:	4313      	orrs	r3, r2
 80073fe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007400:	f7fa fff4 	bl	80023ec <HAL_GetTick>
 8007404:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007406:	e008      	b.n	800741a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007408:	f7fa fff0 	bl	80023ec <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d901      	bls.n	800741a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e007      	b.n	800742a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800741a:	4b09      	ldr	r3, [pc, #36]	@ (8007440 <RCC_SetFlashLatency+0x100>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007424:	429a      	cmp	r2, r3
 8007426:	d1ef      	bne.n	8007408 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3738      	adds	r7, #56	@ 0x38
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	0801d114 	.word	0x0801d114
 8007438:	0801d11c 	.word	0x0801d11c
 800743c:	0801d124 	.word	0x0801d124
 8007440:	58004000 	.word	0x58004000

08007444 <LL_RCC_LSE_IsReady>:
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800744c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d101      	bne.n	800745c <LL_RCC_LSE_IsReady+0x18>
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <LL_RCC_LSE_IsReady+0x1a>
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr

08007466 <LL_RCC_SetUSARTClockSource>:
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800746e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007472:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	0c1b      	lsrs	r3, r3, #16
 800747a:	43db      	mvns	r3, r3
 800747c:	401a      	ands	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007486:	4313      	orrs	r3, r2
 8007488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr

08007496 <LL_RCC_SetI2SClockSource>:
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800749e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr

080074c0 <LL_RCC_SetLPUARTClockSource>:
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80074c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80074d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <LL_RCC_SetI2CClockSource>:
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80074f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	091b      	lsrs	r3, r3, #4
 80074fe:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007502:	43db      	mvns	r3, r3
 8007504:	401a      	ands	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800750e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr

08007522 <LL_RCC_SetLPTIMClockSource>:
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800752a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800752e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	0c1b      	lsrs	r3, r3, #16
 8007536:	041b      	lsls	r3, r3, #16
 8007538:	43db      	mvns	r3, r3
 800753a:	401a      	ands	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr

08007554 <LL_RCC_SetRNGClockSource>:
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800755c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007564:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4313      	orrs	r3, r2
 8007570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr

0800757e <LL_RCC_SetADCClockSource>:
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800758a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr

080075a8 <LL_RCC_SetRTCClockSource>:
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80075b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr

080075d2 <LL_RCC_GetRTCClockSource>:
{
 80075d2:	b480      	push	{r7}
 80075d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80075d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bc80      	pop	{r7}
 80075e8:	4770      	bx	lr

080075ea <LL_RCC_ForceBackupDomainReset>:
{
 80075ea:	b480      	push	{r7}
 80075ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80075ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007602:	bf00      	nop
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <LL_RCC_ReleaseBackupDomainReset>:
{
 800760a:	b480      	push	{r7}
 800760c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800760e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800761a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800761e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007622:	bf00      	nop
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr
	...

0800762c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007638:	2300      	movs	r3, #0
 800763a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800763c:	2300      	movs	r3, #0
 800763e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d058      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800764c:	f7fe fd7e 	bl	800614c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007650:	f7fa fecc 	bl	80023ec <HAL_GetTick>
 8007654:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007656:	e009      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007658:	f7fa fec8 	bl	80023ec <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d902      	bls.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	74fb      	strb	r3, [r7, #19]
        break;
 800766a:	e006      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800766c:	4b7b      	ldr	r3, [pc, #492]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007678:	d1ee      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800767a:	7cfb      	ldrb	r3, [r7, #19]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d13c      	bne.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007680:	f7ff ffa7 	bl	80075d2 <LL_RCC_GetRTCClockSource>
 8007684:	4602      	mov	r2, r0
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800768a:	429a      	cmp	r2, r3
 800768c:	d00f      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800768e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800769a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800769c:	f7ff ffa5 	bl	80075ea <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076a0:	f7ff ffb3 	bl	800760a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80076a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d014      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b8:	f7fa fe98 	bl	80023ec <HAL_GetTick>
 80076bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80076be:	e00b      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076c0:	f7fa fe94 	bl	80023ec <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d902      	bls.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	74fb      	strb	r3, [r7, #19]
            break;
 80076d6:	e004      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80076d8:	f7ff feb4 	bl	8007444 <LL_RCC_LSE_IsReady>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d1ee      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80076e2:	7cfb      	ldrb	r3, [r7, #19]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d105      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff ff5b 	bl	80075a8 <LL_RCC_SetRTCClockSource>
 80076f2:	e004      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076f4:	7cfb      	ldrb	r3, [r7, #19]
 80076f6:	74bb      	strb	r3, [r7, #18]
 80076f8:	e001      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fa:	7cfb      	ldrb	r3, [r7, #19]
 80076fc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fea9 	bl	8007466 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fe9e 	bl	8007466 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	2b00      	cmp	r3, #0
 8007734:	d004      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff fec0 	bl	80074c0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fee6 	bl	8007522 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fedb 	bl	8007522 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff fed0 	bl	8007522 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	4618      	mov	r0, r3
 8007794:	f7ff fea9 	bl	80074ea <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d004      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fe9e 	bl	80074ea <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d004      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fe93 	bl	80074ea <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0310 	and.w	r3, r3, #16
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d011      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fe5e 	bl	8007496 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077e2:	d107      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80077e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d010      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff fea5 	bl	8007554 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780e:	2b00      	cmp	r3, #0
 8007810:	d107      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800781c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007820:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d011      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff fea3 	bl	800757e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007840:	d107      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800784c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007850:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007852:	7cbb      	ldrb	r3, [r7, #18]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	58000400 	.word	0x58000400

08007860 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d071      	beq.n	8007956 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d106      	bne.n	800788c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fa fa8a 	bl	8001da0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007894:	4b32      	ldr	r3, [pc, #200]	@ (8007960 <HAL_RTC_Init+0x100>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b10      	cmp	r3, #16
 800789e:	d051      	beq.n	8007944 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007960 <HAL_RTC_Init+0x100>)
 80078a2:	22ca      	movs	r2, #202	@ 0xca
 80078a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80078a6:	4b2e      	ldr	r3, [pc, #184]	@ (8007960 <HAL_RTC_Init+0x100>)
 80078a8:	2253      	movs	r2, #83	@ 0x53
 80078aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fa11 	bl	8007cd4 <RTC_EnterInitMode>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d13f      	bne.n	800793c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80078bc:	4b28      	ldr	r3, [pc, #160]	@ (8007960 <HAL_RTC_Init+0x100>)
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	4a27      	ldr	r2, [pc, #156]	@ (8007960 <HAL_RTC_Init+0x100>)
 80078c2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80078c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ca:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80078cc:	4b24      	ldr	r3, [pc, #144]	@ (8007960 <HAL_RTC_Init+0x100>)
 80078ce:	699a      	ldr	r2, [r3, #24]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6859      	ldr	r1, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	4319      	orrs	r1, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	430b      	orrs	r3, r1
 80078e0:	491f      	ldr	r1, [pc, #124]	@ (8007960 <HAL_RTC_Init+0x100>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	041b      	lsls	r3, r3, #16
 80078f0:	491b      	ldr	r1, [pc, #108]	@ (8007960 <HAL_RTC_Init+0x100>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80078f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007960 <HAL_RTC_Init+0x100>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007906:	430b      	orrs	r3, r1
 8007908:	4915      	ldr	r1, [pc, #84]	@ (8007960 <HAL_RTC_Init+0x100>)
 800790a:	4313      	orrs	r3, r2
 800790c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fa14 	bl	8007d3c <RTC_ExitInitMode>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10e      	bne.n	800793c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800791e:	4b10      	ldr	r3, [pc, #64]	@ (8007960 <HAL_RTC_Init+0x100>)
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a19      	ldr	r1, [r3, #32]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	4319      	orrs	r1, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	430b      	orrs	r3, r1
 8007936:	490a      	ldr	r1, [pc, #40]	@ (8007960 <HAL_RTC_Init+0x100>)
 8007938:	4313      	orrs	r3, r2
 800793a:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800793c:	4b08      	ldr	r3, [pc, #32]	@ (8007960 <HAL_RTC_Init+0x100>)
 800793e:	22ff      	movs	r2, #255	@ 0xff
 8007940:	625a      	str	r2, [r3, #36]	@ 0x24
 8007942:	e001      	b.n	8007948 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40002800 	.word	0x40002800

08007964 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007964:	b590      	push	{r4, r7, lr}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800797a:	2b01      	cmp	r3, #1
 800797c:	d101      	bne.n	8007982 <HAL_RTC_SetAlarm_IT+0x1e>
 800797e:	2302      	movs	r3, #2
 8007980:	e0f3      	b.n	8007b6a <HAL_RTC_SetAlarm_IT+0x206>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007992:	4b78      	ldr	r3, [pc, #480]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800799a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a2:	d06a      	beq.n	8007a7a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d13a      	bne.n	8007a20 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80079aa:	4b72      	ldr	r3, [pc, #456]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d102      	bne.n	80079bc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2200      	movs	r2, #0
 80079ba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 f9f5 	bl	8007db8 <RTC_ByteToBcd2>
 80079ce:	4603      	mov	r3, r0
 80079d0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 f9ee 	bl	8007db8 <RTC_ByteToBcd2>
 80079dc:	4603      	mov	r3, r0
 80079de:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80079e0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	789b      	ldrb	r3, [r3, #2]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f9e6 	bl	8007db8 <RTC_ByteToBcd2>
 80079ec:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80079ee:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	78db      	ldrb	r3, [r3, #3]
 80079f6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80079f8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 f9d8 	bl	8007db8 <RTC_ByteToBcd2>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007a0c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007a14:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e02c      	b.n	8007a7a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007a28:	d00d      	beq.n	8007a46 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a32:	d008      	beq.n	8007a46 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007a34:	4b4f      	ldr	r3, [pc, #316]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d102      	bne.n	8007a46 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2200      	movs	r2, #0
 8007a44:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007a52:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007a58:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	78db      	ldrb	r3, [r3, #3]
 8007a5e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007a60:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a68:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007a6a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007a70:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007a76:	4313      	orrs	r3, r2
 8007a78:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a7c:	22ca      	movs	r2, #202	@ 0xca
 8007a7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a80:	4b3c      	ldr	r3, [pc, #240]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a82:	2253      	movs	r2, #83	@ 0x53
 8007a84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a8e:	d12c      	bne.n	8007aea <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007a90:	4b38      	ldr	r3, [pc, #224]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	4a37      	ldr	r2, [pc, #220]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007a9a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007a9c:	4b35      	ldr	r3, [pc, #212]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aa8:	d107      	bne.n	8007aba <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	4930      	ldr	r1, [pc, #192]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	644b      	str	r3, [r1, #68]	@ 0x44
 8007ab8:	e006      	b.n	8007ac8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007aba:	4a2e      	ldr	r2, [pc, #184]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad4:	f043 0201 	orr.w	r2, r3, #1
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007adc:	4b25      	ldr	r3, [pc, #148]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	4a24      	ldr	r2, [pc, #144]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ae2:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8007ae6:	6193      	str	r3, [r2, #24]
 8007ae8:	e02b      	b.n	8007b42 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007aea:	4b22      	ldr	r3, [pc, #136]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	4a21      	ldr	r2, [pc, #132]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007af0:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007af4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007af6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007af8:	2202      	movs	r2, #2
 8007afa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b02:	d107      	bne.n	8007b14 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	4919      	ldr	r1, [pc, #100]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8007b12:	e006      	b.n	8007b22 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007b14:	4a17      	ldr	r2, [pc, #92]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007b1a:	4a16      	ldr	r2, [pc, #88]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007b22:	4a14      	ldr	r2, [pc, #80]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2e:	f043 0202 	orr.w	r2, r3, #2
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007b36:	4b0f      	ldr	r3, [pc, #60]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007b3c:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007b40:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007b42:	4b0d      	ldr	r3, [pc, #52]	@ (8007b78 <HAL_RTC_SetAlarm_IT+0x214>)
 8007b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b48:	4a0b      	ldr	r2, [pc, #44]	@ (8007b78 <HAL_RTC_SetAlarm_IT+0x214>)
 8007b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b4e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b52:	4b08      	ldr	r3, [pc, #32]	@ (8007b74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007b54:	22ff      	movs	r2, #255	@ 0xff
 8007b56:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd90      	pop	{r4, r7, pc}
 8007b72:	bf00      	nop
 8007b74:	40002800 	.word	0x40002800
 8007b78:	58000800 	.word	0x58000800

08007b7c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d101      	bne.n	8007b94 <HAL_RTC_DeactivateAlarm+0x18>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e048      	b.n	8007c26 <HAL_RTC_DeactivateAlarm+0xaa>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ba4:	4b22      	ldr	r3, [pc, #136]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ba6:	22ca      	movs	r2, #202	@ 0xca
 8007ba8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007baa:	4b21      	ldr	r3, [pc, #132]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007bac:	2253      	movs	r2, #83	@ 0x53
 8007bae:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb6:	d115      	bne.n	8007be4 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007bbe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007bc2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc8:	4a19      	ldr	r2, [pc, #100]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007bca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bce:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd4:	f023 0201 	bic.w	r2, r3, #1
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007bdc:	4b14      	ldr	r3, [pc, #80]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007be2:	e014      	b.n	8007c0e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007be4:	4b12      	ldr	r3, [pc, #72]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	4a11      	ldr	r2, [pc, #68]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007bea:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007bee:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007bf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c00:	f023 0202 	bic.w	r2, r3, #2
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007c08:	4b09      	ldr	r3, [pc, #36]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c0e:	4b08      	ldr	r3, [pc, #32]	@ (8007c30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007c10:	22ff      	movs	r2, #255	@ 0xff
 8007c12:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bc80      	pop	{r7}
 8007c2e:	4770      	bx	lr
 8007c30:	40002800 	.word	0x40002800

08007c34 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007c3c:	4b11      	ldr	r3, [pc, #68]	@ (8007c84 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007c3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c44:	4013      	ands	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d005      	beq.n	8007c5e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007c52:	4b0c      	ldr	r3, [pc, #48]	@ (8007c84 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7fa fd90 	bl	800277e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007c68:	4b06      	ldr	r3, [pc, #24]	@ (8007c84 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f94a 	bl	8007f08 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40002800 	.word	0x40002800

08007c88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007c90:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd0 <HAL_RTC_WaitForSynchro+0x48>)
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	4a0e      	ldr	r2, [pc, #56]	@ (8007cd0 <HAL_RTC_WaitForSynchro+0x48>)
 8007c96:	f023 0320 	bic.w	r3, r3, #32
 8007c9a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007c9c:	f7fa fba6 	bl	80023ec <HAL_GetTick>
 8007ca0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007ca2:	e009      	b.n	8007cb8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ca4:	f7fa fba2 	bl	80023ec <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e006      	b.n	8007cc6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007cb8:	4b05      	ldr	r3, [pc, #20]	@ (8007cd0 <HAL_RTC_WaitForSynchro+0x48>)
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0ef      	beq.n	8007ca4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	40002800 	.word	0x40002800

08007cd4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007ce0:	4b15      	ldr	r3, [pc, #84]	@ (8007d38 <RTC_EnterInitMode+0x64>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d120      	bne.n	8007d2e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007cec:	4b12      	ldr	r3, [pc, #72]	@ (8007d38 <RTC_EnterInitMode+0x64>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	4a11      	ldr	r2, [pc, #68]	@ (8007d38 <RTC_EnterInitMode+0x64>)
 8007cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cf6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007cf8:	f7fa fb78 	bl	80023ec <HAL_GetTick>
 8007cfc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007cfe:	e00d      	b.n	8007d1c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007d00:	f7fa fb74 	bl	80023ec <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d0e:	d905      	bls.n	8007d1c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2203      	movs	r2, #3
 8007d18:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007d1c:	4b06      	ldr	r3, [pc, #24]	@ (8007d38 <RTC_EnterInitMode+0x64>)
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <RTC_EnterInitMode+0x5a>
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d1e8      	bne.n	8007d00 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	40002800 	.word	0x40002800

08007d3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007d48:	4b1a      	ldr	r3, [pc, #104]	@ (8007db4 <RTC_ExitInitMode+0x78>)
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	4a19      	ldr	r2, [pc, #100]	@ (8007db4 <RTC_ExitInitMode+0x78>)
 8007d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d52:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007d54:	4b17      	ldr	r3, [pc, #92]	@ (8007db4 <RTC_ExitInitMode+0x78>)
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10c      	bne.n	8007d7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ff91 	bl	8007c88 <HAL_RTC_WaitForSynchro>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01e      	beq.n	8007daa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2203      	movs	r2, #3
 8007d70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	73fb      	strb	r3, [r7, #15]
 8007d78:	e017      	b.n	8007daa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007db4 <RTC_ExitInitMode+0x78>)
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8007db4 <RTC_ExitInitMode+0x78>)
 8007d80:	f023 0320 	bic.w	r3, r3, #32
 8007d84:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff ff7e 	bl	8007c88 <HAL_RTC_WaitForSynchro>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2203      	movs	r2, #3
 8007d96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007d9e:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <RTC_ExitInitMode+0x78>)
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	4a04      	ldr	r2, [pc, #16]	@ (8007db4 <RTC_ExitInitMode+0x78>)
 8007da4:	f043 0320 	orr.w	r3, r3, #32
 8007da8:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40002800 	.word	0x40002800

08007db8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007dca:	e005      	b.n	8007dd8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007dd2:	7afb      	ldrb	r3, [r7, #11]
 8007dd4:	3b0a      	subs	r3, #10
 8007dd6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	2b09      	cmp	r3, #9
 8007ddc:	d8f6      	bhi.n	8007dcc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	b2db      	uxtb	r3, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr
	...

08007df8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <HAL_RTCEx_EnableBypassShadow+0x16>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e01f      	b.n	8007e4e <HAL_RTCEx_EnableBypassShadow+0x56>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e58 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007e20:	22ca      	movs	r2, #202	@ 0xca
 8007e22:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e24:	4b0c      	ldr	r3, [pc, #48]	@ (8007e58 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007e26:	2253      	movs	r2, #83	@ 0x53
 8007e28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e58 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e58 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007e30:	f043 0320 	orr.w	r3, r3, #32
 8007e34:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e36:	4b08      	ldr	r3, [pc, #32]	@ (8007e58 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007e38:	22ff      	movs	r2, #255	@ 0xff
 8007e3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr
 8007e58:	40002800 	.word	0x40002800

08007e5c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_RTCEx_SetSSRU_IT+0x16>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e027      	b.n	8007ec2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e82:	4b12      	ldr	r3, [pc, #72]	@ (8007ecc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007e84:	22ca      	movs	r2, #202	@ 0xca
 8007e86:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e88:	4b10      	ldr	r3, [pc, #64]	@ (8007ecc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007e8a:	2253      	movs	r2, #83	@ 0x53
 8007e8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007ecc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	4a0e      	ldr	r2, [pc, #56]	@ (8007ecc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e98:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8007ed0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007ea2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ea6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eaa:	4b08      	ldr	r3, [pc, #32]	@ (8007ecc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007eac:	22ff      	movs	r2, #255	@ 0xff
 8007eae:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	40002800 	.word	0x40002800
 8007ed0:	58000800 	.word	0x58000800

08007ed4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007edc:	4b09      	ldr	r3, [pc, #36]	@ (8007f04 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d005      	beq.n	8007ef4 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007ee8:	4b06      	ldr	r3, [pc, #24]	@ (8007f04 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007eea:	2240      	movs	r2, #64	@ 0x40
 8007eec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7fa fc4f 	bl	8002792 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	40002800 	.word	0x40002800

08007f08 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr
	...

08007f1c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007f28:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007f2a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4413      	add	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	601a      	str	r2, [r3, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bc80      	pop	{r7}
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	4000b100 	.word	0x4000b100

08007f4c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007f56:	4b07      	ldr	r3, [pc, #28]	@ (8007f74 <HAL_RTCEx_BKUPRead+0x28>)
 8007f58:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	4000b100 	.word	0x4000b100

08007f78 <LL_PWR_SetRadioBusyTrigger>:
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007f80:	4b06      	ldr	r3, [pc, #24]	@ (8007f9c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f88:	4904      	ldr	r1, [pc, #16]	@ (8007f9c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	608b      	str	r3, [r1, #8]
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	58000400 	.word	0x58000400

08007fa0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007fa4:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007faa:	4a04      	ldr	r2, [pc, #16]	@ (8007fbc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007fac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007fb4:	bf00      	nop
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr
 8007fbc:	58000400 	.word	0x58000400

08007fc0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007fc4:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fca:	4a04      	ldr	r2, [pc, #16]	@ (8007fdc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007fcc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007fd4:	bf00      	nop
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr
 8007fdc:	58000400 	.word	0x58000400

08007fe0 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007fe4:	4b03      	ldr	r3, [pc, #12]	@ (8007ff4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007fe6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fea:	619a      	str	r2, [r3, #24]
}
 8007fec:	bf00      	nop
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr
 8007ff4:	58000400 	.word	0x58000400

08007ff8 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007ffc:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b02      	cmp	r3, #2
 8008006:	d101      	bne.n	800800c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008008:	2301      	movs	r3, #1
 800800a:	e000      	b.n	800800e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	58000400 	.word	0x58000400

0800801c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008020:	4b06      	ldr	r3, [pc, #24]	@ (800803c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b04      	cmp	r3, #4
 800802a:	d101      	bne.n	8008030 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800802c:	2301      	movs	r3, #1
 800802e:	e000      	b.n	8008032 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	58000400 	.word	0x58000400

08008040 <LL_RCC_RF_DisableReset>:
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800804c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008050:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008054:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008058:	bf00      	nop
 800805a:	46bd      	mov	sp, r7
 800805c:	bc80      	pop	{r7}
 800805e:	4770      	bx	lr

08008060 <LL_RCC_IsRFUnderReset>:
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800806c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008074:	d101      	bne.n	800807a <LL_RCC_IsRFUnderReset+0x1a>
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <LL_RCC_IsRFUnderReset+0x1c>
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr

08008084 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800808c:	4b06      	ldr	r3, [pc, #24]	@ (80080a8 <LL_EXTI_EnableIT_32_63+0x24>)
 800808e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008092:	4905      	ldr	r1, [pc, #20]	@ (80080a8 <LL_EXTI_EnableIT_32_63+0x24>)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4313      	orrs	r3, r2
 8008098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	58000800 	.word	0x58000800

080080ac <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	73fb      	strb	r3, [r7, #15]
    return status;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	e052      	b.n	8008168 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	799b      	ldrb	r3, [r3, #6]
 80080ca:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_SUBGHZ_Init+0x2c>
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d109      	bne.n	80080ec <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7f9 ff78 	bl	8001fd4 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80080e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80080e8:	f7ff ffcc 	bl	8008084 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d126      	bne.n	8008140 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2202      	movs	r2, #2
 80080f6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80080f8:	f7ff ffa2 	bl	8008040 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80080fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008170 <HAL_SUBGHZ_Init+0xc4>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	4613      	mov	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	0cdb      	lsrs	r3, r3, #19
 800810a:	2264      	movs	r2, #100	@ 0x64
 800810c:	fb02 f303 	mul.w	r3, r2, r3
 8008110:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d105      	bne.n	8008124 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	609a      	str	r2, [r3, #8]
        break;
 8008122:	e007      	b.n	8008134 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	3b01      	subs	r3, #1
 8008128:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800812a:	f7ff ff99 	bl	8008060 <LL_RCC_IsRFUnderReset>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1ee      	bne.n	8008112 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008134:	f7ff ff34 	bl	8007fa0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8008138:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800813c:	f7ff ff1c 	bl	8007f78 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008140:	f7ff ff4e 	bl	8007fe0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10a      	bne.n	8008160 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fabc 	bl	80086cc <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	719a      	strb	r2, [r3, #6]

  return status;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20000000 	.word	0x20000000

08008174 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	607a      	str	r2, [r7, #4]
 800817e:	461a      	mov	r2, r3
 8008180:	460b      	mov	r3, r1
 8008182:	817b      	strh	r3, [r7, #10]
 8008184:	4613      	mov	r3, r2
 8008186:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	799b      	ldrb	r3, [r3, #6]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	d14a      	bne.n	8008228 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	795b      	ldrb	r3, [r3, #5]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800819a:	2302      	movs	r3, #2
 800819c:	e045      	b.n	800822a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2202      	movs	r2, #2
 80081a8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 fb5c 	bl	8008868 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80081b0:	f7ff ff06 	bl	8007fc0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80081b4:	210d      	movs	r1, #13
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 faa8 	bl	800870c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80081bc:	897b      	ldrh	r3, [r7, #10]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	4619      	mov	r1, r3
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 faa0 	bl	800870c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80081cc:	897b      	ldrh	r3, [r7, #10]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	4619      	mov	r1, r3
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fa9a 	bl	800870c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80081d8:	2300      	movs	r3, #0
 80081da:	82bb      	strh	r3, [r7, #20]
 80081dc:	e00a      	b.n	80081f4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80081de:	8abb      	ldrh	r3, [r7, #20]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	4413      	add	r3, r2
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	4619      	mov	r1, r3
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 fa8f 	bl	800870c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80081ee:	8abb      	ldrh	r3, [r7, #20]
 80081f0:	3301      	adds	r3, #1
 80081f2:	82bb      	strh	r3, [r7, #20]
 80081f4:	8aba      	ldrh	r2, [r7, #20]
 80081f6:	893b      	ldrh	r3, [r7, #8]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d3f0      	bcc.n	80081de <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80081fc:	f7ff fed0 	bl	8007fa0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fb55 	bl	80088b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
 8008212:	e001      	b.n	8008218 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	715a      	strb	r2, [r3, #5]

    return status;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	e000      	b.n	800822a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008228:	2302      	movs	r3, #2
  }
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b088      	sub	sp, #32
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	461a      	mov	r2, r3
 800823e:	460b      	mov	r3, r1
 8008240:	817b      	strh	r3, [r7, #10]
 8008242:	4613      	mov	r3, r2
 8008244:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	799b      	ldrb	r3, [r3, #6]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	d14a      	bne.n	80082ea <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	795b      	ldrb	r3, [r3, #5]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800825c:	2302      	movs	r3, #2
 800825e:	e045      	b.n	80082ec <HAL_SUBGHZ_ReadRegisters+0xba>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fafe 	bl	8008868 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800826c:	f7ff fea8 	bl	8007fc0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008270:	211d      	movs	r1, #29
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 fa4a 	bl	800870c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008278:	897b      	ldrh	r3, [r7, #10]
 800827a:	0a1b      	lsrs	r3, r3, #8
 800827c:	b29b      	uxth	r3, r3
 800827e:	b2db      	uxtb	r3, r3
 8008280:	4619      	mov	r1, r3
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 fa42 	bl	800870c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008288:	897b      	ldrh	r3, [r7, #10]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	4619      	mov	r1, r3
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 fa3c 	bl	800870c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008294:	2100      	movs	r1, #0
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fa38 	bl	800870c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800829c:	2300      	movs	r3, #0
 800829e:	82fb      	strh	r3, [r7, #22]
 80082a0:	e009      	b.n	80082b6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80082a2:	69b9      	ldr	r1, [r7, #24]
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 fa87 	bl	80087b8 <SUBGHZSPI_Receive>
      pData++;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	3301      	adds	r3, #1
 80082ae:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80082b0:	8afb      	ldrh	r3, [r7, #22]
 80082b2:	3301      	adds	r3, #1
 80082b4:	82fb      	strh	r3, [r7, #22]
 80082b6:	8afa      	ldrh	r2, [r7, #22]
 80082b8:	893b      	ldrh	r3, [r7, #8]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d3f1      	bcc.n	80082a2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80082be:	f7ff fe6f 	bl	8007fa0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 faf4 	bl	80088b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	77fb      	strb	r3, [r7, #31]
 80082d4:	e001      	b.n	80082da <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	715a      	strb	r2, [r3, #5]

    return status;
 80082e6:	7ffb      	ldrb	r3, [r7, #31]
 80082e8:	e000      	b.n	80082ec <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80082ea:	2302      	movs	r3, #2
  }
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	607a      	str	r2, [r7, #4]
 80082fe:	461a      	mov	r2, r3
 8008300:	460b      	mov	r3, r1
 8008302:	72fb      	strb	r3, [r7, #11]
 8008304:	4613      	mov	r3, r2
 8008306:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	799b      	ldrb	r3, [r3, #6]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b01      	cmp	r3, #1
 8008310:	d14a      	bne.n	80083a8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	795b      	ldrb	r3, [r3, #5]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800831a:	2302      	movs	r3, #2
 800831c:	e045      	b.n	80083aa <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 fa9f 	bl	8008868 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800832a:	7afb      	ldrb	r3, [r7, #11]
 800832c:	2b84      	cmp	r3, #132	@ 0x84
 800832e:	d002      	beq.n	8008336 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	2b94      	cmp	r3, #148	@ 0x94
 8008334:	d103      	bne.n	800833e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	711a      	strb	r2, [r3, #4]
 800833c:	e002      	b.n	8008344 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008344:	f7ff fe3c 	bl	8007fc0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008348:	7afb      	ldrb	r3, [r7, #11]
 800834a:	4619      	mov	r1, r3
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 f9dd 	bl	800870c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008352:	2300      	movs	r3, #0
 8008354:	82bb      	strh	r3, [r7, #20]
 8008356:	e00a      	b.n	800836e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008358:	8abb      	ldrh	r3, [r7, #20]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	4413      	add	r3, r2
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	4619      	mov	r1, r3
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 f9d2 	bl	800870c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008368:	8abb      	ldrh	r3, [r7, #20]
 800836a:	3301      	adds	r3, #1
 800836c:	82bb      	strh	r3, [r7, #20]
 800836e:	8aba      	ldrh	r2, [r7, #20]
 8008370:	893b      	ldrh	r3, [r7, #8]
 8008372:	429a      	cmp	r2, r3
 8008374:	d3f0      	bcc.n	8008358 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008376:	f7ff fe13 	bl	8007fa0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	2b84      	cmp	r3, #132	@ 0x84
 800837e:	d002      	beq.n	8008386 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 fa95 	bl	80088b0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	75fb      	strb	r3, [r7, #23]
 8008392:	e001      	b.n	8008398 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	715a      	strb	r2, [r3, #5]

    return status;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	e000      	b.n	80083aa <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80083a8:	2302      	movs	r3, #2
  }
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b088      	sub	sp, #32
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	461a      	mov	r2, r3
 80083be:	460b      	mov	r3, r1
 80083c0:	72fb      	strb	r3, [r7, #11]
 80083c2:	4613      	mov	r3, r2
 80083c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	799b      	ldrb	r3, [r3, #6]
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d13d      	bne.n	8008450 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	795b      	ldrb	r3, [r3, #5]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d101      	bne.n	80083e0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80083dc:	2302      	movs	r3, #2
 80083de:	e038      	b.n	8008452 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 fa3e 	bl	8008868 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80083ec:	f7ff fde8 	bl	8007fc0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	4619      	mov	r1, r3
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 f989 	bl	800870c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80083fa:	2100      	movs	r1, #0
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f985 	bl	800870c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008402:	2300      	movs	r3, #0
 8008404:	82fb      	strh	r3, [r7, #22]
 8008406:	e009      	b.n	800841c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008408:	69b9      	ldr	r1, [r7, #24]
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 f9d4 	bl	80087b8 <SUBGHZSPI_Receive>
      pData++;
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	3301      	adds	r3, #1
 8008414:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008416:	8afb      	ldrh	r3, [r7, #22]
 8008418:	3301      	adds	r3, #1
 800841a:	82fb      	strh	r3, [r7, #22]
 800841c:	8afa      	ldrh	r2, [r7, #22]
 800841e:	893b      	ldrh	r3, [r7, #8]
 8008420:	429a      	cmp	r2, r3
 8008422:	d3f1      	bcc.n	8008408 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008424:	f7ff fdbc 	bl	8007fa0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 fa41 	bl	80088b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	77fb      	strb	r3, [r7, #31]
 800843a:	e001      	b.n	8008440 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2201      	movs	r2, #1
 8008444:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	715a      	strb	r2, [r3, #5]

    return status;
 800844c:	7ffb      	ldrb	r3, [r7, #31]
 800844e:	e000      	b.n	8008452 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008450:	2302      	movs	r3, #2
  }
}
 8008452:	4618      	mov	r0, r3
 8008454:	3720      	adds	r7, #32
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	461a      	mov	r2, r3
 8008466:	460b      	mov	r3, r1
 8008468:	72fb      	strb	r3, [r7, #11]
 800846a:	4613      	mov	r3, r2
 800846c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	799b      	ldrb	r3, [r3, #6]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b01      	cmp	r3, #1
 8008476:	d13e      	bne.n	80084f6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	795b      	ldrb	r3, [r3, #5]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008480:	2302      	movs	r3, #2
 8008482:	e039      	b.n	80084f8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f9ec 	bl	8008868 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008490:	f7ff fd96 	bl	8007fc0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008494:	210e      	movs	r1, #14
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f938 	bl	800870c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800849c:	7afb      	ldrb	r3, [r7, #11]
 800849e:	4619      	mov	r1, r3
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 f933 	bl	800870c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80084a6:	2300      	movs	r3, #0
 80084a8:	82bb      	strh	r3, [r7, #20]
 80084aa:	e00a      	b.n	80084c2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80084ac:	8abb      	ldrh	r3, [r7, #20]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	4619      	mov	r1, r3
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 f928 	bl	800870c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80084bc:	8abb      	ldrh	r3, [r7, #20]
 80084be:	3301      	adds	r3, #1
 80084c0:	82bb      	strh	r3, [r7, #20]
 80084c2:	8aba      	ldrh	r2, [r7, #20]
 80084c4:	893b      	ldrh	r3, [r7, #8]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d3f0      	bcc.n	80084ac <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80084ca:	f7ff fd69 	bl	8007fa0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 f9ee 	bl	80088b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	75fb      	strb	r3, [r7, #23]
 80084e0:	e001      	b.n	80084e6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	715a      	strb	r2, [r3, #5]

    return status;
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	e000      	b.n	80084f8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80084f6:	2302      	movs	r3, #2
  }
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	607a      	str	r2, [r7, #4]
 800850a:	461a      	mov	r2, r3
 800850c:	460b      	mov	r3, r1
 800850e:	72fb      	strb	r3, [r7, #11]
 8008510:	4613      	mov	r3, r2
 8008512:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	799b      	ldrb	r3, [r3, #6]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b01      	cmp	r3, #1
 8008520:	d141      	bne.n	80085a6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	795b      	ldrb	r3, [r3, #5]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800852a:	2302      	movs	r3, #2
 800852c:	e03c      	b.n	80085a8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 f997 	bl	8008868 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800853a:	f7ff fd41 	bl	8007fc0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800853e:	211e      	movs	r1, #30
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 f8e3 	bl	800870c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	4619      	mov	r1, r3
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 f8de 	bl	800870c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008550:	2100      	movs	r1, #0
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f8da 	bl	800870c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008558:	2300      	movs	r3, #0
 800855a:	82fb      	strh	r3, [r7, #22]
 800855c:	e009      	b.n	8008572 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800855e:	69b9      	ldr	r1, [r7, #24]
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f929 	bl	80087b8 <SUBGHZSPI_Receive>
      pData++;
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	3301      	adds	r3, #1
 800856a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800856c:	8afb      	ldrh	r3, [r7, #22]
 800856e:	3301      	adds	r3, #1
 8008570:	82fb      	strh	r3, [r7, #22]
 8008572:	8afa      	ldrh	r2, [r7, #22]
 8008574:	893b      	ldrh	r3, [r7, #8]
 8008576:	429a      	cmp	r2, r3
 8008578:	d3f1      	bcc.n	800855e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800857a:	f7ff fd11 	bl	8007fa0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 f996 	bl	80088b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e001      	b.n	8008596 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	715a      	strb	r2, [r3, #5]

    return status;
 80085a2:	7ffb      	ldrb	r3, [r7, #31]
 80085a4:	e000      	b.n	80085a8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80085a6:	2302      	movs	r3, #2
  }
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80085b8:	2300      	movs	r3, #0
 80085ba:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80085bc:	f107 020c 	add.w	r2, r7, #12
 80085c0:	2302      	movs	r3, #2
 80085c2:	2112      	movs	r1, #18
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff fef4 	bl	80083b2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80085ca:	7b3b      	ldrb	r3, [r7, #12]
 80085cc:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80085ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80085d2:	021b      	lsls	r3, r3, #8
 80085d4:	b21a      	sxth	r2, r3
 80085d6:	7b7b      	ldrb	r3, [r7, #13]
 80085d8:	b21b      	sxth	r3, r3
 80085da:	4313      	orrs	r3, r2
 80085dc:	b21b      	sxth	r3, r3
 80085de:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80085e0:	f107 020c 	add.w	r2, r7, #12
 80085e4:	2302      	movs	r3, #2
 80085e6:	2102      	movs	r1, #2
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff fe83 	bl	80082f4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80085ee:	89fb      	ldrh	r3, [r7, #14]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f012 ffed 	bl	801b5d8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80085fe:	89fb      	ldrh	r3, [r7, #14]
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d008      	beq.n	800861c <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 800860a:	89fb      	ldrh	r3, [r7, #14]
 800860c:	099b      	lsrs	r3, r3, #6
 800860e:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8008612:	2b00      	cmp	r3, #0
 8008614:	d102      	bne.n	800861c <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f012 ffec 	bl	801b5f4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800861c:	89fb      	ldrh	r3, [r7, #14]
 800861e:	089b      	lsrs	r3, r3, #2
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f013 f83b 	bl	801b6a4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800862e:	89fb      	ldrh	r3, [r7, #14]
 8008630:	08db      	lsrs	r3, r3, #3
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f013 f840 	bl	801b6c0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008640:	89fb      	ldrh	r3, [r7, #14]
 8008642:	091b      	lsrs	r3, r3, #4
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f013 f845 	bl	801b6dc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008652:	89fb      	ldrh	r3, [r7, #14]
 8008654:	095b      	lsrs	r3, r3, #5
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f013 f812 	bl	801b688 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008664:	89fb      	ldrh	r3, [r7, #14]
 8008666:	099b      	lsrs	r3, r3, #6
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f012 ffcd 	bl	801b610 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008676:	89fb      	ldrh	r3, [r7, #14]
 8008678:	09db      	lsrs	r3, r3, #7
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00e      	beq.n	80086a0 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008682:	89fb      	ldrh	r3, [r7, #14]
 8008684:	0a1b      	lsrs	r3, r3, #8
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800868e:	2101      	movs	r1, #1
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f012 ffcb 	bl	801b62c <HAL_SUBGHZ_CADStatusCallback>
 8008696:	e003      	b.n	80086a0 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008698:	2100      	movs	r1, #0
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f012 ffc6 	bl	801b62c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80086a0:	89fb      	ldrh	r3, [r7, #14]
 80086a2:	0a5b      	lsrs	r3, r3, #9
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f012 ffdb 	bl	801b668 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80086b2:	89fb      	ldrh	r3, [r7, #14]
 80086b4:	0b9b      	lsrs	r3, r3, #14
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f013 f81a 	bl	801b6f8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80086d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008708 <SUBGHZSPI_Init+0x3c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008708 <SUBGHZSPI_Init+0x3c>)
 80086da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086de:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80086e0:	4a09      	ldr	r2, [pc, #36]	@ (8008708 <SUBGHZSPI_Init+0x3c>)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80086e8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80086ea:	4b07      	ldr	r3, [pc, #28]	@ (8008708 <SUBGHZSPI_Init+0x3c>)
 80086ec:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80086f0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80086f2:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <SUBGHZSPI_Init+0x3c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a04      	ldr	r2, [pc, #16]	@ (8008708 <SUBGHZSPI_Init+0x3c>)
 80086f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086fc:	6013      	str	r3, [r2, #0]
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr
 8008708:	58010000 	.word	0x58010000

0800870c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800871c:	4b23      	ldr	r3, [pc, #140]	@ (80087ac <SUBGHZSPI_Transmit+0xa0>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	00db      	lsls	r3, r3, #3
 8008724:	1a9b      	subs	r3, r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	0cdb      	lsrs	r3, r3, #19
 800872a:	2264      	movs	r2, #100	@ 0x64
 800872c:	fb02 f303 	mul.w	r3, r2, r3
 8008730:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d105      	bne.n	8008744 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	609a      	str	r2, [r3, #8]
      break;
 8008742:	e008      	b.n	8008756 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3b01      	subs	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800874a:	4b19      	ldr	r3, [pc, #100]	@ (80087b0 <SUBGHZSPI_Transmit+0xa4>)
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b02      	cmp	r3, #2
 8008754:	d1ed      	bne.n	8008732 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008756:	4b17      	ldr	r3, [pc, #92]	@ (80087b4 <SUBGHZSPI_Transmit+0xa8>)
 8008758:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	78fa      	ldrb	r2, [r7, #3]
 800875e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008760:	4b12      	ldr	r3, [pc, #72]	@ (80087ac <SUBGHZSPI_Transmit+0xa0>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	1a9b      	subs	r3, r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	0cdb      	lsrs	r3, r3, #19
 800876e:	2264      	movs	r2, #100	@ 0x64
 8008770:	fb02 f303 	mul.w	r3, r2, r3
 8008774:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d105      	bne.n	8008788 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	609a      	str	r2, [r3, #8]
      break;
 8008786:	e008      	b.n	800879a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3b01      	subs	r3, #1
 800878c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800878e:	4b08      	ldr	r3, [pc, #32]	@ (80087b0 <SUBGHZSPI_Transmit+0xa4>)
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b01      	cmp	r3, #1
 8008798:	d1ed      	bne.n	8008776 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800879a:	4b05      	ldr	r3, [pc, #20]	@ (80087b0 <SUBGHZSPI_Transmit+0xa4>)
 800879c:	68db      	ldr	r3, [r3, #12]

  return status;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	371c      	adds	r7, #28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000000 	.word	0x20000000
 80087b0:	58010000 	.word	0x58010000
 80087b4:	5801000c 	.word	0x5801000c

080087b8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80087c6:	4b25      	ldr	r3, [pc, #148]	@ (800885c <SUBGHZSPI_Receive+0xa4>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	4613      	mov	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	1a9b      	subs	r3, r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	0cdb      	lsrs	r3, r3, #19
 80087d4:	2264      	movs	r2, #100	@ 0x64
 80087d6:	fb02 f303 	mul.w	r3, r2, r3
 80087da:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d105      	bne.n	80087ee <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	609a      	str	r2, [r3, #8]
      break;
 80087ec:	e008      	b.n	8008800 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80087f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008860 <SUBGHZSPI_Receive+0xa8>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d1ed      	bne.n	80087dc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008800:	4b18      	ldr	r3, [pc, #96]	@ (8008864 <SUBGHZSPI_Receive+0xac>)
 8008802:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	22ff      	movs	r2, #255	@ 0xff
 8008808:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800880a:	4b14      	ldr	r3, [pc, #80]	@ (800885c <SUBGHZSPI_Receive+0xa4>)
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4613      	mov	r3, r2
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	1a9b      	subs	r3, r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	0cdb      	lsrs	r3, r3, #19
 8008818:	2264      	movs	r2, #100	@ 0x64
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d105      	bne.n	8008832 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	609a      	str	r2, [r3, #8]
      break;
 8008830:	e008      	b.n	8008844 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3b01      	subs	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008838:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <SUBGHZSPI_Receive+0xa8>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b01      	cmp	r3, #1
 8008842:	d1ed      	bne.n	8008820 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008844:	4b06      	ldr	r3, [pc, #24]	@ (8008860 <SUBGHZSPI_Receive+0xa8>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	b2da      	uxtb	r2, r3
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	701a      	strb	r2, [r3, #0]

  return status;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008850:	4618      	mov	r0, r3
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	bc80      	pop	{r7}
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	20000000 	.word	0x20000000
 8008860:	58010000 	.word	0x58010000
 8008864:	5801000c 	.word	0x5801000c

08008868 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	791b      	ldrb	r3, [r3, #4]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d111      	bne.n	800889c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008878:	4b0c      	ldr	r3, [pc, #48]	@ (80088ac <SUBGHZ_CheckDeviceReady+0x44>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	4613      	mov	r3, r2
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	4413      	add	r3, r2
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	0c1b      	lsrs	r3, r3, #16
 8008886:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008888:	f7ff fb9a 	bl	8007fc0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3b01      	subs	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f9      	bne.n	800888c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008898:	f7ff fb82 	bl	8007fa0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f807 	bl	80088b0 <SUBGHZ_WaitOnBusy>
 80088a2:	4603      	mov	r3, r0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000000 	.word	0x20000000

080088b0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80088bc:	4b12      	ldr	r3, [pc, #72]	@ (8008908 <SUBGHZ_WaitOnBusy+0x58>)
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	4613      	mov	r3, r2
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	4413      	add	r3, r2
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	0d1b      	lsrs	r3, r3, #20
 80088ca:	2264      	movs	r2, #100	@ 0x64
 80088cc:	fb02 f303 	mul.w	r3, r2, r3
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80088d2:	f7ff fba3 	bl	800801c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80088d6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d105      	bne.n	80088ea <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2202      	movs	r2, #2
 80088e6:	609a      	str	r2, [r3, #8]
      break;
 80088e8:	e009      	b.n	80088fe <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80088f0:	f7ff fb82 	bl	8007ff8 <LL_PWR_IsActiveFlag_RFBUSYS>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	4013      	ands	r3, r2
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d0e9      	beq.n	80088d2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20000000 	.word	0x20000000

0800890c <LL_RCC_GetUSARTClockSource>:
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008918:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	401a      	ands	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	041b      	lsls	r3, r3, #16
 8008924:	4313      	orrs	r3, r2
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr

08008930 <LL_RCC_GetLPUARTClockSource>:
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800893c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4013      	ands	r3, r2
}
 8008944:	4618      	mov	r0, r3
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr

0800894e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e042      	b.n	80089e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7fa f89c 	bl	8002ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2224      	movs	r2, #36	@ 0x24
 800897c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0201 	bic.w	r2, r2, #1
 800898e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 feab 	bl	80096f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fc34 	bl	800920c <UART_SetConfig>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d101      	bne.n	80089ae <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e01b      	b.n	80089e6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 ff29 	bl	8009836 <UART_CheckIdleState>
 80089e4:	4603      	mov	r3, r0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	@ 0x28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	d137      	bne.n	8008a78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <HAL_UART_Receive_IT+0x24>
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e030      	b.n	8008a7a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a18      	ldr	r2, [pc, #96]	@ (8008a84 <HAL_UART_Receive_IT+0x94>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d01f      	beq.n	8008a68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d018      	beq.n	8008a68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	613b      	str	r3, [r7, #16]
   return(result);
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	623b      	str	r3, [r7, #32]
 8008a56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	69f9      	ldr	r1, [r7, #28]
 8008a5a:	6a3a      	ldr	r2, [r7, #32]
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e6      	bne.n	8008a36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a68:	88fb      	ldrh	r3, [r7, #6]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 fffe 	bl	8009a70 <UART_Start_Receive_IT>
 8008a74:	4603      	mov	r3, r0
 8008a76:	e000      	b.n	8008a7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a78:	2302      	movs	r3, #2
  }
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3728      	adds	r7, #40	@ 0x28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	40008000 	.word	0x40008000

08008a88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08a      	sub	sp, #40	@ 0x28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	d167      	bne.n	8008b70 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <HAL_UART_Transmit_DMA+0x24>
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e060      	b.n	8008b72 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	88fa      	ldrh	r2, [r7, #6]
 8008aba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	88fa      	ldrh	r2, [r7, #6]
 8008ac2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2221      	movs	r2, #33	@ 0x21
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d028      	beq.n	8008b30 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ae2:	4a26      	ldr	r2, [pc, #152]	@ (8008b7c <HAL_UART_Transmit_DMA+0xf4>)
 8008ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aea:	4a25      	ldr	r2, [pc, #148]	@ (8008b80 <HAL_UART_Transmit_DMA+0xf8>)
 8008aec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008af2:	4a24      	ldr	r2, [pc, #144]	@ (8008b84 <HAL_UART_Transmit_DMA+0xfc>)
 8008af4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008afa:	2200      	movs	r2, #0
 8008afc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b06:	4619      	mov	r1, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3328      	adds	r3, #40	@ 0x28
 8008b0e:	461a      	mov	r2, r3
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	f7fb fe2f 	bl	8004774 <HAL_DMA_Start_IT>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d009      	beq.n	8008b30 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2210      	movs	r2, #16
 8008b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e020      	b.n	8008b72 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2240      	movs	r2, #64	@ 0x40
 8008b36:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	613b      	str	r3, [r7, #16]
   return(result);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b58:	623a      	str	r2, [r7, #32]
 8008b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	69f9      	ldr	r1, [r7, #28]
 8008b5e:	6a3a      	ldr	r2, [r7, #32]
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e5      	bne.n	8008b38 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e000      	b.n	8008b72 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008b70:	2302      	movs	r3, #2
  }
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3728      	adds	r7, #40	@ 0x28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	08009dfb 	.word	0x08009dfb
 8008b80:	08009e95 	.word	0x08009e95
 8008b84:	08009eb1 	.word	0x08009eb1

08008b88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b0ba      	sub	sp, #232	@ 0xe8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008bb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11b      	bne.n	8008bfc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc8:	f003 0320 	and.w	r3, r3, #32
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d015      	beq.n	8008bfc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd4:	f003 0320 	and.w	r3, r3, #32
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d105      	bne.n	8008be8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d009      	beq.n	8008bfc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 82e3 	beq.w	80091b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
      }
      return;
 8008bfa:	e2dd      	b.n	80091b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 8123 	beq.w	8008e4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8008e40 <HAL_UART_IRQHandler+0x2b8>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c16:	4b8b      	ldr	r3, [pc, #556]	@ (8008e44 <HAL_UART_IRQHandler+0x2bc>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 8116 	beq.w	8008e4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d011      	beq.n	8008c50 <HAL_UART_IRQHandler+0xc8>
 8008c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c46:	f043 0201 	orr.w	r2, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d011      	beq.n	8008c80 <HAL_UART_IRQHandler+0xf8>
 8008c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c76:	f043 0204 	orr.w	r2, r3, #4
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c84:	f003 0304 	and.w	r3, r3, #4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d011      	beq.n	8008cb0 <HAL_UART_IRQHandler+0x128>
 8008c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00b      	beq.n	8008cb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca6:	f043 0202 	orr.w	r2, r3, #2
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d017      	beq.n	8008cec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d105      	bne.n	8008cd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e40 <HAL_UART_IRQHandler+0x2b8>)
 8008cce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2208      	movs	r2, #8
 8008cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce2:	f043 0208 	orr.w	r2, r3, #8
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d012      	beq.n	8008d1e <HAL_UART_IRQHandler+0x196>
 8008cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00c      	beq.n	8008d1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d14:	f043 0220 	orr.w	r2, r3, #32
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8249 	beq.w	80091bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d013      	beq.n	8008d5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d3a:	f003 0320 	and.w	r3, r3, #32
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d105      	bne.n	8008d4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d72:	2b40      	cmp	r3, #64	@ 0x40
 8008d74:	d005      	beq.n	8008d82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d054      	beq.n	8008e2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 ffd4 	bl	8009d30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d92:	2b40      	cmp	r3, #64	@ 0x40
 8008d94:	d146      	bne.n	8008e24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1d9      	bne.n	8008d96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d017      	beq.n	8008e1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df2:	4a15      	ldr	r2, [pc, #84]	@ (8008e48 <HAL_UART_IRQHandler+0x2c0>)
 8008df4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fb fd95 	bl	800492c <HAL_DMA_Abort_IT>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d019      	beq.n	8008e3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e16:	4610      	mov	r0, r2
 8008e18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1a:	e00f      	b.n	8008e3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f9e0 	bl	80091e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e22:	e00b      	b.n	8008e3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f9dc 	bl	80091e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2a:	e007      	b.n	8008e3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f9d8 	bl	80091e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e3a:	e1bf      	b.n	80091bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3c:	bf00      	nop
    return;
 8008e3e:	e1bd      	b.n	80091bc <HAL_UART_IRQHandler+0x634>
 8008e40:	10000001 	.word	0x10000001
 8008e44:	04000120 	.word	0x04000120
 8008e48:	08009f31 	.word	0x08009f31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	f040 8153 	bne.w	80090fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e5a:	f003 0310 	and.w	r3, r3, #16
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 814c 	beq.w	80090fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 8145 	beq.w	80090fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2210      	movs	r2, #16
 8008e78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e84:	2b40      	cmp	r3, #64	@ 0x40
 8008e86:	f040 80bb 	bne.w	8009000 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 818f 	beq.w	80091c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ea8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008eac:	429a      	cmp	r2, r3
 8008eae:	f080 8187 	bcs.w	80091c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f040 8087 	bne.w	8008fde <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008efe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1da      	bne.n	8008ed0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e1      	bne.n	8008f1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3308      	adds	r3, #8
 8008f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e3      	bne.n	8008f56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fac:	f023 0310 	bic.w	r3, r3, #16
 8008fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1e4      	bne.n	8008f9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fb fc49 	bl	8004870 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f8fb 	bl	80091f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ffe:	e0df      	b.n	80091c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800900c:	b29b      	uxth	r3, r3
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800901a:	b29b      	uxth	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 80d1 	beq.w	80091c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 80cc 	beq.w	80091c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800903a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800903c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800904e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009050:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800905c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e4      	bne.n	800902c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	623b      	str	r3, [r7, #32]
   return(result);
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009078:	f023 0301 	bic.w	r3, r3, #1
 800907c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800908a:	633a      	str	r2, [r7, #48]	@ 0x30
 800908c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e1      	bne.n	8009062 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 0310 	bic.w	r3, r3, #16
 80090c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090d4:	61fb      	str	r3, [r7, #28]
 80090d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	69b9      	ldr	r1, [r7, #24]
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	617b      	str	r3, [r7, #20]
   return(result);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e4      	bne.n	80090b2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f87d 	bl	80091f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090fa:	e063      	b.n	80091c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00e      	beq.n	8009126 <HAL_UART_IRQHandler+0x59e>
 8009108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800910c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800911c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fc64 	bl	800a9ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009124:	e051      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800912a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912e:	2b00      	cmp	r3, #0
 8009130:	d014      	beq.n	800915c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913a:	2b00      	cmp	r3, #0
 800913c:	d105      	bne.n	800914a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800913e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d008      	beq.n	800915c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800914e:	2b00      	cmp	r3, #0
 8009150:	d03a      	beq.n	80091c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
    }
    return;
 800915a:	e035      	b.n	80091c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <HAL_UART_IRQHandler+0x5f4>
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800916c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fef1 	bl	8009f5c <UART_EndTransmit_IT>
    return;
 800917a:	e026      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800917c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d009      	beq.n	800919c <HAL_UART_IRQHandler+0x614>
 8009188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800918c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 fc3b 	bl	800aa10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800919a:	e016      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800919c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d010      	beq.n	80091ca <HAL_UART_IRQHandler+0x642>
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da0c      	bge.n	80091ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 fc24 	bl	800a9fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b6:	e008      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
      return;
 80091b8:	bf00      	nop
 80091ba:	e006      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
    return;
 80091bc:	bf00      	nop
 80091be:	e004      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
      return;
 80091c0:	bf00      	nop
 80091c2:	e002      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
      return;
 80091c4:	bf00      	nop
 80091c6:	e000      	b.n	80091ca <HAL_UART_IRQHandler+0x642>
    return;
 80091c8:	bf00      	nop
  }
}
 80091ca:	37e8      	adds	r7, #232	@ 0xe8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr

080091e2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bc80      	pop	{r7}
 80091f2:	4770      	bx	lr

080091f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	bc80      	pop	{r7}
 8009208:	4770      	bx	lr
	...

0800920c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800920c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009210:	b08c      	sub	sp, #48	@ 0x30
 8009212:	af00      	add	r7, sp, #0
 8009214:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	431a      	orrs	r2, r3
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	431a      	orrs	r2, r3
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	4313      	orrs	r3, r2
 8009232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	4b94      	ldr	r3, [pc, #592]	@ (800948c <UART_SetConfig+0x280>)
 800923c:	4013      	ands	r3, r2
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	6812      	ldr	r2, [r2, #0]
 8009242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009244:	430b      	orrs	r3, r1
 8009246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a89      	ldr	r2, [pc, #548]	@ (8009490 <UART_SetConfig+0x284>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d004      	beq.n	8009278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009274:	4313      	orrs	r3, r2
 8009276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009282:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800928c:	430b      	orrs	r3, r1
 800928e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009296:	f023 010f 	bic.w	r1, r3, #15
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a7a      	ldr	r2, [pc, #488]	@ (8009494 <UART_SetConfig+0x288>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d127      	bne.n	8009300 <UART_SetConfig+0xf4>
 80092b0:	2003      	movs	r0, #3
 80092b2:	f7ff fb2b 	bl	800890c <LL_RCC_GetUSARTClockSource>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d81b      	bhi.n	80092f8 <UART_SetConfig+0xec>
 80092c0:	a201      	add	r2, pc, #4	@ (adr r2, 80092c8 <UART_SetConfig+0xbc>)
 80092c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c6:	bf00      	nop
 80092c8:	080092d9 	.word	0x080092d9
 80092cc:	080092e9 	.word	0x080092e9
 80092d0:	080092e1 	.word	0x080092e1
 80092d4:	080092f1 	.word	0x080092f1
 80092d8:	2301      	movs	r3, #1
 80092da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092de:	e080      	b.n	80093e2 <UART_SetConfig+0x1d6>
 80092e0:	2302      	movs	r3, #2
 80092e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092e6:	e07c      	b.n	80093e2 <UART_SetConfig+0x1d6>
 80092e8:	2304      	movs	r3, #4
 80092ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ee:	e078      	b.n	80093e2 <UART_SetConfig+0x1d6>
 80092f0:	2308      	movs	r3, #8
 80092f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092f6:	e074      	b.n	80093e2 <UART_SetConfig+0x1d6>
 80092f8:	2310      	movs	r3, #16
 80092fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092fe:	e070      	b.n	80093e2 <UART_SetConfig+0x1d6>
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a64      	ldr	r2, [pc, #400]	@ (8009498 <UART_SetConfig+0x28c>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d138      	bne.n	800937c <UART_SetConfig+0x170>
 800930a:	200c      	movs	r0, #12
 800930c:	f7ff fafe 	bl	800890c <LL_RCC_GetUSARTClockSource>
 8009310:	4603      	mov	r3, r0
 8009312:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8009316:	2b0c      	cmp	r3, #12
 8009318:	d82c      	bhi.n	8009374 <UART_SetConfig+0x168>
 800931a:	a201      	add	r2, pc, #4	@ (adr r2, 8009320 <UART_SetConfig+0x114>)
 800931c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009320:	08009355 	.word	0x08009355
 8009324:	08009375 	.word	0x08009375
 8009328:	08009375 	.word	0x08009375
 800932c:	08009375 	.word	0x08009375
 8009330:	08009365 	.word	0x08009365
 8009334:	08009375 	.word	0x08009375
 8009338:	08009375 	.word	0x08009375
 800933c:	08009375 	.word	0x08009375
 8009340:	0800935d 	.word	0x0800935d
 8009344:	08009375 	.word	0x08009375
 8009348:	08009375 	.word	0x08009375
 800934c:	08009375 	.word	0x08009375
 8009350:	0800936d 	.word	0x0800936d
 8009354:	2300      	movs	r3, #0
 8009356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800935a:	e042      	b.n	80093e2 <UART_SetConfig+0x1d6>
 800935c:	2302      	movs	r3, #2
 800935e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009362:	e03e      	b.n	80093e2 <UART_SetConfig+0x1d6>
 8009364:	2304      	movs	r3, #4
 8009366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800936a:	e03a      	b.n	80093e2 <UART_SetConfig+0x1d6>
 800936c:	2308      	movs	r3, #8
 800936e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009372:	e036      	b.n	80093e2 <UART_SetConfig+0x1d6>
 8009374:	2310      	movs	r3, #16
 8009376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800937a:	e032      	b.n	80093e2 <UART_SetConfig+0x1d6>
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a43      	ldr	r2, [pc, #268]	@ (8009490 <UART_SetConfig+0x284>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d12a      	bne.n	80093dc <UART_SetConfig+0x1d0>
 8009386:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800938a:	f7ff fad1 	bl	8008930 <LL_RCC_GetLPUARTClockSource>
 800938e:	4603      	mov	r3, r0
 8009390:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009394:	d01a      	beq.n	80093cc <UART_SetConfig+0x1c0>
 8009396:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800939a:	d81b      	bhi.n	80093d4 <UART_SetConfig+0x1c8>
 800939c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093a0:	d00c      	beq.n	80093bc <UART_SetConfig+0x1b0>
 80093a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093a6:	d815      	bhi.n	80093d4 <UART_SetConfig+0x1c8>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <UART_SetConfig+0x1a8>
 80093ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093b0:	d008      	beq.n	80093c4 <UART_SetConfig+0x1b8>
 80093b2:	e00f      	b.n	80093d4 <UART_SetConfig+0x1c8>
 80093b4:	2300      	movs	r3, #0
 80093b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ba:	e012      	b.n	80093e2 <UART_SetConfig+0x1d6>
 80093bc:	2302      	movs	r3, #2
 80093be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093c2:	e00e      	b.n	80093e2 <UART_SetConfig+0x1d6>
 80093c4:	2304      	movs	r3, #4
 80093c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ca:	e00a      	b.n	80093e2 <UART_SetConfig+0x1d6>
 80093cc:	2308      	movs	r3, #8
 80093ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093d2:	e006      	b.n	80093e2 <UART_SetConfig+0x1d6>
 80093d4:	2310      	movs	r3, #16
 80093d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093da:	e002      	b.n	80093e2 <UART_SetConfig+0x1d6>
 80093dc:	2310      	movs	r3, #16
 80093de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009490 <UART_SetConfig+0x284>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	f040 80a4 	bne.w	8009536 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80093f2:	2b08      	cmp	r3, #8
 80093f4:	d823      	bhi.n	800943e <UART_SetConfig+0x232>
 80093f6:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0x1f0>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	08009421 	.word	0x08009421
 8009400:	0800943f 	.word	0x0800943f
 8009404:	08009429 	.word	0x08009429
 8009408:	0800943f 	.word	0x0800943f
 800940c:	0800942f 	.word	0x0800942f
 8009410:	0800943f 	.word	0x0800943f
 8009414:	0800943f 	.word	0x0800943f
 8009418:	0800943f 	.word	0x0800943f
 800941c:	08009437 	.word	0x08009437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009420:	f7fd ff3a 	bl	8007298 <HAL_RCC_GetPCLK1Freq>
 8009424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009426:	e010      	b.n	800944a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009428:	4b1c      	ldr	r3, [pc, #112]	@ (800949c <UART_SetConfig+0x290>)
 800942a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800942c:	e00d      	b.n	800944a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800942e:	f7fd fe7f 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 8009432:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009434:	e009      	b.n	800944a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800943a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800943c:	e005      	b.n	800944a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 8137 	beq.w	80096c0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009456:	4a12      	ldr	r2, [pc, #72]	@ (80094a0 <UART_SetConfig+0x294>)
 8009458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800945c:	461a      	mov	r2, r3
 800945e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009460:	fbb3 f3f2 	udiv	r3, r3, r2
 8009464:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	4613      	mov	r3, r2
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	4413      	add	r3, r2
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	429a      	cmp	r2, r3
 8009474:	d305      	bcc.n	8009482 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	429a      	cmp	r2, r3
 8009480:	d910      	bls.n	80094a4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009488:	e11a      	b.n	80096c0 <UART_SetConfig+0x4b4>
 800948a:	bf00      	nop
 800948c:	cfff69f3 	.word	0xcfff69f3
 8009490:	40008000 	.word	0x40008000
 8009494:	40013800 	.word	0x40013800
 8009498:	40004400 	.word	0x40004400
 800949c:	00f42400 	.word	0x00f42400
 80094a0:	0801db20 	.word	0x0801db20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	2200      	movs	r2, #0
 80094a8:	60bb      	str	r3, [r7, #8]
 80094aa:	60fa      	str	r2, [r7, #12]
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	4a8e      	ldr	r2, [pc, #568]	@ (80096ec <UART_SetConfig+0x4e0>)
 80094b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2200      	movs	r2, #0
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	607a      	str	r2, [r7, #4]
 80094be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094c6:	f7f7 fb6f 	bl	8000ba8 <__aeabi_uldivmod>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4610      	mov	r0, r2
 80094d0:	4619      	mov	r1, r3
 80094d2:	f04f 0200 	mov.w	r2, #0
 80094d6:	f04f 0300 	mov.w	r3, #0
 80094da:	020b      	lsls	r3, r1, #8
 80094dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094e0:	0202      	lsls	r2, r0, #8
 80094e2:	6979      	ldr	r1, [r7, #20]
 80094e4:	6849      	ldr	r1, [r1, #4]
 80094e6:	0849      	lsrs	r1, r1, #1
 80094e8:	2000      	movs	r0, #0
 80094ea:	460c      	mov	r4, r1
 80094ec:	4605      	mov	r5, r0
 80094ee:	eb12 0804 	adds.w	r8, r2, r4
 80094f2:	eb43 0905 	adc.w	r9, r3, r5
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	469a      	mov	sl, r3
 80094fe:	4693      	mov	fp, r2
 8009500:	4652      	mov	r2, sl
 8009502:	465b      	mov	r3, fp
 8009504:	4640      	mov	r0, r8
 8009506:	4649      	mov	r1, r9
 8009508:	f7f7 fb4e 	bl	8000ba8 <__aeabi_uldivmod>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	4613      	mov	r3, r2
 8009512:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800951a:	d308      	bcc.n	800952e <UART_SetConfig+0x322>
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009522:	d204      	bcs.n	800952e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6a3a      	ldr	r2, [r7, #32]
 800952a:	60da      	str	r2, [r3, #12]
 800952c:	e0c8      	b.n	80096c0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009534:	e0c4      	b.n	80096c0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800953e:	d167      	bne.n	8009610 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009540:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009544:	2b08      	cmp	r3, #8
 8009546:	d828      	bhi.n	800959a <UART_SetConfig+0x38e>
 8009548:	a201      	add	r2, pc, #4	@ (adr r2, 8009550 <UART_SetConfig+0x344>)
 800954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954e:	bf00      	nop
 8009550:	08009575 	.word	0x08009575
 8009554:	0800957d 	.word	0x0800957d
 8009558:	08009585 	.word	0x08009585
 800955c:	0800959b 	.word	0x0800959b
 8009560:	0800958b 	.word	0x0800958b
 8009564:	0800959b 	.word	0x0800959b
 8009568:	0800959b 	.word	0x0800959b
 800956c:	0800959b 	.word	0x0800959b
 8009570:	08009593 	.word	0x08009593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009574:	f7fd fe90 	bl	8007298 <HAL_RCC_GetPCLK1Freq>
 8009578:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800957a:	e014      	b.n	80095a6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800957c:	f7fd fe9e 	bl	80072bc <HAL_RCC_GetPCLK2Freq>
 8009580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009582:	e010      	b.n	80095a6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009584:	4b5a      	ldr	r3, [pc, #360]	@ (80096f0 <UART_SetConfig+0x4e4>)
 8009586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009588:	e00d      	b.n	80095a6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800958a:	f7fd fdd1 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 800958e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009590:	e009      	b.n	80095a6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009598:	e005      	b.n	80095a6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 8089 	beq.w	80096c0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b2:	4a4e      	ldr	r2, [pc, #312]	@ (80096ec <UART_SetConfig+0x4e0>)
 80095b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c0:	005a      	lsls	r2, r3, #1
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	085b      	lsrs	r3, r3, #1
 80095c8:	441a      	add	r2, r3
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	2b0f      	cmp	r3, #15
 80095d8:	d916      	bls.n	8009608 <UART_SetConfig+0x3fc>
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095e0:	d212      	bcs.n	8009608 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	f023 030f 	bic.w	r3, r3, #15
 80095ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	085b      	lsrs	r3, r3, #1
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	8bfb      	ldrh	r3, [r7, #30]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	8bfa      	ldrh	r2, [r7, #30]
 8009604:	60da      	str	r2, [r3, #12]
 8009606:	e05b      	b.n	80096c0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800960e:	e057      	b.n	80096c0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009610:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009614:	2b08      	cmp	r3, #8
 8009616:	d828      	bhi.n	800966a <UART_SetConfig+0x45e>
 8009618:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <UART_SetConfig+0x414>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009645 	.word	0x08009645
 8009624:	0800964d 	.word	0x0800964d
 8009628:	08009655 	.word	0x08009655
 800962c:	0800966b 	.word	0x0800966b
 8009630:	0800965b 	.word	0x0800965b
 8009634:	0800966b 	.word	0x0800966b
 8009638:	0800966b 	.word	0x0800966b
 800963c:	0800966b 	.word	0x0800966b
 8009640:	08009663 	.word	0x08009663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009644:	f7fd fe28 	bl	8007298 <HAL_RCC_GetPCLK1Freq>
 8009648:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800964a:	e014      	b.n	8009676 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800964c:	f7fd fe36 	bl	80072bc <HAL_RCC_GetPCLK2Freq>
 8009650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009652:	e010      	b.n	8009676 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009654:	4b26      	ldr	r3, [pc, #152]	@ (80096f0 <UART_SetConfig+0x4e4>)
 8009656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009658:	e00d      	b.n	8009676 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800965a:	f7fd fd69 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 800965e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009660:	e009      	b.n	8009676 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009668:	e005      	b.n	8009676 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800966a:	2300      	movs	r3, #0
 800966c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009674:	bf00      	nop
    }

    if (pclk != 0U)
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	2b00      	cmp	r3, #0
 800967a:	d021      	beq.n	80096c0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009680:	4a1a      	ldr	r2, [pc, #104]	@ (80096ec <UART_SetConfig+0x4e0>)
 8009682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009686:	461a      	mov	r2, r3
 8009688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968a:	fbb3 f2f2 	udiv	r2, r3, r2
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	085b      	lsrs	r3, r3, #1
 8009694:	441a      	add	r2, r3
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	fbb2 f3f3 	udiv	r3, r2, r3
 800969e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	2b0f      	cmp	r3, #15
 80096a4:	d909      	bls.n	80096ba <UART_SetConfig+0x4ae>
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ac:	d205      	bcs.n	80096ba <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60da      	str	r2, [r3, #12]
 80096b8:	e002      	b.n	80096c0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2200      	movs	r2, #0
 80096d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2200      	movs	r2, #0
 80096da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80096dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3730      	adds	r7, #48	@ 0x30
 80096e4:	46bd      	mov	sp, r7
 80096e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096ea:	bf00      	nop
 80096ec:	0801db20 	.word	0x0801db20
 80096f0:	00f42400 	.word	0x00f42400

080096f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009700:	f003 0308 	and.w	r3, r3, #8
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00a      	beq.n	800971e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009788:	f003 0310 	and.w	r3, r3, #16
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00a      	beq.n	80097a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00a      	beq.n	80097c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	430a      	orrs	r2, r1
 80097c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01a      	beq.n	800980a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097f2:	d10a      	bne.n	800980a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	605a      	str	r2, [r3, #4]
  }
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	bc80      	pop	{r7}
 8009834:	4770      	bx	lr

08009836 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b086      	sub	sp, #24
 800983a:	af02      	add	r7, sp, #8
 800983c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009846:	f7f8 fdd1 	bl	80023ec <HAL_GetTick>
 800984a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0308 	and.w	r3, r3, #8
 8009856:	2b08      	cmp	r3, #8
 8009858:	d10e      	bne.n	8009878 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800985a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f832 	bl	80098d2 <UART_WaitOnFlagUntilTimeout>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e028      	b.n	80098ca <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0304 	and.w	r3, r3, #4
 8009882:	2b04      	cmp	r3, #4
 8009884:	d10e      	bne.n	80098a4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009886:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f81c 	bl	80098d2 <UART_WaitOnFlagUntilTimeout>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e012      	b.n	80098ca <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2220      	movs	r2, #32
 80098b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b09c      	sub	sp, #112	@ 0x70
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	603b      	str	r3, [r7, #0]
 80098de:	4613      	mov	r3, r2
 80098e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098e2:	e0af      	b.n	8009a44 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ea:	f000 80ab 	beq.w	8009a44 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ee:	f7f8 fd7d 	bl	80023ec <HAL_GetTick>
 80098f2:	4602      	mov	r2, r0
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d302      	bcc.n	8009904 <UART_WaitOnFlagUntilTimeout+0x32>
 80098fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009900:	2b00      	cmp	r3, #0
 8009902:	d140      	bne.n	8009986 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009914:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009918:	667b      	str	r3, [r7, #100]	@ 0x64
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009922:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009924:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009928:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800992a:	e841 2300 	strex	r3, r2, [r1]
 800992e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e6      	bne.n	8009904 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3308      	adds	r3, #8
 800993c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009940:	e853 3f00 	ldrex	r3, [r3]
 8009944:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009948:	f023 0301 	bic.w	r3, r3, #1
 800994c:	663b      	str	r3, [r7, #96]	@ 0x60
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3308      	adds	r3, #8
 8009954:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009956:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009958:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800995c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e5      	bne.n	8009936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2220      	movs	r2, #32
 800996e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2220      	movs	r2, #32
 8009976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e06f      	b.n	8009a66 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d057      	beq.n	8009a44 <UART_WaitOnFlagUntilTimeout+0x172>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b80      	cmp	r3, #128	@ 0x80
 8009998:	d054      	beq.n	8009a44 <UART_WaitOnFlagUntilTimeout+0x172>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b40      	cmp	r3, #64	@ 0x40
 800999e:	d051      	beq.n	8009a44 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099ae:	d149      	bne.n	8009a44 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80099ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099da:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80099e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e6      	bne.n	80099ba <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3308      	adds	r3, #8
 80099f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	613b      	str	r3, [r7, #16]
   return(result);
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f023 0301 	bic.w	r3, r3, #1
 8009a02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3308      	adds	r3, #8
 8009a0a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009a0c:	623a      	str	r2, [r7, #32]
 8009a0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	69f9      	ldr	r1, [r7, #28]
 8009a12:	6a3a      	ldr	r2, [r7, #32]
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e5      	bne.n	80099ec <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e010      	b.n	8009a66 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	69da      	ldr	r2, [r3, #28]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	bf0c      	ite	eq
 8009a54:	2301      	moveq	r3, #1
 8009a56:	2300      	movne	r3, #0
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	f43f af40 	beq.w	80098e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3770      	adds	r7, #112	@ 0x70
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b0a3      	sub	sp, #140	@ 0x8c
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	88fa      	ldrh	r2, [r7, #6]
 8009a88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	88fa      	ldrh	r2, [r7, #6]
 8009a90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aa2:	d10e      	bne.n	8009ac2 <UART_Start_Receive_IT+0x52>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d105      	bne.n	8009ab8 <UART_Start_Receive_IT+0x48>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009ab2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ab6:	e02d      	b.n	8009b14 <UART_Start_Receive_IT+0xa4>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	22ff      	movs	r2, #255	@ 0xff
 8009abc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ac0:	e028      	b.n	8009b14 <UART_Start_Receive_IT+0xa4>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10d      	bne.n	8009ae6 <UART_Start_Receive_IT+0x76>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d104      	bne.n	8009adc <UART_Start_Receive_IT+0x6c>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	22ff      	movs	r2, #255	@ 0xff
 8009ad6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ada:	e01b      	b.n	8009b14 <UART_Start_Receive_IT+0xa4>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	227f      	movs	r2, #127	@ 0x7f
 8009ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ae4:	e016      	b.n	8009b14 <UART_Start_Receive_IT+0xa4>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aee:	d10d      	bne.n	8009b0c <UART_Start_Receive_IT+0x9c>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d104      	bne.n	8009b02 <UART_Start_Receive_IT+0x92>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	227f      	movs	r2, #127	@ 0x7f
 8009afc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b00:	e008      	b.n	8009b14 <UART_Start_Receive_IT+0xa4>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	223f      	movs	r2, #63	@ 0x3f
 8009b06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009b0a:	e003      	b.n	8009b14 <UART_Start_Receive_IT+0xa4>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2222      	movs	r2, #34	@ 0x22
 8009b20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3308      	adds	r3, #8
 8009b2a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b36:	f043 0301 	orr.w	r3, r3, #1
 8009b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3308      	adds	r3, #8
 8009b44:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009b48:	673a      	str	r2, [r7, #112]	@ 0x70
 8009b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009b4e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009b56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e3      	bne.n	8009b24 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b64:	d14f      	bne.n	8009c06 <UART_Start_Receive_IT+0x196>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b6c:	88fa      	ldrh	r2, [r7, #6]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d349      	bcc.n	8009c06 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b7a:	d107      	bne.n	8009b8c <UART_Start_Receive_IT+0x11c>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d103      	bne.n	8009b8c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	4a46      	ldr	r2, [pc, #280]	@ (8009ca0 <UART_Start_Receive_IT+0x230>)
 8009b88:	675a      	str	r2, [r3, #116]	@ 0x74
 8009b8a:	e002      	b.n	8009b92 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4a45      	ldr	r2, [pc, #276]	@ (8009ca4 <UART_Start_Receive_IT+0x234>)
 8009b90:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d01a      	beq.n	8009bd0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ba2:	e853 3f00 	ldrex	r3, [r3]
 8009ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bbe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009bc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009bc4:	e841 2300 	strex	r3, r2, [r1]
 8009bc8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1e4      	bne.n	8009b9a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bda:	e853 3f00 	ldrex	r3, [r3]
 8009bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3308      	adds	r3, #8
 8009bee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009bf0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009bf2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bf8:	e841 2300 	strex	r3, r2, [r1]
 8009bfc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e5      	bne.n	8009bd0 <UART_Start_Receive_IT+0x160>
 8009c04:	e046      	b.n	8009c94 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c0e:	d107      	bne.n	8009c20 <UART_Start_Receive_IT+0x1b0>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d103      	bne.n	8009c20 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4a23      	ldr	r2, [pc, #140]	@ (8009ca8 <UART_Start_Receive_IT+0x238>)
 8009c1c:	675a      	str	r2, [r3, #116]	@ 0x74
 8009c1e:	e002      	b.n	8009c26 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4a22      	ldr	r2, [pc, #136]	@ (8009cac <UART_Start_Receive_IT+0x23c>)
 8009c24:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d019      	beq.n	8009c62 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009c42:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c4e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c54:	e841 2300 	strex	r3, r2, [r1]
 8009c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e6      	bne.n	8009c2e <UART_Start_Receive_IT+0x1be>
 8009c60:	e018      	b.n	8009c94 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f043 0320 	orr.w	r3, r3, #32
 8009c76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c80:	623b      	str	r3, [r7, #32]
 8009c82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	69f9      	ldr	r1, [r7, #28]
 8009c86:	6a3a      	ldr	r2, [r7, #32]
 8009c88:	e841 2300 	strex	r3, r2, [r1]
 8009c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e6      	bne.n	8009c62 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	378c      	adds	r7, #140	@ 0x8c
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bc80      	pop	{r7}
 8009c9e:	4770      	bx	lr
 8009ca0:	0800a685 	.word	0x0800a685
 8009ca4:	0800a325 	.word	0x0800a325
 8009ca8:	0800a16d 	.word	0x0800a16d
 8009cac:	08009fb5 	.word	0x08009fb5

08009cb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b08f      	sub	sp, #60	@ 0x3c
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cd8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e6      	bne.n	8009cb8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3308      	adds	r3, #8
 8009d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d0a:	61ba      	str	r2, [r7, #24]
 8009d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	6979      	ldr	r1, [r7, #20]
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	613b      	str	r3, [r7, #16]
   return(result);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e5      	bne.n	8009cea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009d26:	bf00      	nop
 8009d28:	373c      	adds	r7, #60	@ 0x3c
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bc80      	pop	{r7}
 8009d2e:	4770      	bx	lr

08009d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b095      	sub	sp, #84	@ 0x54
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e6      	bne.n	8009d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3308      	adds	r3, #8
 8009d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d80:	f023 0301 	bic.w	r3, r3, #1
 8009d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e3      	bne.n	8009d6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d118      	bne.n	8009ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	f023 0310 	bic.w	r3, r3, #16
 8009dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dcc:	6979      	ldr	r1, [r7, #20]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	e841 2300 	strex	r3, r2, [r1]
 8009dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e6      	bne.n	8009daa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009df0:	bf00      	nop
 8009df2:	3754      	adds	r7, #84	@ 0x54
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bc80      	pop	{r7}
 8009df8:	4770      	bx	lr

08009dfa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b090      	sub	sp, #64	@ 0x40
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d137      	bne.n	8009e86 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3308      	adds	r3, #8
 8009e24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e28:	e853 3f00 	ldrex	r3, [r3]
 8009e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e5      	bne.n	8009e1e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	69b9      	ldr	r1, [r7, #24]
 8009e76:	69fa      	ldr	r2, [r7, #28]
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e6      	bne.n	8009e52 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e84:	e002      	b.n	8009e8c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009e86:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009e88:	f7f9 f814 	bl	8002eb4 <HAL_UART_TxCpltCallback>
}
 8009e8c:	bf00      	nop
 8009e8e:	3740      	adds	r7, #64	@ 0x40
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7ff f994 	bl	80091d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ea8:	bf00      	nop
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ec4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ecc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ed8:	2b80      	cmp	r3, #128	@ 0x80
 8009eda:	d109      	bne.n	8009ef0 <UART_DMAError+0x40>
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	2b21      	cmp	r3, #33	@ 0x21
 8009ee0:	d106      	bne.n	8009ef0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009eea:	6978      	ldr	r0, [r7, #20]
 8009eec:	f7ff fee0 	bl	8009cb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009efa:	2b40      	cmp	r3, #64	@ 0x40
 8009efc:	d109      	bne.n	8009f12 <UART_DMAError+0x62>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b22      	cmp	r3, #34	@ 0x22
 8009f02:	d106      	bne.n	8009f12 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009f0c:	6978      	ldr	r0, [r7, #20]
 8009f0e:	f7ff ff0f 	bl	8009d30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f18:	f043 0210 	orr.w	r2, r3, #16
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f22:	6978      	ldr	r0, [r7, #20]
 8009f24:	f7ff f95d 	bl	80091e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f28:	bf00      	nop
 8009f2a:	3718      	adds	r7, #24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7ff f947 	bl	80091e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f54:	bf00      	nop
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	e853 3f00 	ldrex	r3, [r3]
 8009f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f78:	61fb      	str	r3, [r7, #28]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	61bb      	str	r3, [r7, #24]
 8009f84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	6979      	ldr	r1, [r7, #20]
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	e841 2300 	strex	r3, r2, [r1]
 8009f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1e6      	bne.n	8009f64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7f8 ff85 	bl	8002eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009faa:	bf00      	nop
 8009fac:	3720      	adds	r7, #32
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b09c      	sub	sp, #112	@ 0x70
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009fc2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fcc:	2b22      	cmp	r3, #34	@ 0x22
 8009fce:	f040 80be 	bne.w	800a14e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009fdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009fe0:	b2d9      	uxtb	r1, r3
 8009fe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fec:	400a      	ands	r2, r1
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a002:	b29b      	uxth	r3, r3
 800a004:	3b01      	subs	r3, #1
 800a006:	b29a      	uxth	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a014:	b29b      	uxth	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	f040 80a1 	bne.w	800a15e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a024:	e853 3f00 	ldrex	r3, [r3]
 800a028:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a02a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a02c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a030:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a03a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a03c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a040:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a042:	e841 2300 	strex	r3, r2, [r1]
 800a046:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e6      	bne.n	800a01c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3308      	adds	r3, #8
 800a054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a060:	f023 0301 	bic.w	r3, r3, #1
 800a064:	667b      	str	r3, [r7, #100]	@ 0x64
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3308      	adds	r3, #8
 800a06c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a06e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a070:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a072:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a074:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a076:	e841 2300 	strex	r3, r2, [r1]
 800a07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1e5      	bne.n	800a04e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2220      	movs	r2, #32
 800a086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a33      	ldr	r2, [pc, #204]	@ (800a168 <UART_RxISR_8BIT+0x1b4>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d01f      	beq.n	800a0e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d018      	beq.n	800a0e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b6:	e853 3f00 	ldrex	r3, [r3]
 800a0ba:	623b      	str	r3, [r7, #32]
   return(result);
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a0c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0d4:	e841 2300 	strex	r3, r2, [r1]
 800a0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1e6      	bne.n	800a0ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d12e      	bne.n	800a146 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	e853 3f00 	ldrex	r3, [r3]
 800a0fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f023 0310 	bic.w	r3, r3, #16
 800a102:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a10c:	61fb      	str	r3, [r7, #28]
 800a10e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	69b9      	ldr	r1, [r7, #24]
 800a112:	69fa      	ldr	r2, [r7, #28]
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	617b      	str	r3, [r7, #20]
   return(result);
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e6      	bne.n	800a0ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	f003 0310 	and.w	r3, r3, #16
 800a12a:	2b10      	cmp	r3, #16
 800a12c:	d103      	bne.n	800a136 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2210      	movs	r2, #16
 800a134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff f858 	bl	80091f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a144:	e00b      	b.n	800a15e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7f8 feca 	bl	8002ee0 <HAL_UART_RxCpltCallback>
}
 800a14c:	e007      	b.n	800a15e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	699a      	ldr	r2, [r3, #24]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f042 0208 	orr.w	r2, r2, #8
 800a15c:	619a      	str	r2, [r3, #24]
}
 800a15e:	bf00      	nop
 800a160:	3770      	adds	r7, #112	@ 0x70
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	40008000 	.word	0x40008000

0800a16c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b09c      	sub	sp, #112	@ 0x70
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a17a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a184:	2b22      	cmp	r3, #34	@ 0x22
 800a186:	f040 80be 	bne.w	800a306 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a190:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a198:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a19a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a19e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ae:	1c9a      	adds	r2, r3, #2
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f040 80a1 	bne.w	800a316 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a1e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a1f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e6      	bne.n	800a1d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3308      	adds	r3, #8
 800a20c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a210:	e853 3f00 	ldrex	r3, [r3]
 800a214:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a218:	f023 0301 	bic.w	r3, r3, #1
 800a21c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3308      	adds	r3, #8
 800a224:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a226:	643a      	str	r2, [r7, #64]	@ 0x40
 800a228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a22c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a22e:	e841 2300 	strex	r3, r2, [r1]
 800a232:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1e5      	bne.n	800a206 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a33      	ldr	r2, [pc, #204]	@ (800a320 <UART_RxISR_16BIT+0x1b4>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d01f      	beq.n	800a298 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d018      	beq.n	800a298 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	61fb      	str	r3, [r7, #28]
   return(result);
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a27a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a286:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a28a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e6      	bne.n	800a266 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d12e      	bne.n	800a2fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f023 0310 	bic.w	r3, r3, #16
 800a2ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2c4:	61bb      	str	r3, [r7, #24]
 800a2c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6979      	ldr	r1, [r7, #20]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e6      	bne.n	800a2a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	f003 0310 	and.w	r3, r3, #16
 800a2e2:	2b10      	cmp	r3, #16
 800a2e4:	d103      	bne.n	800a2ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2210      	movs	r2, #16
 800a2ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7fe ff7c 	bl	80091f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2fc:	e00b      	b.n	800a316 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7f8 fdee 	bl	8002ee0 <HAL_UART_RxCpltCallback>
}
 800a304:	e007      	b.n	800a316 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	699a      	ldr	r2, [r3, #24]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f042 0208 	orr.w	r2, r2, #8
 800a314:	619a      	str	r2, [r3, #24]
}
 800a316:	bf00      	nop
 800a318:	3770      	adds	r7, #112	@ 0x70
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	40008000 	.word	0x40008000

0800a324 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b0ac      	sub	sp, #176	@ 0xb0
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a332:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a35a:	2b22      	cmp	r3, #34	@ 0x22
 800a35c:	f040 8182 	bne.w	800a664 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a366:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a36a:	e125      	b.n	800a5b8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a372:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a376:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a37a:	b2d9      	uxtb	r1, r3
 800a37c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a380:	b2da      	uxtb	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a386:	400a      	ands	r2, r1
 800a388:	b2d2      	uxtb	r2, r2
 800a38a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a3b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d053      	beq.n	800a466 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d011      	beq.n	800a3ee <UART_RxISR_8BIT_FIFOEN+0xca>
 800a3ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00b      	beq.n	800a3ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3e4:	f043 0201 	orr.w	r2, r3, #1
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d011      	beq.n	800a41e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a3fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00b      	beq.n	800a41e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2202      	movs	r2, #2
 800a40c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a414:	f043 0204 	orr.w	r2, r3, #4
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a41e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a422:	f003 0304 	and.w	r3, r3, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	d011      	beq.n	800a44e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a42a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a42e:	f003 0301 	and.w	r3, r3, #1
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00b      	beq.n	800a44e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2204      	movs	r2, #4
 800a43c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a444:	f043 0202 	orr.w	r2, r3, #2
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a454:	2b00      	cmp	r3, #0
 800a456:	d006      	beq.n	800a466 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7fe fec2 	bl	80091e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f040 80a2 	bne.w	800a5b8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	461a      	mov	r2, r3
 800a492:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a496:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a498:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a49c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a49e:	e841 2300 	strex	r3, r2, [r1]
 800a4a2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a4a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e4      	bne.n	800a474 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4b4:	e853 3f00 	ldrex	r3, [r3]
 800a4b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a4ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4c0:	f023 0301 	bic.w	r3, r3, #1
 800a4c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a4d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a4d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a4d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a4e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e1      	bne.n	800a4aa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a5f      	ldr	r2, [pc, #380]	@ (800a67c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d021      	beq.n	800a548 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d01a      	beq.n	800a548 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a51a:	e853 3f00 	ldrex	r3, [r3]
 800a51e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a522:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a534:	657b      	str	r3, [r7, #84]	@ 0x54
 800a536:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a53a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e4      	bne.n	800a512 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d130      	bne.n	800a5b2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55e:	e853 3f00 	ldrex	r3, [r3]
 800a562:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a566:	f023 0310 	bic.w	r3, r3, #16
 800a56a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a578:	643b      	str	r3, [r7, #64]	@ 0x40
 800a57a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a57e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a580:	e841 2300 	strex	r3, r2, [r1]
 800a584:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e4      	bne.n	800a556 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	f003 0310 	and.w	r3, r3, #16
 800a596:	2b10      	cmp	r3, #16
 800a598:	d103      	bne.n	800a5a2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2210      	movs	r2, #16
 800a5a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7fe fe22 	bl	80091f4 <HAL_UARTEx_RxEventCallback>
 800a5b0:	e002      	b.n	800a5b8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7f8 fc94 	bl	8002ee0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5b8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d006      	beq.n	800a5ce <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a5c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5c4:	f003 0320 	and.w	r3, r3, #32
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f47f aecf 	bne.w	800a36c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a5d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d049      	beq.n	800a674 <UART_RxISR_8BIT_FIFOEN+0x350>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a5e6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d242      	bcs.n	800a674 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3308      	adds	r3, #8
 800a5f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	e853 3f00 	ldrex	r3, [r3]
 800a5fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3308      	adds	r3, #8
 800a60e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a614:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e3      	bne.n	800a5ee <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a15      	ldr	r2, [pc, #84]	@ (800a680 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a62a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	e853 3f00 	ldrex	r3, [r3]
 800a638:	60bb      	str	r3, [r7, #8]
   return(result);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	f043 0320 	orr.w	r3, r3, #32
 800a640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	461a      	mov	r2, r3
 800a64a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a64e:	61bb      	str	r3, [r7, #24]
 800a650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a652:	6979      	ldr	r1, [r7, #20]
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	e841 2300 	strex	r3, r2, [r1]
 800a65a:	613b      	str	r3, [r7, #16]
   return(result);
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1e4      	bne.n	800a62c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a662:	e007      	b.n	800a674 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699a      	ldr	r2, [r3, #24]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0208 	orr.w	r2, r2, #8
 800a672:	619a      	str	r2, [r3, #24]
}
 800a674:	bf00      	nop
 800a676:	37b0      	adds	r7, #176	@ 0xb0
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	40008000 	.word	0x40008000
 800a680:	08009fb5 	.word	0x08009fb5

0800a684 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b0ae      	sub	sp, #184	@ 0xb8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a692:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69db      	ldr	r3, [r3, #28]
 800a69c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6ba:	2b22      	cmp	r3, #34	@ 0x22
 800a6bc:	f040 8186 	bne.w	800a9cc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a6c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6ca:	e129      	b.n	800a920 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a6de:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a6e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6f4:	1c9a      	adds	r2, r3, #2
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a700:	b29b      	uxth	r3, r3
 800a702:	3b01      	subs	r3, #1
 800a704:	b29a      	uxth	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a71a:	f003 0307 	and.w	r3, r3, #7
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d053      	beq.n	800a7ca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d011      	beq.n	800a752 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a72e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00b      	beq.n	800a752 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2201      	movs	r2, #1
 800a740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a748:	f043 0201 	orr.w	r2, r3, #1
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a756:	f003 0302 	and.w	r3, r3, #2
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d011      	beq.n	800a782 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a75e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00b      	beq.n	800a782 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2202      	movs	r2, #2
 800a770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a778:	f043 0204 	orr.w	r2, r3, #4
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d011      	beq.n	800a7b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a78e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00b      	beq.n	800a7b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2204      	movs	r2, #4
 800a7a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7a8:	f043 0202 	orr.w	r2, r3, #2
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d006      	beq.n	800a7ca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7fe fd10 	bl	80091e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f040 80a4 	bne.w	800a920 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7e0:	e853 3f00 	ldrex	r3, [r3]
 800a7e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a7fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a7fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a800:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a802:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a80c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e2      	bne.n	800a7d8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3308      	adds	r3, #8
 800a818:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a824:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a828:	f023 0301 	bic.w	r3, r3, #1
 800a82c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3308      	adds	r3, #8
 800a836:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a83a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a83c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a840:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a842:	e841 2300 	strex	r3, r2, [r1]
 800a846:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1e1      	bne.n	800a812 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2220      	movs	r2, #32
 800a852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a5f      	ldr	r2, [pc, #380]	@ (800a9e4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d021      	beq.n	800a8b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d01a      	beq.n	800a8b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a882:	e853 3f00 	ldrex	r3, [r3]
 800a886:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a88a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a88e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	461a      	mov	r2, r3
 800a898:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a89c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a89e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a8a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8a4:	e841 2300 	strex	r3, r2, [r1]
 800a8a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a8aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1e4      	bne.n	800a87a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d130      	bne.n	800a91a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c6:	e853 3f00 	ldrex	r3, [r3]
 800a8ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ce:	f023 0310 	bic.w	r3, r3, #16
 800a8d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8e8:	e841 2300 	strex	r3, r2, [r1]
 800a8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1e4      	bne.n	800a8be <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	f003 0310 	and.w	r3, r3, #16
 800a8fe:	2b10      	cmp	r3, #16
 800a900:	d103      	bne.n	800a90a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2210      	movs	r2, #16
 800a908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7fe fc6e 	bl	80091f4 <HAL_UARTEx_RxEventCallback>
 800a918:	e002      	b.n	800a920 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7f8 fae0 	bl	8002ee0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a920:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a924:	2b00      	cmp	r3, #0
 800a926:	d006      	beq.n	800a936 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a928:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a92c:	f003 0320 	and.w	r3, r3, #32
 800a930:	2b00      	cmp	r3, #0
 800a932:	f47f aecb 	bne.w	800a6cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a93c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a940:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a944:	2b00      	cmp	r3, #0
 800a946:	d049      	beq.n	800a9dc <UART_RxISR_16BIT_FIFOEN+0x358>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a94e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a952:	429a      	cmp	r2, r3
 800a954:	d242      	bcs.n	800a9dc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3308      	adds	r3, #8
 800a95c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	623b      	str	r3, [r7, #32]
   return(result);
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a96c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3308      	adds	r3, #8
 800a976:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a97a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a97c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a982:	e841 2300 	strex	r3, r2, [r1]
 800a986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1e3      	bne.n	800a956 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a15      	ldr	r2, [pc, #84]	@ (800a9e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a992:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	e853 3f00 	ldrex	r3, [r3]
 800a9a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f043 0320 	orr.w	r3, r3, #32
 800a9a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9b6:	61fb      	str	r3, [r7, #28]
 800a9b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ba:	69b9      	ldr	r1, [r7, #24]
 800a9bc:	69fa      	ldr	r2, [r7, #28]
 800a9be:	e841 2300 	strex	r3, r2, [r1]
 800a9c2:	617b      	str	r3, [r7, #20]
   return(result);
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1e4      	bne.n	800a994 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9ca:	e007      	b.n	800a9dc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	699a      	ldr	r2, [r3, #24]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f042 0208 	orr.w	r2, r2, #8
 800a9da:	619a      	str	r2, [r3, #24]
}
 800a9dc:	bf00      	nop
 800a9de:	37b8      	adds	r7, #184	@ 0xb8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	40008000 	.word	0x40008000
 800a9e8:	0800a16d 	.word	0x0800a16d

0800a9ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bc80      	pop	{r7}
 800a9fc:	4770      	bx	lr

0800a9fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bc80      	pop	{r7}
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bc80      	pop	{r7}
 800aa20:	4770      	bx	lr

0800aa22 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b088      	sub	sp, #32
 800aa26:	af02      	add	r7, sp, #8
 800aa28:	60f8      	str	r0, [r7, #12]
 800aa2a:	1d3b      	adds	r3, r7, #4
 800aa2c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d101      	bne.n	800aa42 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800aa3e:	2302      	movs	r3, #2
 800aa40:	e046      	b.n	800aad0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2224      	movs	r2, #36	@ 0x24
 800aa4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f022 0201 	bic.w	r2, r2, #1
 800aa60:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d105      	bne.n	800aa88 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800aa7c:	1d3b      	adds	r3, r7, #4
 800aa7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 f90e 	bl	800aca4 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f042 0201 	orr.w	r2, r2, #1
 800aa96:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa98:	f7f7 fca8 	bl	80023ec <HAL_GetTick>
 800aa9c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7fe ff10 	bl	80098d2 <UART_WaitOnFlagUntilTimeout>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	75fb      	strb	r3, [r7, #23]
 800aabc:	e003      	b.n	800aac6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800aace:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800aad8:	b480      	push	{r7}
 800aada:	b089      	sub	sp, #36	@ 0x24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d101      	bne.n	800aaee <HAL_UARTEx_EnableStopMode+0x16>
 800aaea:	2302      	movs	r3, #2
 800aaec:	e021      	b.n	800ab32 <HAL_UARTEx_EnableStopMode+0x5a>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f043 0302 	orr.w	r3, r3, #2
 800ab0a:	61fb      	str	r3, [r7, #28]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	61bb      	str	r3, [r7, #24]
 800ab16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	6979      	ldr	r1, [r7, #20]
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	e841 2300 	strex	r3, r2, [r1]
 800ab20:	613b      	str	r3, [r7, #16]
   return(result);
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e6      	bne.n	800aaf6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3724      	adds	r7, #36	@ 0x24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bc80      	pop	{r7}
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d101      	bne.n	800ab52 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab4e:	2302      	movs	r3, #2
 800ab50:	e027      	b.n	800aba2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2224      	movs	r2, #36	@ 0x24
 800ab5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f022 0201 	bic.w	r2, r2, #1
 800ab78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2220      	movs	r2, #32
 800ab94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bc80      	pop	{r7}
 800abaa:	4770      	bx	lr

0800abac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d101      	bne.n	800abc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e02d      	b.n	800ac20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2224      	movs	r2, #36	@ 0x24
 800abd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f022 0201 	bic.w	r2, r2, #1
 800abea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	430a      	orrs	r2, r1
 800abfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f871 	bl	800ace8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2220      	movs	r2, #32
 800ac12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d101      	bne.n	800ac40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	e02d      	b.n	800ac9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2224      	movs	r2, #36	@ 0x24
 800ac4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0201 	bic.w	r2, r2, #1
 800ac66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	430a      	orrs	r2, r1
 800ac7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f833 	bl	800ace8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	1d3b      	adds	r3, r7, #4
 800acae:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	f023 0210 	bic.w	r2, r3, #16
 800acbc:	893b      	ldrh	r3, [r7, #8]
 800acbe:	4619      	mov	r1, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	430a      	orrs	r2, r1
 800acc6:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800acd2:	7abb      	ldrb	r3, [r7, #10]
 800acd4:	061a      	lsls	r2, r3, #24
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	605a      	str	r2, [r3, #4]
}
 800acde:	bf00      	nop
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr

0800ace8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d108      	bne.n	800ad0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad08:	e031      	b.n	800ad6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad0a:	2308      	movs	r3, #8
 800ad0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad0e:	2308      	movs	r3, #8
 800ad10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	0e5b      	lsrs	r3, r3, #25
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	0f5b      	lsrs	r3, r3, #29
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	f003 0307 	and.w	r3, r3, #7
 800ad30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	7b3a      	ldrb	r2, [r7, #12]
 800ad36:	4910      	ldr	r1, [pc, #64]	@ (800ad78 <UARTEx_SetNbDataToProcess+0x90>)
 800ad38:	5c8a      	ldrb	r2, [r1, r2]
 800ad3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad3e:	7b3a      	ldrb	r2, [r7, #12]
 800ad40:	490e      	ldr	r1, [pc, #56]	@ (800ad7c <UARTEx_SetNbDataToProcess+0x94>)
 800ad42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad44:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	7b7a      	ldrb	r2, [r7, #13]
 800ad54:	4908      	ldr	r1, [pc, #32]	@ (800ad78 <UARTEx_SetNbDataToProcess+0x90>)
 800ad56:	5c8a      	ldrb	r2, [r1, r2]
 800ad58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad5c:	7b7a      	ldrb	r2, [r7, #13]
 800ad5e:	4907      	ldr	r1, [pc, #28]	@ (800ad7c <UARTEx_SetNbDataToProcess+0x94>)
 800ad60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad62:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ad6e:	bf00      	nop
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bc80      	pop	{r7}
 800ad76:	4770      	bx	lr
 800ad78:	0801db38 	.word	0x0801db38
 800ad7c:	0801db40 	.word	0x0801db40

0800ad80 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800ad84:	f7f7 f9d2 	bl	800212c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800ad88:	f000 f820 	bl	800adcc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800ad8c:	bf00      	nop
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295
 800ad98:	f011 fa38 	bl	801c20c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800ad9c:	bf00      	nop
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ada0:	b480      	push	{r7}
 800ada2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ada4:	f3bf 8f4f 	dsb	sy
}
 800ada8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800adaa:	4b06      	ldr	r3, [pc, #24]	@ (800adc4 <__NVIC_SystemReset+0x24>)
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800adb2:	4904      	ldr	r1, [pc, #16]	@ (800adc4 <__NVIC_SystemReset+0x24>)
 800adb4:	4b04      	ldr	r3, [pc, #16]	@ (800adc8 <__NVIC_SystemReset+0x28>)
 800adb6:	4313      	orrs	r3, r2
 800adb8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800adba:	f3bf 8f4f 	dsb	sy
}
 800adbe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800adc0:	bf00      	nop
 800adc2:	e7fd      	b.n	800adc0 <__NVIC_SystemReset+0x20>
 800adc4:	e000ed00 	.word	0xe000ed00
 800adc8:	05fa0004 	.word	0x05fa0004

0800adcc <LoRaWAN_Init>:


/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800add2:	2300      	movs	r3, #0
 800add4:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800add6:	2301      	movs	r3, #1
 800add8:	9302      	str	r3, [sp, #8]
 800adda:	2303      	movs	r3, #3
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	2301      	movs	r3, #1
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	4b59      	ldr	r3, [pc, #356]	@ (800af48 <LoRaWAN_Init+0x17c>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	2100      	movs	r1, #0
 800ade8:	2002      	movs	r0, #2
 800adea:	f011 fe5b 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800adee:	2301      	movs	r3, #1
 800adf0:	9302      	str	r3, [sp, #8]
 800adf2:	2306      	movs	r3, #6
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	2302      	movs	r3, #2
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	4b54      	ldr	r3, [pc, #336]	@ (800af4c <LoRaWAN_Init+0x180>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	2100      	movs	r1, #0
 800ae00:	2002      	movs	r0, #2
 800ae02:	f011 fe4f 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800ae06:	2301      	movs	r3, #1
 800ae08:	9302      	str	r3, [sp, #8]
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	2301      	movs	r3, #1
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	4b4f      	ldr	r3, [pc, #316]	@ (800af50 <LoRaWAN_Init+0x184>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	2100      	movs	r1, #0
 800ae18:	2002      	movs	r0, #2
 800ae1a:	f011 fe43 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800ae1e:	1d3b      	adds	r3, r7, #4
 800ae20:	4619      	mov	r1, r3
 800ae22:	2000      	movs	r0, #0
 800ae24:	f003 fa74 	bl	800e310 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	0e1b      	lsrs	r3, r3, #24
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	461a      	mov	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	0c1b      	lsrs	r3, r3, #16
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	4619      	mov	r1, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	0a1b      	lsrs	r3, r3, #8
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	9302      	str	r3, [sp, #8]
 800ae40:	9101      	str	r1, [sp, #4]
 800ae42:	9200      	str	r2, [sp, #0]
 800ae44:	4b43      	ldr	r3, [pc, #268]	@ (800af54 <LoRaWAN_Init+0x188>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	2100      	movs	r1, #0
 800ae4a:	2002      	movs	r0, #2
 800ae4c:	f011 fe2a 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800ae50:	1d3b      	adds	r3, r7, #4
 800ae52:	4619      	mov	r1, r3
 800ae54:	2001      	movs	r0, #1
 800ae56:	f003 fa5b 	bl	800e310 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	0e1b      	lsrs	r3, r3, #24
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	461a      	mov	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	0c1b      	lsrs	r3, r3, #16
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	4619      	mov	r1, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	0a1b      	lsrs	r3, r3, #8
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	b2c0      	uxtb	r0, r0
 800ae74:	9003      	str	r0, [sp, #12]
 800ae76:	9302      	str	r3, [sp, #8]
 800ae78:	9101      	str	r1, [sp, #4]
 800ae7a:	9200      	str	r2, [sp, #0]
 800ae7c:	4b36      	ldr	r3, [pc, #216]	@ (800af58 <LoRaWAN_Init+0x18c>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2100      	movs	r1, #0
 800ae82:	2002      	movs	r0, #2
 800ae84:	f011 fe0e 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800ae88:	2300      	movs	r3, #0
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	4b33      	ldr	r3, [pc, #204]	@ (800af5c <LoRaWAN_Init+0x190>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800ae94:	4832      	ldr	r0, [pc, #200]	@ (800af60 <LoRaWAN_Init+0x194>)
 800ae96:	f011 fb57 	bl	801c548 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	4b31      	ldr	r3, [pc, #196]	@ (800af64 <LoRaWAN_Init+0x198>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800aea6:	4830      	ldr	r0, [pc, #192]	@ (800af68 <LoRaWAN_Init+0x19c>)
 800aea8:	f011 fb4e 	bl	801c548 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800aeac:	2300      	movs	r3, #0
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	4b2e      	ldr	r3, [pc, #184]	@ (800af6c <LoRaWAN_Init+0x1a0>)
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800aeb8:	482d      	ldr	r0, [pc, #180]	@ (800af70 <LoRaWAN_Init+0x1a4>)
 800aeba:	f011 fb45 	bl	801c548 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800aebe:	2300      	movs	r3, #0
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	4b2c      	ldr	r3, [pc, #176]	@ (800af74 <LoRaWAN_Init+0x1a8>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800aeca:	482b      	ldr	r0, [pc, #172]	@ (800af78 <LoRaWAN_Init+0x1ac>)
 800aecc:	f011 fb3c 	bl	801c548 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800aed0:	4a2a      	ldr	r2, [pc, #168]	@ (800af7c <LoRaWAN_Init+0x1b0>)
 800aed2:	2100      	movs	r1, #0
 800aed4:	2001      	movs	r0, #1
 800aed6:	f011 fa95 	bl	801c404 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800aeda:	4a29      	ldr	r2, [pc, #164]	@ (800af80 <LoRaWAN_Init+0x1b4>)
 800aedc:	2100      	movs	r1, #0
 800aede:	2002      	movs	r0, #2
 800aee0:	f011 fa90 	bl	801c404 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800aee4:	4a27      	ldr	r2, [pc, #156]	@ (800af84 <LoRaWAN_Init+0x1b8>)
 800aee6:	2100      	movs	r1, #0
 800aee8:	2004      	movs	r0, #4
 800aeea:	f011 fa8b 	bl	801c404 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800aeee:	4a26      	ldr	r2, [pc, #152]	@ (800af88 <LoRaWAN_Init+0x1bc>)
 800aef0:	2100      	movs	r1, #0
 800aef2:	2008      	movs	r0, #8
 800aef4:	f011 fa86 	bl	801c404 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800aef8:	f000 fd5a 	bl	800b9b0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800aefc:	4923      	ldr	r1, [pc, #140]	@ (800af8c <LoRaWAN_Init+0x1c0>)
 800aefe:	4824      	ldr	r0, [pc, #144]	@ (800af90 <LoRaWAN_Init+0x1c4>)
 800af00:	f002 fa6c 	bl	800d3dc <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800af04:	4823      	ldr	r0, [pc, #140]	@ (800af94 <LoRaWAN_Init+0x1c8>)
 800af06:	f002 fad7 	bl	800d4b8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800af0a:	4819      	ldr	r0, [pc, #100]	@ (800af70 <LoRaWAN_Init+0x1a4>)
 800af0c:	f011 fb52 	bl	801c5b4 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800af10:	4b21      	ldr	r3, [pc, #132]	@ (800af98 <LoRaWAN_Init+0x1cc>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	4a21      	ldr	r2, [pc, #132]	@ (800af9c <LoRaWAN_Init+0x1d0>)
 800af16:	7812      	ldrb	r2, [r2, #0]
 800af18:	4611      	mov	r1, r2
 800af1a:	4618      	mov	r0, r3
 800af1c:	f002 fc30 	bl	800d780 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800af20:	4b1f      	ldr	r3, [pc, #124]	@ (800afa0 <LoRaWAN_Init+0x1d4>)
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d10b      	bne.n	800af40 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800af28:	4b1e      	ldr	r3, [pc, #120]	@ (800afa4 <LoRaWAN_Init+0x1d8>)
 800af2a:	6819      	ldr	r1, [r3, #0]
 800af2c:	2300      	movs	r3, #0
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	4b1d      	ldr	r3, [pc, #116]	@ (800afa8 <LoRaWAN_Init+0x1dc>)
 800af32:	2200      	movs	r2, #0
 800af34:	481d      	ldr	r0, [pc, #116]	@ (800afac <LoRaWAN_Init+0x1e0>)
 800af36:	f011 fb07 	bl	801c548 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800af3a:	481c      	ldr	r0, [pc, #112]	@ (800afac <LoRaWAN_Init+0x1e0>)
 800af3c:	f011 fb3a 	bl	801c5b4 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	0801d150 	.word	0x0801d150
 800af4c:	0801d174 	.word	0x0801d174
 800af50:	0801d198 	.word	0x0801d198
 800af54:	0801d1bc 	.word	0x0801d1bc
 800af58:	0801d1e0 	.word	0x0801d1e0
 800af5c:	0800b4d1 	.word	0x0800b4d1
 800af60:	200005a0 	.word	0x200005a0
 800af64:	0800b4e3 	.word	0x0800b4e3
 800af68:	200005b8 	.word	0x200005b8
 800af6c:	0800b4f5 	.word	0x0800b4f5
 800af70:	200005d0 	.word	0x200005d0
 800af74:	0800b8b1 	.word	0x0800b8b1
 800af78:	20000494 	.word	0x20000494
 800af7c:	0800d715 	.word	0x0800d715
 800af80:	0800b0dd 	.word	0x0800b0dd
 800af84:	0800b8d5 	.word	0x0800b8d5
 800af88:	0800b831 	.word	0x0800b831
 800af8c:	01030100 	.word	0x01030100
 800af90:	20000024 	.word	0x20000024
 800af94:	20000070 	.word	0x20000070
 800af98:	20000020 	.word	0x20000020
 800af9c:	20000021 	.word	0x20000021
 800afa0:	20000478 	.word	0x20000478
 800afa4:	20000088 	.word	0x20000088
 800afa8:	0800b4ad 	.word	0x0800b4ad
 800afac:	2000047c 	.word	0x2000047c

0800afb0 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800afb0:	b5b0      	push	{r4, r5, r7, lr}
 800afb2:	b08a      	sub	sp, #40	@ 0x28
 800afb4:	af06      	add	r7, sp, #24
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d07b      	beq.n	800b0bc <OnRxData+0x10c>
  {
#if defined(DBG)   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800afc4:	483f      	ldr	r0, [pc, #252]	@ (800b0c4 <OnRxData+0x114>)
 800afc6:	f011 faf5 	bl	801c5b4 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d050      	beq.n	800b074 <OnRxData+0xc4>
    {
      if (appData != NULL)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d04d      	beq.n	800b074 <OnRxData+0xc4>
      {
        RxPort = appData->Port;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d046      	beq.n	800b074 <OnRxData+0xc4>
        {
          switch (appData->Port)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d01f      	beq.n	800b02e <OnRxData+0x7e>
 800afee:	2b03      	cmp	r3, #3
 800aff0:	d13b      	bne.n	800b06a <OnRxData+0xba>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	785b      	ldrb	r3, [r3, #1]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d139      	bne.n	800b06e <OnRxData+0xbe>
              {
                switch (appData->Buffer[0])
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	2b02      	cmp	r3, #2
 800b002:	d00e      	beq.n	800b022 <OnRxData+0x72>
 800b004:	2b02      	cmp	r3, #2
 800b006:	dc10      	bgt.n	800b02a <OnRxData+0x7a>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <OnRxData+0x62>
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d004      	beq.n	800b01a <OnRxData+0x6a>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800b010:	e00b      	b.n	800b02a <OnRxData+0x7a>
                    LmHandlerRequestClass(CLASS_A);
 800b012:	2000      	movs	r0, #0
 800b014:	f002 fd68 	bl	800dae8 <LmHandlerRequestClass>
                    break;
 800b018:	e008      	b.n	800b02c <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_B);
 800b01a:	2001      	movs	r0, #1
 800b01c:	f002 fd64 	bl	800dae8 <LmHandlerRequestClass>
                    break;
 800b020:	e004      	b.n	800b02c <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_C);
 800b022:	2002      	movs	r0, #2
 800b024:	f002 fd60 	bl	800dae8 <LmHandlerRequestClass>
                    break;
 800b028:	e000      	b.n	800b02c <OnRxData+0x7c>
                    break;
 800b02a:	bf00      	nop
                }
              }
              break;
 800b02c:	e01f      	b.n	800b06e <OnRxData+0xbe>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	785b      	ldrb	r3, [r3, #1]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d11d      	bne.n	800b072 <OnRxData+0xc2>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	f003 0301 	and.w	r3, r3, #1
 800b040:	b2da      	uxtb	r2, r3
 800b042:	4b21      	ldr	r3, [pc, #132]	@ (800b0c8 <OnRxData+0x118>)
 800b044:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800b046:	4b20      	ldr	r3, [pc, #128]	@ (800b0c8 <OnRxData+0x118>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d106      	bne.n	800b05c <OnRxData+0xac>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800b04e:	4b1f      	ldr	r3, [pc, #124]	@ (800b0cc <OnRxData+0x11c>)
 800b050:	2200      	movs	r2, #0
 800b052:	2100      	movs	r1, #0
 800b054:	2003      	movs	r0, #3
 800b056:	f011 fd25 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
					#if defined(DBG)   // XXX:
                  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
					#endif
                }
              }
              break;
 800b05a:	e00a      	b.n	800b072 <OnRxData+0xc2>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800b05c:	4b1c      	ldr	r3, [pc, #112]	@ (800b0d0 <OnRxData+0x120>)
 800b05e:	2200      	movs	r2, #0
 800b060:	2100      	movs	r1, #0
 800b062:	2003      	movs	r0, #3
 800b064:	f011 fd1e 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
              break;
 800b068:	e003      	b.n	800b072 <OnRxData+0xc2>

            default:

              break;
 800b06a:	bf00      	nop
 800b06c:	e002      	b.n	800b074 <OnRxData+0xc4>
              break;
 800b06e:	bf00      	nop
 800b070:	e000      	b.n	800b074 <OnRxData+0xc4>
              break;
 800b072:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	7c1b      	ldrb	r3, [r3, #16]
 800b078:	2b05      	cmp	r3, #5
 800b07a:	d81f      	bhi.n	800b0bc <OnRxData+0x10c>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	7bfa      	ldrb	r2, [r7, #15]
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800b088:	460c      	mov	r4, r1
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	7c09      	ldrb	r1, [r1, #16]
 800b08e:	4608      	mov	r0, r1
 800b090:	4910      	ldr	r1, [pc, #64]	@ (800b0d4 <OnRxData+0x124>)
 800b092:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b096:	6838      	ldr	r0, [r7, #0]
 800b098:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800b09c:	4605      	mov	r5, r0
 800b09e:	6838      	ldr	r0, [r7, #0]
 800b0a0:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800b0a4:	9005      	str	r0, [sp, #20]
 800b0a6:	9504      	str	r5, [sp, #16]
 800b0a8:	9103      	str	r1, [sp, #12]
 800b0aa:	9402      	str	r4, [sp, #8]
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	4b09      	ldr	r3, [pc, #36]	@ (800b0d8 <OnRxData+0x128>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	2003      	movs	r0, #3
 800b0b8:	f011 fcf4 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800b0bc:	bf00      	nop
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b0c4:	200005b8 	.word	0x200005b8
 800b0c8:	2000059e 	.word	0x2000059e
 800b0cc:	0801d204 	.word	0x0801d204
 800b0d0:	0801d210 	.word	0x0801d210
 800b0d4:	20000008 	.word	0x20000008
 800b0d8:	0801d21c 	.word	0x0801d21c

0800b0dc <SendTxData>:

static void SendTxData(void)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b091      	sub	sp, #68	@ 0x44
 800b0e0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b0e2:	23ff      	movs	r3, #255	@ 0xff
 800b0e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800b0e8:	f7f7 f850 	bl	800218c <GetBatteryLevel>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	637b      	str	r3, [r7, #52]	@ 0x34

  uint16_t pressure = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	83fb      	strh	r3, [r7, #30]
  uint8_t t_sht=0, rh_sht=0;
 800b112:	2300      	movs	r3, #0
 800b114:	777b      	strb	r3, [r7, #29]
 800b116:	2300      	movs	r3, #0
 800b118:	773b      	strb	r3, [r7, #28]
  uint16_t data_sht=0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	837b      	strh	r3, [r7, #26]

  EnvSensors_Read(&sensor_data);
 800b11e:	463b      	mov	r3, r7
 800b120:	4618      	mov	r0, r3
 800b122:	f7f7 f98d 	bl	8002440 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800b126:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	4b71      	ldr	r3, [pc, #452]	@ (800b2f4 <SendTxData+0x218>)
 800b12e:	2201      	movs	r2, #1
 800b130:	2100      	movs	r1, #0
 800b132:	2002      	movs	r0, #2
 800b134:	f011 fcb6 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7f5 fcee 	bl	8000b1c <__aeabi_f2iz>
 800b140:	4603      	mov	r3, r0
 800b142:	b21b      	sxth	r3, r3
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	4b6c      	ldr	r3, [pc, #432]	@ (800b2f8 <SendTxData+0x21c>)
 800b148:	2201      	movs	r2, #1
 800b14a:	2100      	movs	r1, #0
 800b14c:	2002      	movs	r0, #2
 800b14e:	f011 fca9 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC0 - Temp : %d\r\n", (int16_t)(SYS_GetADC0()));
 800b152:	f7f6 f84b 	bl	80011ec <SYS_GetADC0>
 800b156:	4603      	mov	r3, r0
 800b158:	b21b      	sxth	r3, r3
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	4b67      	ldr	r3, [pc, #412]	@ (800b2fc <SendTxData+0x220>)
 800b15e:	2201      	movs	r2, #1
 800b160:	2100      	movs	r1, #0
 800b162:	2002      	movs	r0, #2
 800b164:	f011 fc9e 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC1 - Out V: %d\r\n", (int16_t)(SYS_GetADC1()));
 800b168:	f7f6 f862 	bl	8001230 <SYS_GetADC1>
 800b16c:	4603      	mov	r3, r0
 800b16e:	b21b      	sxth	r3, r3
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	4b63      	ldr	r3, [pc, #396]	@ (800b300 <SendTxData+0x224>)
 800b174:	2201      	movs	r2, #1
 800b176:	2100      	movs	r1, #0
 800b178:	2002      	movs	r0, #2
 800b17a:	f011 fc93 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC2 - Out A: %d\r\n", (int16_t)(SYS_GetADC2()));
 800b17e:	f7f6 f87b 	bl	8001278 <SYS_GetADC2>
 800b182:	4603      	mov	r3, r0
 800b184:	b21b      	sxth	r3, r3
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	4b5e      	ldr	r3, [pc, #376]	@ (800b304 <SendTxData+0x228>)
 800b18a:	2201      	movs	r2, #1
 800b18c:	2100      	movs	r1, #0
 800b18e:	2002      	movs	r0, #2
 800b190:	f011 fc88 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC3 - In V : %d\r\n", (int16_t)(SYS_GetADC3()));
 800b194:	f7f6 f894 	bl	80012c0 <SYS_GetADC3>
 800b198:	4603      	mov	r3, r0
 800b19a:	b21b      	sxth	r3, r3
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	4b5a      	ldr	r3, [pc, #360]	@ (800b308 <SendTxData+0x22c>)
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	2002      	movs	r0, #2
 800b1a6:	f011 fc7d 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>

  data_sht = sht40();
 800b1aa:	f7f6 ff5b 	bl	8002064 <sht40>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	837b      	strh	r3, [r7, #26]
  t_sht = (data_sht >> 8);
 800b1b2:	8b7b      	ldrh	r3, [r7, #26]
 800b1b4:	0a1b      	lsrs	r3, r3, #8
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	777b      	strb	r3, [r7, #29]
  rh_sht = ((data_sht) & 0xFF);
 800b1ba:	8b7b      	ldrh	r3, [r7, #26]
 800b1bc:	773b      	strb	r3, [r7, #28]
  APP_LOG(TS_ON, VLEVEL_M, "TempSHT - In C : %d\r\n", (uint8_t)(t_sht));
 800b1be:	7f7b      	ldrb	r3, [r7, #29]
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	4b52      	ldr	r3, [pc, #328]	@ (800b30c <SendTxData+0x230>)
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	2002      	movs	r0, #2
 800b1ca:	f011 fc6b 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "RH SHT  - In % : %d\r\n", (uint8_t)(rh_sht));
 800b1ce:	7f3b      	ldrb	r3, [r7, #28]
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	4b4f      	ldr	r3, [pc, #316]	@ (800b310 <SendTxData+0x234>)
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	2002      	movs	r0, #2
 800b1da:	f011 fc63 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b1de:	4b4d      	ldr	r3, [pc, #308]	@ (800b314 <SendTxData+0x238>)
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	701a      	strb	r2, [r3, #0]


  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	494c      	ldr	r1, [pc, #304]	@ (800b318 <SendTxData+0x23c>)
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7f5 fb47 	bl	800087c <__aeabi_fmul>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7f5 fcb9 	bl	8000b68 <__aeabi_f2uiz>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	853b      	strh	r3, [r7, #40]	@ 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7f5 fc8d 	bl	8000b1c <__aeabi_f2iz>
 800b202:	4603      	mov	r3, r0
 800b204:	857b      	strh	r3, [r7, #42]	@ 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	4944      	ldr	r1, [pc, #272]	@ (800b31c <SendTxData+0x240>)
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f5 fb36 	bl	800087c <__aeabi_fmul>
 800b210:	4603      	mov	r3, r0
 800b212:	4941      	ldr	r1, [pc, #260]	@ (800b318 <SendTxData+0x23c>)
 800b214:	4618      	mov	r0, r3
 800b216:	f7f5 fbe5 	bl	80009e4 <__aeabi_fdiv>
 800b21a:	4603      	mov	r3, r0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7f5 fca3 	bl	8000b68 <__aeabi_f2uiz>
 800b222:	4603      	mov	r3, r0
 800b224:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800b226:	4b3b      	ldr	r3, [pc, #236]	@ (800b314 <SendTxData+0x238>)
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22c:	1c59      	adds	r1, r3, #1
 800b22e:	6339      	str	r1, [r7, #48]	@ 0x30
 800b230:	4413      	add	r3, r2
 800b232:	4a3b      	ldr	r2, [pc, #236]	@ (800b320 <SendTxData+0x244>)
 800b234:	7812      	ldrb	r2, [r2, #0]
 800b236:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800b238:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b23a:	0a1b      	lsrs	r3, r3, #8
 800b23c:	b298      	uxth	r0, r3
 800b23e:	4b35      	ldr	r3, [pc, #212]	@ (800b314 <SendTxData+0x238>)
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b244:	1c59      	adds	r1, r3, #1
 800b246:	6339      	str	r1, [r7, #48]	@ 0x30
 800b248:	4413      	add	r3, r2
 800b24a:	b2c2      	uxtb	r2, r0
 800b24c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800b24e:	4b31      	ldr	r3, [pc, #196]	@ (800b314 <SendTxData+0x238>)
 800b250:	685a      	ldr	r2, [r3, #4]
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	1c59      	adds	r1, r3, #1
 800b256:	6339      	str	r1, [r7, #48]	@ 0x30
 800b258:	4413      	add	r3, r2
 800b25a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b25c:	b2d2      	uxtb	r2, r2
 800b25e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800b260:	4b2c      	ldr	r3, [pc, #176]	@ (800b314 <SendTxData+0x238>)
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b266:	1c59      	adds	r1, r3, #1
 800b268:	6339      	str	r1, [r7, #48]	@ 0x30
 800b26a:	4413      	add	r3, r2
 800b26c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800b26e:	b2d2      	uxtb	r2, r2
 800b270:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800b272:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b274:	0a1b      	lsrs	r3, r3, #8
 800b276:	b298      	uxth	r0, r3
 800b278:	4b26      	ldr	r3, [pc, #152]	@ (800b314 <SendTxData+0x238>)
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27e:	1c59      	adds	r1, r3, #1
 800b280:	6339      	str	r1, [r7, #48]	@ 0x30
 800b282:	4413      	add	r3, r2
 800b284:	b2c2      	uxtb	r2, r0
 800b286:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800b288:	4b22      	ldr	r3, [pc, #136]	@ (800b314 <SendTxData+0x238>)
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28e:	1c59      	adds	r1, r3, #1
 800b290:	6339      	str	r1, [r7, #48]	@ 0x30
 800b292:	4413      	add	r3, r2
 800b294:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b296:	b2d2      	uxtb	r2, r2
 800b298:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800b29a:	4b22      	ldr	r3, [pc, #136]	@ (800b324 <SendTxData+0x248>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	2b08      	cmp	r3, #8
 800b2a0:	d007      	beq.n	800b2b2 <SendTxData+0x1d6>
 800b2a2:	4b20      	ldr	r3, [pc, #128]	@ (800b324 <SendTxData+0x248>)
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d003      	beq.n	800b2b2 <SendTxData+0x1d6>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800b2aa:	4b1e      	ldr	r3, [pc, #120]	@ (800b324 <SendTxData+0x248>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d13a      	bne.n	800b328 <SendTxData+0x24c>
  {
    AppData.Buffer[i++] = 0;
 800b2b2:	4b18      	ldr	r3, [pc, #96]	@ (800b314 <SendTxData+0x238>)
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	1c59      	adds	r1, r3, #1
 800b2ba:	6339      	str	r1, [r7, #48]	@ 0x30
 800b2bc:	4413      	add	r3, r2
 800b2be:	2200      	movs	r2, #0
 800b2c0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b2c2:	4b14      	ldr	r3, [pc, #80]	@ (800b314 <SendTxData+0x238>)
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c8:	1c59      	adds	r1, r3, #1
 800b2ca:	6339      	str	r1, [r7, #48]	@ 0x30
 800b2cc:	4413      	add	r3, r2
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b2d2:	4b10      	ldr	r3, [pc, #64]	@ (800b314 <SendTxData+0x238>)
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d8:	1c59      	adds	r1, r3, #1
 800b2da:	6339      	str	r1, [r7, #48]	@ 0x30
 800b2dc:	4413      	add	r3, r2
 800b2de:	2200      	movs	r2, #0
 800b2e0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b314 <SendTxData+0x238>)
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e8:	1c59      	adds	r1, r3, #1
 800b2ea:	6339      	str	r1, [r7, #48]	@ 0x30
 800b2ec:	4413      	add	r3, r2
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	701a      	strb	r2, [r3, #0]
 800b2f2:	e075      	b.n	800b3e0 <SendTxData+0x304>
 800b2f4:	0801d264 	.word	0x0801d264
 800b2f8:	0801d270 	.word	0x0801d270
 800b2fc:	0801d27c 	.word	0x0801d27c
 800b300:	0801d290 	.word	0x0801d290
 800b304:	0801d2a4 	.word	0x0801d2a4
 800b308:	0801d2b8 	.word	0x0801d2b8
 800b30c:	0801d2cc 	.word	0x0801d2cc
 800b310:	0801d2e4 	.word	0x0801d2e4
 800b314:	2000008c 	.word	0x2000008c
 800b318:	41200000 	.word	0x41200000
 800b31c:	42c80000 	.word	0x42c80000
 800b320:	2000059e 	.word	0x2000059e
 800b324:	20000070 	.word	0x20000070
  }
  else
  {
    latitude = sensor_data.latitude;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	627b      	str	r3, [r7, #36]	@ 0x24
    longitude = sensor_data.longitude;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800b330:	4b55      	ldr	r3, [pc, #340]	@ (800b488 <SendTxData+0x3ac>)
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b336:	1c59      	adds	r1, r3, #1
 800b338:	6339      	str	r1, [r7, #48]	@ 0x30
 800b33a:	18d4      	adds	r4, r2, r3
 800b33c:	f7f6 ff26 	bl	800218c <GetBatteryLevel>
 800b340:	4603      	mov	r3, r0
 800b342:	7023      	strb	r3, [r4, #0]
    //AppData.Buffer[i++] = sht40();        /* 1 (very low) to 254 (fully charged) */
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800b344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b346:	1418      	asrs	r0, r3, #16
 800b348:	4b4f      	ldr	r3, [pc, #316]	@ (800b488 <SendTxData+0x3ac>)
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34e:	1c59      	adds	r1, r3, #1
 800b350:	6339      	str	r1, [r7, #48]	@ 0x30
 800b352:	4413      	add	r3, r2
 800b354:	b2c2      	uxtb	r2, r0
 800b356:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800b358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35a:	1218      	asrs	r0, r3, #8
 800b35c:	4b4a      	ldr	r3, [pc, #296]	@ (800b488 <SendTxData+0x3ac>)
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	1c59      	adds	r1, r3, #1
 800b364:	6339      	str	r1, [r7, #48]	@ 0x30
 800b366:	4413      	add	r3, r2
 800b368:	b2c2      	uxtb	r2, r0
 800b36a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800b36c:	4b46      	ldr	r3, [pc, #280]	@ (800b488 <SendTxData+0x3ac>)
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b372:	1c59      	adds	r1, r3, #1
 800b374:	6339      	str	r1, [r7, #48]	@ 0x30
 800b376:	4413      	add	r3, r2
 800b378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b37a:	b2d2      	uxtb	r2, r2
 800b37c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	1418      	asrs	r0, r3, #16
 800b382:	4b41      	ldr	r3, [pc, #260]	@ (800b488 <SendTxData+0x3ac>)
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	1c59      	adds	r1, r3, #1
 800b38a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b38c:	4413      	add	r3, r2
 800b38e:	b2c2      	uxtb	r2, r0
 800b390:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	1218      	asrs	r0, r3, #8
 800b396:	4b3c      	ldr	r3, [pc, #240]	@ (800b488 <SendTxData+0x3ac>)
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39c:	1c59      	adds	r1, r3, #1
 800b39e:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3a0:	4413      	add	r3, r2
 800b3a2:	b2c2      	uxtb	r2, r0
 800b3a4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800b3a6:	4b38      	ldr	r3, [pc, #224]	@ (800b488 <SendTxData+0x3ac>)
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ac:	1c59      	adds	r1, r3, #1
 800b3ae:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3b0:	4413      	add	r3, r2
 800b3b2:	6a3a      	ldr	r2, [r7, #32]
 800b3b4:	b2d2      	uxtb	r2, r2
 800b3b6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800b3b8:	8bfb      	ldrh	r3, [r7, #30]
 800b3ba:	0a1b      	lsrs	r3, r3, #8
 800b3bc:	b298      	uxth	r0, r3
 800b3be:	4b32      	ldr	r3, [pc, #200]	@ (800b488 <SendTxData+0x3ac>)
 800b3c0:	685a      	ldr	r2, [r3, #4]
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c4:	1c59      	adds	r1, r3, #1
 800b3c6:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3c8:	4413      	add	r3, r2
 800b3ca:	b2c2      	uxtb	r2, r0
 800b3cc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800b3ce:	4b2e      	ldr	r3, [pc, #184]	@ (800b488 <SendTxData+0x3ac>)
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d4:	1c59      	adds	r1, r3, #1
 800b3d6:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3d8:	4413      	add	r3, r2
 800b3da:	8bfa      	ldrh	r2, [r7, #30]
 800b3dc:	b2d2      	uxtb	r2, r2
 800b3de:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	4b28      	ldr	r3, [pc, #160]	@ (800b488 <SendTxData+0x3ac>)
 800b3e6:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b3e8:	4b28      	ldr	r3, [pc, #160]	@ (800b48c <SendTxData+0x3b0>)
 800b3ea:	7a5b      	ldrb	r3, [r3, #9]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d007      	beq.n	800b400 <SendTxData+0x324>
 800b3f0:	f002 fa68 	bl	800d8c4 <LmHandlerJoinStatus>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d102      	bne.n	800b400 <SendTxData+0x324>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800b3fa:	4824      	ldr	r0, [pc, #144]	@ (800b48c <SendTxData+0x3b0>)
 800b3fc:	f011 f948 	bl	801c690 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
    //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800b400:	4b23      	ldr	r3, [pc, #140]	@ (800b490 <SendTxData+0x3b4>)
 800b402:	78db      	ldrb	r3, [r3, #3]
 800b404:	2200      	movs	r2, #0
 800b406:	4619      	mov	r1, r3
 800b408:	481f      	ldr	r0, [pc, #124]	@ (800b488 <SendTxData+0x3ac>)
 800b40a:	f002 fa77 	bl	800d8fc <LmHandlerSend>
 800b40e:	4603      	mov	r3, r0
 800b410:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800b414:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d106      	bne.n	800b42a <SendTxData+0x34e>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800b41c:	4b1d      	ldr	r3, [pc, #116]	@ (800b494 <SendTxData+0x3b8>)
 800b41e:	2201      	movs	r2, #1
 800b420:	2100      	movs	r1, #0
 800b422:	2001      	movs	r0, #1
 800b424:	f011 fb3e 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
 800b428:	e016      	b.n	800b458 <SendTxData+0x37c>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800b42a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b42e:	f113 0f06 	cmn.w	r3, #6
 800b432:	d111      	bne.n	800b458 <SendTxData+0x37c>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800b434:	f002 f99a 	bl	800d76c <LmHandlerGetDutyCycleWaitTime>
 800b438:	6378      	str	r0, [r7, #52]	@ 0x34
    if (nextTxIn > 0)
 800b43a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00b      	beq.n	800b458 <SendTxData+0x37c>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800b440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b442:	4a15      	ldr	r2, [pc, #84]	@ (800b498 <SendTxData+0x3bc>)
 800b444:	fba2 2303 	umull	r2, r3, r2, r3
 800b448:	099b      	lsrs	r3, r3, #6
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	4b13      	ldr	r3, [pc, #76]	@ (800b49c <SendTxData+0x3c0>)
 800b44e:	2201      	movs	r2, #1
 800b450:	2100      	movs	r1, #0
 800b452:	2001      	movs	r0, #1
 800b454:	f011 fb26 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800b458:	4b11      	ldr	r3, [pc, #68]	@ (800b4a0 <SendTxData+0x3c4>)
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10f      	bne.n	800b480 <SendTxData+0x3a4>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800b460:	4810      	ldr	r0, [pc, #64]	@ (800b4a4 <SendTxData+0x3c8>)
 800b462:	f011 f915 	bl	801c690 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800b466:	4b10      	ldr	r3, [pc, #64]	@ (800b4a8 <SendTxData+0x3cc>)
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46c:	4293      	cmp	r3, r2
 800b46e:	bf38      	it	cc
 800b470:	4613      	movcc	r3, r2
 800b472:	4619      	mov	r1, r3
 800b474:	480b      	ldr	r0, [pc, #44]	@ (800b4a4 <SendTxData+0x3c8>)
 800b476:	f011 f97b 	bl	801c770 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800b47a:	480a      	ldr	r0, [pc, #40]	@ (800b4a4 <SendTxData+0x3c8>)
 800b47c:	f011 f89a 	bl	801c5b4 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800b480:	bf00      	nop
 800b482:	373c      	adds	r7, #60	@ 0x3c
 800b484:	46bd      	mov	sp, r7
 800b486:	bd90      	pop	{r4, r7, pc}
 800b488:	2000008c 	.word	0x2000008c
 800b48c:	200005d0 	.word	0x200005d0
 800b490:	20000070 	.word	0x20000070
 800b494:	0801d2fc 	.word	0x0801d2fc
 800b498:	10624dd3 	.word	0x10624dd3
 800b49c:	0801d30c 	.word	0x0801d30c
 800b4a0:	20000478 	.word	0x20000478
 800b4a4:	2000047c 	.word	0x2000047c
 800b4a8:	20000088 	.word	0x20000088

0800b4ac <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	2002      	movs	r0, #2
 800b4b8:	f010 ffc6 	bl	801c448 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800b4bc:	4803      	ldr	r0, [pc, #12]	@ (800b4cc <OnTxTimerEvent+0x20>)
 800b4be:	f011 f879 	bl	801c5b4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	2000047c 	.word	0x2000047c

0800b4d0 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
#if defined(DBG)	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bc80      	pop	{r7}
 800b4e0:	4770      	bx	lr

0800b4e2 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b083      	sub	sp, #12
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800b4ea:	bf00      	nop
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bc80      	pop	{r7}
 800b4f2:	4770      	bx	lr

0800b4f4 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_RED */
#endif
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	bc80      	pop	{r7}
 800b504:	4770      	bx	lr
	...

0800b508 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af04      	add	r7, sp, #16
 800b50e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d041      	beq.n	800b59a <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d03d      	beq.n	800b59a <OnTxData+0x92>
    {
#if defined(DBG)	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800b51e:	4821      	ldr	r0, [pc, #132]	@ (800b5a4 <OnTxData+0x9c>)
 800b520:	f011 f848 	bl	801c5b4 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800b524:	4b20      	ldr	r3, [pc, #128]	@ (800b5a8 <OnTxData+0xa0>)
 800b526:	2200      	movs	r2, #0
 800b528:	2100      	movs	r1, #0
 800b52a:	2002      	movs	r0, #2
 800b52c:	f011 faba 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	7c12      	ldrb	r2, [r2, #16]
 800b538:	4611      	mov	r1, r2
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800b540:	4610      	mov	r0, r2
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800b548:	9203      	str	r2, [sp, #12]
 800b54a:	9002      	str	r0, [sp, #8]
 800b54c:	9101      	str	r1, [sp, #4]
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	4b16      	ldr	r3, [pc, #88]	@ (800b5ac <OnTxData+0xa4>)
 800b552:	2200      	movs	r2, #0
 800b554:	2100      	movs	r1, #0
 800b556:	2003      	movs	r0, #3
 800b558:	f011 faa4 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800b55c:	4b14      	ldr	r3, [pc, #80]	@ (800b5b0 <OnTxData+0xa8>)
 800b55e:	2200      	movs	r2, #0
 800b560:	2100      	movs	r1, #0
 800b562:	2003      	movs	r0, #3
 800b564:	f011 fa9e 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	7a1b      	ldrb	r3, [r3, #8]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d10e      	bne.n	800b58e <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	7a5b      	ldrb	r3, [r3, #9]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <OnTxData+0x74>
 800b578:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b4 <OnTxData+0xac>)
 800b57a:	e000      	b.n	800b57e <OnTxData+0x76>
 800b57c:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b8 <OnTxData+0xb0>)
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	4b0e      	ldr	r3, [pc, #56]	@ (800b5bc <OnTxData+0xb4>)
 800b582:	2200      	movs	r2, #0
 800b584:	2100      	movs	r1, #0
 800b586:	2003      	movs	r0, #3
 800b588:	f011 fa8c 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800b58c:	e005      	b.n	800b59a <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800b58e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <OnTxData+0xb8>)
 800b590:	2200      	movs	r2, #0
 800b592:	2100      	movs	r1, #0
 800b594:	2003      	movs	r0, #3
 800b596:	f011 fa85 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	200005a0 	.word	0x200005a0
 800b5a8:	0801d32c 	.word	0x0801d32c
 800b5ac:	0801d360 	.word	0x0801d360
 800b5b0:	0801d394 	.word	0x0801d394
 800b5b4:	0801d3a4 	.word	0x0801d3a4
 800b5b8:	0801d3a8 	.word	0x0801d3a8
 800b5bc:	0801d3b0 	.word	0x0801d3b0
 800b5c0:	0801d3c4 	.word	0x0801d3c4

0800b5c4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d039      	beq.n	800b646 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d11e      	bne.n	800b61a <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800b5dc:	2100      	movs	r1, #0
 800b5de:	2004      	movs	r0, #4
 800b5e0:	f010 ff32 	bl	801c448 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800b5e4:	481a      	ldr	r0, [pc, #104]	@ (800b650 <OnJoinRequest+0x8c>)
 800b5e6:	f011 f853 	bl	801c690 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
      //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800b5ea:	4b1a      	ldr	r3, [pc, #104]	@ (800b654 <OnJoinRequest+0x90>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	2002      	movs	r0, #2
 800b5f2:	f011 fa57 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	79db      	ldrb	r3, [r3, #7]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d106      	bne.n	800b60c <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800b5fe:	4b16      	ldr	r3, [pc, #88]	@ (800b658 <OnJoinRequest+0x94>)
 800b600:	2200      	movs	r2, #0
 800b602:	2100      	movs	r1, #0
 800b604:	2002      	movs	r0, #2
 800b606:	f011 fa4d 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800b60a:	e01c      	b.n	800b646 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800b60c:	4b13      	ldr	r3, [pc, #76]	@ (800b65c <OnJoinRequest+0x98>)
 800b60e:	2200      	movs	r2, #0
 800b610:	2100      	movs	r1, #0
 800b612:	2002      	movs	r0, #2
 800b614:	f011 fa46 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b618:	e015      	b.n	800b646 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800b61a:	4b11      	ldr	r3, [pc, #68]	@ (800b660 <OnJoinRequest+0x9c>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	2100      	movs	r1, #0
 800b620:	2002      	movs	r0, #2
 800b622:	f011 fa3f 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	79db      	ldrb	r3, [r3, #7]
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d10b      	bne.n	800b646 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800b62e:	4b0d      	ldr	r3, [pc, #52]	@ (800b664 <OnJoinRequest+0xa0>)
 800b630:	2200      	movs	r2, #0
 800b632:	2100      	movs	r1, #0
 800b634:	2002      	movs	r0, #2
 800b636:	f011 fa35 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800b63a:	4b0b      	ldr	r3, [pc, #44]	@ (800b668 <OnJoinRequest+0xa4>)
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	2101      	movs	r1, #1
 800b640:	4618      	mov	r0, r3
 800b642:	f002 f89d 	bl	800d780 <LmHandlerJoin>
}
 800b646:	bf00      	nop
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	200005d0 	.word	0x200005d0
 800b654:	0801d3d4 	.word	0x0801d3d4
 800b658:	0801d3ec 	.word	0x0801d3ec
 800b65c:	0801d40c 	.word	0x0801d40c
 800b660:	0801d42c 	.word	0x0801d42c
 800b664:	0801d448 	.word	0x0801d448
 800b668:	20000020 	.word	0x20000020

0800b66c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800b66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b66e:	b093      	sub	sp, #76	@ 0x4c
 800b670:	af0c      	add	r7, sp, #48	@ 0x30
 800b672:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d056      	beq.n	800b728 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d008      	beq.n	800b694 <OnBeaconStatusChange+0x28>
 800b682:	2b03      	cmp	r3, #3
 800b684:	d049      	beq.n	800b71a <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800b686:	4b2a      	ldr	r3, [pc, #168]	@ (800b730 <OnBeaconStatusChange+0xc4>)
 800b688:	2200      	movs	r2, #0
 800b68a:	2100      	movs	r1, #0
 800b68c:	2002      	movs	r0, #2
 800b68e:	f011 fa09 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b692:	e049      	b.n	800b728 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	7c1b      	ldrb	r3, [r3, #16]
 800b698:	4618      	mov	r0, r3
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b6a0:	461c      	mov	r4, r3
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800b6a8:	461d      	mov	r5, r3
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	6852      	ldr	r2, [r2, #4]
 800b6b2:	6979      	ldr	r1, [r7, #20]
 800b6b4:	7d89      	ldrb	r1, [r1, #22]
 800b6b6:	460e      	mov	r6, r1
 800b6b8:	6979      	ldr	r1, [r7, #20]
 800b6ba:	7dc9      	ldrb	r1, [r1, #23]
 800b6bc:	6139      	str	r1, [r7, #16]
 800b6be:	6979      	ldr	r1, [r7, #20]
 800b6c0:	7e09      	ldrb	r1, [r1, #24]
 800b6c2:	60f9      	str	r1, [r7, #12]
 800b6c4:	6979      	ldr	r1, [r7, #20]
 800b6c6:	7e49      	ldrb	r1, [r1, #25]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	6979      	ldr	r1, [r7, #20]
 800b6cc:	7e89      	ldrb	r1, [r1, #26]
 800b6ce:	6079      	str	r1, [r7, #4]
 800b6d0:	6979      	ldr	r1, [r7, #20]
 800b6d2:	7ec9      	ldrb	r1, [r1, #27]
 800b6d4:	6039      	str	r1, [r7, #0]
 800b6d6:	6979      	ldr	r1, [r7, #20]
 800b6d8:	7f09      	ldrb	r1, [r1, #28]
 800b6da:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b6dc:	f8d7 c000 	ldr.w	ip, [r7]
 800b6e0:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800b6e4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b6e8:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800b6ec:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800b6f0:	f8cd c020 	str.w	ip, [sp, #32]
 800b6f4:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800b6f8:	f8cd c01c 	str.w	ip, [sp, #28]
 800b6fc:	6939      	ldr	r1, [r7, #16]
 800b6fe:	9106      	str	r1, [sp, #24]
 800b700:	9605      	str	r6, [sp, #20]
 800b702:	9204      	str	r2, [sp, #16]
 800b704:	9303      	str	r3, [sp, #12]
 800b706:	9502      	str	r5, [sp, #8]
 800b708:	9401      	str	r4, [sp, #4]
 800b70a:	9000      	str	r0, [sp, #0]
 800b70c:	4b09      	ldr	r3, [pc, #36]	@ (800b734 <OnBeaconStatusChange+0xc8>)
 800b70e:	2200      	movs	r2, #0
 800b710:	2100      	movs	r1, #0
 800b712:	2002      	movs	r0, #2
 800b714:	f011 f9c6 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800b718:	e006      	b.n	800b728 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800b71a:	4b07      	ldr	r3, [pc, #28]	@ (800b738 <OnBeaconStatusChange+0xcc>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	2100      	movs	r1, #0
 800b720:	2002      	movs	r0, #2
 800b722:	f011 f9bf 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b726:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800b728:	bf00      	nop
 800b72a:	371c      	adds	r7, #28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b730:	0801d46c 	.word	0x0801d46c
 800b734:	0801d484 	.word	0x0801d484
 800b738:	0801d4f8 	.word	0x0801d4f8

0800b73c <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800b73c:	b480      	push	{r7}
 800b73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800b740:	bf00      	nop
 800b742:	46bd      	mov	sp, r7
 800b744:	bc80      	pop	{r7}
 800b746:	4770      	bx	lr

0800b748 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	4603      	mov	r3, r0
 800b750:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800b752:	79fb      	ldrb	r3, [r7, #7]
 800b754:	4a06      	ldr	r2, [pc, #24]	@ (800b770 <OnClassChange+0x28>)
 800b756:	5cd3      	ldrb	r3, [r2, r3]
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	4b06      	ldr	r3, [pc, #24]	@ (800b774 <OnClassChange+0x2c>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	2100      	movs	r1, #0
 800b760:	2002      	movs	r0, #2
 800b762:	f011 f99f 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	0801d534 	.word	0x0801d534
 800b774:	0801d518 	.word	0x0801d518

0800b778 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800b77c:	2100      	movs	r1, #0
 800b77e:	2001      	movs	r0, #1
 800b780:	f010 fe62 	bl	801c448 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800b784:	bf00      	nop
 800b786:	bd80      	pop	{r7, pc}

0800b788 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800b790:	4a0d      	ldr	r2, [pc, #52]	@ (800b7c8 <OnTxPeriodicityChanged+0x40>)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800b796:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c8 <OnTxPeriodicityChanged+0x40>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d103      	bne.n	800b7a6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800b79e:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c8 <OnTxPeriodicityChanged+0x40>)
 800b7a0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800b7a4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800b7a6:	4809      	ldr	r0, [pc, #36]	@ (800b7cc <OnTxPeriodicityChanged+0x44>)
 800b7a8:	f010 ff72 	bl	801c690 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800b7ac:	4b06      	ldr	r3, [pc, #24]	@ (800b7c8 <OnTxPeriodicityChanged+0x40>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4806      	ldr	r0, [pc, #24]	@ (800b7cc <OnTxPeriodicityChanged+0x44>)
 800b7b4:	f010 ffdc 	bl	801c770 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800b7b8:	4804      	ldr	r0, [pc, #16]	@ (800b7cc <OnTxPeriodicityChanged+0x44>)
 800b7ba:	f010 fefb 	bl	801c5b4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800b7be:	bf00      	nop
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20000088 	.word	0x20000088
 800b7cc:	2000047c 	.word	0x2000047c

0800b7d0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800b7da:	4a04      	ldr	r2, [pc, #16]	@ (800b7ec <OnTxFrameCtrlChanged+0x1c>)
 800b7dc:	79fb      	ldrb	r3, [r7, #7]
 800b7de:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bc80      	pop	{r7}
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	20000070 	.word	0x20000070

0800b7f0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800b7fa:	4a04      	ldr	r2, [pc, #16]	@ (800b80c <OnPingSlotPeriodicityChanged+0x1c>)
 800b7fc:	79fb      	ldrb	r3, [r7, #7]
 800b7fe:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	bc80      	pop	{r7}
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	20000070 	.word	0x20000070

0800b810 <OnSystemReset>:

static void OnSystemReset(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b814:	f002 fdad 	bl	800e372 <LmHandlerHalt>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d106      	bne.n	800b82c <OnSystemReset+0x1c>
 800b81e:	f002 f851 	bl	800d8c4 <LmHandlerJoinStatus>
 800b822:	4603      	mov	r3, r0
 800b824:	2b01      	cmp	r3, #1
 800b826:	d101      	bne.n	800b82c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800b828:	f7ff faba 	bl	800ada0 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800b82c:	bf00      	nop
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <StopJoin>:

static void StopJoin(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800b834:	4817      	ldr	r0, [pc, #92]	@ (800b894 <StopJoin+0x64>)
 800b836:	f010 ff2b 	bl	801c690 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800b83a:	f002 fd8d 	bl	800e358 <LmHandlerStop>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d006      	beq.n	800b852 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800b844:	4b14      	ldr	r3, [pc, #80]	@ (800b898 <StopJoin+0x68>)
 800b846:	2200      	movs	r2, #0
 800b848:	2100      	movs	r1, #0
 800b84a:	2002      	movs	r0, #2
 800b84c:	f011 f92a 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
 800b850:	e01a      	b.n	800b888 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800b852:	4b12      	ldr	r3, [pc, #72]	@ (800b89c <StopJoin+0x6c>)
 800b854:	2200      	movs	r2, #0
 800b856:	2100      	movs	r1, #0
 800b858:	2002      	movs	r0, #2
 800b85a:	f011 f923 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800b85e:	4b10      	ldr	r3, [pc, #64]	@ (800b8a0 <StopJoin+0x70>)
 800b860:	2201      	movs	r2, #1
 800b862:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800b864:	4b0f      	ldr	r3, [pc, #60]	@ (800b8a4 <StopJoin+0x74>)
 800b866:	2200      	movs	r2, #0
 800b868:	2100      	movs	r1, #0
 800b86a:	2002      	movs	r0, #2
 800b86c:	f011 f91a 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800b870:	480d      	ldr	r0, [pc, #52]	@ (800b8a8 <StopJoin+0x78>)
 800b872:	f001 fe21 	bl	800d4b8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800b876:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a0 <StopJoin+0x70>)
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	2101      	movs	r1, #1
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 ff7f 	bl	800d780 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800b882:	4804      	ldr	r0, [pc, #16]	@ (800b894 <StopJoin+0x64>)
 800b884:	f010 fe96 	bl	801c5b4 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800b888:	4808      	ldr	r0, [pc, #32]	@ (800b8ac <StopJoin+0x7c>)
 800b88a:	f010 fe93 	bl	801c5b4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800b88e:	bf00      	nop
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	2000047c 	.word	0x2000047c
 800b898:	0801d538 	.word	0x0801d538
 800b89c:	0801d558 	.word	0x0801d558
 800b8a0:	20000020 	.word	0x20000020
 800b8a4:	0801d56c 	.word	0x0801d56c
 800b8a8:	20000070 	.word	0x20000070
 800b8ac:	20000494 	.word	0x20000494

0800b8b0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800b8b8:	4b05      	ldr	r3, [pc, #20]	@ (800b8d0 <OnStopJoinTimerEvent+0x20>)
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d103      	bne.n	800b8c8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	2008      	movs	r0, #8
 800b8c4:	f010 fdc0 	bl	801c448 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800b8c8:	bf00      	nop
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	20000020 	.word	0x20000020

0800b8d4 <StoreContext>:

static void StoreContext(void)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b8da:	23ff      	movs	r3, #255	@ 0xff
 800b8dc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800b8de:	f002 fd7d 	bl	800e3dc <LmHandlerNvmDataStore>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800b8e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8ea:	f113 0f08 	cmn.w	r3, #8
 800b8ee:	d106      	bne.n	800b8fe <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b91c <StoreContext+0x48>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	2002      	movs	r0, #2
 800b8f8:	f011 f8d4 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800b8fc:	e00a      	b.n	800b914 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800b8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b906:	d105      	bne.n	800b914 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800b908:	4b05      	ldr	r3, [pc, #20]	@ (800b920 <StoreContext+0x4c>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	2100      	movs	r1, #0
 800b90e:	2002      	movs	r0, #2
 800b910:	f011 f8c8 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b914:	bf00      	nop
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	0801d58c 	.word	0x0801d58c
 800b920:	0801d5a4 	.word	0x0801d5a4

0800b924 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d106      	bne.n	800b942 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800b934:	4b08      	ldr	r3, [pc, #32]	@ (800b958 <OnNvmDataChange+0x34>)
 800b936:	2200      	movs	r2, #0
 800b938:	2100      	movs	r1, #0
 800b93a:	2002      	movs	r0, #2
 800b93c:	f011 f8b2 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800b940:	e005      	b.n	800b94e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800b942:	4b06      	ldr	r3, [pc, #24]	@ (800b95c <OnNvmDataChange+0x38>)
 800b944:	2200      	movs	r2, #0
 800b946:	2100      	movs	r1, #0
 800b948:	2002      	movs	r0, #2
 800b94a:	f011 f8ab 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	0801d5bc 	.word	0x0801d5bc
 800b95c:	0801d5d0 	.word	0x0801d5d0

0800b960 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800b96a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b96e:	4807      	ldr	r0, [pc, #28]	@ (800b98c <OnStoreContextRequest+0x2c>)
 800b970:	f7f5 fd92 	bl	8001498 <FLASH_IF_Erase>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d104      	bne.n	800b984 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	6879      	ldr	r1, [r7, #4]
 800b97e:	4803      	ldr	r0, [pc, #12]	@ (800b98c <OnStoreContextRequest+0x2c>)
 800b980:	f7f5 fd3a 	bl	80013f8 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	0803f000 	.word	0x0803f000

0800b990 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	4903      	ldr	r1, [pc, #12]	@ (800b9ac <OnRestoreContextRequest+0x1c>)
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7f5 fd52 	bl	8001448 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800b9a4:	bf00      	nop
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	0803f000 	.word	0x0803f000

0800b9b0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800b9b4:	4b15      	ldr	r3, [pc, #84]	@ (800ba0c <LoraInfo_Init+0x5c>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800b9ba:	4b14      	ldr	r3, [pc, #80]	@ (800ba0c <LoraInfo_Init+0x5c>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800b9c0:	4b12      	ldr	r3, [pc, #72]	@ (800ba0c <LoraInfo_Init+0x5c>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800b9c6:	4b11      	ldr	r3, [pc, #68]	@ (800ba0c <LoraInfo_Init+0x5c>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800b9cc:	4b0f      	ldr	r3, [pc, #60]	@ (800ba0c <LoraInfo_Init+0x5c>)
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	f043 0320 	orr.w	r3, r3, #32
 800b9d4:	4a0d      	ldr	r2, [pc, #52]	@ (800ba0c <LoraInfo_Init+0x5c>)
 800b9d6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800b9d8:	4b0c      	ldr	r3, [pc, #48]	@ (800ba0c <LoraInfo_Init+0x5c>)
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10d      	bne.n	800b9fc <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800b9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ba10 <LoraInfo_Init+0x60>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	f011 f85c 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800b9ec:	bf00      	nop
 800b9ee:	f011 f847 	bl	801ca80 <UTIL_ADV_TRACE_IsBufferEmpty>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d1fa      	bne.n	800b9ee <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800b9f8:	bf00      	nop
 800b9fa:	e7fd      	b.n	800b9f8 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800b9fc:	4b03      	ldr	r3, [pc, #12]	@ (800ba0c <LoraInfo_Init+0x5c>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800ba02:	4b02      	ldr	r3, [pc, #8]	@ (800ba0c <LoraInfo_Init+0x5c>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ba08:	bf00      	nop
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	200005e8 	.word	0x200005e8
 800ba10:	0801d5e4 	.word	0x0801d5e4

0800ba14 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ba14:	b480      	push	{r7}
 800ba16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ba18:	4b02      	ldr	r3, [pc, #8]	@ (800ba24 <LoraInfo_GetPtr+0x10>)
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bc80      	pop	{r7}
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	200005e8 	.word	0x200005e8

0800ba28 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ba2c:	f7f7 faa9 	bl	8002f82 <BSP_RADIO_Init>
 800ba30:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b082      	sub	sp, #8
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ba40:	79fb      	ldrb	r3, [r7, #7]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7f7 face 	bl	8002fe4 <BSP_RADIO_ConfigRFSwitch>
 800ba48:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ba56:	f7f7 fb13 	bl	8003080 <BSP_RADIO_GetTxConfig>
 800ba5a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ba64:	f7f7 fb13 	bl	800308e <BSP_RADIO_IsTCXO>
 800ba68:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ba72:	f7f7 fb13 	bl	800309c <BSP_RADIO_IsDCDC>
 800ba76:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7f7 fb0e 	bl	80030aa <BSP_RADIO_GetRFOMaxPowerConfig>
 800ba8e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	33f1      	adds	r3, #241	@ 0xf1
 800baa4:	2210      	movs	r2, #16
 800baa6:	2100      	movs	r1, #0
 800baa8:	4618      	mov	r0, r3
 800baaa:	f00c fcd9 	bl	8018460 <memset1>
    ctx->M_n = 0;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	22f0      	movs	r2, #240	@ 0xf0
 800baba:	2100      	movs	r1, #0
 800babc:	4618      	mov	r0, r3
 800babe:	f00c fccf 	bl	8018460 <memset1>
}
 800bac2:	bf00      	nop
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	461a      	mov	r2, r3
 800bad8:	2110      	movs	r1, #16
 800bada:	6838      	ldr	r0, [r7, #0]
 800badc:	f000 fe60 	bl	800c7a0 <lorawan_aes_set_key>
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08c      	sub	sp, #48	@ 0x30
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 80a1 	beq.w	800bc42 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bb06:	f1c3 0310 	rsb	r3, r3, #16
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	bf28      	it	cs
 800bb10:	4613      	movcs	r3, r2
 800bb12:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bb20:	4413      	add	r3, r2
 800bb22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb24:	b292      	uxth	r2, r2
 800bb26:	68b9      	ldr	r1, [r7, #8]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f00c fc5e 	bl	80183ea <memcpy1>
        ctx->M_n += mlen;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800bb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb36:	441a      	add	r2, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bb44:	2b0f      	cmp	r3, #15
 800bb46:	f240 808d 	bls.w	800bc64 <AES_CMAC_Update+0x17c>
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	f000 8088 	beq.w	800bc64 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800bb54:	2300      	movs	r3, #0
 800bb56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb58:	e015      	b.n	800bb86 <AES_CMAC_Update+0x9e>
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5e:	4413      	add	r3, r2
 800bb60:	33f1      	adds	r3, #241	@ 0xf1
 800bb62:	781a      	ldrb	r2, [r3, #0]
 800bb64:	68f9      	ldr	r1, [r7, #12]
 800bb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb68:	440b      	add	r3, r1
 800bb6a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	4053      	eors	r3, r2
 800bb72:	b2d9      	uxtb	r1, r3
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb78:	4413      	add	r3, r2
 800bb7a:	33f1      	adds	r3, #241	@ 0xf1
 800bb7c:	460a      	mov	r2, r1
 800bb7e:	701a      	strb	r2, [r3, #0]
 800bb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb82:	3301      	adds	r3, #1
 800bb84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb88:	2b0f      	cmp	r3, #15
 800bb8a:	dde6      	ble.n	800bb5a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bb92:	f107 0314 	add.w	r3, r7, #20
 800bb96:	2210      	movs	r2, #16
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f00c fc26 	bl	80183ea <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	f107 0114 	add.w	r1, r7, #20
 800bba4:	f107 0314 	add.w	r3, r7, #20
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 fed7 	bl	800c95c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	33f1      	adds	r3, #241	@ 0xf1
 800bbb2:	f107 0114 	add.w	r1, r7, #20
 800bbb6:	2210      	movs	r2, #16
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f00c fc16 	bl	80183ea <memcpy1>

        data += mlen;
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc2:	4413      	add	r3, r2
 800bbc4:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800bbce:	e038      	b.n	800bc42 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbd4:	e013      	b.n	800bbfe <AES_CMAC_Update+0x116>
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbda:	4413      	add	r3, r2
 800bbdc:	33f1      	adds	r3, #241	@ 0xf1
 800bbde:	781a      	ldrb	r2, [r3, #0]
 800bbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	440b      	add	r3, r1
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	4053      	eors	r3, r2
 800bbea:	b2d9      	uxtb	r1, r3
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf0:	4413      	add	r3, r2
 800bbf2:	33f1      	adds	r3, #241	@ 0xf1
 800bbf4:	460a      	mov	r2, r1
 800bbf6:	701a      	strb	r2, [r3, #0]
 800bbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc00:	2b0f      	cmp	r3, #15
 800bc02:	dde8      	ble.n	800bbd6 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bc0a:	f107 0314 	add.w	r3, r7, #20
 800bc0e:	2210      	movs	r2, #16
 800bc10:	4618      	mov	r0, r3
 800bc12:	f00c fbea 	bl	80183ea <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	f107 0114 	add.w	r1, r7, #20
 800bc1c:	f107 0314 	add.w	r3, r7, #20
 800bc20:	4618      	mov	r0, r3
 800bc22:	f000 fe9b 	bl	800c95c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	33f1      	adds	r3, #241	@ 0xf1
 800bc2a:	f107 0114 	add.w	r1, r7, #20
 800bc2e:	2210      	movs	r2, #16
 800bc30:	4618      	mov	r0, r3
 800bc32:	f00c fbda 	bl	80183ea <memcpy1>

        data += 16;
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	3310      	adds	r3, #16
 800bc3a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3b10      	subs	r3, #16
 800bc40:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b10      	cmp	r3, #16
 800bc46:	d8c3      	bhi.n	800bbd0 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	b292      	uxth	r2, r2
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	4618      	mov	r0, r3
 800bc56:	f00c fbc8 	bl	80183ea <memcpy1>
    ctx->M_n = len;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800bc62:	e000      	b.n	800bc66 <AES_CMAC_Update+0x17e>
            return;
 800bc64:	bf00      	nop
}
 800bc66:	3730      	adds	r7, #48	@ 0x30
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b092      	sub	sp, #72	@ 0x48
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800bc76:	f107 031c 	add.w	r3, r7, #28
 800bc7a:	2210      	movs	r2, #16
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f00c fbee 	bl	8018460 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	f107 011c 	add.w	r1, r7, #28
 800bc8a:	f107 031c 	add.w	r3, r7, #28
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 fe64 	bl	800c95c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800bc94:	7f3b      	ldrb	r3, [r7, #28]
 800bc96:	b25b      	sxtb	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	da31      	bge.n	800bd00 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bca0:	e01c      	b.n	800bcdc <AES_CMAC_Final+0x70>
 800bca2:	f107 021c 	add.w	r2, r7, #28
 800bca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bca8:	4413      	add	r3, r2
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	b25b      	sxtb	r3, r3
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	b25a      	sxtb	r2, r3
 800bcb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	3348      	adds	r3, #72	@ 0x48
 800bcb8:	443b      	add	r3, r7
 800bcba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bcbe:	09db      	lsrs	r3, r3, #7
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	b25b      	sxtb	r3, r3
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	b25b      	sxtb	r3, r3
 800bcc8:	b2d9      	uxtb	r1, r3
 800bcca:	f107 021c 	add.w	r2, r7, #28
 800bcce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd0:	4413      	add	r3, r2
 800bcd2:	460a      	mov	r2, r1
 800bcd4:	701a      	strb	r2, [r3, #0]
 800bcd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd8:	3301      	adds	r3, #1
 800bcda:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcde:	2b0e      	cmp	r3, #14
 800bce0:	dddf      	ble.n	800bca2 <AES_CMAC_Final+0x36>
 800bce2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800bcee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bcf2:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800bcf6:	43db      	mvns	r3, r3
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcfe:	e028      	b.n	800bd52 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800bd00:	2300      	movs	r3, #0
 800bd02:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd04:	e01c      	b.n	800bd40 <AES_CMAC_Final+0xd4>
 800bd06:	f107 021c 	add.w	r2, r7, #28
 800bd0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd0c:	4413      	add	r3, r2
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	b25b      	sxtb	r3, r3
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	b25a      	sxtb	r2, r3
 800bd16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd18:	3301      	adds	r3, #1
 800bd1a:	3348      	adds	r3, #72	@ 0x48
 800bd1c:	443b      	add	r3, r7
 800bd1e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bd22:	09db      	lsrs	r3, r3, #7
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	b25b      	sxtb	r3, r3
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	b25b      	sxtb	r3, r3
 800bd2c:	b2d9      	uxtb	r1, r3
 800bd2e:	f107 021c 	add.w	r2, r7, #28
 800bd32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd34:	4413      	add	r3, r2
 800bd36:	460a      	mov	r2, r1
 800bd38:	701a      	strb	r2, [r3, #0]
 800bd3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd42:	2b0e      	cmp	r3, #14
 800bd44:	dddf      	ble.n	800bd06 <AES_CMAC_Final+0x9a>
 800bd46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd4a:	005b      	lsls	r3, r3, #1
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bd58:	2b10      	cmp	r3, #16
 800bd5a:	d11d      	bne.n	800bd98 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd60:	e016      	b.n	800bd90 <AES_CMAC_Final+0x124>
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd66:	4413      	add	r3, r2
 800bd68:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bd6c:	781a      	ldrb	r2, [r3, #0]
 800bd6e:	f107 011c 	add.w	r1, r7, #28
 800bd72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd74:	440b      	add	r3, r1
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	4053      	eors	r3, r2
 800bd7a:	b2d9      	uxtb	r1, r3
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd80:	4413      	add	r3, r2
 800bd82:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bd86:	460a      	mov	r2, r1
 800bd88:	701a      	strb	r2, [r3, #0]
 800bd8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd92:	2b0f      	cmp	r3, #15
 800bd94:	dde5      	ble.n	800bd62 <AES_CMAC_Final+0xf6>
 800bd96:	e098      	b.n	800beca <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800bd98:	7f3b      	ldrb	r3, [r7, #28]
 800bd9a:	b25b      	sxtb	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	da31      	bge.n	800be04 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800bda0:	2300      	movs	r3, #0
 800bda2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bda4:	e01c      	b.n	800bde0 <AES_CMAC_Final+0x174>
 800bda6:	f107 021c 	add.w	r2, r7, #28
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdac:	4413      	add	r3, r2
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	b25b      	sxtb	r3, r3
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	b25a      	sxtb	r2, r3
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb8:	3301      	adds	r3, #1
 800bdba:	3348      	adds	r3, #72	@ 0x48
 800bdbc:	443b      	add	r3, r7
 800bdbe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bdc2:	09db      	lsrs	r3, r3, #7
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	b25b      	sxtb	r3, r3
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	b2d9      	uxtb	r1, r3
 800bdce:	f107 021c 	add.w	r2, r7, #28
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdd4:	4413      	add	r3, r2
 800bdd6:	460a      	mov	r2, r1
 800bdd8:	701a      	strb	r2, [r3, #0]
 800bdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bddc:	3301      	adds	r3, #1
 800bdde:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde2:	2b0e      	cmp	r3, #14
 800bde4:	dddf      	ble.n	800bda6 <AES_CMAC_Final+0x13a>
 800bde6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800bdf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bdf6:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800bdfa:	43db      	mvns	r3, r3
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be02:	e028      	b.n	800be56 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800be04:	2300      	movs	r3, #0
 800be06:	637b      	str	r3, [r7, #52]	@ 0x34
 800be08:	e01c      	b.n	800be44 <AES_CMAC_Final+0x1d8>
 800be0a:	f107 021c 	add.w	r2, r7, #28
 800be0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be10:	4413      	add	r3, r2
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	b25b      	sxtb	r3, r3
 800be16:	005b      	lsls	r3, r3, #1
 800be18:	b25a      	sxtb	r2, r3
 800be1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be1c:	3301      	adds	r3, #1
 800be1e:	3348      	adds	r3, #72	@ 0x48
 800be20:	443b      	add	r3, r7
 800be22:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800be26:	09db      	lsrs	r3, r3, #7
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	b25b      	sxtb	r3, r3
 800be2c:	4313      	orrs	r3, r2
 800be2e:	b25b      	sxtb	r3, r3
 800be30:	b2d9      	uxtb	r1, r3
 800be32:	f107 021c 	add.w	r2, r7, #28
 800be36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be38:	4413      	add	r3, r2
 800be3a:	460a      	mov	r2, r1
 800be3c:	701a      	strb	r2, [r3, #0]
 800be3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be40:	3301      	adds	r3, #1
 800be42:	637b      	str	r3, [r7, #52]	@ 0x34
 800be44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be46:	2b0e      	cmp	r3, #14
 800be48:	dddf      	ble.n	800be0a <AES_CMAC_Final+0x19e>
 800be4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be4e:	005b      	lsls	r3, r3, #1
 800be50:	b2db      	uxtb	r3, r3
 800be52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	4413      	add	r3, r2
 800be60:	2280      	movs	r2, #128	@ 0x80
 800be62:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800be66:	e007      	b.n	800be78 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	4413      	add	r3, r2
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800be8c:	2b0f      	cmp	r3, #15
 800be8e:	d9eb      	bls.n	800be68 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800be90:	2300      	movs	r3, #0
 800be92:	633b      	str	r3, [r7, #48]	@ 0x30
 800be94:	e016      	b.n	800bec4 <AES_CMAC_Final+0x258>
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	4413      	add	r3, r2
 800be9c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	f107 011c 	add.w	r1, r7, #28
 800bea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea8:	440b      	add	r3, r1
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	4053      	eors	r3, r2
 800beae:	b2d9      	uxtb	r1, r3
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb4:	4413      	add	r3, r2
 800beb6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800beba:	460a      	mov	r2, r1
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec0:	3301      	adds	r3, #1
 800bec2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec6:	2b0f      	cmp	r3, #15
 800bec8:	dde5      	ble.n	800be96 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800beca:	2300      	movs	r3, #0
 800becc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bece:	e015      	b.n	800befc <AES_CMAC_Final+0x290>
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed4:	4413      	add	r3, r2
 800bed6:	33f1      	adds	r3, #241	@ 0xf1
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bede:	440b      	add	r3, r1
 800bee0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	4053      	eors	r3, r2
 800bee8:	b2d9      	uxtb	r1, r3
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beee:	4413      	add	r3, r2
 800bef0:	33f1      	adds	r3, #241	@ 0xf1
 800bef2:	460a      	mov	r2, r1
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef8:	3301      	adds	r3, #1
 800befa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800befc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befe:	2b0f      	cmp	r3, #15
 800bf00:	dde6      	ble.n	800bed0 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bf08:	f107 030c 	add.w	r3, r7, #12
 800bf0c:	2210      	movs	r2, #16
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f00c fa6b 	bl	80183ea <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	f107 030c 	add.w	r3, r7, #12
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f000 fd1d 	bl	800c95c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800bf22:	f107 031c 	add.w	r3, r7, #28
 800bf26:	2210      	movs	r2, #16
 800bf28:	2100      	movs	r1, #0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f00c fa98 	bl	8018460 <memset1>
}
 800bf30:	bf00      	nop
 800bf32:	3748      	adds	r7, #72	@ 0x48
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	781a      	ldrb	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	683a      	ldr	r2, [r7, #0]
 800bf50:	7852      	ldrb	r2, [r2, #1]
 800bf52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3302      	adds	r3, #2
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	7892      	ldrb	r2, [r2, #2]
 800bf5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	3303      	adds	r3, #3
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	78d2      	ldrb	r2, [r2, #3]
 800bf66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	7912      	ldrb	r2, [r2, #4]
 800bf70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	3305      	adds	r3, #5
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	7952      	ldrb	r2, [r2, #5]
 800bf7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3306      	adds	r3, #6
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	7992      	ldrb	r2, [r2, #6]
 800bf84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	3307      	adds	r3, #7
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	79d2      	ldrb	r2, [r2, #7]
 800bf8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3308      	adds	r3, #8
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	7a12      	ldrb	r2, [r2, #8]
 800bf98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	3309      	adds	r3, #9
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	7a52      	ldrb	r2, [r2, #9]
 800bfa2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	330a      	adds	r3, #10
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	7a92      	ldrb	r2, [r2, #10]
 800bfac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	330b      	adds	r3, #11
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	7ad2      	ldrb	r2, [r2, #11]
 800bfb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	330c      	adds	r3, #12
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	7b12      	ldrb	r2, [r2, #12]
 800bfc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	330d      	adds	r3, #13
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	7b52      	ldrb	r2, [r2, #13]
 800bfca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	330e      	adds	r3, #14
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	7b92      	ldrb	r2, [r2, #14]
 800bfd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	330f      	adds	r3, #15
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	7bd2      	ldrb	r2, [r2, #15]
 800bfde:	701a      	strb	r2, [r3, #0]
#endif
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bc80      	pop	{r7}
 800bfe8:	4770      	bx	lr

0800bfea <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800bfea:	b480      	push	{r7}
 800bfec:	b085      	sub	sp, #20
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	60f8      	str	r0, [r7, #12]
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	4613      	mov	r3, r2
 800bff6:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800bff8:	e007      	b.n	800c00a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	1c53      	adds	r3, r2, #1
 800bffe:	60bb      	str	r3, [r7, #8]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	1c59      	adds	r1, r3, #1
 800c004:	60f9      	str	r1, [r7, #12]
 800c006:	7812      	ldrb	r2, [r2, #0]
 800c008:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c00a:	79fb      	ldrb	r3, [r7, #7]
 800c00c:	1e5a      	subs	r2, r3, #1
 800c00e:	71fa      	strb	r2, [r7, #7]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1f2      	bne.n	800bffa <copy_block_nn+0x10>
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bc80      	pop	{r7}
 800c01e:	4770      	bx	lr

0800c020 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	781a      	ldrb	r2, [r3, #0]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	4053      	eors	r3, r2
 800c034:	b2da      	uxtb	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	3301      	adds	r3, #1
 800c03e:	7819      	ldrb	r1, [r3, #0]
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	3301      	adds	r3, #1
 800c044:	781a      	ldrb	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	3301      	adds	r3, #1
 800c04a:	404a      	eors	r2, r1
 800c04c:	b2d2      	uxtb	r2, r2
 800c04e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3302      	adds	r3, #2
 800c054:	7819      	ldrb	r1, [r3, #0]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	3302      	adds	r3, #2
 800c05a:	781a      	ldrb	r2, [r3, #0]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3302      	adds	r3, #2
 800c060:	404a      	eors	r2, r1
 800c062:	b2d2      	uxtb	r2, r2
 800c064:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3303      	adds	r3, #3
 800c06a:	7819      	ldrb	r1, [r3, #0]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	3303      	adds	r3, #3
 800c070:	781a      	ldrb	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3303      	adds	r3, #3
 800c076:	404a      	eors	r2, r1
 800c078:	b2d2      	uxtb	r2, r2
 800c07a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	3304      	adds	r3, #4
 800c080:	7819      	ldrb	r1, [r3, #0]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	3304      	adds	r3, #4
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	3304      	adds	r3, #4
 800c08c:	404a      	eors	r2, r1
 800c08e:	b2d2      	uxtb	r2, r2
 800c090:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	3305      	adds	r3, #5
 800c096:	7819      	ldrb	r1, [r3, #0]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	3305      	adds	r3, #5
 800c09c:	781a      	ldrb	r2, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	3305      	adds	r3, #5
 800c0a2:	404a      	eors	r2, r1
 800c0a4:	b2d2      	uxtb	r2, r2
 800c0a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3306      	adds	r3, #6
 800c0ac:	7819      	ldrb	r1, [r3, #0]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	3306      	adds	r3, #6
 800c0b2:	781a      	ldrb	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3306      	adds	r3, #6
 800c0b8:	404a      	eors	r2, r1
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	3307      	adds	r3, #7
 800c0c2:	7819      	ldrb	r1, [r3, #0]
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	3307      	adds	r3, #7
 800c0c8:	781a      	ldrb	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3307      	adds	r3, #7
 800c0ce:	404a      	eors	r2, r1
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	7819      	ldrb	r1, [r3, #0]
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	3308      	adds	r3, #8
 800c0de:	781a      	ldrb	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	404a      	eors	r2, r1
 800c0e6:	b2d2      	uxtb	r2, r2
 800c0e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3309      	adds	r3, #9
 800c0ee:	7819      	ldrb	r1, [r3, #0]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	3309      	adds	r3, #9
 800c0f4:	781a      	ldrb	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3309      	adds	r3, #9
 800c0fa:	404a      	eors	r2, r1
 800c0fc:	b2d2      	uxtb	r2, r2
 800c0fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	330a      	adds	r3, #10
 800c104:	7819      	ldrb	r1, [r3, #0]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	330a      	adds	r3, #10
 800c10a:	781a      	ldrb	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	330a      	adds	r3, #10
 800c110:	404a      	eors	r2, r1
 800c112:	b2d2      	uxtb	r2, r2
 800c114:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	330b      	adds	r3, #11
 800c11a:	7819      	ldrb	r1, [r3, #0]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	330b      	adds	r3, #11
 800c120:	781a      	ldrb	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	330b      	adds	r3, #11
 800c126:	404a      	eors	r2, r1
 800c128:	b2d2      	uxtb	r2, r2
 800c12a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	330c      	adds	r3, #12
 800c130:	7819      	ldrb	r1, [r3, #0]
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	330c      	adds	r3, #12
 800c136:	781a      	ldrb	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	330c      	adds	r3, #12
 800c13c:	404a      	eors	r2, r1
 800c13e:	b2d2      	uxtb	r2, r2
 800c140:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	330d      	adds	r3, #13
 800c146:	7819      	ldrb	r1, [r3, #0]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	330d      	adds	r3, #13
 800c14c:	781a      	ldrb	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	330d      	adds	r3, #13
 800c152:	404a      	eors	r2, r1
 800c154:	b2d2      	uxtb	r2, r2
 800c156:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	330e      	adds	r3, #14
 800c15c:	7819      	ldrb	r1, [r3, #0]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	330e      	adds	r3, #14
 800c162:	781a      	ldrb	r2, [r3, #0]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	330e      	adds	r3, #14
 800c168:	404a      	eors	r2, r1
 800c16a:	b2d2      	uxtb	r2, r2
 800c16c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	330f      	adds	r3, #15
 800c172:	7819      	ldrb	r1, [r3, #0]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	330f      	adds	r3, #15
 800c178:	781a      	ldrb	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	330f      	adds	r3, #15
 800c17e:	404a      	eors	r2, r1
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	701a      	strb	r2, [r3, #0]
#endif
}
 800c184:	bf00      	nop
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	bc80      	pop	{r7}
 800c18c:	4770      	bx	lr

0800c18e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c18e:	b480      	push	{r7}
 800c190:	b085      	sub	sp, #20
 800c192:	af00      	add	r7, sp, #0
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	60b9      	str	r1, [r7, #8]
 800c198:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	781a      	ldrb	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	4053      	eors	r3, r2
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	7819      	ldrb	r1, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	781a      	ldrb	r2, [r3, #0]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	404a      	eors	r2, r1
 800c1bc:	b2d2      	uxtb	r2, r2
 800c1be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	3302      	adds	r3, #2
 800c1c4:	7819      	ldrb	r1, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	3302      	adds	r3, #2
 800c1ca:	781a      	ldrb	r2, [r3, #0]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3302      	adds	r3, #2
 800c1d0:	404a      	eors	r2, r1
 800c1d2:	b2d2      	uxtb	r2, r2
 800c1d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	3303      	adds	r3, #3
 800c1da:	7819      	ldrb	r1, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3303      	adds	r3, #3
 800c1e0:	781a      	ldrb	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3303      	adds	r3, #3
 800c1e6:	404a      	eors	r2, r1
 800c1e8:	b2d2      	uxtb	r2, r2
 800c1ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	7819      	ldrb	r1, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	781a      	ldrb	r2, [r3, #0]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	404a      	eors	r2, r1
 800c1fe:	b2d2      	uxtb	r2, r2
 800c200:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	3305      	adds	r3, #5
 800c206:	7819      	ldrb	r1, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3305      	adds	r3, #5
 800c20c:	781a      	ldrb	r2, [r3, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3305      	adds	r3, #5
 800c212:	404a      	eors	r2, r1
 800c214:	b2d2      	uxtb	r2, r2
 800c216:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	3306      	adds	r3, #6
 800c21c:	7819      	ldrb	r1, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3306      	adds	r3, #6
 800c222:	781a      	ldrb	r2, [r3, #0]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3306      	adds	r3, #6
 800c228:	404a      	eors	r2, r1
 800c22a:	b2d2      	uxtb	r2, r2
 800c22c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	3307      	adds	r3, #7
 800c232:	7819      	ldrb	r1, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3307      	adds	r3, #7
 800c238:	781a      	ldrb	r2, [r3, #0]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3307      	adds	r3, #7
 800c23e:	404a      	eors	r2, r1
 800c240:	b2d2      	uxtb	r2, r2
 800c242:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	3308      	adds	r3, #8
 800c248:	7819      	ldrb	r1, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3308      	adds	r3, #8
 800c24e:	781a      	ldrb	r2, [r3, #0]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3308      	adds	r3, #8
 800c254:	404a      	eors	r2, r1
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	3309      	adds	r3, #9
 800c25e:	7819      	ldrb	r1, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3309      	adds	r3, #9
 800c264:	781a      	ldrb	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3309      	adds	r3, #9
 800c26a:	404a      	eors	r2, r1
 800c26c:	b2d2      	uxtb	r2, r2
 800c26e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	330a      	adds	r3, #10
 800c274:	7819      	ldrb	r1, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	330a      	adds	r3, #10
 800c27a:	781a      	ldrb	r2, [r3, #0]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	330a      	adds	r3, #10
 800c280:	404a      	eors	r2, r1
 800c282:	b2d2      	uxtb	r2, r2
 800c284:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	330b      	adds	r3, #11
 800c28a:	7819      	ldrb	r1, [r3, #0]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	330b      	adds	r3, #11
 800c290:	781a      	ldrb	r2, [r3, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	330b      	adds	r3, #11
 800c296:	404a      	eors	r2, r1
 800c298:	b2d2      	uxtb	r2, r2
 800c29a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	330c      	adds	r3, #12
 800c2a0:	7819      	ldrb	r1, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	330c      	adds	r3, #12
 800c2a6:	781a      	ldrb	r2, [r3, #0]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	330c      	adds	r3, #12
 800c2ac:	404a      	eors	r2, r1
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	330d      	adds	r3, #13
 800c2b6:	7819      	ldrb	r1, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	330d      	adds	r3, #13
 800c2bc:	781a      	ldrb	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	330d      	adds	r3, #13
 800c2c2:	404a      	eors	r2, r1
 800c2c4:	b2d2      	uxtb	r2, r2
 800c2c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	330e      	adds	r3, #14
 800c2cc:	7819      	ldrb	r1, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	330e      	adds	r3, #14
 800c2d2:	781a      	ldrb	r2, [r3, #0]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	330e      	adds	r3, #14
 800c2d8:	404a      	eors	r2, r1
 800c2da:	b2d2      	uxtb	r2, r2
 800c2dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	330f      	adds	r3, #15
 800c2e2:	7819      	ldrb	r1, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	330f      	adds	r3, #15
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	330f      	adds	r3, #15
 800c2ee:	404a      	eors	r2, r1
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c2f4:	bf00      	nop
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bc80      	pop	{r7}
 800c2fc:	4770      	bx	lr

0800c2fe <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7ff fe88 	bl	800c020 <xor_block>
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	461a      	mov	r2, r3
 800c326:	4b48      	ldr	r3, [pc, #288]	@ (800c448 <shift_sub_rows+0x130>)
 800c328:	5c9a      	ldrb	r2, [r3, r2]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	3304      	adds	r3, #4
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	4619      	mov	r1, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	3304      	adds	r3, #4
 800c33a:	4a43      	ldr	r2, [pc, #268]	@ (800c448 <shift_sub_rows+0x130>)
 800c33c:	5c52      	ldrb	r2, [r2, r1]
 800c33e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3308      	adds	r3, #8
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	4619      	mov	r1, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	3308      	adds	r3, #8
 800c34c:	4a3e      	ldr	r2, [pc, #248]	@ (800c448 <shift_sub_rows+0x130>)
 800c34e:	5c52      	ldrb	r2, [r2, r1]
 800c350:	701a      	strb	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	330c      	adds	r3, #12
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	4619      	mov	r1, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	330c      	adds	r3, #12
 800c35e:	4a3a      	ldr	r2, [pc, #232]	@ (800c448 <shift_sub_rows+0x130>)
 800c360:	5c52      	ldrb	r2, [r2, r1]
 800c362:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	785b      	ldrb	r3, [r3, #1]
 800c368:	73fb      	strb	r3, [r7, #15]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	3305      	adds	r3, #5
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	4619      	mov	r1, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3301      	adds	r3, #1
 800c376:	4a34      	ldr	r2, [pc, #208]	@ (800c448 <shift_sub_rows+0x130>)
 800c378:	5c52      	ldrb	r2, [r2, r1]
 800c37a:	701a      	strb	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	3309      	adds	r3, #9
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	4619      	mov	r1, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	3305      	adds	r3, #5
 800c388:	4a2f      	ldr	r2, [pc, #188]	@ (800c448 <shift_sub_rows+0x130>)
 800c38a:	5c52      	ldrb	r2, [r2, r1]
 800c38c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	330d      	adds	r3, #13
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	4619      	mov	r1, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	3309      	adds	r3, #9
 800c39a:	4a2b      	ldr	r2, [pc, #172]	@ (800c448 <shift_sub_rows+0x130>)
 800c39c:	5c52      	ldrb	r2, [r2, r1]
 800c39e:	701a      	strb	r2, [r3, #0]
 800c3a0:	7bfa      	ldrb	r2, [r7, #15]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	330d      	adds	r3, #13
 800c3a6:	4928      	ldr	r1, [pc, #160]	@ (800c448 <shift_sub_rows+0x130>)
 800c3a8:	5c8a      	ldrb	r2, [r1, r2]
 800c3aa:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	789b      	ldrb	r3, [r3, #2]
 800c3b0:	73fb      	strb	r3, [r7, #15]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	330a      	adds	r3, #10
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	3302      	adds	r3, #2
 800c3be:	4a22      	ldr	r2, [pc, #136]	@ (800c448 <shift_sub_rows+0x130>)
 800c3c0:	5c52      	ldrb	r2, [r2, r1]
 800c3c2:	701a      	strb	r2, [r3, #0]
 800c3c4:	7bfa      	ldrb	r2, [r7, #15]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	330a      	adds	r3, #10
 800c3ca:	491f      	ldr	r1, [pc, #124]	@ (800c448 <shift_sub_rows+0x130>)
 800c3cc:	5c8a      	ldrb	r2, [r1, r2]
 800c3ce:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	799b      	ldrb	r3, [r3, #6]
 800c3d4:	73fb      	strb	r3, [r7, #15]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	330e      	adds	r3, #14
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	3306      	adds	r3, #6
 800c3e2:	4a19      	ldr	r2, [pc, #100]	@ (800c448 <shift_sub_rows+0x130>)
 800c3e4:	5c52      	ldrb	r2, [r2, r1]
 800c3e6:	701a      	strb	r2, [r3, #0]
 800c3e8:	7bfa      	ldrb	r2, [r7, #15]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	330e      	adds	r3, #14
 800c3ee:	4916      	ldr	r1, [pc, #88]	@ (800c448 <shift_sub_rows+0x130>)
 800c3f0:	5c8a      	ldrb	r2, [r1, r2]
 800c3f2:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	7bdb      	ldrb	r3, [r3, #15]
 800c3f8:	73fb      	strb	r3, [r7, #15]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	330b      	adds	r3, #11
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	4619      	mov	r1, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	330f      	adds	r3, #15
 800c406:	4a10      	ldr	r2, [pc, #64]	@ (800c448 <shift_sub_rows+0x130>)
 800c408:	5c52      	ldrb	r2, [r2, r1]
 800c40a:	701a      	strb	r2, [r3, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3307      	adds	r3, #7
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	4619      	mov	r1, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	330b      	adds	r3, #11
 800c418:	4a0b      	ldr	r2, [pc, #44]	@ (800c448 <shift_sub_rows+0x130>)
 800c41a:	5c52      	ldrb	r2, [r2, r1]
 800c41c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3303      	adds	r3, #3
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	4619      	mov	r1, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3307      	adds	r3, #7
 800c42a:	4a07      	ldr	r2, [pc, #28]	@ (800c448 <shift_sub_rows+0x130>)
 800c42c:	5c52      	ldrb	r2, [r2, r1]
 800c42e:	701a      	strb	r2, [r3, #0]
 800c430:	7bfa      	ldrb	r2, [r7, #15]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	3303      	adds	r3, #3
 800c436:	4904      	ldr	r1, [pc, #16]	@ (800c448 <shift_sub_rows+0x130>)
 800c438:	5c8a      	ldrb	r2, [r1, r2]
 800c43a:	701a      	strb	r2, [r3, #0]
}
 800c43c:	bf00      	nop
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	bc80      	pop	{r7}
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	0801db48 	.word	0x0801db48

0800c44c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b086      	sub	sp, #24
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c454:	f107 0308 	add.w	r3, r7, #8
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7ff fd6c 	bl	800bf38 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c460:	7a3b      	ldrb	r3, [r7, #8]
 800c462:	461a      	mov	r2, r3
 800c464:	4b9a      	ldr	r3, [pc, #616]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c466:	5c9a      	ldrb	r2, [r3, r2]
 800c468:	7b7b      	ldrb	r3, [r7, #13]
 800c46a:	4619      	mov	r1, r3
 800c46c:	4b99      	ldr	r3, [pc, #612]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c46e:	5c5b      	ldrb	r3, [r3, r1]
 800c470:	4053      	eors	r3, r2
 800c472:	b2da      	uxtb	r2, r3
 800c474:	7cbb      	ldrb	r3, [r7, #18]
 800c476:	4619      	mov	r1, r3
 800c478:	4b97      	ldr	r3, [pc, #604]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c47a:	5c5b      	ldrb	r3, [r3, r1]
 800c47c:	4053      	eors	r3, r2
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	7dfb      	ldrb	r3, [r7, #23]
 800c482:	4619      	mov	r1, r3
 800c484:	4b94      	ldr	r3, [pc, #592]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c486:	5c5b      	ldrb	r3, [r3, r1]
 800c488:	4053      	eors	r3, r2
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c490:	7a3b      	ldrb	r3, [r7, #8]
 800c492:	461a      	mov	r2, r3
 800c494:	4b90      	ldr	r3, [pc, #576]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c496:	5c9a      	ldrb	r2, [r3, r2]
 800c498:	7b7b      	ldrb	r3, [r7, #13]
 800c49a:	4619      	mov	r1, r3
 800c49c:	4b8c      	ldr	r3, [pc, #560]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c49e:	5c5b      	ldrb	r3, [r3, r1]
 800c4a0:	4053      	eors	r3, r2
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	7cbb      	ldrb	r3, [r7, #18]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4b8a      	ldr	r3, [pc, #552]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c4aa:	5c5b      	ldrb	r3, [r3, r1]
 800c4ac:	4053      	eors	r3, r2
 800c4ae:	b2d9      	uxtb	r1, r3
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	4b88      	ldr	r3, [pc, #544]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c4b6:	5c9a      	ldrb	r2, [r3, r2]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	404a      	eors	r2, r1
 800c4be:	b2d2      	uxtb	r2, r2
 800c4c0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c4c2:	7a3b      	ldrb	r3, [r7, #8]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	4b84      	ldr	r3, [pc, #528]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c4c8:	5c9a      	ldrb	r2, [r3, r2]
 800c4ca:	7b7b      	ldrb	r3, [r7, #13]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	4b82      	ldr	r3, [pc, #520]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c4d0:	5c5b      	ldrb	r3, [r3, r1]
 800c4d2:	4053      	eors	r3, r2
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	7cbb      	ldrb	r3, [r7, #18]
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4b7d      	ldr	r3, [pc, #500]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c4dc:	5c5b      	ldrb	r3, [r3, r1]
 800c4de:	4053      	eors	r3, r2
 800c4e0:	b2d9      	uxtb	r1, r3
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	4b7b      	ldr	r3, [pc, #492]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c4e8:	5c9a      	ldrb	r2, [r3, r2]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3302      	adds	r3, #2
 800c4ee:	404a      	eors	r2, r1
 800c4f0:	b2d2      	uxtb	r2, r2
 800c4f2:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c4f4:	7a3b      	ldrb	r3, [r7, #8]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	4b76      	ldr	r3, [pc, #472]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c4fa:	5c9a      	ldrb	r2, [r3, r2]
 800c4fc:	7b7b      	ldrb	r3, [r7, #13]
 800c4fe:	4619      	mov	r1, r3
 800c500:	4b75      	ldr	r3, [pc, #468]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c502:	5c5b      	ldrb	r3, [r3, r1]
 800c504:	4053      	eors	r3, r2
 800c506:	b2da      	uxtb	r2, r3
 800c508:	7cbb      	ldrb	r3, [r7, #18]
 800c50a:	4619      	mov	r1, r3
 800c50c:	4b72      	ldr	r3, [pc, #456]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c50e:	5c5b      	ldrb	r3, [r3, r1]
 800c510:	4053      	eors	r3, r2
 800c512:	b2d9      	uxtb	r1, r3
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	461a      	mov	r2, r3
 800c518:	4b6d      	ldr	r3, [pc, #436]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c51a:	5c9a      	ldrb	r2, [r3, r2]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3303      	adds	r3, #3
 800c520:	404a      	eors	r2, r1
 800c522:	b2d2      	uxtb	r2, r2
 800c524:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c526:	7b3b      	ldrb	r3, [r7, #12]
 800c528:	461a      	mov	r2, r3
 800c52a:	4b69      	ldr	r3, [pc, #420]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c52c:	5c9a      	ldrb	r2, [r3, r2]
 800c52e:	7c7b      	ldrb	r3, [r7, #17]
 800c530:	4619      	mov	r1, r3
 800c532:	4b68      	ldr	r3, [pc, #416]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c534:	5c5b      	ldrb	r3, [r3, r1]
 800c536:	4053      	eors	r3, r2
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	7dbb      	ldrb	r3, [r7, #22]
 800c53c:	4619      	mov	r1, r3
 800c53e:	4b66      	ldr	r3, [pc, #408]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c540:	5c5b      	ldrb	r3, [r3, r1]
 800c542:	4053      	eors	r3, r2
 800c544:	b2d9      	uxtb	r1, r3
 800c546:	7afb      	ldrb	r3, [r7, #11]
 800c548:	461a      	mov	r2, r3
 800c54a:	4b63      	ldr	r3, [pc, #396]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c54c:	5c9a      	ldrb	r2, [r3, r2]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3304      	adds	r3, #4
 800c552:	404a      	eors	r2, r1
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c558:	7b3b      	ldrb	r3, [r7, #12]
 800c55a:	461a      	mov	r2, r3
 800c55c:	4b5e      	ldr	r3, [pc, #376]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c55e:	5c9a      	ldrb	r2, [r3, r2]
 800c560:	7c7b      	ldrb	r3, [r7, #17]
 800c562:	4619      	mov	r1, r3
 800c564:	4b5a      	ldr	r3, [pc, #360]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c566:	5c5b      	ldrb	r3, [r3, r1]
 800c568:	4053      	eors	r3, r2
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	7dbb      	ldrb	r3, [r7, #22]
 800c56e:	4619      	mov	r1, r3
 800c570:	4b58      	ldr	r3, [pc, #352]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c572:	5c5b      	ldrb	r3, [r3, r1]
 800c574:	4053      	eors	r3, r2
 800c576:	b2d9      	uxtb	r1, r3
 800c578:	7afb      	ldrb	r3, [r7, #11]
 800c57a:	461a      	mov	r2, r3
 800c57c:	4b56      	ldr	r3, [pc, #344]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c57e:	5c9a      	ldrb	r2, [r3, r2]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3305      	adds	r3, #5
 800c584:	404a      	eors	r2, r1
 800c586:	b2d2      	uxtb	r2, r2
 800c588:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c58a:	7b3b      	ldrb	r3, [r7, #12]
 800c58c:	461a      	mov	r2, r3
 800c58e:	4b52      	ldr	r3, [pc, #328]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c590:	5c9a      	ldrb	r2, [r3, r2]
 800c592:	7c7b      	ldrb	r3, [r7, #17]
 800c594:	4619      	mov	r1, r3
 800c596:	4b50      	ldr	r3, [pc, #320]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c598:	5c5b      	ldrb	r3, [r3, r1]
 800c59a:	4053      	eors	r3, r2
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	7dbb      	ldrb	r3, [r7, #22]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4b4b      	ldr	r3, [pc, #300]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c5a4:	5c5b      	ldrb	r3, [r3, r1]
 800c5a6:	4053      	eors	r3, r2
 800c5a8:	b2d9      	uxtb	r1, r3
 800c5aa:	7afb      	ldrb	r3, [r7, #11]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	4b49      	ldr	r3, [pc, #292]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c5b0:	5c9a      	ldrb	r2, [r3, r2]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3306      	adds	r3, #6
 800c5b6:	404a      	eors	r2, r1
 800c5b8:	b2d2      	uxtb	r2, r2
 800c5ba:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c5bc:	7b3b      	ldrb	r3, [r7, #12]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	4b44      	ldr	r3, [pc, #272]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c5c2:	5c9a      	ldrb	r2, [r3, r2]
 800c5c4:	7c7b      	ldrb	r3, [r7, #17]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4b43      	ldr	r3, [pc, #268]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c5ca:	5c5b      	ldrb	r3, [r3, r1]
 800c5cc:	4053      	eors	r3, r2
 800c5ce:	b2da      	uxtb	r2, r3
 800c5d0:	7dbb      	ldrb	r3, [r7, #22]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4b40      	ldr	r3, [pc, #256]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c5d6:	5c5b      	ldrb	r3, [r3, r1]
 800c5d8:	4053      	eors	r3, r2
 800c5da:	b2d9      	uxtb	r1, r3
 800c5dc:	7afb      	ldrb	r3, [r7, #11]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4b3b      	ldr	r3, [pc, #236]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c5e2:	5c9a      	ldrb	r2, [r3, r2]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	3307      	adds	r3, #7
 800c5e8:	404a      	eors	r2, r1
 800c5ea:	b2d2      	uxtb	r2, r2
 800c5ec:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c5ee:	7c3b      	ldrb	r3, [r7, #16]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	4b37      	ldr	r3, [pc, #220]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c5f4:	5c9a      	ldrb	r2, [r3, r2]
 800c5f6:	7d7b      	ldrb	r3, [r7, #21]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4b36      	ldr	r3, [pc, #216]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c5fc:	5c5b      	ldrb	r3, [r3, r1]
 800c5fe:	4053      	eors	r3, r2
 800c600:	b2da      	uxtb	r2, r3
 800c602:	7abb      	ldrb	r3, [r7, #10]
 800c604:	4619      	mov	r1, r3
 800c606:	4b34      	ldr	r3, [pc, #208]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c608:	5c5b      	ldrb	r3, [r3, r1]
 800c60a:	4053      	eors	r3, r2
 800c60c:	b2d9      	uxtb	r1, r3
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	461a      	mov	r2, r3
 800c612:	4b31      	ldr	r3, [pc, #196]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c614:	5c9a      	ldrb	r2, [r3, r2]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	3308      	adds	r3, #8
 800c61a:	404a      	eors	r2, r1
 800c61c:	b2d2      	uxtb	r2, r2
 800c61e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c620:	7c3b      	ldrb	r3, [r7, #16]
 800c622:	461a      	mov	r2, r3
 800c624:	4b2c      	ldr	r3, [pc, #176]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c626:	5c9a      	ldrb	r2, [r3, r2]
 800c628:	7d7b      	ldrb	r3, [r7, #21]
 800c62a:	4619      	mov	r1, r3
 800c62c:	4b28      	ldr	r3, [pc, #160]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c62e:	5c5b      	ldrb	r3, [r3, r1]
 800c630:	4053      	eors	r3, r2
 800c632:	b2da      	uxtb	r2, r3
 800c634:	7abb      	ldrb	r3, [r7, #10]
 800c636:	4619      	mov	r1, r3
 800c638:	4b26      	ldr	r3, [pc, #152]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c63a:	5c5b      	ldrb	r3, [r3, r1]
 800c63c:	4053      	eors	r3, r2
 800c63e:	b2d9      	uxtb	r1, r3
 800c640:	7bfb      	ldrb	r3, [r7, #15]
 800c642:	461a      	mov	r2, r3
 800c644:	4b24      	ldr	r3, [pc, #144]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c646:	5c9a      	ldrb	r2, [r3, r2]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3309      	adds	r3, #9
 800c64c:	404a      	eors	r2, r1
 800c64e:	b2d2      	uxtb	r2, r2
 800c650:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c652:	7c3b      	ldrb	r3, [r7, #16]
 800c654:	461a      	mov	r2, r3
 800c656:	4b20      	ldr	r3, [pc, #128]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c658:	5c9a      	ldrb	r2, [r3, r2]
 800c65a:	7d7b      	ldrb	r3, [r7, #21]
 800c65c:	4619      	mov	r1, r3
 800c65e:	4b1e      	ldr	r3, [pc, #120]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c660:	5c5b      	ldrb	r3, [r3, r1]
 800c662:	4053      	eors	r3, r2
 800c664:	b2da      	uxtb	r2, r3
 800c666:	7abb      	ldrb	r3, [r7, #10]
 800c668:	4619      	mov	r1, r3
 800c66a:	4b19      	ldr	r3, [pc, #100]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c66c:	5c5b      	ldrb	r3, [r3, r1]
 800c66e:	4053      	eors	r3, r2
 800c670:	b2d9      	uxtb	r1, r3
 800c672:	7bfb      	ldrb	r3, [r7, #15]
 800c674:	461a      	mov	r2, r3
 800c676:	4b17      	ldr	r3, [pc, #92]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c678:	5c9a      	ldrb	r2, [r3, r2]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	330a      	adds	r3, #10
 800c67e:	404a      	eors	r2, r1
 800c680:	b2d2      	uxtb	r2, r2
 800c682:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c684:	7c3b      	ldrb	r3, [r7, #16]
 800c686:	461a      	mov	r2, r3
 800c688:	4b12      	ldr	r3, [pc, #72]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c68a:	5c9a      	ldrb	r2, [r3, r2]
 800c68c:	7d7b      	ldrb	r3, [r7, #21]
 800c68e:	4619      	mov	r1, r3
 800c690:	4b11      	ldr	r3, [pc, #68]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c692:	5c5b      	ldrb	r3, [r3, r1]
 800c694:	4053      	eors	r3, r2
 800c696:	b2da      	uxtb	r2, r3
 800c698:	7abb      	ldrb	r3, [r7, #10]
 800c69a:	4619      	mov	r1, r3
 800c69c:	4b0e      	ldr	r3, [pc, #56]	@ (800c6d8 <mix_sub_columns+0x28c>)
 800c69e:	5c5b      	ldrb	r3, [r3, r1]
 800c6a0:	4053      	eors	r3, r2
 800c6a2:	b2d9      	uxtb	r1, r3
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	4b09      	ldr	r3, [pc, #36]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c6aa:	5c9a      	ldrb	r2, [r3, r2]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	330b      	adds	r3, #11
 800c6b0:	404a      	eors	r2, r1
 800c6b2:	b2d2      	uxtb	r2, r2
 800c6b4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c6b6:	7d3b      	ldrb	r3, [r7, #20]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	4b05      	ldr	r3, [pc, #20]	@ (800c6d0 <mix_sub_columns+0x284>)
 800c6bc:	5c9a      	ldrb	r2, [r3, r2]
 800c6be:	7a7b      	ldrb	r3, [r7, #9]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4b04      	ldr	r3, [pc, #16]	@ (800c6d4 <mix_sub_columns+0x288>)
 800c6c4:	5c5b      	ldrb	r3, [r3, r1]
 800c6c6:	4053      	eors	r3, r2
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	7bbb      	ldrb	r3, [r7, #14]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	e005      	b.n	800c6dc <mix_sub_columns+0x290>
 800c6d0:	0801dc48 	.word	0x0801dc48
 800c6d4:	0801dd48 	.word	0x0801dd48
 800c6d8:	0801db48 	.word	0x0801db48
 800c6dc:	4b2d      	ldr	r3, [pc, #180]	@ (800c794 <mix_sub_columns+0x348>)
 800c6de:	5c5b      	ldrb	r3, [r3, r1]
 800c6e0:	4053      	eors	r3, r2
 800c6e2:	b2d9      	uxtb	r1, r3
 800c6e4:	7cfb      	ldrb	r3, [r7, #19]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	4b2a      	ldr	r3, [pc, #168]	@ (800c794 <mix_sub_columns+0x348>)
 800c6ea:	5c9a      	ldrb	r2, [r3, r2]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	330c      	adds	r3, #12
 800c6f0:	404a      	eors	r2, r1
 800c6f2:	b2d2      	uxtb	r2, r2
 800c6f4:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c6f6:	7d3b      	ldrb	r3, [r7, #20]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	4b26      	ldr	r3, [pc, #152]	@ (800c794 <mix_sub_columns+0x348>)
 800c6fc:	5c9a      	ldrb	r2, [r3, r2]
 800c6fe:	7a7b      	ldrb	r3, [r7, #9]
 800c700:	4619      	mov	r1, r3
 800c702:	4b25      	ldr	r3, [pc, #148]	@ (800c798 <mix_sub_columns+0x34c>)
 800c704:	5c5b      	ldrb	r3, [r3, r1]
 800c706:	4053      	eors	r3, r2
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	7bbb      	ldrb	r3, [r7, #14]
 800c70c:	4619      	mov	r1, r3
 800c70e:	4b23      	ldr	r3, [pc, #140]	@ (800c79c <mix_sub_columns+0x350>)
 800c710:	5c5b      	ldrb	r3, [r3, r1]
 800c712:	4053      	eors	r3, r2
 800c714:	b2d9      	uxtb	r1, r3
 800c716:	7cfb      	ldrb	r3, [r7, #19]
 800c718:	461a      	mov	r2, r3
 800c71a:	4b1e      	ldr	r3, [pc, #120]	@ (800c794 <mix_sub_columns+0x348>)
 800c71c:	5c9a      	ldrb	r2, [r3, r2]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	330d      	adds	r3, #13
 800c722:	404a      	eors	r2, r1
 800c724:	b2d2      	uxtb	r2, r2
 800c726:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c728:	7d3b      	ldrb	r3, [r7, #20]
 800c72a:	461a      	mov	r2, r3
 800c72c:	4b19      	ldr	r3, [pc, #100]	@ (800c794 <mix_sub_columns+0x348>)
 800c72e:	5c9a      	ldrb	r2, [r3, r2]
 800c730:	7a7b      	ldrb	r3, [r7, #9]
 800c732:	4619      	mov	r1, r3
 800c734:	4b17      	ldr	r3, [pc, #92]	@ (800c794 <mix_sub_columns+0x348>)
 800c736:	5c5b      	ldrb	r3, [r3, r1]
 800c738:	4053      	eors	r3, r2
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	7bbb      	ldrb	r3, [r7, #14]
 800c73e:	4619      	mov	r1, r3
 800c740:	4b15      	ldr	r3, [pc, #84]	@ (800c798 <mix_sub_columns+0x34c>)
 800c742:	5c5b      	ldrb	r3, [r3, r1]
 800c744:	4053      	eors	r3, r2
 800c746:	b2d9      	uxtb	r1, r3
 800c748:	7cfb      	ldrb	r3, [r7, #19]
 800c74a:	461a      	mov	r2, r3
 800c74c:	4b13      	ldr	r3, [pc, #76]	@ (800c79c <mix_sub_columns+0x350>)
 800c74e:	5c9a      	ldrb	r2, [r3, r2]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	330e      	adds	r3, #14
 800c754:	404a      	eors	r2, r1
 800c756:	b2d2      	uxtb	r2, r2
 800c758:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c75a:	7d3b      	ldrb	r3, [r7, #20]
 800c75c:	461a      	mov	r2, r3
 800c75e:	4b0f      	ldr	r3, [pc, #60]	@ (800c79c <mix_sub_columns+0x350>)
 800c760:	5c9a      	ldrb	r2, [r3, r2]
 800c762:	7a7b      	ldrb	r3, [r7, #9]
 800c764:	4619      	mov	r1, r3
 800c766:	4b0b      	ldr	r3, [pc, #44]	@ (800c794 <mix_sub_columns+0x348>)
 800c768:	5c5b      	ldrb	r3, [r3, r1]
 800c76a:	4053      	eors	r3, r2
 800c76c:	b2da      	uxtb	r2, r3
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	4619      	mov	r1, r3
 800c772:	4b08      	ldr	r3, [pc, #32]	@ (800c794 <mix_sub_columns+0x348>)
 800c774:	5c5b      	ldrb	r3, [r3, r1]
 800c776:	4053      	eors	r3, r2
 800c778:	b2d9      	uxtb	r1, r3
 800c77a:	7cfb      	ldrb	r3, [r7, #19]
 800c77c:	461a      	mov	r2, r3
 800c77e:	4b06      	ldr	r3, [pc, #24]	@ (800c798 <mix_sub_columns+0x34c>)
 800c780:	5c9a      	ldrb	r2, [r3, r2]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	330f      	adds	r3, #15
 800c786:	404a      	eors	r2, r1
 800c788:	b2d2      	uxtb	r2, r2
 800c78a:	701a      	strb	r2, [r3, #0]
  }
 800c78c:	bf00      	nop
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	0801db48 	.word	0x0801db48
 800c798:	0801dc48 	.word	0x0801dc48
 800c79c:	0801dd48 	.word	0x0801dd48

0800c7a0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	607a      	str	r2, [r7, #4]
 800c7ac:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c7ae:	7afb      	ldrb	r3, [r7, #11]
 800c7b0:	3b10      	subs	r3, #16
 800c7b2:	2b10      	cmp	r3, #16
 800c7b4:	bf8c      	ite	hi
 800c7b6:	2201      	movhi	r2, #1
 800c7b8:	2200      	movls	r2, #0
 800c7ba:	b2d2      	uxtb	r2, r2
 800c7bc:	2a00      	cmp	r2, #0
 800c7be:	d10b      	bne.n	800c7d8 <lorawan_aes_set_key+0x38>
 800c7c0:	4a64      	ldr	r2, [pc, #400]	@ (800c954 <lorawan_aes_set_key+0x1b4>)
 800c7c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c7c6:	f003 0301 	and.w	r3, r3, #1
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	bf14      	ite	ne
 800c7ce:	2301      	movne	r3, #1
 800c7d0:	2300      	moveq	r3, #0
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d105      	bne.n	800c7e4 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800c7e0:	23ff      	movs	r3, #255	@ 0xff
 800c7e2:	e0b3      	b.n	800c94c <lorawan_aes_set_key+0x1ac>
        break;
 800c7e4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	7afa      	ldrb	r2, [r7, #11]
 800c7ea:	68f9      	ldr	r1, [r7, #12]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7ff fbfc 	bl	800bfea <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c7f2:	7afb      	ldrb	r3, [r7, #11]
 800c7f4:	331c      	adds	r3, #28
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c7fc:	7c7b      	ldrb	r3, [r7, #17]
 800c7fe:	091b      	lsrs	r3, r3, #4
 800c800:	b2db      	uxtb	r3, r3
 800c802:	3b01      	subs	r3, #1
 800c804:	b2da      	uxtb	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c80c:	7afb      	ldrb	r3, [r7, #11]
 800c80e:	75fb      	strb	r3, [r7, #23]
 800c810:	2301      	movs	r3, #1
 800c812:	75bb      	strb	r3, [r7, #22]
 800c814:	e094      	b.n	800c940 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c816:	7dfb      	ldrb	r3, [r7, #23]
 800c818:	3b04      	subs	r3, #4
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	5cd3      	ldrb	r3, [r2, r3]
 800c81e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c820:	7dfb      	ldrb	r3, [r7, #23]
 800c822:	3b03      	subs	r3, #3
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	5cd3      	ldrb	r3, [r2, r3]
 800c828:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
 800c82c:	3b02      	subs	r3, #2
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	5cd3      	ldrb	r3, [r2, r3]
 800c832:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	3b01      	subs	r3, #1
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	5cd3      	ldrb	r3, [r2, r3]
 800c83c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c83e:	7dfb      	ldrb	r3, [r7, #23]
 800c840:	7afa      	ldrb	r2, [r7, #11]
 800c842:	fbb3 f1f2 	udiv	r1, r3, r2
 800c846:	fb01 f202 	mul.w	r2, r1, r2
 800c84a:	1a9b      	subs	r3, r3, r2
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d128      	bne.n	800c8a4 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800c852:	7d7b      	ldrb	r3, [r7, #21]
 800c854:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c856:	7d3b      	ldrb	r3, [r7, #20]
 800c858:	4a3f      	ldr	r2, [pc, #252]	@ (800c958 <lorawan_aes_set_key+0x1b8>)
 800c85a:	5cd2      	ldrb	r2, [r2, r3]
 800c85c:	7dbb      	ldrb	r3, [r7, #22]
 800c85e:	4053      	eors	r3, r2
 800c860:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c862:	7cfb      	ldrb	r3, [r7, #19]
 800c864:	4a3c      	ldr	r2, [pc, #240]	@ (800c958 <lorawan_aes_set_key+0x1b8>)
 800c866:	5cd3      	ldrb	r3, [r2, r3]
 800c868:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c86a:	7cbb      	ldrb	r3, [r7, #18]
 800c86c:	4a3a      	ldr	r2, [pc, #232]	@ (800c958 <lorawan_aes_set_key+0x1b8>)
 800c86e:	5cd3      	ldrb	r3, [r2, r3]
 800c870:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c872:	7c3b      	ldrb	r3, [r7, #16]
 800c874:	4a38      	ldr	r2, [pc, #224]	@ (800c958 <lorawan_aes_set_key+0x1b8>)
 800c876:	5cd3      	ldrb	r3, [r2, r3]
 800c878:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c87a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800c87e:	005b      	lsls	r3, r3, #1
 800c880:	b25a      	sxtb	r2, r3
 800c882:	7dbb      	ldrb	r3, [r7, #22]
 800c884:	09db      	lsrs	r3, r3, #7
 800c886:	b2db      	uxtb	r3, r3
 800c888:	b25b      	sxtb	r3, r3
 800c88a:	4619      	mov	r1, r3
 800c88c:	0049      	lsls	r1, r1, #1
 800c88e:	440b      	add	r3, r1
 800c890:	4619      	mov	r1, r3
 800c892:	00c8      	lsls	r0, r1, #3
 800c894:	4619      	mov	r1, r3
 800c896:	4603      	mov	r3, r0
 800c898:	440b      	add	r3, r1
 800c89a:	b25b      	sxtb	r3, r3
 800c89c:	4053      	eors	r3, r2
 800c89e:	b25b      	sxtb	r3, r3
 800c8a0:	75bb      	strb	r3, [r7, #22]
 800c8a2:	e01c      	b.n	800c8de <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c8a4:	7afb      	ldrb	r3, [r7, #11]
 800c8a6:	2b18      	cmp	r3, #24
 800c8a8:	d919      	bls.n	800c8de <lorawan_aes_set_key+0x13e>
 800c8aa:	7dfb      	ldrb	r3, [r7, #23]
 800c8ac:	7afa      	ldrb	r2, [r7, #11]
 800c8ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8b2:	fb01 f202 	mul.w	r2, r1, r2
 800c8b6:	1a9b      	subs	r3, r3, r2
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b10      	cmp	r3, #16
 800c8bc:	d10f      	bne.n	800c8de <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800c8be:	7d7b      	ldrb	r3, [r7, #21]
 800c8c0:	4a25      	ldr	r2, [pc, #148]	@ (800c958 <lorawan_aes_set_key+0x1b8>)
 800c8c2:	5cd3      	ldrb	r3, [r2, r3]
 800c8c4:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800c8c6:	7d3b      	ldrb	r3, [r7, #20]
 800c8c8:	4a23      	ldr	r2, [pc, #140]	@ (800c958 <lorawan_aes_set_key+0x1b8>)
 800c8ca:	5cd3      	ldrb	r3, [r2, r3]
 800c8cc:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800c8ce:	7cfb      	ldrb	r3, [r7, #19]
 800c8d0:	4a21      	ldr	r2, [pc, #132]	@ (800c958 <lorawan_aes_set_key+0x1b8>)
 800c8d2:	5cd3      	ldrb	r3, [r2, r3]
 800c8d4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800c8d6:	7cbb      	ldrb	r3, [r7, #18]
 800c8d8:	4a1f      	ldr	r2, [pc, #124]	@ (800c958 <lorawan_aes_set_key+0x1b8>)
 800c8da:	5cd3      	ldrb	r3, [r2, r3]
 800c8dc:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800c8de:	7dfa      	ldrb	r2, [r7, #23]
 800c8e0:	7afb      	ldrb	r3, [r7, #11]
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c8e6:	7c3b      	ldrb	r3, [r7, #16]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	5cd1      	ldrb	r1, [r2, r3]
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
 800c8ee:	7d7a      	ldrb	r2, [r7, #21]
 800c8f0:	404a      	eors	r2, r1
 800c8f2:	b2d1      	uxtb	r1, r2
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c8f8:	7c3b      	ldrb	r3, [r7, #16]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	5cd1      	ldrb	r1, [r2, r3]
 800c900:	7dfb      	ldrb	r3, [r7, #23]
 800c902:	3301      	adds	r3, #1
 800c904:	7d3a      	ldrb	r2, [r7, #20]
 800c906:	404a      	eors	r2, r1
 800c908:	b2d1      	uxtb	r1, r2
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c90e:	7c3b      	ldrb	r3, [r7, #16]
 800c910:	3302      	adds	r3, #2
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	5cd1      	ldrb	r1, [r2, r3]
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	3302      	adds	r3, #2
 800c91a:	7cfa      	ldrb	r2, [r7, #19]
 800c91c:	404a      	eors	r2, r1
 800c91e:	b2d1      	uxtb	r1, r2
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c924:	7c3b      	ldrb	r3, [r7, #16]
 800c926:	3303      	adds	r3, #3
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	5cd1      	ldrb	r1, [r2, r3]
 800c92c:	7dfb      	ldrb	r3, [r7, #23]
 800c92e:	3303      	adds	r3, #3
 800c930:	7cba      	ldrb	r2, [r7, #18]
 800c932:	404a      	eors	r2, r1
 800c934:	b2d1      	uxtb	r1, r2
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
 800c93c:	3304      	adds	r3, #4
 800c93e:	75fb      	strb	r3, [r7, #23]
 800c940:	7dfa      	ldrb	r2, [r7, #23]
 800c942:	7c7b      	ldrb	r3, [r7, #17]
 800c944:	429a      	cmp	r2, r3
 800c946:	f4ff af66 	bcc.w	800c816 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3718      	adds	r7, #24
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	00010101 	.word	0x00010101
 800c958:	0801db48 	.word	0x0801db48

0800c95c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08a      	sub	sp, #40	@ 0x28
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d038      	beq.n	800c9e4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	f107 0314 	add.w	r3, r7, #20
 800c978:	68f9      	ldr	r1, [r7, #12]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7ff fc07 	bl	800c18e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c980:	2301      	movs	r3, #1
 800c982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c986:	e014      	b.n	800c9b2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c988:	f107 0314 	add.w	r3, r7, #20
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff fd5d 	bl	800c44c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c998:	0112      	lsls	r2, r2, #4
 800c99a:	441a      	add	r2, r3
 800c99c:	f107 0314 	add.w	r3, r7, #20
 800c9a0:	4611      	mov	r1, r2
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7ff fcab 	bl	800c2fe <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c9b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d3e3      	bcc.n	800c988 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c9c0:	f107 0314 	add.w	r3, r7, #20
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff fca7 	bl	800c318 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c9d0:	0112      	lsls	r2, r2, #4
 800c9d2:	441a      	add	r2, r3
 800c9d4:	f107 0314 	add.w	r3, r7, #20
 800c9d8:	4619      	mov	r1, r3
 800c9da:	68b8      	ldr	r0, [r7, #8]
 800c9dc:	f7ff fbd7 	bl	800c18e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e000      	b.n	800c9e6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800c9e4:	23ff      	movs	r3, #255	@ 0xff
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3728      	adds	r7, #40	@ 0x28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800c9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9f2:	b0a1      	sub	sp, #132	@ 0x84
 800c9f4:	af12      	add	r7, sp, #72	@ 0x48
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800c9fc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ca00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ca04:	4611      	mov	r1, r2
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 fa12 	bl	800ce30 <SecureElementGetKeyByID>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d174      	bne.n	800cafc <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ca12:	2300      	movs	r3, #0
 800ca14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ca18:	e06c      	b.n	800caf4 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800ca1a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800ca1e:	4939      	ldr	r1, [pc, #228]	@ (800cb04 <PrintKey+0x114>)
 800ca20:	4613      	mov	r3, r2
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	4413      	add	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	440b      	add	r3, r1
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d15a      	bne.n	800caea <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800ca34:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800ca38:	4932      	ldr	r1, [pc, #200]	@ (800cb04 <PrintKey+0x114>)
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	4413      	add	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	440b      	add	r3, r1
 800ca44:	3308      	adds	r3, #8
 800ca46:	6819      	ldr	r1, [r3, #0]
 800ca48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4a:	785b      	ldrb	r3, [r3, #1]
 800ca4c:	461d      	mov	r5, r3
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca50:	789b      	ldrb	r3, [r3, #2]
 800ca52:	461e      	mov	r6, r3
 800ca54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca56:	78db      	ldrb	r3, [r3, #3]
 800ca58:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca5c:	791b      	ldrb	r3, [r3, #4]
 800ca5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca62:	795b      	ldrb	r3, [r3, #5]
 800ca64:	623b      	str	r3, [r7, #32]
 800ca66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca68:	799b      	ldrb	r3, [r3, #6]
 800ca6a:	61fb      	str	r3, [r7, #28]
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6e:	79db      	ldrb	r3, [r3, #7]
 800ca70:	61bb      	str	r3, [r7, #24]
 800ca72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca74:	7a1b      	ldrb	r3, [r3, #8]
 800ca76:	617b      	str	r3, [r7, #20]
 800ca78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7a:	7a5b      	ldrb	r3, [r3, #9]
 800ca7c:	613b      	str	r3, [r7, #16]
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca80:	7a9b      	ldrb	r3, [r3, #10]
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca86:	7adb      	ldrb	r3, [r3, #11]
 800ca88:	60bb      	str	r3, [r7, #8]
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8c:	7b1b      	ldrb	r3, [r3, #12]
 800ca8e:	607b      	str	r3, [r7, #4]
 800ca90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca92:	7b5b      	ldrb	r3, [r3, #13]
 800ca94:	461c      	mov	r4, r3
 800ca96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca98:	7b9b      	ldrb	r3, [r3, #14]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9e:	7bdb      	ldrb	r3, [r3, #15]
 800caa0:	461a      	mov	r2, r3
 800caa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa4:	7c1b      	ldrb	r3, [r3, #16]
 800caa6:	9310      	str	r3, [sp, #64]	@ 0x40
 800caa8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800caaa:	900e      	str	r0, [sp, #56]	@ 0x38
 800caac:	940d      	str	r4, [sp, #52]	@ 0x34
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	920c      	str	r2, [sp, #48]	@ 0x30
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cab6:	68fa      	ldr	r2, [r7, #12]
 800cab8:	920a      	str	r2, [sp, #40]	@ 0x28
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	9208      	str	r2, [sp, #32]
 800cac2:	69ba      	ldr	r2, [r7, #24]
 800cac4:	9207      	str	r2, [sp, #28]
 800cac6:	69fa      	ldr	r2, [r7, #28]
 800cac8:	9206      	str	r2, [sp, #24]
 800caca:	6a3a      	ldr	r2, [r7, #32]
 800cacc:	9205      	str	r2, [sp, #20]
 800cace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cad0:	9204      	str	r2, [sp, #16]
 800cad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad4:	9303      	str	r3, [sp, #12]
 800cad6:	9602      	str	r6, [sp, #8]
 800cad8:	9501      	str	r5, [sp, #4]
 800cada:	9100      	str	r1, [sp, #0]
 800cadc:	4b0a      	ldr	r3, [pc, #40]	@ (800cb08 <PrintKey+0x118>)
 800cade:	2200      	movs	r2, #0
 800cae0:	2100      	movs	r1, #0
 800cae2:	2002      	movs	r0, #2
 800cae4:	f00f ffde 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
 800cae8:	e008      	b.n	800cafc <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800caea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800caee:	3301      	adds	r3, #1
 800caf0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800caf4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800caf8:	2b0a      	cmp	r3, #10
 800cafa:	d98e      	bls.n	800ca1a <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800cafc:	373c      	adds	r7, #60	@ 0x3c
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb02:	bf00      	nop
 800cb04:	0801de48 	.word	0x0801de48
 800cb08:	0801d6c8 	.word	0x0801d6c8

0800cb0c <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800cb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0e:	b091      	sub	sp, #68	@ 0x44
 800cb10:	af08      	add	r7, sp, #32
 800cb12:	4603      	mov	r3, r0
 800cb14:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800cb1a:	f107 0310 	add.w	r3, r7, #16
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fbd8 	bl	800d2d4 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800cb24:	7c3b      	ldrb	r3, [r7, #16]
 800cb26:	7c7a      	ldrb	r2, [r7, #17]
 800cb28:	7cb9      	ldrb	r1, [r7, #18]
 800cb2a:	7cf8      	ldrb	r0, [r7, #19]
 800cb2c:	7d3c      	ldrb	r4, [r7, #20]
 800cb2e:	7d7d      	ldrb	r5, [r7, #21]
 800cb30:	7dbe      	ldrb	r6, [r7, #22]
 800cb32:	f897 c017 	ldrb.w	ip, [r7, #23]
 800cb36:	f8cd c01c 	str.w	ip, [sp, #28]
 800cb3a:	9606      	str	r6, [sp, #24]
 800cb3c:	9505      	str	r5, [sp, #20]
 800cb3e:	9404      	str	r4, [sp, #16]
 800cb40:	9003      	str	r0, [sp, #12]
 800cb42:	9102      	str	r1, [sp, #8]
 800cb44:	9201      	str	r2, [sp, #4]
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	4b24      	ldr	r3, [pc, #144]	@ (800cbdc <PrintIds+0xd0>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	2002      	movs	r0, #2
 800cb50:	f00f ffa8 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800cb54:	f107 0318 	add.w	r3, r7, #24
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 fbeb 	bl	800d334 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800cb5e:	7e3b      	ldrb	r3, [r7, #24]
 800cb60:	7e7a      	ldrb	r2, [r7, #25]
 800cb62:	7eb9      	ldrb	r1, [r7, #26]
 800cb64:	7ef8      	ldrb	r0, [r7, #27]
 800cb66:	7f3c      	ldrb	r4, [r7, #28]
 800cb68:	7f7d      	ldrb	r5, [r7, #29]
 800cb6a:	7fbe      	ldrb	r6, [r7, #30]
 800cb6c:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800cb70:	f8cd c01c 	str.w	ip, [sp, #28]
 800cb74:	9606      	str	r6, [sp, #24]
 800cb76:	9505      	str	r5, [sp, #20]
 800cb78:	9404      	str	r4, [sp, #16]
 800cb7a:	9003      	str	r0, [sp, #12]
 800cb7c:	9102      	str	r1, [sp, #8]
 800cb7e:	9201      	str	r2, [sp, #4]
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	4b17      	ldr	r3, [pc, #92]	@ (800cbe0 <PrintIds+0xd4>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	2100      	movs	r1, #0
 800cb88:	2002      	movs	r0, #2
 800cb8a:	f00f ff8b 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800cb8e:	f107 020c 	add.w	r2, r7, #12
 800cb92:	79fb      	ldrb	r3, [r7, #7]
 800cb94:	4611      	mov	r1, r2
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 fbfe 	bl	800d398 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800cb9c:	f107 030c 	add.w	r3, r7, #12
 800cba0:	3303      	adds	r3, #3
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	461a      	mov	r2, r3
 800cba6:	f107 030c 	add.w	r3, r7, #12
 800cbaa:	3302      	adds	r3, #2
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f107 030c 	add.w	r3, r7, #12
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f107 030c 	add.w	r3, r7, #12
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	9303      	str	r3, [sp, #12]
 800cbc2:	9002      	str	r0, [sp, #8]
 800cbc4:	9101      	str	r1, [sp, #4]
 800cbc6:	9200      	str	r2, [sp, #0]
 800cbc8:	4b06      	ldr	r3, [pc, #24]	@ (800cbe4 <PrintIds+0xd8>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2100      	movs	r1, #0
 800cbce:	2002      	movs	r0, #2
 800cbd0:	f00f ff68 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800cbd4:	bf00      	nop
 800cbd6:	3724      	adds	r7, #36	@ 0x24
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbdc:	0801d724 	.word	0x0801d724
 800cbe0:	0801d764 	.word	0x0801d764
 800cbe4:	0801d7a4 	.word	0x0801d7a4

0800cbe8 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	6039      	str	r1, [r7, #0]
 800cbf2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73fb      	strb	r3, [r7, #15]
 800cbf8:	e01a      	b.n	800cc30 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cbfa:	4b12      	ldr	r3, [pc, #72]	@ (800cc44 <GetKeyByID+0x5c>)
 800cbfc:	6819      	ldr	r1, [r3, #0]
 800cbfe:	7bfa      	ldrb	r2, [r7, #15]
 800cc00:	4613      	mov	r3, r2
 800cc02:	011b      	lsls	r3, r3, #4
 800cc04:	4413      	add	r3, r2
 800cc06:	440b      	add	r3, r1
 800cc08:	3318      	adds	r3, #24
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	79fa      	ldrb	r2, [r7, #7]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d10b      	bne.n	800cc2a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800cc12:	4b0c      	ldr	r3, [pc, #48]	@ (800cc44 <GetKeyByID+0x5c>)
 800cc14:	6819      	ldr	r1, [r3, #0]
 800cc16:	7bfa      	ldrb	r2, [r7, #15]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	011b      	lsls	r3, r3, #4
 800cc1c:	4413      	add	r3, r2
 800cc1e:	3318      	adds	r3, #24
 800cc20:	18ca      	adds	r2, r1, r3
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cc26:	2300      	movs	r3, #0
 800cc28:	e006      	b.n	800cc38 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cc2a:	7bfb      	ldrb	r3, [r7, #15]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	73fb      	strb	r3, [r7, #15]
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
 800cc32:	2b0a      	cmp	r3, #10
 800cc34:	d9e1      	bls.n	800cbfa <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cc36:	2303      	movs	r3, #3
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bc80      	pop	{r7}
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	200005f8 	.word	0x200005f8

0800cc48 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800cc48:	b590      	push	{r4, r7, lr}
 800cc4a:	b0d1      	sub	sp, #324	@ 0x144
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800cc52:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800cc56:	6020      	str	r0, [r4, #0]
 800cc58:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800cc5c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800cc60:	6001      	str	r1, [r0, #0]
 800cc62:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800cc66:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800cc6a:	600a      	str	r2, [r1, #0]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cc72:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800cc76:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800cc78:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cc7c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d003      	beq.n	800cc8e <ComputeCmac+0x46>
 800cc86:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cc8e:	2302      	movs	r3, #2
 800cc90:	e05d      	b.n	800cd4e <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800cc92:	f107 0314 	add.w	r3, r7, #20
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe fefe 	bl	800ba98 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800cc9c:	f107 0210 	add.w	r2, r7, #16
 800cca0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cca4:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	4611      	mov	r1, r2
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7ff ff9b 	bl	800cbe8 <GetKeyByID>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ccb8:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d144      	bne.n	800cd4a <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ccc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ccc4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	f107 0314 	add.w	r3, r7, #20
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fe fef9 	bl	800baca <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ccd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ccdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d009      	beq.n	800ccfa <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800cce6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ccea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ccee:	f107 0014 	add.w	r0, r7, #20
 800ccf2:	2210      	movs	r2, #16
 800ccf4:	6819      	ldr	r1, [r3, #0]
 800ccf6:	f7fe fef7 	bl	800bae8 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ccfa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ccfe:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800cd02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cd06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cd0a:	f107 0014 	add.w	r0, r7, #20
 800cd0e:	6812      	ldr	r2, [r2, #0]
 800cd10:	6819      	ldr	r1, [r3, #0]
 800cd12:	f7fe fee9 	bl	800bae8 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800cd16:	f107 0214 	add.w	r2, r7, #20
 800cd1a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800cd1e:	4611      	mov	r1, r2
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fe ffa3 	bl	800bc6c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800cd26:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800cd30:	021b      	lsls	r3, r3, #8
 800cd32:	431a      	orrs	r2, r3
 800cd34:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800cd38:	041b      	lsls	r3, r3, #16
 800cd3a:	431a      	orrs	r2, r3
 800cd3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800cd40:	061b      	lsls	r3, r3, #24
 800cd42:	431a      	orrs	r2, r3
 800cd44:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800cd48:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800cd4a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd90      	pop	{r4, r7, pc}

0800cd58 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cd66:	2302      	movs	r3, #2
 800cd68:	e00a      	b.n	800cd80 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800cd6a:	4a07      	ldr	r2, [pc, #28]	@ (800cd88 <SecureElementInit+0x30>)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800cd70:	4b05      	ldr	r3, [pc, #20]	@ (800cd88 <SecureElementInit+0x30>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	22d8      	movs	r2, #216	@ 0xd8
 800cd76:	4905      	ldr	r1, [pc, #20]	@ (800cd8c <SecureElementInit+0x34>)
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f00b fb36 	bl	80183ea <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	200005f8 	.word	0x200005f8
 800cd8c:	0801e064 	.word	0x0801e064

0800cd90 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800cd9e:	f107 030c 	add.w	r3, r7, #12
 800cda2:	4618      	mov	r0, r3
 800cda4:	f000 fa96 	bl	800d2d4 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800cda8:	f107 0308 	add.w	r3, r7, #8
 800cdac:	4619      	mov	r1, r3
 800cdae:	2001      	movs	r0, #1
 800cdb0:	f000 faf2 	bl	800d398 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d024      	beq.n	800ce04 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	75bb      	strb	r3, [r7, #22]
 800cdc2:	e00c      	b.n	800cdde <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800cdc4:	7dbb      	ldrb	r3, [r7, #22]
 800cdc6:	3318      	adds	r3, #24
 800cdc8:	443b      	add	r3, r7
 800cdca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	75fb      	strb	r3, [r7, #23]
                break;
 800cdd6:	e005      	b.n	800cde4 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800cdd8:	7dbb      	ldrb	r3, [r7, #22]
 800cdda:	3301      	adds	r3, #1
 800cddc:	75bb      	strb	r3, [r7, #22]
 800cdde:	7dbb      	ldrb	r3, [r7, #22]
 800cde0:	2b07      	cmp	r3, #7
 800cde2:	d9ef      	bls.n	800cdc4 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800cde4:	7dfb      	ldrb	r3, [r7, #23]
 800cde6:	f083 0301 	eor.w	r3, r3, #1
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d009      	beq.n	800ce04 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800cdf0:	f107 020c 	add.w	r2, r7, #12
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4610      	mov	r0, r2
 800cdf8:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800cdfa:	f107 030c 	add.w	r3, r7, #12
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 fa50 	bl	800d2a4 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00c      	beq.n	800ce24 <SecureElementInitMcuID+0x94>
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d109      	bne.n	800ce24 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800ce10:	f107 0208 	add.w	r2, r7, #8
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	4610      	mov	r0, r2
 800ce18:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	2001      	movs	r0, #1
 800ce20:	f000 faa0 	bl	800d364 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
	...

0800ce30 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ce30:	b480      	push	{r7}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	4603      	mov	r3, r0
 800ce38:	6039      	str	r1, [r7, #0]
 800ce3a:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]
 800ce40:	e01a      	b.n	800ce78 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ce42:	4b12      	ldr	r3, [pc, #72]	@ (800ce8c <SecureElementGetKeyByID+0x5c>)
 800ce44:	6819      	ldr	r1, [r3, #0]
 800ce46:	7bfa      	ldrb	r2, [r7, #15]
 800ce48:	4613      	mov	r3, r2
 800ce4a:	011b      	lsls	r3, r3, #4
 800ce4c:	4413      	add	r3, r2
 800ce4e:	440b      	add	r3, r1
 800ce50:	3318      	adds	r3, #24
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	79fa      	ldrb	r2, [r7, #7]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d10b      	bne.n	800ce72 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ce5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ce8c <SecureElementGetKeyByID+0x5c>)
 800ce5c:	6819      	ldr	r1, [r3, #0]
 800ce5e:	7bfa      	ldrb	r2, [r7, #15]
 800ce60:	4613      	mov	r3, r2
 800ce62:	011b      	lsls	r3, r3, #4
 800ce64:	4413      	add	r3, r2
 800ce66:	3318      	adds	r3, #24
 800ce68:	18ca      	adds	r2, r1, r3
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e006      	b.n	800ce80 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
 800ce74:	3301      	adds	r3, #1
 800ce76:	73fb      	strb	r3, [r7, #15]
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
 800ce7a:	2b0a      	cmp	r3, #10
 800ce7c:	d9e1      	bls.n	800ce42 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ce7e:	2303      	movs	r3, #3
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bc80      	pop	{r7}
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	200005f8 	.word	0x200005f8

0800ce90 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800ce94:	2000      	movs	r0, #0
 800ce96:	f7ff fdab 	bl	800c9f0 <PrintKey>
    PrintKey( NWK_KEY );
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	f7ff fda8 	bl	800c9f0 <PrintKey>
    PrintKey( APP_S_KEY );
 800cea0:	2009      	movs	r0, #9
 800cea2:	f7ff fda5 	bl	800c9f0 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800cea6:	2008      	movs	r0, #8
 800cea8:	f7ff fda2 	bl	800c9f0 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800ceac:	2000      	movs	r0, #0
 800ceae:	f7ff fe2d 	bl	800cb0c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800cec2:	200b      	movs	r0, #11
 800cec4:	f7ff fd94 	bl	800c9f0 <PrintKey>
    PrintKey( MC_KE_KEY );
 800cec8:	200c      	movs	r0, #12
 800ceca:	f7ff fd91 	bl	800c9f0 <PrintKey>
    PrintKey( APP_S_KEY );
 800cece:	2009      	movs	r0, #9
 800ced0:	f7ff fd8e 	bl	800c9f0 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ced4:	2008      	movs	r0, #8
 800ced6:	f7ff fd8b 	bl	800c9f0 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800ceda:	200a      	movs	r0, #10
 800cedc:	f7ff fd88 	bl	800c9f0 <PrintKey>
    PrintIds( mode );
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff fe12 	bl	800cb0c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
	...

0800cef4 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b088      	sub	sp, #32
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	4603      	mov	r3, r0
 800cefc:	6039      	str	r1, [r7, #0]
 800cefe:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d101      	bne.n	800cf0a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf06:	2302      	movs	r3, #2
 800cf08:	e04b      	b.n	800cfa2 <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	77fb      	strb	r3, [r7, #31]
 800cf0e:	e044      	b.n	800cf9a <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cf10:	4b26      	ldr	r3, [pc, #152]	@ (800cfac <SecureElementSetKey+0xb8>)
 800cf12:	6819      	ldr	r1, [r3, #0]
 800cf14:	7ffa      	ldrb	r2, [r7, #31]
 800cf16:	4613      	mov	r3, r2
 800cf18:	011b      	lsls	r3, r3, #4
 800cf1a:	4413      	add	r3, r2
 800cf1c:	440b      	add	r3, r1
 800cf1e:	3318      	adds	r3, #24
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	79fa      	ldrb	r2, [r7, #7]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d135      	bne.n	800cf94 <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	2b0d      	cmp	r3, #13
 800cf2c:	d122      	bne.n	800cf74 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cf2e:	2306      	movs	r3, #6
 800cf30:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800cf32:	f107 030c 	add.w	r3, r7, #12
 800cf36:	2200      	movs	r2, #0
 800cf38:	601a      	str	r2, [r3, #0]
 800cf3a:	605a      	str	r2, [r3, #4]
 800cf3c:	609a      	str	r2, [r3, #8]
 800cf3e:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800cf40:	f107 030c 	add.w	r3, r7, #12
 800cf44:	220c      	movs	r2, #12
 800cf46:	2110      	movs	r1, #16
 800cf48:	6838      	ldr	r0, [r7, #0]
 800cf4a:	f000 f877 	bl	800d03c <SecureElementAesEncrypt>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800cf52:	4b16      	ldr	r3, [pc, #88]	@ (800cfac <SecureElementSetKey+0xb8>)
 800cf54:	6819      	ldr	r1, [r3, #0]
 800cf56:	7ffa      	ldrb	r2, [r7, #31]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	011b      	lsls	r3, r3, #4
 800cf5c:	4413      	add	r3, r2
 800cf5e:	3318      	adds	r3, #24
 800cf60:	440b      	add	r3, r1
 800cf62:	3301      	adds	r3, #1
 800cf64:	f107 010c 	add.w	r1, r7, #12
 800cf68:	2210      	movs	r2, #16
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f00b fa3d 	bl	80183ea <memcpy1>
                return retval;
 800cf70:	7fbb      	ldrb	r3, [r7, #30]
 800cf72:	e016      	b.n	800cfa2 <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800cf74:	4b0d      	ldr	r3, [pc, #52]	@ (800cfac <SecureElementSetKey+0xb8>)
 800cf76:	6819      	ldr	r1, [r3, #0]
 800cf78:	7ffa      	ldrb	r2, [r7, #31]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	011b      	lsls	r3, r3, #4
 800cf7e:	4413      	add	r3, r2
 800cf80:	3318      	adds	r3, #24
 800cf82:	440b      	add	r3, r1
 800cf84:	3301      	adds	r3, #1
 800cf86:	2210      	movs	r2, #16
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f00b fa2d 	bl	80183ea <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800cf90:	2300      	movs	r3, #0
 800cf92:	e006      	b.n	800cfa2 <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cf94:	7ffb      	ldrb	r3, [r7, #31]
 800cf96:	3301      	adds	r3, #1
 800cf98:	77fb      	strb	r3, [r7, #31]
 800cf9a:	7ffb      	ldrb	r3, [r7, #31]
 800cf9c:	2b0a      	cmp	r3, #10
 800cf9e:	d9b7      	bls.n	800cf10 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cfa0:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3720      	adds	r7, #32
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	200005f8 	.word	0x200005f8

0800cfb0 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af02      	add	r7, sp, #8
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
 800cfbc:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800cfbe:	78fb      	ldrb	r3, [r7, #3]
 800cfc0:	2b0b      	cmp	r3, #11
 800cfc2:	d901      	bls.n	800cfc8 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	e009      	b.n	800cfdc <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800cfc8:	78fa      	ldrb	r2, [r7, #3]
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	4613      	mov	r3, r2
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	68b9      	ldr	r1, [r7, #8]
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f7ff fe37 	bl	800cc48 <ComputeCmac>
 800cfda:	4603      	mov	r3, r0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b088      	sub	sp, #32
 800cfe8:	af02      	add	r7, sp, #8
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
 800cff0:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d101      	bne.n	800cffc <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cff8:	2302      	movs	r3, #2
 800cffa:	e01b      	b.n	800d034 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800cffc:	2306      	movs	r3, #6
 800cffe:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d004:	78fa      	ldrb	r2, [r7, #3]
 800d006:	f107 0310 	add.w	r3, r7, #16
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	4613      	mov	r3, r2
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	68f9      	ldr	r1, [r7, #12]
 800d012:	2000      	movs	r0, #0
 800d014:	f7ff fe18 	bl	800cc48 <ComputeCmac>
 800d018:	4603      	mov	r3, r0
 800d01a:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d01c:	7dfb      	ldrb	r3, [r7, #23]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800d022:	7dfb      	ldrb	r3, [r7, #23]
 800d024:	e006      	b.n	800d034 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d001      	beq.n	800d032 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d02e:	2301      	movs	r3, #1
 800d030:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d032:	7dfb      	ldrb	r3, [r7, #23]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b0c2      	sub	sp, #264	@ 0x108
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d048:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800d04c:	6001      	str	r1, [r0, #0]
 800d04e:	4611      	mov	r1, r2
 800d050:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d054:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d05e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d062:	460a      	mov	r2, r1
 800d064:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d006      	beq.n	800d07a <SecureElementAesEncrypt+0x3e>
 800d06c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d07a:	2302      	movs	r3, #2
 800d07c:	e059      	b.n	800d132 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800d07e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d082:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f003 030f 	and.w	r3, r3, #15
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d001      	beq.n	800d094 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d090:	2305      	movs	r3, #5
 800d092:	e04e      	b.n	800d132 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d094:	f107 0314 	add.w	r3, r7, #20
 800d098:	22f0      	movs	r2, #240	@ 0xf0
 800d09a:	2100      	movs	r1, #0
 800d09c:	4618      	mov	r0, r3
 800d09e:	f00b f9df 	bl	8018460 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d0a2:	f107 0210 	add.w	r2, r7, #16
 800d0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0aa:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7ff fd98 	bl	800cbe8 <GetKeyByID>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d0be:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d133      	bne.n	800d12e <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	f107 0214 	add.w	r2, r7, #20
 800d0ce:	2110      	movs	r1, #16
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7ff fb65 	bl	800c7a0 <lorawan_aes_set_key>

        uint8_t block = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800d0dc:	e020      	b.n	800d120 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800d0de:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	18d0      	adds	r0, r2, r3
 800d0e6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d0ea:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d0ee:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d0f2:	6812      	ldr	r2, [r2, #0]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	f107 0214 	add.w	r2, r7, #20
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	f7ff fc2e 	bl	800c95c <lorawan_aes_encrypt>
            block = block + 16;
 800d100:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d104:	3310      	adds	r3, #16
 800d106:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800d10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d10e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d112:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d116:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800d11a:	6812      	ldr	r2, [r2, #0]
 800d11c:	3a10      	subs	r2, #16
 800d11e:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800d120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d124:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1d7      	bne.n	800d0de <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d12e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800d132:	4618      	mov	r0, r3
 800d134:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b088      	sub	sp, #32
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	460b      	mov	r3, r1
 800d146:	70fb      	strb	r3, [r7, #3]
 800d148:	4613      	mov	r3, r2
 800d14a:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d101      	bne.n	800d156 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d152:	2302      	movs	r3, #2
 800d154:	e02d      	b.n	800d1b2 <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d156:	2306      	movs	r3, #6
 800d158:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800d15a:	78bb      	ldrb	r3, [r7, #2]
 800d15c:	2b0c      	cmp	r3, #12
 800d15e:	d104      	bne.n	800d16a <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d160:	78fb      	ldrb	r3, [r7, #3]
 800d162:	2b0b      	cmp	r3, #11
 800d164:	d001      	beq.n	800d16a <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d166:	2303      	movs	r3, #3
 800d168:	e023      	b.n	800d1b2 <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800d16a:	f107 030c 	add.w	r3, r7, #12
 800d16e:	2200      	movs	r2, #0
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	605a      	str	r2, [r3, #4]
 800d174:	609a      	str	r2, [r3, #8]
 800d176:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800d178:	f107 030c 	add.w	r3, r7, #12
 800d17c:	78fa      	ldrb	r2, [r7, #3]
 800d17e:	2110      	movs	r1, #16
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f7ff ff5b 	bl	800d03c <SecureElementAesEncrypt>
 800d186:	4603      	mov	r3, r0
 800d188:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d18a:	7ffb      	ldrb	r3, [r7, #31]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800d190:	7ffb      	ldrb	r3, [r7, #31]
 800d192:	e00e      	b.n	800d1b2 <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800d194:	f107 020c 	add.w	r2, r7, #12
 800d198:	78bb      	ldrb	r3, [r7, #2]
 800d19a:	4611      	mov	r1, r2
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fea9 	bl	800cef4 <SecureElementSetKey>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d1a6:	7ffb      	ldrb	r3, [r7, #31]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800d1ac:	7ffb      	ldrb	r3, [r7, #31]
 800d1ae:	e000      	b.n	800d1b2 <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d1b0:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3720      	adds	r7, #32
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b086      	sub	sp, #24
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607b      	str	r3, [r7, #4]
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	73fb      	strb	r3, [r7, #15]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d005      	beq.n	800d1de <SecureElementProcessJoinAccept+0x24>
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d002      	beq.n	800d1de <SecureElementProcessJoinAccept+0x24>
 800d1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d1de:	2302      	movs	r3, #2
 800d1e0:	e05c      	b.n	800d29c <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d1e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1e6:	2b21      	cmp	r3, #33	@ 0x21
 800d1e8:	d901      	bls.n	800d1ee <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d1ea:	2305      	movs	r3, #5
 800d1ec:	e056      	b.n	800d29c <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d1f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	6879      	ldr	r1, [r7, #4]
 800d1fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1fe:	f00b f8f4 	bl	80183ea <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	1c58      	adds	r0, r3, #1
 800d206:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	4619      	mov	r1, r3
 800d20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d210:	3301      	adds	r3, #1
 800d212:	7dfa      	ldrb	r2, [r7, #23]
 800d214:	f7ff ff12 	bl	800d03c <SecureElementAesEncrypt>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d21e:	2307      	movs	r3, #7
 800d220:	e03c      	b.n	800d29c <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d224:	330b      	adds	r3, #11
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	09db      	lsrs	r3, r3, #7
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d22e:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800d230:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d234:	3b04      	subs	r3, #4
 800d236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d238:	4413      	add	r3, r2
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	4619      	mov	r1, r3
 800d23e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d242:	3b03      	subs	r3, #3
 800d244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d246:	4413      	add	r3, r2
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	021b      	lsls	r3, r3, #8
 800d24c:	ea41 0203 	orr.w	r2, r1, r3
 800d250:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d254:	3b02      	subs	r3, #2
 800d256:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d258:	440b      	add	r3, r1
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	041b      	lsls	r3, r3, #16
 800d25e:	431a      	orrs	r2, r3
 800d260:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d264:	3b01      	subs	r3, #1
 800d266:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d268:	440b      	add	r3, r1
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	061b      	lsls	r3, r3, #24
 800d26e:	4313      	orrs	r3, r2
 800d270:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800d272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d10d      	bne.n	800d296 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d27a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d27e:	3b04      	subs	r3, #4
 800d280:	4619      	mov	r1, r3
 800d282:	2301      	movs	r3, #1
 800d284:	693a      	ldr	r2, [r7, #16]
 800d286:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d288:	f7ff feac 	bl	800cfe4 <SecureElementVerifyAesCmac>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d292:	2301      	movs	r3, #1
 800d294:	e002      	b.n	800d29c <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d296:	2304      	movs	r3, #4
 800d298:	e000      	b.n	800d29c <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	e007      	b.n	800d2c6 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800d2b6:	4b06      	ldr	r3, [pc, #24]	@ (800d2d0 <SecureElementSetDevEui+0x2c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2208      	movs	r2, #8
 800d2bc:	6879      	ldr	r1, [r7, #4]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f00b f893 	bl	80183ea <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d2c4:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	200005f8 	.word	0x200005f8

0800d2d4 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	e007      	b.n	800d2f6 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800d2e6:	4b06      	ldr	r3, [pc, #24]	@ (800d300 <SecureElementGetDevEui+0x2c>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2208      	movs	r2, #8
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f00b f87b 	bl	80183ea <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d2f4:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	200005f8 	.word	0x200005f8

0800d304 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d312:	2302      	movs	r3, #2
 800d314:	e008      	b.n	800d328 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800d316:	4b06      	ldr	r3, [pc, #24]	@ (800d330 <SecureElementSetJoinEui+0x2c>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3308      	adds	r3, #8
 800d31c:	2208      	movs	r2, #8
 800d31e:	6879      	ldr	r1, [r7, #4]
 800d320:	4618      	mov	r0, r3
 800d322:	f00b f862 	bl	80183ea <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d326:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	200005f8 	.word	0x200005f8

0800d334 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d342:	2302      	movs	r3, #2
 800d344:	e008      	b.n	800d358 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800d346:	4b06      	ldr	r3, [pc, #24]	@ (800d360 <SecureElementGetJoinEui+0x2c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	3308      	adds	r3, #8
 800d34c:	2208      	movs	r2, #8
 800d34e:	4619      	mov	r1, r3
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f00b f84a 	bl	80183ea <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d356:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	200005f8 	.word	0x200005f8

0800d364 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	4603      	mov	r3, r0
 800d36c:	6039      	str	r1, [r7, #0]
 800d36e:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	2b02      	cmp	r3, #2
 800d374:	d104      	bne.n	800d380 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800d376:	4b07      	ldr	r3, [pc, #28]	@ (800d394 <SecureElementSetDevAddr+0x30>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	611a      	str	r2, [r3, #16]
 800d37e:	e003      	b.n	800d388 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800d380:	4b04      	ldr	r3, [pc, #16]	@ (800d394 <SecureElementSetDevAddr+0x30>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	683a      	ldr	r2, [r7, #0]
 800d386:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800d388:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	bc80      	pop	{r7}
 800d392:	4770      	bx	lr
 800d394:	200005f8 	.word	0x200005f8

0800d398 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	4603      	mov	r3, r0
 800d3a0:	6039      	str	r1, [r7, #0]
 800d3a2:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d101      	bne.n	800d3ae <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d3aa:	2302      	movs	r3, #2
 800d3ac:	e00e      	b.n	800d3cc <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d105      	bne.n	800d3c0 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800d3b4:	4b08      	ldr	r3, [pc, #32]	@ (800d3d8 <SecureElementGetDevAddr+0x40>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	691a      	ldr	r2, [r3, #16]
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	e004      	b.n	800d3ca <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800d3c0:	4b05      	ldr	r3, [pc, #20]	@ (800d3d8 <SecureElementGetDevAddr+0x40>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	695a      	ldr	r2, [r3, #20]
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800d3ca:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bc80      	pop	{r7}
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	200005f8 	.word	0x200005f8

0800d3dc <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800d3e6:	4a29      	ldr	r2, [pc, #164]	@ (800d48c <LmHandlerInit+0xb0>)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d3ec:	4b28      	ldr	r3, [pc, #160]	@ (800d490 <LmHandlerInit+0xb4>)
 800d3ee:	4a29      	ldr	r2, [pc, #164]	@ (800d494 <LmHandlerInit+0xb8>)
 800d3f0:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d3f2:	4b27      	ldr	r3, [pc, #156]	@ (800d490 <LmHandlerInit+0xb4>)
 800d3f4:	4a28      	ldr	r2, [pc, #160]	@ (800d498 <LmHandlerInit+0xbc>)
 800d3f6:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d3f8:	4b25      	ldr	r3, [pc, #148]	@ (800d490 <LmHandlerInit+0xb4>)
 800d3fa:	4a28      	ldr	r2, [pc, #160]	@ (800d49c <LmHandlerInit+0xc0>)
 800d3fc:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d3fe:	4b24      	ldr	r3, [pc, #144]	@ (800d490 <LmHandlerInit+0xb4>)
 800d400:	4a27      	ldr	r2, [pc, #156]	@ (800d4a0 <LmHandlerInit+0xc4>)
 800d402:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d404:	4b21      	ldr	r3, [pc, #132]	@ (800d48c <LmHandlerInit+0xb0>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a26      	ldr	r2, [pc, #152]	@ (800d4a4 <LmHandlerInit+0xc8>)
 800d40c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d40e:	4b1f      	ldr	r3, [pc, #124]	@ (800d48c <LmHandlerInit+0xb0>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	4a23      	ldr	r2, [pc, #140]	@ (800d4a4 <LmHandlerInit+0xc8>)
 800d416:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d418:	4b1c      	ldr	r3, [pc, #112]	@ (800d48c <LmHandlerInit+0xb0>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	4a21      	ldr	r2, [pc, #132]	@ (800d4a4 <LmHandlerInit+0xc8>)
 800d420:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800d422:	4b1a      	ldr	r3, [pc, #104]	@ (800d48c <LmHandlerInit+0xb0>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	4a1e      	ldr	r2, [pc, #120]	@ (800d4a4 <LmHandlerInit+0xc8>)
 800d42a:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d42c:	4b1d      	ldr	r3, [pc, #116]	@ (800d4a4 <LmHandlerInit+0xc8>)
 800d42e:	4a1e      	ldr	r2, [pc, #120]	@ (800d4a8 <LmHandlerInit+0xcc>)
 800d430:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d432:	4b16      	ldr	r3, [pc, #88]	@ (800d48c <LmHandlerInit+0xb0>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	4a1a      	ldr	r2, [pc, #104]	@ (800d4a4 <LmHandlerInit+0xc8>)
 800d43a:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	4a1b      	ldr	r2, [pc, #108]	@ (800d4ac <LmHandlerInit+0xd0>)
 800d440:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800d442:	4b12      	ldr	r3, [pc, #72]	@ (800d48c <LmHandlerInit+0xb0>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d448:	4a18      	ldr	r2, [pc, #96]	@ (800d4ac <LmHandlerInit+0xd0>)
 800d44a:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800d44c:	4b17      	ldr	r3, [pc, #92]	@ (800d4ac <LmHandlerInit+0xd0>)
 800d44e:	4a18      	ldr	r2, [pc, #96]	@ (800d4b0 <LmHandlerInit+0xd4>)
 800d450:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800d452:	4b16      	ldr	r3, [pc, #88]	@ (800d4ac <LmHandlerInit+0xd0>)
 800d454:	4a17      	ldr	r2, [pc, #92]	@ (800d4b4 <LmHandlerInit+0xd8>)
 800d456:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800d458:	4914      	ldr	r1, [pc, #80]	@ (800d4ac <LmHandlerInit+0xd0>)
 800d45a:	2000      	movs	r0, #0
 800d45c:	f000 fdc0 	bl	800dfe0 <LmHandlerPackageRegister>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d002      	beq.n	800d46c <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800d466:	f04f 33ff 	mov.w	r3, #4294967295
 800d46a:	e00a      	b.n	800d482 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800d46c:	463b      	mov	r3, r7
 800d46e:	4618      	mov	r0, r3
 800d470:	f001 fd36 	bl	800eee0 <LmhpPackagesRegistrationInit>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d002      	beq.n	800d480 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800d47a:	f04f 33ff 	mov.w	r3, #4294967295
 800d47e:	e000      	b.n	800d482 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d480:	2300      	movs	r3, #0
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	20000650 	.word	0x20000650
 800d490:	20000654 	.word	0x20000654
 800d494:	0800dcb9 	.word	0x0800dcb9
 800d498:	0800dd2d 	.word	0x0800dd2d
 800d49c:	0800ddfd 	.word	0x0800ddfd
 800d4a0:	0800df4d 	.word	0x0800df4d
 800d4a4:	20000664 	.word	0x20000664
 800d4a8:	0800e48d 	.word	0x0800e48d
 800d4ac:	20000614 	.word	0x20000614
 800d4b0:	0800e2a1 	.word	0x0800e2a1
 800d4b4:	0800e2d9 	.word	0x0800e2d9

0800d4b8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b092      	sub	sp, #72	@ 0x48
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800d4c0:	2218      	movs	r2, #24
 800d4c2:	6879      	ldr	r1, [r7, #4]
 800d4c4:	488a      	ldr	r0, [pc, #552]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d4c6:	f00a ff90 	bl	80183ea <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800d4ca:	4b8a      	ldr	r3, [pc, #552]	@ (800d6f4 <LmHandlerConfigure+0x23c>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800d4d0:	f7fe faa0 	bl	800ba14 <LoraInfo_GetPtr>
 800d4d4:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800d4d6:	4b86      	ldr	r3, [pc, #536]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	2301      	movs	r3, #1
 800d4de:	4093      	lsls	r3, r2
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	4013      	ands	r3, r2
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d107      	bne.n	800d4fc <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800d4ec:	4b82      	ldr	r3, [pc, #520]	@ (800d6f8 <LmHandlerConfigure+0x240>)
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	f00f fad6 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800d4f8:	bf00      	nop
 800d4fa:	e7fd      	b.n	800d4f8 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800d4fc:	4b7c      	ldr	r3, [pc, #496]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	461a      	mov	r2, r3
 800d502:	497e      	ldr	r1, [pc, #504]	@ (800d6fc <LmHandlerConfigure+0x244>)
 800d504:	487e      	ldr	r0, [pc, #504]	@ (800d700 <LmHandlerConfigure+0x248>)
 800d506:	f005 f80d 	bl	8012524 <LoRaMacInitialization>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d510:	f04f 33ff 	mov.w	r3, #4294967295
 800d514:	e0e8      	b.n	800d6e8 <LmHandlerConfigure+0x230>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800d516:	2327      	movs	r3, #39	@ 0x27
 800d518:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d51a:	f107 0318 	add.w	r3, r7, #24
 800d51e:	4618      	mov	r0, r3
 800d520:	f005 fd8c 	bl	801303c <LoRaMacMibSetRequestConfirm>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d103      	bne.n	800d532 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800d52a:	4b76      	ldr	r3, [pc, #472]	@ (800d704 <LmHandlerConfigure+0x24c>)
 800d52c:	2201      	movs	r2, #1
 800d52e:	701a      	strb	r2, [r3, #0]
 800d530:	e02a      	b.n	800d588 <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d532:	2328      	movs	r3, #40	@ 0x28
 800d534:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800d536:	4b74      	ldr	r3, [pc, #464]	@ (800d708 <LmHandlerConfigure+0x250>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00c      	beq.n	800d55a <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d540:	f107 0318 	add.w	r3, r7, #24
 800d544:	4618      	mov	r0, r3
 800d546:	f005 fba1 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800d54a:	4b6f      	ldr	r3, [pc, #444]	@ (800d708 <LmHandlerConfigure+0x250>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	691b      	ldr	r3, [r3, #16]
 800d550:	69fa      	ldr	r2, [r7, #28]
 800d552:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800d556:	4610      	mov	r0, r2
 800d558:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800d55a:	2327      	movs	r3, #39	@ 0x27
 800d55c:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d55e:	f107 0318 	add.w	r3, r7, #24
 800d562:	4618      	mov	r0, r3
 800d564:	f005 fd6a 	bl	801303c <LoRaMacMibSetRequestConfirm>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10c      	bne.n	800d588 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d56e:	2301      	movs	r3, #1
 800d570:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d572:	f107 0318 	add.w	r3, r7, #24
 800d576:	4618      	mov	r0, r3
 800d578:	f005 fb88 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d57c:	7f3b      	ldrb	r3, [r7, #28]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800d582:	4b60      	ldr	r3, [pc, #384]	@ (800d704 <LmHandlerConfigure+0x24c>)
 800d584:	2201      	movs	r2, #1
 800d586:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800d588:	4b5e      	ldr	r3, [pc, #376]	@ (800d704 <LmHandlerConfigure+0x24c>)
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d02e      	beq.n	800d5ee <LmHandlerConfigure+0x136>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800d590:	4b5d      	ldr	r3, [pc, #372]	@ (800d708 <LmHandlerConfigure+0x250>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	69db      	ldr	r3, [r3, #28]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d004      	beq.n	800d5a4 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800d59a:	4b5b      	ldr	r3, [pc, #364]	@ (800d708 <LmHandlerConfigure+0x250>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	4798      	blx	r3
        }

        //BZ #156695
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 800d5a4:	f000 f98e 	bl	800d8c4 <LmHandlerJoinStatus>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d106      	bne.n	800d5bc <LmHandlerConfigure+0x104>
 800d5ae:	f002 fc99 	bl	800fee4 <LoRaMacIsStopped>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <LmHandlerConfigure+0x104>
        { 
            LoRaMacStart();
 800d5b8:	f005 fa6a 	bl	8012a90 <LoRaMacStart>
        }

        mibReq.Type = MIB_NVM_CTXS;
 800d5bc:	2327      	movs	r3, #39	@ 0x27
 800d5be:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d5c0:	f107 0318 	add.w	r3, r7, #24
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f005 fb61 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800d5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5d0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800d5d4:	4b46      	ldr	r3, [pc, #280]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d5d6:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800d5d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5da:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800d5de:	4b44      	ldr	r3, [pc, #272]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d5e0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800d5e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5e4:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800d5e8:	4b41      	ldr	r3, [pc, #260]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d5ea:	709a      	strb	r2, [r3, #2]
 800d5ec:	e008      	b.n	800d600 <LmHandlerConfigure+0x148>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800d5ee:	2305      	movs	r3, #5
 800d5f0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d5f6:	f107 0318 	add.w	r3, r7, #24
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f005 fd1e 	bl	801303c <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800d600:	4b3e      	ldr	r3, [pc, #248]	@ (800d6fc <LmHandlerConfigure+0x244>)
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	4a3d      	ldr	r2, [pc, #244]	@ (800d6fc <LmHandlerConfigure+0x244>)
 800d606:	68d2      	ldr	r2, [r2, #12]
 800d608:	4611      	mov	r1, r2
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7ff fbc0 	bl	800cd90 <SecureElementInitMcuID>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d002      	beq.n	800d61c <LmHandlerConfigure+0x164>
    {
        return LORAMAC_HANDLER_ERROR;
 800d616:	f04f 33ff 	mov.w	r3, #4294967295
 800d61a:	e065      	b.n	800d6e8 <LmHandlerConfigure+0x230>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800d61c:	2306      	movs	r3, #6
 800d61e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d620:	f107 0318 	add.w	r3, r7, #24
 800d624:	4618      	mov	r0, r3
 800d626:	f005 fb31 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	4a37      	ldr	r2, [pc, #220]	@ (800d70c <LmHandlerConfigure+0x254>)
 800d62e:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d630:	f107 0318 	add.w	r3, r7, #24
 800d634:	4618      	mov	r0, r3
 800d636:	f005 fd01 	bl	801303c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800d63a:	2302      	movs	r3, #2
 800d63c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800d63e:	4b33      	ldr	r3, [pc, #204]	@ (800d70c <LmHandlerConfigure+0x254>)
 800d640:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d642:	f107 0318 	add.w	r3, r7, #24
 800d646:	4618      	mov	r0, r3
 800d648:	f005 fb20 	bl	8012c8c <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800d64c:	2303      	movs	r3, #3
 800d64e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800d650:	4b2f      	ldr	r3, [pc, #188]	@ (800d710 <LmHandlerConfigure+0x258>)
 800d652:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d654:	f107 0318 	add.w	r3, r7, #24
 800d658:	4618      	mov	r0, r3
 800d65a:	f005 fb17 	bl	8012c8c <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800d65e:	f7ff fc17 	bl	800ce90 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d662:	230f      	movs	r3, #15
 800d664:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d666:	2301      	movs	r3, #1
 800d668:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d66a:	f107 0318 	add.w	r3, r7, #24
 800d66e:	4618      	mov	r0, r3
 800d670:	f005 fce4 	bl	801303c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d674:	2310      	movs	r3, #16
 800d676:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d678:	2300      	movs	r3, #0
 800d67a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d67c:	f107 0318 	add.w	r3, r7, #24
 800d680:	4618      	mov	r0, r3
 800d682:	f005 fcdb 	bl	801303c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d686:	2304      	movs	r3, #4
 800d688:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d68a:	4b19      	ldr	r3, [pc, #100]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d68c:	789b      	ldrb	r3, [r3, #2]
 800d68e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d690:	f107 0318 	add.w	r3, r7, #24
 800d694:	4618      	mov	r0, r3
 800d696:	f005 fcd1 	bl	801303c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d69a:	233a      	movs	r3, #58	@ 0x3a
 800d69c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d69e:	4b14      	ldr	r3, [pc, #80]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d6a0:	695b      	ldr	r3, [r3, #20]
 800d6a2:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d6a4:	f107 0318 	add.w	r3, r7, #24
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f005 fcc7 	bl	801303c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d6ae:	230f      	movs	r3, #15
 800d6b0:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d6b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	f107 0210 	add.w	r2, r7, #16
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f008 fc69 	bl	8015f94 <RegionGetPhyParam>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	bf14      	ite	ne
 800d6cc:	2301      	movne	r3, #1
 800d6ce:	2300      	moveq	r3, #0
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	4b07      	ldr	r3, [pc, #28]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d6d4:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800d6d6:	2014      	movs	r0, #20
 800d6d8:	f000 fad6 	bl	800dc88 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d6dc:	4b04      	ldr	r3, [pc, #16]	@ (800d6f0 <LmHandlerConfigure+0x238>)
 800d6de:	79db      	ldrb	r3, [r3, #7]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f006 fb89 	bl	8013df8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3748      	adds	r7, #72	@ 0x48
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	20000638 	.word	0x20000638
 800d6f4:	20000680 	.word	0x20000680
 800d6f8:	0801d7d0 	.word	0x0801d7d0
 800d6fc:	20000664 	.word	0x20000664
 800d700:	20000654 	.word	0x20000654
 800d704:	20000776 	.word	0x20000776
 800d708:	20000650 	.word	0x20000650
 800d70c:	200005fc 	.word	0x200005fc
 800d710:	20000604 	.word	0x20000604

0800d714 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800d71a:	f002 fe61 	bl	80103e0 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800d71e:	f000 fd8b 	bl	800e238 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800d722:	f000 fd5f 	bl	800e1e4 <LmHandlerPackageIsTxPending>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d117      	bne.n	800d75c <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800d72c:	4b0d      	ldr	r3, [pc, #52]	@ (800d764 <LmHandlerProcess+0x50>)
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d014      	beq.n	800d75e <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800d734:	2300      	movs	r3, #0
 800d736:	703b      	strb	r3, [r7, #0]
 800d738:	2300      	movs	r3, #0
 800d73a:	707b      	strb	r3, [r7, #1]
 800d73c:	2300      	movs	r3, #0
 800d73e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800d740:	4b09      	ldr	r3, [pc, #36]	@ (800d768 <LmHandlerProcess+0x54>)
 800d742:	78d9      	ldrb	r1, [r3, #3]
 800d744:	463b      	mov	r3, r7
 800d746:	2200      	movs	r2, #0
 800d748:	4618      	mov	r0, r3
 800d74a:	f000 f8d7 	bl	800d8fc <LmHandlerSend>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d104      	bne.n	800d75e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800d754:	4b03      	ldr	r3, [pc, #12]	@ (800d764 <LmHandlerProcess+0x50>)
 800d756:	2200      	movs	r2, #0
 800d758:	701a      	strb	r2, [r3, #0]
 800d75a:	e000      	b.n	800d75e <LmHandlerProcess+0x4a>
        return;
 800d75c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	20000680 	.word	0x20000680
 800d768:	20000638 	.word	0x20000638

0800d76c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800d76c:	b480      	push	{r7}
 800d76e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800d770:	4b02      	ldr	r3, [pc, #8]	@ (800d77c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800d772:	681b      	ldr	r3, [r3, #0]
}
 800d774:	4618      	mov	r0, r3
 800d776:	46bd      	mov	sp, r7
 800d778:	bc80      	pop	{r7}
 800d77a:	4770      	bx	lr
 800d77c:	2000067c 	.word	0x2000067c

0800d780 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b092      	sub	sp, #72	@ 0x48
 800d784:	af00      	add	r7, sp, #0
 800d786:	4603      	mov	r3, r0
 800d788:	460a      	mov	r2, r1
 800d78a:	71fb      	strb	r3, [r7, #7]
 800d78c:	4613      	mov	r3, r2
 800d78e:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800d790:	2301      	movs	r3, #1
 800d792:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d796:	4b46      	ldr	r3, [pc, #280]	@ (800d8b0 <LmHandlerJoin+0x130>)
 800d798:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800d7a2:	4b43      	ldr	r3, [pc, #268]	@ (800d8b0 <LmHandlerJoin+0x130>)
 800d7a4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d7a8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800d7ac:	79fb      	ldrb	r3, [r7, #7]
 800d7ae:	2b02      	cmp	r3, #2
 800d7b0:	d10b      	bne.n	800d7ca <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d7b2:	2302      	movs	r3, #2
 800d7b4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d7b8:	4b3e      	ldr	r3, [pc, #248]	@ (800d8b4 <LmHandlerJoin+0x134>)
 800d7ba:	2202      	movs	r2, #2
 800d7bc:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800d7be:	4a3d      	ldr	r2, [pc, #244]	@ (800d8b4 <LmHandlerJoin+0x134>)
 800d7c0:	79bb      	ldrb	r3, [r7, #6]
 800d7c2:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800d7c4:	f005 f964 	bl	8012a90 <LoRaMacStart>
 800d7c8:	e05c      	b.n	800d884 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d7d0:	4b38      	ldr	r3, [pc, #224]	@ (800d8b4 <LmHandlerJoin+0x134>)
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d7d6:	4b36      	ldr	r3, [pc, #216]	@ (800d8b0 <LmHandlerJoin+0x130>)
 800d7d8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d7dc:	4b35      	ldr	r3, [pc, #212]	@ (800d8b4 <LmHandlerJoin+0x134>)
 800d7de:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800d7e0:	4b33      	ldr	r3, [pc, #204]	@ (800d8b0 <LmHandlerJoin+0x130>)
 800d7e2:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800d7e6:	4b33      	ldr	r3, [pc, #204]	@ (800d8b4 <LmHandlerJoin+0x134>)
 800d7e8:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d7ea:	4b32      	ldr	r3, [pc, #200]	@ (800d8b4 <LmHandlerJoin+0x134>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d7f0:	4a30      	ldr	r2, [pc, #192]	@ (800d8b4 <LmHandlerJoin+0x134>)
 800d7f2:	79bb      	ldrb	r3, [r7, #6]
 800d7f4:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800d7f6:	4b30      	ldr	r3, [pc, #192]	@ (800d8b8 <LmHandlerJoin+0x138>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	f083 0301 	eor.w	r3, r3, #1
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d034      	beq.n	800d86e <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d804:	231f      	movs	r3, #31
 800d806:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d808:	4b29      	ldr	r3, [pc, #164]	@ (800d8b0 <LmHandlerJoin+0x130>)
 800d80a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d80e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d810:	f107 030c 	add.w	r3, r7, #12
 800d814:	4618      	mov	r0, r3
 800d816:	f005 fc11 	bl	801303c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d81a:	2320      	movs	r3, #32
 800d81c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800d81e:	4b24      	ldr	r3, [pc, #144]	@ (800d8b0 <LmHandlerJoin+0x130>)
 800d820:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d824:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d826:	f107 030c 	add.w	r3, r7, #12
 800d82a:	4618      	mov	r0, r3
 800d82c:	f005 fc06 	bl	801303c <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800d830:	2322      	movs	r3, #34	@ 0x22
 800d832:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800d834:	4b1e      	ldr	r3, [pc, #120]	@ (800d8b0 <LmHandlerJoin+0x130>)
 800d836:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d83a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d83c:	f107 030c 	add.w	r3, r7, #12
 800d840:	4618      	mov	r0, r3
 800d842:	f005 fbfb 	bl	801303c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d846:	2321      	movs	r3, #33	@ 0x21
 800d848:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800d84a:	4b19      	ldr	r3, [pc, #100]	@ (800d8b0 <LmHandlerJoin+0x130>)
 800d84c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d850:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d852:	f107 030c 	add.w	r3, r7, #12
 800d856:	4618      	mov	r0, r3
 800d858:	f005 fbf0 	bl	801303c <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d85c:	2329      	movs	r3, #41	@ 0x29
 800d85e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d860:	4b16      	ldr	r3, [pc, #88]	@ (800d8bc <LmHandlerJoin+0x13c>)
 800d862:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d864:	f107 030c 	add.w	r3, r7, #12
 800d868:	4618      	mov	r0, r3
 800d86a:	f005 fbe7 	bl	801303c <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800d86e:	f005 f90f 	bl	8012a90 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d872:	2301      	movs	r3, #1
 800d874:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d876:	2301      	movs	r3, #1
 800d878:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d87a:	f107 030c 	add.w	r3, r7, #12
 800d87e:	4618      	mov	r0, r3
 800d880:	f005 fbdc 	bl	801303c <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800d884:	4b0c      	ldr	r3, [pc, #48]	@ (800d8b8 <LmHandlerJoin+0x138>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	f083 0301 	eor.w	r3, r3, #1
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d102      	bne.n	800d898 <LmHandlerJoin+0x118>
 800d892:	79bb      	ldrb	r3, [r7, #6]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d004      	beq.n	800d8a2 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800d898:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d89c:	4618      	mov	r0, r3
 800d89e:	f005 ffcf 	bl	8013840 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d8a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8a4:	4a06      	ldr	r2, [pc, #24]	@ (800d8c0 <LmHandlerJoin+0x140>)
 800d8a6:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800d8a8:	bf00      	nop
 800d8aa:	3748      	adds	r7, #72	@ 0x48
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20000638 	.word	0x20000638
 800d8b4:	20000094 	.word	0x20000094
 800d8b8:	20000776 	.word	0x20000776
 800d8bc:	01000400 	.word	0x01000400
 800d8c0:	2000067c 	.word	0x2000067c

0800d8c4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b08c      	sub	sp, #48	@ 0x30
 800d8c8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d8ce:	1d3b      	adds	r3, r7, #4
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f005 f9db 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800d8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d106      	bne.n	800d8f2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d8e4:	7a3b      	ldrb	r3, [r7, #8]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d101      	bne.n	800d8ee <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	e002      	b.n	800d8f4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e000      	b.n	800d8f4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800d8f2:	2300      	movs	r3, #0
    }
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3730      	adds	r7, #48	@ 0x30
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08a      	sub	sp, #40	@ 0x28
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	460b      	mov	r3, r1
 800d906:	70fb      	strb	r3, [r7, #3]
 800d908:	4613      	mov	r3, r2
 800d90a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d90c:	23ff      	movs	r3, #255	@ 0xff
 800d90e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800d912:	f002 fabf 	bl	800fe94 <LoRaMacIsBusy>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d91c:	f06f 0301 	mvn.w	r3, #1
 800d920:	e0ab      	b.n	800da7a <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800d922:	f002 fadf 	bl	800fee4 <LoRaMacIsStopped>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d92c:	f06f 0302 	mvn.w	r3, #2
 800d930:	e0a3      	b.n	800da7a <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d932:	f7ff ffc7 	bl	800d8c4 <LmHandlerJoinStatus>
 800d936:	4603      	mov	r3, r0
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d00a      	beq.n	800d952 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800d93c:	4b51      	ldr	r3, [pc, #324]	@ (800da84 <LmHandlerSend+0x188>)
 800d93e:	79db      	ldrb	r3, [r3, #7]
 800d940:	4a50      	ldr	r2, [pc, #320]	@ (800da84 <LmHandlerSend+0x188>)
 800d942:	7a12      	ldrb	r2, [r2, #8]
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f7ff ff1a 	bl	800d780 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d94c:	f06f 0302 	mvn.w	r3, #2
 800d950:	e093      	b.n	800da7a <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800d952:	4a4d      	ldr	r2, [pc, #308]	@ (800da88 <LmHandlerSend+0x18c>)
 800d954:	78fb      	ldrb	r3, [r7, #3]
 800d956:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800d958:	78fb      	ldrb	r3, [r7, #3]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	bf14      	ite	ne
 800d95e:	2301      	movne	r3, #1
 800d960:	2300      	moveq	r3, #0
 800d962:	b2db      	uxtb	r3, r3
 800d964:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d966:	4b49      	ldr	r3, [pc, #292]	@ (800da8c <LmHandlerSend+0x190>)
 800d968:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d96c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	785b      	ldrb	r3, [r3, #1]
 800d972:	f107 020c 	add.w	r2, r7, #12
 800d976:	4611      	mov	r1, r2
 800d978:	4618      	mov	r0, r3
 800d97a:	f005 f8f7 	bl	8012b6c <LoRaMacQueryTxPossible>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d009      	beq.n	800d998 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d984:	2300      	movs	r3, #0
 800d986:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d988:	2300      	movs	r3, #0
 800d98a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d98c:	2300      	movs	r3, #0
 800d98e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800d990:	23f9      	movs	r3, #249	@ 0xf9
 800d992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d996:	e008      	b.n	800d9aa <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	785b      	ldrb	r3, [r3, #1]
 800d9a2:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800d9aa:	4b37      	ldr	r3, [pc, #220]	@ (800da88 <LmHandlerSend+0x18c>)
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	3310      	adds	r3, #16
 800d9b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d9b4:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d9b8:	4b34      	ldr	r3, [pc, #208]	@ (800da8c <LmHandlerSend+0x190>)
 800d9ba:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d9be:	4b32      	ldr	r3, [pc, #200]	@ (800da88 <LmHandlerSend+0x18c>)
 800d9c0:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800d9c2:	78ba      	ldrb	r2, [r7, #2]
 800d9c4:	f107 0310 	add.w	r3, r7, #16
 800d9c8:	4611      	mov	r1, r2
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f006 f8dc 	bl	8013b88 <LoRaMacMcpsRequest>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	4a2d      	ldr	r2, [pc, #180]	@ (800da90 <LmHandlerSend+0x194>)
 800d9da:	6013      	str	r3, [r2, #0]

    switch( status )
 800d9dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9e0:	2b11      	cmp	r3, #17
 800d9e2:	d843      	bhi.n	800da6c <LmHandlerSend+0x170>
 800d9e4:	a201      	add	r2, pc, #4	@ (adr r2, 800d9ec <LmHandlerSend+0xf0>)
 800d9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ea:	bf00      	nop
 800d9ec:	0800da35 	.word	0x0800da35
 800d9f0:	0800da4d 	.word	0x0800da4d
 800d9f4:	0800da6d 	.word	0x0800da6d
 800d9f8:	0800da6d 	.word	0x0800da6d
 800d9fc:	0800da6d 	.word	0x0800da6d
 800da00:	0800da6d 	.word	0x0800da6d
 800da04:	0800da6d 	.word	0x0800da6d
 800da08:	0800da55 	.word	0x0800da55
 800da0c:	0800da6d 	.word	0x0800da6d
 800da10:	0800da6d 	.word	0x0800da6d
 800da14:	0800da6d 	.word	0x0800da6d
 800da18:	0800da65 	.word	0x0800da65
 800da1c:	0800da6d 	.word	0x0800da6d
 800da20:	0800da6d 	.word	0x0800da6d
 800da24:	0800da4d 	.word	0x0800da4d
 800da28:	0800da4d 	.word	0x0800da4d
 800da2c:	0800da4d 	.word	0x0800da4d
 800da30:	0800da5d 	.word	0x0800da5d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800da34:	4b17      	ldr	r3, [pc, #92]	@ (800da94 <LmHandlerSend+0x198>)
 800da36:	2200      	movs	r2, #0
 800da38:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800da3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da3e:	f113 0f07 	cmn.w	r3, #7
 800da42:	d017      	beq.n	800da74 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800da44:	2300      	movs	r3, #0
 800da46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800da4a:	e013      	b.n	800da74 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800da4c:	23fe      	movs	r3, #254	@ 0xfe
 800da4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800da52:	e010      	b.n	800da76 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800da54:	23fd      	movs	r3, #253	@ 0xfd
 800da56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800da5a:	e00c      	b.n	800da76 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800da5c:	23fb      	movs	r3, #251	@ 0xfb
 800da5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800da62:	e008      	b.n	800da76 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800da64:	23fa      	movs	r3, #250	@ 0xfa
 800da66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800da6a:	e004      	b.n	800da76 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800da6c:	23ff      	movs	r3, #255	@ 0xff
 800da6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800da72:	e000      	b.n	800da76 <LmHandlerSend+0x17a>
            break;
 800da74:	bf00      	nop
    }

    return lmhStatus;
 800da76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3728      	adds	r7, #40	@ 0x28
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	20000094 	.word	0x20000094
 800da88:	200000a0 	.word	0x200000a0
 800da8c:	20000638 	.word	0x20000638
 800da90:	2000067c 	.word	0x2000067c
 800da94:	20000680 	.word	0x20000680

0800da98 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b086      	sub	sp, #24
 800da9c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800da9e:	2309      	movs	r3, #9
 800daa0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800daa2:	463b      	mov	r3, r7
 800daa4:	4618      	mov	r0, r3
 800daa6:	f005 fecb 	bl	8013840 <LoRaMacMlmeRequest>
 800daaa:	4603      	mov	r3, r0
 800daac:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	4a06      	ldr	r2, [pc, #24]	@ (800dacc <LmHandlerDeviceTimeReq+0x34>)
 800dab2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800dab4:	7dfb      	ldrb	r3, [r7, #23]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d101      	bne.n	800dabe <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800daba:	2300      	movs	r3, #0
 800dabc:	e001      	b.n	800dac2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800dabe:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3718      	adds	r7, #24
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	2000067c 	.word	0x2000067c

0800dad0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	4603      	mov	r3, r0
 800dad8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800dada:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dade:	4618      	mov	r0, r3
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bc80      	pop	{r7}
 800dae6:	4770      	bx	lr

0800dae8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08e      	sub	sp, #56	@ 0x38
 800daec:	af00      	add	r7, sp, #0
 800daee:	4603      	mov	r3, r0
 800daf0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800daf2:	2300      	movs	r3, #0
 800daf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800daf8:	f002 f9cc 	bl	800fe94 <LoRaMacIsBusy>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d002      	beq.n	800db08 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800db02:	f06f 0301 	mvn.w	r3, #1
 800db06:	e071      	b.n	800dbec <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800db08:	f7ff fedc 	bl	800d8c4 <LmHandlerJoinStatus>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d002      	beq.n	800db18 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800db12:	f06f 0302 	mvn.w	r3, #2
 800db16:	e069      	b.n	800dbec <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800db18:	2300      	movs	r3, #0
 800db1a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800db1c:	f107 030c 	add.w	r3, r7, #12
 800db20:	4618      	mov	r0, r3
 800db22:	f005 f8b3 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d002      	beq.n	800db32 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800db2c:	f04f 33ff 	mov.w	r3, #4294967295
 800db30:	e05c      	b.n	800dbec <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800db32:	7c3b      	ldrb	r3, [r7, #16]
 800db34:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800db38:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800db3c:	79fb      	ldrb	r3, [r7, #7]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d052      	beq.n	800dbe8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800db42:	79fb      	ldrb	r3, [r7, #7]
 800db44:	2b02      	cmp	r3, #2
 800db46:	d028      	beq.n	800db9a <LmHandlerRequestClass+0xb2>
 800db48:	2b02      	cmp	r3, #2
 800db4a:	dc48      	bgt.n	800dbde <LmHandlerRequestClass+0xf6>
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d002      	beq.n	800db56 <LmHandlerRequestClass+0x6e>
 800db50:	2b01      	cmp	r3, #1
 800db52:	d01e      	beq.n	800db92 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800db54:	e043      	b.n	800dbde <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800db56:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d041      	beq.n	800dbe2 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800db5e:	79fb      	ldrb	r3, [r7, #7]
 800db60:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800db62:	f107 030c 	add.w	r3, r7, #12
 800db66:	4618      	mov	r0, r3
 800db68:	f005 fa68 	bl	801303c <LoRaMacMibSetRequestConfirm>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10b      	bne.n	800db8a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800db72:	4b20      	ldr	r3, [pc, #128]	@ (800dbf4 <LmHandlerRequestClass+0x10c>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d032      	beq.n	800dbe2 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800db7c:	4b1d      	ldr	r3, [pc, #116]	@ (800dbf4 <LmHandlerRequestClass+0x10c>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db82:	79fa      	ldrb	r2, [r7, #7]
 800db84:	4610      	mov	r0, r2
 800db86:	4798      	blx	r3
                break;
 800db88:	e02b      	b.n	800dbe2 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800db8a:	23ff      	movs	r3, #255	@ 0xff
 800db8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800db90:	e027      	b.n	800dbe2 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800db92:	23ff      	movs	r3, #255	@ 0xff
 800db94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800db98:	e026      	b.n	800dbe8 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800db9a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d003      	beq.n	800dbaa <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dba2:	23ff      	movs	r3, #255	@ 0xff
 800dba4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800dba8:	e01d      	b.n	800dbe6 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800dbaa:	79fb      	ldrb	r3, [r7, #7]
 800dbac:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dbae:	f107 030c 	add.w	r3, r7, #12
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f005 fa42 	bl	801303c <LoRaMacMibSetRequestConfirm>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10b      	bne.n	800dbd6 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800dbbe:	4b0d      	ldr	r3, [pc, #52]	@ (800dbf4 <LmHandlerRequestClass+0x10c>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00e      	beq.n	800dbe6 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800dbc8:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf4 <LmHandlerRequestClass+0x10c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbce:	79fa      	ldrb	r2, [r7, #7]
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	4798      	blx	r3
                break;
 800dbd4:	e007      	b.n	800dbe6 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800dbd6:	23ff      	movs	r3, #255	@ 0xff
 800dbd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800dbdc:	e003      	b.n	800dbe6 <LmHandlerRequestClass+0xfe>
                break;
 800dbde:	bf00      	nop
 800dbe0:	e002      	b.n	800dbe8 <LmHandlerRequestClass+0x100>
                break;
 800dbe2:	bf00      	nop
 800dbe4:	e000      	b.n	800dbe8 <LmHandlerRequestClass+0x100>
                break;
 800dbe6:	bf00      	nop
        }
    }
    return errorStatus;
 800dbe8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3738      	adds	r7, #56	@ 0x38
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	20000650 	.word	0x20000650

0800dbf8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08c      	sub	sp, #48	@ 0x30
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d102      	bne.n	800dc0c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc06:	f04f 33ff 	mov.w	r3, #4294967295
 800dc0a:	e010      	b.n	800dc2e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dc10:	f107 0308 	add.w	r3, r7, #8
 800dc14:	4618      	mov	r0, r3
 800dc16:	f005 f839 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc20:	f04f 33ff 	mov.w	r3, #4294967295
 800dc24:	e003      	b.n	800dc2e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800dc26:	7b3a      	ldrb	r2, [r7, #12]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800dc2c:	2300      	movs	r3, #0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3730      	adds	r7, #48	@ 0x30
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
	...

0800dc38 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08c      	sub	sp, #48	@ 0x30
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d102      	bne.n	800dc4c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc46:	f04f 33ff 	mov.w	r3, #4294967295
 800dc4a:	e016      	b.n	800dc7a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800dc4c:	2320      	movs	r3, #32
 800dc4e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800dc50:	f107 0308 	add.w	r3, r7, #8
 800dc54:	4618      	mov	r0, r3
 800dc56:	f005 f819 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc60:	f04f 33ff 	mov.w	r3, #4294967295
 800dc64:	e009      	b.n	800dc7a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800dc66:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f993 2000 	ldrsb.w	r2, [r3]
 800dc74:	4b03      	ldr	r3, [pc, #12]	@ (800dc84 <LmHandlerGetTxDatarate+0x4c>)
 800dc76:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3730      	adds	r7, #48	@ 0x30
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	20000638 	.word	0x20000638

0800dc88 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08c      	sub	sp, #48	@ 0x30
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800dc90:	2323      	movs	r3, #35	@ 0x23
 800dc92:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dc98:	f107 0308 	add.w	r3, r7, #8
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f005 f9cd 	bl	801303c <LoRaMacMibSetRequestConfirm>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800dca8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcac:	e000      	b.n	800dcb0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800dcae:	2300      	movs	r3, #0
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3730      	adds	r7, #48	@ 0x30
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800dcc0:	4b18      	ldr	r3, [pc, #96]	@ (800dd24 <McpsConfirm+0x6c>)
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	785a      	ldrb	r2, [r3, #1]
 800dcca:	4b16      	ldr	r3, [pc, #88]	@ (800dd24 <McpsConfirm+0x6c>)
 800dccc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	789b      	ldrb	r3, [r3, #2]
 800dcd2:	b25a      	sxtb	r2, r3
 800dcd4:	4b13      	ldr	r3, [pc, #76]	@ (800dd24 <McpsConfirm+0x6c>)
 800dcd6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	68db      	ldr	r3, [r3, #12]
 800dcdc:	4a11      	ldr	r2, [pc, #68]	@ (800dd24 <McpsConfirm+0x6c>)
 800dcde:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800dce6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd24 <McpsConfirm+0x6c>)
 800dce8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	4b0c      	ldr	r3, [pc, #48]	@ (800dd24 <McpsConfirm+0x6c>)
 800dcf2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	791b      	ldrb	r3, [r3, #4]
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	4b0a      	ldr	r3, [pc, #40]	@ (800dd24 <McpsConfirm+0x6c>)
 800dcfc:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800dcfe:	4b0a      	ldr	r3, [pc, #40]	@ (800dd28 <McpsConfirm+0x70>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d004      	beq.n	800dd12 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800dd08:	4b07      	ldr	r3, [pc, #28]	@ (800dd28 <McpsConfirm+0x70>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd0e:	4805      	ldr	r0, [pc, #20]	@ (800dd24 <McpsConfirm+0x6c>)
 800dd10:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800dd12:	6879      	ldr	r1, [r7, #4]
 800dd14:	2000      	movs	r0, #0
 800dd16:	f000 f9e9 	bl	800e0ec <LmHandlerPackagesNotify>
}
 800dd1a:	bf00      	nop
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	200000a0 	.word	0x200000a0
 800dd28:	20000650 	.word	0x20000650

0800dd2c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b086      	sub	sp, #24
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800dd36:	2300      	movs	r3, #0
 800dd38:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800dd3a:	4b2d      	ldr	r3, [pc, #180]	@ (800ddf0 <McpsIndication+0xc4>)
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	785a      	ldrb	r2, [r3, #1]
 800dd44:	4b2a      	ldr	r3, [pc, #168]	@ (800ddf0 <McpsIndication+0xc4>)
 800dd46:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800dd48:	4b29      	ldr	r3, [pc, #164]	@ (800ddf0 <McpsIndication+0xc4>)
 800dd4a:	785b      	ldrb	r3, [r3, #1]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d14b      	bne.n	800dde8 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	791b      	ldrb	r3, [r3, #4]
 800dd54:	b25a      	sxtb	r2, r3
 800dd56:	4b26      	ldr	r3, [pc, #152]	@ (800ddf0 <McpsIndication+0xc4>)
 800dd58:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd60:	b25a      	sxtb	r2, r3
 800dd62:	4b23      	ldr	r3, [pc, #140]	@ (800ddf0 <McpsIndication+0xc4>)
 800dd64:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dd6c:	4b20      	ldr	r3, [pc, #128]	@ (800ddf0 <McpsIndication+0xc4>)
 800dd6e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	78da      	ldrb	r2, [r3, #3]
 800dd74:	4b1e      	ldr	r3, [pc, #120]	@ (800ddf0 <McpsIndication+0xc4>)
 800dd76:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	4a1c      	ldr	r2, [pc, #112]	@ (800ddf0 <McpsIndication+0xc4>)
 800dd7e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	78db      	ldrb	r3, [r3, #3]
 800dd84:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	7b1b      	ldrb	r3, [r3, #12]
 800dd8a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800dd92:	4b18      	ldr	r3, [pc, #96]	@ (800ddf4 <McpsIndication+0xc8>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d007      	beq.n	800ddac <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800dd9c:	4b15      	ldr	r3, [pc, #84]	@ (800ddf4 <McpsIndication+0xc8>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda2:	f107 0210 	add.w	r2, r7, #16
 800dda6:	4912      	ldr	r1, [pc, #72]	@ (800ddf0 <McpsIndication+0xc4>)
 800dda8:	4610      	mov	r0, r2
 800ddaa:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ddac:	4b11      	ldr	r3, [pc, #68]	@ (800ddf4 <McpsIndication+0xc8>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d007      	beq.n	800ddc6 <McpsIndication+0x9a>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	7e1b      	ldrb	r3, [r3, #24]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d003      	beq.n	800ddc6 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ddbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ddf4 <McpsIndication+0xc8>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddc4:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	2001      	movs	r0, #1
 800ddca:	f000 f98f 	bl	800e0ec <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ddce:	f107 030f 	add.w	r3, r7, #15
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7ff ff10 	bl	800dbf8 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	795b      	ldrb	r3, [r3, #5]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d004      	beq.n	800ddea <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800dde0:	4b05      	ldr	r3, [pc, #20]	@ (800ddf8 <McpsIndication+0xcc>)
 800dde2:	2201      	movs	r2, #1
 800dde4:	701a      	strb	r2, [r3, #0]
 800dde6:	e000      	b.n	800ddea <McpsIndication+0xbe>
        return;
 800dde8:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	200000bc 	.word	0x200000bc
 800ddf4:	20000650 	.word	0x20000650
 800ddf8:	20000680 	.word	0x20000680

0800ddfc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b08c      	sub	sp, #48	@ 0x30
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800de04:	4b49      	ldr	r3, [pc, #292]	@ (800df2c <MlmeConfirm+0x130>)
 800de06:	2200      	movs	r2, #0
 800de08:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	785a      	ldrb	r2, [r3, #1]
 800de0e:	4b47      	ldr	r3, [pc, #284]	@ (800df2c <MlmeConfirm+0x130>)
 800de10:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800de12:	4b47      	ldr	r3, [pc, #284]	@ (800df30 <MlmeConfirm+0x134>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800de1c:	4b44      	ldr	r3, [pc, #272]	@ (800df30 <MlmeConfirm+0x134>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de22:	4842      	ldr	r0, [pc, #264]	@ (800df2c <MlmeConfirm+0x130>)
 800de24:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800de26:	6879      	ldr	r1, [r7, #4]
 800de28:	2002      	movs	r0, #2
 800de2a:	f000 f95f 	bl	800e0ec <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	3b01      	subs	r3, #1
 800de34:	2b0b      	cmp	r3, #11
 800de36:	d872      	bhi.n	800df1e <MlmeConfirm+0x122>
 800de38:	a201      	add	r2, pc, #4	@ (adr r2, 800de40 <MlmeConfirm+0x44>)
 800de3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3e:	bf00      	nop
 800de40:	0800de71 	.word	0x0800de71
 800de44:	0800df1f 	.word	0x0800df1f
 800de48:	0800df1f 	.word	0x0800df1f
 800de4c:	0800df1f 	.word	0x0800df1f
 800de50:	0800deed 	.word	0x0800deed
 800de54:	0800df1f 	.word	0x0800df1f
 800de58:	0800df1f 	.word	0x0800df1f
 800de5c:	0800df1f 	.word	0x0800df1f
 800de60:	0800df1f 	.word	0x0800df1f
 800de64:	0800df1f 	.word	0x0800df1f
 800de68:	0800df05 	.word	0x0800df05
 800de6c:	0800df1f 	.word	0x0800df1f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800de70:	2306      	movs	r3, #6
 800de72:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800de74:	f107 0308 	add.w	r3, r7, #8
 800de78:	4618      	mov	r0, r3
 800de7a:	f004 ff07 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800de7e:	4b2d      	ldr	r3, [pc, #180]	@ (800df34 <MlmeConfirm+0x138>)
 800de80:	79db      	ldrb	r3, [r3, #7]
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	4611      	mov	r1, r2
 800de86:	4618      	mov	r0, r3
 800de88:	f7ff fa6c 	bl	800d364 <SecureElementSetDevAddr>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d102      	bne.n	800de98 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	4a28      	ldr	r2, [pc, #160]	@ (800df38 <MlmeConfirm+0x13c>)
 800de96:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800de98:	4828      	ldr	r0, [pc, #160]	@ (800df3c <MlmeConfirm+0x140>)
 800de9a:	f7ff fecd 	bl	800dc38 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800de9e:	4828      	ldr	r0, [pc, #160]	@ (800df40 <MlmeConfirm+0x144>)
 800dea0:	f000 fa74 	bl	800e38c <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dea4:	4b21      	ldr	r3, [pc, #132]	@ (800df2c <MlmeConfirm+0x130>)
 800dea6:	785b      	ldrb	r3, [r3, #1]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d108      	bne.n	800debe <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800deac:	4b21      	ldr	r3, [pc, #132]	@ (800df34 <MlmeConfirm+0x138>)
 800deae:	2200      	movs	r2, #0
 800deb0:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800deb2:	4b24      	ldr	r3, [pc, #144]	@ (800df44 <MlmeConfirm+0x148>)
 800deb4:	785b      	ldrb	r3, [r3, #1]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7ff fe16 	bl	800dae8 <LmHandlerRequestClass>
 800debc:	e002      	b.n	800dec4 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800debe:	4b1d      	ldr	r3, [pc, #116]	@ (800df34 <MlmeConfirm+0x138>)
 800dec0:	22ff      	movs	r2, #255	@ 0xff
 800dec2:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800dec4:	4b1a      	ldr	r3, [pc, #104]	@ (800df30 <MlmeConfirm+0x134>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deca:	2b00      	cmp	r3, #0
 800decc:	d004      	beq.n	800ded8 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800dece:	4b18      	ldr	r3, [pc, #96]	@ (800df30 <MlmeConfirm+0x134>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded4:	4817      	ldr	r0, [pc, #92]	@ (800df34 <MlmeConfirm+0x138>)
 800ded6:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ded8:	4b14      	ldr	r3, [pc, #80]	@ (800df2c <MlmeConfirm+0x130>)
 800deda:	785b      	ldrb	r3, [r3, #1]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d120      	bne.n	800df22 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800dee0:	4b14      	ldr	r3, [pc, #80]	@ (800df34 <MlmeConfirm+0x138>)
 800dee2:	79db      	ldrb	r3, [r3, #7]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fe ffe7 	bl	800ceb8 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800deea:	e01a      	b.n	800df22 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800deec:	4b16      	ldr	r3, [pc, #88]	@ (800df48 <MlmeConfirm+0x14c>)
 800deee:	2201      	movs	r2, #1
 800def0:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	7a1a      	ldrb	r2, [r3, #8]
 800def6:	4b14      	ldr	r3, [pc, #80]	@ (800df48 <MlmeConfirm+0x14c>)
 800def8:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7a5a      	ldrb	r2, [r3, #9]
 800defe:	4b12      	ldr	r3, [pc, #72]	@ (800df48 <MlmeConfirm+0x14c>)
 800df00:	74da      	strb	r2, [r3, #19]
            }
            break;
 800df02:	e00f      	b.n	800df24 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	785b      	ldrb	r3, [r3, #1]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d105      	bne.n	800df18 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800df0c:	4b0d      	ldr	r3, [pc, #52]	@ (800df44 <MlmeConfirm+0x148>)
 800df0e:	7c1b      	ldrb	r3, [r3, #16]
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff fddd 	bl	800dad0 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800df16:	e005      	b.n	800df24 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800df18:	f7ff fdbe 	bl	800da98 <LmHandlerDeviceTimeReq>
            break;
 800df1c:	e002      	b.n	800df24 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800df1e:	bf00      	nop
 800df20:	e000      	b.n	800df24 <MlmeConfirm+0x128>
            break;
 800df22:	bf00      	nop
    }
}
 800df24:	bf00      	nop
 800df26:	3730      	adds	r7, #48	@ 0x30
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	200000a0 	.word	0x200000a0
 800df30:	20000650 	.word	0x20000650
 800df34:	20000094 	.word	0x20000094
 800df38:	200005fc 	.word	0x200005fc
 800df3c:	20000098 	.word	0x20000098
 800df40:	20000099 	.word	0x20000099
 800df44:	20000638 	.word	0x20000638
 800df48:	200000bc 	.word	0x200000bc

0800df4c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800df56:	4b20      	ldr	r3, [pc, #128]	@ (800dfd8 <MlmeIndication+0x8c>)
 800df58:	2200      	movs	r2, #0
 800df5a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	785a      	ldrb	r2, [r3, #1]
 800df60:	4b1d      	ldr	r3, [pc, #116]	@ (800dfd8 <MlmeIndication+0x8c>)
 800df62:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	789b      	ldrb	r3, [r3, #2]
 800df68:	b25a      	sxtb	r2, r3
 800df6a:	4b1b      	ldr	r3, [pc, #108]	@ (800dfd8 <MlmeIndication+0x8c>)
 800df6c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df74:	b25a      	sxtb	r2, r3
 800df76:	4b18      	ldr	r3, [pc, #96]	@ (800dfd8 <MlmeIndication+0x8c>)
 800df78:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800df80:	4b15      	ldr	r3, [pc, #84]	@ (800dfd8 <MlmeIndication+0x8c>)
 800df82:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	78da      	ldrb	r2, [r3, #3]
 800df88:	4b13      	ldr	r3, [pc, #76]	@ (800dfd8 <MlmeIndication+0x8c>)
 800df8a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	4a11      	ldr	r2, [pc, #68]	@ (800dfd8 <MlmeIndication+0x8c>)
 800df92:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800df94:	4b11      	ldr	r3, [pc, #68]	@ (800dfdc <MlmeIndication+0x90>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00d      	beq.n	800dfba <MlmeIndication+0x6e>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b0a      	cmp	r3, #10
 800dfa4:	d009      	beq.n	800dfba <MlmeIndication+0x6e>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	2b0e      	cmp	r3, #14
 800dfac:	d005      	beq.n	800dfba <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800dfae:	4b0b      	ldr	r3, [pc, #44]	@ (800dfdc <MlmeIndication+0x90>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfb4:	4908      	ldr	r1, [pc, #32]	@ (800dfd8 <MlmeIndication+0x8c>)
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800dfba:	6879      	ldr	r1, [r7, #4]
 800dfbc:	2003      	movs	r0, #3
 800dfbe:	f000 f895 	bl	800e0ec <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	2b0a      	cmp	r3, #10
 800dfc8:	d001      	beq.n	800dfce <MlmeIndication+0x82>
 800dfca:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800dfcc:	e000      	b.n	800dfd0 <MlmeIndication+0x84>
            break;
 800dfce:	bf00      	nop
    }
}
 800dfd0:	bf00      	nop
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	200000bc 	.word	0x200000bc
 800dfdc:	20000650 	.word	0x20000650

0800dfe0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	6039      	str	r1, [r7, #0]
 800dfea:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800dfec:	2300      	movs	r3, #0
 800dfee:	60fb      	str	r3, [r7, #12]
    switch( id )
 800dff0:	79fb      	ldrb	r3, [r7, #7]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d104      	bne.n	800e000 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800dff6:	f000 fa8b 	bl	800e510 <LmhpCompliancePackageFactory>
 800dffa:	4603      	mov	r3, r0
 800dffc:	60fb      	str	r3, [r7, #12]
                break;
 800dffe:	e00d      	b.n	800e01c <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800e000:	f107 020c 	add.w	r2, r7, #12
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	4611      	mov	r1, r2
 800e008:	4618      	mov	r0, r3
 800e00a:	f000 ff73 	bl	800eef4 <LmhpPackagesRegister>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800e014:	f04f 33ff 	mov.w	r3, #4294967295
 800e018:	e03b      	b.n	800e092 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800e01a:	bf00      	nop
            }
    }
    if( package != NULL )
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d035      	beq.n	800e08e <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800e022:	79fb      	ldrb	r3, [r7, #7]
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	491d      	ldr	r1, [pc, #116]	@ (800e09c <LmHandlerPackageRegister+0xbc>)
 800e028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e02c:	79fb      	ldrb	r3, [r7, #7]
 800e02e:	4a1b      	ldr	r2, [pc, #108]	@ (800e09c <LmHandlerPackageRegister+0xbc>)
 800e030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e034:	4a1a      	ldr	r2, [pc, #104]	@ (800e0a0 <LmHandlerPackageRegister+0xc0>)
 800e036:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800e038:	4b1a      	ldr	r3, [pc, #104]	@ (800e0a4 <LmHandlerPackageRegister+0xc4>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	4917      	ldr	r1, [pc, #92]	@ (800e09c <LmHandlerPackageRegister+0xbc>)
 800e040:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e044:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e046:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800e048:	4b16      	ldr	r3, [pc, #88]	@ (800e0a4 <LmHandlerPackageRegister+0xc4>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	79fb      	ldrb	r3, [r7, #7]
 800e04e:	4913      	ldr	r1, [pc, #76]	@ (800e09c <LmHandlerPackageRegister+0xbc>)
 800e050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e054:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e056:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e058:	79fb      	ldrb	r3, [r7, #7]
 800e05a:	4a10      	ldr	r2, [pc, #64]	@ (800e09c <LmHandlerPackageRegister+0xbc>)
 800e05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e060:	4a11      	ldr	r2, [pc, #68]	@ (800e0a8 <LmHandlerPackageRegister+0xc8>)
 800e062:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e064:	4b0f      	ldr	r3, [pc, #60]	@ (800e0a4 <LmHandlerPackageRegister+0xc4>)
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	79fb      	ldrb	r3, [r7, #7]
 800e06a:	490c      	ldr	r1, [pc, #48]	@ (800e09c <LmHandlerPackageRegister+0xbc>)
 800e06c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e070:	6992      	ldr	r2, [r2, #24]
 800e072:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e074:	79fb      	ldrb	r3, [r7, #7]
 800e076:	4a09      	ldr	r2, [pc, #36]	@ (800e09c <LmHandlerPackageRegister+0xbc>)
 800e078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	4a0b      	ldr	r2, [pc, #44]	@ (800e0ac <LmHandlerPackageRegister+0xcc>)
 800e080:	6851      	ldr	r1, [r2, #4]
 800e082:	4a0a      	ldr	r2, [pc, #40]	@ (800e0ac <LmHandlerPackageRegister+0xcc>)
 800e084:	7852      	ldrb	r2, [r2, #1]
 800e086:	6838      	ldr	r0, [r7, #0]
 800e088:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e08a:	2300      	movs	r3, #0
 800e08c:	e001      	b.n	800e092 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e08e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e092:	4618      	mov	r0, r3
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20000624 	.word	0x20000624
 800e0a0:	0800d781 	.word	0x0800d781
 800e0a4:	20000650 	.word	0x20000650
 800e0a8:	0800da99 	.word	0x0800da99
 800e0ac:	200000d0 	.word	0x200000d0

0800e0b0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e0ba:	79fb      	ldrb	r3, [r7, #7]
 800e0bc:	2b04      	cmp	r3, #4
 800e0be:	d80e      	bhi.n	800e0de <LmHandlerPackageIsInitialized+0x2e>
 800e0c0:	79fb      	ldrb	r3, [r7, #7]
 800e0c2:	4a09      	ldr	r2, [pc, #36]	@ (800e0e8 <LmHandlerPackageIsInitialized+0x38>)
 800e0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d007      	beq.n	800e0de <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	4a05      	ldr	r2, [pc, #20]	@ (800e0e8 <LmHandlerPackageIsInitialized+0x38>)
 800e0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	4798      	blx	r3
 800e0da:	4603      	mov	r3, r0
 800e0dc:	e000      	b.n	800e0e0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e0de:	2300      	movs	r3, #0
    }
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	20000624 	.word	0x20000624

0800e0ec <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	6039      	str	r1, [r7, #0]
 800e0f6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73fb      	strb	r3, [r7, #15]
 800e0fc:	e067      	b.n	800e1ce <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800e0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e102:	4a37      	ldr	r2, [pc, #220]	@ (800e1e0 <LmHandlerPackagesNotify+0xf4>)
 800e104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d05a      	beq.n	800e1c2 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800e10c:	79fb      	ldrb	r3, [r7, #7]
 800e10e:	2b03      	cmp	r3, #3
 800e110:	d84e      	bhi.n	800e1b0 <LmHandlerPackagesNotify+0xc4>
 800e112:	a201      	add	r2, pc, #4	@ (adr r2, 800e118 <LmHandlerPackagesNotify+0x2c>)
 800e114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e118:	0800e129 	.word	0x0800e129
 800e11c:	0800e14b 	.word	0x0800e14b
 800e120:	0800e16d 	.word	0x0800e16d
 800e124:	0800e18f 	.word	0x0800e18f
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e12c:	4a2c      	ldr	r2, [pc, #176]	@ (800e1e0 <LmHandlerPackagesNotify+0xf4>)
 800e12e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e132:	699b      	ldr	r3, [r3, #24]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d03d      	beq.n	800e1b4 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800e138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e13c:	4a28      	ldr	r2, [pc, #160]	@ (800e1e0 <LmHandlerPackagesNotify+0xf4>)
 800e13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	6838      	ldr	r0, [r7, #0]
 800e146:	4798      	blx	r3
                        }
                        break;
 800e148:	e034      	b.n	800e1b4 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800e14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e14e:	4a24      	ldr	r2, [pc, #144]	@ (800e1e0 <LmHandlerPackagesNotify+0xf4>)
 800e150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d02e      	beq.n	800e1b8 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800e15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e15e:	4a20      	ldr	r2, [pc, #128]	@ (800e1e0 <LmHandlerPackagesNotify+0xf4>)
 800e160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e164:	69db      	ldr	r3, [r3, #28]
 800e166:	6838      	ldr	r0, [r7, #0]
 800e168:	4798      	blx	r3
                        }
                        break;
 800e16a:	e025      	b.n	800e1b8 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e170:	4a1b      	ldr	r2, [pc, #108]	@ (800e1e0 <LmHandlerPackagesNotify+0xf4>)
 800e172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d01f      	beq.n	800e1bc <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800e17c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e180:	4a17      	ldr	r2, [pc, #92]	@ (800e1e0 <LmHandlerPackagesNotify+0xf4>)
 800e182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e186:	6a1b      	ldr	r3, [r3, #32]
 800e188:	6838      	ldr	r0, [r7, #0]
 800e18a:	4798      	blx	r3
                        }
                        break;
 800e18c:	e016      	b.n	800e1bc <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e18e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e192:	4a13      	ldr	r2, [pc, #76]	@ (800e1e0 <LmHandlerPackagesNotify+0xf4>)
 800e194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d010      	beq.n	800e1c0 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1a2:	4a0f      	ldr	r2, [pc, #60]	@ (800e1e0 <LmHandlerPackagesNotify+0xf4>)
 800e1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1aa:	6838      	ldr	r0, [r7, #0]
 800e1ac:	4798      	blx	r3
                        }
                        break;
 800e1ae:	e007      	b.n	800e1c0 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800e1b0:	bf00      	nop
 800e1b2:	e006      	b.n	800e1c2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e1b4:	bf00      	nop
 800e1b6:	e004      	b.n	800e1c2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e1b8:	bf00      	nop
 800e1ba:	e002      	b.n	800e1c2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e1bc:	bf00      	nop
 800e1be:	e000      	b.n	800e1c2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e1c0:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e1c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	73fb      	strb	r3, [r7, #15]
 800e1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1d2:	2b04      	cmp	r3, #4
 800e1d4:	dd93      	ble.n	800e0fe <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	3710      	adds	r7, #16
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	20000624 	.word	0x20000624

0800e1e4 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	71fb      	strb	r3, [r7, #7]
 800e1ee:	e018      	b.n	800e222 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800e1f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e1f4:	4a0f      	ldr	r2, [pc, #60]	@ (800e234 <LmHandlerPackageIsTxPending+0x50>)
 800e1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00b      	beq.n	800e216 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e1fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e202:	4a0c      	ldr	r2, [pc, #48]	@ (800e234 <LmHandlerPackageIsTxPending+0x50>)
 800e204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	4798      	blx	r3
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e212:	2301      	movs	r3, #1
 800e214:	e00a      	b.n	800e22c <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	3301      	adds	r3, #1
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	71fb      	strb	r3, [r7, #7]
 800e222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e226:	2b04      	cmp	r3, #4
 800e228:	dde2      	ble.n	800e1f0 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	20000624 	.word	0x20000624

0800e238 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e23e:	2300      	movs	r3, #0
 800e240:	71fb      	strb	r3, [r7, #7]
 800e242:	e022      	b.n	800e28a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e248:	4a14      	ldr	r2, [pc, #80]	@ (800e29c <LmHandlerPackagesProcess+0x64>)
 800e24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d015      	beq.n	800e27e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e256:	4a11      	ldr	r2, [pc, #68]	@ (800e29c <LmHandlerPackagesProcess+0x64>)
 800e258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e25c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00d      	beq.n	800e27e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	4618      	mov	r0, r3
 800e266:	f7ff ff23 	bl	800e0b0 <LmHandlerPackageIsInitialized>
 800e26a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d006      	beq.n	800e27e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e274:	4a09      	ldr	r2, [pc, #36]	@ (800e29c <LmHandlerPackagesProcess+0x64>)
 800e276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e27a:	691b      	ldr	r3, [r3, #16]
 800e27c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e27e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e282:	b2db      	uxtb	r3, r3
 800e284:	3301      	adds	r3, #1
 800e286:	b2db      	uxtb	r3, r3
 800e288:	71fb      	strb	r3, [r7, #7]
 800e28a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e28e:	2b04      	cmp	r3, #4
 800e290:	ddd8      	ble.n	800e244 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e292:	bf00      	nop
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	20000624 	.word	0x20000624

0800e2a0 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800e2aa:	4a09      	ldr	r2, [pc, #36]	@ (800e2d0 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800e2b0:	4b08      	ldr	r3, [pc, #32]	@ (800e2d4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d005      	beq.n	800e2c6 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800e2ba:	4b06      	ldr	r3, [pc, #24]	@ (800e2d4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2c0:	79fa      	ldrb	r2, [r7, #7]
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	4798      	blx	r3
    }
}
 800e2c6:	bf00      	nop
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	20000638 	.word	0x20000638
 800e2d4:	20000650 	.word	0x20000650

0800e2d8 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	4603      	mov	r3, r0
 800e2e0:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800e2e2:	4a09      	ldr	r2, [pc, #36]	@ (800e308 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800e2e8:	4b08      	ldr	r3, [pc, #32]	@ (800e30c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d005      	beq.n	800e2fe <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800e2f2:	4b06      	ldr	r3, [pc, #24]	@ (800e30c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2f8:	79fa      	ldrb	r2, [r7, #7]
 800e2fa:	4610      	mov	r0, r2
 800e2fc:	4798      	blx	r3
    }
}
 800e2fe:	bf00      	nop
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	20000638 	.word	0x20000638
 800e30c:	20000650 	.word	0x20000650

0800e310 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	4603      	mov	r3, r0
 800e318:	6039      	str	r1, [r7, #0]
 800e31a:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d102      	bne.n	800e328 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800e322:	f04f 33ff 	mov.w	r3, #4294967295
 800e326:	e00e      	b.n	800e346 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800e328:	79fb      	ldrb	r3, [r7, #7]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d002      	beq.n	800e334 <LmHandlerGetVersion+0x24>
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d004      	beq.n	800e33c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800e332:	e007      	b.n	800e344 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	4a06      	ldr	r2, [pc, #24]	@ (800e350 <LmHandlerGetVersion+0x40>)
 800e338:	601a      	str	r2, [r3, #0]
            break;
 800e33a:	e003      	b.n	800e344 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	4a05      	ldr	r2, [pc, #20]	@ (800e354 <LmHandlerGetVersion+0x44>)
 800e340:	601a      	str	r2, [r3, #0]
            break;
 800e342:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e344:	2300      	movs	r3, #0
}
 800e346:	4618      	mov	r0, r3
 800e348:	370c      	adds	r7, #12
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bc80      	pop	{r7}
 800e34e:	4770      	bx	lr
 800e350:	01000400 	.word	0x01000400
 800e354:	02010003 	.word	0x02010003

0800e358 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800e35c:	f005 fd72 	bl	8013e44 <LoRaMacDeInitialization>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d101      	bne.n	800e36a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e366:	2300      	movs	r3, #0
 800e368:	e001      	b.n	800e36e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e36a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e36e:	4618      	mov	r0, r3
 800e370:	bd80      	pop	{r7, pc}

0800e372 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800e372:	b580      	push	{r7, lr}
 800e374:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800e376:	f004 fbc1 	bl	8012afc <LoRaMacHalt>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e380:	2300      	movs	r3, #0
 800e382:	e001      	b.n	800e388 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e384:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e388:	4618      	mov	r0, r3
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08c      	sub	sp, #48	@ 0x30
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d102      	bne.n	800e3a0 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e39a:	f04f 33ff 	mov.w	r3, #4294967295
 800e39e:	e016      	b.n	800e3ce <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e3a0:	2321      	movs	r3, #33	@ 0x21
 800e3a2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e3a4:	f107 0308 	add.w	r3, r7, #8
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f004 fc6f 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d002      	beq.n	800e3ba <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b8:	e009      	b.n	800e3ce <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800e3ba:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f993 2000 	ldrsb.w	r2, [r3]
 800e3c8:	4b03      	ldr	r3, [pc, #12]	@ (800e3d8 <LmHandlerGetTxPower+0x4c>)
 800e3ca:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3730      	adds	r7, #48	@ 0x30
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	20000638 	.word	0x20000638

0800e3dc <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b08e      	sub	sp, #56	@ 0x38
 800e3e0:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800e3ec:	f7ff ffc1 	bl	800e372 <LmHandlerHalt>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800e3f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d12f      	bne.n	800e45e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800e3fe:	f000 f859 	bl	800e4b4 <NvmDataMgmtStoreBegin>
 800e402:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800e404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e406:	f113 0f02 	cmn.w	r3, #2
 800e40a:	d103      	bne.n	800e414 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800e40c:	23f8      	movs	r3, #248	@ 0xf8
 800e40e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e412:	e01c      	b.n	800e44e <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800e414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e416:	2b00      	cmp	r3, #0
 800e418:	d104      	bne.n	800e424 <LmHandlerNvmDataStore+0x48>
 800e41a:	4b1b      	ldr	r3, [pc, #108]	@ (800e488 <LmHandlerNvmDataStore+0xac>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	695b      	ldr	r3, [r3, #20]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d103      	bne.n	800e42c <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e424:	23ff      	movs	r3, #255	@ 0xff
 800e426:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e42a:	e010      	b.n	800e44e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800e42c:	2327      	movs	r3, #39	@ 0x27
 800e42e:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e430:	463b      	mov	r3, r7
 800e432:	4618      	mov	r0, r3
 800e434:	f004 fc2a 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800e43c:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800e440:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800e442:	4b11      	ldr	r3, [pc, #68]	@ (800e488 <LmHandlerNvmDataStore+0xac>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	695b      	ldr	r3, [r3, #20]
 800e448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e44a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e44c:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800e44e:	f000 f847 	bl	800e4e0 <NvmDataMgmtStoreEnd>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e458:	23ff      	movs	r3, #255	@ 0xff
 800e45a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800e45e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e462:	2b00      	cmp	r3, #0
 800e464:	d109      	bne.n	800e47a <LmHandlerNvmDataStore+0x9e>
 800e466:	4b08      	ldr	r3, [pc, #32]	@ (800e488 <LmHandlerNvmDataStore+0xac>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d004      	beq.n	800e47a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800e470:	4b05      	ldr	r3, [pc, #20]	@ (800e488 <LmHandlerNvmDataStore+0xac>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	69db      	ldr	r3, [r3, #28]
 800e476:	2001      	movs	r0, #1
 800e478:	4798      	blx	r3
    }

    return lmhStatus;
 800e47a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3738      	adds	r7, #56	@ 0x38
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	20000650 	.word	0x20000650

0800e48c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	4603      	mov	r3, r0
 800e494:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800e496:	4b06      	ldr	r3, [pc, #24]	@ (800e4b0 <NvmDataMgmtEvent+0x24>)
 800e498:	881a      	ldrh	r2, [r3, #0]
 800e49a:	88fb      	ldrh	r3, [r7, #6]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	4b03      	ldr	r3, [pc, #12]	@ (800e4b0 <NvmDataMgmtEvent+0x24>)
 800e4a2:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e4a4:	bf00      	nop
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bc80      	pop	{r7}
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	20000778 	.word	0x20000778

0800e4b4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800e4b8:	4b08      	ldr	r3, [pc, #32]	@ (800e4dc <NvmDataMgmtStoreBegin+0x28>)
 800e4ba:	881b      	ldrh	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d102      	bne.n	800e4c6 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800e4c0:	f06f 0301 	mvn.w	r3, #1
 800e4c4:	e008      	b.n	800e4d8 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800e4c6:	f004 faf1 	bl	8012aac <LoRaMacStop>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800e4d0:	f06f 0302 	mvn.w	r3, #2
 800e4d4:	e000      	b.n	800e4d8 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800e4d6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	20000778 	.word	0x20000778

0800e4e0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e4e4:	4b03      	ldr	r3, [pc, #12]	@ (800e4f4 <NvmDataMgmtStoreEnd+0x14>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800e4ea:	f004 fad1 	bl	8012a90 <LoRaMacStart>
    return NVM_DATA_OK;
 800e4ee:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	20000778 	.word	0x20000778

0800e4f8 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800e4fc:	2220      	movs	r2, #32
 800e4fe:	2100      	movs	r1, #0
 800e500:	4802      	ldr	r0, [pc, #8]	@ (800e50c <ClassBStatusReset+0x14>)
 800e502:	f009 ffad 	bl	8018460 <memset1>
}
 800e506:	bf00      	nop
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	20000790 	.word	0x20000790

0800e510 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e510:	b480      	push	{r7}
 800e512:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800e514:	4b02      	ldr	r3, [pc, #8]	@ (800e520 <LmhpCompliancePackageFactory+0x10>)
}
 800e516:	4618      	mov	r0, r3
 800e518:	46bd      	mov	sp, r7
 800e51a:	bc80      	pop	{r7}
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	200000d8 	.word	0x200000d8

0800e524 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af02      	add	r7, sp, #8
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	4613      	mov	r3, r2
 800e530:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d018      	beq.n	800e56a <LmhpComplianceInit+0x46>
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d015      	beq.n	800e56a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800e53e:	4a19      	ldr	r2, [pc, #100]	@ (800e5a4 <LmhpComplianceInit+0x80>)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800e544:	4a18      	ldr	r2, [pc, #96]	@ (800e5a8 <LmhpComplianceInit+0x84>)
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e54a:	4a17      	ldr	r2, [pc, #92]	@ (800e5a8 <LmhpComplianceInit+0x84>)
 800e54c:	79fb      	ldrb	r3, [r7, #7]
 800e54e:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800e550:	4b15      	ldr	r3, [pc, #84]	@ (800e5a8 <LmhpComplianceInit+0x84>)
 800e552:	2201      	movs	r2, #1
 800e554:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800e556:	2300      	movs	r3, #0
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	4b14      	ldr	r3, [pc, #80]	@ (800e5ac <LmhpComplianceInit+0x88>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	f04f 31ff 	mov.w	r1, #4294967295
 800e562:	4813      	ldr	r0, [pc, #76]	@ (800e5b0 <LmhpComplianceInit+0x8c>)
 800e564:	f00d fff0 	bl	801c548 <UTIL_TIMER_Create>
 800e568:	e005      	b.n	800e576 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800e56a:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a4 <LmhpComplianceInit+0x80>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e570:	4b0d      	ldr	r3, [pc, #52]	@ (800e5a8 <LmhpComplianceInit+0x84>)
 800e572:	2200      	movs	r2, #0
 800e574:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800e576:	4b0c      	ldr	r3, [pc, #48]	@ (800e5a8 <LmhpComplianceInit+0x84>)
 800e578:	2200      	movs	r2, #0
 800e57a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800e57c:	f7ff ffbc 	bl	800e4f8 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800e580:	4b09      	ldr	r3, [pc, #36]	@ (800e5a8 <LmhpComplianceInit+0x84>)
 800e582:	2200      	movs	r2, #0
 800e584:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800e586:	4b08      	ldr	r3, [pc, #32]	@ (800e5a8 <LmhpComplianceInit+0x84>)
 800e588:	2200      	movs	r2, #0
 800e58a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800e58c:	4b06      	ldr	r3, [pc, #24]	@ (800e5a8 <LmhpComplianceInit+0x84>)
 800e58e:	2200      	movs	r2, #0
 800e590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800e594:	4b04      	ldr	r3, [pc, #16]	@ (800e5a8 <LmhpComplianceInit+0x84>)
 800e596:	2200      	movs	r2, #0
 800e598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800e59c:	bf00      	nop
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	200007b4 	.word	0x200007b4
 800e5a8:	2000077c 	.word	0x2000077c
 800e5ac:	0800eead 	.word	0x0800eead
 800e5b0:	200007b8 	.word	0x200007b8

0800e5b4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e5b8:	4b02      	ldr	r3, [pc, #8]	@ (800e5c4 <LmhpComplianceIsInitialized+0x10>)
 800e5ba:	781b      	ldrb	r3, [r3, #0]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bc80      	pop	{r7}
 800e5c2:	4770      	bx	lr
 800e5c4:	2000077c 	.word	0x2000077c

0800e5c8 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800e5cc:	4b02      	ldr	r3, [pc, #8]	@ (800e5d8 <LmhpComplianceIsTxPending+0x10>)
 800e5ce:	785b      	ldrb	r3, [r3, #1]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bc80      	pop	{r7}
 800e5d6:	4770      	bx	lr
 800e5d8:	2000077c 	.word	0x2000077c

0800e5dc <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e5dc:	b590      	push	{r4, r7, lr}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800e5e2:	4b33      	ldr	r3, [pc, #204]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e5e4:	785b      	ldrb	r3, [r3, #1]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d03e      	beq.n	800e668 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800e5ea:	f00e f96b 	bl	801c8c4 <UTIL_TIMER_GetCurrentTime>
 800e5ee:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800e5f0:	4b2f      	ldr	r3, [pc, #188]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e5f2:	685c      	ldr	r4, [r3, #4]
 800e5f4:	f7ff f8ba 	bl	800d76c <LmHandlerGetDutyCycleWaitTime>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	4423      	add	r3, r4
 800e5fc:	68fa      	ldr	r2, [r7, #12]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d941      	bls.n	800e686 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800e602:	4b2b      	ldr	r3, [pc, #172]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e604:	7a9b      	ldrb	r3, [r3, #10]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d03d      	beq.n	800e686 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800e60a:	23e0      	movs	r3, #224	@ 0xe0
 800e60c:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800e60e:	4b28      	ldr	r3, [pc, #160]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e610:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800e612:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800e614:	4b26      	ldr	r3, [pc, #152]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e616:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800e618:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e61a:	23ff      	movs	r3, #255	@ 0xff
 800e61c:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800e61e:	4b24      	ldr	r3, [pc, #144]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e620:	7a19      	ldrb	r1, [r3, #8]
 800e622:	463b      	mov	r3, r7
 800e624:	2201      	movs	r2, #1
 800e626:	4618      	mov	r0, r3
 800e628:	f7ff f968 	bl	800d8fc <LmHandlerSend>
 800e62c:	4603      	mov	r3, r0
 800e62e:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800e630:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d004      	beq.n	800e642 <LmhpComplianceProcess+0x66>
 800e638:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e63c:	f113 0f07 	cmn.w	r3, #7
 800e640:	d106      	bne.n	800e650 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800e642:	4b1b      	ldr	r3, [pc, #108]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e644:	2200      	movs	r2, #0
 800e646:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800e648:	4b19      	ldr	r3, [pc, #100]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e64a:	2200      	movs	r2, #0
 800e64c:	729a      	strb	r2, [r3, #10]
 800e64e:	e007      	b.n	800e660 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800e650:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800e654:	4817      	ldr	r0, [pc, #92]	@ (800e6b4 <LmhpComplianceProcess+0xd8>)
 800e656:	f00e f88b 	bl	801c770 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800e65a:	4816      	ldr	r0, [pc, #88]	@ (800e6b4 <LmhpComplianceProcess+0xd8>)
 800e65c:	f00d ffaa 	bl	801c5b4 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800e660:	4a13      	ldr	r2, [pc, #76]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6053      	str	r3, [r2, #4]
 800e666:	e00e      	b.n	800e686 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800e668:	4b11      	ldr	r3, [pc, #68]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e66a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d009      	beq.n	800e686 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800e672:	4b0f      	ldr	r3, [pc, #60]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800e67a:	4b0d      	ldr	r3, [pc, #52]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e67c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e680:	4618      	mov	r0, r3
 800e682:	f7ff fa31 	bl	800dae8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800e686:	4b0a      	ldr	r3, [pc, #40]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e688:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00a      	beq.n	800e6a6 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800e690:	4b07      	ldr	r3, [pc, #28]	@ (800e6b0 <LmhpComplianceProcess+0xd4>)
 800e692:	2200      	movs	r2, #0
 800e694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800e698:	4b07      	ldr	r3, [pc, #28]	@ (800e6b8 <LmhpComplianceProcess+0xdc>)
 800e69a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800e6a0:	4b05      	ldr	r3, [pc, #20]	@ (800e6b8 <LmhpComplianceProcess+0xdc>)
 800e6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6a4:	4798      	blx	r3
        }
    }
}
 800e6a6:	bf00      	nop
 800e6a8:	3714      	adds	r7, #20
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd90      	pop	{r4, r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	2000077c 	.word	0x2000077c
 800e6b4:	200007b8 	.word	0x200007b8
 800e6b8:	200000d8 	.word	0x200000d8

0800e6bc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800e6bc:	b5b0      	push	{r4, r5, r7, lr}
 800e6be:	b0a4      	sub	sp, #144	@ 0x90
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800e6ca:	4bd0      	ldr	r3, [pc, #832]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	f083 0301 	eor.w	r3, r3, #1
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f040 83bf 	bne.w	800ee58 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	78db      	ldrb	r3, [r3, #3]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d103      	bne.n	800e6ea <LmhpComplianceOnMcpsIndication+0x2e>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	7b9b      	ldrb	r3, [r3, #14]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d005      	beq.n	800e6f6 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800e6ea:	4bc8      	ldr	r3, [pc, #800]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e6ec:	8a1b      	ldrh	r3, [r3, #16]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	4bc6      	ldr	r3, [pc, #792]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e6f4:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	7b5b      	ldrb	r3, [r3, #13]
 800e6fa:	f083 0301 	eor.w	r3, r3, #1
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	2b00      	cmp	r3, #0
 800e702:	f040 83ab 	bne.w	800ee5c <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	78db      	ldrb	r3, [r3, #3]
 800e70a:	2be0      	cmp	r3, #224	@ 0xe0
 800e70c:	f040 83a8 	bne.w	800ee60 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800e710:	4bbe      	ldr	r3, [pc, #760]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e712:	2200      	movs	r2, #0
 800e714:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	689a      	ldr	r2, [r3, #8]
 800e71a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e71e:	1c59      	adds	r1, r3, #1
 800e720:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e724:	4413      	add	r3, r2
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	2b7f      	cmp	r3, #127	@ 0x7f
 800e72a:	f200 8372 	bhi.w	800ee12 <LmhpComplianceOnMcpsIndication+0x756>
 800e72e:	a201      	add	r2, pc, #4	@ (adr r2, 800e734 <LmhpComplianceOnMcpsIndication+0x78>)
 800e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e734:	0800e935 	.word	0x0800e935
 800e738:	0800e979 	.word	0x0800e979
 800e73c:	0800e983 	.word	0x0800e983
 800e740:	0800e999 	.word	0x0800e999
 800e744:	0800e9bb 	.word	0x0800e9bb
 800e748:	0800e9e9 	.word	0x0800e9e9
 800e74c:	0800ea15 	.word	0x0800ea15
 800e750:	0800ea73 	.word	0x0800ea73
 800e754:	0800eacb 	.word	0x0800eacb
 800e758:	0800eb37 	.word	0x0800eb37
 800e75c:	0800eb87 	.word	0x0800eb87
 800e760:	0800ee13 	.word	0x0800ee13
 800e764:	0800ee13 	.word	0x0800ee13
 800e768:	0800ee13 	.word	0x0800ee13
 800e76c:	0800ee13 	.word	0x0800ee13
 800e770:	0800ee13 	.word	0x0800ee13
 800e774:	0800ee13 	.word	0x0800ee13
 800e778:	0800ee13 	.word	0x0800ee13
 800e77c:	0800ee13 	.word	0x0800ee13
 800e780:	0800ee13 	.word	0x0800ee13
 800e784:	0800ee13 	.word	0x0800ee13
 800e788:	0800ee13 	.word	0x0800ee13
 800e78c:	0800ee13 	.word	0x0800ee13
 800e790:	0800ee13 	.word	0x0800ee13
 800e794:	0800ee13 	.word	0x0800ee13
 800e798:	0800ee13 	.word	0x0800ee13
 800e79c:	0800ee13 	.word	0x0800ee13
 800e7a0:	0800ee13 	.word	0x0800ee13
 800e7a4:	0800ee13 	.word	0x0800ee13
 800e7a8:	0800ee13 	.word	0x0800ee13
 800e7ac:	0800ee13 	.word	0x0800ee13
 800e7b0:	0800ee13 	.word	0x0800ee13
 800e7b4:	0800eb8f 	.word	0x0800eb8f
 800e7b8:	0800eba1 	.word	0x0800eba1
 800e7bc:	0800eba9 	.word	0x0800eba9
 800e7c0:	0800ee13 	.word	0x0800ee13
 800e7c4:	0800ee13 	.word	0x0800ee13
 800e7c8:	0800ee13 	.word	0x0800ee13
 800e7cc:	0800ee13 	.word	0x0800ee13
 800e7d0:	0800ee13 	.word	0x0800ee13
 800e7d4:	0800ee13 	.word	0x0800ee13
 800e7d8:	0800ee13 	.word	0x0800ee13
 800e7dc:	0800ee13 	.word	0x0800ee13
 800e7e0:	0800ee13 	.word	0x0800ee13
 800e7e4:	0800ee13 	.word	0x0800ee13
 800e7e8:	0800ee13 	.word	0x0800ee13
 800e7ec:	0800ee13 	.word	0x0800ee13
 800e7f0:	0800ee13 	.word	0x0800ee13
 800e7f4:	0800ee13 	.word	0x0800ee13
 800e7f8:	0800ee13 	.word	0x0800ee13
 800e7fc:	0800ee13 	.word	0x0800ee13
 800e800:	0800ee13 	.word	0x0800ee13
 800e804:	0800ee13 	.word	0x0800ee13
 800e808:	0800ee13 	.word	0x0800ee13
 800e80c:	0800ee13 	.word	0x0800ee13
 800e810:	0800ee13 	.word	0x0800ee13
 800e814:	0800ee13 	.word	0x0800ee13
 800e818:	0800ee13 	.word	0x0800ee13
 800e81c:	0800ee13 	.word	0x0800ee13
 800e820:	0800ee13 	.word	0x0800ee13
 800e824:	0800ee13 	.word	0x0800ee13
 800e828:	0800ee13 	.word	0x0800ee13
 800e82c:	0800ee13 	.word	0x0800ee13
 800e830:	0800ee13 	.word	0x0800ee13
 800e834:	0800ee13 	.word	0x0800ee13
 800e838:	0800ee13 	.word	0x0800ee13
 800e83c:	0800ee13 	.word	0x0800ee13
 800e840:	0800ee13 	.word	0x0800ee13
 800e844:	0800ee13 	.word	0x0800ee13
 800e848:	0800ee13 	.word	0x0800ee13
 800e84c:	0800ee13 	.word	0x0800ee13
 800e850:	0800ee13 	.word	0x0800ee13
 800e854:	0800ee13 	.word	0x0800ee13
 800e858:	0800ee13 	.word	0x0800ee13
 800e85c:	0800ee13 	.word	0x0800ee13
 800e860:	0800ee13 	.word	0x0800ee13
 800e864:	0800ee13 	.word	0x0800ee13
 800e868:	0800ee13 	.word	0x0800ee13
 800e86c:	0800ee13 	.word	0x0800ee13
 800e870:	0800ee13 	.word	0x0800ee13
 800e874:	0800ee13 	.word	0x0800ee13
 800e878:	0800ee13 	.word	0x0800ee13
 800e87c:	0800ee13 	.word	0x0800ee13
 800e880:	0800ee13 	.word	0x0800ee13
 800e884:	0800ee13 	.word	0x0800ee13
 800e888:	0800ee13 	.word	0x0800ee13
 800e88c:	0800ee13 	.word	0x0800ee13
 800e890:	0800ee13 	.word	0x0800ee13
 800e894:	0800ee13 	.word	0x0800ee13
 800e898:	0800ee13 	.word	0x0800ee13
 800e89c:	0800ee13 	.word	0x0800ee13
 800e8a0:	0800ee13 	.word	0x0800ee13
 800e8a4:	0800ee13 	.word	0x0800ee13
 800e8a8:	0800ee13 	.word	0x0800ee13
 800e8ac:	0800ee13 	.word	0x0800ee13
 800e8b0:	0800ee13 	.word	0x0800ee13
 800e8b4:	0800ee13 	.word	0x0800ee13
 800e8b8:	0800ee13 	.word	0x0800ee13
 800e8bc:	0800ee13 	.word	0x0800ee13
 800e8c0:	0800ee13 	.word	0x0800ee13
 800e8c4:	0800ee13 	.word	0x0800ee13
 800e8c8:	0800ee13 	.word	0x0800ee13
 800e8cc:	0800ee13 	.word	0x0800ee13
 800e8d0:	0800ee13 	.word	0x0800ee13
 800e8d4:	0800ee13 	.word	0x0800ee13
 800e8d8:	0800ee13 	.word	0x0800ee13
 800e8dc:	0800ee13 	.word	0x0800ee13
 800e8e0:	0800ee13 	.word	0x0800ee13
 800e8e4:	0800ee13 	.word	0x0800ee13
 800e8e8:	0800ee13 	.word	0x0800ee13
 800e8ec:	0800ee13 	.word	0x0800ee13
 800e8f0:	0800ee13 	.word	0x0800ee13
 800e8f4:	0800ee13 	.word	0x0800ee13
 800e8f8:	0800ee13 	.word	0x0800ee13
 800e8fc:	0800ee13 	.word	0x0800ee13
 800e900:	0800ee13 	.word	0x0800ee13
 800e904:	0800ee13 	.word	0x0800ee13
 800e908:	0800ee13 	.word	0x0800ee13
 800e90c:	0800ee13 	.word	0x0800ee13
 800e910:	0800ee13 	.word	0x0800ee13
 800e914:	0800ee13 	.word	0x0800ee13
 800e918:	0800ee13 	.word	0x0800ee13
 800e91c:	0800ee13 	.word	0x0800ee13
 800e920:	0800ee13 	.word	0x0800ee13
 800e924:	0800ee13 	.word	0x0800ee13
 800e928:	0800ebdb 	.word	0x0800ebdb
 800e92c:	0800ec8d 	.word	0x0800ec8d
 800e930:	0800ecbd 	.word	0x0800ecbd
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800e934:	4b35      	ldr	r3, [pc, #212]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e936:	68da      	ldr	r2, [r3, #12]
 800e938:	4b34      	ldr	r3, [pc, #208]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e93a:	7a9b      	ldrb	r3, [r3, #10]
 800e93c:	1c59      	adds	r1, r3, #1
 800e93e:	b2c8      	uxtb	r0, r1
 800e940:	4932      	ldr	r1, [pc, #200]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e942:	7288      	strb	r0, [r1, #10]
 800e944:	4413      	add	r3, r2
 800e946:	2200      	movs	r2, #0
 800e948:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800e94a:	4b30      	ldr	r3, [pc, #192]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e94c:	68da      	ldr	r2, [r3, #12]
 800e94e:	4b2f      	ldr	r3, [pc, #188]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e950:	7a9b      	ldrb	r3, [r3, #10]
 800e952:	1c59      	adds	r1, r3, #1
 800e954:	b2c8      	uxtb	r0, r1
 800e956:	492d      	ldr	r1, [pc, #180]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e958:	7288      	strb	r0, [r1, #10]
 800e95a:	4413      	add	r3, r2
 800e95c:	2206      	movs	r2, #6
 800e95e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800e960:	4b2a      	ldr	r3, [pc, #168]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e962:	68da      	ldr	r2, [r3, #12]
 800e964:	4b29      	ldr	r3, [pc, #164]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e966:	7a9b      	ldrb	r3, [r3, #10]
 800e968:	1c59      	adds	r1, r3, #1
 800e96a:	b2c8      	uxtb	r0, r1
 800e96c:	4927      	ldr	r1, [pc, #156]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e96e:	7288      	strb	r0, [r1, #10]
 800e970:	4413      	add	r3, r2
 800e972:	2201      	movs	r2, #1
 800e974:	701a      	strb	r2, [r3, #0]
                break;
 800e976:	e257      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800e978:	4b24      	ldr	r3, [pc, #144]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e97a:	2201      	movs	r2, #1
 800e97c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800e980:	e252      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800e982:	4b23      	ldr	r3, [pc, #140]	@ (800ea10 <LmhpComplianceOnMcpsIndication+0x354>)
 800e984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e986:	2b00      	cmp	r3, #0
 800e988:	f000 8245 	beq.w	800ee16 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800e98c:	4b20      	ldr	r3, [pc, #128]	@ (800ea10 <LmhpComplianceOnMcpsIndication+0x354>)
 800e98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e990:	2101      	movs	r1, #1
 800e992:	2002      	movs	r0, #2
 800e994:	4798      	blx	r3
                }
                break;
 800e996:	e23e      	b.n	800ee16 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	689a      	ldr	r2, [r3, #8]
 800e99c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e9a0:	1c59      	adds	r1, r3, #1
 800e9a2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e9a6:	4413      	add	r3, r2
 800e9a8:	781a      	ldrb	r2, [r3, #0]
 800e9aa:	4b18      	ldr	r3, [pc, #96]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e9ac:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800e9b0:	4b16      	ldr	r3, [pc, #88]	@ (800ea0c <LmhpComplianceOnMcpsIndication+0x350>)
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800e9b8:	e236      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800e9ba:	2304      	movs	r3, #4
 800e9bc:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	689a      	ldr	r2, [r3, #8]
 800e9c2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e9c6:	1c59      	adds	r1, r3, #1
 800e9c8:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e9cc:	4413      	add	r3, r2
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	bf14      	ite	ne
 800e9d4:	2301      	movne	r3, #1
 800e9d6:	2300      	moveq	r3, #0
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800e9dc:	f107 0308 	add.w	r3, r7, #8
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f004 fb2b 	bl	801303c <LoRaMacMibSetRequestConfirm>
                break;
 800e9e6:	e21f      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	689a      	ldr	r2, [r3, #8]
 800e9ec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e9f0:	1c59      	adds	r1, r3, #1
 800e9f2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e9f6:	4413      	add	r3, r2
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	bf14      	ite	ne
 800e9fe:	2301      	movne	r3, #1
 800ea00:	2300      	moveq	r3, #0
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	4618      	mov	r0, r3
 800ea06:	f005 f9f7 	bl	8013df8 <LoRaMacTestSetDutyCycleOn>
                break;
 800ea0a:	e20d      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
 800ea0c:	2000077c 	.word	0x2000077c
 800ea10:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800ea14:	4ba5      	ldr	r3, [pc, #660]	@ (800ecac <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ea16:	f107 0408 	add.w	r4, r7, #8
 800ea1a:	461d      	mov	r5, r3
 800ea1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ea28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	689a      	ldr	r2, [r3, #8]
 800ea30:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ea34:	1c59      	adds	r1, r3, #1
 800ea36:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ea3a:	4413      	add	r3, r2
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800ea42:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ea46:	2b0a      	cmp	r3, #10
 800ea48:	f200 81e7 	bhi.w	800ee1a <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800ea4c:	4b98      	ldr	r3, [pc, #608]	@ (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f000 81e1 	beq.w	800ee1a <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800ea58:	4b95      	ldr	r3, [pc, #596]	@ (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	685a      	ldr	r2, [r3, #4]
 800ea5e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	3390      	adds	r3, #144	@ 0x90
 800ea66:	443b      	add	r3, r7
 800ea68:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	4790      	blx	r2
                    }
                }
                break;
 800ea70:	e1d3      	b.n	800ee1a <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	689a      	ldr	r2, [r3, #8]
 800ea76:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ea7a:	1c59      	adds	r1, r3, #1
 800ea7c:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ea80:	4413      	add	r3, r2
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800ea88:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d004      	beq.n	800ea9a <LmhpComplianceOnMcpsIndication+0x3de>
 800ea90:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ea94:	2b02      	cmp	r3, #2
 800ea96:	f040 81c2 	bne.w	800ee1e <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800ea9a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	bf14      	ite	ne
 800eaa2:	2301      	movne	r3, #1
 800eaa4:	2300      	moveq	r3, #0
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	4b82      	ldr	r3, [pc, #520]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eaac:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800eaae:	4b80      	ldr	r3, [pc, #512]	@ (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f000 81b2 	beq.w	800ee1e <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800eaba:	4b7d      	ldr	r3, [pc, #500]	@ (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	4a7c      	ldr	r2, [pc, #496]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eac2:	7a12      	ldrb	r2, [r2, #8]
 800eac4:	4610      	mov	r0, r2
 800eac6:	4798      	blx	r3
                    }
                }
                break;
 800eac8:	e1a9      	b.n	800ee1e <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800eaca:	4b7a      	ldr	r3, [pc, #488]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eacc:	68da      	ldr	r2, [r3, #12]
 800eace:	4b79      	ldr	r3, [pc, #484]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ead0:	7a9b      	ldrb	r3, [r3, #10]
 800ead2:	1c59      	adds	r1, r3, #1
 800ead4:	b2c8      	uxtb	r0, r1
 800ead6:	4977      	ldr	r1, [pc, #476]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ead8:	7288      	strb	r0, [r1, #10]
 800eada:	4413      	add	r3, r2
 800eadc:	2208      	movs	r2, #8
 800eade:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800eae0:	2301      	movs	r3, #1
 800eae2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800eae6:	e019      	b.n	800eb1c <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	689a      	ldr	r2, [r3, #8]
 800eaec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eaf0:	1c59      	adds	r1, r3, #1
 800eaf2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800eaf6:	4413      	add	r3, r2
 800eaf8:	781a      	ldrb	r2, [r3, #0]
 800eafa:	4b6e      	ldr	r3, [pc, #440]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eafc:	68d9      	ldr	r1, [r3, #12]
 800eafe:	4b6d      	ldr	r3, [pc, #436]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb00:	7a9b      	ldrb	r3, [r3, #10]
 800eb02:	1c58      	adds	r0, r3, #1
 800eb04:	b2c4      	uxtb	r4, r0
 800eb06:	486b      	ldr	r0, [pc, #428]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb08:	7284      	strb	r4, [r0, #10]
 800eb0a:	440b      	add	r3, r1
 800eb0c:	3201      	adds	r2, #1
 800eb0e:	b2d2      	uxtb	r2, r2
 800eb10:	701a      	strb	r2, [r3, #0]
                     i++ )
 800eb12:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800eb16:	3301      	adds	r3, #1
 800eb18:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800eb1c:	4b65      	ldr	r3, [pc, #404]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb1e:	7a5a      	ldrb	r2, [r3, #9]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	7b1b      	ldrb	r3, [r3, #12]
 800eb24:	4293      	cmp	r3, r2
 800eb26:	bf28      	it	cs
 800eb28:	4613      	movcs	r3, r2
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d3d9      	bcc.n	800eae8 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800eb34:	e178      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800eb36:	4b5f      	ldr	r3, [pc, #380]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb38:	68da      	ldr	r2, [r3, #12]
 800eb3a:	4b5e      	ldr	r3, [pc, #376]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb3c:	7a9b      	ldrb	r3, [r3, #10]
 800eb3e:	1c59      	adds	r1, r3, #1
 800eb40:	b2c8      	uxtb	r0, r1
 800eb42:	495c      	ldr	r1, [pc, #368]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb44:	7288      	strb	r0, [r1, #10]
 800eb46:	4413      	add	r3, r2
 800eb48:	2209      	movs	r2, #9
 800eb4a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800eb4c:	4b59      	ldr	r3, [pc, #356]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb4e:	8a18      	ldrh	r0, [r3, #16]
 800eb50:	4b58      	ldr	r3, [pc, #352]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb52:	68da      	ldr	r2, [r3, #12]
 800eb54:	4b57      	ldr	r3, [pc, #348]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb56:	7a9b      	ldrb	r3, [r3, #10]
 800eb58:	1c59      	adds	r1, r3, #1
 800eb5a:	b2cc      	uxtb	r4, r1
 800eb5c:	4955      	ldr	r1, [pc, #340]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb5e:	728c      	strb	r4, [r1, #10]
 800eb60:	4413      	add	r3, r2
 800eb62:	b2c2      	uxtb	r2, r0
 800eb64:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800eb66:	4b53      	ldr	r3, [pc, #332]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb68:	8a1b      	ldrh	r3, [r3, #16]
 800eb6a:	0a1b      	lsrs	r3, r3, #8
 800eb6c:	b298      	uxth	r0, r3
 800eb6e:	4b51      	ldr	r3, [pc, #324]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb70:	68da      	ldr	r2, [r3, #12]
 800eb72:	4b50      	ldr	r3, [pc, #320]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb74:	7a9b      	ldrb	r3, [r3, #10]
 800eb76:	1c59      	adds	r1, r3, #1
 800eb78:	b2cc      	uxtb	r4, r1
 800eb7a:	494e      	ldr	r1, [pc, #312]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb7c:	728c      	strb	r4, [r1, #10]
 800eb7e:	4413      	add	r3, r2
 800eb80:	b2c2      	uxtb	r2, r0
 800eb82:	701a      	strb	r2, [r3, #0]
                break;
 800eb84:	e150      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800eb86:	4b4b      	ldr	r3, [pc, #300]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	821a      	strh	r2, [r3, #16]
                break;
 800eb8c:	e14c      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800eb8e:	2305      	movs	r3, #5
 800eb90:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800eb94:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f004 fe51 	bl	8013840 <LoRaMacMlmeRequest>
                break;
 800eb9e:	e143      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800eba0:	4b45      	ldr	r3, [pc, #276]	@ (800ecb8 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800eba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eba4:	4798      	blx	r3
                break;
 800eba6:	e13f      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	689a      	ldr	r2, [r3, #8]
 800ebac:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ebb0:	1c59      	adds	r1, r3, #1
 800ebb2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ebb6:	4413      	add	r3, r2
 800ebb8:	781a      	ldrb	r2, [r3, #0]
 800ebba:	4b3e      	ldr	r3, [pc, #248]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ebbc:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800ebbe:	4b3c      	ldr	r3, [pc, #240]	@ (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f000 812c 	beq.w	800ee22 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800ebca:	4b39      	ldr	r3, [pc, #228]	@ (800ecb0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	4a38      	ldr	r2, [pc, #224]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ebd2:	7d52      	ldrb	r2, [r2, #21]
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	4798      	blx	r3
                }
                break;
 800ebd8:	e123      	b.n	800ee22 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	7b1b      	ldrb	r3, [r3, #12]
 800ebde:	2b07      	cmp	r3, #7
 800ebe0:	f040 8121 	bne.w	800ee26 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800ebe4:	2306      	movs	r3, #6
 800ebe6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	689a      	ldr	r2, [r3, #8]
 800ebee:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ebf2:	4413      	add	r3, r2
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	b21a      	sxth	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6899      	ldr	r1, [r3, #8]
 800ebfc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec00:	3301      	adds	r3, #1
 800ec02:	440b      	add	r3, r1
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	b21b      	sxth	r3, r3
 800ec08:	021b      	lsls	r3, r3, #8
 800ec0a:	b21b      	sxth	r3, r3
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	b21b      	sxth	r3, r3
 800ec10:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800ec12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800ec16:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec1a:	3302      	adds	r3, #2
 800ec1c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	689a      	ldr	r2, [r3, #8]
 800ec24:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec28:	4413      	add	r3, r2
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	689a      	ldr	r2, [r3, #8]
 800ec32:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec36:	3301      	adds	r3, #1
 800ec38:	4413      	add	r3, r2
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	021b      	lsls	r3, r3, #8
 800ec3e:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6899      	ldr	r1, [r3, #8]
 800ec46:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec4a:	3302      	adds	r3, #2
 800ec4c:	440b      	add	r3, r1
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ec52:	4313      	orrs	r3, r2
 800ec54:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ec56:	2364      	movs	r3, #100	@ 0x64
 800ec58:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800ec5c:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800ec5e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec62:	3303      	adds	r3, #3
 800ec64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	689a      	ldr	r2, [r3, #8]
 800ec6c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec70:	1c59      	adds	r1, r3, #1
 800ec72:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ec76:	4413      	add	r3, r2
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	b25b      	sxtb	r3, r3
 800ec7c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800ec80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ec84:	4618      	mov	r0, r3
 800ec86:	f004 fddb 	bl	8013840 <LoRaMacMlmeRequest>
                }
                break;
 800ec8a:	e0cc      	b.n	800ee26 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800ec8c:	233b      	movs	r3, #59	@ 0x3b
 800ec8e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800ec92:	2300      	movs	r3, #0
 800ec94:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800ec98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f004 f9cd 	bl	801303c <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800eca2:	4b04      	ldr	r3, [pc, #16]	@ (800ecb4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eca4:	2201      	movs	r2, #1
 800eca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800ecaa:	e0bd      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
 800ecac:	0801d81c 	.word	0x0801d81c
 800ecb0:	200007b4 	.word	0x200007b4
 800ecb4:	2000077c 	.word	0x2000077c
 800ecb8:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800ecbc:	232a      	movs	r3, #42	@ 0x2a
 800ecbe:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800ecc0:	f107 0308 	add.w	r3, r7, #8
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f003 ffe1 	bl	8012c8c <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800ecd2:	4b65      	ldr	r3, [pc, #404]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ecd4:	68da      	ldr	r2, [r3, #12]
 800ecd6:	4b64      	ldr	r3, [pc, #400]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ecd8:	7a9b      	ldrb	r3, [r3, #10]
 800ecda:	1c59      	adds	r1, r3, #1
 800ecdc:	b2c8      	uxtb	r0, r1
 800ecde:	4962      	ldr	r1, [pc, #392]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ece0:	7288      	strb	r0, [r1, #10]
 800ece2:	4413      	add	r3, r2
 800ece4:	227f      	movs	r2, #127	@ 0x7f
 800ece6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800ece8:	4b60      	ldr	r3, [pc, #384]	@ (800ee6c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	4b5e      	ldr	r3, [pc, #376]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ecee:	68d9      	ldr	r1, [r3, #12]
 800ecf0:	4b5d      	ldr	r3, [pc, #372]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ecf2:	7a9b      	ldrb	r3, [r3, #10]
 800ecf4:	1c58      	adds	r0, r3, #1
 800ecf6:	b2c4      	uxtb	r4, r0
 800ecf8:	485b      	ldr	r0, [pc, #364]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ecfa:	7284      	strb	r4, [r0, #10]
 800ecfc:	440b      	add	r3, r1
 800ecfe:	78d2      	ldrb	r2, [r2, #3]
 800ed00:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800ed02:	4b5a      	ldr	r3, [pc, #360]	@ (800ee6c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	4b58      	ldr	r3, [pc, #352]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed08:	68d9      	ldr	r1, [r3, #12]
 800ed0a:	4b57      	ldr	r3, [pc, #348]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed0c:	7a9b      	ldrb	r3, [r3, #10]
 800ed0e:	1c58      	adds	r0, r3, #1
 800ed10:	b2c4      	uxtb	r4, r0
 800ed12:	4855      	ldr	r0, [pc, #340]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed14:	7284      	strb	r4, [r0, #10]
 800ed16:	440b      	add	r3, r1
 800ed18:	7892      	ldrb	r2, [r2, #2]
 800ed1a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800ed1c:	4b53      	ldr	r3, [pc, #332]	@ (800ee6c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	4b51      	ldr	r3, [pc, #324]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed22:	68d9      	ldr	r1, [r3, #12]
 800ed24:	4b50      	ldr	r3, [pc, #320]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed26:	7a9b      	ldrb	r3, [r3, #10]
 800ed28:	1c58      	adds	r0, r3, #1
 800ed2a:	b2c4      	uxtb	r4, r0
 800ed2c:	484e      	ldr	r0, [pc, #312]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed2e:	7284      	strb	r4, [r0, #10]
 800ed30:	440b      	add	r3, r1
 800ed32:	7852      	ldrb	r2, [r2, #1]
 800ed34:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800ed36:	4b4d      	ldr	r3, [pc, #308]	@ (800ee6c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	4b4b      	ldr	r3, [pc, #300]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed3c:	68d9      	ldr	r1, [r3, #12]
 800ed3e:	4b4a      	ldr	r3, [pc, #296]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed40:	7a9b      	ldrb	r3, [r3, #10]
 800ed42:	1c58      	adds	r0, r3, #1
 800ed44:	b2c4      	uxtb	r4, r0
 800ed46:	4848      	ldr	r0, [pc, #288]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed48:	7284      	strb	r4, [r0, #10]
 800ed4a:	440b      	add	r3, r1
 800ed4c:	7812      	ldrb	r2, [r2, #0]
 800ed4e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800ed50:	4b45      	ldr	r3, [pc, #276]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed52:	68da      	ldr	r2, [r3, #12]
 800ed54:	4b44      	ldr	r3, [pc, #272]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed56:	7a9b      	ldrb	r3, [r3, #10]
 800ed58:	1c59      	adds	r1, r3, #1
 800ed5a:	b2c8      	uxtb	r0, r1
 800ed5c:	4942      	ldr	r1, [pc, #264]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed5e:	7288      	strb	r0, [r1, #10]
 800ed60:	4413      	add	r3, r2
 800ed62:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800ed66:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800ed68:	4b3f      	ldr	r3, [pc, #252]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed6a:	68da      	ldr	r2, [r3, #12]
 800ed6c:	4b3e      	ldr	r3, [pc, #248]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed6e:	7a9b      	ldrb	r3, [r3, #10]
 800ed70:	1c59      	adds	r1, r3, #1
 800ed72:	b2c8      	uxtb	r0, r1
 800ed74:	493c      	ldr	r1, [pc, #240]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed76:	7288      	strb	r0, [r1, #10]
 800ed78:	4413      	add	r3, r2
 800ed7a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ed7e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800ed80:	4b39      	ldr	r3, [pc, #228]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed82:	68da      	ldr	r2, [r3, #12]
 800ed84:	4b38      	ldr	r3, [pc, #224]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed86:	7a9b      	ldrb	r3, [r3, #10]
 800ed88:	1c59      	adds	r1, r3, #1
 800ed8a:	b2c8      	uxtb	r0, r1
 800ed8c:	4936      	ldr	r1, [pc, #216]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed8e:	7288      	strb	r0, [r1, #10]
 800ed90:	4413      	add	r3, r2
 800ed92:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ed96:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800ed98:	4b33      	ldr	r3, [pc, #204]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed9a:	68da      	ldr	r2, [r3, #12]
 800ed9c:	4b32      	ldr	r3, [pc, #200]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ed9e:	7a9b      	ldrb	r3, [r3, #10]
 800eda0:	1c59      	adds	r1, r3, #1
 800eda2:	b2c8      	uxtb	r0, r1
 800eda4:	4930      	ldr	r1, [pc, #192]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eda6:	7288      	strb	r0, [r1, #10]
 800eda8:	4413      	add	r3, r2
 800edaa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800edae:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800edb0:	4b2d      	ldr	r3, [pc, #180]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800edb2:	68da      	ldr	r2, [r3, #12]
 800edb4:	4b2c      	ldr	r3, [pc, #176]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800edb6:	7a9b      	ldrb	r3, [r3, #10]
 800edb8:	1c59      	adds	r1, r3, #1
 800edba:	b2c8      	uxtb	r0, r1
 800edbc:	492a      	ldr	r1, [pc, #168]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800edbe:	7288      	strb	r0, [r1, #10]
 800edc0:	4413      	add	r3, r2
 800edc2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800edc6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800edc8:	4b27      	ldr	r3, [pc, #156]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800edca:	68da      	ldr	r2, [r3, #12]
 800edcc:	4b26      	ldr	r3, [pc, #152]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800edce:	7a9b      	ldrb	r3, [r3, #10]
 800edd0:	1c59      	adds	r1, r3, #1
 800edd2:	b2c8      	uxtb	r0, r1
 800edd4:	4924      	ldr	r1, [pc, #144]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800edd6:	7288      	strb	r0, [r1, #10]
 800edd8:	4413      	add	r3, r2
 800edda:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800edde:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800ede0:	4b21      	ldr	r3, [pc, #132]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ede2:	68da      	ldr	r2, [r3, #12]
 800ede4:	4b20      	ldr	r3, [pc, #128]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ede6:	7a9b      	ldrb	r3, [r3, #10]
 800ede8:	1c59      	adds	r1, r3, #1
 800edea:	b2c8      	uxtb	r0, r1
 800edec:	491e      	ldr	r1, [pc, #120]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800edee:	7288      	strb	r0, [r1, #10]
 800edf0:	4413      	add	r3, r2
 800edf2:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800edf6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800edf8:	4b1b      	ldr	r3, [pc, #108]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800edfa:	68da      	ldr	r2, [r3, #12]
 800edfc:	4b1a      	ldr	r3, [pc, #104]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800edfe:	7a9b      	ldrb	r3, [r3, #10]
 800ee00:	1c59      	adds	r1, r3, #1
 800ee02:	b2c8      	uxtb	r0, r1
 800ee04:	4918      	ldr	r1, [pc, #96]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee06:	7288      	strb	r0, [r1, #10]
 800ee08:	4413      	add	r3, r2
 800ee0a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800ee0e:	701a      	strb	r2, [r3, #0]
                break;
 800ee10:	e00a      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800ee12:	bf00      	nop
 800ee14:	e008      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ee16:	bf00      	nop
 800ee18:	e006      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ee1a:	bf00      	nop
 800ee1c:	e004      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ee1e:	bf00      	nop
 800ee20:	e002      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ee22:	bf00      	nop
 800ee24:	e000      	b.n	800ee28 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ee26:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800ee28:	4b0f      	ldr	r3, [pc, #60]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee2a:	7a9b      	ldrb	r3, [r3, #10]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00c      	beq.n	800ee4a <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800ee30:	4b0f      	ldr	r3, [pc, #60]	@ (800ee70 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800ee32:	7a5b      	ldrb	r3, [r3, #9]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d114      	bne.n	800ee62 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800ee38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ee3c:	480c      	ldr	r0, [pc, #48]	@ (800ee70 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800ee3e:	f00d fc97 	bl	801c770 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800ee42:	480b      	ldr	r0, [pc, #44]	@ (800ee70 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800ee44:	f00d fbb6 	bl	801c5b4 <UTIL_TIMER_Start>
 800ee48:	e00b      	b.n	800ee62 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800ee4a:	4809      	ldr	r0, [pc, #36]	@ (800ee70 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800ee4c:	f00d fc20 	bl	801c690 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800ee50:	4b05      	ldr	r3, [pc, #20]	@ (800ee68 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee52:	2200      	movs	r2, #0
 800ee54:	705a      	strb	r2, [r3, #1]
 800ee56:	e004      	b.n	800ee62 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800ee58:	bf00      	nop
 800ee5a:	e002      	b.n	800ee62 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800ee5c:	bf00      	nop
 800ee5e:	e000      	b.n	800ee62 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800ee60:	bf00      	nop
    }
}
 800ee62:	3790      	adds	r7, #144	@ 0x90
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bdb0      	pop	{r4, r5, r7, pc}
 800ee68:	2000077c 	.word	0x2000077c
 800ee6c:	200007b4 	.word	0x200007b4
 800ee70:	200007b8 	.word	0x200007b8

0800ee74 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ee74:	b480      	push	{r7}
 800ee76:	b083      	sub	sp, #12
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800ee7c:	bf00      	nop
    }
}
 800ee7e:	bf00      	nop
 800ee80:	370c      	adds	r7, #12
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bc80      	pop	{r7}
 800ee86:	4770      	bx	lr

0800ee88 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800ee90:	4b05      	ldr	r3, [pc, #20]	@ (800eea8 <LmhpComplianceOnMlmeIndication+0x20>)
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	f083 0301 	eor.w	r3, r3, #1
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	2b00      	cmp	r3, #0
    {
        return;
 800ee9c:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bc80      	pop	{r7}
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	2000077c 	.word	0x2000077c

0800eeac <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800eeb4:	4b08      	ldr	r3, [pc, #32]	@ (800eed8 <OnProcessTimer+0x2c>)
 800eeb6:	7a9b      	ldrb	r3, [r3, #10]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800eebc:	4b06      	ldr	r3, [pc, #24]	@ (800eed8 <OnProcessTimer+0x2c>)
 800eebe:	2201      	movs	r2, #1
 800eec0:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800eec2:	4b06      	ldr	r3, [pc, #24]	@ (800eedc <OnProcessTimer+0x30>)
 800eec4:	695b      	ldr	r3, [r3, #20]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d002      	beq.n	800eed0 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800eeca:	4b04      	ldr	r3, [pc, #16]	@ (800eedc <OnProcessTimer+0x30>)
 800eecc:	695b      	ldr	r3, [r3, #20]
 800eece:	4798      	blx	r3
    }
}
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	2000077c 	.word	0x2000077c
 800eedc:	200000d8 	.word	0x200000d8

0800eee0 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800eee8:	2300      	movs	r3, #0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	370c      	adds	r7, #12
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bc80      	pop	{r7}
 800eef2:	4770      	bx	lr

0800eef4 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	4603      	mov	r3, r0
 800eefc:	6039      	str	r1, [r7, #0]
 800eefe:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800ef00:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	370c      	adds	r7, #12
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bc80      	pop	{r7}
 800ef0c:	4770      	bx	lr
	...

0800ef10 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800ef10:	b590      	push	{r4, r7, lr}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ef16:	f00d fcd5 	bl	801c8c4 <UTIL_TIMER_GetCurrentTime>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	4a0f      	ldr	r2, [pc, #60]	@ (800ef5c <OnRadioTxDone+0x4c>)
 800ef1e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ef20:	4c0f      	ldr	r4, [pc, #60]	@ (800ef60 <OnRadioTxDone+0x50>)
 800ef22:	463b      	mov	r3, r7
 800ef24:	4618      	mov	r0, r3
 800ef26:	f00c feb3 	bl	801bc90 <SysTimeGet>
 800ef2a:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800ef2e:	463a      	mov	r2, r7
 800ef30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef34:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800ef38:	4a0a      	ldr	r2, [pc, #40]	@ (800ef64 <OnRadioTxDone+0x54>)
 800ef3a:	7813      	ldrb	r3, [r2, #0]
 800ef3c:	f043 0320 	orr.w	r3, r3, #32
 800ef40:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ef42:	f003 fa9f 	bl	8012484 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ef46:	4b08      	ldr	r3, [pc, #32]	@ (800ef68 <OnRadioTxDone+0x58>)
 800ef48:	2201      	movs	r2, #1
 800ef4a:	2100      	movs	r1, #0
 800ef4c:	2002      	movs	r0, #2
 800ef4e:	f00d fda9 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 800ef52:	bf00      	nop
 800ef54:	370c      	adds	r7, #12
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd90      	pop	{r4, r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	20001910 	.word	0x20001910
 800ef60:	200007d0 	.word	0x200007d0
 800ef64:	2000190c 	.word	0x2000190c
 800ef68:	0801d848 	.word	0x0801d848

0800ef6c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	4608      	mov	r0, r1
 800ef76:	4611      	mov	r1, r2
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	817b      	strh	r3, [r7, #10]
 800ef7e:	460b      	mov	r3, r1
 800ef80:	813b      	strh	r3, [r7, #8]
 800ef82:	4613      	mov	r3, r2
 800ef84:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ef86:	f00d fc9d 	bl	801c8c4 <UTIL_TIMER_GetCurrentTime>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	4a11      	ldr	r2, [pc, #68]	@ (800efd4 <OnRadioRxDone+0x68>)
 800ef8e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800ef90:	4a10      	ldr	r2, [pc, #64]	@ (800efd4 <OnRadioRxDone+0x68>)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800ef96:	4a0f      	ldr	r2, [pc, #60]	@ (800efd4 <OnRadioRxDone+0x68>)
 800ef98:	897b      	ldrh	r3, [r7, #10]
 800ef9a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800ef9c:	4a0d      	ldr	r2, [pc, #52]	@ (800efd4 <OnRadioRxDone+0x68>)
 800ef9e:	893b      	ldrh	r3, [r7, #8]
 800efa0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800efa2:	4a0c      	ldr	r2, [pc, #48]	@ (800efd4 <OnRadioRxDone+0x68>)
 800efa4:	79fb      	ldrb	r3, [r7, #7]
 800efa6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800efa8:	4a0b      	ldr	r2, [pc, #44]	@ (800efd8 <OnRadioRxDone+0x6c>)
 800efaa:	7813      	ldrb	r3, [r2, #0]
 800efac:	f043 0310 	orr.w	r3, r3, #16
 800efb0:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800efb2:	4a09      	ldr	r2, [pc, #36]	@ (800efd8 <OnRadioRxDone+0x6c>)
 800efb4:	7813      	ldrb	r3, [r2, #0]
 800efb6:	f043 0301 	orr.w	r3, r3, #1
 800efba:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800efbc:	f003 fa62 	bl	8012484 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800efc0:	4b06      	ldr	r3, [pc, #24]	@ (800efdc <OnRadioRxDone+0x70>)
 800efc2:	2201      	movs	r2, #1
 800efc4:	2100      	movs	r1, #0
 800efc6:	2002      	movs	r0, #2
 800efc8:	f00d fd6c 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 800efcc:	bf00      	nop
 800efce:	3710      	adds	r7, #16
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	20001914 	.word	0x20001914
 800efd8:	2000190c 	.word	0x2000190c
 800efdc:	0801d858 	.word	0x0801d858

0800efe0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800efe4:	4a07      	ldr	r2, [pc, #28]	@ (800f004 <OnRadioTxTimeout+0x24>)
 800efe6:	7813      	ldrb	r3, [r2, #0]
 800efe8:	f043 0308 	orr.w	r3, r3, #8
 800efec:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800efee:	f003 fa49 	bl	8012484 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800eff2:	4b05      	ldr	r3, [pc, #20]	@ (800f008 <OnRadioTxTimeout+0x28>)
 800eff4:	2201      	movs	r2, #1
 800eff6:	2100      	movs	r1, #0
 800eff8:	2002      	movs	r0, #2
 800effa:	f00d fd53 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 800effe:	bf00      	nop
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	2000190c 	.word	0x2000190c
 800f008:	0801d868 	.word	0x0801d868

0800f00c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f010:	4a04      	ldr	r2, [pc, #16]	@ (800f024 <OnRadioRxError+0x18>)
 800f012:	7813      	ldrb	r3, [r2, #0]
 800f014:	f043 0304 	orr.w	r3, r3, #4
 800f018:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f01a:	f003 fa33 	bl	8012484 <OnMacProcessNotify>
}
 800f01e:	bf00      	nop
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	2000190c 	.word	0x2000190c

0800f028 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f02c:	4a07      	ldr	r2, [pc, #28]	@ (800f04c <OnRadioRxTimeout+0x24>)
 800f02e:	7813      	ldrb	r3, [r2, #0]
 800f030:	f043 0302 	orr.w	r3, r3, #2
 800f034:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f036:	f003 fa25 	bl	8012484 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f03a:	4b05      	ldr	r3, [pc, #20]	@ (800f050 <OnRadioRxTimeout+0x28>)
 800f03c:	2201      	movs	r2, #1
 800f03e:	2100      	movs	r1, #0
 800f040:	2002      	movs	r0, #2
 800f042:	f00d fd2f 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f046:	bf00      	nop
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	2000190c 	.word	0x2000190c
 800f050:	0801d878 	.word	0x0801d878

0800f054 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f054:	b480      	push	{r7}
 800f056:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f058:	4b08      	ldr	r3, [pc, #32]	@ (800f07c <UpdateRxSlotIdleState+0x28>)
 800f05a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f05e:	2b02      	cmp	r3, #2
 800f060:	d004      	beq.n	800f06c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f062:	4b07      	ldr	r3, [pc, #28]	@ (800f080 <UpdateRxSlotIdleState+0x2c>)
 800f064:	2206      	movs	r2, #6
 800f066:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f06a:	e003      	b.n	800f074 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f06c:	4b04      	ldr	r3, [pc, #16]	@ (800f080 <UpdateRxSlotIdleState+0x2c>)
 800f06e:	2202      	movs	r2, #2
 800f070:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800f074:	bf00      	nop
 800f076:	46bd      	mov	sp, r7
 800f078:	bc80      	pop	{r7}
 800f07a:	4770      	bx	lr
 800f07c:	20000d04 	.word	0x20000d04
 800f080:	200007d0 	.word	0x200007d0

0800f084 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b092      	sub	sp, #72	@ 0x48
 800f088:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f08a:	4b4a      	ldr	r3, [pc, #296]	@ (800f1b4 <ProcessRadioTxDone+0x130>)
 800f08c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f090:	2b02      	cmp	r3, #2
 800f092:	d002      	beq.n	800f09a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f094:	4b48      	ldr	r3, [pc, #288]	@ (800f1b8 <ProcessRadioTxDone+0x134>)
 800f096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f098:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f09a:	f3ef 8310 	mrs	r3, PRIMASK
 800f09e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800f0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800f0a4:	b672      	cpsid	i
}
 800f0a6:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800f0a8:	f00d fc0c 	bl	801c8c4 <UTIL_TIMER_GetCurrentTime>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	4b43      	ldr	r3, [pc, #268]	@ (800f1bc <ProcessRadioTxDone+0x138>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800f0b6:	4b42      	ldr	r3, [pc, #264]	@ (800f1c0 <ProcessRadioTxDone+0x13c>)
 800f0b8:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4840      	ldr	r0, [pc, #256]	@ (800f1c4 <ProcessRadioTxDone+0x140>)
 800f0c4:	f00d fb54 	bl	801c770 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f0c8:	483e      	ldr	r0, [pc, #248]	@ (800f1c4 <ProcessRadioTxDone+0x140>)
 800f0ca:	f00d fa73 	bl	801c5b4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800f0ce:	4b3c      	ldr	r3, [pc, #240]	@ (800f1c0 <ProcessRadioTxDone+0x13c>)
 800f0d0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	4619      	mov	r1, r3
 800f0da:	483b      	ldr	r0, [pc, #236]	@ (800f1c8 <ProcessRadioTxDone+0x144>)
 800f0dc:	f00d fb48 	bl	801c770 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f0e0:	4839      	ldr	r0, [pc, #228]	@ (800f1c8 <ProcessRadioTxDone+0x144>)
 800f0e2:	f00d fa67 	bl	801c5b4 <UTIL_TIMER_Start>
 800f0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0e8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0ec:	f383 8810 	msr	PRIMASK, r3
}
 800f0f0:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800f0f2:	4b33      	ldr	r3, [pc, #204]	@ (800f1c0 <ProcessRadioTxDone+0x13c>)
 800f0f4:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d01a      	beq.n	800f132 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800f0fc:	2315      	movs	r3, #21
 800f0fe:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f102:	4b2c      	ldr	r3, [pc, #176]	@ (800f1b4 <ProcessRadioTxDone+0x130>)
 800f104:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f108:	f107 0220 	add.w	r2, r7, #32
 800f10c:	4611      	mov	r1, r2
 800f10e:	4618      	mov	r0, r3
 800f110:	f006 ff40 	bl	8015f94 <RegionGetPhyParam>
 800f114:	4603      	mov	r3, r0
 800f116:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f118:	4b29      	ldr	r3, [pc, #164]	@ (800f1c0 <ProcessRadioTxDone+0x13c>)
 800f11a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	4413      	add	r3, r2
 800f122:	4619      	mov	r1, r3
 800f124:	4829      	ldr	r0, [pc, #164]	@ (800f1cc <ProcessRadioTxDone+0x148>)
 800f126:	f00d fb23 	bl	801c770 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800f12a:	4828      	ldr	r0, [pc, #160]	@ (800f1cc <ProcessRadioTxDone+0x148>)
 800f12c:	f00d fa42 	bl	801c5b4 <UTIL_TIMER_Start>
 800f130:	e003      	b.n	800f13a <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f132:	4b23      	ldr	r3, [pc, #140]	@ (800f1c0 <ProcessRadioTxDone+0x13c>)
 800f134:	2200      	movs	r2, #0
 800f136:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f13a:	4b20      	ldr	r3, [pc, #128]	@ (800f1bc <ProcessRadioTxDone+0x138>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a1d      	ldr	r2, [pc, #116]	@ (800f1b4 <ProcessRadioTxDone+0x130>)
 800f140:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f142:	4b1f      	ldr	r3, [pc, #124]	@ (800f1c0 <ProcessRadioTxDone+0x13c>)
 800f144:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800f148:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f14a:	4b1c      	ldr	r3, [pc, #112]	@ (800f1bc <ProcessRadioTxDone+0x138>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f150:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f154:	4618      	mov	r0, r3
 800f156:	f00c fdd3 	bl	801bd00 <SysTimeGetMcuTime>
 800f15a:	4638      	mov	r0, r7
 800f15c:	4b15      	ldr	r3, [pc, #84]	@ (800f1b4 <ProcessRadioTxDone+0x130>)
 800f15e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800f162:	9200      	str	r2, [sp, #0]
 800f164:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800f168:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f16c:	ca06      	ldmia	r2, {r1, r2}
 800f16e:	f00c fd28 	bl	801bbc2 <SysTimeSub>
 800f172:	f107 0314 	add.w	r3, r7, #20
 800f176:	463a      	mov	r2, r7
 800f178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f17c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f180:	4b0f      	ldr	r3, [pc, #60]	@ (800f1c0 <ProcessRadioTxDone+0x13c>)
 800f182:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800f186:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f188:	2301      	movs	r3, #1
 800f18a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f18c:	4b09      	ldr	r3, [pc, #36]	@ (800f1b4 <ProcessRadioTxDone+0x130>)
 800f18e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f192:	2b00      	cmp	r3, #0
 800f194:	d101      	bne.n	800f19a <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800f196:	2300      	movs	r3, #0
 800f198:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f19a:	4b06      	ldr	r3, [pc, #24]	@ (800f1b4 <ProcessRadioTxDone+0x130>)
 800f19c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f1a0:	f107 0208 	add.w	r2, r7, #8
 800f1a4:	4611      	mov	r1, r2
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f006 ff0c 	bl	8015fc4 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800f1ac:	bf00      	nop
 800f1ae:	3740      	adds	r7, #64	@ 0x40
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	20000d04 	.word	0x20000d04
 800f1b8:	0801df14 	.word	0x0801df14
 800f1bc:	20001910 	.word	0x20001910
 800f1c0:	200007d0 	.word	0x200007d0
 800f1c4:	20000b50 	.word	0x20000b50
 800f1c8:	20000b68 	.word	0x20000b68
 800f1cc:	20000bd0 	.word	0x20000bd0

0800f1d0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f1d4:	4b10      	ldr	r3, [pc, #64]	@ (800f218 <PrepareRxDoneAbort+0x48>)
 800f1d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1de:	4a0e      	ldr	r2, [pc, #56]	@ (800f218 <PrepareRxDoneAbort+0x48>)
 800f1e0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800f1e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f218 <PrepareRxDoneAbort+0x48>)
 800f1e6:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d002      	beq.n	800f1f4 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	f001 fa12 	bl	8010618 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f1f4:	4a08      	ldr	r2, [pc, #32]	@ (800f218 <PrepareRxDoneAbort+0x48>)
 800f1f6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f1fa:	f043 0302 	orr.w	r3, r3, #2
 800f1fe:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f202:	4a05      	ldr	r2, [pc, #20]	@ (800f218 <PrepareRxDoneAbort+0x48>)
 800f204:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f208:	f043 0310 	orr.w	r3, r3, #16
 800f20c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800f210:	f7ff ff20 	bl	800f054 <UpdateRxSlotIdleState>
}
 800f214:	bf00      	nop
 800f216:	bd80      	pop	{r7, pc}
 800f218:	200007d0 	.word	0x200007d0

0800f21c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f21c:	b590      	push	{r4, r7, lr}
 800f21e:	b0a9      	sub	sp, #164	@ 0xa4
 800f220:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f222:	2312      	movs	r3, #18
 800f224:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f228:	4ba1      	ldr	r3, [pc, #644]	@ (800f4b0 <ProcessRadioRxDone+0x294>)
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800f230:	4b9f      	ldr	r3, [pc, #636]	@ (800f4b0 <ProcessRadioRxDone+0x294>)
 800f232:	891b      	ldrh	r3, [r3, #8]
 800f234:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800f238:	4b9d      	ldr	r3, [pc, #628]	@ (800f4b0 <ProcessRadioRxDone+0x294>)
 800f23a:	895b      	ldrh	r3, [r3, #10]
 800f23c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800f240:	4b9b      	ldr	r3, [pc, #620]	@ (800f4b0 <ProcessRadioRxDone+0x294>)
 800f242:	7b1b      	ldrb	r3, [r3, #12]
 800f244:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800f248:	2300      	movs	r3, #0
 800f24a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800f24e:	2300      	movs	r3, #0
 800f250:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f252:	4b98      	ldr	r3, [pc, #608]	@ (800f4b4 <ProcessRadioRxDone+0x298>)
 800f254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f258:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800f25c:	2300      	movs	r3, #0
 800f25e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f262:	2301      	movs	r3, #1
 800f264:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800f268:	2301      	movs	r3, #1
 800f26a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f26e:	4a92      	ldr	r2, [pc, #584]	@ (800f4b8 <ProcessRadioRxDone+0x29c>)
 800f270:	7813      	ldrb	r3, [r2, #0]
 800f272:	f023 0301 	bic.w	r3, r3, #1
 800f276:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f278:	4b90      	ldr	r3, [pc, #576]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f27a:	2200      	movs	r2, #0
 800f27c:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800f280:	4a8e      	ldr	r2, [pc, #568]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f282:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800f286:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800f28a:	4a8c      	ldr	r2, [pc, #560]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f28c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f290:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f294:	4b89      	ldr	r3, [pc, #548]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f296:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800f29a:	4b88      	ldr	r3, [pc, #544]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f29c:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800f2a0:	4b86      	ldr	r3, [pc, #536]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800f2a8:	4b84      	ldr	r3, [pc, #528]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800f2b0:	4b82      	ldr	r3, [pc, #520]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800f2b8:	4b80      	ldr	r3, [pc, #512]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800f2c0:	4b7e      	ldr	r3, [pc, #504]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800f2c8:	4b7c      	ldr	r3, [pc, #496]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800f2d0:	4b7a      	ldr	r3, [pc, #488]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f2d8:	4b78      	ldr	r3, [pc, #480]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f2e0:	4b76      	ldr	r3, [pc, #472]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800f2e8:	4b74      	ldr	r3, [pc, #464]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f2f0:	4b72      	ldr	r3, [pc, #456]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800f2f8:	4b70      	ldr	r3, [pc, #448]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f300:	4b6f      	ldr	r3, [pc, #444]	@ (800f4c0 <ProcessRadioRxDone+0x2a4>)
 800f302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f304:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f306:	4b6d      	ldr	r3, [pc, #436]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f308:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d102      	bne.n	800f316 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f310:	486c      	ldr	r0, [pc, #432]	@ (800f4c4 <ProcessRadioRxDone+0x2a8>)
 800f312:	f00d f9bd 	bl	801c690 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f316:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f31a:	4619      	mov	r1, r3
 800f31c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800f320:	f004 feba 	bl	8014098 <LoRaMacClassBRxBeacon>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00b      	beq.n	800f342 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f32a:	4a64      	ldr	r2, [pc, #400]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f32c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800f330:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f334:	4a61      	ldr	r2, [pc, #388]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f336:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f33a:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800f33e:	f000 bc8d 	b.w	800fc5c <ProcessRadioRxDone+0xa40>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f342:	4b5c      	ldr	r3, [pc, #368]	@ (800f4b4 <ProcessRadioRxDone+0x298>)
 800f344:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d11e      	bne.n	800f38a <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f34c:	f004 feb7 	bl	80140be <LoRaMacClassBIsPingExpected>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00a      	beq.n	800f36c <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f356:	2000      	movs	r0, #0
 800f358:	f004 fe68 	bl	801402c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f35c:	2000      	movs	r0, #0
 800f35e:	f004 fe89 	bl	8014074 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f362:	4b56      	ldr	r3, [pc, #344]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f364:	2204      	movs	r2, #4
 800f366:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800f36a:	e00e      	b.n	800f38a <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f36c:	f004 feae 	bl	80140cc <LoRaMacClassBIsMulticastExpected>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d009      	beq.n	800f38a <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f376:	2000      	movs	r0, #0
 800f378:	f004 fe62 	bl	8014040 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f37c:	2000      	movs	r0, #0
 800f37e:	f004 fe82 	bl	8014086 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f382:	4b4e      	ldr	r3, [pc, #312]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f384:	2205      	movs	r2, #5
 800f386:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800f38a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d107      	bne.n	800f3a2 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f392:	4b4a      	ldr	r3, [pc, #296]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f394:	2201      	movs	r2, #1
 800f396:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800f39a:	f7ff ff19 	bl	800f1d0 <PrepareRxDoneAbort>
        return;
 800f39e:	f000 bc5d 	b.w	800fc5c <ProcessRadioRxDone+0xa40>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f3a2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f3a6:	1c5a      	adds	r2, r3, #1
 800f3a8:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f3b2:	4413      	add	r3, r2
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800f3ba:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f3be:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	2b06      	cmp	r3, #6
 800f3c8:	f200 8419 	bhi.w	800fbfe <ProcessRadioRxDone+0x9e2>
 800f3cc:	a201      	add	r2, pc, #4	@ (adr r2, 800f3d4 <ProcessRadioRxDone+0x1b8>)
 800f3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d2:	bf00      	nop
 800f3d4:	0800f3f1 	.word	0x0800f3f1
 800f3d8:	0800fbff 	.word	0x0800fbff
 800f3dc:	0800f60f 	.word	0x0800f60f
 800f3e0:	0800fbff 	.word	0x0800fbff
 800f3e4:	0800f607 	.word	0x0800f607
 800f3e8:	0800fbff 	.word	0x0800fbff
 800f3ec:	0800fba3 	.word	0x0800fba3
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f3f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f3f4:	2b10      	cmp	r3, #16
 800f3f6:	d807      	bhi.n	800f408 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f3f8:	4b30      	ldr	r3, [pc, #192]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f400:	f7ff fee6 	bl	800f1d0 <PrepareRxDoneAbort>
                return;
 800f404:	f000 bc2a 	b.w	800fc5c <ProcessRadioRxDone+0xa40>
            }
            macMsgJoinAccept.Buffer = payload;
 800f408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f40c:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800f40e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f412:	b2db      	uxtb	r3, r3
 800f414:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f416:	4b27      	ldr	r3, [pc, #156]	@ (800f4b4 <ProcessRadioRxDone+0x298>)
 800f418:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d007      	beq.n	800f430 <ProcessRadioRxDone+0x214>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f420:	4b26      	ldr	r3, [pc, #152]	@ (800f4bc <ProcessRadioRxDone+0x2a0>)
 800f422:	2201      	movs	r2, #1
 800f424:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f428:	f7ff fed2 	bl	800f1d0 <PrepareRxDoneAbort>
                return;
 800f42c:	f000 bc16 	b.w	800fc5c <ProcessRadioRxDone+0xa40>
            }

            SecureElementGetJoinEui( joinEui );
 800f430:	1d3b      	adds	r3, r7, #4
 800f432:	4618      	mov	r0, r3
 800f434:	f7fd ff7e 	bl	800d334 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800f438:	f107 0214 	add.w	r2, r7, #20
 800f43c:	1d3b      	adds	r3, r7, #4
 800f43e:	4619      	mov	r1, r3
 800f440:	20ff      	movs	r0, #255	@ 0xff
 800f442:	f006 f831 	bl	80154a8 <LoRaMacCryptoHandleJoinAccept>
 800f446:	4603      	mov	r3, r0
 800f448:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, joinEui, &macMsgJoinAccept );
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f44c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f450:	2b00      	cmp	r3, #0
 800f452:	f040 80cc 	bne.w	800f5ee <ProcessRadioRxDone+0x3d2>
            {
                VerifyParams_t verifyRxDr;

                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800f456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f45a:	f003 030f 	and.w	r3, r3, #15
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	2b0f      	cmp	r3, #15
 800f462:	d031      	beq.n	800f4c8 <ProcessRadioRxDone+0x2ac>
                {
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f464:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f468:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	b25b      	sxtb	r3, r3
 800f470:	703b      	strb	r3, [r7, #0]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f472:	4b10      	ldr	r3, [pc, #64]	@ (800f4b4 <ProcessRadioRxDone+0x298>)
 800f474:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f478:	707b      	strb	r3, [r7, #1]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 800f47a:	4b0e      	ldr	r3, [pc, #56]	@ (800f4b4 <ProcessRadioRxDone+0x298>)
 800f47c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f480:	4639      	mov	r1, r7
 800f482:	2207      	movs	r2, #7
 800f484:	4618      	mov	r0, r3
 800f486:	f006 fdc0 	bl	801600a <RegionVerify>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f083 0301 	eor.w	r3, r3, #1
 800f490:	b2db      	uxtb	r3, r3
 800f492:	2b00      	cmp	r3, #0
 800f494:	d018      	beq.n	800f4c8 <ProcessRadioRxDone+0x2ac>
                    {
                        // MLME handling
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f496:	2001      	movs	r0, #1
 800f498:	f005 fb14 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	f000 83b4 	beq.w	800fc0c <ProcessRadioRxDone+0x9f0>
                        {
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f4a4:	2101      	movs	r1, #1
 800f4a6:	2007      	movs	r0, #7
 800f4a8:	f005 fa80 	bl	80149ac <LoRaMacConfirmQueueSetStatus>
 800f4ac:	e3b1      	b.n	800fc12 <ProcessRadioRxDone+0x9f6>
 800f4ae:	bf00      	nop
 800f4b0:	20001914 	.word	0x20001914
 800f4b4:	20000d04 	.word	0x20000d04
 800f4b8:	2000190c 	.word	0x2000190c
 800f4bc:	200007d0 	.word	0x200007d0
 800f4c0:	0801df14 	.word	0x0801df14
 800f4c4:	20000b68 	.word	0x20000b68
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f4c8:	7f7b      	ldrb	r3, [r7, #29]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	4ba5      	ldr	r3, [pc, #660]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f4ce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f4d2:	4ba4      	ldr	r3, [pc, #656]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f4d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800f4d8:	7fbb      	ldrb	r3, [r7, #30]
 800f4da:	021b      	lsls	r3, r3, #8
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	4aa1      	ldr	r2, [pc, #644]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f4e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f4e4:	4b9f      	ldr	r3, [pc, #636]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f4e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800f4ea:	7ffb      	ldrb	r3, [r7, #31]
 800f4ec:	041b      	lsls	r3, r3, #16
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	4a9c      	ldr	r2, [pc, #624]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f4f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800f4f6:	6a3b      	ldr	r3, [r7, #32]
 800f4f8:	4a9a      	ldr	r2, [pc, #616]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f4fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800f4fe:	4b99      	ldr	r3, [pc, #612]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f500:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f504:	4619      	mov	r1, r3
 800f506:	2002      	movs	r0, #2
 800f508:	f7fd ff2c 	bl	800d364 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f50c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f510:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f514:	b2db      	uxtb	r3, r3
 800f516:	461a      	mov	r2, r3
 800f518:	4b92      	ldr	r3, [pc, #584]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f51a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800f51e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f522:	f003 030f 	and.w	r3, r3, #15
 800f526:	b2db      	uxtb	r3, r3
 800f528:	2b0f      	cmp	r3, #15
 800f52a:	d011      	beq.n	800f550 <ProcessRadioRxDone+0x334>
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f52c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f530:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f534:	b2db      	uxtb	r3, r3
 800f536:	461a      	mov	r2, r3
 800f538:	4b8a      	ldr	r3, [pc, #552]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f53a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f53e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f542:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f546:	b2db      	uxtb	r3, r3
 800f548:	461a      	mov	r2, r3
 800f54a:	4b86      	ldr	r3, [pc, #536]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f54c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f550:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f554:	461a      	mov	r2, r3
 800f556:	4b83      	ldr	r3, [pc, #524]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f558:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800f55a:	4b82      	ldr	r3, [pc, #520]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f55c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d102      	bne.n	800f568 <ProcessRadioRxDone+0x34c>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800f562:	4b80      	ldr	r3, [pc, #512]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f564:	2201      	movs	r2, #1
 800f566:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800f568:	4b7e      	ldr	r3, [pc, #504]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f56a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f56c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f570:	fb02 f303 	mul.w	r3, r2, r3
 800f574:	4a7b      	ldr	r2, [pc, #492]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f576:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f578:	4b7a      	ldr	r3, [pc, #488]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f57a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f57c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f580:	4a78      	ldr	r2, [pc, #480]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f582:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800f584:	4b77      	ldr	r3, [pc, #476]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f586:	2201      	movs	r2, #1
 800f588:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800f58c:	4b75      	ldr	r3, [pc, #468]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f58e:	2200      	movs	r2, #0
 800f590:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f594:	f107 0314 	add.w	r3, r7, #20
 800f598:	3312      	adds	r3, #18
 800f59a:	67fb      	str	r3, [r7, #124]	@ 0x7c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f59c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f5a0:	b2db      	uxtb	r3, r3
 800f5a2:	3b11      	subs	r3, #17
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800f5aa:	4b6f      	ldr	r3, [pc, #444]	@ (800f768 <ProcessRadioRxDone+0x54c>)
 800f5ac:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800f5b0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800f5b4:	4b6b      	ldr	r3, [pc, #428]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f5b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f5ba:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800f5be:	4611      	mov	r1, r2
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f006 fd39 	bl	8016038 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f5c6:	4b67      	ldr	r3, [pc, #412]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f5c8:	2202      	movs	r2, #2
 800f5ca:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800f5ce:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f005 fa76 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	f000 8318 	beq.w	800fc10 <ProcessRadioRxDone+0x9f4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800f5e0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	f005 f9e0 	bl	80149ac <LoRaMacConfirmQueueSetStatus>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }

            break;
 800f5ec:	e310      	b.n	800fc10 <ProcessRadioRxDone+0x9f4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f5ee:	2001      	movs	r0, #1
 800f5f0:	f005 fa68 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f000 830a 	beq.w	800fc10 <ProcessRadioRxDone+0x9f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f5fc:	2101      	movs	r1, #1
 800f5fe:	2007      	movs	r0, #7
 800f600:	f005 f9d4 	bl	80149ac <LoRaMacConfirmQueueSetStatus>
            break;
 800f604:	e304      	b.n	800fc10 <ProcessRadioRxDone+0x9f4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f606:	4b58      	ldr	r3, [pc, #352]	@ (800f768 <ProcessRadioRxDone+0x54c>)
 800f608:	2201      	movs	r2, #1
 800f60a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f60e:	4b55      	ldr	r3, [pc, #340]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f610:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f614:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f618:	4b53      	ldr	r3, [pc, #332]	@ (800f768 <ProcessRadioRxDone+0x54c>)
 800f61a:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800f61e:	b25b      	sxtb	r3, r3
 800f620:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f624:	230d      	movs	r3, #13
 800f626:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f62a:	4b4e      	ldr	r3, [pc, #312]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f62c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800f630:	2b00      	cmp	r3, #0
 800f632:	d002      	beq.n	800f63a <ProcessRadioRxDone+0x41e>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f634:	230e      	movs	r3, #14
 800f636:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f63a:	4b4a      	ldr	r3, [pc, #296]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f63c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f640:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f644:	4611      	mov	r1, r2
 800f646:	4618      	mov	r0, r3
 800f648:	f006 fca4 	bl	8015f94 <RegionGetPhyParam>
 800f64c:	4603      	mov	r3, r0
 800f64e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f650:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f654:	3b0d      	subs	r3, #13
 800f656:	b29b      	uxth	r3, r3
 800f658:	b21b      	sxth	r3, r3
 800f65a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f65e:	b21a      	sxth	r2, r3
 800f660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f662:	b21b      	sxth	r3, r3
 800f664:	429a      	cmp	r2, r3
 800f666:	dc03      	bgt.n	800f670 <ProcessRadioRxDone+0x454>
 800f668:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f66c:	2b0b      	cmp	r3, #11
 800f66e:	d806      	bhi.n	800f67e <ProcessRadioRxDone+0x462>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f670:	4b3d      	ldr	r3, [pc, #244]	@ (800f768 <ProcessRadioRxDone+0x54c>)
 800f672:	2201      	movs	r2, #1
 800f674:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f678:	f7ff fdaa 	bl	800f1d0 <PrepareRxDoneAbort>
                return;
 800f67c:	e2ee      	b.n	800fc5c <ProcessRadioRxDone+0xa40>
            }
            macMsgData.Buffer = payload;
 800f67e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f682:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800f684:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f68e:	4b37      	ldr	r3, [pc, #220]	@ (800f76c <ProcessRadioRxDone+0x550>)
 800f690:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f692:	23ff      	movs	r3, #255	@ 0xff
 800f694:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f698:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f69c:	4618      	mov	r0, r3
 800f69e:	f006 fa00 	bl	8015aa2 <LoRaMacParserData>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d006      	beq.n	800f6b6 <ProcessRadioRxDone+0x49a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f6a8:	4b2f      	ldr	r3, [pc, #188]	@ (800f768 <ProcessRadioRxDone+0x54c>)
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f6b0:	f7ff fd8e 	bl	800f1d0 <PrepareRxDoneAbort>
                return;
 800f6b4:	e2d2      	b.n	800fc5c <ProcessRadioRxDone+0xa40>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f6b6:	4b2b      	ldr	r3, [pc, #172]	@ (800f764 <ProcessRadioRxDone+0x548>)
 800f6b8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d132      	bne.n	800f726 <ProcessRadioRxDone+0x50a>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800f6c0:	f004 fcfd 	bl	80140be <LoRaMacClassBIsPingExpected>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d014      	beq.n	800f6f4 <ProcessRadioRxDone+0x4d8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	f004 fcae 	bl	801402c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	f004 fccf 	bl	8014074 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f6d6:	4b24      	ldr	r3, [pc, #144]	@ (800f768 <ProcessRadioRxDone+0x54c>)
 800f6d8:	2204      	movs	r2, #4
 800f6da:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f6de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6e0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f6e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	f004 fd6f 	bl	80141d0 <LoRaMacClassBSetFPendingBit>
 800f6f2:	e018      	b.n	800f726 <ProcessRadioRxDone+0x50a>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f6f4:	f004 fcea 	bl	80140cc <LoRaMacClassBIsMulticastExpected>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d013      	beq.n	800f726 <ProcessRadioRxDone+0x50a>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f6fe:	2000      	movs	r0, #0
 800f700:	f004 fc9e 	bl	8014040 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f704:	2000      	movs	r0, #0
 800f706:	f004 fcbe 	bl	8014086 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f70a:	4b17      	ldr	r3, [pc, #92]	@ (800f768 <ProcessRadioRxDone+0x54c>)
 800f70c:	2205      	movs	r2, #5
 800f70e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f714:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f718:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	4619      	mov	r1, r3
 800f720:	4610      	mov	r0, r2
 800f722:	f004 fd55 	bl	80141d0 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f728:	4a0f      	ldr	r2, [pc, #60]	@ (800f768 <ProcessRadioRxDone+0x54c>)
 800f72a:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f72e:	f107 020e 	add.w	r2, r7, #14
 800f732:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f736:	4611      	mov	r1, r2
 800f738:	4618      	mov	r0, r3
 800f73a:	f002 fd9f 	bl	801227c <DetermineFrameType>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d006      	beq.n	800f752 <ProcessRadioRxDone+0x536>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f744:	4b08      	ldr	r3, [pc, #32]	@ (800f768 <ProcessRadioRxDone+0x54c>)
 800f746:	2201      	movs	r2, #1
 800f748:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f74c:	f7ff fd40 	bl	800f1d0 <PrepareRxDoneAbort>
                return;
 800f750:	e284      	b.n	800fc5c <ProcessRadioRxDone+0xa40>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f752:	2300      	movs	r3, #0
 800f754:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800f758:	2300      	movs	r3, #0
 800f75a:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f75c:	2300      	movs	r3, #0
 800f75e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800f762:	e055      	b.n	800f810 <ProcessRadioRxDone+0x5f4>
 800f764:	20000d04 	.word	0x20000d04
 800f768:	200007d0 	.word	0x200007d0
 800f76c:	20000a08 	.word	0x20000a08
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f770:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f774:	499f      	ldr	r1, [pc, #636]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f776:	4613      	mov	r3, r2
 800f778:	005b      	lsls	r3, r3, #1
 800f77a:	4413      	add	r3, r2
 800f77c:	011b      	lsls	r3, r3, #4
 800f77e:	440b      	add	r3, r1
 800f780:	33ec      	adds	r3, #236	@ 0xec
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f786:	429a      	cmp	r2, r3
 800f788:	d13d      	bne.n	800f806 <ProcessRadioRxDone+0x5ea>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f78a:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f78e:	4999      	ldr	r1, [pc, #612]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f790:	4613      	mov	r3, r2
 800f792:	005b      	lsls	r3, r3, #1
 800f794:	4413      	add	r3, r2
 800f796:	011b      	lsls	r3, r3, #4
 800f798:	440b      	add	r3, r1
 800f79a:	33e9      	adds	r3, #233	@ 0xe9
 800f79c:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d031      	beq.n	800f806 <ProcessRadioRxDone+0x5ea>
                {
                    multicast = 1;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f7a8:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f7ac:	4991      	ldr	r1, [pc, #580]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	005b      	lsls	r3, r3, #1
 800f7b2:	4413      	add	r3, r2
 800f7b4:	011b      	lsls	r3, r3, #4
 800f7b6:	440b      	add	r3, r1
 800f7b8:	33ea      	adds	r3, #234	@ 0xea
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f7c0:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f7c4:	498b      	ldr	r1, [pc, #556]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f7c6:	4613      	mov	r3, r2
 800f7c8:	005b      	lsls	r3, r3, #1
 800f7ca:	4413      	add	r3, r2
 800f7cc:	011b      	lsls	r3, r3, #4
 800f7ce:	440b      	add	r3, r1
 800f7d0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f7da:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f7de:	4985      	ldr	r1, [pc, #532]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	005b      	lsls	r3, r3, #1
 800f7e4:	4413      	add	r3, r2
 800f7e6:	011b      	lsls	r3, r3, #4
 800f7e8:	440b      	add	r3, r1
 800f7ea:	33ec      	adds	r3, #236	@ 0xec
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f7f2:	4b80      	ldr	r3, [pc, #512]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f7f4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f7f8:	2b02      	cmp	r3, #2
 800f7fa:	d10e      	bne.n	800f81a <ProcessRadioRxDone+0x5fe>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f7fc:	4b7e      	ldr	r3, [pc, #504]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f7fe:	2203      	movs	r2, #3
 800f800:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800f804:	e009      	b.n	800f81a <ProcessRadioRxDone+0x5fe>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f806:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800f80a:	3301      	adds	r3, #1
 800f80c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800f810:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800f814:	2b00      	cmp	r3, #0
 800f816:	d0ab      	beq.n	800f770 <ProcessRadioRxDone+0x554>
 800f818:	e000      	b.n	800f81c <ProcessRadioRxDone+0x600>
                    break;
 800f81a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f81c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800f820:	2b01      	cmp	r3, #1
 800f822:	d117      	bne.n	800f854 <ProcessRadioRxDone+0x638>
 800f824:	7bbb      	ldrb	r3, [r7, #14]
 800f826:	2b03      	cmp	r3, #3
 800f828:	d10d      	bne.n	800f846 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f82a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f82e:	f003 0320 	and.w	r3, r3, #32
 800f832:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f834:	2b00      	cmp	r3, #0
 800f836:	d106      	bne.n	800f846 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f838:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f83c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f840:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f842:	2b00      	cmp	r3, #0
 800f844:	d006      	beq.n	800f854 <ProcessRadioRxDone+0x638>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f846:	4b6c      	ldr	r3, [pc, #432]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f84e:	f7ff fcbf 	bl	800f1d0 <PrepareRxDoneAbort>
                return;
 800f852:	e203      	b.n	800fc5c <ProcessRadioRxDone+0xa40>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800f854:	7bb9      	ldrb	r1, [r7, #14]
 800f856:	4c67      	ldr	r4, [pc, #412]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f858:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800f85c:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800f860:	f107 0310 	add.w	r3, r7, #16
 800f864:	9301      	str	r3, [sp, #4]
 800f866:	f107 030f 	add.w	r3, r7, #15
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800f870:	f000 feec 	bl	801064c <GetFCntDown>
 800f874:	4603      	mov	r3, r0
 800f876:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f87a:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d017      	beq.n	800f8b2 <ProcessRadioRxDone+0x696>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f882:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f886:	2b07      	cmp	r3, #7
 800f888:	d104      	bne.n	800f894 <ProcessRadioRxDone+0x678>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f88a:	4b5b      	ldr	r3, [pc, #364]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f88c:	2208      	movs	r2, #8
 800f88e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800f892:	e003      	b.n	800f89c <ProcessRadioRxDone+0x680>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f894:	4b58      	ldr	r3, [pc, #352]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f896:	2201      	movs	r2, #1
 800f898:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	4a56      	ldr	r2, [pc, #344]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f8a0:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	4a54      	ldr	r2, [pc, #336]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f8a8:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800f8ac:	f7ff fc90 	bl	800f1d0 <PrepareRxDoneAbort>
                return;
 800f8b0:	e1d4      	b.n	800fc5c <ProcessRadioRxDone+0xa40>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f8b2:	7bfa      	ldrb	r2, [r7, #15]
 800f8b4:	6939      	ldr	r1, [r7, #16]
 800f8b6:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800f8ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f8be:	9300      	str	r3, [sp, #0]
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800f8c6:	f005 ff4f 	bl	8015768 <LoRaMacCryptoUnsecureMessage>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f8d0:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d00f      	beq.n	800f8f8 <ProcessRadioRxDone+0x6dc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f8d8:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f8dc:	2b02      	cmp	r3, #2
 800f8de:	d104      	bne.n	800f8ea <ProcessRadioRxDone+0x6ce>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f8e0:	4b45      	ldr	r3, [pc, #276]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f8e2:	220a      	movs	r2, #10
 800f8e4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800f8e8:	e003      	b.n	800f8f2 <ProcessRadioRxDone+0x6d6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f8ea:	4b43      	ldr	r3, [pc, #268]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f8ec:	220b      	movs	r2, #11
 800f8ee:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800f8f2:	f7ff fc6d 	bl	800f1d0 <PrepareRxDoneAbort>
                return;
 800f8f6:	e1b1      	b.n	800fc5c <ProcessRadioRxDone+0xa40>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f8f8:	4b3f      	ldr	r3, [pc, #252]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800f900:	4a3d      	ldr	r2, [pc, #244]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f902:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800f906:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800f90a:	4b3b      	ldr	r3, [pc, #236]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800f912:	4b39      	ldr	r3, [pc, #228]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f914:	2200      	movs	r2, #0
 800f916:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	4a36      	ldr	r2, [pc, #216]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f91e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	4a34      	ldr	r2, [pc, #208]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f926:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f92a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f92e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f932:	b2db      	uxtb	r3, r3
 800f934:	2b00      	cmp	r3, #0
 800f936:	bf14      	ite	ne
 800f938:	2301      	movne	r3, #1
 800f93a:	2300      	moveq	r3, #0
 800f93c:	b2da      	uxtb	r2, r3
 800f93e:	4b2e      	ldr	r3, [pc, #184]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f940:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f944:	4b2c      	ldr	r3, [pc, #176]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f946:	2200      	movs	r2, #0
 800f948:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f94c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f950:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f954:	b2db      	uxtb	r3, r3
 800f956:	2b00      	cmp	r3, #0
 800f958:	bf14      	ite	ne
 800f95a:	2301      	movne	r3, #1
 800f95c:	2300      	moveq	r3, #0
 800f95e:	b2da      	uxtb	r2, r3
 800f960:	4b25      	ldr	r3, [pc, #148]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f962:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f966:	4b24      	ldr	r3, [pc, #144]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f968:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d004      	beq.n	800f97a <ProcessRadioRxDone+0x75e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f970:	4b21      	ldr	r3, [pc, #132]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f972:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f976:	2b01      	cmp	r3, #1
 800f978:	d106      	bne.n	800f988 <ProcessRadioRxDone+0x76c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f97a:	4b1e      	ldr	r3, [pc, #120]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f97c:	2200      	movs	r2, #0
 800f97e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800f980:	4b1c      	ldr	r3, [pc, #112]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f982:	2201      	movs	r2, #1
 800f984:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f988:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d104      	bne.n	800f99a <ProcessRadioRxDone+0x77e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f990:	4b19      	ldr	r3, [pc, #100]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f992:	2202      	movs	r2, #2
 800f994:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800f998:	e03a      	b.n	800fa10 <ProcessRadioRxDone+0x7f4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f99a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f99e:	f023 031f 	bic.w	r3, r3, #31
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	2ba0      	cmp	r3, #160	@ 0xa0
 800f9a6:	d12b      	bne.n	800fa00 <ProcessRadioRxDone+0x7e4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f9a8:	4b12      	ldr	r3, [pc, #72]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f9b0:	4b10      	ldr	r3, [pc, #64]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f9b2:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d102      	bne.n	800f9c0 <ProcessRadioRxDone+0x7a4>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f9ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f9bc:	4a0d      	ldr	r2, [pc, #52]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f9be:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f9c0:	4b0d      	ldr	r3, [pc, #52]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f9c8:	4b0b      	ldr	r3, [pc, #44]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f9ca:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d01e      	beq.n	800fa10 <ProcessRadioRxDone+0x7f4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800f9d2:	4b09      	ldr	r3, [pc, #36]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f9d4:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d019      	beq.n	800fa10 <ProcessRadioRxDone+0x7f4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f9dc:	4b05      	ldr	r3, [pc, #20]	@ (800f9f4 <ProcessRadioRxDone+0x7d8>)
 800f9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9e2:	4a05      	ldr	r2, [pc, #20]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f9e4:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800f9e8:	4b04      	ldr	r3, [pc, #16]	@ (800f9fc <ProcessRadioRxDone+0x7e0>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4a02      	ldr	r2, [pc, #8]	@ (800f9f8 <ProcessRadioRxDone+0x7dc>)
 800f9ee:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800f9f2:	e00d      	b.n	800fa10 <ProcessRadioRxDone+0x7f4>
 800f9f4:	20000d04 	.word	0x20000d04
 800f9f8:	200007d0 	.word	0x200007d0
 800f9fc:	20001914 	.word	0x20001914
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800fa00:	4b98      	ldr	r3, [pc, #608]	@ (800fc64 <ProcessRadioRxDone+0xa48>)
 800fa02:	2200      	movs	r2, #0
 800fa04:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fa08:	4b97      	ldr	r3, [pc, #604]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800fa10:	4b94      	ldr	r3, [pc, #592]	@ (800fc64 <ProcessRadioRxDone+0xa48>)
 800fa12:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d106      	bne.n	800fa28 <ProcessRadioRxDone+0x80c>
 800fa1a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fa1e:	f003 0310 	and.w	r3, r3, #16
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d004      	beq.n	800fa32 <ProcessRadioRxDone+0x816>
 800fa28:	4b8e      	ldr	r3, [pc, #568]	@ (800fc64 <ProcessRadioRxDone+0xa48>)
 800fa2a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d004      	beq.n	800fa3c <ProcessRadioRxDone+0x820>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 800fa32:	4b8d      	ldr	r3, [pc, #564]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fa34:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d003      	beq.n	800fa44 <ProcessRadioRxDone+0x828>
            //if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800fa3c:	4b8a      	ldr	r3, [pc, #552]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fa3e:	2201      	movs	r2, #1
 800fa40:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fa44:	4b88      	ldr	r3, [pc, #544]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fa46:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fa4a:	4a87      	ldr	r2, [pc, #540]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fa4c:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800fa50:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800fa54:	4618      	mov	r0, r3
 800fa56:	f001 ffa5 	bl	80119a4 <RemoveMacCommands>

            switch( fType )
 800fa5a:	7bbb      	ldrb	r3, [r7, #14]
 800fa5c:	2b03      	cmp	r3, #3
 800fa5e:	d874      	bhi.n	800fb4a <ProcessRadioRxDone+0x92e>
 800fa60:	a201      	add	r2, pc, #4	@ (adr r2, 800fa68 <ProcessRadioRxDone+0x84c>)
 800fa62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa66:	bf00      	nop
 800fa68:	0800fa79 	.word	0x0800fa79
 800fa6c:	0800fac9 	.word	0x0800fac9
 800fa70:	0800faff 	.word	0x0800faff
 800fa74:	0800fb25 	.word	0x0800fb25
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800fa78:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fa7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	461c      	mov	r4, r3
 800fa84:	4b78      	ldr	r3, [pc, #480]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fa86:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fa8a:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800fa8e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800fa92:	f102 0010 	add.w	r0, r2, #16
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	4622      	mov	r2, r4
 800fa9c:	2100      	movs	r1, #0
 800fa9e:	f000 ff51 	bl	8010944 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800faa2:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800faa6:	4b70      	ldr	r3, [pc, #448]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800faa8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800faac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800faae:	4a6e      	ldr	r2, [pc, #440]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fab0:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fab4:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800fab8:	4b6b      	ldr	r3, [pc, #428]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800faba:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800fabe:	4b6a      	ldr	r3, [pc, #424]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fac0:	2201      	movs	r2, #1
 800fac2:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800fac6:	e047      	b.n	800fb58 <ProcessRadioRxDone+0x93c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800fac8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800facc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	461c      	mov	r4, r3
 800fad4:	4b64      	ldr	r3, [pc, #400]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fad6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fada:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800fade:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800fae2:	f102 0010 	add.w	r0, r2, #16
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	460b      	mov	r3, r1
 800faea:	4622      	mov	r2, r4
 800faec:	2100      	movs	r1, #0
 800faee:	f000 ff29 	bl	8010944 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800faf2:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800faf6:	4b5c      	ldr	r3, [pc, #368]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800faf8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800fafc:	e02c      	b.n	800fb58 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800fafe:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800fb00:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800fb04:	4b58      	ldr	r3, [pc, #352]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb06:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fb0a:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	460b      	mov	r3, r1
 800fb12:	2100      	movs	r1, #0
 800fb14:	f000 ff16 	bl	8010944 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fb18:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fb1c:	4b52      	ldr	r3, [pc, #328]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb1e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800fb22:	e019      	b.n	800fb58 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fb24:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fb28:	4b4f      	ldr	r3, [pc, #316]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb2a:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fb2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb30:	4a4d      	ldr	r2, [pc, #308]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb32:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fb36:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800fb3a:	4b4b      	ldr	r3, [pc, #300]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb3c:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800fb40:	4b49      	ldr	r3, [pc, #292]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800fb48:	e006      	b.n	800fb58 <ProcessRadioRxDone+0x93c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb4a:	4b47      	ldr	r3, [pc, #284]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800fb52:	f7ff fb3d 	bl	800f1d0 <PrepareRxDoneAbort>
                    break;
 800fb56:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800fb58:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800fb5c:	2be0      	cmp	r3, #224	@ 0xe0
 800fb5e:	d118      	bne.n	800fb92 <ProcessRadioRxDone+0x976>
 800fb60:	4b40      	ldr	r3, [pc, #256]	@ (800fc64 <ProcessRadioRxDone+0xa48>)
 800fb62:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800fb66:	f083 0301 	eor.w	r3, r3, #1
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d010      	beq.n	800fb92 <ProcessRadioRxDone+0x976>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fb70:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fb74:	4b3c      	ldr	r3, [pc, #240]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb76:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800fb7a:	4b3b      	ldr	r3, [pc, #236]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800fb82:	4b39      	ldr	r3, [pc, #228]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800fb8a:	4b37      	ldr	r3, [pc, #220]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fb92:	4a35      	ldr	r2, [pc, #212]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fb94:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fb98:	f043 0302 	orr.w	r3, r3, #2
 800fb9c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800fba0:	e037      	b.n	800fc12 <ProcessRadioRxDone+0x9f6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fba2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fba6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fbaa:	18d1      	adds	r1, r2, r3
 800fbac:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	461a      	mov	r2, r3
 800fbbc:	482b      	ldr	r0, [pc, #172]	@ (800fc6c <ProcessRadioRxDone+0xa50>)
 800fbbe:	f008 fc14 	bl	80183ea <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fbc2:	4b29      	ldr	r3, [pc, #164]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fbc4:	2203      	movs	r2, #3
 800fbc6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fbca:	4b27      	ldr	r3, [pc, #156]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fbd2:	4b25      	ldr	r3, [pc, #148]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fbd4:	4a25      	ldr	r2, [pc, #148]	@ (800fc6c <ProcessRadioRxDone+0xa50>)
 800fbd6:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fbda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fbde:	b2da      	uxtb	r2, r3
 800fbe0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fbe4:	1ad3      	subs	r3, r2, r3
 800fbe6:	b2da      	uxtb	r2, r3
 800fbe8:	4b1f      	ldr	r3, [pc, #124]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fbea:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fbee:	4a1e      	ldr	r2, [pc, #120]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fbf0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fbf4:	f043 0302 	orr.w	r3, r3, #2
 800fbf8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800fbfc:	e009      	b.n	800fc12 <ProcessRadioRxDone+0x9f6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fbfe:	4b1a      	ldr	r3, [pc, #104]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fc00:	2201      	movs	r2, #1
 800fc02:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800fc06:	f7ff fae3 	bl	800f1d0 <PrepareRxDoneAbort>
            break;
 800fc0a:	e002      	b.n	800fc12 <ProcessRadioRxDone+0x9f6>
                        break;
 800fc0c:	bf00      	nop
 800fc0e:	e000      	b.n	800fc12 <ProcessRadioRxDone+0x9f6>
            break;
 800fc10:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fc12:	4b15      	ldr	r3, [pc, #84]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fc14:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d004      	beq.n	800fc26 <ProcessRadioRxDone+0xa0a>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800fc1c:	4b12      	ldr	r3, [pc, #72]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fc1e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d10c      	bne.n	800fc40 <ProcessRadioRxDone+0xa24>
    {
        if( MacCtx.NodeAckRequested == true )
 800fc26:	4b10      	ldr	r3, [pc, #64]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fc28:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d007      	beq.n	800fc40 <ProcessRadioRxDone+0xa24>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800fc30:	4b0d      	ldr	r3, [pc, #52]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fc32:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <ProcessRadioRxDone+0xa24>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	f000 fcec 	bl	8010618 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800fc40:	4b09      	ldr	r3, [pc, #36]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fc42:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fc46:	2b02      	cmp	r3, #2
 800fc48:	d006      	beq.n	800fc58 <ProcessRadioRxDone+0xa3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fc4a:	4a07      	ldr	r2, [pc, #28]	@ (800fc68 <ProcessRadioRxDone+0xa4c>)
 800fc4c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fc50:	f043 0310 	orr.w	r3, r3, #16
 800fc54:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800fc58:	f7ff f9fc 	bl	800f054 <UpdateRxSlotIdleState>
}
 800fc5c:	379c      	adds	r7, #156	@ 0x9c
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd90      	pop	{r4, r7, pc}
 800fc62:	bf00      	nop
 800fc64:	20000d04 	.word	0x20000d04
 800fc68:	200007d0 	.word	0x200007d0
 800fc6c:	20000a08 	.word	0x20000a08

0800fc70 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fc74:	4b11      	ldr	r3, [pc, #68]	@ (800fcbc <ProcessRadioTxTimeout+0x4c>)
 800fc76:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d002      	beq.n	800fc84 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800fc7e:	4b10      	ldr	r3, [pc, #64]	@ (800fcc0 <ProcessRadioTxTimeout+0x50>)
 800fc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc82:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800fc84:	f7ff f9e6 	bl	800f054 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800fc88:	4b0e      	ldr	r3, [pc, #56]	@ (800fcc4 <ProcessRadioTxTimeout+0x54>)
 800fc8a:	2202      	movs	r2, #2
 800fc8c:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800fc90:	2002      	movs	r0, #2
 800fc92:	f004 fee3 	bl	8014a5c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fc96:	4b0b      	ldr	r3, [pc, #44]	@ (800fcc4 <ProcessRadioTxTimeout+0x54>)
 800fc98:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d003      	beq.n	800fca8 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800fca0:	4b08      	ldr	r3, [pc, #32]	@ (800fcc4 <ProcessRadioTxTimeout+0x54>)
 800fca2:	2201      	movs	r2, #1
 800fca4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fca8:	4a06      	ldr	r2, [pc, #24]	@ (800fcc4 <ProcessRadioTxTimeout+0x54>)
 800fcaa:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fcae:	f043 0310 	orr.w	r3, r3, #16
 800fcb2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800fcb6:	bf00      	nop
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	20000d04 	.word	0x20000d04
 800fcc0:	0801df14 	.word	0x0801df14
 800fcc4:	200007d0 	.word	0x200007d0

0800fcc8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	4603      	mov	r3, r0
 800fcd0:	460a      	mov	r2, r1
 800fcd2:	71fb      	strb	r3, [r7, #7]
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fcdc:	4b3d      	ldr	r3, [pc, #244]	@ (800fdd4 <HandleRadioRxErrorTimeout+0x10c>)
 800fcde:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fce2:	2b02      	cmp	r3, #2
 800fce4:	d002      	beq.n	800fcec <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800fce6:	4b3c      	ldr	r3, [pc, #240]	@ (800fdd8 <HandleRadioRxErrorTimeout+0x110>)
 800fce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcea:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fcec:	f004 f9e0 	bl	80140b0 <LoRaMacClassBIsBeaconExpected>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d007      	beq.n	800fd06 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800fcf6:	2002      	movs	r0, #2
 800fcf8:	f004 f98e 	bl	8014018 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	f004 f9b0 	bl	8014062 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800fd02:	2301      	movs	r3, #1
 800fd04:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fd06:	4b33      	ldr	r3, [pc, #204]	@ (800fdd4 <HandleRadioRxErrorTimeout+0x10c>)
 800fd08:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d119      	bne.n	800fd44 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fd10:	f004 f9d5 	bl	80140be <LoRaMacClassBIsPingExpected>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d007      	beq.n	800fd2a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	f004 f986 	bl	801402c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fd20:	2000      	movs	r0, #0
 800fd22:	f004 f9a7 	bl	8014074 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800fd26:	2301      	movs	r3, #1
 800fd28:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fd2a:	f004 f9cf 	bl	80140cc <LoRaMacClassBIsMulticastExpected>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d007      	beq.n	800fd44 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fd34:	2000      	movs	r0, #0
 800fd36:	f004 f983 	bl	8014040 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	f004 f9a3 	bl	8014086 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fd40:	2301      	movs	r3, #1
 800fd42:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800fd44:	7bfb      	ldrb	r3, [r7, #15]
 800fd46:	f083 0301 	eor.w	r3, r3, #1
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d03b      	beq.n	800fdc8 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fd50:	4b22      	ldr	r3, [pc, #136]	@ (800fddc <HandleRadioRxErrorTimeout+0x114>)
 800fd52:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d122      	bne.n	800fda0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800fd5a:	4b20      	ldr	r3, [pc, #128]	@ (800fddc <HandleRadioRxErrorTimeout+0x114>)
 800fd5c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d003      	beq.n	800fd6c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800fd64:	4a1d      	ldr	r2, [pc, #116]	@ (800fddc <HandleRadioRxErrorTimeout+0x114>)
 800fd66:	79fb      	ldrb	r3, [r7, #7]
 800fd68:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800fd6c:	79fb      	ldrb	r3, [r7, #7]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f004 fe74 	bl	8014a5c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800fd74:	4b17      	ldr	r3, [pc, #92]	@ (800fdd4 <HandleRadioRxErrorTimeout+0x10c>)
 800fd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f00c fdb5 	bl	801c8e8 <UTIL_TIMER_GetElapsedTime>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	4b16      	ldr	r3, [pc, #88]	@ (800fddc <HandleRadioRxErrorTimeout+0x114>)
 800fd82:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d31e      	bcc.n	800fdc8 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800fd8a:	4815      	ldr	r0, [pc, #84]	@ (800fde0 <HandleRadioRxErrorTimeout+0x118>)
 800fd8c:	f00c fc80 	bl	801c690 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fd90:	4a12      	ldr	r2, [pc, #72]	@ (800fddc <HandleRadioRxErrorTimeout+0x114>)
 800fd92:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fd96:	f043 0310 	orr.w	r3, r3, #16
 800fd9a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800fd9e:	e013      	b.n	800fdc8 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800fda0:	4b0e      	ldr	r3, [pc, #56]	@ (800fddc <HandleRadioRxErrorTimeout+0x114>)
 800fda2:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d003      	beq.n	800fdb2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800fdaa:	4a0c      	ldr	r2, [pc, #48]	@ (800fddc <HandleRadioRxErrorTimeout+0x114>)
 800fdac:	79bb      	ldrb	r3, [r7, #6]
 800fdae:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800fdb2:	79bb      	ldrb	r3, [r7, #6]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f004 fe51 	bl	8014a5c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800fdba:	4a08      	ldr	r2, [pc, #32]	@ (800fddc <HandleRadioRxErrorTimeout+0x114>)
 800fdbc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fdc0:	f043 0310 	orr.w	r3, r3, #16
 800fdc4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800fdc8:	f7ff f944 	bl	800f054 <UpdateRxSlotIdleState>
}
 800fdcc:	bf00      	nop
 800fdce:	3710      	adds	r7, #16
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	20000d04 	.word	0x20000d04
 800fdd8:	0801df14 	.word	0x0801df14
 800fddc:	200007d0 	.word	0x200007d0
 800fde0:	20000b68 	.word	0x20000b68

0800fde4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800fde8:	2106      	movs	r1, #6
 800fdea:	2005      	movs	r0, #5
 800fdec:	f7ff ff6c 	bl	800fcc8 <HandleRadioRxErrorTimeout>
}
 800fdf0:	bf00      	nop
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800fdf8:	2104      	movs	r1, #4
 800fdfa:	2003      	movs	r0, #3
 800fdfc:	f7ff ff64 	bl	800fcc8 <HandleRadioRxErrorTimeout>
}
 800fe00:	bf00      	nop
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b084      	sub	sp, #16
 800fe08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe0a:	f3ef 8310 	mrs	r3, PRIMASK
 800fe0e:	607b      	str	r3, [r7, #4]
  return(result);
 800fe10:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800fe12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe14:	b672      	cpsid	i
}
 800fe16:	bf00      	nop
    events = LoRaMacRadioEvents;
 800fe18:	4b1d      	ldr	r3, [pc, #116]	@ (800fe90 <LoRaMacHandleIrqEvents+0x8c>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800fe1e:	4b1c      	ldr	r3, [pc, #112]	@ (800fe90 <LoRaMacHandleIrqEvents+0x8c>)
 800fe20:	2200      	movs	r2, #0
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	f383 8810 	msr	PRIMASK, r3
}
 800fe2e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d027      	beq.n	800fe86 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800fe36:	783b      	ldrb	r3, [r7, #0]
 800fe38:	f003 0320 	and.w	r3, r3, #32
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d001      	beq.n	800fe46 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800fe42:	f7ff f91f 	bl	800f084 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800fe46:	783b      	ldrb	r3, [r7, #0]
 800fe48:	f003 0310 	and.w	r3, r3, #16
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800fe52:	f7ff f9e3 	bl	800f21c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800fe56:	783b      	ldrb	r3, [r7, #0]
 800fe58:	f003 0308 	and.w	r3, r3, #8
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d001      	beq.n	800fe66 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800fe62:	f7ff ff05 	bl	800fc70 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800fe66:	783b      	ldrb	r3, [r7, #0]
 800fe68:	f003 0304 	and.w	r3, r3, #4
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d001      	beq.n	800fe76 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800fe72:	f7ff ffb7 	bl	800fde4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800fe76:	783b      	ldrb	r3, [r7, #0]
 800fe78:	f003 0302 	and.w	r3, r3, #2
 800fe7c:	b2db      	uxtb	r3, r3
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d001      	beq.n	800fe86 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800fe82:	f7ff ffb7 	bl	800fdf4 <ProcessRadioRxTimeout>
        }
    }
}
 800fe86:	bf00      	nop
 800fe88:	3710      	adds	r7, #16
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	2000190c 	.word	0x2000190c

0800fe94 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800fe94:	b480      	push	{r7}
 800fe96:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800fe98:	4b10      	ldr	r3, [pc, #64]	@ (800fedc <LoRaMacIsBusy+0x48>)
 800fe9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d101      	bne.n	800fea6 <LoRaMacIsBusy+0x12>
    {
        return false;
 800fea2:	2300      	movs	r3, #0
 800fea4:	e015      	b.n	800fed2 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800fea6:	4b0e      	ldr	r3, [pc, #56]	@ (800fee0 <LoRaMacIsBusy+0x4c>)
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	f003 0301 	and.w	r3, r3, #1
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d001      	beq.n	800feb8 <LoRaMacIsBusy+0x24>
    {
        return true;
 800feb4:	2301      	movs	r3, #1
 800feb6:	e00c      	b.n	800fed2 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800feb8:	4b08      	ldr	r3, [pc, #32]	@ (800fedc <LoRaMacIsBusy+0x48>)
 800feba:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d106      	bne.n	800fed0 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800fec2:	4b06      	ldr	r3, [pc, #24]	@ (800fedc <LoRaMacIsBusy+0x48>)
 800fec4:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d101      	bne.n	800fed0 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800fecc:	2300      	movs	r3, #0
 800fece:	e000      	b.n	800fed2 <LoRaMacIsBusy+0x3e>
    }
    return true;
 800fed0:	2301      	movs	r3, #1
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bc80      	pop	{r7}
 800fed8:	4770      	bx	lr
 800feda:	bf00      	nop
 800fedc:	200007d0 	.word	0x200007d0
 800fee0:	2000190c 	.word	0x2000190c

0800fee4 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800fee4:	b480      	push	{r7}
 800fee6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800fee8:	4b05      	ldr	r3, [pc, #20]	@ (800ff00 <LoRaMacIsStopped+0x1c>)
 800feea:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d101      	bne.n	800fef6 <LoRaMacIsStopped+0x12>
    {
        return true;
 800fef2:	2301      	movs	r3, #1
 800fef4:	e000      	b.n	800fef8 <LoRaMacIsStopped+0x14>
    }
    return false;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bc80      	pop	{r7}
 800fefe:	4770      	bx	lr
 800ff00:	200007d0 	.word	0x200007d0

0800ff04 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800ff0e:	4a04      	ldr	r2, [pc, #16]	@ (800ff20 <LoRaMacEnableRequests+0x1c>)
 800ff10:	79fb      	ldrb	r3, [r7, #7]
 800ff12:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 800ff16:	bf00      	nop
 800ff18:	370c      	adds	r7, #12
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bc80      	pop	{r7}
 800ff1e:	4770      	bx	lr
 800ff20:	200007d0 	.word	0x200007d0

0800ff24 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ff2a:	4b2c      	ldr	r3, [pc, #176]	@ (800ffdc <LoRaMacHandleRequestEvents+0xb8>)
 800ff2c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ff30:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ff32:	4b2a      	ldr	r3, [pc, #168]	@ (800ffdc <LoRaMacHandleRequestEvents+0xb8>)
 800ff34:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d14a      	bne.n	800ffd2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ff3c:	4b27      	ldr	r3, [pc, #156]	@ (800ffdc <LoRaMacHandleRequestEvents+0xb8>)
 800ff3e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ff42:	f003 0301 	and.w	r3, r3, #1
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d006      	beq.n	800ff5a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ff4c:	4a23      	ldr	r2, [pc, #140]	@ (800ffdc <LoRaMacHandleRequestEvents+0xb8>)
 800ff4e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ff52:	f023 0301 	bic.w	r3, r3, #1
 800ff56:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ff5a:	4b20      	ldr	r3, [pc, #128]	@ (800ffdc <LoRaMacHandleRequestEvents+0xb8>)
 800ff5c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ff60:	f003 0304 	and.w	r3, r3, #4
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d006      	beq.n	800ff78 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ff6a:	4a1c      	ldr	r2, [pc, #112]	@ (800ffdc <LoRaMacHandleRequestEvents+0xb8>)
 800ff6c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ff70:	f023 0304 	bic.w	r3, r3, #4
 800ff74:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ff78:	2001      	movs	r0, #1
 800ff7a:	f7ff ffc3 	bl	800ff04 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ff7e:	793b      	ldrb	r3, [r7, #4]
 800ff80:	f003 0301 	and.w	r3, r3, #1
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d005      	beq.n	800ff96 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ff8a:	4b14      	ldr	r3, [pc, #80]	@ (800ffdc <LoRaMacHandleRequestEvents+0xb8>)
 800ff8c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4813      	ldr	r0, [pc, #76]	@ (800ffe0 <LoRaMacHandleRequestEvents+0xbc>)
 800ff94:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ff96:	793b      	ldrb	r3, [r7, #4]
 800ff98:	f003 0304 	and.w	r3, r3, #4
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00e      	beq.n	800ffc0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ffa2:	4810      	ldr	r0, [pc, #64]	@ (800ffe4 <LoRaMacHandleRequestEvents+0xc0>)
 800ffa4:	f004 fda8 	bl	8014af8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ffa8:	f004 fdf8 	bl	8014b9c <LoRaMacConfirmQueueGetCnt>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d006      	beq.n	800ffc0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ffb2:	4a0a      	ldr	r2, [pc, #40]	@ (800ffdc <LoRaMacHandleRequestEvents+0xb8>)
 800ffb4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ffb8:	f043 0304 	orr.w	r3, r3, #4
 800ffbc:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800ffc0:	f004 f8a2 	bl	8014108 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800ffc4:	4a05      	ldr	r2, [pc, #20]	@ (800ffdc <LoRaMacHandleRequestEvents+0xb8>)
 800ffc6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ffca:	f023 0310 	bic.w	r3, r3, #16
 800ffce:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800ffd2:	bf00      	nop
 800ffd4:	3708      	adds	r7, #8
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	200007d0 	.word	0x200007d0
 800ffe0:	20000c10 	.word	0x20000c10
 800ffe4:	20000c24 	.word	0x20000c24

0800ffe8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ffec:	4b16      	ldr	r3, [pc, #88]	@ (8010048 <LoRaMacHandleIndicationEvents+0x60>)
 800ffee:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800fff2:	f003 0308 	and.w	r3, r3, #8
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d00d      	beq.n	8010018 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800fffc:	4a12      	ldr	r2, [pc, #72]	@ (8010048 <LoRaMacHandleIndicationEvents+0x60>)
 800fffe:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010002:	f023 0308 	bic.w	r3, r3, #8
 8010006:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801000a:	4b0f      	ldr	r3, [pc, #60]	@ (8010048 <LoRaMacHandleIndicationEvents+0x60>)
 801000c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	490e      	ldr	r1, [pc, #56]	@ (801004c <LoRaMacHandleIndicationEvents+0x64>)
 8010014:	480e      	ldr	r0, [pc, #56]	@ (8010050 <LoRaMacHandleIndicationEvents+0x68>)
 8010016:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010018:	4b0b      	ldr	r3, [pc, #44]	@ (8010048 <LoRaMacHandleIndicationEvents+0x60>)
 801001a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801001e:	f003 0302 	and.w	r3, r3, #2
 8010022:	b2db      	uxtb	r3, r3
 8010024:	2b00      	cmp	r3, #0
 8010026:	d00d      	beq.n	8010044 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010028:	4a07      	ldr	r2, [pc, #28]	@ (8010048 <LoRaMacHandleIndicationEvents+0x60>)
 801002a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801002e:	f023 0302 	bic.w	r3, r3, #2
 8010032:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8010036:	4b04      	ldr	r3, [pc, #16]	@ (8010048 <LoRaMacHandleIndicationEvents+0x60>)
 8010038:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	4903      	ldr	r1, [pc, #12]	@ (801004c <LoRaMacHandleIndicationEvents+0x64>)
 8010040:	4804      	ldr	r0, [pc, #16]	@ (8010054 <LoRaMacHandleIndicationEvents+0x6c>)
 8010042:	4798      	blx	r3
    }
}
 8010044:	bf00      	nop
 8010046:	bd80      	pop	{r7, pc}
 8010048:	200007d0 	.word	0x200007d0
 801004c:	20000c5c 	.word	0x20000c5c
 8010050:	20000c38 	.word	0x20000c38
 8010054:	20000bf0 	.word	0x20000bf0

08010058 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801005e:	4b2a      	ldr	r3, [pc, #168]	@ (8010108 <LoRaMacHandleMcpsRequest+0xb0>)
 8010060:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010064:	f003 0301 	and.w	r3, r3, #1
 8010068:	b2db      	uxtb	r3, r3
 801006a:	2b00      	cmp	r3, #0
 801006c:	d048      	beq.n	8010100 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 801006e:	2300      	movs	r3, #0
 8010070:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010072:	2300      	movs	r3, #0
 8010074:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010076:	4b24      	ldr	r3, [pc, #144]	@ (8010108 <LoRaMacHandleMcpsRequest+0xb0>)
 8010078:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 801007c:	2b00      	cmp	r3, #0
 801007e:	d004      	beq.n	801008a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010080:	4b21      	ldr	r3, [pc, #132]	@ (8010108 <LoRaMacHandleMcpsRequest+0xb0>)
 8010082:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010086:	2b03      	cmp	r3, #3
 8010088:	d104      	bne.n	8010094 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801008a:	f002 f959 	bl	8012340 <CheckRetransUnconfirmedUplink>
 801008e:	4603      	mov	r3, r0
 8010090:	71fb      	strb	r3, [r7, #7]
 8010092:	e010      	b.n	80100b6 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010094:	4b1c      	ldr	r3, [pc, #112]	@ (8010108 <LoRaMacHandleMcpsRequest+0xb0>)
 8010096:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 801009a:	2b01      	cmp	r3, #1
 801009c:	d10b      	bne.n	80100b6 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 801009e:	4b1a      	ldr	r3, [pc, #104]	@ (8010108 <LoRaMacHandleMcpsRequest+0xb0>)
 80100a0:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d004      	beq.n	80100b2 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80100a8:	f002 f976 	bl	8012398 <CheckRetransConfirmedUplink>
 80100ac:	4603      	mov	r3, r0
 80100ae:	71fb      	strb	r3, [r7, #7]
 80100b0:	e001      	b.n	80100b6 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 80100b2:	2301      	movs	r3, #1
 80100b4:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80100b6:	79fb      	ldrb	r3, [r7, #7]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00d      	beq.n	80100d8 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80100bc:	4813      	ldr	r0, [pc, #76]	@ (801010c <LoRaMacHandleMcpsRequest+0xb4>)
 80100be:	f00c fae7 	bl	801c690 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80100c2:	4b11      	ldr	r3, [pc, #68]	@ (8010108 <LoRaMacHandleMcpsRequest+0xb0>)
 80100c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80100c8:	f023 0320 	bic.w	r3, r3, #32
 80100cc:	4a0e      	ldr	r2, [pc, #56]	@ (8010108 <LoRaMacHandleMcpsRequest+0xb0>)
 80100ce:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 80100d2:	f002 f99b 	bl	801240c <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80100d6:	e013      	b.n	8010100 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 80100d8:	79bb      	ldrb	r3, [r7, #6]
 80100da:	f083 0301 	eor.w	r3, r3, #1
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d00d      	beq.n	8010100 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80100e4:	4a08      	ldr	r2, [pc, #32]	@ (8010108 <LoRaMacHandleMcpsRequest+0xb0>)
 80100e6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80100ea:	f023 0310 	bic.w	r3, r3, #16
 80100ee:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 80100f2:	4b05      	ldr	r3, [pc, #20]	@ (8010108 <LoRaMacHandleMcpsRequest+0xb0>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 80100fa:	2000      	movs	r0, #0
 80100fc:	f000 f9c8 	bl	8010490 <OnTxDelayedTimerEvent>
}
 8010100:	bf00      	nop
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}
 8010108:	200007d0 	.word	0x200007d0
 801010c:	20000b38 	.word	0x20000b38

08010110 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010114:	4b18      	ldr	r3, [pc, #96]	@ (8010178 <LoRaMacHandleMlmeRequest+0x68>)
 8010116:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801011a:	f003 0304 	and.w	r3, r3, #4
 801011e:	b2db      	uxtb	r3, r3
 8010120:	2b00      	cmp	r3, #0
 8010122:	d026      	beq.n	8010172 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010124:	2001      	movs	r0, #1
 8010126:	f004 fccd 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d012      	beq.n	8010156 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010130:	2001      	movs	r0, #1
 8010132:	f004 fc69 	bl	8014a08 <LoRaMacConfirmQueueGetStatus>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	d103      	bne.n	8010144 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 801013c:	4b0e      	ldr	r3, [pc, #56]	@ (8010178 <LoRaMacHandleMlmeRequest+0x68>)
 801013e:	2200      	movs	r2, #0
 8010140:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010144:	4b0c      	ldr	r3, [pc, #48]	@ (8010178 <LoRaMacHandleMlmeRequest+0x68>)
 8010146:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801014a:	f023 0302 	bic.w	r3, r3, #2
 801014e:	4a0a      	ldr	r2, [pc, #40]	@ (8010178 <LoRaMacHandleMlmeRequest+0x68>)
 8010150:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010154:	e00d      	b.n	8010172 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8010156:	2006      	movs	r0, #6
 8010158:	f004 fcb4 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d007      	beq.n	8010172 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010162:	4b05      	ldr	r3, [pc, #20]	@ (8010178 <LoRaMacHandleMlmeRequest+0x68>)
 8010164:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010168:	f023 0302 	bic.w	r3, r3, #2
 801016c:	4a02      	ldr	r2, [pc, #8]	@ (8010178 <LoRaMacHandleMlmeRequest+0x68>)
 801016e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 8010172:	bf00      	nop
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	200007d0 	.word	0x200007d0

0801017c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 801017c:	b580      	push	{r7, lr}
 801017e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010180:	200b      	movs	r0, #11
 8010182:	f004 fc9f 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d019      	beq.n	80101c0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 801018c:	4b0e      	ldr	r3, [pc, #56]	@ (80101c8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801018e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010192:	f003 0301 	and.w	r3, r3, #1
 8010196:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010198:	2b00      	cmp	r3, #0
 801019a:	d111      	bne.n	80101c0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801019c:	4b0a      	ldr	r3, [pc, #40]	@ (80101c8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801019e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80101a2:	f003 0304 	and.w	r3, r3, #4
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d009      	beq.n	80101c0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80101ac:	4b06      	ldr	r3, [pc, #24]	@ (80101c8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80101ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80101b2:	f023 0302 	bic.w	r3, r3, #2
 80101b6:	4a04      	ldr	r2, [pc, #16]	@ (80101c8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80101b8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 80101bc:	2301      	movs	r3, #1
 80101be:	e000      	b.n	80101c2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80101c0:	2300      	movs	r3, #0
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	200007d0 	.word	0x200007d0

080101cc <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	4603      	mov	r3, r0
 80101d4:	71fb      	strb	r3, [r7, #7]
 80101d6:	460b      	mov	r3, r1
 80101d8:	71bb      	strb	r3, [r7, #6]
 80101da:	4613      	mov	r3, r2
 80101dc:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 80101de:	79fb      	ldrb	r3, [r7, #7]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d00a      	beq.n	80101fa <CheckForMinimumAbpDatarate+0x2e>
 80101e4:	79bb      	ldrb	r3, [r7, #6]
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d107      	bne.n	80101fa <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 80101ea:	797b      	ldrb	r3, [r7, #5]
 80101ec:	f083 0301 	eor.w	r3, r3, #1
 80101f0:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d001      	beq.n	80101fa <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 80101f6:	2301      	movs	r3, #1
 80101f8:	e000      	b.n	80101fc <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 80101fa:	2300      	movs	r3, #0
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	bc80      	pop	{r7}
 8010204:	4770      	bx	lr
	...

08010208 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8010208:	b480      	push	{r7}
 801020a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 801020c:	4b0d      	ldr	r3, [pc, #52]	@ (8010244 <LoRaMacCheckForRxAbort+0x3c>)
 801020e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00f      	beq.n	801023a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801021a:	4b0a      	ldr	r3, [pc, #40]	@ (8010244 <LoRaMacCheckForRxAbort+0x3c>)
 801021c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010220:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010224:	4a07      	ldr	r2, [pc, #28]	@ (8010244 <LoRaMacCheckForRxAbort+0x3c>)
 8010226:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801022a:	4b06      	ldr	r3, [pc, #24]	@ (8010244 <LoRaMacCheckForRxAbort+0x3c>)
 801022c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010230:	f023 0302 	bic.w	r3, r3, #2
 8010234:	4a03      	ldr	r2, [pc, #12]	@ (8010244 <LoRaMacCheckForRxAbort+0x3c>)
 8010236:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 801023a:	bf00      	nop
 801023c:	46bd      	mov	sp, r7
 801023e:	bc80      	pop	{r7}
 8010240:	4770      	bx	lr
 8010242:	bf00      	nop
 8010244:	200007d0 	.word	0x200007d0

08010248 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010254:	2300      	movs	r3, #0
 8010256:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010258:	4b51      	ldr	r3, [pc, #324]	@ (80103a0 <LoRaMacHandleNvm+0x158>)
 801025a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801025e:	2b00      	cmp	r3, #0
 8010260:	f040 8099 	bne.w	8010396 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2124      	movs	r1, #36	@ 0x24
 8010268:	4618      	mov	r0, r3
 801026a:	f008 f913 	bl	8018494 <Crc32>
 801026e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010274:	68ba      	ldr	r2, [r7, #8]
 8010276:	429a      	cmp	r2, r3
 8010278:	d006      	beq.n	8010288 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010280:	89fb      	ldrh	r3, [r7, #14]
 8010282:	f043 0301 	orr.w	r3, r3, #1
 8010286:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	3328      	adds	r3, #40	@ 0x28
 801028c:	211c      	movs	r1, #28
 801028e:	4618      	mov	r0, r3
 8010290:	f008 f900 	bl	8018494 <Crc32>
 8010294:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801029a:	68ba      	ldr	r2, [r7, #8]
 801029c:	429a      	cmp	r2, r3
 801029e:	d006      	beq.n	80102ae <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	68ba      	ldr	r2, [r7, #8]
 80102a4:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80102a6:	89fb      	ldrh	r3, [r7, #14]
 80102a8:	f043 0302 	orr.w	r3, r3, #2
 80102ac:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	3348      	adds	r3, #72	@ 0x48
 80102b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80102b6:	4618      	mov	r0, r3
 80102b8:	f008 f8ec 	bl	8018494 <Crc32>
 80102bc:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d007      	beq.n	80102da <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	68ba      	ldr	r2, [r7, #8]
 80102ce:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80102d2:	89fb      	ldrh	r3, [r7, #14]
 80102d4:	f043 0304 	orr.w	r3, r3, #4
 80102d8:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80102e0:	21d4      	movs	r1, #212	@ 0xd4
 80102e2:	4618      	mov	r0, r3
 80102e4:	f008 f8d6 	bl	8018494 <Crc32>
 80102e8:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d007      	beq.n	8010306 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80102fe:	89fb      	ldrh	r3, [r7, #14]
 8010300:	f043 0308 	orr.w	r3, r3, #8
 8010304:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 801030c:	2100      	movs	r1, #0
 801030e:	4618      	mov	r0, r3
 8010310:	f008 f8c0 	bl	8018494 <Crc32>
 8010314:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801031c:	68ba      	ldr	r2, [r7, #8]
 801031e:	429a      	cmp	r2, r3
 8010320:	d007      	beq.n	8010332 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	68ba      	ldr	r2, [r7, #8]
 8010326:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801032a:	89fb      	ldrh	r3, [r7, #14]
 801032c:	f043 0310 	orr.w	r3, r3, #16
 8010330:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8010338:	f44f 715e 	mov.w	r1, #888	@ 0x378
 801033c:	4618      	mov	r0, r3
 801033e:	f008 f8a9 	bl	8018494 <Crc32>
 8010342:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	429a      	cmp	r2, r3
 801034e:	d007      	beq.n	8010360 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	68ba      	ldr	r2, [r7, #8]
 8010354:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010358:	89fb      	ldrh	r3, [r7, #14]
 801035a:	f043 0320 	orr.w	r3, r3, #32
 801035e:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 8010366:	2114      	movs	r1, #20
 8010368:	4618      	mov	r0, r3
 801036a:	f008 f893 	bl	8018494 <Crc32>
 801036e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	429a      	cmp	r2, r3
 801037a:	d007      	beq.n	801038c <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	f8c3 25b8 	str.w	r2, [r3, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010384:	89fb      	ldrh	r3, [r7, #14]
 8010386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801038a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 801038c:	89fb      	ldrh	r3, [r7, #14]
 801038e:	4618      	mov	r0, r3
 8010390:	f002 f88e 	bl	80124b0 <CallNvmDataChangeCallback>
 8010394:	e000      	b.n	8010398 <LoRaMacHandleNvm+0x150>
        return;
 8010396:	bf00      	nop
}
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	200007d0 	.word	0x200007d0

080103a4 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b084      	sub	sp, #16
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d00d      	beq.n	80103d0 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80103b4:	6838      	ldr	r0, [r7, #0]
 80103b6:	f00c fa97 	bl	801c8e8 <UTIL_TIMER_GetElapsedTime>
 80103ba:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d905      	bls.n	80103d0 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80103c4:	4b05      	ldr	r3, [pc, #20]	@ (80103dc <LoRaMacHandleResponseTimeout+0x38>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 80103cc:	2301      	movs	r3, #1
 80103ce:	e000      	b.n	80103d2 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 80103d0:	2300      	movs	r3, #0
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
 80103da:	bf00      	nop
 80103dc:	20000d04 	.word	0x20000d04

080103e0 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80103e6:	2300      	movs	r3, #0
 80103e8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80103ea:	f7ff fd0b 	bl	800fe04 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80103ee:	f003 fefa 	bl	80141e6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80103f2:	4b25      	ldr	r3, [pc, #148]	@ (8010488 <LoRaMacProcess+0xa8>)
 80103f4:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80103f8:	f003 0310 	and.w	r3, r3, #16
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d023      	beq.n	801044a <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8010402:	2000      	movs	r0, #0
 8010404:	f7ff fd7e 	bl	800ff04 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010408:	f7ff fefe 	bl	8010208 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 801040c:	f002 f86e 	bl	80124ec <IsRequestPending>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d006      	beq.n	8010424 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010416:	f7ff feb1 	bl	801017c <LoRaMacCheckForBeaconAcquisition>
 801041a:	4603      	mov	r3, r0
 801041c:	461a      	mov	r2, r3
 801041e:	79fb      	ldrb	r3, [r7, #7]
 8010420:	4313      	orrs	r3, r2
 8010422:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010424:	79fb      	ldrb	r3, [r7, #7]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d103      	bne.n	8010432 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801042a:	f7ff fe71 	bl	8010110 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801042e:	f7ff fe13 	bl	8010058 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010432:	f7ff fd77 	bl	800ff24 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010436:	2001      	movs	r0, #1
 8010438:	f7ff fd64 	bl	800ff04 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801043c:	4a12      	ldr	r2, [pc, #72]	@ (8010488 <LoRaMacProcess+0xa8>)
 801043e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010442:	f043 0320 	orr.w	r3, r3, #32
 8010446:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 801044a:	f7ff fdcd 	bl	800ffe8 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801044e:	4b0e      	ldr	r3, [pc, #56]	@ (8010488 <LoRaMacProcess+0xa8>)
 8010450:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010454:	2b02      	cmp	r3, #2
 8010456:	d101      	bne.n	801045c <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8010458:	f001 fc32 	bl	8011cc0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 801045c:	4b0a      	ldr	r3, [pc, #40]	@ (8010488 <LoRaMacProcess+0xa8>)
 801045e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010462:	f003 0320 	and.w	r3, r3, #32
 8010466:	b2db      	uxtb	r3, r3
 8010468:	2b00      	cmp	r3, #0
 801046a:	d009      	beq.n	8010480 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 801046c:	4a06      	ldr	r2, [pc, #24]	@ (8010488 <LoRaMacProcess+0xa8>)
 801046e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010472:	f023 0320 	bic.w	r3, r3, #32
 8010476:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 801047a:	4804      	ldr	r0, [pc, #16]	@ (801048c <LoRaMacProcess+0xac>)
 801047c:	f7ff fee4 	bl	8010248 <LoRaMacHandleNvm>
    }
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	200007d0 	.word	0x200007d0
 801048c:	20000d04 	.word	0x20000d04

08010490 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b082      	sub	sp, #8
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010498:	481e      	ldr	r0, [pc, #120]	@ (8010514 <OnTxDelayedTimerEvent+0x84>)
 801049a:	f00c f8f9 	bl	801c690 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801049e:	4b1e      	ldr	r3, [pc, #120]	@ (8010518 <OnTxDelayedTimerEvent+0x88>)
 80104a0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80104a4:	f023 0320 	bic.w	r3, r3, #32
 80104a8:	4a1b      	ldr	r2, [pc, #108]	@ (8010518 <OnTxDelayedTimerEvent+0x88>)
 80104aa:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80104ae:	4b1b      	ldr	r3, [pc, #108]	@ (801051c <OnTxDelayedTimerEvent+0x8c>)
 80104b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104b4:	4a18      	ldr	r2, [pc, #96]	@ (8010518 <OnTxDelayedTimerEvent+0x88>)
 80104b6:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 80104ba:	4611      	mov	r1, r2
 80104bc:	4618      	mov	r0, r3
 80104be:	f7ff ff71 	bl	80103a4 <LoRaMacHandleResponseTimeout>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d11e      	bne.n	8010506 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80104c8:	2001      	movs	r0, #1
 80104ca:	f001 f943 	bl	8011754 <ScheduleTx>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d01a      	beq.n	801050a <OnTxDelayedTimerEvent+0x7a>
 80104d4:	2b0b      	cmp	r3, #11
 80104d6:	d018      	beq.n	801050a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80104d8:	4b10      	ldr	r3, [pc, #64]	@ (801051c <OnTxDelayedTimerEvent+0x8c>)
 80104da:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80104de:	b2da      	uxtb	r2, r3
 80104e0:	4b0d      	ldr	r3, [pc, #52]	@ (8010518 <OnTxDelayedTimerEvent+0x88>)
 80104e2:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80104e6:	4b0c      	ldr	r3, [pc, #48]	@ (8010518 <OnTxDelayedTimerEvent+0x88>)
 80104e8:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80104ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010518 <OnTxDelayedTimerEvent+0x88>)
 80104ee:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80104f2:	4b09      	ldr	r3, [pc, #36]	@ (8010518 <OnTxDelayedTimerEvent+0x88>)
 80104f4:	2209      	movs	r2, #9
 80104f6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80104fa:	2009      	movs	r0, #9
 80104fc:	f004 faae 	bl	8014a5c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010500:	f001 ff84 	bl	801240c <StopRetransmission>
            break;
 8010504:	e002      	b.n	801050c <OnTxDelayedTimerEvent+0x7c>
        return;
 8010506:	bf00      	nop
 8010508:	e000      	b.n	801050c <OnTxDelayedTimerEvent+0x7c>
            break;
 801050a:	bf00      	nop
        }
    }
}
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	20000b38 	.word	0x20000b38
 8010518:	200007d0 	.word	0x200007d0
 801051c:	20000d04 	.word	0x20000d04

08010520 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b082      	sub	sp, #8
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010528:	4b17      	ldr	r3, [pc, #92]	@ (8010588 <OnRxWindow1TimerEvent+0x68>)
 801052a:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 801052e:	4b16      	ldr	r3, [pc, #88]	@ (8010588 <OnRxWindow1TimerEvent+0x68>)
 8010530:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010534:	4b15      	ldr	r3, [pc, #84]	@ (801058c <OnRxWindow1TimerEvent+0x6c>)
 8010536:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801053a:	b25a      	sxtb	r2, r3
 801053c:	4b12      	ldr	r3, [pc, #72]	@ (8010588 <OnRxWindow1TimerEvent+0x68>)
 801053e:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010542:	4b12      	ldr	r3, [pc, #72]	@ (801058c <OnRxWindow1TimerEvent+0x6c>)
 8010544:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010548:	4b0f      	ldr	r3, [pc, #60]	@ (8010588 <OnRxWindow1TimerEvent+0x68>)
 801054a:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801054e:	4b0f      	ldr	r3, [pc, #60]	@ (801058c <OnRxWindow1TimerEvent+0x6c>)
 8010550:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010554:	4b0c      	ldr	r3, [pc, #48]	@ (8010588 <OnRxWindow1TimerEvent+0x68>)
 8010556:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801055a:	4b0b      	ldr	r3, [pc, #44]	@ (8010588 <OnRxWindow1TimerEvent+0x68>)
 801055c:	2200      	movs	r2, #0
 801055e:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010562:	4b09      	ldr	r3, [pc, #36]	@ (8010588 <OnRxWindow1TimerEvent+0x68>)
 8010564:	2200      	movs	r2, #0
 8010566:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801056a:	4b08      	ldr	r3, [pc, #32]	@ (801058c <OnRxWindow1TimerEvent+0x6c>)
 801056c:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010570:	4b05      	ldr	r3, [pc, #20]	@ (8010588 <OnRxWindow1TimerEvent+0x68>)
 8010572:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010576:	4906      	ldr	r1, [pc, #24]	@ (8010590 <OnRxWindow1TimerEvent+0x70>)
 8010578:	4806      	ldr	r0, [pc, #24]	@ (8010594 <OnRxWindow1TimerEvent+0x74>)
 801057a:	f001 fb6d 	bl	8011c58 <RxWindowSetup>
}
 801057e:	bf00      	nop
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	200007d0 	.word	0x200007d0
 801058c:	20000d04 	.word	0x20000d04
 8010590:	20000b88 	.word	0x20000b88
 8010594:	20000b50 	.word	0x20000b50

08010598 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80105a0:	4b19      	ldr	r3, [pc, #100]	@ (8010608 <OnRxWindow2TimerEvent+0x70>)
 80105a2:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d029      	beq.n	80105fe <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80105aa:	4b17      	ldr	r3, [pc, #92]	@ (8010608 <OnRxWindow2TimerEvent+0x70>)
 80105ac:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 80105b0:	4b15      	ldr	r3, [pc, #84]	@ (8010608 <OnRxWindow2TimerEvent+0x70>)
 80105b2:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80105b6:	4b15      	ldr	r3, [pc, #84]	@ (801060c <OnRxWindow2TimerEvent+0x74>)
 80105b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105ba:	4a13      	ldr	r2, [pc, #76]	@ (8010608 <OnRxWindow2TimerEvent+0x70>)
 80105bc:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80105c0:	4b12      	ldr	r3, [pc, #72]	@ (801060c <OnRxWindow2TimerEvent+0x74>)
 80105c2:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80105c6:	4b10      	ldr	r3, [pc, #64]	@ (8010608 <OnRxWindow2TimerEvent+0x70>)
 80105c8:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80105cc:	4b0f      	ldr	r3, [pc, #60]	@ (801060c <OnRxWindow2TimerEvent+0x74>)
 80105ce:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80105d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010608 <OnRxWindow2TimerEvent+0x70>)
 80105d4:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80105d8:	4b0b      	ldr	r3, [pc, #44]	@ (8010608 <OnRxWindow2TimerEvent+0x70>)
 80105da:	2200      	movs	r2, #0
 80105dc:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80105e0:	4b09      	ldr	r3, [pc, #36]	@ (8010608 <OnRxWindow2TimerEvent+0x70>)
 80105e2:	2201      	movs	r2, #1
 80105e4:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80105e8:	4b08      	ldr	r3, [pc, #32]	@ (801060c <OnRxWindow2TimerEvent+0x74>)
 80105ea:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80105ee:	4b06      	ldr	r3, [pc, #24]	@ (8010608 <OnRxWindow2TimerEvent+0x70>)
 80105f0:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80105f4:	4906      	ldr	r1, [pc, #24]	@ (8010610 <OnRxWindow2TimerEvent+0x78>)
 80105f6:	4807      	ldr	r0, [pc, #28]	@ (8010614 <OnRxWindow2TimerEvent+0x7c>)
 80105f8:	f001 fb2e 	bl	8011c58 <RxWindowSetup>
 80105fc:	e000      	b.n	8010600 <OnRxWindow2TimerEvent+0x68>
        return;
 80105fe:	bf00      	nop
}
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	200007d0 	.word	0x200007d0
 801060c:	20000d04 	.word	0x20000d04
 8010610:	20000ba0 	.word	0x20000ba0
 8010614:	20000b68 	.word	0x20000b68

08010618 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010620:	4808      	ldr	r0, [pc, #32]	@ (8010644 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8010622:	f00c f835 	bl	801c690 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010626:	4b08      	ldr	r3, [pc, #32]	@ (8010648 <OnRetransmitTimeoutTimerEvent+0x30>)
 8010628:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 801062c:	2b00      	cmp	r3, #0
 801062e:	d003      	beq.n	8010638 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8010630:	4b05      	ldr	r3, [pc, #20]	@ (8010648 <OnRetransmitTimeoutTimerEvent+0x30>)
 8010632:	2201      	movs	r2, #1
 8010634:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 8010638:	f001 ff24 	bl	8012484 <OnMacProcessNotify>
}
 801063c:	bf00      	nop
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	20000bd0 	.word	0x20000bd0
 8010648:	200007d0 	.word	0x200007d0

0801064c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	60ba      	str	r2, [r7, #8]
 8010654:	607b      	str	r3, [r7, #4]
 8010656:	4603      	mov	r3, r0
 8010658:	73fb      	strb	r3, [r7, #15]
 801065a:	460b      	mov	r3, r1
 801065c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d005      	beq.n	8010670 <GetFCntDown+0x24>
 8010664:	69bb      	ldr	r3, [r7, #24]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d002      	beq.n	8010670 <GetFCntDown+0x24>
 801066a:	69fb      	ldr	r3, [r7, #28]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d101      	bne.n	8010674 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010670:	2309      	movs	r3, #9
 8010672:	e028      	b.n	80106c6 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010674:	7bfb      	ldrb	r3, [r7, #15]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d016      	beq.n	80106a8 <GetFCntDown+0x5c>
 801067a:	2b01      	cmp	r3, #1
 801067c:	d118      	bne.n	80106b0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801067e:	79bb      	ldrb	r3, [r7, #6]
 8010680:	2b01      	cmp	r3, #1
 8010682:	d10d      	bne.n	80106a0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010684:	7bbb      	ldrb	r3, [r7, #14]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d002      	beq.n	8010690 <GetFCntDown+0x44>
 801068a:	7bbb      	ldrb	r3, [r7, #14]
 801068c:	2b03      	cmp	r3, #3
 801068e:	d103      	bne.n	8010698 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	2202      	movs	r2, #2
 8010694:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010696:	e00d      	b.n	80106b4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	2201      	movs	r2, #1
 801069c:	701a      	strb	r2, [r3, #0]
            break;
 801069e:	e009      	b.n	80106b4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 80106a0:	69bb      	ldr	r3, [r7, #24]
 80106a2:	2203      	movs	r2, #3
 80106a4:	701a      	strb	r2, [r3, #0]
            break;
 80106a6:	e005      	b.n	80106b4 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	2204      	movs	r2, #4
 80106ac:	701a      	strb	r2, [r3, #0]
            break;
 80106ae:	e001      	b.n	80106b4 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80106b0:	2305      	movs	r3, #5
 80106b2:	e008      	b.n	80106c6 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80106b4:	69bb      	ldr	r3, [r7, #24]
 80106b6:	7818      	ldrb	r0, [r3, #0]
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	89db      	ldrh	r3, [r3, #14]
 80106bc:	69fa      	ldr	r2, [r7, #28]
 80106be:	4619      	mov	r1, r3
 80106c0:	f004 fe06 	bl	80152d0 <LoRaMacCryptoGetFCntDown>
 80106c4:	4603      	mov	r3, r0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3710      	adds	r7, #16
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
	...

080106d0 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80106d0:	b5b0      	push	{r4, r5, r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	4603      	mov	r3, r0
 80106d8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80106da:	2303      	movs	r3, #3
 80106dc:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80106de:	4b6e      	ldr	r3, [pc, #440]	@ (8010898 <SwitchClass+0x1c8>)
 80106e0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80106e4:	2b02      	cmp	r3, #2
 80106e6:	f000 80bb 	beq.w	8010860 <SwitchClass+0x190>
 80106ea:	2b02      	cmp	r3, #2
 80106ec:	f300 80ce 	bgt.w	801088c <SwitchClass+0x1bc>
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d003      	beq.n	80106fc <SwitchClass+0x2c>
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	f000 80a5 	beq.w	8010844 <SwitchClass+0x174>
 80106fa:	e0c7      	b.n	801088c <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80106fc:	79fb      	ldrb	r3, [r7, #7]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d109      	bne.n	8010716 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010702:	4b65      	ldr	r3, [pc, #404]	@ (8010898 <SwitchClass+0x1c8>)
 8010704:	4a64      	ldr	r2, [pc, #400]	@ (8010898 <SwitchClass+0x1c8>)
 8010706:	3374      	adds	r3, #116	@ 0x74
 8010708:	326c      	adds	r2, #108	@ 0x6c
 801070a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801070e:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8010712:	2300      	movs	r3, #0
 8010714:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8010716:	79fb      	ldrb	r3, [r7, #7]
 8010718:	2b01      	cmp	r3, #1
 801071a:	d10c      	bne.n	8010736 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 801071c:	79fb      	ldrb	r3, [r7, #7]
 801071e:	4618      	mov	r0, r3
 8010720:	f003 fcf8 	bl	8014114 <LoRaMacClassBSwitchClass>
 8010724:	4603      	mov	r3, r0
 8010726:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010728:	7bfb      	ldrb	r3, [r7, #15]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d103      	bne.n	8010736 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 801072e:	4a5a      	ldr	r2, [pc, #360]	@ (8010898 <SwitchClass+0x1c8>)
 8010730:	79fb      	ldrb	r3, [r7, #7]
 8010732:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8010736:	79fb      	ldrb	r3, [r7, #7]
 8010738:	2b02      	cmp	r3, #2
 801073a:	f040 80a2 	bne.w	8010882 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801073e:	4a56      	ldr	r2, [pc, #344]	@ (8010898 <SwitchClass+0x1c8>)
 8010740:	79fb      	ldrb	r3, [r7, #7]
 8010742:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010746:	4a55      	ldr	r2, [pc, #340]	@ (801089c <SwitchClass+0x1cc>)
 8010748:	4b54      	ldr	r3, [pc, #336]	@ (801089c <SwitchClass+0x1cc>)
 801074a:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 801074e:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010756:	e895 0003 	ldmia.w	r5, {r0, r1}
 801075a:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801075e:	4b4f      	ldr	r3, [pc, #316]	@ (801089c <SwitchClass+0x1cc>)
 8010760:	2202      	movs	r2, #2
 8010762:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010766:	2300      	movs	r3, #0
 8010768:	73bb      	strb	r3, [r7, #14]
 801076a:	e05b      	b.n	8010824 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801076c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010770:	4949      	ldr	r1, [pc, #292]	@ (8010898 <SwitchClass+0x1c8>)
 8010772:	4613      	mov	r3, r2
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	4413      	add	r3, r2
 8010778:	011b      	lsls	r3, r3, #4
 801077a:	440b      	add	r3, r1
 801077c:	33e9      	adds	r3, #233	@ 0xe9
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d049      	beq.n	8010818 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8010784:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010788:	4943      	ldr	r1, [pc, #268]	@ (8010898 <SwitchClass+0x1c8>)
 801078a:	4613      	mov	r3, r2
 801078c:	005b      	lsls	r3, r3, #1
 801078e:	4413      	add	r3, r2
 8010790:	011b      	lsls	r3, r3, #4
 8010792:	440b      	add	r3, r1
 8010794:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010798:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801079a:	2b02      	cmp	r3, #2
 801079c:	d13c      	bne.n	8010818 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 801079e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80107a2:	493d      	ldr	r1, [pc, #244]	@ (8010898 <SwitchClass+0x1c8>)
 80107a4:	4613      	mov	r3, r2
 80107a6:	005b      	lsls	r3, r3, #1
 80107a8:	4413      	add	r3, r2
 80107aa:	011b      	lsls	r3, r3, #4
 80107ac:	440b      	add	r3, r1
 80107ae:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	4a38      	ldr	r2, [pc, #224]	@ (8010898 <SwitchClass+0x1c8>)
 80107b6:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80107b8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80107bc:	4936      	ldr	r1, [pc, #216]	@ (8010898 <SwitchClass+0x1c8>)
 80107be:	4613      	mov	r3, r2
 80107c0:	005b      	lsls	r3, r3, #1
 80107c2:	4413      	add	r3, r2
 80107c4:	011b      	lsls	r3, r3, #4
 80107c6:	440b      	add	r3, r1
 80107c8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80107cc:	f993 3000 	ldrsb.w	r3, [r3]
 80107d0:	b2da      	uxtb	r2, r3
 80107d2:	4b31      	ldr	r3, [pc, #196]	@ (8010898 <SwitchClass+0x1c8>)
 80107d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80107d8:	4b30      	ldr	r3, [pc, #192]	@ (801089c <SwitchClass+0x1cc>)
 80107da:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 80107de:	4b2f      	ldr	r3, [pc, #188]	@ (801089c <SwitchClass+0x1cc>)
 80107e0:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80107e4:	4b2c      	ldr	r3, [pc, #176]	@ (8010898 <SwitchClass+0x1c8>)
 80107e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107e8:	4a2c      	ldr	r2, [pc, #176]	@ (801089c <SwitchClass+0x1cc>)
 80107ea:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80107ee:	4b2a      	ldr	r3, [pc, #168]	@ (8010898 <SwitchClass+0x1c8>)
 80107f0:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80107f4:	4b29      	ldr	r3, [pc, #164]	@ (801089c <SwitchClass+0x1cc>)
 80107f6:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80107fa:	4b27      	ldr	r3, [pc, #156]	@ (8010898 <SwitchClass+0x1c8>)
 80107fc:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010800:	4b26      	ldr	r3, [pc, #152]	@ (801089c <SwitchClass+0x1cc>)
 8010802:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010806:	4b25      	ldr	r3, [pc, #148]	@ (801089c <SwitchClass+0x1cc>)
 8010808:	2203      	movs	r2, #3
 801080a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 801080e:	4b23      	ldr	r3, [pc, #140]	@ (801089c <SwitchClass+0x1cc>)
 8010810:	2201      	movs	r2, #1
 8010812:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 8010816:	e009      	b.n	801082c <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801081c:	b2db      	uxtb	r3, r3
 801081e:	3301      	adds	r3, #1
 8010820:	b2db      	uxtb	r3, r3
 8010822:	73bb      	strb	r3, [r7, #14]
 8010824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010828:	2b00      	cmp	r3, #0
 801082a:	dd9f      	ble.n	801076c <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 801082c:	4b1b      	ldr	r3, [pc, #108]	@ (801089c <SwitchClass+0x1cc>)
 801082e:	2200      	movs	r2, #0
 8010830:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010834:	4b1a      	ldr	r3, [pc, #104]	@ (80108a0 <SwitchClass+0x1d0>)
 8010836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010838:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801083a:	f001 fa41 	bl	8011cc0 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 801083e:	2300      	movs	r3, #0
 8010840:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010842:	e01e      	b.n	8010882 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010844:	79fb      	ldrb	r3, [r7, #7]
 8010846:	4618      	mov	r0, r3
 8010848:	f003 fc64 	bl	8014114 <LoRaMacClassBSwitchClass>
 801084c:	4603      	mov	r3, r0
 801084e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010850:	7bfb      	ldrb	r3, [r7, #15]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d117      	bne.n	8010886 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010856:	4a10      	ldr	r2, [pc, #64]	@ (8010898 <SwitchClass+0x1c8>)
 8010858:	79fb      	ldrb	r3, [r7, #7]
 801085a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 801085e:	e012      	b.n	8010886 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010860:	79fb      	ldrb	r3, [r7, #7]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d111      	bne.n	801088a <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8010866:	4b0d      	ldr	r3, [pc, #52]	@ (801089c <SwitchClass+0x1cc>)
 8010868:	2206      	movs	r2, #6
 801086a:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 801086e:	4a0a      	ldr	r2, [pc, #40]	@ (8010898 <SwitchClass+0x1c8>)
 8010870:	79fb      	ldrb	r3, [r7, #7]
 8010872:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010876:	4b0a      	ldr	r3, [pc, #40]	@ (80108a0 <SwitchClass+0x1d0>)
 8010878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801087a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 801087c:	2300      	movs	r3, #0
 801087e:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8010880:	e003      	b.n	801088a <SwitchClass+0x1ba>
            break;
 8010882:	bf00      	nop
 8010884:	e002      	b.n	801088c <SwitchClass+0x1bc>
            break;
 8010886:	bf00      	nop
 8010888:	e000      	b.n	801088c <SwitchClass+0x1bc>
            break;
 801088a:	bf00      	nop
        }
    }

    return status;
 801088c:	7bfb      	ldrb	r3, [r7, #15]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3710      	adds	r7, #16
 8010892:	46bd      	mov	sp, r7
 8010894:	bdb0      	pop	{r4, r5, r7, pc}
 8010896:	bf00      	nop
 8010898:	20000d04 	.word	0x20000d04
 801089c:	200007d0 	.word	0x200007d0
 80108a0:	0801df14 	.word	0x0801df14

080108a4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4603      	mov	r3, r0
 80108ac:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80108ae:	4b10      	ldr	r3, [pc, #64]	@ (80108f0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80108b0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80108b4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80108b6:	79fb      	ldrb	r3, [r7, #7]
 80108b8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80108ba:	230d      	movs	r3, #13
 80108bc:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80108be:	4b0c      	ldr	r3, [pc, #48]	@ (80108f0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80108c0:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d001      	beq.n	80108cc <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80108c8:	230e      	movs	r3, #14
 80108ca:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80108cc:	4b08      	ldr	r3, [pc, #32]	@ (80108f0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80108ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80108d2:	f107 0210 	add.w	r2, r7, #16
 80108d6:	4611      	mov	r1, r2
 80108d8:	4618      	mov	r0, r3
 80108da:	f005 fb5b 	bl	8015f94 <RegionGetPhyParam>
 80108de:	4603      	mov	r3, r0
 80108e0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	b2db      	uxtb	r3, r3
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3718      	adds	r7, #24
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	20000d04 	.word	0x20000d04

080108f4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	4603      	mov	r3, r0
 80108fc:	71fb      	strb	r3, [r7, #7]
 80108fe:	460b      	mov	r3, r1
 8010900:	71bb      	strb	r3, [r7, #6]
 8010902:	4613      	mov	r3, r2
 8010904:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010906:	2300      	movs	r3, #0
 8010908:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801090a:	2300      	movs	r3, #0
 801090c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801090e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010912:	4618      	mov	r0, r3
 8010914:	f7ff ffc6 	bl	80108a4 <GetMaxAppPayloadWithoutFOptsLength>
 8010918:	4603      	mov	r3, r0
 801091a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 801091c:	79fb      	ldrb	r3, [r7, #7]
 801091e:	b29a      	uxth	r2, r3
 8010920:	797b      	ldrb	r3, [r7, #5]
 8010922:	b29b      	uxth	r3, r3
 8010924:	4413      	add	r3, r2
 8010926:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010928:	89ba      	ldrh	r2, [r7, #12]
 801092a:	89fb      	ldrh	r3, [r7, #14]
 801092c:	429a      	cmp	r2, r3
 801092e:	d804      	bhi.n	801093a <ValidatePayloadLength+0x46>
 8010930:	89bb      	ldrh	r3, [r7, #12]
 8010932:	2bff      	cmp	r3, #255	@ 0xff
 8010934:	d801      	bhi.n	801093a <ValidatePayloadLength+0x46>
    {
        return true;
 8010936:	2301      	movs	r3, #1
 8010938:	e000      	b.n	801093c <ValidatePayloadLength+0x48>
    }
    return false;
 801093a:	2300      	movs	r3, #0
}
 801093c:	4618      	mov	r0, r3
 801093e:	3710      	adds	r7, #16
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010944:	b590      	push	{r4, r7, lr}
 8010946:	b0a5      	sub	sp, #148	@ 0x94
 8010948:	af02      	add	r7, sp, #8
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	4608      	mov	r0, r1
 801094e:	4611      	mov	r1, r2
 8010950:	461a      	mov	r2, r3
 8010952:	4603      	mov	r3, r0
 8010954:	70fb      	strb	r3, [r7, #3]
 8010956:	460b      	mov	r3, r1
 8010958:	70bb      	strb	r3, [r7, #2]
 801095a:	4613      	mov	r3, r2
 801095c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801095e:	2300      	movs	r3, #0
 8010960:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8010964:	2300      	movs	r3, #0
 8010966:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801096a:	2300      	movs	r3, #0
 801096c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8010970:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8010974:	2b00      	cmp	r3, #0
 8010976:	f000 84c3 	beq.w	8011300 <ProcessMacCommands+0x9bc>
 801097a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 801097e:	2b01      	cmp	r3, #1
 8010980:	f040 84c4 	bne.w	801130c <ProcessMacCommands+0x9c8>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010984:	f000 bcbc 	b.w	8011300 <ProcessMacCommands+0x9bc>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010988:	78fb      	ldrb	r3, [r7, #3]
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	4413      	add	r3, r2
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	4618      	mov	r0, r3
 8010992:	f003 febf 	bl	8014714 <LoRaMacCommandsGetCmdSize>
 8010996:	4603      	mov	r3, r0
 8010998:	461a      	mov	r2, r3
 801099a:	78fb      	ldrb	r3, [r7, #3]
 801099c:	441a      	add	r2, r3
 801099e:	78bb      	ldrb	r3, [r7, #2]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	f300 84b5 	bgt.w	8011310 <ProcessMacCommands+0x9cc>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80109a6:	78fb      	ldrb	r3, [r7, #3]
 80109a8:	1c5a      	adds	r2, r3, #1
 80109aa:	70fa      	strb	r2, [r7, #3]
 80109ac:	461a      	mov	r2, r3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4413      	add	r3, r2
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	3b02      	subs	r3, #2
 80109b6:	2b11      	cmp	r3, #17
 80109b8:	f200 84ac 	bhi.w	8011314 <ProcessMacCommands+0x9d0>
 80109bc:	a201      	add	r2, pc, #4	@ (adr r2, 80109c4 <ProcessMacCommands+0x80>)
 80109be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c2:	bf00      	nop
 80109c4:	08010a0d 	.word	0x08010a0d
 80109c8:	08010a4f 	.word	0x08010a4f
 80109cc:	08010bcb 	.word	0x08010bcb
 80109d0:	08010c09 	.word	0x08010c09
 80109d4:	08010d15 	.word	0x08010d15
 80109d8:	08010d65 	.word	0x08010d65
 80109dc:	08010e21 	.word	0x08010e21
 80109e0:	08010e77 	.word	0x08010e77
 80109e4:	08010f5d 	.word	0x08010f5d
 80109e8:	08011315 	.word	0x08011315
 80109ec:	08011315 	.word	0x08011315
 80109f0:	08011005 	.word	0x08011005
 80109f4:	08011315 	.word	0x08011315
 80109f8:	08011315 	.word	0x08011315
 80109fc:	08011125 	.word	0x08011125
 8010a00:	08011159 	.word	0x08011159
 8010a04:	080111e9 	.word	0x080111e9
 8010a08:	08011261 	.word	0x08011261
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010a0c:	2005      	movs	r0, #5
 8010a0e:	f004 f859 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f000 8466 	beq.w	80112e6 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010a1a:	2105      	movs	r1, #5
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	f003 ffc5 	bl	80149ac <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010a22:	78fb      	ldrb	r3, [r7, #3]
 8010a24:	1c5a      	adds	r2, r3, #1
 8010a26:	70fa      	strb	r2, [r7, #3]
 8010a28:	461a      	mov	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	781a      	ldrb	r2, [r3, #0]
 8010a30:	4bb5      	ldr	r3, [pc, #724]	@ (8010d08 <ProcessMacCommands+0x3c4>)
 8010a32:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010a36:	78fb      	ldrb	r3, [r7, #3]
 8010a38:	1c5a      	adds	r2, r3, #1
 8010a3a:	70fa      	strb	r2, [r7, #3]
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4413      	add	r3, r2
 8010a42:	781a      	ldrb	r2, [r3, #0]
 8010a44:	4bb0      	ldr	r3, [pc, #704]	@ (8010d08 <ProcessMacCommands+0x3c4>)
 8010a46:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 8010a4a:	f000 bc4c 	b.w	80112e6 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010a54:	2300      	movs	r3, #0
 8010a56:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010a60:	2300      	movs	r3, #0
 8010a62:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8010a66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8010a6a:	f083 0301 	eor.w	r3, r3, #1
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f000 80a6 	beq.w	8010bc2 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 8010a76:	2301      	movs	r3, #1
 8010a78:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8010a7c:	78fb      	ldrb	r3, [r7, #3]
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	4413      	add	r3, r2
 8010a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010a86:	4ba1      	ldr	r3, [pc, #644]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010a88:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010a8c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010a90:	4b9e      	ldr	r3, [pc, #632]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010a92:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010a96:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a9a:	4b9c      	ldr	r3, [pc, #624]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010a9c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010aa0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010aa4:	4b99      	ldr	r3, [pc, #612]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010aa6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010aaa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010aae:	4b97      	ldr	r3, [pc, #604]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010ab0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ab4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8010ab8:	4b94      	ldr	r3, [pc, #592]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010aba:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8010abe:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010ac0:	4b92      	ldr	r3, [pc, #584]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010ac2:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d008      	beq.n	8010adc <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010aca:	78ba      	ldrb	r2, [r7, #2]
 8010acc:	78fb      	ldrb	r3, [r7, #3]
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8010ada:	e002      	b.n	8010ae2 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8010adc:	2305      	movs	r3, #5
 8010ade:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8010ae2:	4b8a      	ldr	r3, [pc, #552]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010ae4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8010ae8:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 8010aec:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 8010af0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8010af4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8010af8:	9301      	str	r3, [sp, #4]
 8010afa:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8010afe:	9300      	str	r3, [sp, #0]
 8010b00:	4623      	mov	r3, r4
 8010b02:	f005 fb04 	bl	801610e <RegionLinkAdrReq>
 8010b06:	4603      	mov	r3, r0
 8010b08:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8010b0c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010b10:	f003 0307 	and.w	r3, r3, #7
 8010b14:	2b07      	cmp	r3, #7
 8010b16:	d119      	bne.n	8010b4c <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8010b18:	4b7c      	ldr	r3, [pc, #496]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010b1a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8010b1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8010b22:	429a      	cmp	r2, r3
 8010b24:	da03      	bge.n	8010b2e <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8010b26:	4b79      	ldr	r3, [pc, #484]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010b28:	2201      	movs	r2, #1
 8010b2a:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010b2e:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8010b32:	4b76      	ldr	r3, [pc, #472]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010b34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010b38:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8010b3c:	4b73      	ldr	r3, [pc, #460]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010b3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010b42:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8010b46:	4b71      	ldr	r3, [pc, #452]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010b48:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010b52:	e00b      	b.n	8010b6c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010b54:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8010b58:	2201      	movs	r2, #1
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	2003      	movs	r0, #3
 8010b5e:	f003 fc79 	bl	8014454 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010b62:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8010b66:	3301      	adds	r3, #1
 8010b68:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010b6c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8010b70:	4a67      	ldr	r2, [pc, #412]	@ (8010d10 <ProcessMacCommands+0x3cc>)
 8010b72:	fba2 2303 	umull	r2, r3, r2, r3
 8010b76:	089b      	lsrs	r3, r3, #2
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d3e8      	bcc.n	8010b54 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8010b82:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8010b86:	78fb      	ldrb	r3, [r7, #3]
 8010b88:	4413      	add	r3, r2
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	3b01      	subs	r3, #1
 8010b8e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8010b90:	78fa      	ldrb	r2, [r7, #3]
 8010b92:	78bb      	ldrb	r3, [r7, #2]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d20a      	bcs.n	8010bae <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8010b98:	78fb      	ldrb	r3, [r7, #3]
 8010b9a:	1c5a      	adds	r2, r3, #1
 8010b9c:	70fa      	strb	r2, [r7, #3]
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	4413      	add	r3, r2
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	2b03      	cmp	r3, #3
 8010ba8:	f43f af68 	beq.w	8010a7c <ProcessMacCommands+0x138>
 8010bac:	e000      	b.n	8010bb0 <ProcessMacCommands+0x26c>
                            break;
 8010bae:	bf00      	nop

                    if( macIndex < commandsSize )
 8010bb0:	78fa      	ldrb	r2, [r7, #3]
 8010bb2:	78bb      	ldrb	r3, [r7, #2]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	f080 8398 	bcs.w	80112ea <ProcessMacCommands+0x9a6>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8010bba:	78fb      	ldrb	r3, [r7, #3]
 8010bbc:	3b01      	subs	r3, #1
 8010bbe:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8010bc0:	e393      	b.n	80112ea <ProcessMacCommands+0x9a6>
                    macIndex += 4;
 8010bc2:	78fb      	ldrb	r3, [r7, #3]
 8010bc4:	3304      	adds	r3, #4
 8010bc6:	70fb      	strb	r3, [r7, #3]
                break;
 8010bc8:	e38f      	b.n	80112ea <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8010bca:	78fb      	ldrb	r3, [r7, #3]
 8010bcc:	1c5a      	adds	r2, r3, #1
 8010bce:	70fa      	strb	r2, [r7, #3]
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	f003 030f 	and.w	r3, r3, #15
 8010bdc:	b2da      	uxtb	r2, r3
 8010bde:	4b4b      	ldr	r3, [pc, #300]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010be0:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010be4:	4b49      	ldr	r3, [pc, #292]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010be6:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8010bea:	461a      	mov	r2, r3
 8010bec:	2301      	movs	r3, #1
 8010bee:	4093      	lsls	r3, r2
 8010bf0:	b29a      	uxth	r2, r3
 8010bf2:	4b46      	ldr	r3, [pc, #280]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010bf4:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010bf8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	4619      	mov	r1, r3
 8010c00:	2004      	movs	r0, #4
 8010c02:	f003 fc27 	bl	8014454 <LoRaMacCommandsAddCmd>
                break;
 8010c06:	e37b      	b.n	8011300 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010c08:	2307      	movs	r3, #7
 8010c0a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010c0e:	78fb      	ldrb	r3, [r7, #3]
 8010c10:	687a      	ldr	r2, [r7, #4]
 8010c12:	4413      	add	r3, r2
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	091b      	lsrs	r3, r3, #4
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	b25b      	sxtb	r3, r3
 8010c1c:	f003 0307 	and.w	r3, r3, #7
 8010c20:	b25b      	sxtb	r3, r3
 8010c22:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010c26:	78fb      	ldrb	r3, [r7, #3]
 8010c28:	687a      	ldr	r2, [r7, #4]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	b25b      	sxtb	r3, r3
 8010c30:	f003 030f 	and.w	r3, r3, #15
 8010c34:	b25b      	sxtb	r3, r3
 8010c36:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 8010c3a:	78fb      	ldrb	r3, [r7, #3]
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	70fb      	strb	r3, [r7, #3]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( rxParamSetupReq.Datarate == 0x0F )
 8010c40:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010c44:	2b0f      	cmp	r3, #15
 8010c46:	d105      	bne.n	8010c54 <ProcessMacCommands+0x310>
                {
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 8010c48:	4b30      	ldr	r3, [pc, #192]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010c4a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8010c4e:	b25b      	sxtb	r3, r3
 8010c50:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010c54:	78fb      	ldrb	r3, [r7, #3]
 8010c56:	1c5a      	adds	r2, r3, #1
 8010c58:	70fa      	strb	r2, [r7, #3]
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	4413      	add	r3, r2
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010c64:	78fb      	ldrb	r3, [r7, #3]
 8010c66:	1c5a      	adds	r2, r3, #1
 8010c68:	70fa      	strb	r2, [r7, #3]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	4413      	add	r3, r2
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	021a      	lsls	r2, r3, #8
 8010c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c76:	4313      	orrs	r3, r2
 8010c78:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010c7a:	78fb      	ldrb	r3, [r7, #3]
 8010c7c:	1c5a      	adds	r2, r3, #1
 8010c7e:	70fa      	strb	r2, [r7, #3]
 8010c80:	461a      	mov	r2, r3
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	4413      	add	r3, r2
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	041a      	lsls	r2, r3, #16
 8010c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c8c:	4313      	orrs	r3, r2
 8010c8e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 8010c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c92:	2264      	movs	r2, #100	@ 0x64
 8010c94:	fb02 f303 	mul.w	r3, r2, r3
 8010c98:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010c9c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010ca0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010ca4:	4611      	mov	r1, r2
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f005 fa4b 	bl	8016142 <RegionRxParamSetupReq>
 8010cac:	4603      	mov	r3, r0
 8010cae:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8010cb2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010cb6:	f003 0307 	and.w	r3, r3, #7
 8010cba:	2b07      	cmp	r3, #7
 8010cbc:	d117      	bne.n	8010cee <ProcessMacCommands+0x3aa>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010cbe:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010cc2:	b2da      	uxtb	r2, r3
 8010cc4:	4b11      	ldr	r3, [pc, #68]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010cc6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010cca:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010cce:	b2da      	uxtb	r2, r3
 8010cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010cda:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cde:	4a0b      	ldr	r2, [pc, #44]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010ce0:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010ce2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8010ce6:	b2da      	uxtb	r2, r3
 8010ce8:	4b08      	ldr	r3, [pc, #32]	@ (8010d0c <ProcessMacCommands+0x3c8>)
 8010cea:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 8010cee:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010cf2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010cf6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	2005      	movs	r0, #5
 8010d00:	f003 fba8 	bl	8014454 <LoRaMacCommandsAddCmd>
                break;
 8010d04:	e2fc      	b.n	8011300 <ProcessMacCommands+0x9bc>
 8010d06:	bf00      	nop
 8010d08:	200007d0 	.word	0x200007d0
 8010d0c:	20000d04 	.word	0x20000d04
 8010d10:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010d14:	23ff      	movs	r3, #255	@ 0xff
 8010d16:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010d1a:	4bb7      	ldr	r3, [pc, #732]	@ (8010ff8 <ProcessMacCommands+0x6b4>)
 8010d1c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d00d      	beq.n	8010d40 <ProcessMacCommands+0x3fc>
 8010d24:	4bb4      	ldr	r3, [pc, #720]	@ (8010ff8 <ProcessMacCommands+0x6b4>)
 8010d26:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d007      	beq.n	8010d40 <ProcessMacCommands+0x3fc>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010d30:	4bb1      	ldr	r3, [pc, #708]	@ (8010ff8 <ProcessMacCommands+0x6b4>)
 8010d32:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	4798      	blx	r3
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010d40:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8010d44:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010d48:	787b      	ldrb	r3, [r7, #1]
 8010d4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010d54:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010d58:	2202      	movs	r2, #2
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	2006      	movs	r0, #6
 8010d5e:	f003 fb79 	bl	8014454 <LoRaMacCommandsAddCmd>
                break;
 8010d62:	e2cd      	b.n	8011300 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010d64:	2303      	movs	r3, #3
 8010d66:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010d6a:	78fb      	ldrb	r3, [r7, #3]
 8010d6c:	1c5a      	adds	r2, r3, #1
 8010d6e:	70fa      	strb	r2, [r7, #3]
 8010d70:	461a      	mov	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	4413      	add	r3, r2
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	b25b      	sxtb	r3, r3
 8010d7a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8010d7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010d82:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010d84:	78fb      	ldrb	r3, [r7, #3]
 8010d86:	1c5a      	adds	r2, r3, #1
 8010d88:	70fa      	strb	r2, [r7, #3]
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	4413      	add	r3, r2
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010d94:	78fb      	ldrb	r3, [r7, #3]
 8010d96:	1c5a      	adds	r2, r3, #1
 8010d98:	70fa      	strb	r2, [r7, #3]
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	4413      	add	r3, r2
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	021a      	lsls	r2, r3, #8
 8010da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da6:	4313      	orrs	r3, r2
 8010da8:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010daa:	78fb      	ldrb	r3, [r7, #3]
 8010dac:	1c5a      	adds	r2, r3, #1
 8010dae:	70fa      	strb	r2, [r7, #3]
 8010db0:	461a      	mov	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4413      	add	r3, r2
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	041a      	lsls	r2, r3, #16
 8010dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc2:	2264      	movs	r2, #100	@ 0x64
 8010dc4:	fb02 f303 	mul.w	r3, r2, r3
 8010dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010dce:	78fb      	ldrb	r3, [r7, #3]
 8010dd0:	1c5a      	adds	r2, r3, #1
 8010dd2:	70fa      	strb	r2, [r7, #3]
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	4413      	add	r3, r2
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	b25b      	sxtb	r3, r3
 8010dde:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010de2:	4b86      	ldr	r3, [pc, #536]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010de4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010de8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8010dec:	4611      	mov	r1, r2
 8010dee:	4618      	mov	r0, r3
 8010df0:	f005 f9ba 	bl	8016168 <RegionNewChannelReq>
 8010df4:	4603      	mov	r3, r0
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010dfc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010e00:	b25b      	sxtb	r3, r3
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f2c0 8273 	blt.w	80112ee <ProcessMacCommands+0x9aa>
                {
                    macCmdPayload[0] = status;
 8010e08:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010e0c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010e10:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010e14:	2201      	movs	r2, #1
 8010e16:	4619      	mov	r1, r3
 8010e18:	2007      	movs	r0, #7
 8010e1a:	f003 fb1b 	bl	8014454 <LoRaMacCommandsAddCmd>
                }
                break;
 8010e1e:	e266      	b.n	80112ee <ProcessMacCommands+0x9aa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010e20:	78fb      	ldrb	r3, [r7, #3]
 8010e22:	1c5a      	adds	r2, r3, #1
 8010e24:	70fa      	strb	r2, [r7, #3]
 8010e26:	461a      	mov	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4413      	add	r3, r2
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	f003 030f 	and.w	r3, r3, #15
 8010e32:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8010e36:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d104      	bne.n	8010e48 <ProcessMacCommands+0x504>
                {
                    delay++;
 8010e3e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010e42:	3301      	adds	r3, #1
 8010e44:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010e48:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010e4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010e50:	fb02 f303 	mul.w	r3, r2, r3
 8010e54:	461a      	mov	r2, r3
 8010e56:	4b69      	ldr	r3, [pc, #420]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010e58:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010e5a:	4b68      	ldr	r3, [pc, #416]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e5e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8010e62:	4a66      	ldr	r2, [pc, #408]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010e64:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010e66:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	2008      	movs	r0, #8
 8010e70:	f003 faf0 	bl	8014454 <LoRaMacCommandsAddCmd>
                break;
 8010e74:	e244      	b.n	8011300 <ProcessMacCommands+0x9bc>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010e76:	78fb      	ldrb	r3, [r7, #3]
 8010e78:	1c5a      	adds	r2, r3, #1
 8010e7a:	70fa      	strb	r2, [r7, #3]
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4413      	add	r3, r2
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010e94:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010e98:	f003 0320 	and.w	r3, r3, #32
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <ProcessMacCommands+0x562>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010ea6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010eaa:	f003 0310 	and.w	r3, r3, #16
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d002      	beq.n	8010eb8 <ProcessMacCommands+0x574>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010eb8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010ebc:	f003 030f 	and.w	r3, r3, #15
 8010ec0:	b2db      	uxtb	r3, r3
 8010ec2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8010ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010ec8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010ecc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010ed0:	4611      	mov	r1, r2
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f005 f95b 	bl	801618e <RegionTxParamSetupReq>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ede:	f000 8208 	beq.w	80112f2 <ProcessMacCommands+0x9ae>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010ee2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8010ee6:	4b45      	ldr	r3, [pc, #276]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010ee8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010eec:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010ef0:	4b42      	ldr	r3, [pc, #264]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010ef2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010ef6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010efa:	461a      	mov	r2, r3
 8010efc:	4b40      	ldr	r3, [pc, #256]	@ (8011000 <ProcessMacCommands+0x6bc>)
 8010efe:	5c9b      	ldrb	r3, [r3, r2]
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ef fc63 	bl	80007cc <__aeabi_ui2f>
 8010f06:	4603      	mov	r3, r0
 8010f08:	4a3c      	ldr	r2, [pc, #240]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010f0a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010f0e:	2302      	movs	r3, #2
 8010f10:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010f14:	4b39      	ldr	r3, [pc, #228]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010f16:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010f1a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f1e:	4b37      	ldr	r3, [pc, #220]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010f20:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010f24:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010f28:	4611      	mov	r1, r2
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f005 f832 	bl	8015f94 <RegionGetPhyParam>
 8010f30:	4603      	mov	r3, r0
 8010f32:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f36:	b25a      	sxtb	r2, r3
 8010f38:	4b30      	ldr	r3, [pc, #192]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010f3a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	bfb8      	it	lt
 8010f42:	4613      	movlt	r3, r2
 8010f44:	b25a      	sxtb	r2, r3
 8010f46:	4b2d      	ldr	r3, [pc, #180]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010f48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010f4c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010f50:	2200      	movs	r2, #0
 8010f52:	4619      	mov	r1, r3
 8010f54:	2009      	movs	r0, #9
 8010f56:	f003 fa7d 	bl	8014454 <LoRaMacCommandsAddCmd>
                }
                break;
 8010f5a:	e1ca      	b.n	80112f2 <ProcessMacCommands+0x9ae>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010f5c:	2303      	movs	r3, #3
 8010f5e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010f62:	78fb      	ldrb	r3, [r7, #3]
 8010f64:	1c5a      	adds	r2, r3, #1
 8010f66:	70fa      	strb	r2, [r7, #3]
 8010f68:	461a      	mov	r2, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010f74:	78fb      	ldrb	r3, [r7, #3]
 8010f76:	1c5a      	adds	r2, r3, #1
 8010f78:	70fa      	strb	r2, [r7, #3]
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	4413      	add	r3, r2
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010f84:	78fb      	ldrb	r3, [r7, #3]
 8010f86:	1c5a      	adds	r2, r3, #1
 8010f88:	70fa      	strb	r2, [r7, #3]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	4413      	add	r3, r2
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	021a      	lsls	r2, r3, #8
 8010f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f96:	4313      	orrs	r3, r2
 8010f98:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010f9a:	78fb      	ldrb	r3, [r7, #3]
 8010f9c:	1c5a      	adds	r2, r3, #1
 8010f9e:	70fa      	strb	r2, [r7, #3]
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4413      	add	r3, r2
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	041a      	lsls	r2, r3, #16
 8010faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fac:	4313      	orrs	r3, r2
 8010fae:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb2:	2264      	movs	r2, #100	@ 0x64
 8010fb4:	fb02 f303 	mul.w	r3, r2, r3
 8010fb8:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010fba:	4b10      	ldr	r3, [pc, #64]	@ (8010ffc <ProcessMacCommands+0x6b8>)
 8010fbc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010fc0:	f107 0220 	add.w	r2, r7, #32
 8010fc4:	4611      	mov	r1, r2
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f005 f8f4 	bl	80161b4 <RegionDlChannelReq>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010fd4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010fd8:	b25b      	sxtb	r3, r3
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f2c0 818b 	blt.w	80112f6 <ProcessMacCommands+0x9b2>
                {
                    macCmdPayload[0] = status;
 8010fe0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010fe4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010fe8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010fec:	2201      	movs	r2, #1
 8010fee:	4619      	mov	r1, r3
 8010ff0:	200a      	movs	r0, #10
 8010ff2:	f003 fa2f 	bl	8014454 <LoRaMacCommandsAddCmd>
                }
                break;
 8010ff6:	e17e      	b.n	80112f6 <ProcessMacCommands+0x9b2>
 8010ff8:	200007d0 	.word	0x200007d0
 8010ffc:	20000d04 	.word	0x20000d04
 8011000:	0801decc 	.word	0x0801decc
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011004:	2009      	movs	r0, #9
 8011006:	f003 fd5d 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	f000 8084 	beq.w	801111a <ProcessMacCommands+0x7d6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011012:	2109      	movs	r1, #9
 8011014:	2000      	movs	r0, #0
 8011016:	f003 fcc9 	bl	80149ac <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801101a:	f107 0318 	add.w	r3, r7, #24
 801101e:	2200      	movs	r2, #0
 8011020:	601a      	str	r2, [r3, #0]
 8011022:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011024:	f107 0310 	add.w	r3, r7, #16
 8011028:	2200      	movs	r2, #0
 801102a:	601a      	str	r2, [r3, #0]
 801102c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801102e:	f107 0308 	add.w	r3, r7, #8
 8011032:	2200      	movs	r2, #0
 8011034:	601a      	str	r2, [r3, #0]
 8011036:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011038:	78fb      	ldrb	r3, [r7, #3]
 801103a:	1c5a      	adds	r2, r3, #1
 801103c:	70fa      	strb	r2, [r7, #3]
 801103e:	461a      	mov	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	4413      	add	r3, r2
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011048:	78fb      	ldrb	r3, [r7, #3]
 801104a:	1c5a      	adds	r2, r3, #1
 801104c:	70fa      	strb	r2, [r7, #3]
 801104e:	461a      	mov	r2, r3
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4413      	add	r3, r2
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	021a      	lsls	r2, r3, #8
 8011058:	69bb      	ldr	r3, [r7, #24]
 801105a:	4313      	orrs	r3, r2
 801105c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801105e:	78fb      	ldrb	r3, [r7, #3]
 8011060:	1c5a      	adds	r2, r3, #1
 8011062:	70fa      	strb	r2, [r7, #3]
 8011064:	461a      	mov	r2, r3
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4413      	add	r3, r2
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	041a      	lsls	r2, r3, #16
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	4313      	orrs	r3, r2
 8011072:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011074:	78fb      	ldrb	r3, [r7, #3]
 8011076:	1c5a      	adds	r2, r3, #1
 8011078:	70fa      	strb	r2, [r7, #3]
 801107a:	461a      	mov	r2, r3
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	4413      	add	r3, r2
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	061a      	lsls	r2, r3, #24
 8011084:	69bb      	ldr	r3, [r7, #24]
 8011086:	4313      	orrs	r3, r2
 8011088:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801108a:	78fb      	ldrb	r3, [r7, #3]
 801108c:	1c5a      	adds	r2, r3, #1
 801108e:	70fa      	strb	r2, [r7, #3]
 8011090:	461a      	mov	r2, r3
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4413      	add	r3, r2
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	b21b      	sxth	r3, r3
 801109a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 801109c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80110a0:	461a      	mov	r2, r3
 80110a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80110a6:	fb02 f303 	mul.w	r3, r2, r3
 80110aa:	121b      	asrs	r3, r3, #8
 80110ac:	b21b      	sxth	r3, r3
 80110ae:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80110b0:	f107 0310 	add.w	r3, r7, #16
 80110b4:	f107 0218 	add.w	r2, r7, #24
 80110b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110bc:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80110c0:	693a      	ldr	r2, [r7, #16]
 80110c2:	4b96      	ldr	r3, [pc, #600]	@ (801131c <ProcessMacCommands+0x9d8>)
 80110c4:	4413      	add	r3, r2
 80110c6:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80110c8:	f107 0308 	add.w	r3, r7, #8
 80110cc:	4618      	mov	r0, r3
 80110ce:	f00a fddf 	bl	801bc90 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80110d2:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80110d6:	4b92      	ldr	r3, [pc, #584]	@ (8011320 <ProcessMacCommands+0x9dc>)
 80110d8:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 80110dc:	9200      	str	r2, [sp, #0]
 80110de:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 80110e2:	f107 0210 	add.w	r2, r7, #16
 80110e6:	ca06      	ldmia	r2, {r1, r2}
 80110e8:	f00a fd6b 	bl	801bbc2 <SysTimeSub>
 80110ec:	f107 0010 	add.w	r0, r7, #16
 80110f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110f6:	f107 0208 	add.w	r2, r7, #8
 80110fa:	ca06      	ldmia	r2, {r1, r2}
 80110fc:	f00a fd28 	bl	801bb50 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011100:	f107 0310 	add.w	r3, r7, #16
 8011104:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011108:	f00a fd94 	bl	801bc34 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801110c:	f003 f840 	bl	8014190 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011110:	4b83      	ldr	r3, [pc, #524]	@ (8011320 <ProcessMacCommands+0x9dc>)
 8011112:	2201      	movs	r2, #1
 8011114:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8011118:	e0f2      	b.n	8011300 <ProcessMacCommands+0x9bc>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801111a:	4b81      	ldr	r3, [pc, #516]	@ (8011320 <ProcessMacCommands+0x9dc>)
 801111c:	2200      	movs	r2, #0
 801111e:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 8011122:	e0ed      	b.n	8011300 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011124:	200c      	movs	r0, #12
 8011126:	f003 fccd 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	f000 80e4 	beq.w	80112fa <ProcessMacCommands+0x9b6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011132:	210c      	movs	r1, #12
 8011134:	2000      	movs	r0, #0
 8011136:	f003 fc39 	bl	80149ac <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801113a:	4b79      	ldr	r3, [pc, #484]	@ (8011320 <ProcessMacCommands+0x9dc>)
 801113c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011140:	2b04      	cmp	r3, #4
 8011142:	f000 80da 	beq.w	80112fa <ProcessMacCommands+0x9b6>
 8011146:	4b76      	ldr	r3, [pc, #472]	@ (8011320 <ProcessMacCommands+0x9dc>)
 8011148:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 801114c:	2b05      	cmp	r3, #5
 801114e:	f000 80d4 	beq.w	80112fa <ProcessMacCommands+0x9b6>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011152:	f002 fffe 	bl	8014152 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011156:	e0d0      	b.n	80112fa <ProcessMacCommands+0x9b6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011158:	2303      	movs	r3, #3
 801115a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 801115e:	2300      	movs	r3, #0
 8011160:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011162:	78fb      	ldrb	r3, [r7, #3]
 8011164:	1c5a      	adds	r2, r3, #1
 8011166:	70fa      	strb	r2, [r7, #3]
 8011168:	461a      	mov	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	4413      	add	r3, r2
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011172:	78fb      	ldrb	r3, [r7, #3]
 8011174:	1c5a      	adds	r2, r3, #1
 8011176:	70fa      	strb	r2, [r7, #3]
 8011178:	461a      	mov	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	4413      	add	r3, r2
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	021b      	lsls	r3, r3, #8
 8011182:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011184:	4313      	orrs	r3, r2
 8011186:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011188:	78fb      	ldrb	r3, [r7, #3]
 801118a:	1c5a      	adds	r2, r3, #1
 801118c:	70fa      	strb	r2, [r7, #3]
 801118e:	461a      	mov	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	4413      	add	r3, r2
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	041b      	lsls	r3, r3, #16
 8011198:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801119a:	4313      	orrs	r3, r2
 801119c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 801119e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111a0:	2264      	movs	r2, #100	@ 0x64
 80111a2:	fb02 f303 	mul.w	r3, r2, r3
 80111a6:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 80111a8:	78fb      	ldrb	r3, [r7, #3]
 80111aa:	1c5a      	adds	r2, r3, #1
 80111ac:	70fa      	strb	r2, [r7, #3]
 80111ae:	461a      	mov	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4413      	add	r3, r2
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	f003 030f 	and.w	r3, r3, #15
 80111ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80111be:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80111c2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80111c4:	4618      	mov	r0, r3
 80111c6:	f002 ffca 	bl	801415e <LoRaMacClassBPingSlotChannelReq>
 80111ca:	4603      	mov	r3, r0
 80111cc:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 80111d0:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80111d4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80111d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80111dc:	2201      	movs	r2, #1
 80111de:	4619      	mov	r1, r3
 80111e0:	2011      	movs	r0, #17
 80111e2:	f003 f937 	bl	8014454 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80111e6:	e08b      	b.n	8011300 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80111e8:	200d      	movs	r0, #13
 80111ea:	f003 fc6b 	bl	8014ac4 <LoRaMacConfirmQueueIsCmdActive>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f000 8084 	beq.w	80112fe <ProcessMacCommands+0x9ba>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80111f6:	210d      	movs	r1, #13
 80111f8:	2000      	movs	r0, #0
 80111fa:	f003 fbd7 	bl	80149ac <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8011204:	2300      	movs	r3, #0
 8011206:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801120a:	78fb      	ldrb	r3, [r7, #3]
 801120c:	1c5a      	adds	r2, r3, #1
 801120e:	70fa      	strb	r2, [r7, #3]
 8011210:	461a      	mov	r2, r3
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4413      	add	r3, r2
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801121c:	78fb      	ldrb	r3, [r7, #3]
 801121e:	1c5a      	adds	r2, r3, #1
 8011220:	70fa      	strb	r2, [r7, #3]
 8011222:	461a      	mov	r2, r3
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4413      	add	r3, r2
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	021b      	lsls	r3, r3, #8
 801122c:	b21a      	sxth	r2, r3
 801122e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8011232:	4313      	orrs	r3, r2
 8011234:	b21b      	sxth	r3, r3
 8011236:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801123a:	78fb      	ldrb	r3, [r7, #3]
 801123c:	1c5a      	adds	r2, r3, #1
 801123e:	70fa      	strb	r2, [r7, #3]
 8011240:	461a      	mov	r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4413      	add	r3, r2
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 801124c:	4b35      	ldr	r3, [pc, #212]	@ (8011324 <ProcessMacCommands+0x9e0>)
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8011254:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8011258:	4618      	mov	r0, r3
 801125a:	f002 ff8c 	bl	8014176 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 801125e:	e04e      	b.n	80112fe <ProcessMacCommands+0x9ba>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011260:	2300      	movs	r3, #0
 8011262:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8011266:	78fb      	ldrb	r3, [r7, #3]
 8011268:	1c5a      	adds	r2, r3, #1
 801126a:	70fa      	strb	r2, [r7, #3]
 801126c:	461a      	mov	r2, r3
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4413      	add	r3, r2
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011278:	78fb      	ldrb	r3, [r7, #3]
 801127a:	1c5a      	adds	r2, r3, #1
 801127c:	70fa      	strb	r2, [r7, #3]
 801127e:	461a      	mov	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	4413      	add	r3, r2
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	021b      	lsls	r3, r3, #8
 8011288:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801128c:	4313      	orrs	r3, r2
 801128e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011292:	78fb      	ldrb	r3, [r7, #3]
 8011294:	1c5a      	adds	r2, r3, #1
 8011296:	70fa      	strb	r2, [r7, #3]
 8011298:	461a      	mov	r2, r3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	4413      	add	r3, r2
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	041b      	lsls	r3, r3, #16
 80112a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80112a6:	4313      	orrs	r3, r2
 80112a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 80112ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80112b0:	2264      	movs	r2, #100	@ 0x64
 80112b2:	fb02 f303 	mul.w	r3, r2, r3
 80112b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80112ba:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80112be:	f002 ff6d 	bl	801419c <LoRaMacClassBBeaconFreqReq>
 80112c2:	4603      	mov	r3, r0
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d003      	beq.n	80112d0 <ProcessMacCommands+0x98c>
                    {
                        macCmdPayload[0] = 1;
 80112c8:	2301      	movs	r3, #1
 80112ca:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 80112ce:	e002      	b.n	80112d6 <ProcessMacCommands+0x992>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80112d0:	2300      	movs	r3, #0
 80112d2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80112d6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80112da:	2201      	movs	r2, #1
 80112dc:	4619      	mov	r1, r3
 80112de:	2013      	movs	r0, #19
 80112e0:	f003 f8b8 	bl	8014454 <LoRaMacCommandsAddCmd>
                }
                break;
 80112e4:	e00c      	b.n	8011300 <ProcessMacCommands+0x9bc>
                break;
 80112e6:	bf00      	nop
 80112e8:	e00a      	b.n	8011300 <ProcessMacCommands+0x9bc>
                break;
 80112ea:	bf00      	nop
 80112ec:	e008      	b.n	8011300 <ProcessMacCommands+0x9bc>
                break;
 80112ee:	bf00      	nop
 80112f0:	e006      	b.n	8011300 <ProcessMacCommands+0x9bc>
                break;
 80112f2:	bf00      	nop
 80112f4:	e004      	b.n	8011300 <ProcessMacCommands+0x9bc>
                break;
 80112f6:	bf00      	nop
 80112f8:	e002      	b.n	8011300 <ProcessMacCommands+0x9bc>
                break;
 80112fa:	bf00      	nop
 80112fc:	e000      	b.n	8011300 <ProcessMacCommands+0x9bc>
                break;
 80112fe:	bf00      	nop
    while( macIndex < commandsSize )
 8011300:	78fa      	ldrb	r2, [r7, #3]
 8011302:	78bb      	ldrb	r3, [r7, #2]
 8011304:	429a      	cmp	r2, r3
 8011306:	f4ff ab3f 	bcc.w	8010988 <ProcessMacCommands+0x44>
 801130a:	e004      	b.n	8011316 <ProcessMacCommands+0x9d2>
        return;
 801130c:	bf00      	nop
 801130e:	e002      	b.n	8011316 <ProcessMacCommands+0x9d2>
            return;
 8011310:	bf00      	nop
 8011312:	e000      	b.n	8011316 <ProcessMacCommands+0x9d2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011314:	bf00      	nop
        }
    }
}
 8011316:	378c      	adds	r7, #140	@ 0x8c
 8011318:	46bd      	mov	sp, r7
 801131a:	bd90      	pop	{r4, r7, pc}
 801131c:	12d53d80 	.word	0x12d53d80
 8011320:	200007d0 	.word	0x200007d0
 8011324:	20001914 	.word	0x20001914

08011328 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b08e      	sub	sp, #56	@ 0x38
 801132c:	af02      	add	r7, sp, #8
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	607a      	str	r2, [r7, #4]
 8011332:	461a      	mov	r2, r3
 8011334:	460b      	mov	r3, r1
 8011336:	72fb      	strb	r3, [r7, #11]
 8011338:	4613      	mov	r3, r2
 801133a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801133c:	2303      	movs	r3, #3
 801133e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011342:	4b66      	ldr	r3, [pc, #408]	@ (80114dc <Send+0x1b4>)
 8011344:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8011348:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 801134c:	4b63      	ldr	r3, [pc, #396]	@ (80114dc <Send+0x1b4>)
 801134e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011352:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011356:	4b61      	ldr	r3, [pc, #388]	@ (80114dc <Send+0x1b4>)
 8011358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801135a:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801135c:	4b5f      	ldr	r3, [pc, #380]	@ (80114dc <Send+0x1b4>)
 801135e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011366:	2307      	movs	r3, #7
 8011368:	e0b4      	b.n	80114d4 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801136a:	4b5c      	ldr	r3, [pc, #368]	@ (80114dc <Send+0x1b4>)
 801136c:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8011370:	2b00      	cmp	r3, #0
 8011372:	d102      	bne.n	801137a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011374:	4b59      	ldr	r3, [pc, #356]	@ (80114dc <Send+0x1b4>)
 8011376:	2200      	movs	r2, #0
 8011378:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 801137a:	2300      	movs	r3, #0
 801137c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011380:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011384:	f023 030f 	bic.w	r3, r3, #15
 8011388:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 801138c:	4b53      	ldr	r3, [pc, #332]	@ (80114dc <Send+0x1b4>)
 801138e:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8011392:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011396:	f362 13c7 	bfi	r3, r2, #7, #1
 801139a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801139e:	4b4f      	ldr	r3, [pc, #316]	@ (80114dc <Send+0x1b4>)
 80113a0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d106      	bne.n	80113b6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80113a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80113ac:	f043 0310 	orr.w	r3, r3, #16
 80113b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80113b4:	e005      	b.n	80113c2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80113b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80113ba:	f023 0310 	bic.w	r3, r3, #16
 80113be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80113c2:	4b46      	ldr	r3, [pc, #280]	@ (80114dc <Send+0x1b4>)
 80113c4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d005      	beq.n	80113d8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80113cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80113d0:	f043 0320 	orr.w	r3, r3, #32
 80113d4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 80113d8:	2301      	movs	r3, #1
 80113da:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80113dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80113e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	bf14      	ite	ne
 80113ea:	2301      	movne	r3, #1
 80113ec:	2300      	moveq	r3, #0
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80113f2:	4b3a      	ldr	r3, [pc, #232]	@ (80114dc <Send+0x1b4>)
 80113f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113f6:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80113f8:	4b38      	ldr	r3, [pc, #224]	@ (80114dc <Send+0x1b4>)
 80113fa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80113fe:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011400:	4b36      	ldr	r3, [pc, #216]	@ (80114dc <Send+0x1b4>)
 8011402:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8011406:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011408:	4b34      	ldr	r3, [pc, #208]	@ (80114dc <Send+0x1b4>)
 801140a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801140e:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011412:	4b32      	ldr	r3, [pc, #200]	@ (80114dc <Send+0x1b4>)
 8011414:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011418:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801141c:	4b2f      	ldr	r3, [pc, #188]	@ (80114dc <Send+0x1b4>)
 801141e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011426:	4b2d      	ldr	r3, [pc, #180]	@ (80114dc <Send+0x1b4>)
 8011428:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801142c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011430:	4b2a      	ldr	r3, [pc, #168]	@ (80114dc <Send+0x1b4>)
 8011432:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011436:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801143a:	f107 0014 	add.w	r0, r7, #20
 801143e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011442:	9300      	str	r3, [sp, #0]
 8011444:	4b26      	ldr	r3, [pc, #152]	@ (80114e0 <Send+0x1b8>)
 8011446:	4a27      	ldr	r2, [pc, #156]	@ (80114e4 <Send+0x1bc>)
 8011448:	4927      	ldr	r1, [pc, #156]	@ (80114e8 <Send+0x1c0>)
 801144a:	f002 fd21 	bl	8013e90 <LoRaMacAdrCalcNext>
 801144e:	4603      	mov	r3, r0
 8011450:	461a      	mov	r2, r3
 8011452:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011456:	f362 1386 	bfi	r3, r2, #6, #1
 801145a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801145e:	7afa      	ldrb	r2, [r7, #11]
 8011460:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8011464:	893b      	ldrh	r3, [r7, #8]
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f000 fc72 	bl	8011d54 <PrepareFrame>
 8011470:	4603      	mov	r3, r0
 8011472:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011476:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801147a:	2b00      	cmp	r3, #0
 801147c:	d003      	beq.n	8011486 <Send+0x15e>
 801147e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011482:	2b0a      	cmp	r3, #10
 8011484:	d107      	bne.n	8011496 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011486:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801148a:	4618      	mov	r0, r3
 801148c:	f000 f962 	bl	8011754 <ScheduleTx>
 8011490:	4603      	mov	r3, r0
 8011492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801149a:	2b00      	cmp	r3, #0
 801149c:	d00a      	beq.n	80114b4 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801149e:	4a0f      	ldr	r2, [pc, #60]	@ (80114dc <Send+0x1b4>)
 80114a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80114a4:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80114a8:	4a0c      	ldr	r2, [pc, #48]	@ (80114dc <Send+0x1b4>)
 80114aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80114ae:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 80114b2:	e00d      	b.n	80114d0 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80114b4:	4b09      	ldr	r3, [pc, #36]	@ (80114dc <Send+0x1b4>)
 80114b6:	2200      	movs	r2, #0
 80114b8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80114bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114be:	4a07      	ldr	r2, [pc, #28]	@ (80114dc <Send+0x1b4>)
 80114c0:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80114c2:	f003 f86d 	bl	80145a0 <LoRaMacCommandsRemoveNoneStickyCmds>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d001      	beq.n	80114d0 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80114cc:	2313      	movs	r3, #19
 80114ce:	e001      	b.n	80114d4 <Send+0x1ac>
        }
    }
    return status;
 80114d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3730      	adds	r7, #48	@ 0x30
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	20000d04 	.word	0x20000d04
 80114e0:	20000d6c 	.word	0x20000d6c
 80114e4:	20000d3c 	.word	0x20000d3c
 80114e8:	20000d3d 	.word	0x20000d3d

080114ec <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80114f6:	2300      	movs	r3, #0
 80114f8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80114fa:	2300      	movs	r3, #0
 80114fc:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80114fe:	2301      	movs	r3, #1
 8011500:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011502:	79fb      	ldrb	r3, [r7, #7]
 8011504:	2bff      	cmp	r3, #255	@ 0xff
 8011506:	d11f      	bne.n	8011548 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011508:	2000      	movs	r0, #0
 801150a:	f7ff f8e1 	bl	80106d0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801150e:	4b15      	ldr	r3, [pc, #84]	@ (8011564 <SendReJoinReq+0x78>)
 8011510:	2200      	movs	r2, #0
 8011512:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011516:	4b13      	ldr	r3, [pc, #76]	@ (8011564 <SendReJoinReq+0x78>)
 8011518:	4a13      	ldr	r2, [pc, #76]	@ (8011568 <SendReJoinReq+0x7c>)
 801151a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801151e:	4b11      	ldr	r3, [pc, #68]	@ (8011564 <SendReJoinReq+0x78>)
 8011520:	22ff      	movs	r2, #255	@ 0xff
 8011522:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011526:	7b3b      	ldrb	r3, [r7, #12]
 8011528:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 801152c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801152e:	7b3a      	ldrb	r2, [r7, #12]
 8011530:	4b0c      	ldr	r3, [pc, #48]	@ (8011564 <SendReJoinReq+0x78>)
 8011532:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8011536:	480d      	ldr	r0, [pc, #52]	@ (801156c <SendReJoinReq+0x80>)
 8011538:	f7fb fefc 	bl	800d334 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 801153c:	480c      	ldr	r0, [pc, #48]	@ (8011570 <SendReJoinReq+0x84>)
 801153e:	f7fb fec9 	bl	800d2d4 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8011542:	2300      	movs	r3, #0
 8011544:	73fb      	strb	r3, [r7, #15]

            break;
 8011546:	e002      	b.n	801154e <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011548:	2302      	movs	r3, #2
 801154a:	73bb      	strb	r3, [r7, #14]
            break;
 801154c:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801154e:	7bfb      	ldrb	r3, [r7, #15]
 8011550:	4618      	mov	r0, r3
 8011552:	f000 f8ff 	bl	8011754 <ScheduleTx>
 8011556:	4603      	mov	r3, r0
 8011558:	73bb      	strb	r3, [r7, #14]
    return status;
 801155a:	7bbb      	ldrb	r3, [r7, #14]
}
 801155c:	4618      	mov	r0, r3
 801155e:	3710      	adds	r7, #16
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}
 8011564:	200007d0 	.word	0x200007d0
 8011568:	200007d2 	.word	0x200007d2
 801156c:	200008de 	.word	0x200008de
 8011570:	200008e6 	.word	0x200008e6

08011574 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011574:	b580      	push	{r7, lr}
 8011576:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011578:	f002 fd9a 	bl	80140b0 <LoRaMacClassBIsBeaconExpected>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011582:	230e      	movs	r3, #14
 8011584:	e013      	b.n	80115ae <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011586:	4b0b      	ldr	r3, [pc, #44]	@ (80115b4 <CheckForClassBCollision+0x40>)
 8011588:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801158c:	2b01      	cmp	r3, #1
 801158e:	d10d      	bne.n	80115ac <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011590:	f002 fd95 	bl	80140be <LoRaMacClassBIsPingExpected>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d001      	beq.n	801159e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801159a:	230f      	movs	r3, #15
 801159c:	e007      	b.n	80115ae <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801159e:	f002 fd95 	bl	80140cc <LoRaMacClassBIsMulticastExpected>
 80115a2:	4603      	mov	r3, r0
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d001      	beq.n	80115ac <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80115a8:	230f      	movs	r3, #15
 80115aa:	e000      	b.n	80115ae <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80115ac:	2300      	movs	r3, #0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20000d04 	.word	0x20000d04

080115b8 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80115b8:	b590      	push	{r4, r7, lr}
 80115ba:	b083      	sub	sp, #12
 80115bc:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80115be:	4b2d      	ldr	r3, [pc, #180]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 80115c0:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80115c4:	4b2b      	ldr	r3, [pc, #172]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 80115c6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80115ca:	4b2a      	ldr	r3, [pc, #168]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 80115cc:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 80115d0:	4b28      	ldr	r3, [pc, #160]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 80115d2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80115d6:	4b27      	ldr	r3, [pc, #156]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 80115d8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80115dc:	b25b      	sxtb	r3, r3
 80115de:	f004 fe2e 	bl	801623e <RegionApplyDrOffset>
 80115e2:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80115e4:	b259      	sxtb	r1, r3
 80115e6:	4b23      	ldr	r3, [pc, #140]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 80115e8:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80115ec:	4b21      	ldr	r3, [pc, #132]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 80115ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80115f0:	4821      	ldr	r0, [pc, #132]	@ (8011678 <ComputeRxWindowParameters+0xc0>)
 80115f2:	9000      	str	r0, [sp, #0]
 80115f4:	4620      	mov	r0, r4
 80115f6:	f004 fd44 	bl	8016082 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80115fa:	4b1e      	ldr	r3, [pc, #120]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 80115fc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011600:	4b1c      	ldr	r3, [pc, #112]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 8011602:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011606:	b259      	sxtb	r1, r3
 8011608:	4b1a      	ldr	r3, [pc, #104]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 801160a:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 801160e:	4b19      	ldr	r3, [pc, #100]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 8011610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011612:	4c1a      	ldr	r4, [pc, #104]	@ (801167c <ComputeRxWindowParameters+0xc4>)
 8011614:	9400      	str	r4, [sp, #0]
 8011616:	f004 fd34 	bl	8016082 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801161a:	4b16      	ldr	r3, [pc, #88]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 801161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801161e:	4a18      	ldr	r2, [pc, #96]	@ (8011680 <ComputeRxWindowParameters+0xc8>)
 8011620:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011624:	4413      	add	r3, r2
 8011626:	4a16      	ldr	r2, [pc, #88]	@ (8011680 <ComputeRxWindowParameters+0xc8>)
 8011628:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801162c:	4b11      	ldr	r3, [pc, #68]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 801162e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011630:	4a13      	ldr	r2, [pc, #76]	@ (8011680 <ComputeRxWindowParameters+0xc8>)
 8011632:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011636:	4413      	add	r3, r2
 8011638:	4a11      	ldr	r2, [pc, #68]	@ (8011680 <ComputeRxWindowParameters+0xc8>)
 801163a:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 801163e:	4b10      	ldr	r3, [pc, #64]	@ (8011680 <ComputeRxWindowParameters+0xc8>)
 8011640:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011644:	2b04      	cmp	r3, #4
 8011646:	d011      	beq.n	801166c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011648:	4b0a      	ldr	r3, [pc, #40]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 801164a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801164c:	4a0c      	ldr	r2, [pc, #48]	@ (8011680 <ComputeRxWindowParameters+0xc8>)
 801164e:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011652:	4413      	add	r3, r2
 8011654:	4a0a      	ldr	r2, [pc, #40]	@ (8011680 <ComputeRxWindowParameters+0xc8>)
 8011656:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801165a:	4b06      	ldr	r3, [pc, #24]	@ (8011674 <ComputeRxWindowParameters+0xbc>)
 801165c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801165e:	4a08      	ldr	r2, [pc, #32]	@ (8011680 <ComputeRxWindowParameters+0xc8>)
 8011660:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011664:	4413      	add	r3, r2
 8011666:	4a06      	ldr	r2, [pc, #24]	@ (8011680 <ComputeRxWindowParameters+0xc8>)
 8011668:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 801166c:	bf00      	nop
 801166e:	3704      	adds	r7, #4
 8011670:	46bd      	mov	sp, r7
 8011672:	bd90      	pop	{r4, r7, pc}
 8011674:	20000d04 	.word	0x20000d04
 8011678:	20000b88 	.word	0x20000b88
 801167c:	20000ba0 	.word	0x20000ba0
 8011680:	200007d0 	.word	0x200007d0

08011684 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801168a:	2300      	movs	r3, #0
 801168c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801168e:	4b13      	ldr	r3, [pc, #76]	@ (80116dc <VerifyTxFrame+0x58>)
 8011690:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011694:	2b00      	cmp	r3, #0
 8011696:	d01b      	beq.n	80116d0 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011698:	1d3b      	adds	r3, r7, #4
 801169a:	4618      	mov	r0, r3
 801169c:	f002 ffd0 	bl	8014640 <LoRaMacCommandsGetSizeSerializedCmds>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d001      	beq.n	80116aa <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80116a6:	2313      	movs	r3, #19
 80116a8:	e013      	b.n	80116d2 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80116aa:	4b0d      	ldr	r3, [pc, #52]	@ (80116e0 <VerifyTxFrame+0x5c>)
 80116ac:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80116b0:	4a0a      	ldr	r2, [pc, #40]	@ (80116dc <VerifyTxFrame+0x58>)
 80116b2:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	b2d2      	uxtb	r2, r2
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7ff f91a 	bl	80108f4 <ValidatePayloadLength>
 80116c0:	4603      	mov	r3, r0
 80116c2:	f083 0301 	eor.w	r3, r3, #1
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d001      	beq.n	80116d0 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80116cc:	2308      	movs	r3, #8
 80116ce:	e000      	b.n	80116d2 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80116d0:	2300      	movs	r3, #0
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3708      	adds	r7, #8
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	20000d04 	.word	0x20000d04
 80116e0:	200007d0 	.word	0x200007d0

080116e4 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80116ea:	4b18      	ldr	r3, [pc, #96]	@ (801174c <SerializeTxFrame+0x68>)
 80116ec:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d002      	beq.n	80116fa <SerializeTxFrame+0x16>
 80116f4:	2b04      	cmp	r3, #4
 80116f6:	d011      	beq.n	801171c <SerializeTxFrame+0x38>
 80116f8:	e021      	b.n	801173e <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80116fa:	4815      	ldr	r0, [pc, #84]	@ (8011750 <SerializeTxFrame+0x6c>)
 80116fc:	f004 fac3 	bl	8015c86 <LoRaMacSerializerJoinRequest>
 8011700:	4603      	mov	r3, r0
 8011702:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011704:	79fb      	ldrb	r3, [r7, #7]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d001      	beq.n	801170e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801170a:	2311      	movs	r3, #17
 801170c:	e01a      	b.n	8011744 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801170e:	4b0f      	ldr	r3, [pc, #60]	@ (801174c <SerializeTxFrame+0x68>)
 8011710:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011714:	461a      	mov	r2, r3
 8011716:	4b0d      	ldr	r3, [pc, #52]	@ (801174c <SerializeTxFrame+0x68>)
 8011718:	801a      	strh	r2, [r3, #0]
            break;
 801171a:	e012      	b.n	8011742 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 801171c:	480c      	ldr	r0, [pc, #48]	@ (8011750 <SerializeTxFrame+0x6c>)
 801171e:	f004 fb34 	bl	8015d8a <LoRaMacSerializerData>
 8011722:	4603      	mov	r3, r0
 8011724:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011726:	79fb      	ldrb	r3, [r7, #7]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d001      	beq.n	8011730 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801172c:	2311      	movs	r3, #17
 801172e:	e009      	b.n	8011744 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011730:	4b06      	ldr	r3, [pc, #24]	@ (801174c <SerializeTxFrame+0x68>)
 8011732:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011736:	461a      	mov	r2, r3
 8011738:	4b04      	ldr	r3, [pc, #16]	@ (801174c <SerializeTxFrame+0x68>)
 801173a:	801a      	strh	r2, [r3, #0]
            break;
 801173c:	e001      	b.n	8011742 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801173e:	2303      	movs	r3, #3
 8011740:	e000      	b.n	8011744 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011742:	2300      	movs	r3, #0
}
 8011744:	4618      	mov	r0, r3
 8011746:	3708      	adds	r7, #8
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	200007d0 	.word	0x200007d0
 8011750:	200008d8 	.word	0x200008d8

08011754 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b090      	sub	sp, #64	@ 0x40
 8011758:	af02      	add	r7, sp, #8
 801175a:	4603      	mov	r3, r0
 801175c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801175e:	2303      	movs	r3, #3
 8011760:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011764:	f7ff ff06 	bl	8011574 <CheckForClassBCollision>
 8011768:	4603      	mov	r3, r0
 801176a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801176e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011772:	2b00      	cmp	r3, #0
 8011774:	d002      	beq.n	801177c <ScheduleTx+0x28>
    {
        return status;
 8011776:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801177a:	e092      	b.n	80118a2 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 801177c:	f000 f8f8 	bl	8011970 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011780:	f7ff ffb0 	bl	80116e4 <SerializeTxFrame>
 8011784:	4603      	mov	r3, r0
 8011786:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801178a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801178e:	2b00      	cmp	r3, #0
 8011790:	d002      	beq.n	8011798 <ScheduleTx+0x44>
    {
        return status;
 8011792:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011796:	e084      	b.n	80118a2 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011798:	4b44      	ldr	r3, [pc, #272]	@ (80118ac <ScheduleTx+0x158>)
 801179a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801179c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801179e:	4b43      	ldr	r3, [pc, #268]	@ (80118ac <ScheduleTx+0x158>)
 80117a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80117a4:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80117a6:	4b41      	ldr	r3, [pc, #260]	@ (80118ac <ScheduleTx+0x158>)
 80117a8:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80117ac:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80117ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80117b2:	4618      	mov	r0, r3
 80117b4:	f00a faa4 	bl	801bd00 <SysTimeGetMcuTime>
 80117b8:	4638      	mov	r0, r7
 80117ba:	4b3c      	ldr	r3, [pc, #240]	@ (80118ac <ScheduleTx+0x158>)
 80117bc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 80117c0:	9200      	str	r2, [sp, #0]
 80117c2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80117c6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80117ca:	ca06      	ldmia	r2, {r1, r2}
 80117cc:	f00a f9f9 	bl	801bbc2 <SysTimeSub>
 80117d0:	f107 0320 	add.w	r3, r7, #32
 80117d4:	463a      	mov	r2, r7
 80117d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117da:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80117de:	4b33      	ldr	r3, [pc, #204]	@ (80118ac <ScheduleTx+0x158>)
 80117e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117e2:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80117e4:	2300      	movs	r3, #0
 80117e6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80117ea:	2301      	movs	r3, #1
 80117ec:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80117ee:	4b30      	ldr	r3, [pc, #192]	@ (80118b0 <ScheduleTx+0x15c>)
 80117f0:	881b      	ldrh	r3, [r3, #0]
 80117f2:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80117f4:	4b2d      	ldr	r3, [pc, #180]	@ (80118ac <ScheduleTx+0x158>)
 80117f6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d104      	bne.n	8011808 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80117fe:	2301      	movs	r3, #1
 8011800:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8011804:	2300      	movs	r3, #0
 8011806:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011808:	4b28      	ldr	r3, [pc, #160]	@ (80118ac <ScheduleTx+0x158>)
 801180a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801180e:	f107 0114 	add.w	r1, r7, #20
 8011812:	4b28      	ldr	r3, [pc, #160]	@ (80118b4 <ScheduleTx+0x160>)
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	4b28      	ldr	r3, [pc, #160]	@ (80118b8 <ScheduleTx+0x164>)
 8011818:	4a28      	ldr	r2, [pc, #160]	@ (80118bc <ScheduleTx+0x168>)
 801181a:	f004 fcf8 	bl	801620e <RegionNextChannel>
 801181e:	4603      	mov	r3, r0
 8011820:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8011824:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011828:	2b00      	cmp	r3, #0
 801182a:	d025      	beq.n	8011878 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 801182c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011830:	2b0b      	cmp	r3, #11
 8011832:	d11e      	bne.n	8011872 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011834:	4b1e      	ldr	r3, [pc, #120]	@ (80118b0 <ScheduleTx+0x15c>)
 8011836:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 801183a:	2b00      	cmp	r3, #0
 801183c:	d01c      	beq.n	8011878 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 801183e:	7bfb      	ldrb	r3, [r7, #15]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d013      	beq.n	801186c <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011844:	4b1a      	ldr	r3, [pc, #104]	@ (80118b0 <ScheduleTx+0x15c>)
 8011846:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801184a:	f043 0320 	orr.w	r3, r3, #32
 801184e:	4a18      	ldr	r2, [pc, #96]	@ (80118b0 <ScheduleTx+0x15c>)
 8011850:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011854:	4b16      	ldr	r3, [pc, #88]	@ (80118b0 <ScheduleTx+0x15c>)
 8011856:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 801185a:	4619      	mov	r1, r3
 801185c:	4818      	ldr	r0, [pc, #96]	@ (80118c0 <ScheduleTx+0x16c>)
 801185e:	f00a ff87 	bl	801c770 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8011862:	4817      	ldr	r0, [pc, #92]	@ (80118c0 <ScheduleTx+0x16c>)
 8011864:	f00a fea6 	bl	801c5b4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8011868:	2300      	movs	r3, #0
 801186a:	e01a      	b.n	80118a2 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 801186c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011870:	e017      	b.n	80118a2 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011872:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011876:	e014      	b.n	80118a2 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011878:	f7ff fe9e 	bl	80115b8 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801187c:	f7ff ff02 	bl	8011684 <VerifyTxFrame>
 8011880:	4603      	mov	r3, r0
 8011882:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011886:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801188a:	2b00      	cmp	r3, #0
 801188c:	d002      	beq.n	8011894 <ScheduleTx+0x140>
    {
        return status;
 801188e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011892:	e006      	b.n	80118a2 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011894:	4b06      	ldr	r3, [pc, #24]	@ (80118b0 <ScheduleTx+0x15c>)
 8011896:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 801189a:	4618      	mov	r0, r3
 801189c:	f000 fb74 	bl	8011f88 <SendFrameOnChannel>
 80118a0:	4603      	mov	r3, r0
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3738      	adds	r7, #56	@ 0x38
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	20000d04 	.word	0x20000d04
 80118b0:	200007d0 	.word	0x200007d0
 80118b4:	20000d34 	.word	0x20000d34
 80118b8:	20000c64 	.word	0x20000c64
 80118bc:	20000beb 	.word	0x20000beb
 80118c0:	20000b38 	.word	0x20000b38

080118c4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	4603      	mov	r3, r0
 80118cc:	460a      	mov	r2, r1
 80118ce:	71fb      	strb	r3, [r7, #7]
 80118d0:	4613      	mov	r3, r2
 80118d2:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80118d4:	2312      	movs	r3, #18
 80118d6:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80118d8:	2300      	movs	r3, #0
 80118da:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80118dc:	4b22      	ldr	r3, [pc, #136]	@ (8011968 <SecureFrame+0xa4>)
 80118de:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d002      	beq.n	80118ec <SecureFrame+0x28>
 80118e6:	2b04      	cmp	r3, #4
 80118e8:	d011      	beq.n	801190e <SecureFrame+0x4a>
 80118ea:	e036      	b.n	801195a <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80118ec:	481f      	ldr	r0, [pc, #124]	@ (801196c <SecureFrame+0xa8>)
 80118ee:	f003 fd9d 	bl	801542c <LoRaMacCryptoPrepareJoinRequest>
 80118f2:	4603      	mov	r3, r0
 80118f4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80118f6:	7bfb      	ldrb	r3, [r7, #15]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d001      	beq.n	8011900 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80118fc:	2311      	movs	r3, #17
 80118fe:	e02f      	b.n	8011960 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011900:	4b19      	ldr	r3, [pc, #100]	@ (8011968 <SecureFrame+0xa4>)
 8011902:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011906:	461a      	mov	r2, r3
 8011908:	4b17      	ldr	r3, [pc, #92]	@ (8011968 <SecureFrame+0xa4>)
 801190a:	801a      	strh	r2, [r3, #0]
            break;
 801190c:	e027      	b.n	801195e <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801190e:	f107 0308 	add.w	r3, r7, #8
 8011912:	4618      	mov	r0, r3
 8011914:	f003 fcc4 	bl	80152a0 <LoRaMacCryptoGetFCntUp>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d001      	beq.n	8011922 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801191e:	2312      	movs	r3, #18
 8011920:	e01e      	b.n	8011960 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8011922:	4b11      	ldr	r3, [pc, #68]	@ (8011968 <SecureFrame+0xa4>)
 8011924:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8011928:	2b00      	cmp	r3, #0
 801192a:	d002      	beq.n	8011932 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	3b01      	subs	r3, #1
 8011930:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011932:	68b8      	ldr	r0, [r7, #8]
 8011934:	79ba      	ldrb	r2, [r7, #6]
 8011936:	79f9      	ldrb	r1, [r7, #7]
 8011938:	4b0c      	ldr	r3, [pc, #48]	@ (801196c <SecureFrame+0xa8>)
 801193a:	f003 fe9d 	bl	8015678 <LoRaMacCryptoSecureMessage>
 801193e:	4603      	mov	r3, r0
 8011940:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011942:	7bfb      	ldrb	r3, [r7, #15]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d001      	beq.n	801194c <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011948:	2311      	movs	r3, #17
 801194a:	e009      	b.n	8011960 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801194c:	4b06      	ldr	r3, [pc, #24]	@ (8011968 <SecureFrame+0xa4>)
 801194e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011952:	461a      	mov	r2, r3
 8011954:	4b04      	ldr	r3, [pc, #16]	@ (8011968 <SecureFrame+0xa4>)
 8011956:	801a      	strh	r2, [r3, #0]
            break;
 8011958:	e001      	b.n	801195e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801195a:	2303      	movs	r3, #3
 801195c:	e000      	b.n	8011960 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801195e:	2300      	movs	r3, #0
}
 8011960:	4618      	mov	r0, r3
 8011962:	3710      	adds	r7, #16
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	200007d0 	.word	0x200007d0
 801196c:	200008d8 	.word	0x200008d8

08011970 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011970:	b480      	push	{r7}
 8011972:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011974:	4b09      	ldr	r3, [pc, #36]	@ (801199c <CalculateBackOff+0x2c>)
 8011976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011978:	2b00      	cmp	r3, #0
 801197a:	d10a      	bne.n	8011992 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 801197c:	4b07      	ldr	r3, [pc, #28]	@ (801199c <CalculateBackOff+0x2c>)
 801197e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8011982:	3b01      	subs	r3, #1
 8011984:	4a06      	ldr	r2, [pc, #24]	@ (80119a0 <CalculateBackOff+0x30>)
 8011986:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 801198a:	fb02 f303 	mul.w	r3, r2, r3
 801198e:	4a03      	ldr	r2, [pc, #12]	@ (801199c <CalculateBackOff+0x2c>)
 8011990:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8011992:	bf00      	nop
 8011994:	46bd      	mov	sp, r7
 8011996:	bc80      	pop	{r7}
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	20000d04 	.word	0x20000d04
 80119a0:	200007d0 	.word	0x200007d0

080119a4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	4603      	mov	r3, r0
 80119ac:	7139      	strb	r1, [r7, #4]
 80119ae:	71fb      	strb	r3, [r7, #7]
 80119b0:	4613      	mov	r3, r2
 80119b2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80119b4:	79fb      	ldrb	r3, [r7, #7]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d002      	beq.n	80119c0 <RemoveMacCommands+0x1c>
 80119ba:	79fb      	ldrb	r3, [r7, #7]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d10d      	bne.n	80119dc <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80119c0:	79bb      	ldrb	r3, [r7, #6]
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d108      	bne.n	80119d8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80119c6:	793b      	ldrb	r3, [r7, #4]
 80119c8:	f003 0320 	and.w	r3, r3, #32
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d004      	beq.n	80119dc <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80119d2:	f002 fe09 	bl	80145e8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80119d6:	e001      	b.n	80119dc <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80119d8:	f002 fe06 	bl	80145e8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80119dc:	bf00      	nop
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80119e4:	b5b0      	push	{r4, r5, r7, lr}
 80119e6:	b092      	sub	sp, #72	@ 0x48
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	4603      	mov	r3, r0
 80119ec:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80119ee:	79fb      	ldrb	r3, [r7, #7]
 80119f0:	f083 0301 	eor.w	r3, r3, #1
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d003      	beq.n	8011a02 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80119fa:	4b88      	ldr	r3, [pc, #544]	@ (8011c1c <ResetMacParameters+0x238>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011a02:	4b86      	ldr	r3, [pc, #536]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a04:	2200      	movs	r2, #0
 8011a06:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011a08:	4b85      	ldr	r3, [pc, #532]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8011a10:	4b83      	ldr	r3, [pc, #524]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011a12:	2200      	movs	r2, #0
 8011a14:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8011a18:	4b81      	ldr	r3, [pc, #516]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011a20:	4b7e      	ldr	r3, [pc, #504]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a22:	2200      	movs	r2, #0
 8011a24:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011a28:	4b7c      	ldr	r3, [pc, #496]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011a30:	4b7a      	ldr	r3, [pc, #488]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a32:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8011a36:	4b79      	ldr	r3, [pc, #484]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011a3c:	4b77      	ldr	r3, [pc, #476]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a3e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8011a42:	4b76      	ldr	r3, [pc, #472]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011a48:	4b74      	ldr	r3, [pc, #464]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a4a:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8011a4e:	4b73      	ldr	r3, [pc, #460]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a50:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011a54:	4b71      	ldr	r3, [pc, #452]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a56:	4a71      	ldr	r2, [pc, #452]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a58:	336c      	adds	r3, #108	@ 0x6c
 8011a5a:	32b4      	adds	r2, #180	@ 0xb4
 8011a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a60:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011a64:	4b6d      	ldr	r3, [pc, #436]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a66:	4a6d      	ldr	r2, [pc, #436]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a68:	3374      	adds	r3, #116	@ 0x74
 8011a6a:	32bc      	adds	r2, #188	@ 0xbc
 8011a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a70:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011a74:	4b69      	ldr	r3, [pc, #420]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a76:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 8011a7a:	4b68      	ldr	r3, [pc, #416]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a7c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8011a80:	4b66      	ldr	r3, [pc, #408]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a82:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 8011a86:	4b65      	ldr	r3, [pc, #404]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a88:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011a8c:	4b63      	ldr	r3, [pc, #396]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011a92:	4a62      	ldr	r2, [pc, #392]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011a98:	4b60      	ldr	r3, [pc, #384]	@ (8011c1c <ResetMacParameters+0x238>)
 8011a9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8011a9e:	4a5f      	ldr	r2, [pc, #380]	@ (8011c1c <ResetMacParameters+0x238>)
 8011aa0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8011aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8011c1c <ResetMacParameters+0x238>)
 8011aa6:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8011aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8011c1c <ResetMacParameters+0x238>)
 8011aac:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8011ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8011c1c <ResetMacParameters+0x238>)
 8011ab2:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8011ab6:	4b59      	ldr	r3, [pc, #356]	@ (8011c1c <ResetMacParameters+0x238>)
 8011ab8:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 8011abc:	4b58      	ldr	r3, [pc, #352]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011abe:	2200      	movs	r2, #0
 8011ac0:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8011ac4:	4b55      	ldr	r3, [pc, #340]	@ (8011c1c <ResetMacParameters+0x238>)
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8011acc:	4b53      	ldr	r3, [pc, #332]	@ (8011c1c <ResetMacParameters+0x238>)
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8011ad4:	4b51      	ldr	r3, [pc, #324]	@ (8011c1c <ResetMacParameters+0x238>)
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8011adc:	4b4f      	ldr	r3, [pc, #316]	@ (8011c1c <ResetMacParameters+0x238>)
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8011ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8011c1c <ResetMacParameters+0x238>)
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8011aec:	4b4b      	ldr	r3, [pc, #300]	@ (8011c1c <ResetMacParameters+0x238>)
 8011aee:	2200      	movs	r2, #0
 8011af0:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8011af4:	4b49      	ldr	r3, [pc, #292]	@ (8011c1c <ResetMacParameters+0x238>)
 8011af6:	2200      	movs	r2, #0
 8011af8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8011afc:	4b47      	ldr	r3, [pc, #284]	@ (8011c1c <ResetMacParameters+0x238>)
 8011afe:	2200      	movs	r2, #0
 8011b00:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8011b04:	4b45      	ldr	r3, [pc, #276]	@ (8011c1c <ResetMacParameters+0x238>)
 8011b06:	2200      	movs	r2, #0
 8011b08:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8011b0c:	4b43      	ldr	r3, [pc, #268]	@ (8011c1c <ResetMacParameters+0x238>)
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8011b14:	4b41      	ldr	r3, [pc, #260]	@ (8011c1c <ResetMacParameters+0x238>)
 8011b16:	2200      	movs	r2, #0
 8011b18:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011b20:	4b40      	ldr	r3, [pc, #256]	@ (8011c24 <ResetMacParameters+0x240>)
 8011b22:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011b24:	4b40      	ldr	r3, [pc, #256]	@ (8011c28 <ResetMacParameters+0x244>)
 8011b26:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8011b28:	4b40      	ldr	r3, [pc, #256]	@ (8011c2c <ResetMacParameters+0x248>)
 8011b2a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8011c1c <ResetMacParameters+0x238>)
 8011b2e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011b32:	f107 020c 	add.w	r2, r7, #12
 8011b36:	4611      	mov	r1, r2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f004 fa54 	bl	8015fe6 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011b3e:	4b38      	ldr	r3, [pc, #224]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b40:	2200      	movs	r2, #0
 8011b42:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011b46:	4b36      	ldr	r3, [pc, #216]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b48:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8011b4c:	4b34      	ldr	r3, [pc, #208]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b4e:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011b52:	4b32      	ldr	r3, [pc, #200]	@ (8011c1c <ResetMacParameters+0x238>)
 8011b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b56:	4a32      	ldr	r2, [pc, #200]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b58:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8011c1c <ResetMacParameters+0x238>)
 8011b5e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8011b62:	4b2f      	ldr	r3, [pc, #188]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b64:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011b68:	4b2c      	ldr	r3, [pc, #176]	@ (8011c1c <ResetMacParameters+0x238>)
 8011b6a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b70:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011b74:	4b2a      	ldr	r3, [pc, #168]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b76:	2200      	movs	r2, #0
 8011b78:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011b7c:	4b28      	ldr	r3, [pc, #160]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b7e:	2201      	movs	r2, #1
 8011b80:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011b84:	4b25      	ldr	r3, [pc, #148]	@ (8011c1c <ResetMacParameters+0x238>)
 8011b86:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011b8a:	4b25      	ldr	r3, [pc, #148]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b8c:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011b90:	4a23      	ldr	r2, [pc, #140]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b92:	4b23      	ldr	r3, [pc, #140]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011b94:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8011b98:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8011b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ba0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011ba4:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011baa:	2201      	movs	r2, #1
 8011bac:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011bb2:	2202      	movs	r2, #2
 8011bb4:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 8011bc0:	4b17      	ldr	r3, [pc, #92]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011bc2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d009      	beq.n	8011bde <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011bca:	4b15      	ldr	r3, [pc, #84]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011bcc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011bd4:	4b12      	ldr	r3, [pc, #72]	@ (8011c20 <ResetMacParameters+0x23c>)
 8011bd6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011bda:	695b      	ldr	r3, [r3, #20]
 8011bdc:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011bde:	4b14      	ldr	r3, [pc, #80]	@ (8011c30 <ResetMacParameters+0x24c>)
 8011be0:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011be2:	4b14      	ldr	r3, [pc, #80]	@ (8011c34 <ResetMacParameters+0x250>)
 8011be4:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011be6:	4b14      	ldr	r3, [pc, #80]	@ (8011c38 <ResetMacParameters+0x254>)
 8011be8:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011bea:	4b14      	ldr	r3, [pc, #80]	@ (8011c3c <ResetMacParameters+0x258>)
 8011bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011bee:	4b14      	ldr	r3, [pc, #80]	@ (8011c40 <ResetMacParameters+0x25c>)
 8011bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011bf2:	4b14      	ldr	r3, [pc, #80]	@ (8011c44 <ResetMacParameters+0x260>)
 8011bf4:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011bf6:	4b14      	ldr	r3, [pc, #80]	@ (8011c48 <ResetMacParameters+0x264>)
 8011bf8:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011bfa:	4b14      	ldr	r3, [pc, #80]	@ (8011c4c <ResetMacParameters+0x268>)
 8011bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8011bfe:	4b14      	ldr	r3, [pc, #80]	@ (8011c50 <ResetMacParameters+0x26c>)
 8011c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011c02:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8011c06:	f107 031c 	add.w	r3, r7, #28
 8011c0a:	4a12      	ldr	r2, [pc, #72]	@ (8011c54 <ResetMacParameters+0x270>)
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f002 f9f8 	bl	8014002 <LoRaMacClassBInit>
}
 8011c12:	bf00      	nop
 8011c14:	3748      	adds	r7, #72	@ 0x48
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bdb0      	pop	{r4, r5, r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	20000d04 	.word	0x20000d04
 8011c20:	200007d0 	.word	0x200007d0
 8011c24:	20000f28 	.word	0x20000f28
 8011c28:	20000f2c 	.word	0x20000f2c
 8011c2c:	2000187c 	.word	0x2000187c
 8011c30:	20000c38 	.word	0x20000c38
 8011c34:	20000bf0 	.word	0x20000bf0
 8011c38:	20000c24 	.word	0x20000c24
 8011c3c:	20000c61 	.word	0x20000c61
 8011c40:	20000de8 	.word	0x20000de8
 8011c44:	20000d4c 	.word	0x20000d4c
 8011c48:	20000d50 	.word	0x20000d50
 8011c4c:	20000dec 	.word	0x20000dec
 8011c50:	20000e34 	.word	0x20000e34
 8011c54:	200012a8 	.word	0x200012a8

08011c58 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f00a fd14 	bl	801c690 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011c68:	4b11      	ldr	r3, [pc, #68]	@ (8011cb0 <RxWindowSetup+0x58>)
 8011c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c6c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011c6e:	4b11      	ldr	r3, [pc, #68]	@ (8011cb4 <RxWindowSetup+0x5c>)
 8011c70:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011c74:	4a10      	ldr	r2, [pc, #64]	@ (8011cb8 <RxWindowSetup+0x60>)
 8011c76:	6839      	ldr	r1, [r7, #0]
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f004 fa1c 	bl	80160b6 <RegionRxConfig>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d010      	beq.n	8011ca6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011c84:	4b0d      	ldr	r3, [pc, #52]	@ (8011cbc <RxWindowSetup+0x64>)
 8011c86:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8011c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8011cbc <RxWindowSetup+0x64>)
 8011c8c:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011c90:	4b07      	ldr	r3, [pc, #28]	@ (8011cb0 <RxWindowSetup+0x58>)
 8011c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c94:	4a07      	ldr	r2, [pc, #28]	@ (8011cb4 <RxWindowSetup+0x5c>)
 8011c96:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8011c98:	4610      	mov	r0, r2
 8011c9a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	7cda      	ldrb	r2, [r3, #19]
 8011ca0:	4b06      	ldr	r3, [pc, #24]	@ (8011cbc <RxWindowSetup+0x64>)
 8011ca2:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8011ca6:	bf00      	nop
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	0801df14 	.word	0x0801df14
 8011cb4:	20000d04 	.word	0x20000d04
 8011cb8:	20000bf4 	.word	0x20000bf4
 8011cbc:	200007d0 	.word	0x200007d0

08011cc0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011cc0:	b590      	push	{r4, r7, lr}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8011d40 <OpenContinuousRxCWindow+0x80>)
 8011cc8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8011d40 <OpenContinuousRxCWindow+0x80>)
 8011cce:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011cd2:	b259      	sxtb	r1, r3
 8011cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8011d40 <OpenContinuousRxCWindow+0x80>)
 8011cd6:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011cda:	4b19      	ldr	r3, [pc, #100]	@ (8011d40 <OpenContinuousRxCWindow+0x80>)
 8011cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011cde:	4c19      	ldr	r4, [pc, #100]	@ (8011d44 <OpenContinuousRxCWindow+0x84>)
 8011ce0:	9400      	str	r4, [sp, #0]
 8011ce2:	f004 f9ce 	bl	8016082 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011ce6:	4b18      	ldr	r3, [pc, #96]	@ (8011d48 <OpenContinuousRxCWindow+0x88>)
 8011ce8:	2202      	movs	r2, #2
 8011cea:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011cee:	4b14      	ldr	r3, [pc, #80]	@ (8011d40 <OpenContinuousRxCWindow+0x80>)
 8011cf0:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011cf4:	4b14      	ldr	r3, [pc, #80]	@ (8011d48 <OpenContinuousRxCWindow+0x88>)
 8011cf6:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011cfa:	4b13      	ldr	r3, [pc, #76]	@ (8011d48 <OpenContinuousRxCWindow+0x88>)
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011d02:	4b0f      	ldr	r3, [pc, #60]	@ (8011d40 <OpenContinuousRxCWindow+0x80>)
 8011d04:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d08:	4a10      	ldr	r2, [pc, #64]	@ (8011d4c <OpenContinuousRxCWindow+0x8c>)
 8011d0a:	490e      	ldr	r1, [pc, #56]	@ (8011d44 <OpenContinuousRxCWindow+0x84>)
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f004 f9d2 	bl	80160b6 <RegionRxConfig>
 8011d12:	4603      	mov	r3, r0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d00f      	beq.n	8011d38 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011d18:	4b0b      	ldr	r3, [pc, #44]	@ (8011d48 <OpenContinuousRxCWindow+0x88>)
 8011d1a:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8011d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8011d48 <OpenContinuousRxCWindow+0x88>)
 8011d20:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8011d24:	4b0a      	ldr	r3, [pc, #40]	@ (8011d50 <OpenContinuousRxCWindow+0x90>)
 8011d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d28:	2000      	movs	r0, #0
 8011d2a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011d2c:	4b06      	ldr	r3, [pc, #24]	@ (8011d48 <OpenContinuousRxCWindow+0x88>)
 8011d2e:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8011d32:	4b05      	ldr	r3, [pc, #20]	@ (8011d48 <OpenContinuousRxCWindow+0x88>)
 8011d34:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8011d38:	bf00      	nop
 8011d3a:	3704      	adds	r7, #4
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd90      	pop	{r4, r7, pc}
 8011d40:	20000d04 	.word	0x20000d04
 8011d44:	20000bb8 	.word	0x20000bb8
 8011d48:	200007d0 	.word	0x200007d0
 8011d4c:	20000bf4 	.word	0x20000bf4
 8011d50:	0801df14 	.word	0x0801df14

08011d54 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b088      	sub	sp, #32
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	60b9      	str	r1, [r7, #8]
 8011d5e:	603b      	str	r3, [r7, #0]
 8011d60:	4613      	mov	r3, r2
 8011d62:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8011d64:	4b81      	ldr	r3, [pc, #516]	@ (8011f6c <PrepareFrame+0x218>)
 8011d66:	2200      	movs	r2, #0
 8011d68:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011d6a:	4b80      	ldr	r3, [pc, #512]	@ (8011f6c <PrepareFrame+0x218>)
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 8011d72:	2300      	movs	r3, #0
 8011d74:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011d76:	2300      	movs	r3, #0
 8011d78:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d101      	bne.n	8011d88 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011d84:	2300      	movs	r3, #0
 8011d86:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011d88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	6839      	ldr	r1, [r7, #0]
 8011d8e:	4878      	ldr	r0, [pc, #480]	@ (8011f70 <PrepareFrame+0x21c>)
 8011d90:	f006 fb2b 	bl	80183ea <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011d94:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011d96:	b2da      	uxtb	r2, r3
 8011d98:	4b74      	ldr	r3, [pc, #464]	@ (8011f6c <PrepareFrame+0x218>)
 8011d9a:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	781a      	ldrb	r2, [r3, #0]
 8011da2:	4b72      	ldr	r3, [pc, #456]	@ (8011f6c <PrepareFrame+0x218>)
 8011da4:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	2b07      	cmp	r3, #7
 8011db2:	f000 80b9 	beq.w	8011f28 <PrepareFrame+0x1d4>
 8011db6:	2b07      	cmp	r3, #7
 8011db8:	f300 80ce 	bgt.w	8011f58 <PrepareFrame+0x204>
 8011dbc:	2b02      	cmp	r3, #2
 8011dbe:	d006      	beq.n	8011dce <PrepareFrame+0x7a>
 8011dc0:	2b04      	cmp	r3, #4
 8011dc2:	f040 80c9 	bne.w	8011f58 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011dc6:	4b69      	ldr	r3, [pc, #420]	@ (8011f6c <PrepareFrame+0x218>)
 8011dc8:	2201      	movs	r2, #1
 8011dca:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011dce:	4b67      	ldr	r3, [pc, #412]	@ (8011f6c <PrepareFrame+0x218>)
 8011dd0:	2204      	movs	r2, #4
 8011dd2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011dd6:	4b65      	ldr	r3, [pc, #404]	@ (8011f6c <PrepareFrame+0x218>)
 8011dd8:	4a66      	ldr	r2, [pc, #408]	@ (8011f74 <PrepareFrame+0x220>)
 8011dda:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011dde:	4b63      	ldr	r3, [pc, #396]	@ (8011f6c <PrepareFrame+0x218>)
 8011de0:	22ff      	movs	r2, #255	@ 0xff
 8011de2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	781a      	ldrb	r2, [r3, #0]
 8011dea:	4b60      	ldr	r3, [pc, #384]	@ (8011f6c <PrepareFrame+0x218>)
 8011dec:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011df0:	4a5e      	ldr	r2, [pc, #376]	@ (8011f6c <PrepareFrame+0x218>)
 8011df2:	79fb      	ldrb	r3, [r7, #7]
 8011df4:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011df8:	4b5f      	ldr	r3, [pc, #380]	@ (8011f78 <PrepareFrame+0x224>)
 8011dfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011dfe:	4a5b      	ldr	r2, [pc, #364]	@ (8011f6c <PrepareFrame+0x218>)
 8011e00:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	781a      	ldrb	r2, [r3, #0]
 8011e08:	4b58      	ldr	r3, [pc, #352]	@ (8011f6c <PrepareFrame+0x218>)
 8011e0a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011e0e:	4b57      	ldr	r3, [pc, #348]	@ (8011f6c <PrepareFrame+0x218>)
 8011e10:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8011e14:	4b55      	ldr	r3, [pc, #340]	@ (8011f6c <PrepareFrame+0x218>)
 8011e16:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011e1a:	4b54      	ldr	r3, [pc, #336]	@ (8011f6c <PrepareFrame+0x218>)
 8011e1c:	4a54      	ldr	r2, [pc, #336]	@ (8011f70 <PrepareFrame+0x21c>)
 8011e1e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011e22:	f107 0318 	add.w	r3, r7, #24
 8011e26:	4618      	mov	r0, r3
 8011e28:	f003 fa3a 	bl	80152a0 <LoRaMacCryptoGetFCntUp>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d001      	beq.n	8011e36 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011e32:	2312      	movs	r3, #18
 8011e34:	e096      	b.n	8011f64 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011e36:	69bb      	ldr	r3, [r7, #24]
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8011f6c <PrepareFrame+0x218>)
 8011e3c:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8011e40:	4b4a      	ldr	r3, [pc, #296]	@ (8011f6c <PrepareFrame+0x218>)
 8011e42:	2200      	movs	r2, #0
 8011e44:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011e48:	4b48      	ldr	r3, [pc, #288]	@ (8011f6c <PrepareFrame+0x218>)
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	4a46      	ldr	r2, [pc, #280]	@ (8011f6c <PrepareFrame+0x218>)
 8011e54:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011e58:	f107 0314 	add.w	r3, r7, #20
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f002 fbef 	bl	8014640 <LoRaMacCommandsGetSizeSerializedCmds>
 8011e62:	4603      	mov	r3, r0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d001      	beq.n	8011e6c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e68:	2313      	movs	r3, #19
 8011e6a:	e07b      	b.n	8011f64 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d074      	beq.n	8011f5c <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011e72:	4b41      	ldr	r3, [pc, #260]	@ (8011f78 <PrepareFrame+0x224>)
 8011e74:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7fe fd13 	bl	80108a4 <GetMaxAppPayloadWithoutFOptsLength>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011e82:	4b3a      	ldr	r3, [pc, #232]	@ (8011f6c <PrepareFrame+0x218>)
 8011e84:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d01d      	beq.n	8011ec8 <PrepareFrame+0x174>
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	2b0f      	cmp	r3, #15
 8011e90:	d81a      	bhi.n	8011ec8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011e92:	f107 0314 	add.w	r3, r7, #20
 8011e96:	4a39      	ldr	r2, [pc, #228]	@ (8011f7c <PrepareFrame+0x228>)
 8011e98:	4619      	mov	r1, r3
 8011e9a:	200f      	movs	r0, #15
 8011e9c:	f002 fbe6 	bl	801466c <LoRaMacCommandsSerializeCmds>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d001      	beq.n	8011eaa <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ea6:	2313      	movs	r3, #19
 8011ea8:	e05c      	b.n	8011f64 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	f003 030f 	and.w	r3, r3, #15
 8011eb0:	b2d9      	uxtb	r1, r3
 8011eb2:	68ba      	ldr	r2, [r7, #8]
 8011eb4:	7813      	ldrb	r3, [r2, #0]
 8011eb6:	f361 0303 	bfi	r3, r1, #0, #4
 8011eba:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	781a      	ldrb	r2, [r3, #0]
 8011ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8011f6c <PrepareFrame+0x218>)
 8011ec2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011ec6:	e049      	b.n	8011f5c <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011ec8:	4b28      	ldr	r3, [pc, #160]	@ (8011f6c <PrepareFrame+0x218>)
 8011eca:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d010      	beq.n	8011ef4 <PrepareFrame+0x1a0>
 8011ed2:	697b      	ldr	r3, [r7, #20]
 8011ed4:	2b0f      	cmp	r3, #15
 8011ed6:	d90d      	bls.n	8011ef4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011ed8:	7ffb      	ldrb	r3, [r7, #31]
 8011eda:	f107 0114 	add.w	r1, r7, #20
 8011ede:	4a28      	ldr	r2, [pc, #160]	@ (8011f80 <PrepareFrame+0x22c>)
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f002 fbc3 	bl	801466c <LoRaMacCommandsSerializeCmds>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d001      	beq.n	8011ef0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011eec:	2313      	movs	r3, #19
 8011eee:	e039      	b.n	8011f64 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011ef0:	230a      	movs	r3, #10
 8011ef2:	e037      	b.n	8011f64 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011ef4:	7ffb      	ldrb	r3, [r7, #31]
 8011ef6:	f107 0114 	add.w	r1, r7, #20
 8011efa:	4a21      	ldr	r2, [pc, #132]	@ (8011f80 <PrepareFrame+0x22c>)
 8011efc:	4618      	mov	r0, r3
 8011efe:	f002 fbb5 	bl	801466c <LoRaMacCommandsSerializeCmds>
 8011f02:	4603      	mov	r3, r0
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d001      	beq.n	8011f0c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011f08:	2313      	movs	r3, #19
 8011f0a:	e02b      	b.n	8011f64 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011f0c:	4b17      	ldr	r3, [pc, #92]	@ (8011f6c <PrepareFrame+0x218>)
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011f14:	4b15      	ldr	r3, [pc, #84]	@ (8011f6c <PrepareFrame+0x218>)
 8011f16:	4a1a      	ldr	r2, [pc, #104]	@ (8011f80 <PrepareFrame+0x22c>)
 8011f18:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	b2da      	uxtb	r2, r3
 8011f20:	4b12      	ldr	r3, [pc, #72]	@ (8011f6c <PrepareFrame+0x218>)
 8011f22:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8011f26:	e019      	b.n	8011f5c <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d018      	beq.n	8011f60 <PrepareFrame+0x20c>
 8011f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8011f6c <PrepareFrame+0x218>)
 8011f30:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d013      	beq.n	8011f60 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011f38:	4812      	ldr	r0, [pc, #72]	@ (8011f84 <PrepareFrame+0x230>)
 8011f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8011f6c <PrepareFrame+0x218>)
 8011f3c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011f40:	461a      	mov	r2, r3
 8011f42:	6839      	ldr	r1, [r7, #0]
 8011f44:	f006 fa51 	bl	80183ea <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011f48:	4b08      	ldr	r3, [pc, #32]	@ (8011f6c <PrepareFrame+0x218>)
 8011f4a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011f4e:	3301      	adds	r3, #1
 8011f50:	b29a      	uxth	r2, r3
 8011f52:	4b06      	ldr	r3, [pc, #24]	@ (8011f6c <PrepareFrame+0x218>)
 8011f54:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011f56:	e003      	b.n	8011f60 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011f58:	2302      	movs	r3, #2
 8011f5a:	e003      	b.n	8011f64 <PrepareFrame+0x210>
            break;
 8011f5c:	bf00      	nop
 8011f5e:	e000      	b.n	8011f62 <PrepareFrame+0x20e>
            break;
 8011f60:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8011f62:	2300      	movs	r3, #0
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3720      	adds	r7, #32
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	200007d0 	.word	0x200007d0
 8011f70:	20000908 	.word	0x20000908
 8011f74:	200007d2 	.word	0x200007d2
 8011f78:	20000d04 	.word	0x20000d04
 8011f7c:	200008e8 	.word	0x200008e8
 8011f80:	20000c84 	.word	0x20000c84
 8011f84:	200007d3 	.word	0x200007d3

08011f88 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b08a      	sub	sp, #40	@ 0x28
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	4603      	mov	r3, r0
 8011f90:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f92:	2303      	movs	r3, #3
 8011f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011f9c:	79fb      	ldrb	r3, [r7, #7]
 8011f9e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80120d0 <SendFrameOnChannel+0x148>)
 8011fa2:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011fa6:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011fa8:	4b49      	ldr	r3, [pc, #292]	@ (80120d0 <SendFrameOnChannel+0x148>)
 8011faa:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011fae:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011fb0:	4b47      	ldr	r3, [pc, #284]	@ (80120d0 <SendFrameOnChannel+0x148>)
 8011fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011fb6:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011fb8:	4b45      	ldr	r3, [pc, #276]	@ (80120d0 <SendFrameOnChannel+0x148>)
 8011fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011fbe:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011fc0:	4b44      	ldr	r3, [pc, #272]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8011fc2:	881b      	ldrh	r3, [r3, #0]
 8011fc4:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011fc6:	4b42      	ldr	r3, [pc, #264]	@ (80120d0 <SendFrameOnChannel+0x148>)
 8011fc8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011fcc:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011fce:	4b40      	ldr	r3, [pc, #256]	@ (80120d0 <SendFrameOnChannel+0x148>)
 8011fd0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011fd4:	f107 020f 	add.w	r2, r7, #15
 8011fd8:	f107 0110 	add.w	r1, r7, #16
 8011fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80120d8 <SendFrameOnChannel+0x150>)
 8011fde:	f004 f87f 	bl	80160e0 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011fea:	4b39      	ldr	r3, [pc, #228]	@ (80120d0 <SendFrameOnChannel+0x148>)
 8011fec:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011ff0:	b2da      	uxtb	r2, r3
 8011ff2:	4b38      	ldr	r3, [pc, #224]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8011ff4:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8011ff8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011ffc:	4b35      	ldr	r3, [pc, #212]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8011ffe:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8012002:	79fb      	ldrb	r3, [r7, #7]
 8012004:	4a33      	ldr	r2, [pc, #204]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8012006:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801200a:	4b32      	ldr	r3, [pc, #200]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 801200c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012010:	4a30      	ldr	r2, [pc, #192]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8012012:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012016:	4b2f      	ldr	r3, [pc, #188]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8012018:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 801201c:	4a2d      	ldr	r2, [pc, #180]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 801201e:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012022:	f002 f85a 	bl	80140da <LoRaMacClassBIsBeaconModeActive>
 8012026:	4603      	mov	r3, r0
 8012028:	2b00      	cmp	r3, #0
 801202a:	d00b      	beq.n	8012044 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801202c:	4b29      	ldr	r3, [pc, #164]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 801202e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012032:	4618      	mov	r0, r3
 8012034:	f002 f8bc 	bl	80141b0 <LoRaMacClassBIsUplinkCollision>
 8012038:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801203a:	6a3b      	ldr	r3, [r7, #32]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d001      	beq.n	8012044 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012040:	2310      	movs	r3, #16
 8012042:	e040      	b.n	80120c6 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012044:	4b22      	ldr	r3, [pc, #136]	@ (80120d0 <SendFrameOnChannel+0x148>)
 8012046:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801204a:	2b01      	cmp	r3, #1
 801204c:	d101      	bne.n	8012052 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801204e:	f002 f8b9 	bl	80141c4 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012052:	f002 f853 	bl	80140fc <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8012056:	4b1e      	ldr	r3, [pc, #120]	@ (80120d0 <SendFrameOnChannel+0x148>)
 8012058:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801205c:	b2db      	uxtb	r3, r3
 801205e:	4a1d      	ldr	r2, [pc, #116]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8012060:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8012064:	4611      	mov	r1, r2
 8012066:	4618      	mov	r0, r3
 8012068:	f7ff fc2c 	bl	80118c4 <SecureFrame>
 801206c:	4603      	mov	r3, r0
 801206e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8012072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012076:	2b00      	cmp	r3, #0
 8012078:	d002      	beq.n	8012080 <SendFrameOnChannel+0xf8>
    {
        return status;
 801207a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801207e:	e022      	b.n	80120c6 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012080:	4b14      	ldr	r3, [pc, #80]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8012082:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012086:	f043 0302 	orr.w	r3, r3, #2
 801208a:	4a12      	ldr	r2, [pc, #72]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 801208c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8012090:	4b10      	ldr	r3, [pc, #64]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 8012092:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012096:	3301      	adds	r3, #1
 8012098:	b2da      	uxtb	r2, r3
 801209a:	4b0e      	ldr	r3, [pc, #56]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 801209c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80120a0:	4b0c      	ldr	r3, [pc, #48]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 80120a2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80120a6:	4b0b      	ldr	r3, [pc, #44]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 80120a8:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80120ac:	4b09      	ldr	r3, [pc, #36]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 80120ae:	2200      	movs	r2, #0
 80120b0:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80120b4:	4b09      	ldr	r3, [pc, #36]	@ (80120dc <SendFrameOnChannel+0x154>)
 80120b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120b8:	4a06      	ldr	r2, [pc, #24]	@ (80120d4 <SendFrameOnChannel+0x14c>)
 80120ba:	8812      	ldrh	r2, [r2, #0]
 80120bc:	b2d2      	uxtb	r2, r2
 80120be:	4611      	mov	r1, r2
 80120c0:	4807      	ldr	r0, [pc, #28]	@ (80120e0 <SendFrameOnChannel+0x158>)
 80120c2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80120c4:	2300      	movs	r3, #0
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3728      	adds	r7, #40	@ 0x28
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}
 80120ce:	bf00      	nop
 80120d0:	20000d04 	.word	0x20000d04
 80120d4:	200007d0 	.word	0x200007d0
 80120d8:	20000bec 	.word	0x20000bec
 80120dc:	0801df14 	.word	0x0801df14
 80120e0:	200007d2 	.word	0x200007d2

080120e4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	4603      	mov	r3, r0
 80120ec:	6039      	str	r1, [r7, #0]
 80120ee:	80fb      	strh	r3, [r7, #6]
 80120f0:	4613      	mov	r3, r2
 80120f2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80120f4:	4b09      	ldr	r3, [pc, #36]	@ (801211c <SetTxContinuousWave+0x38>)
 80120f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120f8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80120fc:	88fa      	ldrh	r2, [r7, #6]
 80120fe:	6838      	ldr	r0, [r7, #0]
 8012100:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012102:	4b07      	ldr	r3, [pc, #28]	@ (8012120 <SetTxContinuousWave+0x3c>)
 8012104:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012108:	f043 0302 	orr.w	r3, r3, #2
 801210c:	4a04      	ldr	r2, [pc, #16]	@ (8012120 <SetTxContinuousWave+0x3c>)
 801210e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012112:	2300      	movs	r3, #0
}
 8012114:	4618      	mov	r0, r3
 8012116:	3708      	adds	r7, #8
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}
 801211c:	0801df14 	.word	0x0801df14
 8012120:	200007d0 	.word	0x200007d0

08012124 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 801212a:	2300      	movs	r3, #0
 801212c:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801212e:	4b49      	ldr	r3, [pc, #292]	@ (8012254 <RestoreNvmData+0x130>)
 8012130:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012134:	2b01      	cmp	r3, #1
 8012136:	d001      	beq.n	801213c <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8012138:	2301      	movs	r3, #1
 801213a:	e087      	b.n	801224c <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 801213c:	2124      	movs	r1, #36	@ 0x24
 801213e:	4846      	ldr	r0, [pc, #280]	@ (8012258 <RestoreNvmData+0x134>)
 8012140:	f006 f9a8 	bl	8018494 <Crc32>
 8012144:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8012146:	4b44      	ldr	r3, [pc, #272]	@ (8012258 <RestoreNvmData+0x134>)
 8012148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	429a      	cmp	r2, r3
 801214e:	d001      	beq.n	8012154 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012150:	2317      	movs	r3, #23
 8012152:	e07b      	b.n	801224c <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012154:	211c      	movs	r1, #28
 8012156:	4841      	ldr	r0, [pc, #260]	@ (801225c <RestoreNvmData+0x138>)
 8012158:	f006 f99c 	bl	8018494 <Crc32>
 801215c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801215e:	4b3e      	ldr	r3, [pc, #248]	@ (8012258 <RestoreNvmData+0x134>)
 8012160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012162:	687a      	ldr	r2, [r7, #4]
 8012164:	429a      	cmp	r2, r3
 8012166:	d001      	beq.n	801216c <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012168:	2317      	movs	r3, #23
 801216a:	e06f      	b.n	801224c <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 801216c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012170:	483b      	ldr	r0, [pc, #236]	@ (8012260 <RestoreNvmData+0x13c>)
 8012172:	f006 f98f 	bl	8018494 <Crc32>
 8012176:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8012178:	4b37      	ldr	r3, [pc, #220]	@ (8012258 <RestoreNvmData+0x134>)
 801217a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	429a      	cmp	r2, r3
 8012182:	d001      	beq.n	8012188 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012184:	2317      	movs	r3, #23
 8012186:	e061      	b.n	801224c <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8012188:	21d4      	movs	r1, #212	@ 0xd4
 801218a:	4836      	ldr	r0, [pc, #216]	@ (8012264 <RestoreNvmData+0x140>)
 801218c:	f006 f982 	bl	8018494 <Crc32>
 8012190:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8012192:	4b31      	ldr	r3, [pc, #196]	@ (8012258 <RestoreNvmData+0x134>)
 8012194:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	429a      	cmp	r2, r3
 801219c:	d001      	beq.n	80121a2 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801219e:	2317      	movs	r3, #23
 80121a0:	e054      	b.n	801224c <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80121a2:	2100      	movs	r1, #0
 80121a4:	4830      	ldr	r0, [pc, #192]	@ (8012268 <RestoreNvmData+0x144>)
 80121a6:	f006 f975 	bl	8018494 <Crc32>
 80121aa:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80121ac:	4b2a      	ldr	r3, [pc, #168]	@ (8012258 <RestoreNvmData+0x134>)
 80121ae:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d001      	beq.n	80121bc <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80121b8:	2317      	movs	r3, #23
 80121ba:	e047      	b.n	801224c <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 80121bc:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80121c0:	482a      	ldr	r0, [pc, #168]	@ (801226c <RestoreNvmData+0x148>)
 80121c2:	f006 f967 	bl	8018494 <Crc32>
 80121c6:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 80121c8:	4b23      	ldr	r3, [pc, #140]	@ (8012258 <RestoreNvmData+0x134>)
 80121ca:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 80121ce:	687a      	ldr	r2, [r7, #4]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d001      	beq.n	80121d8 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80121d4:	2317      	movs	r3, #23
 80121d6:	e039      	b.n	801224c <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80121d8:	2114      	movs	r1, #20
 80121da:	4825      	ldr	r0, [pc, #148]	@ (8012270 <RestoreNvmData+0x14c>)
 80121dc:	f006 f95a 	bl	8018494 <Crc32>
 80121e0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80121e2:	4b1d      	ldr	r3, [pc, #116]	@ (8012258 <RestoreNvmData+0x134>)
 80121e4:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 80121e8:	687a      	ldr	r2, [r7, #4]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d001      	beq.n	80121f2 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80121ee:	2317      	movs	r3, #23
 80121f0:	e02c      	b.n	801224c <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80121f2:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 80121f6:	4918      	ldr	r1, [pc, #96]	@ (8012258 <RestoreNvmData+0x134>)
 80121f8:	481e      	ldr	r0, [pc, #120]	@ (8012274 <RestoreNvmData+0x150>)
 80121fa:	f006 f8f6 	bl	80183ea <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80121fe:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012202:	2100      	movs	r1, #0
 8012204:	4814      	ldr	r0, [pc, #80]	@ (8012258 <RestoreNvmData+0x134>)
 8012206:	f006 f92b 	bl	8018460 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801220a:	4b12      	ldr	r3, [pc, #72]	@ (8012254 <RestoreNvmData+0x130>)
 801220c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8012210:	4b10      	ldr	r3, [pc, #64]	@ (8012254 <RestoreNvmData+0x130>)
 8012212:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012216:	4b17      	ldr	r3, [pc, #92]	@ (8012274 <RestoreNvmData+0x150>)
 8012218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801221a:	4a0e      	ldr	r2, [pc, #56]	@ (8012254 <RestoreNvmData+0x130>)
 801221c:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012220:	4b14      	ldr	r3, [pc, #80]	@ (8012274 <RestoreNvmData+0x150>)
 8012222:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8012226:	4b0b      	ldr	r3, [pc, #44]	@ (8012254 <RestoreNvmData+0x130>)
 8012228:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801222c:	4b09      	ldr	r3, [pc, #36]	@ (8012254 <RestoreNvmData+0x130>)
 801222e:	2201      	movs	r2, #1
 8012230:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012234:	4b07      	ldr	r3, [pc, #28]	@ (8012254 <RestoreNvmData+0x130>)
 8012236:	2202      	movs	r2, #2
 8012238:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801223c:	4b0e      	ldr	r3, [pc, #56]	@ (8012278 <RestoreNvmData+0x154>)
 801223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012240:	4a0c      	ldr	r2, [pc, #48]	@ (8012274 <RestoreNvmData+0x150>)
 8012242:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8012246:	4610      	mov	r0, r2
 8012248:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 801224a:	2300      	movs	r3, #0
}
 801224c:	4618      	mov	r0, r3
 801224e:	3708      	adds	r7, #8
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}
 8012254:	200007d0 	.word	0x200007d0
 8012258:	200012c0 	.word	0x200012c0
 801225c:	200012e8 	.word	0x200012e8
 8012260:	20001308 	.word	0x20001308
 8012264:	2000140c 	.word	0x2000140c
 8012268:	200014e4 	.word	0x200014e4
 801226c:	200014e8 	.word	0x200014e8
 8012270:	20001864 	.word	0x20001864
 8012274:	20000d04 	.word	0x20000d04
 8012278:	0801df14 	.word	0x0801df14

0801227c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801227c:	b480      	push	{r7}
 801227e:	b083      	sub	sp, #12
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
 8012284:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d002      	beq.n	8012292 <DetermineFrameType+0x16>
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d101      	bne.n	8012296 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012292:	2303      	movs	r3, #3
 8012294:	e03b      	b.n	801230e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	7b1b      	ldrb	r3, [r3, #12]
 801229a:	f003 030f 	and.w	r3, r3, #15
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d008      	beq.n	80122b6 <DetermineFrameType+0x3a>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d003      	beq.n	80122b6 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	2200      	movs	r2, #0
 80122b2:	701a      	strb	r2, [r3, #0]
 80122b4:	e02a      	b.n	801230c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d103      	bne.n	80122c8 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	2201      	movs	r2, #1
 80122c4:	701a      	strb	r2, [r3, #0]
 80122c6:	e021      	b.n	801230c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	7b1b      	ldrb	r3, [r3, #12]
 80122cc:	f003 030f 	and.w	r3, r3, #15
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d108      	bne.n	80122e8 <DetermineFrameType+0x6c>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d103      	bne.n	80122e8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	2202      	movs	r2, #2
 80122e4:	701a      	strb	r2, [r3, #0]
 80122e6:	e011      	b.n	801230c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	7b1b      	ldrb	r3, [r3, #12]
 80122ec:	f003 030f 	and.w	r3, r3, #15
 80122f0:	b2db      	uxtb	r3, r3
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d108      	bne.n	8012308 <DetermineFrameType+0x8c>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d003      	beq.n	8012308 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	2203      	movs	r2, #3
 8012304:	701a      	strb	r2, [r3, #0]
 8012306:	e001      	b.n	801230c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012308:	2318      	movs	r3, #24
 801230a:	e000      	b.n	801230e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	bc80      	pop	{r7}
 8012316:	4770      	bx	lr

08012318 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8012318:	b480      	push	{r7}
 801231a:	b083      	sub	sp, #12
 801231c:	af00      	add	r7, sp, #0
 801231e:	4603      	mov	r3, r0
 8012320:	460a      	mov	r2, r1
 8012322:	71fb      	strb	r3, [r7, #7]
 8012324:	4613      	mov	r3, r2
 8012326:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8012328:	79fa      	ldrb	r2, [r7, #7]
 801232a:	79bb      	ldrb	r3, [r7, #6]
 801232c:	429a      	cmp	r2, r3
 801232e:	d301      	bcc.n	8012334 <CheckRetrans+0x1c>
    {
        return true;
 8012330:	2301      	movs	r3, #1
 8012332:	e000      	b.n	8012336 <CheckRetrans+0x1e>
    }
    return false;
 8012334:	2300      	movs	r3, #0
}
 8012336:	4618      	mov	r0, r3
 8012338:	370c      	adds	r7, #12
 801233a:	46bd      	mov	sp, r7
 801233c:	bc80      	pop	{r7}
 801233e:	4770      	bx	lr

08012340 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012340:	b580      	push	{r7, lr}
 8012342:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012344:	4b12      	ldr	r3, [pc, #72]	@ (8012390 <CheckRetransUnconfirmedUplink+0x50>)
 8012346:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801234a:	4a12      	ldr	r2, [pc, #72]	@ (8012394 <CheckRetransUnconfirmedUplink+0x54>)
 801234c:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012350:	4611      	mov	r1, r2
 8012352:	4618      	mov	r0, r3
 8012354:	f7ff ffe0 	bl	8012318 <CheckRetrans>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d001      	beq.n	8012362 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801235e:	2301      	movs	r3, #1
 8012360:	e014      	b.n	801238c <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012362:	4b0b      	ldr	r3, [pc, #44]	@ (8012390 <CheckRetransUnconfirmedUplink+0x50>)
 8012364:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012368:	f003 0302 	and.w	r3, r3, #2
 801236c:	b2db      	uxtb	r3, r3
 801236e:	2b00      	cmp	r3, #0
 8012370:	d00b      	beq.n	801238a <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012372:	4b07      	ldr	r3, [pc, #28]	@ (8012390 <CheckRetransUnconfirmedUplink+0x50>)
 8012374:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8012378:	2b00      	cmp	r3, #0
 801237a:	d004      	beq.n	8012386 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801237c:	4b04      	ldr	r3, [pc, #16]	@ (8012390 <CheckRetransUnconfirmedUplink+0x50>)
 801237e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012382:	2b01      	cmp	r3, #1
 8012384:	d101      	bne.n	801238a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8012386:	2301      	movs	r3, #1
 8012388:	e000      	b.n	801238c <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801238a:	2300      	movs	r3, #0
}
 801238c:	4618      	mov	r0, r3
 801238e:	bd80      	pop	{r7, pc}
 8012390:	200007d0 	.word	0x200007d0
 8012394:	20000d04 	.word	0x20000d04

08012398 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012398:	b580      	push	{r7, lr}
 801239a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801239c:	4b10      	ldr	r3, [pc, #64]	@ (80123e0 <CheckRetransConfirmedUplink+0x48>)
 801239e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80123a2:	4a10      	ldr	r2, [pc, #64]	@ (80123e4 <CheckRetransConfirmedUplink+0x4c>)
 80123a4:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80123a8:	4611      	mov	r1, r2
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7ff ffb4 	bl	8012318 <CheckRetrans>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d001      	beq.n	80123ba <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80123b6:	2301      	movs	r3, #1
 80123b8:	e00f      	b.n	80123da <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80123ba:	4b09      	ldr	r3, [pc, #36]	@ (80123e0 <CheckRetransConfirmedUplink+0x48>)
 80123bc:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80123c0:	f003 0302 	and.w	r3, r3, #2
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d006      	beq.n	80123d8 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80123ca:	4b05      	ldr	r3, [pc, #20]	@ (80123e0 <CheckRetransConfirmedUplink+0x48>)
 80123cc:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d001      	beq.n	80123d8 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80123d4:	2301      	movs	r3, #1
 80123d6:	e000      	b.n	80123da <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80123d8:	2300      	movs	r3, #0
}
 80123da:	4618      	mov	r0, r3
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	200007d0 	.word	0x200007d0
 80123e4:	20000d04 	.word	0x20000d04

080123e8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80123e8:	b480      	push	{r7}
 80123ea:	b083      	sub	sp, #12
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123f6:	d002      	beq.n	80123fe <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	3301      	adds	r3, #1
 80123fc:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80123fe:	687b      	ldr	r3, [r7, #4]
}
 8012400:	4618      	mov	r0, r3
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	bc80      	pop	{r7}
 8012408:	4770      	bx	lr
	...

0801240c <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 801240c:	b580      	push	{r7, lr}
 801240e:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012410:	4b1a      	ldr	r3, [pc, #104]	@ (801247c <StopRetransmission+0x70>)
 8012412:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012416:	f003 0302 	and.w	r3, r3, #2
 801241a:	b2db      	uxtb	r3, r3
 801241c:	2b00      	cmp	r3, #0
 801241e:	d009      	beq.n	8012434 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012420:	4b16      	ldr	r3, [pc, #88]	@ (801247c <StopRetransmission+0x70>)
 8012422:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012426:	2b00      	cmp	r3, #0
 8012428:	d011      	beq.n	801244e <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801242a:	4b14      	ldr	r3, [pc, #80]	@ (801247c <StopRetransmission+0x70>)
 801242c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012430:	2b01      	cmp	r3, #1
 8012432:	d00c      	beq.n	801244e <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012434:	4b12      	ldr	r3, [pc, #72]	@ (8012480 <StopRetransmission+0x74>)
 8012436:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801243a:	2b00      	cmp	r3, #0
 801243c:	d007      	beq.n	801244e <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 801243e:	4b10      	ldr	r3, [pc, #64]	@ (8012480 <StopRetransmission+0x74>)
 8012440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012442:	4618      	mov	r0, r3
 8012444:	f7ff ffd0 	bl	80123e8 <IncreaseAdrAckCounter>
 8012448:	4603      	mov	r3, r0
 801244a:	4a0d      	ldr	r2, [pc, #52]	@ (8012480 <StopRetransmission+0x74>)
 801244c:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801244e:	4b0b      	ldr	r3, [pc, #44]	@ (801247c <StopRetransmission+0x70>)
 8012450:	2200      	movs	r2, #0
 8012452:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8012456:	4b09      	ldr	r3, [pc, #36]	@ (801247c <StopRetransmission+0x70>)
 8012458:	2200      	movs	r2, #0
 801245a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 801245e:	4b07      	ldr	r3, [pc, #28]	@ (801247c <StopRetransmission+0x70>)
 8012460:	2200      	movs	r2, #0
 8012462:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012466:	4b05      	ldr	r3, [pc, #20]	@ (801247c <StopRetransmission+0x70>)
 8012468:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801246c:	f023 0302 	bic.w	r3, r3, #2
 8012470:	4a02      	ldr	r2, [pc, #8]	@ (801247c <StopRetransmission+0x70>)
 8012472:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8012476:	2301      	movs	r3, #1
}
 8012478:	4618      	mov	r0, r3
 801247a:	bd80      	pop	{r7, pc}
 801247c:	200007d0 	.word	0x200007d0
 8012480:	20000d04 	.word	0x20000d04

08012484 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8012484:	b580      	push	{r7, lr}
 8012486:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012488:	4b08      	ldr	r3, [pc, #32]	@ (80124ac <OnMacProcessNotify+0x28>)
 801248a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00a      	beq.n	80124a8 <OnMacProcessNotify+0x24>
 8012492:	4b06      	ldr	r3, [pc, #24]	@ (80124ac <OnMacProcessNotify+0x28>)
 8012494:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012498:	695b      	ldr	r3, [r3, #20]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d004      	beq.n	80124a8 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801249e:	4b03      	ldr	r3, [pc, #12]	@ (80124ac <OnMacProcessNotify+0x28>)
 80124a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80124a4:	695b      	ldr	r3, [r3, #20]
 80124a6:	4798      	blx	r3
    }
}
 80124a8:	bf00      	nop
 80124aa:	bd80      	pop	{r7, pc}
 80124ac:	200007d0 	.word	0x200007d0

080124b0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	4603      	mov	r3, r0
 80124b8:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80124ba:	4b0b      	ldr	r3, [pc, #44]	@ (80124e8 <CallNvmDataChangeCallback+0x38>)
 80124bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d00c      	beq.n	80124de <CallNvmDataChangeCallback+0x2e>
 80124c4:	4b08      	ldr	r3, [pc, #32]	@ (80124e8 <CallNvmDataChangeCallback+0x38>)
 80124c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80124ca:	691b      	ldr	r3, [r3, #16]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d006      	beq.n	80124de <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80124d0:	4b05      	ldr	r3, [pc, #20]	@ (80124e8 <CallNvmDataChangeCallback+0x38>)
 80124d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80124d6:	691b      	ldr	r3, [r3, #16]
 80124d8:	88fa      	ldrh	r2, [r7, #6]
 80124da:	4610      	mov	r0, r2
 80124dc:	4798      	blx	r3
    }
}
 80124de:	bf00      	nop
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	200007d0 	.word	0x200007d0

080124ec <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80124ec:	b480      	push	{r7}
 80124ee:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80124f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012520 <IsRequestPending+0x34>)
 80124f2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80124f6:	f003 0304 	and.w	r3, r3, #4
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d107      	bne.n	8012510 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012500:	4b07      	ldr	r3, [pc, #28]	@ (8012520 <IsRequestPending+0x34>)
 8012502:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012506:	f003 0301 	and.w	r3, r3, #1
 801250a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801250c:	2b00      	cmp	r3, #0
 801250e:	d001      	beq.n	8012514 <IsRequestPending+0x28>
    {
        return 1;
 8012510:	2301      	movs	r3, #1
 8012512:	e000      	b.n	8012516 <IsRequestPending+0x2a>
    }
    return 0;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	46bd      	mov	sp, r7
 801251a:	bc80      	pop	{r7}
 801251c:	4770      	bx	lr
 801251e:	bf00      	nop
 8012520:	200007d0 	.word	0x200007d0

08012524 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012524:	b590      	push	{r4, r7, lr}
 8012526:	b091      	sub	sp, #68	@ 0x44
 8012528:	af02      	add	r7, sp, #8
 801252a:	6178      	str	r0, [r7, #20]
 801252c:	6139      	str	r1, [r7, #16]
 801252e:	4613      	mov	r3, r2
 8012530:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d002      	beq.n	801253e <LoRaMacInitialization+0x1a>
 8012538:	693b      	ldr	r3, [r7, #16]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d101      	bne.n	8012542 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801253e:	2303      	movs	r3, #3
 8012540:	e27a      	b.n	8012a38 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d00b      	beq.n	8012562 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801254e:	2b00      	cmp	r3, #0
 8012550:	d007      	beq.n	8012562 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012556:	2b00      	cmp	r3, #0
 8012558:	d003      	beq.n	8012562 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801255e:	2b00      	cmp	r3, #0
 8012560:	d101      	bne.n	8012566 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012562:	2303      	movs	r3, #3
 8012564:	e268      	b.n	8012a38 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012566:	7bfb      	ldrb	r3, [r7, #15]
 8012568:	4618      	mov	r0, r3
 801256a:	f003 fd03 	bl	8015f74 <RegionIsActive>
 801256e:	4603      	mov	r3, r0
 8012570:	f083 0301 	eor.w	r3, r3, #1
 8012574:	b2db      	uxtb	r3, r3
 8012576:	2b00      	cmp	r3, #0
 8012578:	d001      	beq.n	801257e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801257a:	2309      	movs	r3, #9
 801257c:	e25c      	b.n	8012a38 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801257e:	6978      	ldr	r0, [r7, #20]
 8012580:	f002 f996 	bl	80148b0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012584:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012588:	2100      	movs	r1, #0
 801258a:	48c7      	ldr	r0, [pc, #796]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801258c:	f005 ff68 	bl	8018460 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012590:	f240 5234 	movw	r2, #1332	@ 0x534
 8012594:	2100      	movs	r1, #0
 8012596:	48c5      	ldr	r0, [pc, #788]	@ (80128ac <LoRaMacInitialization+0x388>)
 8012598:	f005 ff62 	bl	8018460 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 801259c:	4ac2      	ldr	r2, [pc, #776]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801259e:	7bfb      	ldrb	r3, [r7, #15]
 80125a0:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80125a4:	4bc0      	ldr	r3, [pc, #768]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80125a6:	2200      	movs	r2, #0
 80125a8:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 80125ac:	4bbe      	ldr	r3, [pc, #760]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80125ae:	2200      	movs	r2, #0
 80125b0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80125b4:	4bbc      	ldr	r3, [pc, #752]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80125b6:	4abe      	ldr	r2, [pc, #760]	@ (80128b0 <LoRaMacInitialization+0x38c>)
 80125b8:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80125bc:	2300      	movs	r3, #0
 80125be:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80125c2:	4bbc      	ldr	r3, [pc, #752]	@ (80128b4 <LoRaMacInitialization+0x390>)
 80125c4:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80125c6:	4bbc      	ldr	r3, [pc, #752]	@ (80128b8 <LoRaMacInitialization+0x394>)
 80125c8:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80125ca:	4bbc      	ldr	r3, [pc, #752]	@ (80128bc <LoRaMacInitialization+0x398>)
 80125cc:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80125ce:	4bb6      	ldr	r3, [pc, #728]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80125d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80125d4:	f107 021c 	add.w	r2, r7, #28
 80125d8:	4611      	mov	r1, r2
 80125da:	4618      	mov	r0, r3
 80125dc:	f003 fd03 	bl	8015fe6 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80125e0:	230f      	movs	r3, #15
 80125e2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125e6:	4bb0      	ldr	r3, [pc, #704]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80125e8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80125ec:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80125f0:	4611      	mov	r1, r2
 80125f2:	4618      	mov	r0, r3
 80125f4:	f003 fcce 	bl	8015f94 <RegionGetPhyParam>
 80125f8:	4603      	mov	r3, r0
 80125fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80125fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125fe:	2b00      	cmp	r3, #0
 8012600:	bf14      	ite	ne
 8012602:	2301      	movne	r3, #1
 8012604:	2300      	moveq	r3, #0
 8012606:	b2da      	uxtb	r2, r3
 8012608:	4ba7      	ldr	r3, [pc, #668]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801260a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801260e:	230a      	movs	r3, #10
 8012610:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012614:	4ba4      	ldr	r3, [pc, #656]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012616:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801261a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801261e:	4611      	mov	r1, r2
 8012620:	4618      	mov	r0, r3
 8012622:	f003 fcb7 	bl	8015f94 <RegionGetPhyParam>
 8012626:	4603      	mov	r3, r0
 8012628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801262a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801262c:	b25a      	sxtb	r2, r3
 801262e:	4b9e      	ldr	r3, [pc, #632]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012630:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012634:	2306      	movs	r3, #6
 8012636:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801263a:	4b9b      	ldr	r3, [pc, #620]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801263c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012640:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012644:	4611      	mov	r1, r2
 8012646:	4618      	mov	r0, r3
 8012648:	f003 fca4 	bl	8015f94 <RegionGetPhyParam>
 801264c:	4603      	mov	r3, r0
 801264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012652:	b25a      	sxtb	r2, r3
 8012654:	4b94      	ldr	r3, [pc, #592]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012656:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801265a:	2310      	movs	r3, #16
 801265c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012660:	4b91      	ldr	r3, [pc, #580]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012662:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012666:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801266a:	4611      	mov	r1, r2
 801266c:	4618      	mov	r0, r3
 801266e:	f003 fc91 	bl	8015f94 <RegionGetPhyParam>
 8012672:	4603      	mov	r3, r0
 8012674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012678:	4a8b      	ldr	r2, [pc, #556]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801267a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801267e:	2311      	movs	r3, #17
 8012680:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012684:	4b88      	ldr	r3, [pc, #544]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012686:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801268a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801268e:	4611      	mov	r1, r2
 8012690:	4618      	mov	r0, r3
 8012692:	f003 fc7f 	bl	8015f94 <RegionGetPhyParam>
 8012696:	4603      	mov	r3, r0
 8012698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801269a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801269c:	4a82      	ldr	r2, [pc, #520]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801269e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80126a2:	2312      	movs	r3, #18
 80126a4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126a8:	4b7f      	ldr	r3, [pc, #508]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80126aa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80126ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80126b2:	4611      	mov	r1, r2
 80126b4:	4618      	mov	r0, r3
 80126b6:	f003 fc6d 	bl	8015f94 <RegionGetPhyParam>
 80126ba:	4603      	mov	r3, r0
 80126bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80126be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126c0:	4a79      	ldr	r2, [pc, #484]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80126c2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80126c6:	2313      	movs	r3, #19
 80126c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126cc:	4b76      	ldr	r3, [pc, #472]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80126ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80126d2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80126d6:	4611      	mov	r1, r2
 80126d8:	4618      	mov	r0, r3
 80126da:	f003 fc5b 	bl	8015f94 <RegionGetPhyParam>
 80126de:	4603      	mov	r3, r0
 80126e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80126e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126e4:	4a70      	ldr	r2, [pc, #448]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80126e6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80126ea:	2314      	movs	r3, #20
 80126ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126f0:	4b6d      	ldr	r3, [pc, #436]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80126f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80126f6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80126fa:	4611      	mov	r1, r2
 80126fc:	4618      	mov	r0, r3
 80126fe:	f003 fc49 	bl	8015f94 <RegionGetPhyParam>
 8012702:	4603      	mov	r3, r0
 8012704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012708:	4a67      	ldr	r2, [pc, #412]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801270a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801270e:	2316      	movs	r3, #22
 8012710:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012714:	4b64      	ldr	r3, [pc, #400]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012716:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801271a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801271e:	4611      	mov	r1, r2
 8012720:	4618      	mov	r0, r3
 8012722:	f003 fc37 	bl	8015f94 <RegionGetPhyParam>
 8012726:	4603      	mov	r3, r0
 8012728:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801272c:	b2da      	uxtb	r2, r3
 801272e:	4b5e      	ldr	r3, [pc, #376]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012730:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012734:	2317      	movs	r3, #23
 8012736:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801273a:	4b5b      	ldr	r3, [pc, #364]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801273c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012740:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012744:	4611      	mov	r1, r2
 8012746:	4618      	mov	r0, r3
 8012748:	f003 fc24 	bl	8015f94 <RegionGetPhyParam>
 801274c:	4603      	mov	r3, r0
 801274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012752:	4a55      	ldr	r2, [pc, #340]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012754:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801275a:	4a53      	ldr	r2, [pc, #332]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801275c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012760:	2318      	movs	r3, #24
 8012762:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012766:	4b50      	ldr	r3, [pc, #320]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012768:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801276c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012770:	4611      	mov	r1, r2
 8012772:	4618      	mov	r0, r3
 8012774:	f003 fc0e 	bl	8015f94 <RegionGetPhyParam>
 8012778:	4603      	mov	r3, r0
 801277a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801277c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801277e:	b2da      	uxtb	r2, r3
 8012780:	4b49      	ldr	r3, [pc, #292]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012782:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012788:	b2da      	uxtb	r2, r3
 801278a:	4b47      	ldr	r3, [pc, #284]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801278c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012790:	231d      	movs	r3, #29
 8012792:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012796:	4b44      	ldr	r3, [pc, #272]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012798:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801279c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80127a0:	4611      	mov	r1, r2
 80127a2:	4618      	mov	r0, r3
 80127a4:	f003 fbf6 	bl	8015f94 <RegionGetPhyParam>
 80127a8:	4603      	mov	r3, r0
 80127aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80127ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ae:	b2da      	uxtb	r2, r3
 80127b0:	4b3d      	ldr	r3, [pc, #244]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80127b2:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80127b6:	231e      	movs	r3, #30
 80127b8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80127bc:	4b3a      	ldr	r3, [pc, #232]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80127be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80127c2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80127c6:	4611      	mov	r1, r2
 80127c8:	4618      	mov	r0, r3
 80127ca:	f003 fbe3 	bl	8015f94 <RegionGetPhyParam>
 80127ce:	4603      	mov	r3, r0
 80127d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80127d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127d4:	b2da      	uxtb	r2, r3
 80127d6:	4b34      	ldr	r3, [pc, #208]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80127d8:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80127dc:	231f      	movs	r3, #31
 80127de:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80127e2:	4b31      	ldr	r3, [pc, #196]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80127e4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80127e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80127ec:	4611      	mov	r1, r2
 80127ee:	4618      	mov	r0, r3
 80127f0:	f003 fbd0 	bl	8015f94 <RegionGetPhyParam>
 80127f4:	4603      	mov	r3, r0
 80127f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80127f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127fa:	4a2b      	ldr	r2, [pc, #172]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80127fc:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012800:	2320      	movs	r3, #32
 8012802:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012806:	4b28      	ldr	r3, [pc, #160]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012808:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801280c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012810:	4611      	mov	r1, r2
 8012812:	4618      	mov	r0, r3
 8012814:	f003 fbbe 	bl	8015f94 <RegionGetPhyParam>
 8012818:	4603      	mov	r3, r0
 801281a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 801281c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801281e:	4a22      	ldr	r2, [pc, #136]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012820:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012824:	230b      	movs	r3, #11
 8012826:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801282a:	4b1f      	ldr	r3, [pc, #124]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801282c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012830:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012834:	4611      	mov	r1, r2
 8012836:	4618      	mov	r0, r3
 8012838:	f003 fbac 	bl	8015f94 <RegionGetPhyParam>
 801283c:	4603      	mov	r3, r0
 801283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8012840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012842:	b29a      	uxth	r2, r3
 8012844:	4b18      	ldr	r3, [pc, #96]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012846:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801284a:	230c      	movs	r3, #12
 801284c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012850:	4b15      	ldr	r3, [pc, #84]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012852:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012856:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801285a:	4611      	mov	r1, r2
 801285c:	4618      	mov	r0, r3
 801285e:	f003 fb99 	bl	8015f94 <RegionGetPhyParam>
 8012862:	4603      	mov	r3, r0
 8012864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8012866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012868:	b29a      	uxth	r2, r3
 801286a:	4b0f      	ldr	r3, [pc, #60]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801286c:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012870:	4b0d      	ldr	r3, [pc, #52]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012872:	2201      	movs	r2, #1
 8012874:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012878:	4b0b      	ldr	r3, [pc, #44]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801287a:	220a      	movs	r2, #10
 801287c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012880:	4b09      	ldr	r3, [pc, #36]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012882:	2206      	movs	r2, #6
 8012884:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012888:	4b07      	ldr	r3, [pc, #28]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801288a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801288e:	4a06      	ldr	r2, [pc, #24]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012890:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012892:	4b05      	ldr	r3, [pc, #20]	@ (80128a8 <LoRaMacInitialization+0x384>)
 8012894:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8012898:	4b03      	ldr	r3, [pc, #12]	@ (80128a8 <LoRaMacInitialization+0x384>)
 801289a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801289e:	4b02      	ldr	r3, [pc, #8]	@ (80128a8 <LoRaMacInitialization+0x384>)
 80128a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80128a4:	e00c      	b.n	80128c0 <LoRaMacInitialization+0x39c>
 80128a6:	bf00      	nop
 80128a8:	20000d04 	.word	0x20000d04
 80128ac:	200007d0 	.word	0x200007d0
 80128b0:	01000400 	.word	0x01000400
 80128b4:	20000f28 	.word	0x20000f28
 80128b8:	20000f2c 	.word	0x20000f2c
 80128bc:	2000187c 	.word	0x2000187c
 80128c0:	4a5f      	ldr	r2, [pc, #380]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128c2:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80128c4:	4b5e      	ldr	r3, [pc, #376]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80128ca:	4a5d      	ldr	r2, [pc, #372]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128cc:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80128ce:	4b5c      	ldr	r3, [pc, #368]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80128d4:	4a5a      	ldr	r2, [pc, #360]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80128d8:	4b59      	ldr	r3, [pc, #356]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80128de:	4a58      	ldr	r2, [pc, #352]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128e0:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80128e2:	4b57      	ldr	r3, [pc, #348]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80128e8:	4a55      	ldr	r2, [pc, #340]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128ea:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80128ec:	4b54      	ldr	r3, [pc, #336]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128ee:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 80128f2:	4b53      	ldr	r3, [pc, #332]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128f4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80128f8:	4b51      	ldr	r3, [pc, #324]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80128fa:	2201      	movs	r2, #1
 80128fc:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8012900:	4a50      	ldr	r2, [pc, #320]	@ (8012a44 <LoRaMacInitialization+0x520>)
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8012908:	2000      	movs	r0, #0
 801290a:	f7ff f86b 	bl	80119e4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801290e:	4b4c      	ldr	r3, [pc, #304]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 8012910:	2201      	movs	r2, #1
 8012912:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8012916:	4a4b      	ldr	r2, [pc, #300]	@ (8012a44 <LoRaMacInitialization+0x520>)
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 801291e:	4b49      	ldr	r3, [pc, #292]	@ (8012a44 <LoRaMacInitialization+0x520>)
 8012920:	2200      	movs	r2, #0
 8012922:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8012926:	4b47      	ldr	r3, [pc, #284]	@ (8012a44 <LoRaMacInitialization+0x520>)
 8012928:	2201      	movs	r2, #1
 801292a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801292e:	4b44      	ldr	r3, [pc, #272]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 8012930:	2200      	movs	r2, #0
 8012932:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012934:	4b42      	ldr	r3, [pc, #264]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 8012936:	2200      	movs	r2, #0
 8012938:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801293a:	2300      	movs	r3, #0
 801293c:	9300      	str	r3, [sp, #0]
 801293e:	4b42      	ldr	r3, [pc, #264]	@ (8012a48 <LoRaMacInitialization+0x524>)
 8012940:	2200      	movs	r2, #0
 8012942:	f04f 31ff 	mov.w	r1, #4294967295
 8012946:	4841      	ldr	r0, [pc, #260]	@ (8012a4c <LoRaMacInitialization+0x528>)
 8012948:	f009 fdfe 	bl	801c548 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801294c:	2300      	movs	r3, #0
 801294e:	9300      	str	r3, [sp, #0]
 8012950:	4b3f      	ldr	r3, [pc, #252]	@ (8012a50 <LoRaMacInitialization+0x52c>)
 8012952:	2200      	movs	r2, #0
 8012954:	f04f 31ff 	mov.w	r1, #4294967295
 8012958:	483e      	ldr	r0, [pc, #248]	@ (8012a54 <LoRaMacInitialization+0x530>)
 801295a:	f009 fdf5 	bl	801c548 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801295e:	2300      	movs	r3, #0
 8012960:	9300      	str	r3, [sp, #0]
 8012962:	4b3d      	ldr	r3, [pc, #244]	@ (8012a58 <LoRaMacInitialization+0x534>)
 8012964:	2200      	movs	r2, #0
 8012966:	f04f 31ff 	mov.w	r1, #4294967295
 801296a:	483c      	ldr	r0, [pc, #240]	@ (8012a5c <LoRaMacInitialization+0x538>)
 801296c:	f009 fdec 	bl	801c548 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8012970:	2300      	movs	r3, #0
 8012972:	9300      	str	r3, [sp, #0]
 8012974:	4b3a      	ldr	r3, [pc, #232]	@ (8012a60 <LoRaMacInitialization+0x53c>)
 8012976:	2200      	movs	r2, #0
 8012978:	f04f 31ff 	mov.w	r1, #4294967295
 801297c:	4839      	ldr	r0, [pc, #228]	@ (8012a64 <LoRaMacInitialization+0x540>)
 801297e:	f009 fde3 	bl	801c548 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012982:	4c2f      	ldr	r4, [pc, #188]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 8012984:	463b      	mov	r3, r7
 8012986:	4618      	mov	r0, r3
 8012988:	f009 f9ba 	bl	801bd00 <SysTimeGetMcuTime>
 801298c:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8012990:	463a      	mov	r2, r7
 8012992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012996:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 801299a:	4b33      	ldr	r3, [pc, #204]	@ (8012a68 <LoRaMacInitialization+0x544>)
 801299c:	2200      	movs	r2, #0
 801299e:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80129a0:	4b28      	ldr	r3, [pc, #160]	@ (8012a44 <LoRaMacInitialization+0x520>)
 80129a2:	4a32      	ldr	r2, [pc, #200]	@ (8012a6c <LoRaMacInitialization+0x548>)
 80129a4:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80129a8:	4b26      	ldr	r3, [pc, #152]	@ (8012a44 <LoRaMacInitialization+0x520>)
 80129aa:	4a31      	ldr	r2, [pc, #196]	@ (8012a70 <LoRaMacInitialization+0x54c>)
 80129ac:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80129b0:	4b24      	ldr	r3, [pc, #144]	@ (8012a44 <LoRaMacInitialization+0x520>)
 80129b2:	4a30      	ldr	r2, [pc, #192]	@ (8012a74 <LoRaMacInitialization+0x550>)
 80129b4:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80129b8:	4b22      	ldr	r3, [pc, #136]	@ (8012a44 <LoRaMacInitialization+0x520>)
 80129ba:	4a2f      	ldr	r2, [pc, #188]	@ (8012a78 <LoRaMacInitialization+0x554>)
 80129bc:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80129c0:	4b20      	ldr	r3, [pc, #128]	@ (8012a44 <LoRaMacInitialization+0x520>)
 80129c2:	4a2e      	ldr	r2, [pc, #184]	@ (8012a7c <LoRaMacInitialization+0x558>)
 80129c4:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80129c8:	4b2d      	ldr	r3, [pc, #180]	@ (8012a80 <LoRaMacInitialization+0x55c>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	482d      	ldr	r0, [pc, #180]	@ (8012a84 <LoRaMacInitialization+0x560>)
 80129ce:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80129d0:	482d      	ldr	r0, [pc, #180]	@ (8012a88 <LoRaMacInitialization+0x564>)
 80129d2:	f7fa f9c1 	bl	800cd58 <SecureElementInit>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d001      	beq.n	80129e0 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80129dc:	2311      	movs	r3, #17
 80129de:	e02b      	b.n	8012a38 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80129e0:	4817      	ldr	r0, [pc, #92]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 80129e2:	f002 fc21 	bl	8015228 <LoRaMacCryptoInit>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d001      	beq.n	80129f0 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80129ec:	2311      	movs	r3, #17
 80129ee:	e023      	b.n	8012a38 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80129f0:	f001 fd20 	bl	8014434 <LoRaMacCommandsInit>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d001      	beq.n	80129fe <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80129fa:	2313      	movs	r3, #19
 80129fc:	e01c      	b.n	8012a38 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80129fe:	4823      	ldr	r0, [pc, #140]	@ (8012a8c <LoRaMacInitialization+0x568>)
 8012a00:	f002 fcb2 	bl	8015368 <LoRaMacCryptoSetMulticastReference>
 8012a04:	4603      	mov	r3, r0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d001      	beq.n	8012a0e <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012a0a:	2311      	movs	r3, #17
 8012a0c:	e014      	b.n	8012a38 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8012a80 <LoRaMacInitialization+0x55c>)
 8012a10:	695b      	ldr	r3, [r3, #20]
 8012a12:	4798      	blx	r3
 8012a14:	4603      	mov	r3, r0
 8012a16:	4618      	mov	r0, r3
 8012a18:	f005 fcc2 	bl	80183a0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012a1c:	4b18      	ldr	r3, [pc, #96]	@ (8012a80 <LoRaMacInitialization+0x55c>)
 8012a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a20:	4a07      	ldr	r2, [pc, #28]	@ (8012a40 <LoRaMacInitialization+0x51c>)
 8012a22:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8012a26:	4610      	mov	r0, r2
 8012a28:	4798      	blx	r3
    Radio.Sleep( );
 8012a2a:	4b15      	ldr	r3, [pc, #84]	@ (8012a80 <LoRaMacInitialization+0x55c>)
 8012a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a2e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012a30:	2001      	movs	r0, #1
 8012a32:	f7fd fa67 	bl	800ff04 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012a36:	2300      	movs	r3, #0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	373c      	adds	r7, #60	@ 0x3c
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd90      	pop	{r4, r7, pc}
 8012a40:	20000d04 	.word	0x20000d04
 8012a44:	200007d0 	.word	0x200007d0
 8012a48:	08010491 	.word	0x08010491
 8012a4c:	20000b38 	.word	0x20000b38
 8012a50:	08010521 	.word	0x08010521
 8012a54:	20000b50 	.word	0x20000b50
 8012a58:	08010599 	.word	0x08010599
 8012a5c:	20000b68 	.word	0x20000b68
 8012a60:	08010619 	.word	0x08010619
 8012a64:	20000bd0 	.word	0x20000bd0
 8012a68:	2000190c 	.word	0x2000190c
 8012a6c:	0800ef11 	.word	0x0800ef11
 8012a70:	0800ef6d 	.word	0x0800ef6d
 8012a74:	0800f00d 	.word	0x0800f00d
 8012a78:	0800efe1 	.word	0x0800efe1
 8012a7c:	0800f029 	.word	0x0800f029
 8012a80:	0801df14 	.word	0x0801df14
 8012a84:	20000b1c 	.word	0x20000b1c
 8012a88:	20000e50 	.word	0x20000e50
 8012a8c:	20000dec 	.word	0x20000dec

08012a90 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012a94:	4b04      	ldr	r3, [pc, #16]	@ (8012aa8 <LoRaMacStart+0x18>)
 8012a96:	2200      	movs	r2, #0
 8012a98:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8012a9c:	f7fc fada 	bl	800f054 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8012aa0:	2300      	movs	r3, #0
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	200007d0 	.word	0x200007d0

08012aac <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8012ab0:	f7fd f9f0 	bl	800fe94 <LoRaMacIsBusy>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	f083 0301 	eor.w	r3, r3, #1
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d00d      	beq.n	8012adc <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8012ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8012af0 <LoRaMacStop+0x44>)
 8012ac2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012ac6:	2b02      	cmp	r3, #2
 8012ac8:	d102      	bne.n	8012ad0 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8012aca:	4b0a      	ldr	r3, [pc, #40]	@ (8012af4 <LoRaMacStop+0x48>)
 8012acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ace:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8012ad0:	4b09      	ldr	r3, [pc, #36]	@ (8012af8 <LoRaMacStop+0x4c>)
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	e007      	b.n	8012aec <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8012adc:	4b06      	ldr	r3, [pc, #24]	@ (8012af8 <LoRaMacStop+0x4c>)
 8012ade:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d101      	bne.n	8012aea <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	e000      	b.n	8012aec <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8012aea:	2301      	movs	r3, #1
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	20000d04 	.word	0x20000d04
 8012af4:	0801df14 	.word	0x0801df14
 8012af8:	200007d0 	.word	0x200007d0

08012afc <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8012b00:	4812      	ldr	r0, [pc, #72]	@ (8012b4c <LoRaMacHalt+0x50>)
 8012b02:	f009 fdc5 	bl	801c690 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8012b06:	4812      	ldr	r0, [pc, #72]	@ (8012b50 <LoRaMacHalt+0x54>)
 8012b08:	f009 fdc2 	bl	801c690 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012b0c:	4811      	ldr	r0, [pc, #68]	@ (8012b54 <LoRaMacHalt+0x58>)
 8012b0e:	f009 fdbf 	bl	801c690 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8012b12:	4811      	ldr	r0, [pc, #68]	@ (8012b58 <LoRaMacHalt+0x5c>)
 8012b14:	f009 fdbc 	bl	801c690 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012b18:	f001 faf0 	bl	80140fc <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8012b5c <LoRaMacHalt+0x60>)
 8012b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b20:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8012b22:	4b0f      	ldr	r3, [pc, #60]	@ (8012b60 <LoRaMacHalt+0x64>)
 8012b24:	2200      	movs	r2, #0
 8012b26:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8012b2a:	480e      	ldr	r0, [pc, #56]	@ (8012b64 <LoRaMacHalt+0x68>)
 8012b2c:	f7fd fb8c 	bl	8010248 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012b30:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012b34:	490b      	ldr	r1, [pc, #44]	@ (8012b64 <LoRaMacHalt+0x68>)
 8012b36:	480c      	ldr	r0, [pc, #48]	@ (8012b68 <LoRaMacHalt+0x6c>)
 8012b38:	f005 fc57 	bl	80183ea <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8012b3c:	4b08      	ldr	r3, [pc, #32]	@ (8012b60 <LoRaMacHalt+0x64>)
 8012b3e:	2201      	movs	r2, #1
 8012b40:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012b44:	2300      	movs	r3, #0
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	bd80      	pop	{r7, pc}
 8012b4a:	bf00      	nop
 8012b4c:	20000b38 	.word	0x20000b38
 8012b50:	20000b50 	.word	0x20000b50
 8012b54:	20000b68 	.word	0x20000b68
 8012b58:	20000bd0 	.word	0x20000bd0
 8012b5c:	0801df14 	.word	0x0801df14
 8012b60:	200007d0 	.word	0x200007d0
 8012b64:	20000d04 	.word	0x20000d04
 8012b68:	200012c0 	.word	0x200012c0

08012b6c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012b6c:	b590      	push	{r4, r7, lr}
 8012b6e:	b08d      	sub	sp, #52	@ 0x34
 8012b70:	af02      	add	r7, sp, #8
 8012b72:	4603      	mov	r3, r0
 8012b74:	6039      	str	r1, [r7, #0]
 8012b76:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012b78:	4b42      	ldr	r3, [pc, #264]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b7c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012b7e:	4b41      	ldr	r3, [pc, #260]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012b80:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8012b84:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012b86:	4b3f      	ldr	r3, [pc, #252]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012b88:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8012b8c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8012b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8012c88 <LoRaMacQueryTxPossible+0x11c>)
 8012b90:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012b94:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8012b96:	2300      	movs	r3, #0
 8012b98:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d101      	bne.n	8012ba4 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012ba0:	2303      	movs	r3, #3
 8012ba2:	e06b      	b.n	8012c7c <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012ba8:	4b36      	ldr	r3, [pc, #216]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012baa:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012bae:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012bb0:	4b34      	ldr	r3, [pc, #208]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bb4:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012bb6:	4b33      	ldr	r3, [pc, #204]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012bb8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8012bbc:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012bbe:	4b31      	ldr	r3, [pc, #196]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012bc0:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8012bc4:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012bc8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012bcc:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012bd2:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8012bd6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8012bda:	4b2b      	ldr	r3, [pc, #172]	@ (8012c88 <LoRaMacQueryTxPossible+0x11c>)
 8012bdc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012be4:	4b27      	ldr	r3, [pc, #156]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012be6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012bee:	4b25      	ldr	r3, [pc, #148]	@ (8012c84 <LoRaMacQueryTxPossible+0x118>)
 8012bf0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012bf4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8012bf8:	f107 040d 	add.w	r4, r7, #13
 8012bfc:	f107 020e 	add.w	r2, r7, #14
 8012c00:	f107 010f 	add.w	r1, r7, #15
 8012c04:	f107 0014 	add.w	r0, r7, #20
 8012c08:	f107 0310 	add.w	r3, r7, #16
 8012c0c:	9300      	str	r3, [sp, #0]
 8012c0e:	4623      	mov	r3, r4
 8012c10:	f001 f93e 	bl	8013e90 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fd fe43 	bl	80108a4 <GetMaxAppPayloadWithoutFOptsLength>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	461a      	mov	r2, r3
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012c26:	f107 0308 	add.w	r3, r7, #8
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f001 fd08 	bl	8014640 <LoRaMacCommandsGetSizeSerializedCmds>
 8012c30:	4603      	mov	r3, r0
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d001      	beq.n	8012c3a <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c36:	2313      	movs	r3, #19
 8012c38:	e020      	b.n	8012c7c <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	2b0f      	cmp	r3, #15
 8012c3e:	d819      	bhi.n	8012c74 <LoRaMacQueryTxPossible+0x108>
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	785b      	ldrb	r3, [r3, #1]
 8012c44:	461a      	mov	r2, r3
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d313      	bcc.n	8012c74 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	785a      	ldrb	r2, [r3, #1]
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	b2db      	uxtb	r3, r3
 8012c54:	1ad3      	subs	r3, r2, r3
 8012c56:	b2da      	uxtb	r2, r3
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	785b      	ldrb	r3, [r3, #1]
 8012c60:	4619      	mov	r1, r3
 8012c62:	79fa      	ldrb	r2, [r7, #7]
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	4413      	add	r3, r2
 8012c68:	4299      	cmp	r1, r3
 8012c6a:	d301      	bcc.n	8012c70 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	e005      	b.n	8012c7c <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012c70:	2308      	movs	r3, #8
 8012c72:	e003      	b.n	8012c7c <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	2200      	movs	r2, #0
 8012c78:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012c7a:	2308      	movs	r3, #8
    }
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	372c      	adds	r7, #44	@ 0x2c
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd90      	pop	{r4, r7, pc}
 8012c84:	20000d04 	.word	0x20000d04
 8012c88:	200007d0 	.word	0x200007d0

08012c8c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012c8c:	b590      	push	{r4, r7, lr}
 8012c8e:	b087      	sub	sp, #28
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012c94:	2300      	movs	r3, #0
 8012c96:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d101      	bne.n	8012ca2 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c9e:	2303      	movs	r3, #3
 8012ca0:	e1c4      	b.n	801302c <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	2b41      	cmp	r3, #65	@ 0x41
 8012ca8:	f200 81b9 	bhi.w	801301e <LoRaMacMibGetRequestConfirm+0x392>
 8012cac:	a201      	add	r2, pc, #4	@ (adr r2, 8012cb4 <LoRaMacMibGetRequestConfirm+0x28>)
 8012cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cb2:	bf00      	nop
 8012cb4:	08012dbd 	.word	0x08012dbd
 8012cb8:	08012dc9 	.word	0x08012dc9
 8012cbc:	08012dd5 	.word	0x08012dd5
 8012cc0:	08012de1 	.word	0x08012de1
 8012cc4:	08012ded 	.word	0x08012ded
 8012cc8:	08012df9 	.word	0x08012df9
 8012ccc:	08012e05 	.word	0x08012e05
 8012cd0:	0801301f 	.word	0x0801301f
 8012cd4:	0801301f 	.word	0x0801301f
 8012cd8:	0801301f 	.word	0x0801301f
 8012cdc:	0801301f 	.word	0x0801301f
 8012ce0:	0801301f 	.word	0x0801301f
 8012ce4:	0801301f 	.word	0x0801301f
 8012ce8:	0801301f 	.word	0x0801301f
 8012cec:	0801301f 	.word	0x0801301f
 8012cf0:	08012e19 	.word	0x08012e19
 8012cf4:	08012e25 	.word	0x08012e25
 8012cf8:	08012e31 	.word	0x08012e31
 8012cfc:	08012e53 	.word	0x08012e53
 8012d00:	08012e65 	.word	0x08012e65
 8012d04:	08012e77 	.word	0x08012e77
 8012d08:	08012e89 	.word	0x08012e89
 8012d0c:	08012ebd 	.word	0x08012ebd
 8012d10:	08012e9b 	.word	0x08012e9b
 8012d14:	08012edf 	.word	0x08012edf
 8012d18:	08012eeb 	.word	0x08012eeb
 8012d1c:	08012ef5 	.word	0x08012ef5
 8012d20:	08012eff 	.word	0x08012eff
 8012d24:	08012f09 	.word	0x08012f09
 8012d28:	08012f13 	.word	0x08012f13
 8012d2c:	08012f1d 	.word	0x08012f1d
 8012d30:	08012f49 	.word	0x08012f49
 8012d34:	08012f55 	.word	0x08012f55
 8012d38:	08012f6d 	.word	0x08012f6d
 8012d3c:	08012f61 	.word	0x08012f61
 8012d40:	08012f79 	.word	0x08012f79
 8012d44:	08012f83 	.word	0x08012f83
 8012d48:	08012f8f 	.word	0x08012f8f
 8012d4c:	08012fab 	.word	0x08012fab
 8012d50:	08012f9b 	.word	0x08012f9b
 8012d54:	08012fa3 	.word	0x08012fa3
 8012d58:	0801301f 	.word	0x0801301f
 8012d5c:	08012fb7 	.word	0x08012fb7
 8012d60:	0801301f 	.word	0x0801301f
 8012d64:	0801301f 	.word	0x0801301f
 8012d68:	0801301f 	.word	0x0801301f
 8012d6c:	0801301f 	.word	0x0801301f
 8012d70:	0801301f 	.word	0x0801301f
 8012d74:	0801301f 	.word	0x0801301f
 8012d78:	0801301f 	.word	0x0801301f
 8012d7c:	0801301f 	.word	0x0801301f
 8012d80:	0801301f 	.word	0x0801301f
 8012d84:	0801301f 	.word	0x0801301f
 8012d88:	0801301f 	.word	0x0801301f
 8012d8c:	0801301f 	.word	0x0801301f
 8012d90:	0801301f 	.word	0x0801301f
 8012d94:	0801301f 	.word	0x0801301f
 8012d98:	0801301f 	.word	0x0801301f
 8012d9c:	08012fcb 	.word	0x08012fcb
 8012da0:	08012fd7 	.word	0x08012fd7
 8012da4:	08012fe3 	.word	0x08012fe3
 8012da8:	08012fef 	.word	0x08012fef
 8012dac:	08012ffb 	.word	0x08012ffb
 8012db0:	08013007 	.word	0x08013007
 8012db4:	08013013 	.word	0x08013013
 8012db8:	08013019 	.word	0x08013019
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012dbc:	4b9d      	ldr	r3, [pc, #628]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012dbe:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	711a      	strb	r2, [r3, #4]
            break;
 8012dc6:	e130      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012dc8:	4b9a      	ldr	r3, [pc, #616]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012dca:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	711a      	strb	r2, [r3, #4]
            break;
 8012dd2:	e12a      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7fa fa7b 	bl	800d2d4 <SecureElementGetDevEui>
            break;
 8012dde:	e124      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7fa faa5 	bl	800d334 <SecureElementGetJoinEui>
            break;
 8012dea:	e11e      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012dec:	4b91      	ldr	r3, [pc, #580]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012dee:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	711a      	strb	r2, [r3, #4]
            break;
 8012df6:	e118      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012df8:	4b8e      	ldr	r3, [pc, #568]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012dfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	605a      	str	r2, [r3, #4]
            break;
 8012e02:	e112      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8012e04:	4b8b      	ldr	r3, [pc, #556]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012e06:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	3304      	adds	r3, #4
 8012e0e:	4619      	mov	r1, r3
 8012e10:	4610      	mov	r0, r2
 8012e12:	f7fa fac1 	bl	800d398 <SecureElementGetDevAddr>
            break;
 8012e16:	e108      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012e18:	4b86      	ldr	r3, [pc, #536]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012e1a:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	711a      	strb	r2, [r3, #4]
            break;
 8012e22:	e102      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012e24:	4b83      	ldr	r3, [pc, #524]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012e26:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	711a      	strb	r2, [r3, #4]
            break;
 8012e2e:	e0fc      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012e30:	231c      	movs	r3, #28
 8012e32:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e34:	4b7f      	ldr	r3, [pc, #508]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012e36:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e3a:	f107 0210 	add.w	r2, r7, #16
 8012e3e:	4611      	mov	r1, r2
 8012e40:	4618      	mov	r0, r3
 8012e42:	f003 f8a7 	bl	8015f94 <RegionGetPhyParam>
 8012e46:	4603      	mov	r3, r0
 8012e48:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012e4a:	68fa      	ldr	r2, [r7, #12]
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	605a      	str	r2, [r3, #4]
            break;
 8012e50:	e0eb      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	4a77      	ldr	r2, [pc, #476]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012e56:	3304      	adds	r3, #4
 8012e58:	326c      	adds	r2, #108	@ 0x6c
 8012e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e5e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012e62:	e0e2      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	4a73      	ldr	r2, [pc, #460]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012e68:	3304      	adds	r3, #4
 8012e6a:	32b4      	adds	r2, #180	@ 0xb4
 8012e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e70:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012e74:	e0d9      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	4a6e      	ldr	r2, [pc, #440]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012e7a:	3304      	adds	r3, #4
 8012e7c:	3274      	adds	r2, #116	@ 0x74
 8012e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e82:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012e86:	e0d0      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012e8c:	3304      	adds	r3, #4
 8012e8e:	32bc      	adds	r2, #188	@ 0xbc
 8012e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e94:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012e98:	e0c7      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012e9a:	231a      	movs	r3, #26
 8012e9c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e9e:	4b65      	ldr	r3, [pc, #404]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012ea0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ea4:	f107 0210 	add.w	r2, r7, #16
 8012ea8:	4611      	mov	r1, r2
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f003 f872 	bl	8015f94 <RegionGetPhyParam>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	605a      	str	r2, [r3, #4]
            break;
 8012eba:	e0b6      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012ebc:	2319      	movs	r3, #25
 8012ebe:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ec0:	4b5c      	ldr	r3, [pc, #368]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012ec2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ec6:	f107 0210 	add.w	r2, r7, #16
 8012eca:	4611      	mov	r1, r2
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f003 f861 	bl	8015f94 <RegionGetPhyParam>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012ed6:	68fa      	ldr	r2, [r7, #12]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	605a      	str	r2, [r3, #4]
            break;
 8012edc:	e0a5      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012ede:	4b55      	ldr	r3, [pc, #340]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012ee0:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	711a      	strb	r2, [r3, #4]
            break;
 8012ee8:	e09f      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8012eea:	4b52      	ldr	r3, [pc, #328]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012eec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	605a      	str	r2, [r3, #4]
            break;
 8012ef2:	e09a      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012ef6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	605a      	str	r2, [r3, #4]
            break;
 8012efc:	e095      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012efe:	4b4d      	ldr	r3, [pc, #308]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	605a      	str	r2, [r3, #4]
            break;
 8012f06:	e090      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012f08:	4b4a      	ldr	r3, [pc, #296]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	605a      	str	r2, [r3, #4]
            break;
 8012f10:	e08b      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012f12:	4b48      	ldr	r3, [pc, #288]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	605a      	str	r2, [r3, #4]
            break;
 8012f1a:	e086      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8012f1c:	2302      	movs	r3, #2
 8012f1e:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012f20:	4b44      	ldr	r3, [pc, #272]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f22:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012f26:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f28:	4b42      	ldr	r3, [pc, #264]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f2a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012f2e:	f107 0210 	add.w	r2, r7, #16
 8012f32:	4611      	mov	r1, r2
 8012f34:	4618      	mov	r0, r3
 8012f36:	f003 f82d 	bl	8015f94 <RegionGetPhyParam>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	b25a      	sxtb	r2, r3
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	711a      	strb	r2, [r3, #4]
            break;
 8012f46:	e070      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012f48:	4b3a      	ldr	r3, [pc, #232]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f4a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	711a      	strb	r2, [r3, #4]
            break;
 8012f52:	e06a      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012f54:	4b37      	ldr	r3, [pc, #220]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f56:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	711a      	strb	r2, [r3, #4]
            break;
 8012f5e:	e064      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012f60:	4b34      	ldr	r3, [pc, #208]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f62:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	711a      	strb	r2, [r3, #4]
            break;
 8012f6a:	e05e      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012f6c:	4b31      	ldr	r3, [pc, #196]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f6e:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	711a      	strb	r2, [r3, #4]
            break;
 8012f76:	e058      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012f78:	4b2e      	ldr	r3, [pc, #184]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	605a      	str	r2, [r3, #4]
            break;
 8012f80:	e053      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012f82:	4b2c      	ldr	r3, [pc, #176]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f84:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	711a      	strb	r2, [r3, #4]
            break;
 8012f8c:	e04d      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012f8e:	4b29      	ldr	r3, [pc, #164]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f90:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	605a      	str	r2, [r3, #4]
            break;
 8012f98:	e047      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	4a25      	ldr	r2, [pc, #148]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f9e:	605a      	str	r2, [r3, #4]
            break;
 8012fa0:	e043      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	4a24      	ldr	r2, [pc, #144]	@ (8013038 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8012fa6:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8012fa8:	e03f      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012faa:	4b22      	ldr	r3, [pc, #136]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012fac:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	605a      	str	r2, [r3, #4]
            break;
 8012fb4:	e039      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012fba:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8012fbe:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012fc0:	687c      	ldr	r4, [r7, #4]
 8012fc2:	f003 f95d 	bl	8016280 <RegionGetVersion>
 8012fc6:	60a0      	str	r0, [r4, #8]
            break;
 8012fc8:	e02f      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012fca:	4b1a      	ldr	r3, [pc, #104]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012fcc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	605a      	str	r2, [r3, #4]
            break;
 8012fd4:	e029      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8012fd6:	4b17      	ldr	r3, [pc, #92]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012fd8:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	711a      	strb	r2, [r3, #4]
            break;
 8012fe0:	e023      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012fe2:	4b14      	ldr	r3, [pc, #80]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012fe4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	809a      	strh	r2, [r3, #4]
            break;
 8012fec:	e01d      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012fee:	4b11      	ldr	r3, [pc, #68]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012ff0:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	809a      	strh	r2, [r3, #4]
            break;
 8012ff8:	e017      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012ffc:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	809a      	strh	r2, [r3, #4]
            break;
 8013004:	e011      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013006:	4b0b      	ldr	r3, [pc, #44]	@ (8013034 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013008:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	809a      	strh	r2, [r3, #4]
            break;
 8013010:	e00b      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013012:	2318      	movs	r3, #24
 8013014:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013016:	e008      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013018:	2318      	movs	r3, #24
 801301a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801301c:	e005      	b.n	801302a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f001 f883 	bl	801412a <LoRaMacClassBMibGetRequestConfirm>
 8013024:	4603      	mov	r3, r0
 8013026:	75fb      	strb	r3, [r7, #23]
            break;
 8013028:	bf00      	nop
        }
    }
    return status;
 801302a:	7dfb      	ldrb	r3, [r7, #23]
}
 801302c:	4618      	mov	r0, r3
 801302e:	371c      	adds	r7, #28
 8013030:	46bd      	mov	sp, r7
 8013032:	bd90      	pop	{r4, r7, pc}
 8013034:	20000d04 	.word	0x20000d04
 8013038:	200012c0 	.word	0x200012c0

0801303c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b086      	sub	sp, #24
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013044:	2300      	movs	r3, #0
 8013046:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d101      	bne.n	8013052 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801304e:	2303      	movs	r3, #3
 8013050:	e39e      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013052:	4bbd      	ldr	r3, [pc, #756]	@ (8013348 <LoRaMacMibSetRequestConfirm+0x30c>)
 8013054:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013058:	f003 0302 	and.w	r3, r3, #2
 801305c:	2b00      	cmp	r3, #0
 801305e:	d001      	beq.n	8013064 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013060:	2301      	movs	r3, #1
 8013062:	e395      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
    }

    switch( mibSet->Type )
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2b41      	cmp	r3, #65	@ 0x41
 801306a:	f200 8365 	bhi.w	8013738 <LoRaMacMibSetRequestConfirm+0x6fc>
 801306e:	a201      	add	r2, pc, #4	@ (adr r2, 8013074 <LoRaMacMibSetRequestConfirm+0x38>)
 8013070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013074:	0801317d 	.word	0x0801317d
 8013078:	0801318d 	.word	0x0801318d
 801307c:	080131a7 	.word	0x080131a7
 8013080:	080131bf 	.word	0x080131bf
 8013084:	080131d7 	.word	0x080131d7
 8013088:	080131e3 	.word	0x080131e3
 801308c:	080131ef 	.word	0x080131ef
 8013090:	08013219 	.word	0x08013219
 8013094:	0801323f 	.word	0x0801323f
 8013098:	08013265 	.word	0x08013265
 801309c:	0801328b 	.word	0x0801328b
 80130a0:	080132b1 	.word	0x080132b1
 80130a4:	080132d7 	.word	0x080132d7
 80130a8:	080132fd 	.word	0x080132fd
 80130ac:	08013323 	.word	0x08013323
 80130b0:	08013351 	.word	0x08013351
 80130b4:	08013371 	.word	0x08013371
 80130b8:	08013739 	.word	0x08013739
 80130bc:	0801337d 	.word	0x0801337d
 80130c0:	080133ed 	.word	0x080133ed
 80130c4:	0801342d 	.word	0x0801342d
 80130c8:	0801348f 	.word	0x0801348f
 80130cc:	080134ff 	.word	0x080134ff
 80130d0:	080134cf 	.word	0x080134cf
 80130d4:	0801352f 	.word	0x0801352f
 80130d8:	08013551 	.word	0x08013551
 80130dc:	0801355b 	.word	0x0801355b
 80130e0:	08013565 	.word	0x08013565
 80130e4:	0801356f 	.word	0x0801356f
 80130e8:	08013579 	.word	0x08013579
 80130ec:	08013739 	.word	0x08013739
 80130f0:	08013583 	.word	0x08013583
 80130f4:	080135b5 	.word	0x080135b5
 80130f8:	08013629 	.word	0x08013629
 80130fc:	080135ef 	.word	0x080135ef
 8013100:	0801365b 	.word	0x0801365b
 8013104:	08013681 	.word	0x08013681
 8013108:	08013699 	.word	0x08013699
 801310c:	080136a5 	.word	0x080136a5
 8013110:	080136b1 	.word	0x080136b1
 8013114:	08013739 	.word	0x08013739
 8013118:	080136bb 	.word	0x080136bb
 801311c:	08013739 	.word	0x08013739
 8013120:	08013739 	.word	0x08013739
 8013124:	08013739 	.word	0x08013739
 8013128:	08013739 	.word	0x08013739
 801312c:	08013739 	.word	0x08013739
 8013130:	08013739 	.word	0x08013739
 8013134:	08013739 	.word	0x08013739
 8013138:	08013739 	.word	0x08013739
 801313c:	08013739 	.word	0x08013739
 8013140:	08013739 	.word	0x08013739
 8013144:	08013739 	.word	0x08013739
 8013148:	08013739 	.word	0x08013739
 801314c:	08013739 	.word	0x08013739
 8013150:	08013739 	.word	0x08013739
 8013154:	08013739 	.word	0x08013739
 8013158:	08013739 	.word	0x08013739
 801315c:	080136e5 	.word	0x080136e5
 8013160:	080136f1 	.word	0x080136f1
 8013164:	080136fd 	.word	0x080136fd
 8013168:	08013709 	.word	0x08013709
 801316c:	08013715 	.word	0x08013715
 8013170:	08013721 	.word	0x08013721
 8013174:	0801372d 	.word	0x0801372d
 8013178:	08013733 	.word	0x08013733
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	791b      	ldrb	r3, [r3, #4]
 8013180:	4618      	mov	r0, r3
 8013182:	f7fd faa5 	bl	80106d0 <SwitchClass>
 8013186:	4603      	mov	r3, r0
 8013188:	75fb      	strb	r3, [r7, #23]
            break;
 801318a:	e2f6      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	791b      	ldrb	r3, [r3, #4]
 8013190:	2b02      	cmp	r3, #2
 8013192:	d005      	beq.n	80131a0 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	791a      	ldrb	r2, [r3, #4]
 8013198:	4b6c      	ldr	r3, [pc, #432]	@ (801334c <LoRaMacMibSetRequestConfirm+0x310>)
 801319a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801319e:	e2ec      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131a0:	2303      	movs	r3, #3
 80131a2:	75fb      	strb	r3, [r7, #23]
            break;
 80131a4:	e2e9      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	685b      	ldr	r3, [r3, #4]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fa f87a 	bl	800d2a4 <SecureElementSetDevEui>
 80131b0:	4603      	mov	r3, r0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	f000 82c6 	beq.w	8013744 <LoRaMacMibSetRequestConfirm+0x708>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131b8:	2303      	movs	r3, #3
 80131ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80131bc:	e2c2      	b.n	8013744 <LoRaMacMibSetRequestConfirm+0x708>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7fa f89e 	bl	800d304 <SecureElementSetJoinEui>
 80131c8:	4603      	mov	r3, r0
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f000 82bc 	beq.w	8013748 <LoRaMacMibSetRequestConfirm+0x70c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131d0:	2303      	movs	r3, #3
 80131d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80131d4:	e2b8      	b.n	8013748 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	791a      	ldrb	r2, [r3, #4]
 80131da:	4b5c      	ldr	r3, [pc, #368]	@ (801334c <LoRaMacMibSetRequestConfirm+0x310>)
 80131dc:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 80131e0:	e2cb      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	4a59      	ldr	r2, [pc, #356]	@ (801334c <LoRaMacMibSetRequestConfirm+0x310>)
 80131e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 80131ec:	e2c5      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80131ee:	4b57      	ldr	r3, [pc, #348]	@ (801334c <LoRaMacMibSetRequestConfirm+0x310>)
 80131f0:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	4619      	mov	r1, r3
 80131fa:	4610      	mov	r0, r2
 80131fc:	f7fa f8b2 	bl	800d364 <SecureElementSetDevAddr>
 8013200:	4603      	mov	r3, r0
 8013202:	2b00      	cmp	r3, #0
 8013204:	d002      	beq.n	801320c <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013206:	2303      	movs	r3, #3
 8013208:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801320a:	e2b6      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	4a4e      	ldr	r2, [pc, #312]	@ (801334c <LoRaMacMibSetRequestConfirm+0x310>)
 8013212:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8013216:	e2b0      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	685b      	ldr	r3, [r3, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d00b      	beq.n	8013238 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	4619      	mov	r1, r3
 8013226:	2000      	movs	r0, #0
 8013228:	f002 f8c8 	bl	80153bc <LoRaMacCryptoSetKey>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	f000 828c 	beq.w	801374c <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013234:	2311      	movs	r3, #17
 8013236:	e2ab      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013238:	2303      	movs	r3, #3
 801323a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801323c:	e286      	b.n	801374c <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d00b      	beq.n	801325e <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	4619      	mov	r1, r3
 801324c:	2001      	movs	r0, #1
 801324e:	f002 f8b5 	bl	80153bc <LoRaMacCryptoSetKey>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	f000 827b 	beq.w	8013750 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801325a:	2311      	movs	r3, #17
 801325c:	e298      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801325e:	2303      	movs	r3, #3
 8013260:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013262:	e275      	b.n	8013750 <LoRaMacMibSetRequestConfirm+0x714>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	685b      	ldr	r3, [r3, #4]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d00b      	beq.n	8013284 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	685b      	ldr	r3, [r3, #4]
 8013270:	4619      	mov	r1, r3
 8013272:	2008      	movs	r0, #8
 8013274:	f002 f8a2 	bl	80153bc <LoRaMacCryptoSetKey>
 8013278:	4603      	mov	r3, r0
 801327a:	2b00      	cmp	r3, #0
 801327c:	f000 826a 	beq.w	8013754 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013280:	2311      	movs	r3, #17
 8013282:	e285      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013284:	2303      	movs	r3, #3
 8013286:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013288:	e264      	b.n	8013754 <LoRaMacMibSetRequestConfirm+0x718>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d00b      	beq.n	80132aa <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	4619      	mov	r1, r3
 8013298:	2009      	movs	r0, #9
 801329a:	f002 f88f 	bl	80153bc <LoRaMacCryptoSetKey>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	f000 8259 	beq.w	8013758 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80132a6:	2311      	movs	r3, #17
 80132a8:	e272      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132aa:	2303      	movs	r3, #3
 80132ac:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80132ae:	e253      	b.n	8013758 <LoRaMacMibSetRequestConfirm+0x71c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	685b      	ldr	r3, [r3, #4]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d00b      	beq.n	80132d0 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	685b      	ldr	r3, [r3, #4]
 80132bc:	4619      	mov	r1, r3
 80132be:	200c      	movs	r0, #12
 80132c0:	f002 f87c 	bl	80153bc <LoRaMacCryptoSetKey>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	f000 8248 	beq.w	801375c <LoRaMacMibSetRequestConfirm+0x720>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80132cc:	2311      	movs	r3, #17
 80132ce:	e25f      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132d0:	2303      	movs	r3, #3
 80132d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80132d4:	e242      	b.n	801375c <LoRaMacMibSetRequestConfirm+0x720>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	685b      	ldr	r3, [r3, #4]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00b      	beq.n	80132f6 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	4619      	mov	r1, r3
 80132e4:	200d      	movs	r0, #13
 80132e6:	f002 f869 	bl	80153bc <LoRaMacCryptoSetKey>
 80132ea:	4603      	mov	r3, r0
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f000 8237 	beq.w	8013760 <LoRaMacMibSetRequestConfirm+0x724>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80132f2:	2311      	movs	r3, #17
 80132f4:	e24c      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132f6:	2303      	movs	r3, #3
 80132f8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80132fa:	e231      	b.n	8013760 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d00b      	beq.n	801331c <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	4619      	mov	r1, r3
 801330a:	200e      	movs	r0, #14
 801330c:	f002 f856 	bl	80153bc <LoRaMacCryptoSetKey>
 8013310:	4603      	mov	r3, r0
 8013312:	2b00      	cmp	r3, #0
 8013314:	f000 8226 	beq.w	8013764 <LoRaMacMibSetRequestConfirm+0x728>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013318:	2311      	movs	r3, #17
 801331a:	e239      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801331c:	2303      	movs	r3, #3
 801331e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013320:	e220      	b.n	8013764 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d00b      	beq.n	8013342 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	685b      	ldr	r3, [r3, #4]
 801332e:	4619      	mov	r1, r3
 8013330:	200f      	movs	r0, #15
 8013332:	f002 f843 	bl	80153bc <LoRaMacCryptoSetKey>
 8013336:	4603      	mov	r3, r0
 8013338:	2b00      	cmp	r3, #0
 801333a:	f000 8215 	beq.w	8013768 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801333e:	2311      	movs	r3, #17
 8013340:	e226      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013342:	2303      	movs	r3, #3
 8013344:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013346:	e20f      	b.n	8013768 <LoRaMacMibSetRequestConfirm+0x72c>
 8013348:	200007d0 	.word	0x200007d0
 801334c:	20000d04 	.word	0x20000d04
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	791a      	ldrb	r2, [r3, #4]
 8013354:	4bb2      	ldr	r3, [pc, #712]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013356:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801335a:	4bb2      	ldr	r3, [pc, #712]	@ (8013624 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801335e:	4ab0      	ldr	r2, [pc, #704]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013360:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8013364:	4610      	mov	r0, r2
 8013366:	4798      	blx	r3
            Radio.Sleep( );
 8013368:	4bae      	ldr	r3, [pc, #696]	@ (8013624 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801336c:	4798      	blx	r3
            break;
 801336e:	e204      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	791a      	ldrb	r2, [r3, #4]
 8013374:	4baa      	ldr	r3, [pc, #680]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013376:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 801337a:	e1fe      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	7a1b      	ldrb	r3, [r3, #8]
 8013380:	b25b      	sxtb	r3, r3
 8013382:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013384:	4ba6      	ldr	r3, [pc, #664]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013386:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801338a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801338c:	4ba4      	ldr	r3, [pc, #656]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801338e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013392:	f107 0108 	add.w	r1, r7, #8
 8013396:	2207      	movs	r2, #7
 8013398:	4618      	mov	r0, r3
 801339a:	f002 fe36 	bl	801600a <RegionVerify>
 801339e:	4603      	mov	r3, r0
 80133a0:	f083 0301 	eor.w	r3, r3, #1
 80133a4:	b2db      	uxtb	r3, r3
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d002      	beq.n	80133b0 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133aa:	2303      	movs	r3, #3
 80133ac:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 80133ae:	e1e4      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80133b6:	4b9a      	ldr	r3, [pc, #616]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80133b8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80133bc:	f107 0108 	add.w	r1, r7, #8
 80133c0:	2200      	movs	r2, #0
 80133c2:	4618      	mov	r0, r3
 80133c4:	f002 fe21 	bl	801600a <RegionVerify>
 80133c8:	4603      	mov	r3, r0
 80133ca:	f083 0301 	eor.w	r3, r3, #1
 80133ce:	b2db      	uxtb	r3, r3
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d002      	beq.n	80133da <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133d4:	2303      	movs	r3, #3
 80133d6:	75fb      	strb	r3, [r7, #23]
            break;
 80133d8:	e1cf      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80133da:	4b91      	ldr	r3, [pc, #580]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	336c      	adds	r3, #108	@ 0x6c
 80133e0:	3204      	adds	r2, #4
 80133e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133e6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80133ea:	e1c6      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	7a1b      	ldrb	r3, [r3, #8]
 80133f0:	b25b      	sxtb	r3, r3
 80133f2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80133f4:	4b8a      	ldr	r3, [pc, #552]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80133f6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80133fa:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80133fc:	4b88      	ldr	r3, [pc, #544]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80133fe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013402:	f107 0108 	add.w	r1, r7, #8
 8013406:	2207      	movs	r2, #7
 8013408:	4618      	mov	r0, r3
 801340a:	f002 fdfe 	bl	801600a <RegionVerify>
 801340e:	4603      	mov	r3, r0
 8013410:	2b00      	cmp	r3, #0
 8013412:	d008      	beq.n	8013426 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013414:	4b82      	ldr	r3, [pc, #520]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	33b4      	adds	r3, #180	@ 0xb4
 801341a:	3204      	adds	r2, #4
 801341c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013420:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013424:	e1a9      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013426:	2303      	movs	r3, #3
 8013428:	75fb      	strb	r3, [r7, #23]
            break;
 801342a:	e1a6      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	7a1b      	ldrb	r3, [r3, #8]
 8013430:	b25b      	sxtb	r3, r3
 8013432:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013434:	4b7a      	ldr	r3, [pc, #488]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013436:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801343a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801343c:	4b78      	ldr	r3, [pc, #480]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801343e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013442:	f107 0108 	add.w	r1, r7, #8
 8013446:	2207      	movs	r2, #7
 8013448:	4618      	mov	r0, r3
 801344a:	f002 fdde 	bl	801600a <RegionVerify>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d019      	beq.n	8013488 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013454:	4b72      	ldr	r3, [pc, #456]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	3374      	adds	r3, #116	@ 0x74
 801345a:	3204      	adds	r2, #4
 801345c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013460:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013464:	4b6e      	ldr	r3, [pc, #440]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013466:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801346a:	2b02      	cmp	r3, #2
 801346c:	f040 817e 	bne.w	801376c <LoRaMacMibSetRequestConfirm+0x730>
 8013470:	4b6b      	ldr	r3, [pc, #428]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013472:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8013476:	2b00      	cmp	r3, #0
 8013478:	f000 8178 	beq.w	801376c <LoRaMacMibSetRequestConfirm+0x730>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801347c:	4b69      	ldr	r3, [pc, #420]	@ (8013624 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013480:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013482:	f7fe fc1d 	bl	8011cc0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013486:	e171      	b.n	801376c <LoRaMacMibSetRequestConfirm+0x730>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013488:	2303      	movs	r3, #3
 801348a:	75fb      	strb	r3, [r7, #23]
            break;
 801348c:	e16e      	b.n	801376c <LoRaMacMibSetRequestConfirm+0x730>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	7a1b      	ldrb	r3, [r3, #8]
 8013492:	b25b      	sxtb	r3, r3
 8013494:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013496:	4b62      	ldr	r3, [pc, #392]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013498:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801349c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801349e:	4b60      	ldr	r3, [pc, #384]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80134a0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80134a4:	f107 0108 	add.w	r1, r7, #8
 80134a8:	2207      	movs	r2, #7
 80134aa:	4618      	mov	r0, r3
 80134ac:	f002 fdad 	bl	801600a <RegionVerify>
 80134b0:	4603      	mov	r3, r0
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d008      	beq.n	80134c8 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80134b6:	4b5a      	ldr	r3, [pc, #360]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80134b8:	687a      	ldr	r2, [r7, #4]
 80134ba:	33bc      	adds	r3, #188	@ 0xbc
 80134bc:	3204      	adds	r2, #4
 80134be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134c2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80134c6:	e158      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134c8:	2303      	movs	r3, #3
 80134ca:	75fb      	strb	r3, [r7, #23]
            break;
 80134cc:	e155      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80134d4:	2301      	movs	r3, #1
 80134d6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80134d8:	4b51      	ldr	r3, [pc, #324]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80134da:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80134de:	f107 020c 	add.w	r2, r7, #12
 80134e2:	4611      	mov	r1, r2
 80134e4:	4618      	mov	r0, r3
 80134e6:	f002 fdb9 	bl	801605c <RegionChanMaskSet>
 80134ea:	4603      	mov	r3, r0
 80134ec:	f083 0301 	eor.w	r3, r3, #1
 80134f0:	b2db      	uxtb	r3, r3
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f000 813c 	beq.w	8013770 <LoRaMacMibSetRequestConfirm+0x734>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134f8:	2303      	movs	r3, #3
 80134fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80134fc:	e138      	b.n	8013770 <LoRaMacMibSetRequestConfirm+0x734>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	685b      	ldr	r3, [r3, #4]
 8013502:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013504:	2300      	movs	r3, #0
 8013506:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013508:	4b45      	ldr	r3, [pc, #276]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801350a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801350e:	f107 020c 	add.w	r2, r7, #12
 8013512:	4611      	mov	r1, r2
 8013514:	4618      	mov	r0, r3
 8013516:	f002 fda1 	bl	801605c <RegionChanMaskSet>
 801351a:	4603      	mov	r3, r0
 801351c:	f083 0301 	eor.w	r3, r3, #1
 8013520:	b2db      	uxtb	r3, r3
 8013522:	2b00      	cmp	r3, #0
 8013524:	f000 8126 	beq.w	8013774 <LoRaMacMibSetRequestConfirm+0x738>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013528:	2303      	movs	r3, #3
 801352a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801352c:	e122      	b.n	8013774 <LoRaMacMibSetRequestConfirm+0x738>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	791b      	ldrb	r3, [r3, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d009      	beq.n	801354a <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801353a:	2b0f      	cmp	r3, #15
 801353c:	d805      	bhi.n	801354a <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	791a      	ldrb	r2, [r3, #4]
 8013542:	4b37      	ldr	r3, [pc, #220]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013544:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013548:	e117      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801354a:	2303      	movs	r3, #3
 801354c:	75fb      	strb	r3, [r7, #23]
            break;
 801354e:	e114      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	4a32      	ldr	r2, [pc, #200]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013556:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8013558:	e10f      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	4a30      	ldr	r2, [pc, #192]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013560:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8013562:	e10a      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	4a2d      	ldr	r2, [pc, #180]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801356a:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 801356c:	e105      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	685b      	ldr	r3, [r3, #4]
 8013572:	4a2b      	ldr	r2, [pc, #172]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013574:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8013576:	e100      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	685b      	ldr	r3, [r3, #4]
 801357c:	4a28      	ldr	r2, [pc, #160]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801357e:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8013580:	e0fb      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013588:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801358a:	4b25      	ldr	r3, [pc, #148]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801358c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013590:	f107 0108 	add.w	r1, r7, #8
 8013594:	2206      	movs	r2, #6
 8013596:	4618      	mov	r0, r3
 8013598:	f002 fd37 	bl	801600a <RegionVerify>
 801359c:	4603      	mov	r3, r0
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d005      	beq.n	80135ae <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80135a2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80135a6:	4b1e      	ldr	r3, [pc, #120]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80135a8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80135ac:	e0e5      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135ae:	2303      	movs	r3, #3
 80135b0:	75fb      	strb	r3, [r7, #23]
            break;
 80135b2:	e0e2      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80135ba:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80135bc:	4b18      	ldr	r3, [pc, #96]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80135be:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80135c2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80135c4:	4b16      	ldr	r3, [pc, #88]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80135c6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135ca:	f107 0108 	add.w	r1, r7, #8
 80135ce:	2205      	movs	r2, #5
 80135d0:	4618      	mov	r0, r3
 80135d2:	f002 fd1a 	bl	801600a <RegionVerify>
 80135d6:	4603      	mov	r3, r0
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d005      	beq.n	80135e8 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80135dc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80135e0:	4b0f      	ldr	r3, [pc, #60]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80135e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80135e6:	e0c8      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135e8:	2303      	movs	r3, #3
 80135ea:	75fb      	strb	r3, [r7, #23]
            break;
 80135ec:	e0c5      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80135f4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80135f6:	4b0a      	ldr	r3, [pc, #40]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80135f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135fc:	f107 0108 	add.w	r1, r7, #8
 8013600:	220a      	movs	r2, #10
 8013602:	4618      	mov	r0, r3
 8013604:	f002 fd01 	bl	801600a <RegionVerify>
 8013608:	4603      	mov	r3, r0
 801360a:	2b00      	cmp	r3, #0
 801360c:	d005      	beq.n	801361a <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801360e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013612:	4b03      	ldr	r3, [pc, #12]	@ (8013620 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013614:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013618:	e0af      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801361a:	2303      	movs	r3, #3
 801361c:	75fb      	strb	r3, [r7, #23]
            break;
 801361e:	e0ac      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
 8013620:	20000d04 	.word	0x20000d04
 8013624:	0801df14 	.word	0x0801df14
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801362e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013630:	4b59      	ldr	r3, [pc, #356]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013632:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013636:	f107 0108 	add.w	r1, r7, #8
 801363a:	2209      	movs	r2, #9
 801363c:	4618      	mov	r0, r3
 801363e:	f002 fce4 	bl	801600a <RegionVerify>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d005      	beq.n	8013654 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013648:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801364c:	4b52      	ldr	r3, [pc, #328]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 801364e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013652:	e092      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013654:	2303      	movs	r3, #3
 8013656:	75fb      	strb	r3, [r7, #23]
            break;
 8013658:	e08f      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mibSet->Param.SystemMaxRxError <= 500 )
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8013662:	d80a      	bhi.n	801367a <LoRaMacMibSetRequestConfirm+0x63e>
            { // Only apply the new value if in range 0..500 ms else keep current value.
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	4a4b      	ldr	r2, [pc, #300]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 801366a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 801366e:	4b4a      	ldr	r3, [pc, #296]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013674:	4a48      	ldr	r2, [pc, #288]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013676:	64d3      	str	r3, [r2, #76]	@ 0x4c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
#endif
            break;
 8013678:	e07f      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801367a:	2303      	movs	r3, #3
 801367c:	75fb      	strb	r3, [r7, #23]
            break;
 801367e:	e07c      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	791a      	ldrb	r2, [r3, #4]
 8013684:	4b44      	ldr	r3, [pc, #272]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013686:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 801368a:	4b43      	ldr	r3, [pc, #268]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 801368c:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8013690:	4b41      	ldr	r3, [pc, #260]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8013696:	e070      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	4a3e      	ldr	r2, [pc, #248]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 801369e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 80136a2:	e06a      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	685b      	ldr	r3, [r3, #4]
 80136a8:	4a3b      	ldr	r2, [pc, #236]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 80136aa:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 80136ae:	e064      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80136b0:	f7fe fd38 	bl	8012124 <RestoreNvmData>
 80136b4:	4603      	mov	r3, r0
 80136b6:	75fb      	strb	r3, [r7, #23]
            break;
 80136b8:	e05f      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	799b      	ldrb	r3, [r3, #6]
 80136be:	2b01      	cmp	r3, #1
 80136c0:	d80d      	bhi.n	80136de <LoRaMacMibSetRequestConfirm+0x6a2>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80136c2:	4a35      	ldr	r2, [pc, #212]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6858      	ldr	r0, [r3, #4]
 80136d0:	f001 fdd6 	bl	8015280 <LoRaMacCryptoSetLrWanVersion>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d04e      	beq.n	8013778 <LoRaMacMibSetRequestConfirm+0x73c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80136da:	2311      	movs	r3, #17
 80136dc:	e058      	b.n	8013790 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136de:	2303      	movs	r3, #3
 80136e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80136e2:	e049      	b.n	8013778 <LoRaMacMibSetRequestConfirm+0x73c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	685b      	ldr	r3, [r3, #4]
 80136e8:	4a2b      	ldr	r2, [pc, #172]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 80136ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 80136ee:	e044      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	791a      	ldrb	r2, [r3, #4]
 80136f4:	4b28      	ldr	r3, [pc, #160]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 80136f6:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 80136fa:	e03e      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	889a      	ldrh	r2, [r3, #4]
 8013700:	4b25      	ldr	r3, [pc, #148]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013702:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8013706:	e038      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	889a      	ldrh	r2, [r3, #4]
 801370c:	4b22      	ldr	r3, [pc, #136]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 801370e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8013712:	e032      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	889a      	ldrh	r2, [r3, #4]
 8013718:	4b1f      	ldr	r3, [pc, #124]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 801371a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 801371e:	e02c      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	889a      	ldrh	r2, [r3, #4]
 8013724:	4b1c      	ldr	r3, [pc, #112]	@ (8013798 <LoRaMacMibSetRequestConfirm+0x75c>)
 8013726:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 801372a:	e026      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801372c:	2318      	movs	r3, #24
 801372e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013730:	e023      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013732:	2318      	movs	r3, #24
 8013734:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013736:	e020      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	f000 fd00 	bl	801413e <LoRaMacMibClassBSetRequestConfirm>
 801373e:	4603      	mov	r3, r0
 8013740:	75fb      	strb	r3, [r7, #23]
            break;
 8013742:	e01a      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013744:	bf00      	nop
 8013746:	e018      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013748:	bf00      	nop
 801374a:	e016      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801374c:	bf00      	nop
 801374e:	e014      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013750:	bf00      	nop
 8013752:	e012      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013754:	bf00      	nop
 8013756:	e010      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013758:	bf00      	nop
 801375a:	e00e      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801375c:	bf00      	nop
 801375e:	e00c      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013760:	bf00      	nop
 8013762:	e00a      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013764:	bf00      	nop
 8013766:	e008      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013768:	bf00      	nop
 801376a:	e006      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801376c:	bf00      	nop
 801376e:	e004      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013770:	bf00      	nop
 8013772:	e002      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013774:	bf00      	nop
 8013776:	e000      	b.n	801377a <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013778:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 801377a:	7dfb      	ldrb	r3, [r7, #23]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d106      	bne.n	801378e <LoRaMacMibSetRequestConfirm+0x752>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013780:	4a06      	ldr	r2, [pc, #24]	@ (801379c <LoRaMacMibSetRequestConfirm+0x760>)
 8013782:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013786:	f043 0320 	orr.w	r3, r3, #32
 801378a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 801378e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013790:	4618      	mov	r0, r3
 8013792:	3718      	adds	r7, #24
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}
 8013798:	20000d04 	.word	0x20000d04
 801379c:	200007d0 	.word	0x200007d0

080137a0 <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b082      	sub	sp, #8
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 80137a8:	4b0a      	ldr	r3, [pc, #40]	@ (80137d4 <OnAbpJoinPendingTimerEvent+0x34>)
 80137aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80137ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80137b2:	4a08      	ldr	r2, [pc, #32]	@ (80137d4 <OnAbpJoinPendingTimerEvent+0x34>)
 80137b4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 80137b8:	4a06      	ldr	r2, [pc, #24]	@ (80137d4 <OnAbpJoinPendingTimerEvent+0x34>)
 80137ba:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80137be:	f043 0310 	orr.w	r3, r3, #16
 80137c2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    OnMacProcessNotify( );
 80137c6:	f7fe fe5d 	bl	8012484 <OnMacProcessNotify>
}
 80137ca:	bf00      	nop
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	200007d0 	.word	0x200007d0

080137d8 <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b082      	sub	sp, #8
 80137dc:	af02      	add	r7, sp, #8
    static bool initialized = false;

    if( initialized == false )
 80137de:	4b14      	ldr	r3, [pc, #80]	@ (8013830 <AbpJoinPendingStart+0x58>)
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	f083 0301 	eor.w	r3, r3, #1
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d00b      	beq.n	8013804 <AbpJoinPendingStart+0x2c>
    {
        initialized = true;
 80137ec:	4b10      	ldr	r3, [pc, #64]	@ (8013830 <AbpJoinPendingStart+0x58>)
 80137ee:	2201      	movs	r2, #1
 80137f0:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 80137f2:	2300      	movs	r3, #0
 80137f4:	9300      	str	r3, [sp, #0]
 80137f6:	4b0f      	ldr	r3, [pc, #60]	@ (8013834 <AbpJoinPendingStart+0x5c>)
 80137f8:	2200      	movs	r2, #0
 80137fa:	f04f 31ff 	mov.w	r1, #4294967295
 80137fe:	480e      	ldr	r0, [pc, #56]	@ (8013838 <AbpJoinPendingStart+0x60>)
 8013800:	f008 fea2 	bl	801c548 <UTIL_TIMER_Create>
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 8013804:	4b0d      	ldr	r3, [pc, #52]	@ (801383c <AbpJoinPendingStart+0x64>)
 8013806:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801380a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801380e:	4a0b      	ldr	r2, [pc, #44]	@ (801383c <AbpJoinPendingStart+0x64>)
 8013810:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 8013814:	4808      	ldr	r0, [pc, #32]	@ (8013838 <AbpJoinPendingStart+0x60>)
 8013816:	f008 ff3b 	bl	801c690 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 801381a:	210a      	movs	r1, #10
 801381c:	4806      	ldr	r0, [pc, #24]	@ (8013838 <AbpJoinPendingStart+0x60>)
 801381e:	f008 ffa7 	bl	801c770 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 8013822:	4805      	ldr	r0, [pc, #20]	@ (8013838 <AbpJoinPendingStart+0x60>)
 8013824:	f008 fec6 	bl	801c5b4 <UTIL_TIMER_Start>
}
 8013828:	bf00      	nop
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	20001924 	.word	0x20001924
 8013834:	080137a1 	.word	0x080137a1
 8013838:	20000c6c 	.word	0x20000c6c
 801383c:	200007d0 	.word	0x200007d0

08013840 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b08a      	sub	sp, #40	@ 0x28
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013848:	2302      	movs	r3, #2
 801384a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
 801384e:	2300      	movs	r3, #0
 8013850:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013854:	2300      	movs	r3, #0
 8013856:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d101      	bne.n	8013862 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801385e:	2303      	movs	r3, #3
 8013860:	e188      	b.n	8013b74 <LoRaMacMlmeRequest+0x334>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2200      	movs	r2, #0
 8013866:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8013868:	f7fc fb14 	bl	800fe94 <LoRaMacIsBusy>
 801386c:	4603      	mov	r3, r0
 801386e:	2b00      	cmp	r3, #0
 8013870:	d001      	beq.n	8013876 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8013872:	2301      	movs	r3, #1
 8013874:	e17e      	b.n	8013b74 <LoRaMacMlmeRequest+0x334>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013876:	f001 f99d 	bl	8014bb4 <LoRaMacConfirmQueueIsFull>
 801387a:	4603      	mov	r3, r0
 801387c:	2b00      	cmp	r3, #0
 801387e:	d001      	beq.n	8013884 <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8013880:	2301      	movs	r3, #1
 8013882:	e177      	b.n	8013b74 <LoRaMacMlmeRequest+0x334>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013884:	f001 f98a 	bl	8014b9c <LoRaMacConfirmQueueGetCnt>
 8013888:	4603      	mov	r3, r0
 801388a:	2b00      	cmp	r3, #0
 801388c:	d104      	bne.n	8013898 <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801388e:	2214      	movs	r2, #20
 8013890:	2100      	movs	r1, #0
 8013892:	48ba      	ldr	r0, [pc, #744]	@ (8013b7c <LoRaMacMlmeRequest+0x33c>)
 8013894:	f004 fde4 	bl	8018460 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013898:	4bb9      	ldr	r3, [pc, #740]	@ (8013b80 <LoRaMacMlmeRequest+0x340>)
 801389a:	2201      	movs	r2, #1
 801389c:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80138a0:	4ab7      	ldr	r2, [pc, #732]	@ (8013b80 <LoRaMacMlmeRequest+0x340>)
 80138a2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80138a6:	f043 0304 	orr.w	r3, r3, #4
 80138aa:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80138b6:	2301      	movs	r3, #1
 80138b8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80138bc:	2300      	movs	r3, #0
 80138be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 80138c2:	2300      	movs	r3, #0
 80138c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	3b01      	subs	r3, #1
 80138ce:	2b0c      	cmp	r3, #12
 80138d0:	f200 811e 	bhi.w	8013b10 <LoRaMacMlmeRequest+0x2d0>
 80138d4:	a201      	add	r2, pc, #4	@ (adr r2, 80138dc <LoRaMacMlmeRequest+0x9c>)
 80138d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138da:	bf00      	nop
 80138dc:	08013911 	.word	0x08013911
 80138e0:	08013b11 	.word	0x08013b11
 80138e4:	08013b11 	.word	0x08013b11
 80138e8:	08013b11 	.word	0x08013b11
 80138ec:	080139f5 	.word	0x080139f5
 80138f0:	08013a19 	.word	0x08013a19
 80138f4:	08013b11 	.word	0x08013b11
 80138f8:	08013b11 	.word	0x08013b11
 80138fc:	08013a37 	.word	0x08013a37
 8013900:	08013b11 	.word	0x08013b11
 8013904:	08013adf 	.word	0x08013adf
 8013908:	08013a73 	.word	0x08013a73
 801390c:	08013abd 	.word	0x08013abd
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013910:	4b9b      	ldr	r3, [pc, #620]	@ (8013b80 <LoRaMacMlmeRequest+0x340>)
 8013912:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013916:	f003 0320 	and.w	r3, r3, #32
 801391a:	2b00      	cmp	r3, #0
 801391c:	d001      	beq.n	8013922 <LoRaMacMlmeRequest+0xe2>
            {
                return LORAMAC_STATUS_BUSY;
 801391e:	2301      	movs	r3, #1
 8013920:	e128      	b.n	8013b74 <LoRaMacMlmeRequest+0x334>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	791b      	ldrb	r3, [r3, #4]
 8013926:	2b02      	cmp	r3, #2
 8013928:	d135      	bne.n	8013996 <LoRaMacMlmeRequest+0x156>
            {
                ResetMacParameters( false );
 801392a:	2000      	movs	r0, #0
 801392c:	f7fe f85a 	bl	80119e4 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013930:	4b94      	ldr	r3, [pc, #592]	@ (8013b84 <LoRaMacMlmeRequest+0x344>)
 8013932:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	795b      	ldrb	r3, [r3, #5]
 801393a:	b25b      	sxtb	r3, r3
 801393c:	2200      	movs	r2, #0
 801393e:	4619      	mov	r1, r3
 8013940:	f002 fc4b 	bl	80161da <RegionAlternateDr>
 8013944:	4603      	mov	r3, r0
 8013946:	461a      	mov	r2, r3
 8013948:	4b8e      	ldr	r3, [pc, #568]	@ (8013b84 <LoRaMacMlmeRequest+0x344>)
 801394a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8013954:	4b8b      	ldr	r3, [pc, #556]	@ (8013b84 <LoRaMacMlmeRequest+0x344>)
 8013956:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801395a:	2307      	movs	r3, #7
 801395c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8013960:	20ff      	movs	r0, #255	@ 0xff
 8013962:	f7fd fdc3 	bl	80114ec <SendReJoinReq>
 8013966:	4603      	mov	r3, r0
 8013968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 801396c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013970:	2b00      	cmp	r3, #0
 8013972:	f000 80cf 	beq.w	8013b14 <LoRaMacMlmeRequest+0x2d4>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013976:	4b83      	ldr	r3, [pc, #524]	@ (8013b84 <LoRaMacMlmeRequest+0x344>)
 8013978:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	795b      	ldrb	r3, [r3, #5]
 8013980:	b25b      	sxtb	r3, r3
 8013982:	2201      	movs	r2, #1
 8013984:	4619      	mov	r1, r3
 8013986:	f002 fc28 	bl	80161da <RegionAlternateDr>
 801398a:	4603      	mov	r3, r0
 801398c:	461a      	mov	r2, r3
 801398e:	4b7d      	ldr	r3, [pc, #500]	@ (8013b84 <LoRaMacMlmeRequest+0x344>)
 8013990:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8013994:	e0be      	b.n	8013b14 <LoRaMacMlmeRequest+0x2d4>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	791b      	ldrb	r3, [r3, #4]
 801399a:	2b01      	cmp	r3, #1
 801399c:	f040 80ba 	bne.w	8013b14 <LoRaMacMlmeRequest+0x2d4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80139a0:	4b78      	ldr	r3, [pc, #480]	@ (8013b84 <LoRaMacMlmeRequest+0x344>)
 80139a2:	2200      	movs	r2, #0
 80139a4:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80139a8:	2302      	movs	r3, #2
 80139aa:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80139ac:	4b75      	ldr	r3, [pc, #468]	@ (8013b84 <LoRaMacMlmeRequest+0x344>)
 80139ae:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80139b2:	f107 020c 	add.w	r2, r7, #12
 80139b6:	4611      	mov	r1, r2
 80139b8:	4618      	mov	r0, r3
 80139ba:	f002 fb14 	bl	8015fe6 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	791a      	ldrb	r2, [r3, #4]
 80139c2:	4b70      	ldr	r3, [pc, #448]	@ (8013b84 <LoRaMacMlmeRequest+0x344>)
 80139c4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80139c8:	2300      	movs	r3, #0
 80139ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80139ce:	2301      	movs	r3, #1
 80139d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 80139d4:	f7fe fd56 	bl	8012484 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80139d8:	4a69      	ldr	r2, [pc, #420]	@ (8013b80 <LoRaMacMlmeRequest+0x340>)
 80139da:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80139de:	f043 0310 	orr.w	r3, r3, #16
 80139e2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                isAbpJoinPending = true;
 80139e6:	2301      	movs	r3, #1
 80139e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                status = LORAMAC_STATUS_OK;
 80139ec:	2300      	movs	r3, #0
 80139ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80139f2:	e08f      	b.n	8013b14 <LoRaMacMlmeRequest+0x2d4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80139fa:	f107 031c 	add.w	r3, r7, #28
 80139fe:	2200      	movs	r2, #0
 8013a00:	4619      	mov	r1, r3
 8013a02:	2002      	movs	r0, #2
 8013a04:	f000 fd26 	bl	8014454 <LoRaMacCommandsAddCmd>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	f000 8084 	beq.w	8013b18 <LoRaMacMlmeRequest+0x2d8>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013a10:	2313      	movs	r3, #19
 8013a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8013a16:	e07f      	b.n	8013b18 <LoRaMacMlmeRequest+0x2d8>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	8898      	ldrh	r0, [r3, #4]
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	6899      	ldr	r1, [r3, #8]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	461a      	mov	r2, r3
 8013a2a:	f7fe fb5b 	bl	80120e4 <SetTxContinuousWave>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013a34:	e077      	b.n	8013b26 <LoRaMacMlmeRequest+0x2e6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013a36:	2300      	movs	r3, #0
 8013a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8013a3c:	f107 0308 	add.w	r3, r7, #8
 8013a40:	4619      	mov	r1, r3
 8013a42:	200d      	movs	r0, #13
 8013a44:	f000 fd86 	bl	8014554 <LoRaMacCommandsGetCmd>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d103      	bne.n	8013a56 <LoRaMacMlmeRequest+0x216>
            {
                status = LORAMAC_STATUS_OK;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8013a54:	e062      	b.n	8013b1c <LoRaMacMlmeRequest+0x2dc>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013a56:	f107 031c 	add.w	r3, r7, #28
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	200d      	movs	r0, #13
 8013a60:	f000 fcf8 	bl	8014454 <LoRaMacCommandsAddCmd>
 8013a64:	4603      	mov	r3, r0
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d058      	beq.n	8013b1c <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013a6a:	2313      	movs	r3, #19
 8013a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013a70:	e054      	b.n	8013b1c <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013a72:	4b44      	ldr	r3, [pc, #272]	@ (8013b84 <LoRaMacMlmeRequest+0x344>)
 8013a74:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d151      	bne.n	8013b20 <LoRaMacMlmeRequest+0x2e0>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	791b      	ldrb	r3, [r3, #4]
 8013a80:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	791b      	ldrb	r3, [r3, #4]
 8013a88:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013a8c:	b2db      	uxtb	r3, r3
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f000 fb2a 	bl	80140e8 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8013a94:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013a98:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013aa0:	f107 031c 	add.w	r3, r7, #28
 8013aa4:	2201      	movs	r2, #1
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	2010      	movs	r0, #16
 8013aaa:	f000 fcd3 	bl	8014454 <LoRaMacCommandsAddCmd>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d035      	beq.n	8013b20 <LoRaMacMlmeRequest+0x2e0>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013ab4:	2313      	movs	r3, #19
 8013ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 8013aba:	e031      	b.n	8013b20 <LoRaMacMlmeRequest+0x2e0>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013abc:	2300      	movs	r3, #0
 8013abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013ac2:	f107 031c 	add.w	r3, r7, #28
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	4619      	mov	r1, r3
 8013aca:	2012      	movs	r0, #18
 8013acc:	f000 fcc2 	bl	8014454 <LoRaMacCommandsAddCmd>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d026      	beq.n	8013b24 <LoRaMacMlmeRequest+0x2e4>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013ad6:	2313      	movs	r3, #19
 8013ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8013adc:	e022      	b.n	8013b24 <LoRaMacMlmeRequest+0x2e4>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013ae4:	f000 fab6 	bl	8014054 <LoRaMacClassBIsAcquisitionInProgress>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	f083 0301 	eor.w	r3, r3, #1
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d009      	beq.n	8013b08 <LoRaMacMlmeRequest+0x2c8>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013af4:	2000      	movs	r0, #0
 8013af6:	f000 fa8f 	bl	8014018 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013afa:	2000      	movs	r0, #0
 8013afc:	f000 fab1 	bl	8014062 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013b00:	2300      	movs	r3, #0
 8013b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013b06:	e00e      	b.n	8013b26 <LoRaMacMlmeRequest+0x2e6>
                status = LORAMAC_STATUS_BUSY;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013b0e:	e00a      	b.n	8013b26 <LoRaMacMlmeRequest+0x2e6>
        }
        default:
            break;
 8013b10:	bf00      	nop
 8013b12:	e008      	b.n	8013b26 <LoRaMacMlmeRequest+0x2e6>
            break;
 8013b14:	bf00      	nop
 8013b16:	e006      	b.n	8013b26 <LoRaMacMlmeRequest+0x2e6>
            break;
 8013b18:	bf00      	nop
 8013b1a:	e004      	b.n	8013b26 <LoRaMacMlmeRequest+0x2e6>
            break;
 8013b1c:	bf00      	nop
 8013b1e:	e002      	b.n	8013b26 <LoRaMacMlmeRequest+0x2e6>
            break;
 8013b20:	bf00      	nop
 8013b22:	e000      	b.n	8013b26 <LoRaMacMlmeRequest+0x2e6>
            break;
 8013b24:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013b26:	4b16      	ldr	r3, [pc, #88]	@ (8013b80 <LoRaMacMlmeRequest+0x340>)
 8013b28:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d010      	beq.n	8013b5a <LoRaMacMlmeRequest+0x31a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013b38:	f001 f830 	bl	8014b9c <LoRaMacConfirmQueueGetCnt>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d116      	bne.n	8013b70 <LoRaMacMlmeRequest+0x330>
        {
            MacCtx.NodeAckRequested = false;
 8013b42:	4b0f      	ldr	r3, [pc, #60]	@ (8013b80 <LoRaMacMlmeRequest+0x340>)
 8013b44:	2200      	movs	r2, #0
 8013b46:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8013b80 <LoRaMacMlmeRequest+0x340>)
 8013b4c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013b50:	f023 0304 	bic.w	r3, r3, #4
 8013b54:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8013b58:	e00a      	b.n	8013b70 <LoRaMacMlmeRequest+0x330>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013b5a:	f107 0320 	add.w	r3, r7, #32
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f000 fec8 	bl	80148f4 <LoRaMacConfirmQueueAdd>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        if( isAbpJoinPending == true )
 8013b64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d001      	beq.n	8013b70 <LoRaMacMlmeRequest+0x330>
        {
            AbpJoinPendingStart( );
 8013b6c:	f7ff fe34 	bl	80137d8 <AbpJoinPendingStart>
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 8013b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3728      	adds	r7, #40	@ 0x28
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}
 8013b7c:	20000c24 	.word	0x20000c24
 8013b80:	200007d0 	.word	0x200007d0
 8013b84:	20000d04 	.word	0x20000d04

08013b88 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013b88:	b5b0      	push	{r4, r5, r7, lr}
 8013b8a:	b092      	sub	sp, #72	@ 0x48
 8013b8c:	af02      	add	r7, sp, #8
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	460b      	mov	r3, r1
 8013b92:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013b94:	2302      	movs	r3, #2
 8013b96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 8013baa:	2300      	movs	r3, #0
 8013bac:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d101      	bne.n	8013bba <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013bb6:	2303      	movs	r3, #3
 8013bb8:	e113      	b.n	8013de2 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8013bc0:	f7fc f968 	bl	800fe94 <LoRaMacIsBusy>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d001      	beq.n	8013bce <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	e109      	b.n	8013de2 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f107 040c 	add.w	r4, r7, #12
 8013bd4:	461d      	mov	r5, r3
 8013bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bda:	682b      	ldr	r3, [r5, #0]
 8013bdc:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8013bde:	2300      	movs	r3, #0
 8013be0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013be4:	2214      	movs	r2, #20
 8013be6:	2100      	movs	r1, #0
 8013be8:	4880      	ldr	r0, [pc, #512]	@ (8013dec <LoRaMacMcpsRequest+0x264>)
 8013bea:	f004 fc39 	bl	8018460 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013bee:	4b80      	ldr	r3, [pc, #512]	@ (8013df0 <LoRaMacMcpsRequest+0x268>)
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8013bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013bf8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8013bfc:	2b02      	cmp	r3, #2
 8013bfe:	d111      	bne.n	8013c24 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013c00:	4b7c      	ldr	r3, [pc, #496]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013c02:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8013c06:	2b02      	cmp	r3, #2
 8013c08:	d10c      	bne.n	8013c24 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013c0a:	4b7a      	ldr	r3, [pc, #488]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013c0c:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8013c10:	f083 0301 	eor.w	r3, r3, #1
 8013c14:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d004      	beq.n	8013c24 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8013c1a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d101      	bne.n	8013c24 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013c20:	2301      	movs	r3, #1
 8013c22:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8013c24:	7b3b      	ldrb	r3, [r7, #12]
 8013c26:	2b03      	cmp	r3, #3
 8013c28:	d030      	beq.n	8013c8c <LoRaMacMcpsRequest+0x104>
 8013c2a:	2b03      	cmp	r3, #3
 8013c2c:	dc3f      	bgt.n	8013cae <LoRaMacMcpsRequest+0x126>
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d002      	beq.n	8013c38 <LoRaMacMcpsRequest+0xb0>
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d015      	beq.n	8013c62 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013c36:	e03a      	b.n	8013cae <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8013c38:	2301      	movs	r3, #1
 8013c3a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013c3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013c42:	2202      	movs	r2, #2
 8013c44:	f362 1347 	bfi	r3, r2, #5, #3
 8013c48:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8013c4c:	7c3b      	ldrb	r3, [r7, #16]
 8013c4e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8013c56:	8b3b      	ldrh	r3, [r7, #24]
 8013c58:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8013c5a:	7ebb      	ldrb	r3, [r7, #26]
 8013c5c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013c60:	e026      	b.n	8013cb0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013c62:	2301      	movs	r3, #1
 8013c64:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013c68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013c6c:	2204      	movs	r2, #4
 8013c6e:	f362 1347 	bfi	r3, r2, #5, #3
 8013c72:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8013c76:	7c3b      	ldrb	r3, [r7, #16]
 8013c78:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8013c80:	8b3b      	ldrh	r3, [r7, #24]
 8013c82:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8013c84:	7ebb      	ldrb	r3, [r7, #26]
 8013c86:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013c8a:	e011      	b.n	8013cb0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013c92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013c96:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8013c9a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8013ca2:	8abb      	ldrh	r3, [r7, #20]
 8013ca4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8013ca6:	7dbb      	ldrb	r3, [r7, #22]
 8013ca8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013cac:	e000      	b.n	8013cb0 <LoRaMacMcpsRequest+0x128>
            break;
 8013cae:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013cb0:	2302      	movs	r3, #2
 8013cb2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013cb6:	4b4f      	ldr	r3, [pc, #316]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013cb8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013cbc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013cc0:	4b4c      	ldr	r3, [pc, #304]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013cc2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013cc6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013cca:	4611      	mov	r1, r2
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f002 f961 	bl	8015f94 <RegionGetPhyParam>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cd8:	b25b      	sxtb	r3, r3
 8013cda:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	bfb8      	it	lt
 8013ce2:	4613      	movlt	r3, r2
 8013ce4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013ce8:	4b42      	ldr	r3, [pc, #264]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013cea:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013cee:	4a41      	ldr	r2, [pc, #260]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013cf0:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8013cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013cf6:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fc fa66 	bl	80101cc <CheckForMinimumAbpDatarate>
 8013d00:	4603      	mov	r3, r0
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d002      	beq.n	8013d0c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8013d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8013d0c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d05f      	beq.n	8013dd4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013d14:	4b37      	ldr	r3, [pc, #220]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013d16:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013d1a:	f083 0301 	eor.w	r3, r3, #1
 8013d1e:	b2db      	uxtb	r3, r3
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d10e      	bne.n	8013d42 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013d24:	4b33      	ldr	r3, [pc, #204]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013d26:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013d2a:	4a32      	ldr	r2, [pc, #200]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013d2c:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8013d30:	4a30      	ldr	r2, [pc, #192]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013d32:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7fc fa48 	bl	80101cc <CheckForMinimumAbpDatarate>
 8013d3c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d01c      	beq.n	8013d7c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8013d42:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013d46:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013d4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013d50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013d54:	4b27      	ldr	r3, [pc, #156]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013d56:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013d5a:	f107 0120 	add.w	r1, r7, #32
 8013d5e:	2205      	movs	r2, #5
 8013d60:	4618      	mov	r0, r3
 8013d62:	f002 f952 	bl	801600a <RegionVerify>
 8013d66:	4603      	mov	r3, r0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d005      	beq.n	8013d78 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013d6c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8013d70:	4b20      	ldr	r3, [pc, #128]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013d72:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8013d76:	e001      	b.n	8013d7c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013d78:	2303      	movs	r3, #3
 8013d7a:	e032      	b.n	8013de2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8013d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8013df4 <LoRaMacMcpsRequest+0x26c>)
 8013d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d82:	4a1b      	ldr	r2, [pc, #108]	@ (8013df0 <LoRaMacMcpsRequest+0x268>)
 8013d84:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8013d88:	4611      	mov	r1, r2
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7fc fb0a 	bl	80103a4 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8013d90:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013d92:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8013d96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013d9a:	78fb      	ldrb	r3, [r7, #3]
 8013d9c:	9300      	str	r3, [sp, #0]
 8013d9e:	4613      	mov	r3, r2
 8013da0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013da2:	f7fd fac1 	bl	8011328 <Send>
 8013da6:	4603      	mov	r3, r0
 8013da8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8013dac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d10b      	bne.n	8013dcc <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8013db4:	7b3a      	ldrb	r2, [r7, #12]
 8013db6:	4b0e      	ldr	r3, [pc, #56]	@ (8013df0 <LoRaMacMcpsRequest+0x268>)
 8013db8:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8013df0 <LoRaMacMcpsRequest+0x268>)
 8013dbe:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013dc2:	f043 0301 	orr.w	r3, r3, #1
 8013dc6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8013dca:	e003      	b.n	8013dd4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013dcc:	4b08      	ldr	r3, [pc, #32]	@ (8013df0 <LoRaMacMcpsRequest+0x268>)
 8013dce:	2200      	movs	r2, #0
 8013dd0:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013dd4:	4b06      	ldr	r3, [pc, #24]	@ (8013df0 <LoRaMacMcpsRequest+0x268>)
 8013dd6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	611a      	str	r2, [r3, #16]

    return status;
 8013dde:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3740      	adds	r7, #64	@ 0x40
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bdb0      	pop	{r4, r5, r7, pc}
 8013dea:	bf00      	nop
 8013dec:	20000c10 	.word	0x20000c10
 8013df0:	200007d0 	.word	0x200007d0
 8013df4:	20000d04 	.word	0x20000d04

08013df8 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b084      	sub	sp, #16
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	4603      	mov	r3, r0
 8013e00:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013e02:	79fb      	ldrb	r3, [r7, #7]
 8013e04:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013e06:	4b0d      	ldr	r3, [pc, #52]	@ (8013e3c <LoRaMacTestSetDutyCycleOn+0x44>)
 8013e08:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013e0c:	f107 010c 	add.w	r1, r7, #12
 8013e10:	220f      	movs	r2, #15
 8013e12:	4618      	mov	r0, r3
 8013e14:	f002 f8f9 	bl	801600a <RegionVerify>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d00a      	beq.n	8013e34 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013e1e:	4a07      	ldr	r2, [pc, #28]	@ (8013e3c <LoRaMacTestSetDutyCycleOn+0x44>)
 8013e20:	79fb      	ldrb	r3, [r7, #7]
 8013e22:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013e26:	4a06      	ldr	r2, [pc, #24]	@ (8013e40 <LoRaMacTestSetDutyCycleOn+0x48>)
 8013e28:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013e2c:	f043 0320 	orr.w	r3, r3, #32
 8013e30:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8013e34:	bf00      	nop
 8013e36:	3710      	adds	r7, #16
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}
 8013e3c:	20000d04 	.word	0x20000d04
 8013e40:	200007d0 	.word	0x200007d0

08013e44 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013e48:	f7fe fe30 	bl	8012aac <LoRaMacStop>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d112      	bne.n	8013e78 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013e52:	480b      	ldr	r0, [pc, #44]	@ (8013e80 <LoRaMacDeInitialization+0x3c>)
 8013e54:	f008 fc1c 	bl	801c690 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013e58:	480a      	ldr	r0, [pc, #40]	@ (8013e84 <LoRaMacDeInitialization+0x40>)
 8013e5a:	f008 fc19 	bl	801c690 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013e5e:	480a      	ldr	r0, [pc, #40]	@ (8013e88 <LoRaMacDeInitialization+0x44>)
 8013e60:	f008 fc16 	bl	801c690 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013e64:	f000 f94a 	bl	80140fc <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8013e68:	2000      	movs	r0, #0
 8013e6a:	f7fd fdbb 	bl	80119e4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013e6e:	4b07      	ldr	r3, [pc, #28]	@ (8013e8c <LoRaMacDeInitialization+0x48>)
 8013e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e72:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013e74:	2300      	movs	r3, #0
 8013e76:	e000      	b.n	8013e7a <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013e78:	2301      	movs	r3, #1
    }
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	bd80      	pop	{r7, pc}
 8013e7e:	bf00      	nop
 8013e80:	20000b38 	.word	0x20000b38
 8013e84:	20000b50 	.word	0x20000b50
 8013e88:	20000b68 	.word	0x20000b68
 8013e8c:	0801df14 	.word	0x0801df14

08013e90 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b08c      	sub	sp, #48	@ 0x30
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	60f8      	str	r0, [r7, #12]
 8013e98:	60b9      	str	r1, [r7, #8]
 8013e9a:	607a      	str	r2, [r7, #4]
 8013e9c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	7b1b      	ldrb	r3, [r3, #12]
 8013ea8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	7b5b      	ldrb	r3, [r3, #13]
 8013eb0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	7b9b      	ldrb	r3, [r3, #14]
 8013eb8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	685a      	ldr	r2, [r3, #4]
 8013ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ec2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	785b      	ldrb	r3, [r3, #1]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	f000 8088 	beq.w	8013fde <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013ece:	2302      	movs	r3, #2
 8013ed0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	7bdb      	ldrb	r3, [r3, #15]
 8013ed8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	7c1b      	ldrb	r3, [r3, #16]
 8013ee0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013ee4:	4611      	mov	r1, r2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f002 f854 	bl	8015f94 <RegionGetPhyParam>
 8013eec:	4603      	mov	r3, r0
 8013eee:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013ef0:	6a3b      	ldr	r3, [r7, #32]
 8013ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8013ef6:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8013efa:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8013efe:	4293      	cmp	r3, r2
 8013f00:	bfb8      	it	lt
 8013f02:	4613      	movlt	r3, r2
 8013f04:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	685b      	ldr	r3, [r3, #4]
 8013f0c:	68fa      	ldr	r2, [r7, #12]
 8013f0e:	8912      	ldrh	r2, [r2, #8]
 8013f10:	4293      	cmp	r3, r2
 8013f12:	d302      	bcc.n	8013f1a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8013f14:	2301      	movs	r3, #1
 8013f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	68fa      	ldr	r2, [r7, #12]
 8013f20:	8912      	ldrh	r2, [r2, #8]
 8013f22:	4611      	mov	r1, r2
 8013f24:	68fa      	ldr	r2, [r7, #12]
 8013f26:	8952      	ldrh	r2, [r2, #10]
 8013f28:	440a      	add	r2, r1
 8013f2a:	4293      	cmp	r3, r2
 8013f2c:	d30f      	bcc.n	8013f4e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8013f2e:	230a      	movs	r3, #10
 8013f30:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	7c1b      	ldrb	r3, [r3, #16]
 8013f38:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013f3c:	4611      	mov	r1, r2
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f002 f828 	bl	8015f94 <RegionGetPhyParam>
 8013f44:	4603      	mov	r3, r0
 8013f46:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8013f48:	6a3b      	ldr	r3, [r7, #32]
 8013f4a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	8912      	ldrh	r2, [r2, #8]
 8013f56:	4611      	mov	r1, r2
 8013f58:	68fa      	ldr	r2, [r7, #12]
 8013f5a:	8952      	ldrh	r2, [r2, #10]
 8013f5c:	0052      	lsls	r2, r2, #1
 8013f5e:	440a      	add	r2, r1
 8013f60:	4293      	cmp	r3, r2
 8013f62:	d33c      	bcc.n	8013fde <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	8912      	ldrh	r2, [r2, #8]
 8013f6c:	1a9b      	subs	r3, r3, r2
 8013f6e:	68fa      	ldr	r2, [r7, #12]
 8013f70:	8952      	ldrh	r2, [r2, #10]
 8013f72:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f76:	fb01 f202 	mul.w	r2, r1, r2
 8013f7a:	1a9b      	subs	r3, r3, r2
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d12e      	bne.n	8013fde <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8013f80:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8013f84:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d110      	bne.n	8013fae <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d009      	beq.n	8013fa8 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013f94:	2302      	movs	r3, #2
 8013f96:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	7c1b      	ldrb	r3, [r3, #16]
 8013f9c:	f107 0210 	add.w	r2, r7, #16
 8013fa0:	4611      	mov	r1, r2
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f002 f81f 	bl	8015fe6 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013fae:	2321      	movs	r3, #33	@ 0x21
 8013fb0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8013fb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013fb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	7bdb      	ldrb	r3, [r3, #15]
 8013fc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	7c1b      	ldrb	r3, [r3, #16]
 8013fc8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013fcc:	4611      	mov	r1, r2
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f001 ffe0 	bl	8015f94 <RegionGetPhyParam>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8013fd8:	6a3b      	ldr	r3, [r7, #32]
 8013fda:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8013fe4:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8013fec:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013ff4:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3730      	adds	r7, #48	@ 0x30
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}

08014002 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8014002:	b480      	push	{r7}
 8014004:	b085      	sub	sp, #20
 8014006:	af00      	add	r7, sp, #0
 8014008:	60f8      	str	r0, [r7, #12]
 801400a:	60b9      	str	r1, [r7, #8]
 801400c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801400e:	bf00      	nop
 8014010:	3714      	adds	r7, #20
 8014012:	46bd      	mov	sp, r7
 8014014:	bc80      	pop	{r7}
 8014016:	4770      	bx	lr

08014018 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	4603      	mov	r3, r0
 8014020:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014022:	bf00      	nop
 8014024:	370c      	adds	r7, #12
 8014026:	46bd      	mov	sp, r7
 8014028:	bc80      	pop	{r7}
 801402a:	4770      	bx	lr

0801402c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801402c:	b480      	push	{r7}
 801402e:	b083      	sub	sp, #12
 8014030:	af00      	add	r7, sp, #0
 8014032:	4603      	mov	r3, r0
 8014034:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014036:	bf00      	nop
 8014038:	370c      	adds	r7, #12
 801403a:	46bd      	mov	sp, r7
 801403c:	bc80      	pop	{r7}
 801403e:	4770      	bx	lr

08014040 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014040:	b480      	push	{r7}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
 8014046:	4603      	mov	r3, r0
 8014048:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801404a:	bf00      	nop
 801404c:	370c      	adds	r7, #12
 801404e:	46bd      	mov	sp, r7
 8014050:	bc80      	pop	{r7}
 8014052:	4770      	bx	lr

08014054 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014054:	b480      	push	{r7}
 8014056:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014058:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801405a:	4618      	mov	r0, r3
 801405c:	46bd      	mov	sp, r7
 801405e:	bc80      	pop	{r7}
 8014060:	4770      	bx	lr

08014062 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014062:	b480      	push	{r7}
 8014064:	b083      	sub	sp, #12
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801406a:	bf00      	nop
 801406c:	370c      	adds	r7, #12
 801406e:	46bd      	mov	sp, r7
 8014070:	bc80      	pop	{r7}
 8014072:	4770      	bx	lr

08014074 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014074:	b480      	push	{r7}
 8014076:	b083      	sub	sp, #12
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801407c:	bf00      	nop
 801407e:	370c      	adds	r7, #12
 8014080:	46bd      	mov	sp, r7
 8014082:	bc80      	pop	{r7}
 8014084:	4770      	bx	lr

08014086 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014086:	b480      	push	{r7}
 8014088:	b083      	sub	sp, #12
 801408a:	af00      	add	r7, sp, #0
 801408c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801408e:	bf00      	nop
 8014090:	370c      	adds	r7, #12
 8014092:	46bd      	mov	sp, r7
 8014094:	bc80      	pop	{r7}
 8014096:	4770      	bx	lr

08014098 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
 80140a0:	460b      	mov	r3, r1
 80140a2:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80140a4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	370c      	adds	r7, #12
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bc80      	pop	{r7}
 80140ae:	4770      	bx	lr

080140b0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80140b0:	b480      	push	{r7}
 80140b2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80140b4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bc80      	pop	{r7}
 80140bc:	4770      	bx	lr

080140be <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80140be:	b480      	push	{r7}
 80140c0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80140c2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bc80      	pop	{r7}
 80140ca:	4770      	bx	lr

080140cc <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80140cc:	b480      	push	{r7}
 80140ce:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80140d0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bc80      	pop	{r7}
 80140d8:	4770      	bx	lr

080140da <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80140da:	b480      	push	{r7}
 80140dc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80140de:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bc80      	pop	{r7}
 80140e6:	4770      	bx	lr

080140e8 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80140e8:	b480      	push	{r7}
 80140ea:	b083      	sub	sp, #12
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	4603      	mov	r3, r0
 80140f0:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80140f2:	bf00      	nop
 80140f4:	370c      	adds	r7, #12
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bc80      	pop	{r7}
 80140fa:	4770      	bx	lr

080140fc <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80140fc:	b480      	push	{r7}
 80140fe:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014100:	bf00      	nop
 8014102:	46bd      	mov	sp, r7
 8014104:	bc80      	pop	{r7}
 8014106:	4770      	bx	lr

08014108 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014108:	b480      	push	{r7}
 801410a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801410c:	bf00      	nop
 801410e:	46bd      	mov	sp, r7
 8014110:	bc80      	pop	{r7}
 8014112:	4770      	bx	lr

08014114 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014114:	b480      	push	{r7}
 8014116:	b083      	sub	sp, #12
 8014118:	af00      	add	r7, sp, #0
 801411a:	4603      	mov	r3, r0
 801411c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801411e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014120:	4618      	mov	r0, r3
 8014122:	370c      	adds	r7, #12
 8014124:	46bd      	mov	sp, r7
 8014126:	bc80      	pop	{r7}
 8014128:	4770      	bx	lr

0801412a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801412a:	b480      	push	{r7}
 801412c:	b083      	sub	sp, #12
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014132:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014134:	4618      	mov	r0, r3
 8014136:	370c      	adds	r7, #12
 8014138:	46bd      	mov	sp, r7
 801413a:	bc80      	pop	{r7}
 801413c:	4770      	bx	lr

0801413e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801413e:	b480      	push	{r7}
 8014140:	b083      	sub	sp, #12
 8014142:	af00      	add	r7, sp, #0
 8014144:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014146:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014148:	4618      	mov	r0, r3
 801414a:	370c      	adds	r7, #12
 801414c:	46bd      	mov	sp, r7
 801414e:	bc80      	pop	{r7}
 8014150:	4770      	bx	lr

08014152 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014152:	b480      	push	{r7}
 8014154:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014156:	bf00      	nop
 8014158:	46bd      	mov	sp, r7
 801415a:	bc80      	pop	{r7}
 801415c:	4770      	bx	lr

0801415e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801415e:	b480      	push	{r7}
 8014160:	b083      	sub	sp, #12
 8014162:	af00      	add	r7, sp, #0
 8014164:	4603      	mov	r3, r0
 8014166:	6039      	str	r1, [r7, #0]
 8014168:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801416a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801416c:	4618      	mov	r0, r3
 801416e:	370c      	adds	r7, #12
 8014170:	46bd      	mov	sp, r7
 8014172:	bc80      	pop	{r7}
 8014174:	4770      	bx	lr

08014176 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014176:	b480      	push	{r7}
 8014178:	b083      	sub	sp, #12
 801417a:	af00      	add	r7, sp, #0
 801417c:	4603      	mov	r3, r0
 801417e:	603a      	str	r2, [r7, #0]
 8014180:	80fb      	strh	r3, [r7, #6]
 8014182:	460b      	mov	r3, r1
 8014184:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014186:	bf00      	nop
 8014188:	370c      	adds	r7, #12
 801418a:	46bd      	mov	sp, r7
 801418c:	bc80      	pop	{r7}
 801418e:	4770      	bx	lr

08014190 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014190:	b480      	push	{r7}
 8014192:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014194:	bf00      	nop
 8014196:	46bd      	mov	sp, r7
 8014198:	bc80      	pop	{r7}
 801419a:	4770      	bx	lr

0801419c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801419c:	b480      	push	{r7}
 801419e:	b083      	sub	sp, #12
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80141a4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141a6:	4618      	mov	r0, r3
 80141a8:	370c      	adds	r7, #12
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bc80      	pop	{r7}
 80141ae:	4770      	bx	lr

080141b0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80141b0:	b480      	push	{r7}
 80141b2:	b083      	sub	sp, #12
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80141b8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	370c      	adds	r7, #12
 80141be:	46bd      	mov	sp, r7
 80141c0:	bc80      	pop	{r7}
 80141c2:	4770      	bx	lr

080141c4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80141c4:	b480      	push	{r7}
 80141c6:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141c8:	bf00      	nop
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bc80      	pop	{r7}
 80141ce:	4770      	bx	lr

080141d0 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80141d0:	b480      	push	{r7}
 80141d2:	b083      	sub	sp, #12
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	460b      	mov	r3, r1
 80141da:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141dc:	bf00      	nop
 80141de:	370c      	adds	r7, #12
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bc80      	pop	{r7}
 80141e4:	4770      	bx	lr

080141e6 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80141e6:	b480      	push	{r7}
 80141e8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141ea:	bf00      	nop
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bc80      	pop	{r7}
 80141f0:	4770      	bx	lr

080141f2 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80141f2:	b480      	push	{r7}
 80141f4:	b085      	sub	sp, #20
 80141f6:	af00      	add	r7, sp, #0
 80141f8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80141fe:	2300      	movs	r3, #0
 8014200:	81fb      	strh	r3, [r7, #14]
 8014202:	e00a      	b.n	801421a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8014204:	89fb      	ldrh	r3, [r7, #14]
 8014206:	68ba      	ldr	r2, [r7, #8]
 8014208:	4413      	add	r3, r2
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d001      	beq.n	8014214 <IsSlotFree+0x22>
        {
            return false;
 8014210:	2300      	movs	r3, #0
 8014212:	e006      	b.n	8014222 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014214:	89fb      	ldrh	r3, [r7, #14]
 8014216:	3301      	adds	r3, #1
 8014218:	81fb      	strh	r3, [r7, #14]
 801421a:	89fb      	ldrh	r3, [r7, #14]
 801421c:	2b0f      	cmp	r3, #15
 801421e:	d9f1      	bls.n	8014204 <IsSlotFree+0x12>
        }
    }
    return true;
 8014220:	2301      	movs	r3, #1
}
 8014222:	4618      	mov	r0, r3
 8014224:	3714      	adds	r7, #20
 8014226:	46bd      	mov	sp, r7
 8014228:	bc80      	pop	{r7}
 801422a:	4770      	bx	lr

0801422c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014232:	2300      	movs	r3, #0
 8014234:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014236:	e007      	b.n	8014248 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8014238:	79fb      	ldrb	r3, [r7, #7]
 801423a:	3301      	adds	r3, #1
 801423c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801423e:	79fb      	ldrb	r3, [r7, #7]
 8014240:	2b20      	cmp	r3, #32
 8014242:	d101      	bne.n	8014248 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014244:	2300      	movs	r3, #0
 8014246:	e012      	b.n	801426e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014248:	79fb      	ldrb	r3, [r7, #7]
 801424a:	011b      	lsls	r3, r3, #4
 801424c:	3308      	adds	r3, #8
 801424e:	4a0a      	ldr	r2, [pc, #40]	@ (8014278 <MallocNewMacCommandSlot+0x4c>)
 8014250:	4413      	add	r3, r2
 8014252:	4618      	mov	r0, r3
 8014254:	f7ff ffcd 	bl	80141f2 <IsSlotFree>
 8014258:	4603      	mov	r3, r0
 801425a:	f083 0301 	eor.w	r3, r3, #1
 801425e:	b2db      	uxtb	r3, r3
 8014260:	2b00      	cmp	r3, #0
 8014262:	d1e9      	bne.n	8014238 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014264:	79fb      	ldrb	r3, [r7, #7]
 8014266:	011b      	lsls	r3, r3, #4
 8014268:	3308      	adds	r3, #8
 801426a:	4a03      	ldr	r2, [pc, #12]	@ (8014278 <MallocNewMacCommandSlot+0x4c>)
 801426c:	4413      	add	r3, r2
}
 801426e:	4618      	mov	r0, r3
 8014270:	3708      	adds	r7, #8
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	20001928 	.word	0x20001928

0801427c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d101      	bne.n	801428e <FreeMacCommandSlot+0x12>
    {
        return false;
 801428a:	2300      	movs	r3, #0
 801428c:	e005      	b.n	801429a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801428e:	2210      	movs	r2, #16
 8014290:	2100      	movs	r1, #0
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f004 f8e4 	bl	8018460 <memset1>

    return true;
 8014298:	2301      	movs	r3, #1
}
 801429a:	4618      	mov	r0, r3
 801429c:	3708      	adds	r7, #8
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}

080142a2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80142a2:	b480      	push	{r7}
 80142a4:	b083      	sub	sp, #12
 80142a6:	af00      	add	r7, sp, #0
 80142a8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d101      	bne.n	80142b4 <LinkedListInit+0x12>
    {
        return false;
 80142b0:	2300      	movs	r3, #0
 80142b2:	e006      	b.n	80142c2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2200      	movs	r2, #0
 80142b8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2200      	movs	r2, #0
 80142be:	605a      	str	r2, [r3, #4]

    return true;
 80142c0:	2301      	movs	r3, #1
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	370c      	adds	r7, #12
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bc80      	pop	{r7}
 80142ca:	4770      	bx	lr

080142cc <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80142cc:	b480      	push	{r7}
 80142ce:	b083      	sub	sp, #12
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
 80142d4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d002      	beq.n	80142e2 <LinkedListAdd+0x16>
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d101      	bne.n	80142e6 <LinkedListAdd+0x1a>
    {
        return false;
 80142e2:	2300      	movs	r3, #0
 80142e4:	e015      	b.n	8014312 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d102      	bne.n	80142f4 <LinkedListAdd+0x28>
    {
        list->First = element;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	683a      	ldr	r2, [r7, #0]
 80142f2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d003      	beq.n	8014304 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	685b      	ldr	r3, [r3, #4]
 8014300:	683a      	ldr	r2, [r7, #0]
 8014302:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	2200      	movs	r2, #0
 8014308:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	683a      	ldr	r2, [r7, #0]
 801430e:	605a      	str	r2, [r3, #4]

    return true;
 8014310:	2301      	movs	r3, #1
}
 8014312:	4618      	mov	r0, r3
 8014314:	370c      	adds	r7, #12
 8014316:	46bd      	mov	sp, r7
 8014318:	bc80      	pop	{r7}
 801431a:	4770      	bx	lr

0801431c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801431c:	b480      	push	{r7}
 801431e:	b085      	sub	sp, #20
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
 8014324:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d002      	beq.n	8014332 <LinkedListGetPrevious+0x16>
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d101      	bne.n	8014336 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014332:	2300      	movs	r3, #0
 8014334:	e016      	b.n	8014364 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801433c:	683a      	ldr	r2, [r7, #0]
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	429a      	cmp	r2, r3
 8014342:	d00c      	beq.n	801435e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014344:	e002      	b.n	801434c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d007      	beq.n	8014362 <LinkedListGetPrevious+0x46>
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	683a      	ldr	r2, [r7, #0]
 8014358:	429a      	cmp	r2, r3
 801435a:	d1f4      	bne.n	8014346 <LinkedListGetPrevious+0x2a>
 801435c:	e001      	b.n	8014362 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801435e:	2300      	movs	r3, #0
 8014360:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014362:	68fb      	ldr	r3, [r7, #12]
}
 8014364:	4618      	mov	r0, r3
 8014366:	3714      	adds	r7, #20
 8014368:	46bd      	mov	sp, r7
 801436a:	bc80      	pop	{r7}
 801436c:	4770      	bx	lr

0801436e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801436e:	b580      	push	{r7, lr}
 8014370:	b084      	sub	sp, #16
 8014372:	af00      	add	r7, sp, #0
 8014374:	6078      	str	r0, [r7, #4]
 8014376:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d002      	beq.n	8014384 <LinkedListRemove+0x16>
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d101      	bne.n	8014388 <LinkedListRemove+0x1a>
    {
        return false;
 8014384:	2300      	movs	r3, #0
 8014386:	e020      	b.n	80143ca <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014388:	6839      	ldr	r1, [r7, #0]
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f7ff ffc6 	bl	801431c <LinkedListGetPrevious>
 8014390:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	683a      	ldr	r2, [r7, #0]
 8014398:	429a      	cmp	r2, r3
 801439a:	d103      	bne.n	80143a4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	683a      	ldr	r2, [r7, #0]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d102      	bne.n	80143b4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	68fa      	ldr	r2, [r7, #12]
 80143b2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d003      	beq.n	80143c2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	681a      	ldr	r2, [r3, #0]
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	2200      	movs	r2, #0
 80143c6:	601a      	str	r2, [r3, #0]

    return true;
 80143c8:	2301      	movs	r3, #1
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3710      	adds	r7, #16
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
	...

080143d4 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80143d4:	b480      	push	{r7}
 80143d6:	b083      	sub	sp, #12
 80143d8:	af00      	add	r7, sp, #0
 80143da:	4603      	mov	r3, r0
 80143dc:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80143de:	79fb      	ldrb	r3, [r7, #7]
 80143e0:	2b11      	cmp	r3, #17
 80143e2:	bf8c      	ite	hi
 80143e4:	2201      	movhi	r2, #1
 80143e6:	2200      	movls	r2, #0
 80143e8:	b2d2      	uxtb	r2, r2
 80143ea:	2a00      	cmp	r2, #0
 80143ec:	d10d      	bne.n	801440a <IsSticky+0x36>
 80143ee:	4a0a      	ldr	r2, [pc, #40]	@ (8014418 <IsSticky+0x44>)
 80143f0:	fa22 f303 	lsr.w	r3, r2, r3
 80143f4:	f003 0301 	and.w	r3, r3, #1
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	bf14      	ite	ne
 80143fc:	2301      	movne	r3, #1
 80143fe:	2300      	moveq	r3, #0
 8014400:	b2db      	uxtb	r3, r3
 8014402:	2b00      	cmp	r3, #0
 8014404:	d001      	beq.n	801440a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8014406:	2301      	movs	r3, #1
 8014408:	e000      	b.n	801440c <IsSticky+0x38>
        default:
            return false;
 801440a:	2300      	movs	r3, #0
    }
}
 801440c:	4618      	mov	r0, r3
 801440e:	370c      	adds	r7, #12
 8014410:	46bd      	mov	sp, r7
 8014412:	bc80      	pop	{r7}
 8014414:	4770      	bx	lr
 8014416:	bf00      	nop
 8014418:	00020720 	.word	0x00020720

0801441c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 801441c:	b480      	push	{r7}
 801441e:	b083      	sub	sp, #12
 8014420:	af00      	add	r7, sp, #0
 8014422:	4603      	mov	r3, r0
 8014424:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8014426:	2300      	movs	r3, #0
    }
}
 8014428:	4618      	mov	r0, r3
 801442a:	370c      	adds	r7, #12
 801442c:	46bd      	mov	sp, r7
 801442e:	bc80      	pop	{r7}
 8014430:	4770      	bx	lr
	...

08014434 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014434:	b580      	push	{r7, lr}
 8014436:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8014438:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 801443c:	2100      	movs	r1, #0
 801443e:	4804      	ldr	r0, [pc, #16]	@ (8014450 <LoRaMacCommandsInit+0x1c>)
 8014440:	f004 f80e 	bl	8018460 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014444:	4802      	ldr	r0, [pc, #8]	@ (8014450 <LoRaMacCommandsInit+0x1c>)
 8014446:	f7ff ff2c 	bl	80142a2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801444a:	2300      	movs	r3, #0
}
 801444c:	4618      	mov	r0, r3
 801444e:	bd80      	pop	{r7, pc}
 8014450:	20001928 	.word	0x20001928

08014454 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b086      	sub	sp, #24
 8014458:	af00      	add	r7, sp, #0
 801445a:	4603      	mov	r3, r0
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	607a      	str	r2, [r7, #4]
 8014460:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d101      	bne.n	801446c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014468:	2301      	movs	r3, #1
 801446a:	e03b      	b.n	80144e4 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801446c:	f7ff fede 	bl	801422c <MallocNewMacCommandSlot>
 8014470:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d101      	bne.n	801447c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014478:	2302      	movs	r3, #2
 801447a:	e033      	b.n	80144e4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801447c:	6979      	ldr	r1, [r7, #20]
 801447e:	481b      	ldr	r0, [pc, #108]	@ (80144ec <LoRaMacCommandsAddCmd+0x98>)
 8014480:	f7ff ff24 	bl	80142cc <LinkedListAdd>
 8014484:	4603      	mov	r3, r0
 8014486:	f083 0301 	eor.w	r3, r3, #1
 801448a:	b2db      	uxtb	r3, r3
 801448c:	2b00      	cmp	r3, #0
 801448e:	d001      	beq.n	8014494 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014490:	2305      	movs	r3, #5
 8014492:	e027      	b.n	80144e4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	7bfa      	ldrb	r2, [r7, #15]
 8014498:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	687a      	ldr	r2, [r7, #4]
 801449e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	3305      	adds	r3, #5
 80144a4:	687a      	ldr	r2, [r7, #4]
 80144a6:	b292      	uxth	r2, r2
 80144a8:	68b9      	ldr	r1, [r7, #8]
 80144aa:	4618      	mov	r0, r3
 80144ac:	f003 ff9d 	bl	80183ea <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80144b0:	7bfb      	ldrb	r3, [r7, #15]
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7ff ff8e 	bl	80143d4 <IsSticky>
 80144b8:	4603      	mov	r3, r0
 80144ba:	461a      	mov	r2, r3
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80144c0:	7bfb      	ldrb	r3, [r7, #15]
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7ff ffaa 	bl	801441c <IsConfirmationRequired>
 80144c8:	4603      	mov	r3, r0
 80144ca:	461a      	mov	r2, r3
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80144d0:	4b06      	ldr	r3, [pc, #24]	@ (80144ec <LoRaMacCommandsAddCmd+0x98>)
 80144d2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	4413      	add	r3, r2
 80144da:	3301      	adds	r3, #1
 80144dc:	4a03      	ldr	r2, [pc, #12]	@ (80144ec <LoRaMacCommandsAddCmd+0x98>)
 80144de:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80144e2:	2300      	movs	r3, #0
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3718      	adds	r7, #24
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}
 80144ec:	20001928 	.word	0x20001928

080144f0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d101      	bne.n	8014502 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80144fe:	2301      	movs	r3, #1
 8014500:	e021      	b.n	8014546 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014502:	6879      	ldr	r1, [r7, #4]
 8014504:	4812      	ldr	r0, [pc, #72]	@ (8014550 <LoRaMacCommandsRemoveCmd+0x60>)
 8014506:	f7ff ff32 	bl	801436e <LinkedListRemove>
 801450a:	4603      	mov	r3, r0
 801450c:	f083 0301 	eor.w	r3, r3, #1
 8014510:	b2db      	uxtb	r3, r3
 8014512:	2b00      	cmp	r3, #0
 8014514:	d001      	beq.n	801451a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014516:	2303      	movs	r3, #3
 8014518:	e015      	b.n	8014546 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801451a:	4b0d      	ldr	r3, [pc, #52]	@ (8014550 <LoRaMacCommandsRemoveCmd+0x60>)
 801451c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	689b      	ldr	r3, [r3, #8]
 8014524:	1ad3      	subs	r3, r2, r3
 8014526:	3b01      	subs	r3, #1
 8014528:	4a09      	ldr	r2, [pc, #36]	@ (8014550 <LoRaMacCommandsRemoveCmd+0x60>)
 801452a:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f7ff fea4 	bl	801427c <FreeMacCommandSlot>
 8014534:	4603      	mov	r3, r0
 8014536:	f083 0301 	eor.w	r3, r3, #1
 801453a:	b2db      	uxtb	r3, r3
 801453c:	2b00      	cmp	r3, #0
 801453e:	d001      	beq.n	8014544 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014540:	2305      	movs	r3, #5
 8014542:	e000      	b.n	8014546 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014544:	2300      	movs	r3, #0
}
 8014546:	4618      	mov	r0, r3
 8014548:	3708      	adds	r7, #8
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	20001928 	.word	0x20001928

08014554 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8014554:	b480      	push	{r7}
 8014556:	b085      	sub	sp, #20
 8014558:	af00      	add	r7, sp, #0
 801455a:	4603      	mov	r3, r0
 801455c:	6039      	str	r1, [r7, #0]
 801455e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014560:	4b0e      	ldr	r3, [pc, #56]	@ (801459c <LoRaMacCommandsGetCmd+0x48>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014566:	e002      	b.n	801456e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d004      	beq.n	801457e <LoRaMacCommandsGetCmd+0x2a>
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	791b      	ldrb	r3, [r3, #4]
 8014578:	79fa      	ldrb	r2, [r7, #7]
 801457a:	429a      	cmp	r2, r3
 801457c:	d1f4      	bne.n	8014568 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801457e:	683b      	ldr	r3, [r7, #0]
 8014580:	68fa      	ldr	r2, [r7, #12]
 8014582:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d101      	bne.n	801458e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801458a:	2303      	movs	r3, #3
 801458c:	e000      	b.n	8014590 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801458e:	2300      	movs	r3, #0
}
 8014590:	4618      	mov	r0, r3
 8014592:	3714      	adds	r7, #20
 8014594:	46bd      	mov	sp, r7
 8014596:	bc80      	pop	{r7}
 8014598:	4770      	bx	lr
 801459a:	bf00      	nop
 801459c:	20001928 	.word	0x20001928

080145a0 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80145a6:	4b0f      	ldr	r3, [pc, #60]	@ (80145e4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80145ac:	e012      	b.n	80145d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	7b1b      	ldrb	r3, [r3, #12]
 80145b2:	f083 0301 	eor.w	r3, r3, #1
 80145b6:	b2db      	uxtb	r3, r3
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d008      	beq.n	80145ce <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f7ff ff94 	bl	80144f0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	607b      	str	r3, [r7, #4]
 80145cc:	e002      	b.n	80145d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d1e9      	bne.n	80145ae <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80145da:	2300      	movs	r3, #0
}
 80145dc:	4618      	mov	r0, r3
 80145de:	3708      	adds	r7, #8
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	20001928 	.word	0x20001928

080145e8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80145ee:	4b13      	ldr	r3, [pc, #76]	@ (801463c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80145f4:	e01a      	b.n	801462c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	791b      	ldrb	r3, [r3, #4]
 8014600:	4618      	mov	r0, r3
 8014602:	f7ff fee7 	bl	80143d4 <IsSticky>
 8014606:	4603      	mov	r3, r0
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00d      	beq.n	8014628 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	791b      	ldrb	r3, [r3, #4]
 8014610:	4618      	mov	r0, r3
 8014612:	f7ff ff03 	bl	801441c <IsConfirmationRequired>
 8014616:	4603      	mov	r3, r0
 8014618:	f083 0301 	eor.w	r3, r3, #1
 801461c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 801461e:	2b00      	cmp	r3, #0
 8014620:	d002      	beq.n	8014628 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f7ff ff64 	bl	80144f0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d1e1      	bne.n	80145f6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014632:	2300      	movs	r3, #0
}
 8014634:	4618      	mov	r0, r3
 8014636:	3708      	adds	r7, #8
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	20001928 	.word	0x20001928

08014640 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014640:	b480      	push	{r7}
 8014642:	b083      	sub	sp, #12
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d101      	bne.n	8014652 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801464e:	2301      	movs	r3, #1
 8014650:	e005      	b.n	801465e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014652:	4b05      	ldr	r3, [pc, #20]	@ (8014668 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014654:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801465c:	2300      	movs	r3, #0
}
 801465e:	4618      	mov	r0, r3
 8014660:	370c      	adds	r7, #12
 8014662:	46bd      	mov	sp, r7
 8014664:	bc80      	pop	{r7}
 8014666:	4770      	bx	lr
 8014668:	20001928 	.word	0x20001928

0801466c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b088      	sub	sp, #32
 8014670:	af00      	add	r7, sp, #0
 8014672:	60f8      	str	r0, [r7, #12]
 8014674:	60b9      	str	r1, [r7, #8]
 8014676:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8014678:	4b25      	ldr	r3, [pc, #148]	@ (8014710 <LoRaMacCommandsSerializeCmds+0xa4>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801467e:	2300      	movs	r3, #0
 8014680:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d002      	beq.n	801468e <LoRaMacCommandsSerializeCmds+0x22>
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d126      	bne.n	80146dc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801468e:	2301      	movs	r3, #1
 8014690:	e039      	b.n	8014706 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014692:	7efb      	ldrb	r3, [r7, #27]
 8014694:	68fa      	ldr	r2, [r7, #12]
 8014696:	1ad2      	subs	r2, r2, r3
 8014698:	69fb      	ldr	r3, [r7, #28]
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	3301      	adds	r3, #1
 801469e:	429a      	cmp	r2, r3
 80146a0:	d320      	bcc.n	80146e4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80146a2:	7efb      	ldrb	r3, [r7, #27]
 80146a4:	1c5a      	adds	r2, r3, #1
 80146a6:	76fa      	strb	r2, [r7, #27]
 80146a8:	461a      	mov	r2, r3
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	4413      	add	r3, r2
 80146ae:	69fa      	ldr	r2, [r7, #28]
 80146b0:	7912      	ldrb	r2, [r2, #4]
 80146b2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80146b4:	7efb      	ldrb	r3, [r7, #27]
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	18d0      	adds	r0, r2, r3
 80146ba:	69fb      	ldr	r3, [r7, #28]
 80146bc:	1d59      	adds	r1, r3, #5
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	689b      	ldr	r3, [r3, #8]
 80146c2:	b29b      	uxth	r3, r3
 80146c4:	461a      	mov	r2, r3
 80146c6:	f003 fe90 	bl	80183ea <memcpy1>
            itr += curElement->PayloadSize;
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	689b      	ldr	r3, [r3, #8]
 80146ce:	b2da      	uxtb	r2, r3
 80146d0:	7efb      	ldrb	r3, [r7, #27]
 80146d2:	4413      	add	r3, r2
 80146d4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80146d6:	69fb      	ldr	r3, [r7, #28]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d1d7      	bne.n	8014692 <LoRaMacCommandsSerializeCmds+0x26>
 80146e2:	e009      	b.n	80146f8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80146e4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80146e6:	e007      	b.n	80146f8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80146e8:	69fb      	ldr	r3, [r7, #28]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80146ee:	69f8      	ldr	r0, [r7, #28]
 80146f0:	f7ff fefe 	bl	80144f0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80146f4:	697b      	ldr	r3, [r7, #20]
 80146f6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d1f4      	bne.n	80146e8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80146fe:	68b8      	ldr	r0, [r7, #8]
 8014700:	f7ff ff9e 	bl	8014640 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014704:	2300      	movs	r3, #0
}
 8014706:	4618      	mov	r0, r3
 8014708:	3720      	adds	r7, #32
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	20001928 	.word	0x20001928

08014714 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014714:	b480      	push	{r7}
 8014716:	b085      	sub	sp, #20
 8014718:	af00      	add	r7, sp, #0
 801471a:	4603      	mov	r3, r0
 801471c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801471e:	2300      	movs	r3, #0
 8014720:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014722:	79fb      	ldrb	r3, [r7, #7]
 8014724:	3b02      	subs	r3, #2
 8014726:	2b11      	cmp	r3, #17
 8014728:	d850      	bhi.n	80147cc <LoRaMacCommandsGetCmdSize+0xb8>
 801472a:	a201      	add	r2, pc, #4	@ (adr r2, 8014730 <LoRaMacCommandsGetCmdSize+0x1c>)
 801472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014730:	08014779 	.word	0x08014779
 8014734:	0801477f 	.word	0x0801477f
 8014738:	08014785 	.word	0x08014785
 801473c:	0801478b 	.word	0x0801478b
 8014740:	08014791 	.word	0x08014791
 8014744:	08014797 	.word	0x08014797
 8014748:	0801479d 	.word	0x0801479d
 801474c:	080147a3 	.word	0x080147a3
 8014750:	080147a9 	.word	0x080147a9
 8014754:	080147cd 	.word	0x080147cd
 8014758:	080147cd 	.word	0x080147cd
 801475c:	080147af 	.word	0x080147af
 8014760:	080147cd 	.word	0x080147cd
 8014764:	080147cd 	.word	0x080147cd
 8014768:	080147b5 	.word	0x080147b5
 801476c:	080147bb 	.word	0x080147bb
 8014770:	080147c1 	.word	0x080147c1
 8014774:	080147c7 	.word	0x080147c7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014778:	2303      	movs	r3, #3
 801477a:	73fb      	strb	r3, [r7, #15]
            break;
 801477c:	e027      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801477e:	2305      	movs	r3, #5
 8014780:	73fb      	strb	r3, [r7, #15]
            break;
 8014782:	e024      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014784:	2302      	movs	r3, #2
 8014786:	73fb      	strb	r3, [r7, #15]
            break;
 8014788:	e021      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801478a:	2305      	movs	r3, #5
 801478c:	73fb      	strb	r3, [r7, #15]
            break;
 801478e:	e01e      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014790:	2301      	movs	r3, #1
 8014792:	73fb      	strb	r3, [r7, #15]
            break;
 8014794:	e01b      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014796:	2306      	movs	r3, #6
 8014798:	73fb      	strb	r3, [r7, #15]
            break;
 801479a:	e018      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801479c:	2302      	movs	r3, #2
 801479e:	73fb      	strb	r3, [r7, #15]
            break;
 80147a0:	e015      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80147a2:	2302      	movs	r3, #2
 80147a4:	73fb      	strb	r3, [r7, #15]
            break;
 80147a6:	e012      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80147a8:	2305      	movs	r3, #5
 80147aa:	73fb      	strb	r3, [r7, #15]
            break;
 80147ac:	e00f      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80147ae:	2306      	movs	r3, #6
 80147b0:	73fb      	strb	r3, [r7, #15]
            break;
 80147b2:	e00c      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80147b4:	2301      	movs	r3, #1
 80147b6:	73fb      	strb	r3, [r7, #15]
            break;
 80147b8:	e009      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80147ba:	2305      	movs	r3, #5
 80147bc:	73fb      	strb	r3, [r7, #15]
            break;
 80147be:	e006      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80147c0:	2304      	movs	r3, #4
 80147c2:	73fb      	strb	r3, [r7, #15]
            break;
 80147c4:	e003      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80147c6:	2304      	movs	r3, #4
 80147c8:	73fb      	strb	r3, [r7, #15]
            break;
 80147ca:	e000      	b.n	80147ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80147cc:	bf00      	nop
        }
    }
    return cidSize;
 80147ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3714      	adds	r7, #20
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bc80      	pop	{r7}
 80147d8:	4770      	bx	lr
 80147da:	bf00      	nop

080147dc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80147dc:	b480      	push	{r7}
 80147de:	b083      	sub	sp, #12
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	4a07      	ldr	r2, [pc, #28]	@ (8014804 <IncreaseBufferPointer+0x28>)
 80147e8:	4293      	cmp	r3, r2
 80147ea:	d102      	bne.n	80147f2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80147ec:	4b06      	ldr	r3, [pc, #24]	@ (8014808 <IncreaseBufferPointer+0x2c>)
 80147ee:	607b      	str	r3, [r7, #4]
 80147f0:	e002      	b.n	80147f8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	3304      	adds	r3, #4
 80147f6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80147f8:	687b      	ldr	r3, [r7, #4]
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	370c      	adds	r7, #12
 80147fe:	46bd      	mov	sp, r7
 8014800:	bc80      	pop	{r7}
 8014802:	4770      	bx	lr
 8014804:	20001b50 	.word	0x20001b50
 8014808:	20001b40 	.word	0x20001b40

0801480c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801480c:	b480      	push	{r7}
 801480e:	b083      	sub	sp, #12
 8014810:	af00      	add	r7, sp, #0
 8014812:	4603      	mov	r3, r0
 8014814:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8014816:	79fb      	ldrb	r3, [r7, #7]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d101      	bne.n	8014820 <IsListEmpty+0x14>
    {
        return true;
 801481c:	2301      	movs	r3, #1
 801481e:	e000      	b.n	8014822 <IsListEmpty+0x16>
    }
    return false;
 8014820:	2300      	movs	r3, #0
}
 8014822:	4618      	mov	r0, r3
 8014824:	370c      	adds	r7, #12
 8014826:	46bd      	mov	sp, r7
 8014828:	bc80      	pop	{r7}
 801482a:	4770      	bx	lr

0801482c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801482c:	b480      	push	{r7}
 801482e:	b083      	sub	sp, #12
 8014830:	af00      	add	r7, sp, #0
 8014832:	4603      	mov	r3, r0
 8014834:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014836:	79fb      	ldrb	r3, [r7, #7]
 8014838:	2b04      	cmp	r3, #4
 801483a:	d901      	bls.n	8014840 <IsListFull+0x14>
    {
        return true;
 801483c:	2301      	movs	r3, #1
 801483e:	e000      	b.n	8014842 <IsListFull+0x16>
    }
    return false;
 8014840:	2300      	movs	r3, #0
}
 8014842:	4618      	mov	r0, r3
 8014844:	370c      	adds	r7, #12
 8014846:	46bd      	mov	sp, r7
 8014848:	bc80      	pop	{r7}
 801484a:	4770      	bx	lr

0801484c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b086      	sub	sp, #24
 8014850:	af00      	add	r7, sp, #0
 8014852:	4603      	mov	r3, r0
 8014854:	60b9      	str	r1, [r7, #8]
 8014856:	607a      	str	r2, [r7, #4]
 8014858:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801485e:	4b13      	ldr	r3, [pc, #76]	@ (80148ac <GetElement+0x60>)
 8014860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014864:	4618      	mov	r0, r3
 8014866:	f7ff ffd1 	bl	801480c <IsListEmpty>
 801486a:	4603      	mov	r3, r0
 801486c:	2b00      	cmp	r3, #0
 801486e:	d001      	beq.n	8014874 <GetElement+0x28>
    {
        return NULL;
 8014870:	2300      	movs	r3, #0
 8014872:	e017      	b.n	80148a4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014874:	2300      	movs	r3, #0
 8014876:	74fb      	strb	r3, [r7, #19]
 8014878:	e00d      	b.n	8014896 <GetElement+0x4a>
    {
        if( element->Request == request )
 801487a:	697b      	ldr	r3, [r7, #20]
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	7bfa      	ldrb	r2, [r7, #15]
 8014880:	429a      	cmp	r2, r3
 8014882:	d101      	bne.n	8014888 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014884:	697b      	ldr	r3, [r7, #20]
 8014886:	e00d      	b.n	80148a4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014888:	6978      	ldr	r0, [r7, #20]
 801488a:	f7ff ffa7 	bl	80147dc <IncreaseBufferPointer>
 801488e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014890:	7cfb      	ldrb	r3, [r7, #19]
 8014892:	3301      	adds	r3, #1
 8014894:	74fb      	strb	r3, [r7, #19]
 8014896:	4b05      	ldr	r3, [pc, #20]	@ (80148ac <GetElement+0x60>)
 8014898:	f893 3020 	ldrb.w	r3, [r3, #32]
 801489c:	7cfa      	ldrb	r2, [r7, #19]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d3eb      	bcc.n	801487a <GetElement+0x2e>
    }

    return NULL;
 80148a2:	2300      	movs	r3, #0
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3718      	adds	r7, #24
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	20001b34 	.word	0x20001b34

080148b0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80148b8:	4a0c      	ldr	r2, [pc, #48]	@ (80148ec <LoRaMacConfirmQueueInit+0x3c>)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80148be:	4b0b      	ldr	r3, [pc, #44]	@ (80148ec <LoRaMacConfirmQueueInit+0x3c>)
 80148c0:	2200      	movs	r2, #0
 80148c2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80148c6:	4b09      	ldr	r3, [pc, #36]	@ (80148ec <LoRaMacConfirmQueueInit+0x3c>)
 80148c8:	4a09      	ldr	r2, [pc, #36]	@ (80148f0 <LoRaMacConfirmQueueInit+0x40>)
 80148ca:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80148cc:	4b07      	ldr	r3, [pc, #28]	@ (80148ec <LoRaMacConfirmQueueInit+0x3c>)
 80148ce:	4a08      	ldr	r2, [pc, #32]	@ (80148f0 <LoRaMacConfirmQueueInit+0x40>)
 80148d0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80148d2:	2214      	movs	r2, #20
 80148d4:	21ff      	movs	r1, #255	@ 0xff
 80148d6:	4806      	ldr	r0, [pc, #24]	@ (80148f0 <LoRaMacConfirmQueueInit+0x40>)
 80148d8:	f003 fdc2 	bl	8018460 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80148dc:	4b03      	ldr	r3, [pc, #12]	@ (80148ec <LoRaMacConfirmQueueInit+0x3c>)
 80148de:	2201      	movs	r2, #1
 80148e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80148e4:	bf00      	nop
 80148e6:	3708      	adds	r7, #8
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}
 80148ec:	20001b34 	.word	0x20001b34
 80148f0:	20001b40 	.word	0x20001b40

080148f4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80148fc:	4b19      	ldr	r3, [pc, #100]	@ (8014964 <LoRaMacConfirmQueueAdd+0x70>)
 80148fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014902:	4618      	mov	r0, r3
 8014904:	f7ff ff92 	bl	801482c <IsListFull>
 8014908:	4603      	mov	r3, r0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d001      	beq.n	8014912 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801490e:	2300      	movs	r3, #0
 8014910:	e024      	b.n	801495c <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014912:	4b14      	ldr	r3, [pc, #80]	@ (8014964 <LoRaMacConfirmQueueAdd+0x70>)
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	687a      	ldr	r2, [r7, #4]
 8014918:	7812      	ldrb	r2, [r2, #0]
 801491a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801491c:	4b11      	ldr	r3, [pc, #68]	@ (8014964 <LoRaMacConfirmQueueAdd+0x70>)
 801491e:	689b      	ldr	r3, [r3, #8]
 8014920:	687a      	ldr	r2, [r7, #4]
 8014922:	7852      	ldrb	r2, [r2, #1]
 8014924:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014926:	4b0f      	ldr	r3, [pc, #60]	@ (8014964 <LoRaMacConfirmQueueAdd+0x70>)
 8014928:	689b      	ldr	r3, [r3, #8]
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	78d2      	ldrb	r2, [r2, #3]
 801492e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8014930:	4b0c      	ldr	r3, [pc, #48]	@ (8014964 <LoRaMacConfirmQueueAdd+0x70>)
 8014932:	689b      	ldr	r3, [r3, #8]
 8014934:	687a      	ldr	r2, [r7, #4]
 8014936:	7892      	ldrb	r2, [r2, #2]
 8014938:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801493a:	4b0a      	ldr	r3, [pc, #40]	@ (8014964 <LoRaMacConfirmQueueAdd+0x70>)
 801493c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014940:	3301      	adds	r3, #1
 8014942:	b2da      	uxtb	r2, r3
 8014944:	4b07      	ldr	r3, [pc, #28]	@ (8014964 <LoRaMacConfirmQueueAdd+0x70>)
 8014946:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801494a:	4b06      	ldr	r3, [pc, #24]	@ (8014964 <LoRaMacConfirmQueueAdd+0x70>)
 801494c:	689b      	ldr	r3, [r3, #8]
 801494e:	4618      	mov	r0, r3
 8014950:	f7ff ff44 	bl	80147dc <IncreaseBufferPointer>
 8014954:	4603      	mov	r3, r0
 8014956:	4a03      	ldr	r2, [pc, #12]	@ (8014964 <LoRaMacConfirmQueueAdd+0x70>)
 8014958:	6093      	str	r3, [r2, #8]

    return true;
 801495a:	2301      	movs	r3, #1
}
 801495c:	4618      	mov	r0, r3
 801495e:	3708      	adds	r7, #8
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	20001b34 	.word	0x20001b34

08014968 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8014968:	b580      	push	{r7, lr}
 801496a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801496c:	4b0e      	ldr	r3, [pc, #56]	@ (80149a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801496e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014972:	4618      	mov	r0, r3
 8014974:	f7ff ff4a 	bl	801480c <IsListEmpty>
 8014978:	4603      	mov	r3, r0
 801497a:	2b00      	cmp	r3, #0
 801497c:	d001      	beq.n	8014982 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801497e:	2300      	movs	r3, #0
 8014980:	e010      	b.n	80149a4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014982:	4b09      	ldr	r3, [pc, #36]	@ (80149a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014988:	3b01      	subs	r3, #1
 801498a:	b2da      	uxtb	r2, r3
 801498c:	4b06      	ldr	r3, [pc, #24]	@ (80149a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801498e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014992:	4b05      	ldr	r3, [pc, #20]	@ (80149a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014994:	685b      	ldr	r3, [r3, #4]
 8014996:	4618      	mov	r0, r3
 8014998:	f7ff ff20 	bl	80147dc <IncreaseBufferPointer>
 801499c:	4603      	mov	r3, r0
 801499e:	4a02      	ldr	r2, [pc, #8]	@ (80149a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80149a0:	6053      	str	r3, [r2, #4]

    return true;
 80149a2:	2301      	movs	r3, #1
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	20001b34 	.word	0x20001b34

080149ac <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	4603      	mov	r3, r0
 80149b4:	460a      	mov	r2, r1
 80149b6:	71fb      	strb	r3, [r7, #7]
 80149b8:	4613      	mov	r3, r2
 80149ba:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80149bc:	2300      	movs	r3, #0
 80149be:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80149c0:	4b10      	ldr	r3, [pc, #64]	@ (8014a04 <LoRaMacConfirmQueueSetStatus+0x58>)
 80149c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7ff ff20 	bl	801480c <IsListEmpty>
 80149cc:	4603      	mov	r3, r0
 80149ce:	f083 0301 	eor.w	r3, r3, #1
 80149d2:	b2db      	uxtb	r3, r3
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d011      	beq.n	80149fc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80149d8:	4b0a      	ldr	r3, [pc, #40]	@ (8014a04 <LoRaMacConfirmQueueSetStatus+0x58>)
 80149da:	6859      	ldr	r1, [r3, #4]
 80149dc:	4b09      	ldr	r3, [pc, #36]	@ (8014a04 <LoRaMacConfirmQueueSetStatus+0x58>)
 80149de:	689a      	ldr	r2, [r3, #8]
 80149e0:	79bb      	ldrb	r3, [r7, #6]
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7ff ff32 	bl	801484c <GetElement>
 80149e8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d005      	beq.n	80149fc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	79fa      	ldrb	r2, [r7, #7]
 80149f4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	2201      	movs	r2, #1
 80149fa:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80149fc:	bf00      	nop
 80149fe:	3710      	adds	r7, #16
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}
 8014a04:	20001b34 	.word	0x20001b34

08014a08 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	4603      	mov	r3, r0
 8014a10:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014a12:	2300      	movs	r3, #0
 8014a14:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014a16:	4b10      	ldr	r3, [pc, #64]	@ (8014a58 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f7ff fef5 	bl	801480c <IsListEmpty>
 8014a22:	4603      	mov	r3, r0
 8014a24:	f083 0301 	eor.w	r3, r3, #1
 8014a28:	b2db      	uxtb	r3, r3
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d00e      	beq.n	8014a4c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8014a58 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014a30:	6859      	ldr	r1, [r3, #4]
 8014a32:	4b09      	ldr	r3, [pc, #36]	@ (8014a58 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014a34:	689a      	ldr	r2, [r3, #8]
 8014a36:	79fb      	ldrb	r3, [r7, #7]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7ff ff07 	bl	801484c <GetElement>
 8014a3e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d002      	beq.n	8014a4c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	785b      	ldrb	r3, [r3, #1]
 8014a4a:	e000      	b.n	8014a4e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014a4c:	2301      	movs	r3, #1
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3710      	adds	r7, #16
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	20001b34 	.word	0x20001b34

08014a5c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b084      	sub	sp, #16
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	4603      	mov	r3, r0
 8014a64:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8014a66:	4b16      	ldr	r3, [pc, #88]	@ (8014ac0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014a68:	685b      	ldr	r3, [r3, #4]
 8014a6a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014a6c:	4a14      	ldr	r2, [pc, #80]	@ (8014ac0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014a6e:	79fb      	ldrb	r3, [r7, #7]
 8014a70:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014a74:	4b12      	ldr	r3, [pc, #72]	@ (8014ac0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f7ff fec6 	bl	801480c <IsListEmpty>
 8014a80:	4603      	mov	r3, r0
 8014a82:	f083 0301 	eor.w	r3, r3, #1
 8014a86:	b2db      	uxtb	r3, r3
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d015      	beq.n	8014ab8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	79fa      	ldrb	r2, [r7, #7]
 8014a90:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	78db      	ldrb	r3, [r3, #3]
 8014a96:	f083 0301 	eor.w	r3, r3, #1
 8014a9a:	b2db      	uxtb	r3, r3
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d002      	beq.n	8014aa6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014aa6:	68f8      	ldr	r0, [r7, #12]
 8014aa8:	f7ff fe98 	bl	80147dc <IncreaseBufferPointer>
 8014aac:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014aae:	4b04      	ldr	r3, [pc, #16]	@ (8014ac0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014ab0:	689b      	ldr	r3, [r3, #8]
 8014ab2:	68fa      	ldr	r2, [r7, #12]
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d1e9      	bne.n	8014a8c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8014ab8:	bf00      	nop
 8014aba:	3710      	adds	r7, #16
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	20001b34 	.word	0x20001b34

08014ac4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	4603      	mov	r3, r0
 8014acc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014ace:	4b09      	ldr	r3, [pc, #36]	@ (8014af4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014ad0:	6859      	ldr	r1, [r3, #4]
 8014ad2:	4b08      	ldr	r3, [pc, #32]	@ (8014af4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014ad4:	689a      	ldr	r2, [r3, #8]
 8014ad6:	79fb      	ldrb	r3, [r7, #7]
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7ff feb7 	bl	801484c <GetElement>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d001      	beq.n	8014ae8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	e000      	b.n	8014aea <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8014ae8:	2300      	movs	r3, #0
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3708      	adds	r7, #8
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	20001b34 	.word	0x20001b34

08014af8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b084      	sub	sp, #16
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014b00:	4b25      	ldr	r3, [pc, #148]	@ (8014b98 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b06:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8014b08:	2300      	movs	r3, #0
 8014b0a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8014b0c:	f107 0308 	add.w	r3, r7, #8
 8014b10:	2204      	movs	r2, #4
 8014b12:	2100      	movs	r1, #0
 8014b14:	4618      	mov	r0, r3
 8014b16:	f003 fca3 	bl	8018460 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	73fb      	strb	r3, [r7, #15]
 8014b1e:	e032      	b.n	8014b86 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014b20:	4b1d      	ldr	r3, [pc, #116]	@ (8014b98 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	781a      	ldrb	r2, [r3, #0]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8014b98 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	785a      	ldrb	r2, [r3, #1]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8014b34:	4b18      	ldr	r3, [pc, #96]	@ (8014b98 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	789b      	ldrb	r3, [r3, #2]
 8014b3a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8014b3c:	7b7b      	ldrb	r3, [r7, #13]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d005      	beq.n	8014b4e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014b42:	4b15      	ldr	r3, [pc, #84]	@ (8014b98 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	689b      	ldr	r3, [r3, #8]
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	4798      	blx	r3
 8014b4c:	e00b      	b.n	8014b66 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014b4e:	4b12      	ldr	r3, [pc, #72]	@ (8014b98 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8014b56:	4b10      	ldr	r3, [pc, #64]	@ (8014b98 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	785b      	ldrb	r3, [r3, #1]
 8014b5c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8014b98 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	78db      	ldrb	r3, [r3, #3]
 8014b64:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8014b66:	f7ff feff 	bl	8014968 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014b6a:	7b7b      	ldrb	r3, [r7, #13]
 8014b6c:	f083 0301 	eor.w	r3, r3, #1
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d004      	beq.n	8014b80 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8014b76:	f107 0308 	add.w	r3, r7, #8
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7ff feba 	bl	80148f4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014b80:	7bfb      	ldrb	r3, [r7, #15]
 8014b82:	3301      	adds	r3, #1
 8014b84:	73fb      	strb	r3, [r7, #15]
 8014b86:	7bfa      	ldrb	r2, [r7, #15]
 8014b88:	7bbb      	ldrb	r3, [r7, #14]
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	d3c8      	bcc.n	8014b20 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8014b8e:	bf00      	nop
 8014b90:	bf00      	nop
 8014b92:	3710      	adds	r7, #16
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}
 8014b98:	20001b34 	.word	0x20001b34

08014b9c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014ba0:	4b03      	ldr	r3, [pc, #12]	@ (8014bb0 <LoRaMacConfirmQueueGetCnt+0x14>)
 8014ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bc80      	pop	{r7}
 8014bac:	4770      	bx	lr
 8014bae:	bf00      	nop
 8014bb0:	20001b34 	.word	0x20001b34

08014bb4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014bb8:	4b06      	ldr	r3, [pc, #24]	@ (8014bd4 <LoRaMacConfirmQueueIsFull+0x20>)
 8014bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7ff fe34 	bl	801482c <IsListFull>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d001      	beq.n	8014bce <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8014bca:	2301      	movs	r3, #1
 8014bcc:	e000      	b.n	8014bd0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8014bce:	2300      	movs	r3, #0
    }
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	bd80      	pop	{r7, pc}
 8014bd4:	20001b34 	.word	0x20001b34

08014bd8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b08e      	sub	sp, #56	@ 0x38
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	60f8      	str	r0, [r7, #12]
 8014be0:	607b      	str	r3, [r7, #4]
 8014be2:	460b      	mov	r3, r1
 8014be4:	817b      	strh	r3, [r7, #10]
 8014be6:	4613      	mov	r3, r2
 8014be8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d101      	bne.n	8014bf4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014bf0:	2309      	movs	r3, #9
 8014bf2:	e084      	b.n	8014cfe <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8014bfe:	f107 0320 	add.w	r3, r7, #32
 8014c02:	2200      	movs	r2, #0
 8014c04:	601a      	str	r2, [r3, #0]
 8014c06:	605a      	str	r2, [r3, #4]
 8014c08:	609a      	str	r2, [r3, #8]
 8014c0a:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8014c0c:	f107 0310 	add.w	r3, r7, #16
 8014c10:	2200      	movs	r2, #0
 8014c12:	601a      	str	r2, [r3, #0]
 8014c14:	605a      	str	r2, [r3, #4]
 8014c16:	609a      	str	r2, [r3, #8]
 8014c18:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8014c1e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8014c22:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	b2db      	uxtb	r3, r3
 8014c28:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	0a1b      	lsrs	r3, r3, #8
 8014c2e:	b2db      	uxtb	r3, r3
 8014c30:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	0c1b      	lsrs	r3, r3, #16
 8014c36:	b2db      	uxtb	r3, r3
 8014c38:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	0e1b      	lsrs	r3, r3, #24
 8014c3e:	b2db      	uxtb	r3, r3
 8014c40:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8014c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c4a:	0a1b      	lsrs	r3, r3, #8
 8014c4c:	b2db      	uxtb	r3, r3
 8014c4e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c52:	0c1b      	lsrs	r3, r3, #16
 8014c54:	b2db      	uxtb	r3, r3
 8014c56:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c5a:	0e1b      	lsrs	r3, r3, #24
 8014c5c:	b2db      	uxtb	r3, r3
 8014c5e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8014c60:	e048      	b.n	8014cf4 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 8014c62:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014c64:	b2db      	uxtb	r3, r3
 8014c66:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014c68:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014c6e:	f107 0320 	add.w	r3, r7, #32
 8014c72:	7a7a      	ldrb	r2, [r7, #9]
 8014c74:	f107 0010 	add.w	r0, r7, #16
 8014c78:	2110      	movs	r1, #16
 8014c7a:	f7f8 f9df 	bl	800d03c <SecureElementAesEncrypt>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d001      	beq.n	8014c88 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014c84:	230e      	movs	r3, #14
 8014c86:	e03a      	b.n	8014cfe <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014c88:	2300      	movs	r3, #0
 8014c8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8014c8e:	e01e      	b.n	8014cce <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014c90:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8014c94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014c98:	4413      	add	r3, r2
 8014c9a:	461a      	mov	r2, r3
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	4413      	add	r3, r2
 8014ca0:	7819      	ldrb	r1, [r3, #0]
 8014ca2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014ca6:	3338      	adds	r3, #56	@ 0x38
 8014ca8:	443b      	add	r3, r7
 8014caa:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8014cae:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8014cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014cb6:	4403      	add	r3, r0
 8014cb8:	4618      	mov	r0, r3
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	4403      	add	r3, r0
 8014cbe:	404a      	eors	r2, r1
 8014cc0:	b2d2      	uxtb	r2, r2
 8014cc2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014cc8:	3301      	adds	r3, #1
 8014cca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8014cce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014cd2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014cd6:	2a10      	cmp	r2, #16
 8014cd8:	bfa8      	it	ge
 8014cda:	2210      	movge	r2, #16
 8014cdc:	b212      	sxth	r2, r2
 8014cde:	4293      	cmp	r3, r2
 8014ce0:	dbd6      	blt.n	8014c90 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 8014ce2:	897b      	ldrh	r3, [r7, #10]
 8014ce4:	3b10      	subs	r3, #16
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8014cea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014cee:	3310      	adds	r3, #16
 8014cf0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8014cf4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	dcb2      	bgt.n	8014c62 <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014cfc:	2300      	movs	r3, #0
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	3738      	adds	r7, #56	@ 0x38
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}

08014d06 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014d06:	b490      	push	{r4, r7}
 8014d08:	b082      	sub	sp, #8
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	4604      	mov	r4, r0
 8014d0e:	4608      	mov	r0, r1
 8014d10:	4611      	mov	r1, r2
 8014d12:	461a      	mov	r2, r3
 8014d14:	4623      	mov	r3, r4
 8014d16:	80fb      	strh	r3, [r7, #6]
 8014d18:	4603      	mov	r3, r0
 8014d1a:	717b      	strb	r3, [r7, #5]
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	713b      	strb	r3, [r7, #4]
 8014d20:	4613      	mov	r3, r2
 8014d22:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014d24:	69bb      	ldr	r3, [r7, #24]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d101      	bne.n	8014d2e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014d2a:	2309      	movs	r3, #9
 8014d2c:	e04e      	b.n	8014dcc <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	2249      	movs	r2, #73	@ 0x49
 8014d32:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	3301      	adds	r3, #1
 8014d38:	2200      	movs	r2, #0
 8014d3a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014d3c:	69bb      	ldr	r3, [r7, #24]
 8014d3e:	3302      	adds	r3, #2
 8014d40:	2200      	movs	r2, #0
 8014d42:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014d44:	69bb      	ldr	r3, [r7, #24]
 8014d46:	3303      	adds	r3, #3
 8014d48:	2200      	movs	r2, #0
 8014d4a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	3304      	adds	r3, #4
 8014d50:	2200      	movs	r2, #0
 8014d52:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014d54:	69bb      	ldr	r3, [r7, #24]
 8014d56:	3305      	adds	r3, #5
 8014d58:	78fa      	ldrb	r2, [r7, #3]
 8014d5a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014d5c:	69bb      	ldr	r3, [r7, #24]
 8014d5e:	3306      	adds	r3, #6
 8014d60:	693a      	ldr	r2, [r7, #16]
 8014d62:	b2d2      	uxtb	r2, r2
 8014d64:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	0a1a      	lsrs	r2, r3, #8
 8014d6a:	69bb      	ldr	r3, [r7, #24]
 8014d6c:	3307      	adds	r3, #7
 8014d6e:	b2d2      	uxtb	r2, r2
 8014d70:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	0c1a      	lsrs	r2, r3, #16
 8014d76:	69bb      	ldr	r3, [r7, #24]
 8014d78:	3308      	adds	r3, #8
 8014d7a:	b2d2      	uxtb	r2, r2
 8014d7c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014d7e:	693b      	ldr	r3, [r7, #16]
 8014d80:	0e1a      	lsrs	r2, r3, #24
 8014d82:	69bb      	ldr	r3, [r7, #24]
 8014d84:	3309      	adds	r3, #9
 8014d86:	b2d2      	uxtb	r2, r2
 8014d88:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	330a      	adds	r3, #10
 8014d8e:	697a      	ldr	r2, [r7, #20]
 8014d90:	b2d2      	uxtb	r2, r2
 8014d92:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	0a1a      	lsrs	r2, r3, #8
 8014d98:	69bb      	ldr	r3, [r7, #24]
 8014d9a:	330b      	adds	r3, #11
 8014d9c:	b2d2      	uxtb	r2, r2
 8014d9e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	0c1a      	lsrs	r2, r3, #16
 8014da4:	69bb      	ldr	r3, [r7, #24]
 8014da6:	330c      	adds	r3, #12
 8014da8:	b2d2      	uxtb	r2, r2
 8014daa:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	0e1a      	lsrs	r2, r3, #24
 8014db0:	69bb      	ldr	r3, [r7, #24]
 8014db2:	330d      	adds	r3, #13
 8014db4:	b2d2      	uxtb	r2, r2
 8014db6:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014db8:	69bb      	ldr	r3, [r7, #24]
 8014dba:	330e      	adds	r3, #14
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014dc0:	69bb      	ldr	r3, [r7, #24]
 8014dc2:	330f      	adds	r3, #15
 8014dc4:	88fa      	ldrh	r2, [r7, #6]
 8014dc6:	b2d2      	uxtb	r2, r2
 8014dc8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014dca:	2300      	movs	r3, #0
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3708      	adds	r7, #8
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bc90      	pop	{r4, r7}
 8014dd4:	4770      	bx	lr

08014dd6 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014dd6:	b590      	push	{r4, r7, lr}
 8014dd8:	b08b      	sub	sp, #44	@ 0x2c
 8014dda:	af04      	add	r7, sp, #16
 8014ddc:	6078      	str	r0, [r7, #4]
 8014dde:	4608      	mov	r0, r1
 8014de0:	4611      	mov	r1, r2
 8014de2:	461a      	mov	r2, r3
 8014de4:	4603      	mov	r3, r0
 8014de6:	807b      	strh	r3, [r7, #2]
 8014de8:	460b      	mov	r3, r1
 8014dea:	707b      	strb	r3, [r7, #1]
 8014dec:	4613      	mov	r3, r2
 8014dee:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d002      	beq.n	8014dfc <ComputeCmacB0+0x26>
 8014df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d101      	bne.n	8014e00 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014dfc:	2309      	movs	r3, #9
 8014dfe:	e024      	b.n	8014e4a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014e00:	887b      	ldrh	r3, [r7, #2]
 8014e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e06:	d901      	bls.n	8014e0c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014e08:	230d      	movs	r3, #13
 8014e0a:	e01e      	b.n	8014e4a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014e0c:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8014e10:	783a      	ldrb	r2, [r7, #0]
 8014e12:	7879      	ldrb	r1, [r7, #1]
 8014e14:	8878      	ldrh	r0, [r7, #2]
 8014e16:	f107 0308 	add.w	r3, r7, #8
 8014e1a:	9302      	str	r3, [sp, #8]
 8014e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e1e:	9301      	str	r3, [sp, #4]
 8014e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e22:	9300      	str	r3, [sp, #0]
 8014e24:	4623      	mov	r3, r4
 8014e26:	f7ff ff6e 	bl	8014d06 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014e2a:	887a      	ldrh	r2, [r7, #2]
 8014e2c:	7879      	ldrb	r1, [r7, #1]
 8014e2e:	f107 0008 	add.w	r0, r7, #8
 8014e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	460b      	mov	r3, r1
 8014e38:	6879      	ldr	r1, [r7, #4]
 8014e3a:	f7f8 f8b9 	bl	800cfb0 <SecureElementComputeAesCmac>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d001      	beq.n	8014e48 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014e44:	230e      	movs	r3, #14
 8014e46:	e000      	b.n	8014e4a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014e48:	2300      	movs	r3, #0
}
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	371c      	adds	r7, #28
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bd90      	pop	{r4, r7, pc}

08014e52 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014e52:	b590      	push	{r4, r7, lr}
 8014e54:	b0cd      	sub	sp, #308	@ 0x134
 8014e56:	af04      	add	r7, sp, #16
 8014e58:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8014e5c:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8014e60:	6020      	str	r0, [r4, #0]
 8014e62:	460c      	mov	r4, r1
 8014e64:	4610      	mov	r0, r2
 8014e66:	4619      	mov	r1, r3
 8014e68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014e6c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014e70:	4622      	mov	r2, r4
 8014e72:	801a      	strh	r2, [r3, #0]
 8014e74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014e78:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	701a      	strb	r2, [r3, #0]
 8014e80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014e84:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014e88:	460a      	mov	r2, r1
 8014e8a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014e8c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014e90:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d101      	bne.n	8014e9e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e9a:	2309      	movs	r3, #9
 8014e9c:	e063      	b.n	8014f66 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014e9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014ea2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014ea6:	881b      	ldrh	r3, [r3, #0]
 8014ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014eac:	d901      	bls.n	8014eb2 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014eae:	230d      	movs	r3, #13
 8014eb0:	e059      	b.n	8014f66 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014eb2:	f107 030c 	add.w	r3, r7, #12
 8014eb6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8014eba:	2100      	movs	r1, #0
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f003 facf 	bl	8018460 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014ec2:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8014ec6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014eca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014ece:	781a      	ldrb	r2, [r3, #0]
 8014ed0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014ed4:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014ed8:	7819      	ldrb	r1, [r3, #0]
 8014eda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014ede:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014ee2:	8818      	ldrh	r0, [r3, #0]
 8014ee4:	f107 030c 	add.w	r3, r7, #12
 8014ee8:	9302      	str	r3, [sp, #8]
 8014eea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014eee:	9301      	str	r3, [sp, #4]
 8014ef0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ef4:	9300      	str	r3, [sp, #0]
 8014ef6:	4623      	mov	r3, r4
 8014ef8:	f7ff ff05 	bl	8014d06 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014efc:	f107 030c 	add.w	r3, r7, #12
 8014f00:	3310      	adds	r3, #16
 8014f02:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8014f06:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8014f0a:	8812      	ldrh	r2, [r2, #0]
 8014f0c:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8014f10:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8014f14:	6809      	ldr	r1, [r1, #0]
 8014f16:	4618      	mov	r0, r3
 8014f18:	f003 fa67 	bl	80183ea <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014f1c:	2306      	movs	r3, #6
 8014f1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014f22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014f26:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014f2a:	881b      	ldrh	r3, [r3, #0]
 8014f2c:	3310      	adds	r3, #16
 8014f2e:	4619      	mov	r1, r3
 8014f30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014f34:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	f107 000c 	add.w	r0, r7, #12
 8014f3e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8014f42:	f7f8 f84f 	bl	800cfe4 <SecureElementVerifyAesCmac>
 8014f46:	4603      	mov	r3, r0
 8014f48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014f4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d101      	bne.n	8014f58 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014f54:	2300      	movs	r3, #0
 8014f56:	e006      	b.n	8014f66 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014f58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	d101      	bne.n	8014f64 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014f60:	2301      	movs	r3, #1
 8014f62:	e000      	b.n	8014f66 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014f64:	230e      	movs	r3, #14
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bd90      	pop	{r4, r7, pc}

08014f70 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014f70:	b480      	push	{r7}
 8014f72:	b085      	sub	sp, #20
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	4603      	mov	r3, r0
 8014f78:	6039      	str	r1, [r7, #0]
 8014f7a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	73fb      	strb	r3, [r7, #15]
 8014f80:	e011      	b.n	8014fa6 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014f82:	7bfb      	ldrb	r3, [r7, #15]
 8014f84:	4a0c      	ldr	r2, [pc, #48]	@ (8014fb8 <GetKeyAddrItem+0x48>)
 8014f86:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014f8a:	79fa      	ldrb	r2, [r7, #7]
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d107      	bne.n	8014fa0 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014f90:	7bfb      	ldrb	r3, [r7, #15]
 8014f92:	009b      	lsls	r3, r3, #2
 8014f94:	4a08      	ldr	r2, [pc, #32]	@ (8014fb8 <GetKeyAddrItem+0x48>)
 8014f96:	441a      	add	r2, r3
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	e006      	b.n	8014fae <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014fa0:	7bfb      	ldrb	r3, [r7, #15]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	73fb      	strb	r3, [r7, #15]
 8014fa6:	7bfb      	ldrb	r3, [r7, #15]
 8014fa8:	2b01      	cmp	r3, #1
 8014faa:	d9ea      	bls.n	8014f82 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014fac:	230b      	movs	r3, #11
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3714      	adds	r7, #20
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bc80      	pop	{r7}
 8014fb6:	4770      	bx	lr
 8014fb8:	20000110 	.word	0x20000110

08014fbc <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b088      	sub	sp, #32
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	60b9      	str	r1, [r7, #8]
 8014fc4:	607a      	str	r2, [r7, #4]
 8014fc6:	461a      	mov	r2, r3
 8014fc8:	4603      	mov	r3, r0
 8014fca:	73fb      	strb	r3, [r7, #15]
 8014fcc:	4613      	mov	r3, r2
 8014fce:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8014fd0:	f107 0310 	add.w	r3, r7, #16
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	601a      	str	r2, [r3, #0]
 8014fd8:	605a      	str	r2, [r3, #4]
 8014fda:	609a      	str	r2, [r3, #8]
 8014fdc:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8014fde:	7bfb      	ldrb	r3, [r7, #15]
 8014fe0:	2b08      	cmp	r3, #8
 8014fe2:	d002      	beq.n	8014fea <DeriveSessionKey10x+0x2e>
 8014fe4:	2b09      	cmp	r3, #9
 8014fe6:	d003      	beq.n	8014ff0 <DeriveSessionKey10x+0x34>
 8014fe8:	e005      	b.n	8014ff6 <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8014fea:	2301      	movs	r3, #1
 8014fec:	743b      	strb	r3, [r7, #16]
            break;
 8014fee:	e004      	b.n	8014ffa <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014ff0:	2302      	movs	r3, #2
 8014ff2:	743b      	strb	r3, [r7, #16]
            break;
 8014ff4:	e001      	b.n	8014ffa <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014ff6:	230a      	movs	r3, #10
 8014ff8:	e02a      	b.n	8015050 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014ffa:	68bb      	ldr	r3, [r7, #8]
 8014ffc:	b2db      	uxtb	r3, r3
 8014ffe:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	0a1b      	lsrs	r3, r3, #8
 8015004:	b2db      	uxtb	r3, r3
 8015006:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	0c1b      	lsrs	r3, r3, #16
 801500c:	b2db      	uxtb	r3, r3
 801500e:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	b2db      	uxtb	r3, r3
 8015014:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	0a1b      	lsrs	r3, r3, #8
 801501a:	b2db      	uxtb	r3, r3
 801501c:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	0c1b      	lsrs	r3, r3, #16
 8015022:	b2db      	uxtb	r3, r3
 8015024:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015026:	89bb      	ldrh	r3, [r7, #12]
 8015028:	b2db      	uxtb	r3, r3
 801502a:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801502c:	89bb      	ldrh	r3, [r7, #12]
 801502e:	0a1b      	lsrs	r3, r3, #8
 8015030:	b29b      	uxth	r3, r3
 8015032:	b2db      	uxtb	r3, r3
 8015034:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015036:	7bfa      	ldrb	r2, [r7, #15]
 8015038:	f107 0310 	add.w	r3, r7, #16
 801503c:	2101      	movs	r1, #1
 801503e:	4618      	mov	r0, r3
 8015040:	f7f8 f87c 	bl	800d13c <SecureElementDeriveAndStoreKey>
 8015044:	4603      	mov	r3, r0
 8015046:	2b00      	cmp	r3, #0
 8015048:	d001      	beq.n	801504e <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801504a:	230e      	movs	r3, #14
 801504c:	e000      	b.n	8015050 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801504e:	2300      	movs	r3, #0
}
 8015050:	4618      	mov	r0, r3
 8015052:	3720      	adds	r7, #32
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}

08015058 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015058:	b480      	push	{r7}
 801505a:	b083      	sub	sp, #12
 801505c:	af00      	add	r7, sp, #0
 801505e:	4603      	mov	r3, r0
 8015060:	6039      	str	r1, [r7, #0]
 8015062:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d101      	bne.n	801506e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801506a:	2309      	movs	r3, #9
 801506c:	e029      	b.n	80150c2 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801506e:	79fb      	ldrb	r3, [r7, #7]
 8015070:	3b01      	subs	r3, #1
 8015072:	2b03      	cmp	r3, #3
 8015074:	d822      	bhi.n	80150bc <GetLastFcntDown+0x64>
 8015076:	a201      	add	r2, pc, #4	@ (adr r2, 801507c <GetLastFcntDown+0x24>)
 8015078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801507c:	0801508d 	.word	0x0801508d
 8015080:	08015099 	.word	0x08015099
 8015084:	080150a5 	.word	0x080150a5
 8015088:	080150b1 	.word	0x080150b1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801508c:	4b0f      	ldr	r3, [pc, #60]	@ (80150cc <GetLastFcntDown+0x74>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	691a      	ldr	r2, [r3, #16]
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	601a      	str	r2, [r3, #0]
            break;
 8015096:	e013      	b.n	80150c0 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8015098:	4b0c      	ldr	r3, [pc, #48]	@ (80150cc <GetLastFcntDown+0x74>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	695a      	ldr	r2, [r3, #20]
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	601a      	str	r2, [r3, #0]
            break;
 80150a2:	e00d      	b.n	80150c0 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80150a4:	4b09      	ldr	r3, [pc, #36]	@ (80150cc <GetLastFcntDown+0x74>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	699a      	ldr	r2, [r3, #24]
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	601a      	str	r2, [r3, #0]
            break;
 80150ae:	e007      	b.n	80150c0 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80150b0:	4b06      	ldr	r3, [pc, #24]	@ (80150cc <GetLastFcntDown+0x74>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	69da      	ldr	r2, [r3, #28]
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	601a      	str	r2, [r3, #0]
            break;
 80150ba:	e001      	b.n	80150c0 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80150bc:	2305      	movs	r3, #5
 80150be:	e000      	b.n	80150c2 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80150c0:	2300      	movs	r3, #0
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	370c      	adds	r7, #12
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bc80      	pop	{r7}
 80150ca:	4770      	bx	lr
 80150cc:	20001b58 	.word	0x20001b58

080150d0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b084      	sub	sp, #16
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	4603      	mov	r3, r0
 80150d8:	6039      	str	r1, [r7, #0]
 80150da:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80150dc:	2300      	movs	r3, #0
 80150de:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80150e0:	f107 020c 	add.w	r2, r7, #12
 80150e4:	79fb      	ldrb	r3, [r7, #7]
 80150e6:	4611      	mov	r1, r2
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7ff ffb5 	bl	8015058 <GetLastFcntDown>
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <CheckFCntDown+0x28>
    {
        return false;
 80150f4:	2300      	movs	r3, #0
 80150f6:	e00a      	b.n	801510e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	683a      	ldr	r2, [r7, #0]
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d803      	bhi.n	8015108 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8015100:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015106:	d101      	bne.n	801510c <CheckFCntDown+0x3c>
    {
        return true;
 8015108:	2301      	movs	r3, #1
 801510a:	e000      	b.n	801510e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801510c:	2300      	movs	r3, #0
    }
}
 801510e:	4618      	mov	r0, r3
 8015110:	3710      	adds	r7, #16
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
	...

08015118 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015118:	b480      	push	{r7}
 801511a:	b083      	sub	sp, #12
 801511c:	af00      	add	r7, sp, #0
 801511e:	4603      	mov	r3, r0
 8015120:	6039      	str	r1, [r7, #0]
 8015122:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015124:	79fb      	ldrb	r3, [r7, #7]
 8015126:	3b01      	subs	r3, #1
 8015128:	2b03      	cmp	r3, #3
 801512a:	d82b      	bhi.n	8015184 <UpdateFCntDown+0x6c>
 801512c:	a201      	add	r2, pc, #4	@ (adr r2, 8015134 <UpdateFCntDown+0x1c>)
 801512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015132:	bf00      	nop
 8015134:	08015145 	.word	0x08015145
 8015138:	08015157 	.word	0x08015157
 801513c:	08015169 	.word	0x08015169
 8015140:	0801517b 	.word	0x0801517b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015144:	4b12      	ldr	r3, [pc, #72]	@ (8015190 <UpdateFCntDown+0x78>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	683a      	ldr	r2, [r7, #0]
 801514a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 801514c:	4b10      	ldr	r3, [pc, #64]	@ (8015190 <UpdateFCntDown+0x78>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	683a      	ldr	r2, [r7, #0]
 8015152:	621a      	str	r2, [r3, #32]
            break;
 8015154:	e017      	b.n	8015186 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8015156:	4b0e      	ldr	r3, [pc, #56]	@ (8015190 <UpdateFCntDown+0x78>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	683a      	ldr	r2, [r7, #0]
 801515c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801515e:	4b0c      	ldr	r3, [pc, #48]	@ (8015190 <UpdateFCntDown+0x78>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	683a      	ldr	r2, [r7, #0]
 8015164:	621a      	str	r2, [r3, #32]
            break;
 8015166:	e00e      	b.n	8015186 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8015168:	4b09      	ldr	r3, [pc, #36]	@ (8015190 <UpdateFCntDown+0x78>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	683a      	ldr	r2, [r7, #0]
 801516e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8015170:	4b07      	ldr	r3, [pc, #28]	@ (8015190 <UpdateFCntDown+0x78>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	683a      	ldr	r2, [r7, #0]
 8015176:	621a      	str	r2, [r3, #32]
            break;
 8015178:	e005      	b.n	8015186 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801517a:	4b05      	ldr	r3, [pc, #20]	@ (8015190 <UpdateFCntDown+0x78>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	683a      	ldr	r2, [r7, #0]
 8015180:	61da      	str	r2, [r3, #28]
            break;
 8015182:	e000      	b.n	8015186 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015184:	bf00      	nop
    }
}
 8015186:	bf00      	nop
 8015188:	370c      	adds	r7, #12
 801518a:	46bd      	mov	sp, r7
 801518c:	bc80      	pop	{r7}
 801518e:	4770      	bx	lr
 8015190:	20001b58 	.word	0x20001b58

08015194 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015194:	b480      	push	{r7}
 8015196:	b083      	sub	sp, #12
 8015198:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801519a:	4b18      	ldr	r3, [pc, #96]	@ (80151fc <ResetFCnts+0x68>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	2200      	movs	r2, #0
 80151a0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80151a2:	4b16      	ldr	r3, [pc, #88]	@ (80151fc <ResetFCnts+0x68>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	f04f 32ff 	mov.w	r2, #4294967295
 80151aa:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80151ac:	4b13      	ldr	r3, [pc, #76]	@ (80151fc <ResetFCnts+0x68>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	f04f 32ff 	mov.w	r2, #4294967295
 80151b4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80151b6:	4b11      	ldr	r3, [pc, #68]	@ (80151fc <ResetFCnts+0x68>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	f04f 32ff 	mov.w	r2, #4294967295
 80151be:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80151c0:	4b0e      	ldr	r3, [pc, #56]	@ (80151fc <ResetFCnts+0x68>)
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	4b0d      	ldr	r3, [pc, #52]	@ (80151fc <ResetFCnts+0x68>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	6992      	ldr	r2, [r2, #24]
 80151ca:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80151cc:	2300      	movs	r3, #0
 80151ce:	607b      	str	r3, [r7, #4]
 80151d0:	e00b      	b.n	80151ea <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80151d2:	4b0a      	ldr	r3, [pc, #40]	@ (80151fc <ResetFCnts+0x68>)
 80151d4:	681a      	ldr	r2, [r3, #0]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	3306      	adds	r3, #6
 80151da:	009b      	lsls	r3, r3, #2
 80151dc:	4413      	add	r3, r2
 80151de:	f04f 32ff 	mov.w	r2, #4294967295
 80151e2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	3301      	adds	r3, #1
 80151e8:	607b      	str	r3, [r7, #4]
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	ddf0      	ble.n	80151d2 <ResetFCnts+0x3e>
    }
}
 80151f0:	bf00      	nop
 80151f2:	bf00      	nop
 80151f4:	370c      	adds	r7, #12
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bc80      	pop	{r7}
 80151fa:	4770      	bx	lr
 80151fc:	20001b58 	.word	0x20001b58

08015200 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8015200:	b480      	push	{r7}
 8015202:	b083      	sub	sp, #12
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8015208:	4b06      	ldr	r3, [pc, #24]	@ (8015224 <IsJoinNonce10xOk+0x24>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	689b      	ldr	r3, [r3, #8]
 801520e:	687a      	ldr	r2, [r7, #4]
 8015210:	429a      	cmp	r2, r3
 8015212:	bf8c      	ite	hi
 8015214:	2301      	movhi	r3, #1
 8015216:	2300      	movls	r3, #0
 8015218:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801521a:	4618      	mov	r0, r3
 801521c:	370c      	adds	r7, #12
 801521e:	46bd      	mov	sp, r7
 8015220:	bc80      	pop	{r7}
 8015222:	4770      	bx	lr
 8015224:	20001b58 	.word	0x20001b58

08015228 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b082      	sub	sp, #8
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d101      	bne.n	801523a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8015236:	2308      	movs	r3, #8
 8015238:	e01c      	b.n	8015274 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801523a:	4a10      	ldr	r2, [pc, #64]	@ (801527c <LoRaMacCryptoInit+0x54>)
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8015240:	4b0e      	ldr	r3, [pc, #56]	@ (801527c <LoRaMacCryptoInit+0x54>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	2228      	movs	r2, #40	@ 0x28
 8015246:	2100      	movs	r1, #0
 8015248:	4618      	mov	r0, r3
 801524a:	f003 f909 	bl	8018460 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801524e:	4b0b      	ldr	r3, [pc, #44]	@ (801527c <LoRaMacCryptoInit+0x54>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	2201      	movs	r2, #1
 8015254:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8015256:	4b09      	ldr	r3, [pc, #36]	@ (801527c <LoRaMacCryptoInit+0x54>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	2201      	movs	r2, #1
 801525c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801525e:	4b07      	ldr	r3, [pc, #28]	@ (801527c <LoRaMacCryptoInit+0x54>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	2201      	movs	r2, #1
 8015264:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8015266:	4b05      	ldr	r3, [pc, #20]	@ (801527c <LoRaMacCryptoInit+0x54>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2200      	movs	r2, #0
 801526c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801526e:	f7ff ff91 	bl	8015194 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015272:	2300      	movs	r3, #0
}
 8015274:	4618      	mov	r0, r3
 8015276:	3708      	adds	r7, #8
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}
 801527c:	20001b58 	.word	0x20001b58

08015280 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015280:	b480      	push	{r7}
 8015282:	b083      	sub	sp, #12
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8015288:	4b04      	ldr	r3, [pc, #16]	@ (801529c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	687a      	ldr	r2, [r7, #4]
 801528e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015290:	2300      	movs	r3, #0
}
 8015292:	4618      	mov	r0, r3
 8015294:	370c      	adds	r7, #12
 8015296:	46bd      	mov	sp, r7
 8015298:	bc80      	pop	{r7}
 801529a:	4770      	bx	lr
 801529c:	20001b58 	.word	0x20001b58

080152a0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80152a0:	b480      	push	{r7}
 80152a2:	b083      	sub	sp, #12
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d101      	bne.n	80152b2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80152ae:	2309      	movs	r3, #9
 80152b0:	e006      	b.n	80152c0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80152b2:	4b06      	ldr	r3, [pc, #24]	@ (80152cc <LoRaMacCryptoGetFCntUp+0x2c>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	68db      	ldr	r3, [r3, #12]
 80152b8:	1c5a      	adds	r2, r3, #1
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80152be:	2300      	movs	r3, #0
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	370c      	adds	r7, #12
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bc80      	pop	{r7}
 80152c8:	4770      	bx	lr
 80152ca:	bf00      	nop
 80152cc:	20001b58 	.word	0x20001b58

080152d0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b088      	sub	sp, #32
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	4603      	mov	r3, r0
 80152d8:	60b9      	str	r1, [r7, #8]
 80152da:	607a      	str	r2, [r7, #4]
 80152dc:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80152de:	2300      	movs	r3, #0
 80152e0:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80152e2:	2300      	movs	r3, #0
 80152e4:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80152e6:	2312      	movs	r3, #18
 80152e8:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d101      	bne.n	80152f4 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80152f0:	2309      	movs	r3, #9
 80152f2:	e035      	b.n	8015360 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80152f4:	f107 0214 	add.w	r2, r7, #20
 80152f8:	7bfb      	ldrb	r3, [r7, #15]
 80152fa:	4611      	mov	r1, r2
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7ff feab 	bl	8015058 <GetLastFcntDown>
 8015302:	4603      	mov	r3, r0
 8015304:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015306:	7efb      	ldrb	r3, [r7, #27]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d001      	beq.n	8015310 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 801530c:	7efb      	ldrb	r3, [r7, #27]
 801530e:	e027      	b.n	8015360 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015316:	d103      	bne.n	8015320 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	68ba      	ldr	r2, [r7, #8]
 801531c:	601a      	str	r2, [r3, #0]
 801531e:	e01e      	b.n	801535e <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015320:	697b      	ldr	r3, [r7, #20]
 8015322:	b29b      	uxth	r3, r3
 8015324:	68ba      	ldr	r2, [r7, #8]
 8015326:	1ad3      	subs	r3, r2, r3
 8015328:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	2b00      	cmp	r3, #0
 801532e:	dd05      	ble.n	801533c <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015330:	697a      	ldr	r2, [r7, #20]
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	441a      	add	r2, r3
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	601a      	str	r2, [r3, #0]
 801533a:	e010      	b.n	801535e <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d104      	bne.n	801534c <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015342:	697a      	ldr	r2, [r7, #20]
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015348:	2307      	movs	r3, #7
 801534a:	e009      	b.n	8015360 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	0c1b      	lsrs	r3, r3, #16
 8015350:	041b      	lsls	r3, r3, #16
 8015352:	68ba      	ldr	r2, [r7, #8]
 8015354:	4413      	add	r3, r2
 8015356:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801535e:	2300      	movs	r3, #0
}
 8015360:	4618      	mov	r0, r3
 8015362:	3720      	adds	r7, #32
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015368:	b480      	push	{r7}
 801536a:	b085      	sub	sp, #20
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d101      	bne.n	801537a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015376:	2309      	movs	r3, #9
 8015378:	e019      	b.n	80153ae <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801537a:	2300      	movs	r3, #0
 801537c:	60fb      	str	r3, [r7, #12]
 801537e:	e012      	b.n	80153a6 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8015380:	4b0d      	ldr	r3, [pc, #52]	@ (80153b8 <LoRaMacCryptoSetMulticastReference+0x50>)
 8015382:	6819      	ldr	r1, [r3, #0]
 8015384:	68fa      	ldr	r2, [r7, #12]
 8015386:	4613      	mov	r3, r2
 8015388:	005b      	lsls	r3, r3, #1
 801538a:	4413      	add	r3, r2
 801538c:	011b      	lsls	r3, r3, #4
 801538e:	461a      	mov	r2, r3
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	4413      	add	r3, r2
 8015394:	68fa      	ldr	r2, [r7, #12]
 8015396:	3206      	adds	r2, #6
 8015398:	0092      	lsls	r2, r2, #2
 801539a:	440a      	add	r2, r1
 801539c:	3204      	adds	r2, #4
 801539e:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	3301      	adds	r3, #1
 80153a4:	60fb      	str	r3, [r7, #12]
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	dde9      	ble.n	8015380 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80153ac:	2300      	movs	r3, #0
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3714      	adds	r7, #20
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bc80      	pop	{r7}
 80153b6:	4770      	bx	lr
 80153b8:	20001b58 	.word	0x20001b58

080153bc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	4603      	mov	r3, r0
 80153c4:	6039      	str	r1, [r7, #0]
 80153c6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80153c8:	79fb      	ldrb	r3, [r7, #7]
 80153ca:	6839      	ldr	r1, [r7, #0]
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7f7 fd91 	bl	800cef4 <SecureElementSetKey>
 80153d2:	4603      	mov	r3, r0
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d001      	beq.n	80153dc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80153d8:	230e      	movs	r3, #14
 80153da:	e021      	b.n	8015420 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80153dc:	79fb      	ldrb	r3, [r7, #7]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d11d      	bne.n	801541e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80153e2:	4b11      	ldr	r3, [pc, #68]	@ (8015428 <LoRaMacCryptoSetKey+0x6c>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	789b      	ldrb	r3, [r3, #2]
 80153e8:	210b      	movs	r1, #11
 80153ea:	4618      	mov	r0, r3
 80153ec:	f000 fa54 	bl	8015898 <LoRaMacCryptoDeriveLifeTimeKey>
 80153f0:	4603      	mov	r3, r0
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d001      	beq.n	80153fa <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80153f6:	230e      	movs	r3, #14
 80153f8:	e012      	b.n	8015420 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80153fa:	210c      	movs	r1, #12
 80153fc:	2000      	movs	r0, #0
 80153fe:	f000 fa4b 	bl	8015898 <LoRaMacCryptoDeriveLifeTimeKey>
 8015402:	4603      	mov	r3, r0
 8015404:	2b00      	cmp	r3, #0
 8015406:	d001      	beq.n	801540c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015408:	230e      	movs	r3, #14
 801540a:	e009      	b.n	8015420 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801540c:	210a      	movs	r1, #10
 801540e:	2000      	movs	r0, #0
 8015410:	f000 fa42 	bl	8015898 <LoRaMacCryptoDeriveLifeTimeKey>
 8015414:	4603      	mov	r3, r0
 8015416:	2b00      	cmp	r3, #0
 8015418:	d001      	beq.n	801541e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801541a:	230e      	movs	r3, #14
 801541c:	e000      	b.n	8015420 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801541e:	2300      	movs	r3, #0
}
 8015420:	4618      	mov	r0, r3
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}
 8015428:	20001b58 	.word	0x20001b58

0801542c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b086      	sub	sp, #24
 8015430:	af02      	add	r7, sp, #8
 8015432:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d101      	bne.n	801543e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801543a:	2309      	movs	r3, #9
 801543c:	e02d      	b.n	801549a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801543e:	2301      	movs	r3, #1
 8015440:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8015442:	4b18      	ldr	r3, [pc, #96]	@ (80154a4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	889a      	ldrh	r2, [r3, #4]
 8015448:	3201      	adds	r2, #1
 801544a:	b292      	uxth	r2, r2
 801544c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801544e:	4b15      	ldr	r3, [pc, #84]	@ (80154a4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	889a      	ldrh	r2, [r3, #4]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f000 fc14 	bl	8015c86 <LoRaMacSerializerJoinRequest>
 801545e:	4603      	mov	r3, r0
 8015460:	2b00      	cmp	r3, #0
 8015462:	d001      	beq.n	8015468 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015464:	2310      	movs	r3, #16
 8015466:	e018      	b.n	801549a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6819      	ldr	r1, [r3, #0]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	3318      	adds	r3, #24
 8015470:	7bfa      	ldrb	r2, [r7, #15]
 8015472:	9300      	str	r3, [sp, #0]
 8015474:	4613      	mov	r3, r2
 8015476:	2213      	movs	r2, #19
 8015478:	2000      	movs	r0, #0
 801547a:	f7f7 fd99 	bl	800cfb0 <SecureElementComputeAesCmac>
 801547e:	4603      	mov	r3, r0
 8015480:	2b00      	cmp	r3, #0
 8015482:	d001      	beq.n	8015488 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015484:	230e      	movs	r3, #14
 8015486:	e008      	b.n	801549a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f000 fbfc 	bl	8015c86 <LoRaMacSerializerJoinRequest>
 801548e:	4603      	mov	r3, r0
 8015490:	2b00      	cmp	r3, #0
 8015492:	d001      	beq.n	8015498 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015494:	2310      	movs	r3, #16
 8015496:	e000      	b.n	801549a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015498:	2300      	movs	r3, #0
}
 801549a:	4618      	mov	r0, r3
 801549c:	3710      	adds	r7, #16
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	20001b58 	.word	0x20001b58

080154a8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80154a8:	b590      	push	{r4, r7, lr}
 80154aa:	b097      	sub	sp, #92	@ 0x5c
 80154ac:	af04      	add	r7, sp, #16
 80154ae:	4603      	mov	r3, r0
 80154b0:	60b9      	str	r1, [r7, #8]
 80154b2:	607a      	str	r2, [r7, #4]
 80154b4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d002      	beq.n	80154c2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d101      	bne.n	80154c6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80154c2:	2309      	movs	r3, #9
 80154c4:	e0d1      	b.n	801566a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80154c6:	2312      	movs	r3, #18
 80154c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80154cc:	f107 0314 	add.w	r3, r7, #20
 80154d0:	2221      	movs	r2, #33	@ 0x21
 80154d2:	2100      	movs	r1, #0
 80154d4:	4618      	mov	r0, r3
 80154d6:	f007 fd5d 	bl	801cf94 <memset>
    uint8_t versionMinor         = 0;
 80154da:	2300      	movs	r3, #0
 80154dc:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80154de:	4b65      	ldr	r3, [pc, #404]	@ (8015674 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	889b      	ldrh	r3, [r3, #4]
 80154e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681c      	ldr	r4, [r3, #0]
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	791b      	ldrb	r3, [r3, #4]
 80154f0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80154f4:	7bf8      	ldrb	r0, [r7, #15]
 80154f6:	f107 0213 	add.w	r2, r7, #19
 80154fa:	9202      	str	r2, [sp, #8]
 80154fc:	f107 0214 	add.w	r2, r7, #20
 8015500:	9201      	str	r2, [sp, #4]
 8015502:	9300      	str	r3, [sp, #0]
 8015504:	4623      	mov	r3, r4
 8015506:	460a      	mov	r2, r1
 8015508:	68b9      	ldr	r1, [r7, #8]
 801550a:	f7f7 fe56 	bl	800d1ba <SecureElementProcessJoinAccept>
 801550e:	4603      	mov	r3, r0
 8015510:	2b00      	cmp	r3, #0
 8015512:	d001      	beq.n	8015518 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015514:	230e      	movs	r3, #14
 8015516:	e0a8      	b.n	801566a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6818      	ldr	r0, [r3, #0]
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	791b      	ldrb	r3, [r3, #4]
 8015520:	461a      	mov	r2, r3
 8015522:	f107 0314 	add.w	r3, r7, #20
 8015526:	4619      	mov	r1, r3
 8015528:	f002 ff5f 	bl	80183ea <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f000 f9ed 	bl	801590c <LoRaMacParserJoinAccept>
 8015532:	4603      	mov	r3, r0
 8015534:	2b00      	cmp	r3, #0
 8015536:	d001      	beq.n	801553c <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015538:	230f      	movs	r3, #15
 801553a:	e096      	b.n	801566a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 801553c:	2300      	movs	r3, #0
 801553e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	799b      	ldrb	r3, [r3, #6]
 8015546:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	79db      	ldrb	r3, [r3, #7]
 801554c:	021b      	lsls	r3, r3, #8
 801554e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015550:	4313      	orrs	r3, r2
 8015552:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	7a1b      	ldrb	r3, [r3, #8]
 8015558:	041b      	lsls	r3, r3, #16
 801555a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801555c:	4313      	orrs	r3, r2
 801555e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8015560:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015562:	f7ff fe4d 	bl	8015200 <IsJoinNonce10xOk>
 8015566:	4603      	mov	r3, r0
 8015568:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 801556c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015570:	2b00      	cmp	r3, #0
 8015572:	d010      	beq.n	8015596 <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8015574:	4b3f      	ldr	r3, [pc, #252]	@ (8015674 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801557a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 801557c:	7cfb      	ldrb	r3, [r7, #19]
 801557e:	210b      	movs	r1, #11
 8015580:	4618      	mov	r0, r3
 8015582:	f000 f989 	bl	8015898 <LoRaMacCryptoDeriveLifeTimeKey>
 8015586:	4603      	mov	r3, r0
 8015588:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801558c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015590:	2b00      	cmp	r3, #0
 8015592:	d005      	beq.n	80155a0 <LoRaMacCryptoHandleJoinAccept+0xf8>
 8015594:	e001      	b.n	801559a <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8015596:	2303      	movs	r3, #3
 8015598:	e067      	b.n	801566a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 801559a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801559e:	e064      	b.n	801566a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80155a0:	210c      	movs	r1, #12
 80155a2:	2000      	movs	r0, #0
 80155a4:	f000 f978 	bl	8015898 <LoRaMacCryptoDeriveLifeTimeKey>
 80155a8:	4603      	mov	r3, r0
 80155aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80155ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d002      	beq.n	80155bc <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 80155b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80155ba:	e056      	b.n	801566a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80155bc:	210a      	movs	r1, #10
 80155be:	2000      	movs	r0, #0
 80155c0:	f000 f96a 	bl	8015898 <LoRaMacCryptoDeriveLifeTimeKey>
 80155c4:	4603      	mov	r3, r0
 80155c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80155ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d002      	beq.n	80155d8 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 80155d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80155d6:	e048      	b.n	801566a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	7a5b      	ldrb	r3, [r3, #9]
 80155dc:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	7a9b      	ldrb	r3, [r3, #10]
 80155e2:	021b      	lsls	r3, r3, #8
 80155e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80155e6:	4313      	orrs	r3, r2
 80155e8:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	7adb      	ldrb	r3, [r3, #11]
 80155ee:	041b      	lsls	r3, r3, #16
 80155f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80155f2:	4313      	orrs	r3, r2
 80155f4:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80155f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80155fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80155fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80155fe:	2009      	movs	r0, #9
 8015600:	f7ff fcdc 	bl	8014fbc <DeriveSessionKey10x>
 8015604:	4603      	mov	r3, r0
 8015606:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801560a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801560e:	2b00      	cmp	r3, #0
 8015610:	d002      	beq.n	8015618 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 8015612:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015616:	e028      	b.n	801566a <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015618:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801561c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801561e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015620:	2008      	movs	r0, #8
 8015622:	f7ff fccb 	bl	8014fbc <DeriveSessionKey10x>
 8015626:	4603      	mov	r3, r0
 8015628:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801562c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015630:	2b00      	cmp	r3, #0
 8015632:	d002      	beq.n	801563a <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 8015634:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015638:	e017      	b.n	801566a <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801563a:	4b0e      	ldr	r3, [pc, #56]	@ (8015674 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	7cfa      	ldrb	r2, [r7, #19]
 8015640:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8015642:	4b0c      	ldr	r3, [pc, #48]	@ (8015674 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	2200      	movs	r2, #0
 8015648:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801564a:	4b0a      	ldr	r3, [pc, #40]	@ (8015674 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	f04f 32ff 	mov.w	r2, #4294967295
 8015652:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015654:	4b07      	ldr	r3, [pc, #28]	@ (8015674 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	f04f 32ff 	mov.w	r2, #4294967295
 801565c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801565e:	4b05      	ldr	r3, [pc, #20]	@ (8015674 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	f04f 32ff 	mov.w	r2, #4294967295
 8015666:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015668:	2300      	movs	r3, #0
}
 801566a:	4618      	mov	r0, r3
 801566c:	374c      	adds	r7, #76	@ 0x4c
 801566e:	46bd      	mov	sp, r7
 8015670:	bd90      	pop	{r4, r7, pc}
 8015672:	bf00      	nop
 8015674:	20001b58 	.word	0x20001b58

08015678 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015678:	b590      	push	{r4, r7, lr}
 801567a:	b08b      	sub	sp, #44	@ 0x2c
 801567c:	af04      	add	r7, sp, #16
 801567e:	60f8      	str	r0, [r7, #12]
 8015680:	607b      	str	r3, [r7, #4]
 8015682:	460b      	mov	r3, r1
 8015684:	72fb      	strb	r3, [r7, #11]
 8015686:	4613      	mov	r3, r2
 8015688:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801568a:	2312      	movs	r3, #18
 801568c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801568e:	2309      	movs	r3, #9
 8015690:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d101      	bne.n	801569c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015698:	2309      	movs	r3, #9
 801569a:	e05e      	b.n	801575a <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 801569c:	4b31      	ldr	r3, [pc, #196]	@ (8015764 <LoRaMacCryptoSecureMessage+0xec>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	68fa      	ldr	r2, [r7, #12]
 80156a4:	429a      	cmp	r2, r3
 80156a6:	d201      	bcs.n	80156ac <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80156a8:	2306      	movs	r3, #6
 80156aa:	e056      	b.n	801575a <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d101      	bne.n	80156ba <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80156b6:	2308      	movs	r3, #8
 80156b8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80156ba:	4b2a      	ldr	r3, [pc, #168]	@ (8015764 <LoRaMacCryptoSecureMessage+0xec>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	68db      	ldr	r3, [r3, #12]
 80156c0:	68fa      	ldr	r2, [r7, #12]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d916      	bls.n	80156f4 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80156d0:	b219      	sxth	r1, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	689c      	ldr	r4, [r3, #8]
 80156d6:	7dfa      	ldrb	r2, [r7, #23]
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	9301      	str	r3, [sp, #4]
 80156dc:	2300      	movs	r3, #0
 80156de:	9300      	str	r3, [sp, #0]
 80156e0:	4623      	mov	r3, r4
 80156e2:	f7ff fa79 	bl	8014bd8 <PayloadEncrypt>
 80156e6:	4603      	mov	r3, r0
 80156e8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80156ea:	7dbb      	ldrb	r3, [r7, #22]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d001      	beq.n	80156f4 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80156f0:	7dbb      	ldrb	r3, [r7, #22]
 80156f2:	e032      	b.n	801575a <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f000 fb48 	bl	8015d8a <LoRaMacSerializerData>
 80156fa:	4603      	mov	r3, r0
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d001      	beq.n	8015704 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015700:	2310      	movs	r3, #16
 8015702:	e02a      	b.n	801575a <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015704:	2308      	movs	r3, #8
 8015706:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6818      	ldr	r0, [r3, #0]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	791b      	ldrb	r3, [r3, #4]
 8015710:	3b04      	subs	r3, #4
 8015712:	b299      	uxth	r1, r3
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	689b      	ldr	r3, [r3, #8]
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	322c      	adds	r2, #44	@ 0x2c
 801571c:	7dfc      	ldrb	r4, [r7, #23]
 801571e:	9203      	str	r2, [sp, #12]
 8015720:	68fa      	ldr	r2, [r7, #12]
 8015722:	9202      	str	r2, [sp, #8]
 8015724:	9301      	str	r3, [sp, #4]
 8015726:	2300      	movs	r3, #0
 8015728:	9300      	str	r3, [sp, #0]
 801572a:	2300      	movs	r3, #0
 801572c:	4622      	mov	r2, r4
 801572e:	f7ff fb52 	bl	8014dd6 <ComputeCmacB0>
 8015732:	4603      	mov	r3, r0
 8015734:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015736:	7dbb      	ldrb	r3, [r7, #22]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d001      	beq.n	8015740 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 801573c:	7dbb      	ldrb	r3, [r7, #22]
 801573e:	e00c      	b.n	801575a <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 fb22 	bl	8015d8a <LoRaMacSerializerData>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d001      	beq.n	8015750 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801574c:	2310      	movs	r3, #16
 801574e:	e004      	b.n	801575a <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8015750:	4b04      	ldr	r3, [pc, #16]	@ (8015764 <LoRaMacCryptoSecureMessage+0xec>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	68fa      	ldr	r2, [r7, #12]
 8015756:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015758:	2300      	movs	r3, #0
}
 801575a:	4618      	mov	r0, r3
 801575c:	371c      	adds	r7, #28
 801575e:	46bd      	mov	sp, r7
 8015760:	bd90      	pop	{r4, r7, pc}
 8015762:	bf00      	nop
 8015764:	20001b58 	.word	0x20001b58

08015768 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015768:	b590      	push	{r4, r7, lr}
 801576a:	b08b      	sub	sp, #44	@ 0x2c
 801576c:	af04      	add	r7, sp, #16
 801576e:	60b9      	str	r1, [r7, #8]
 8015770:	607b      	str	r3, [r7, #4]
 8015772:	4603      	mov	r3, r0
 8015774:	73fb      	strb	r3, [r7, #15]
 8015776:	4613      	mov	r3, r2
 8015778:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801577c:	2b00      	cmp	r3, #0
 801577e:	d101      	bne.n	8015784 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015780:	2309      	movs	r3, #9
 8015782:	e083      	b.n	801588c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015784:	7bbb      	ldrb	r3, [r7, #14]
 8015786:	6879      	ldr	r1, [r7, #4]
 8015788:	4618      	mov	r0, r3
 801578a:	f7ff fca1 	bl	80150d0 <CheckFCntDown>
 801578e:	4603      	mov	r3, r0
 8015790:	f083 0301 	eor.w	r3, r3, #1
 8015794:	b2db      	uxtb	r3, r3
 8015796:	2b00      	cmp	r3, #0
 8015798:	d001      	beq.n	801579e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801579a:	2306      	movs	r3, #6
 801579c:	e076      	b.n	801588c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801579e:	2312      	movs	r3, #18
 80157a0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80157a2:	2309      	movs	r3, #9
 80157a4:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80157a6:	2308      	movs	r3, #8
 80157a8:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80157aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80157ac:	f000 f979 	bl	8015aa2 <LoRaMacParserData>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d001      	beq.n	80157ba <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80157b6:	230f      	movs	r3, #15
 80157b8:	e068      	b.n	801588c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80157ba:	f107 0210 	add.w	r2, r7, #16
 80157be:	7bfb      	ldrb	r3, [r7, #15]
 80157c0:	4611      	mov	r1, r2
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7ff fbd4 	bl	8014f70 <GetKeyAddrItem>
 80157c8:	4603      	mov	r3, r0
 80157ca:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80157cc:	7d7b      	ldrb	r3, [r7, #21]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d001      	beq.n	80157d6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80157d2:	7d7b      	ldrb	r3, [r7, #21]
 80157d4:	e05a      	b.n	801588c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80157d6:	693b      	ldr	r3, [r7, #16]
 80157d8:	785b      	ldrb	r3, [r3, #1]
 80157da:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80157dc:	693b      	ldr	r3, [r7, #16]
 80157de:	789b      	ldrb	r3, [r3, #2]
 80157e0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80157e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157e4:	689b      	ldr	r3, [r3, #8]
 80157e6:	68ba      	ldr	r2, [r7, #8]
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d001      	beq.n	80157f0 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80157ec:	2302      	movs	r3, #2
 80157ee:	e04d      	b.n	801588c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80157f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157f2:	7b1b      	ldrb	r3, [r3, #12]
 80157f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80157f8:	b2db      	uxtb	r3, r3
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	bf14      	ite	ne
 80157fe:	2301      	movne	r3, #1
 8015800:	2300      	moveq	r3, #0
 8015802:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015804:	4b23      	ldr	r3, [pc, #140]	@ (8015894 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	789b      	ldrb	r3, [r3, #2]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d101      	bne.n	8015812 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801580e:	2300      	movs	r3, #0
 8015810:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015814:	6818      	ldr	r0, [r3, #0]
 8015816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015818:	791b      	ldrb	r3, [r3, #4]
 801581a:	3b04      	subs	r3, #4
 801581c:	b299      	uxth	r1, r3
 801581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015822:	7dbc      	ldrb	r4, [r7, #22]
 8015824:	7d3a      	ldrb	r2, [r7, #20]
 8015826:	9303      	str	r3, [sp, #12]
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	9302      	str	r3, [sp, #8]
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	9301      	str	r3, [sp, #4]
 8015830:	2301      	movs	r3, #1
 8015832:	9300      	str	r3, [sp, #0]
 8015834:	4623      	mov	r3, r4
 8015836:	f7ff fb0c 	bl	8014e52 <VerifyCmacB0>
 801583a:	4603      	mov	r3, r0
 801583c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801583e:	7d7b      	ldrb	r3, [r7, #21]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d001      	beq.n	8015848 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8015844:	7d7b      	ldrb	r3, [r7, #21]
 8015846:	e021      	b.n	801588c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801584a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d101      	bne.n	8015856 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015852:	2308      	movs	r3, #8
 8015854:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015858:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801585c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015860:	b219      	sxth	r1, r3
 8015862:	7dfa      	ldrb	r2, [r7, #23]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	9301      	str	r3, [sp, #4]
 8015868:	2301      	movs	r3, #1
 801586a:	9300      	str	r3, [sp, #0]
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	f7ff f9b3 	bl	8014bd8 <PayloadEncrypt>
 8015872:	4603      	mov	r3, r0
 8015874:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015876:	7d7b      	ldrb	r3, [r7, #21]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d001      	beq.n	8015880 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 801587c:	7d7b      	ldrb	r3, [r7, #21]
 801587e:	e005      	b.n	801588c <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8015880:	7bbb      	ldrb	r3, [r7, #14]
 8015882:	6879      	ldr	r1, [r7, #4]
 8015884:	4618      	mov	r0, r3
 8015886:	f7ff fc47 	bl	8015118 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801588a:	2300      	movs	r3, #0
}
 801588c:	4618      	mov	r0, r3
 801588e:	371c      	adds	r7, #28
 8015890:	46bd      	mov	sp, r7
 8015892:	bd90      	pop	{r4, r7, pc}
 8015894:	20001b58 	.word	0x20001b58

08015898 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b088      	sub	sp, #32
 801589c:	af00      	add	r7, sp, #0
 801589e:	4603      	mov	r3, r0
 80158a0:	460a      	mov	r2, r1
 80158a2:	71fb      	strb	r3, [r7, #7]
 80158a4:	4613      	mov	r3, r2
 80158a6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80158a8:	f107 030c 	add.w	r3, r7, #12
 80158ac:	2200      	movs	r2, #0
 80158ae:	601a      	str	r2, [r3, #0]
 80158b0:	605a      	str	r2, [r3, #4]
 80158b2:	609a      	str	r2, [r3, #8]
 80158b4:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80158b6:	2300      	movs	r3, #0
 80158b8:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80158ba:	79bb      	ldrb	r3, [r7, #6]
 80158bc:	2b0c      	cmp	r3, #12
 80158be:	d00b      	beq.n	80158d8 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 80158c0:	2b0c      	cmp	r3, #12
 80158c2:	dc0f      	bgt.n	80158e4 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 80158c4:	2b0a      	cmp	r3, #10
 80158c6:	d00a      	beq.n	80158de <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 80158c8:	2b0b      	cmp	r3, #11
 80158ca:	d10b      	bne.n	80158e4 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 80158cc:	79fb      	ldrb	r3, [r7, #7]
 80158ce:	2b01      	cmp	r3, #1
 80158d0:	d10a      	bne.n	80158e8 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 80158d2:	2320      	movs	r3, #32
 80158d4:	733b      	strb	r3, [r7, #12]
            }
            break;
 80158d6:	e007      	b.n	80158e8 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80158d8:	230b      	movs	r3, #11
 80158da:	77fb      	strb	r3, [r7, #31]
            break;
 80158dc:	e005      	b.n	80158ea <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80158de:	2330      	movs	r3, #48	@ 0x30
 80158e0:	733b      	strb	r3, [r7, #12]
            break;
 80158e2:	e002      	b.n	80158ea <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80158e4:	230a      	movs	r3, #10
 80158e6:	e00d      	b.n	8015904 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 80158e8:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80158ea:	79ba      	ldrb	r2, [r7, #6]
 80158ec:	7ff9      	ldrb	r1, [r7, #31]
 80158ee:	f107 030c 	add.w	r3, r7, #12
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7f7 fc22 	bl	800d13c <SecureElementDeriveAndStoreKey>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d001      	beq.n	8015902 <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80158fe:	230e      	movs	r3, #14
 8015900:	e000      	b.n	8015904 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015902:	2300      	movs	r3, #0
}
 8015904:	4618      	mov	r0, r3
 8015906:	3720      	adds	r7, #32
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}

0801590c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b084      	sub	sp, #16
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d003      	beq.n	8015922 <LoRaMacParserJoinAccept+0x16>
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d101      	bne.n	8015926 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015922:	2302      	movs	r3, #2
 8015924:	e0b9      	b.n	8015a9a <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8015926:	2300      	movs	r3, #0
 8015928:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681a      	ldr	r2, [r3, #0]
 801592e:	89fb      	ldrh	r3, [r7, #14]
 8015930:	1c59      	adds	r1, r3, #1
 8015932:	81f9      	strh	r1, [r7, #14]
 8015934:	4413      	add	r3, r2
 8015936:	781a      	ldrb	r2, [r3, #0]
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	1d98      	adds	r0, r3, #6
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681a      	ldr	r2, [r3, #0]
 8015944:	89fb      	ldrh	r3, [r7, #14]
 8015946:	4413      	add	r3, r2
 8015948:	2203      	movs	r2, #3
 801594a:	4619      	mov	r1, r3
 801594c:	f002 fd4d 	bl	80183ea <memcpy1>
    bufItr = bufItr + 3;
 8015950:	89fb      	ldrh	r3, [r7, #14]
 8015952:	3303      	adds	r3, #3
 8015954:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	f103 0009 	add.w	r0, r3, #9
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	89fb      	ldrh	r3, [r7, #14]
 8015962:	4413      	add	r3, r2
 8015964:	2203      	movs	r2, #3
 8015966:	4619      	mov	r1, r3
 8015968:	f002 fd3f 	bl	80183ea <memcpy1>
    bufItr = bufItr + 3;
 801596c:	89fb      	ldrh	r3, [r7, #14]
 801596e:	3303      	adds	r3, #3
 8015970:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681a      	ldr	r2, [r3, #0]
 8015976:	89fb      	ldrh	r3, [r7, #14]
 8015978:	1c59      	adds	r1, r3, #1
 801597a:	81f9      	strh	r1, [r7, #14]
 801597c:	4413      	add	r3, r2
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	461a      	mov	r2, r3
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	89fb      	ldrh	r3, [r7, #14]
 801598c:	1c59      	adds	r1, r3, #1
 801598e:	81f9      	strh	r1, [r7, #14]
 8015990:	4413      	add	r3, r2
 8015992:	781b      	ldrb	r3, [r3, #0]
 8015994:	021a      	lsls	r2, r3, #8
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	68db      	ldr	r3, [r3, #12]
 801599a:	431a      	orrs	r2, r3
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681a      	ldr	r2, [r3, #0]
 80159a4:	89fb      	ldrh	r3, [r7, #14]
 80159a6:	1c59      	adds	r1, r3, #1
 80159a8:	81f9      	strh	r1, [r7, #14]
 80159aa:	4413      	add	r3, r2
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	041a      	lsls	r2, r3, #16
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	68db      	ldr	r3, [r3, #12]
 80159b4:	431a      	orrs	r2, r3
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	681a      	ldr	r2, [r3, #0]
 80159be:	89fb      	ldrh	r3, [r7, #14]
 80159c0:	1c59      	adds	r1, r3, #1
 80159c2:	81f9      	strh	r1, [r7, #14]
 80159c4:	4413      	add	r3, r2
 80159c6:	781b      	ldrb	r3, [r3, #0]
 80159c8:	061a      	lsls	r2, r3, #24
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	431a      	orrs	r2, r3
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681a      	ldr	r2, [r3, #0]
 80159d8:	89fb      	ldrh	r3, [r7, #14]
 80159da:	1c59      	adds	r1, r3, #1
 80159dc:	81f9      	strh	r1, [r7, #14]
 80159de:	4413      	add	r3, r2
 80159e0:	781a      	ldrb	r2, [r3, #0]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681a      	ldr	r2, [r3, #0]
 80159ea:	89fb      	ldrh	r3, [r7, #14]
 80159ec:	1c59      	adds	r1, r3, #1
 80159ee:	81f9      	strh	r1, [r7, #14]
 80159f0:	4413      	add	r3, r2
 80159f2:	781a      	ldrb	r2, [r3, #0]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	791b      	ldrb	r3, [r3, #4]
 80159fc:	1f1a      	subs	r2, r3, #4
 80159fe:	89fb      	ldrh	r3, [r7, #14]
 8015a00:	1ad3      	subs	r3, r2, r3
 8015a02:	2b10      	cmp	r3, #16
 8015a04:	d10e      	bne.n	8015a24 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f103 0012 	add.w	r0, r3, #18
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681a      	ldr	r2, [r3, #0]
 8015a10:	89fb      	ldrh	r3, [r7, #14]
 8015a12:	4413      	add	r3, r2
 8015a14:	2210      	movs	r2, #16
 8015a16:	4619      	mov	r1, r3
 8015a18:	f002 fce7 	bl	80183ea <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015a1c:	89fb      	ldrh	r3, [r7, #14]
 8015a1e:	3310      	adds	r3, #16
 8015a20:	81fb      	strh	r3, [r7, #14]
 8015a22:	e008      	b.n	8015a36 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	791b      	ldrb	r3, [r3, #4]
 8015a28:	1f1a      	subs	r2, r3, #4
 8015a2a:	89fb      	ldrh	r3, [r7, #14]
 8015a2c:	1ad3      	subs	r3, r2, r3
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	dd01      	ble.n	8015a36 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015a32:	2301      	movs	r3, #1
 8015a34:	e031      	b.n	8015a9a <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681a      	ldr	r2, [r3, #0]
 8015a3a:	89fb      	ldrh	r3, [r7, #14]
 8015a3c:	1c59      	adds	r1, r3, #1
 8015a3e:	81f9      	strh	r1, [r7, #14]
 8015a40:	4413      	add	r3, r2
 8015a42:	781b      	ldrb	r3, [r3, #0]
 8015a44:	461a      	mov	r2, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681a      	ldr	r2, [r3, #0]
 8015a4e:	89fb      	ldrh	r3, [r7, #14]
 8015a50:	1c59      	adds	r1, r3, #1
 8015a52:	81f9      	strh	r1, [r7, #14]
 8015a54:	4413      	add	r3, r2
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	021a      	lsls	r2, r3, #8
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a5e:	431a      	orrs	r2, r3
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681a      	ldr	r2, [r3, #0]
 8015a68:	89fb      	ldrh	r3, [r7, #14]
 8015a6a:	1c59      	adds	r1, r3, #1
 8015a6c:	81f9      	strh	r1, [r7, #14]
 8015a6e:	4413      	add	r3, r2
 8015a70:	781b      	ldrb	r3, [r3, #0]
 8015a72:	041a      	lsls	r2, r3, #16
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a78:	431a      	orrs	r2, r3
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681a      	ldr	r2, [r3, #0]
 8015a82:	89fb      	ldrh	r3, [r7, #14]
 8015a84:	1c59      	adds	r1, r3, #1
 8015a86:	81f9      	strh	r1, [r7, #14]
 8015a88:	4413      	add	r3, r2
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	061a      	lsls	r2, r3, #24
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a92:	431a      	orrs	r2, r3
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015a98:	2300      	movs	r3, #0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3710      	adds	r7, #16
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b084      	sub	sp, #16
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d003      	beq.n	8015ab8 <LoRaMacParserData+0x16>
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d101      	bne.n	8015abc <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015ab8:	2302      	movs	r3, #2
 8015aba:	e0e0      	b.n	8015c7e <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8015abc:	2300      	movs	r3, #0
 8015abe:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	89fb      	ldrh	r3, [r7, #14]
 8015ac6:	1c59      	adds	r1, r3, #1
 8015ac8:	81f9      	strh	r1, [r7, #14]
 8015aca:	4413      	add	r3, r2
 8015acc:	781a      	ldrb	r2, [r3, #0]
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681a      	ldr	r2, [r3, #0]
 8015ad6:	89fb      	ldrh	r3, [r7, #14]
 8015ad8:	1c59      	adds	r1, r3, #1
 8015ada:	81f9      	strh	r1, [r7, #14]
 8015adc:	4413      	add	r3, r2
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	461a      	mov	r2, r3
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681a      	ldr	r2, [r3, #0]
 8015aea:	89fb      	ldrh	r3, [r7, #14]
 8015aec:	1c59      	adds	r1, r3, #1
 8015aee:	81f9      	strh	r1, [r7, #14]
 8015af0:	4413      	add	r3, r2
 8015af2:	781b      	ldrb	r3, [r3, #0]
 8015af4:	021a      	lsls	r2, r3, #8
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	689b      	ldr	r3, [r3, #8]
 8015afa:	431a      	orrs	r2, r3
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681a      	ldr	r2, [r3, #0]
 8015b04:	89fb      	ldrh	r3, [r7, #14]
 8015b06:	1c59      	adds	r1, r3, #1
 8015b08:	81f9      	strh	r1, [r7, #14]
 8015b0a:	4413      	add	r3, r2
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	041a      	lsls	r2, r3, #16
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	689b      	ldr	r3, [r3, #8]
 8015b14:	431a      	orrs	r2, r3
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681a      	ldr	r2, [r3, #0]
 8015b1e:	89fb      	ldrh	r3, [r7, #14]
 8015b20:	1c59      	adds	r1, r3, #1
 8015b22:	81f9      	strh	r1, [r7, #14]
 8015b24:	4413      	add	r3, r2
 8015b26:	781b      	ldrb	r3, [r3, #0]
 8015b28:	061a      	lsls	r2, r3, #24
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	689b      	ldr	r3, [r3, #8]
 8015b2e:	431a      	orrs	r2, r3
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681a      	ldr	r2, [r3, #0]
 8015b38:	89fb      	ldrh	r3, [r7, #14]
 8015b3a:	1c59      	adds	r1, r3, #1
 8015b3c:	81f9      	strh	r1, [r7, #14]
 8015b3e:	4413      	add	r3, r2
 8015b40:	781a      	ldrb	r2, [r3, #0]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681a      	ldr	r2, [r3, #0]
 8015b4a:	89fb      	ldrh	r3, [r7, #14]
 8015b4c:	1c59      	adds	r1, r3, #1
 8015b4e:	81f9      	strh	r1, [r7, #14]
 8015b50:	4413      	add	r3, r2
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	461a      	mov	r2, r3
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681a      	ldr	r2, [r3, #0]
 8015b5e:	89fb      	ldrh	r3, [r7, #14]
 8015b60:	1c59      	adds	r1, r3, #1
 8015b62:	81f9      	strh	r1, [r7, #14]
 8015b64:	4413      	add	r3, r2
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	0219      	lsls	r1, r3, #8
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	89db      	ldrh	r3, [r3, #14]
 8015b6e:	b21a      	sxth	r2, r3
 8015b70:	b20b      	sxth	r3, r1
 8015b72:	4313      	orrs	r3, r2
 8015b74:	b21b      	sxth	r3, r3
 8015b76:	b29a      	uxth	r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f103 0010 	add.w	r0, r3, #16
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	89fb      	ldrh	r3, [r7, #14]
 8015b88:	18d1      	adds	r1, r2, r3
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	7b1b      	ldrb	r3, [r3, #12]
 8015b8e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015b92:	b2db      	uxtb	r3, r3
 8015b94:	461a      	mov	r2, r3
 8015b96:	f002 fc28 	bl	80183ea <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	7b1b      	ldrb	r3, [r3, #12]
 8015b9e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	461a      	mov	r2, r3
 8015ba6:	89fb      	ldrh	r3, [r7, #14]
 8015ba8:	4413      	add	r3, r2
 8015baa:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	2200      	movs	r2, #0
 8015bb0:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	791b      	ldrb	r3, [r3, #4]
 8015bc0:	461a      	mov	r2, r3
 8015bc2:	89fb      	ldrh	r3, [r7, #14]
 8015bc4:	1ad3      	subs	r3, r2, r3
 8015bc6:	2b04      	cmp	r3, #4
 8015bc8:	dd27      	ble.n	8015c1a <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681a      	ldr	r2, [r3, #0]
 8015bce:	89fb      	ldrh	r3, [r7, #14]
 8015bd0:	1c59      	adds	r1, r3, #1
 8015bd2:	81f9      	strh	r1, [r7, #14]
 8015bd4:	4413      	add	r3, r2
 8015bd6:	781a      	ldrb	r2, [r3, #0]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	791a      	ldrb	r2, [r3, #4]
 8015be2:	89fb      	ldrh	r3, [r7, #14]
 8015be4:	b2db      	uxtb	r3, r3
 8015be6:	1ad3      	subs	r3, r2, r3
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	3b04      	subs	r3, #4
 8015bec:	b2da      	uxtb	r2, r3
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	681a      	ldr	r2, [r3, #0]
 8015bfc:	89fb      	ldrh	r3, [r7, #14]
 8015bfe:	18d1      	adds	r1, r2, r3
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015c06:	461a      	mov	r2, r3
 8015c08:	f002 fbef 	bl	80183ea <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015c12:	461a      	mov	r2, r3
 8015c14:	89fb      	ldrh	r3, [r7, #14]
 8015c16:	4413      	add	r3, r2
 8015c18:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	791b      	ldrb	r3, [r3, #4]
 8015c22:	3b04      	subs	r3, #4
 8015c24:	4413      	add	r3, r2
 8015c26:	781b      	ldrb	r3, [r3, #0]
 8015c28:	461a      	mov	r2, r3
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6819      	ldr	r1, [r3, #0]
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	791b      	ldrb	r3, [r3, #4]
 8015c3a:	3b03      	subs	r3, #3
 8015c3c:	440b      	add	r3, r1
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	021b      	lsls	r3, r3, #8
 8015c42:	431a      	orrs	r2, r3
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	6819      	ldr	r1, [r3, #0]
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	791b      	ldrb	r3, [r3, #4]
 8015c54:	3b02      	subs	r3, #2
 8015c56:	440b      	add	r3, r1
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	041b      	lsls	r3, r3, #16
 8015c5c:	431a      	orrs	r2, r3
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6819      	ldr	r1, [r3, #0]
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	791b      	ldrb	r3, [r3, #4]
 8015c6e:	3b01      	subs	r3, #1
 8015c70:	440b      	add	r3, r1
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	061b      	lsls	r3, r3, #24
 8015c76:	431a      	orrs	r2, r3
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015c7c:	2300      	movs	r3, #0
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3710      	adds	r7, #16
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}

08015c86 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015c86:	b580      	push	{r7, lr}
 8015c88:	b084      	sub	sp, #16
 8015c8a:	af00      	add	r7, sp, #0
 8015c8c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d003      	beq.n	8015c9c <LoRaMacSerializerJoinRequest+0x16>
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d101      	bne.n	8015ca0 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	e070      	b.n	8015d82 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	791b      	ldrb	r3, [r3, #4]
 8015ca8:	2b16      	cmp	r3, #22
 8015caa:	d801      	bhi.n	8015cb0 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015cac:	2302      	movs	r3, #2
 8015cae:	e068      	b.n	8015d82 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	681a      	ldr	r2, [r3, #0]
 8015cb4:	89fb      	ldrh	r3, [r7, #14]
 8015cb6:	1c59      	adds	r1, r3, #1
 8015cb8:	81f9      	strh	r1, [r7, #14]
 8015cba:	4413      	add	r3, r2
 8015cbc:	687a      	ldr	r2, [r7, #4]
 8015cbe:	7952      	ldrb	r2, [r2, #5]
 8015cc0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681a      	ldr	r2, [r3, #0]
 8015cc6:	89fb      	ldrh	r3, [r7, #14]
 8015cc8:	18d0      	adds	r0, r2, r3
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	3306      	adds	r3, #6
 8015cce:	2208      	movs	r2, #8
 8015cd0:	4619      	mov	r1, r3
 8015cd2:	f002 fba5 	bl	8018420 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015cd6:	89fb      	ldrh	r3, [r7, #14]
 8015cd8:	3308      	adds	r3, #8
 8015cda:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	681a      	ldr	r2, [r3, #0]
 8015ce0:	89fb      	ldrh	r3, [r7, #14]
 8015ce2:	18d0      	adds	r0, r2, r3
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	330e      	adds	r3, #14
 8015ce8:	2208      	movs	r2, #8
 8015cea:	4619      	mov	r1, r3
 8015cec:	f002 fb98 	bl	8018420 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015cf0:	89fb      	ldrh	r3, [r7, #14]
 8015cf2:	3308      	adds	r3, #8
 8015cf4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	8ad9      	ldrh	r1, [r3, #22]
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	681a      	ldr	r2, [r3, #0]
 8015cfe:	89fb      	ldrh	r3, [r7, #14]
 8015d00:	1c58      	adds	r0, r3, #1
 8015d02:	81f8      	strh	r0, [r7, #14]
 8015d04:	4413      	add	r3, r2
 8015d06:	b2ca      	uxtb	r2, r1
 8015d08:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	8adb      	ldrh	r3, [r3, #22]
 8015d0e:	0a1b      	lsrs	r3, r3, #8
 8015d10:	b299      	uxth	r1, r3
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	681a      	ldr	r2, [r3, #0]
 8015d16:	89fb      	ldrh	r3, [r7, #14]
 8015d18:	1c58      	adds	r0, r3, #1
 8015d1a:	81f8      	strh	r0, [r7, #14]
 8015d1c:	4413      	add	r3, r2
 8015d1e:	b2ca      	uxtb	r2, r1
 8015d20:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6999      	ldr	r1, [r3, #24]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681a      	ldr	r2, [r3, #0]
 8015d2a:	89fb      	ldrh	r3, [r7, #14]
 8015d2c:	1c58      	adds	r0, r3, #1
 8015d2e:	81f8      	strh	r0, [r7, #14]
 8015d30:	4413      	add	r3, r2
 8015d32:	b2ca      	uxtb	r2, r1
 8015d34:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	699b      	ldr	r3, [r3, #24]
 8015d3a:	0a19      	lsrs	r1, r3, #8
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	89fb      	ldrh	r3, [r7, #14]
 8015d42:	1c58      	adds	r0, r3, #1
 8015d44:	81f8      	strh	r0, [r7, #14]
 8015d46:	4413      	add	r3, r2
 8015d48:	b2ca      	uxtb	r2, r1
 8015d4a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	699b      	ldr	r3, [r3, #24]
 8015d50:	0c19      	lsrs	r1, r3, #16
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	681a      	ldr	r2, [r3, #0]
 8015d56:	89fb      	ldrh	r3, [r7, #14]
 8015d58:	1c58      	adds	r0, r3, #1
 8015d5a:	81f8      	strh	r0, [r7, #14]
 8015d5c:	4413      	add	r3, r2
 8015d5e:	b2ca      	uxtb	r2, r1
 8015d60:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	699b      	ldr	r3, [r3, #24]
 8015d66:	0e19      	lsrs	r1, r3, #24
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681a      	ldr	r2, [r3, #0]
 8015d6c:	89fb      	ldrh	r3, [r7, #14]
 8015d6e:	1c58      	adds	r0, r3, #1
 8015d70:	81f8      	strh	r0, [r7, #14]
 8015d72:	4413      	add	r3, r2
 8015d74:	b2ca      	uxtb	r2, r1
 8015d76:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015d78:	89fb      	ldrh	r3, [r7, #14]
 8015d7a:	b2da      	uxtb	r2, r3
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015d80:	2300      	movs	r3, #0
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	3710      	adds	r7, #16
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bd80      	pop	{r7, pc}

08015d8a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015d8a:	b580      	push	{r7, lr}
 8015d8c:	b084      	sub	sp, #16
 8015d8e:	af00      	add	r7, sp, #0
 8015d90:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d003      	beq.n	8015da0 <LoRaMacSerializerData+0x16>
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d101      	bne.n	8015da4 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015da0:	2301      	movs	r3, #1
 8015da2:	e0e3      	b.n	8015f6c <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8015da4:	2300      	movs	r3, #0
 8015da6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015da8:	2308      	movs	r3, #8
 8015daa:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	7b1b      	ldrb	r3, [r3, #12]
 8015db0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	461a      	mov	r2, r3
 8015db8:	89bb      	ldrh	r3, [r7, #12]
 8015dba:	4413      	add	r3, r2
 8015dbc:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d002      	beq.n	8015dce <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8015dc8:	89bb      	ldrh	r3, [r7, #12]
 8015dca:	3301      	adds	r3, #1
 8015dcc:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	89bb      	ldrh	r3, [r7, #12]
 8015dd8:	4413      	add	r3, r2
 8015dda:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015ddc:	89bb      	ldrh	r3, [r7, #12]
 8015dde:	3304      	adds	r3, #4
 8015de0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	791b      	ldrb	r3, [r3, #4]
 8015de6:	461a      	mov	r2, r3
 8015de8:	89bb      	ldrh	r3, [r7, #12]
 8015dea:	4293      	cmp	r3, r2
 8015dec:	d901      	bls.n	8015df2 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015dee:	2302      	movs	r3, #2
 8015df0:	e0bc      	b.n	8015f6c <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681a      	ldr	r2, [r3, #0]
 8015df6:	89fb      	ldrh	r3, [r7, #14]
 8015df8:	1c59      	adds	r1, r3, #1
 8015dfa:	81f9      	strh	r1, [r7, #14]
 8015dfc:	4413      	add	r3, r2
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	7952      	ldrb	r2, [r2, #5]
 8015e02:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	6899      	ldr	r1, [r3, #8]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	89fb      	ldrh	r3, [r7, #14]
 8015e0e:	1c58      	adds	r0, r3, #1
 8015e10:	81f8      	strh	r0, [r7, #14]
 8015e12:	4413      	add	r3, r2
 8015e14:	b2ca      	uxtb	r2, r1
 8015e16:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	689b      	ldr	r3, [r3, #8]
 8015e1c:	0a19      	lsrs	r1, r3, #8
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681a      	ldr	r2, [r3, #0]
 8015e22:	89fb      	ldrh	r3, [r7, #14]
 8015e24:	1c58      	adds	r0, r3, #1
 8015e26:	81f8      	strh	r0, [r7, #14]
 8015e28:	4413      	add	r3, r2
 8015e2a:	b2ca      	uxtb	r2, r1
 8015e2c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	689b      	ldr	r3, [r3, #8]
 8015e32:	0c19      	lsrs	r1, r3, #16
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681a      	ldr	r2, [r3, #0]
 8015e38:	89fb      	ldrh	r3, [r7, #14]
 8015e3a:	1c58      	adds	r0, r3, #1
 8015e3c:	81f8      	strh	r0, [r7, #14]
 8015e3e:	4413      	add	r3, r2
 8015e40:	b2ca      	uxtb	r2, r1
 8015e42:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	689b      	ldr	r3, [r3, #8]
 8015e48:	0e19      	lsrs	r1, r3, #24
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681a      	ldr	r2, [r3, #0]
 8015e4e:	89fb      	ldrh	r3, [r7, #14]
 8015e50:	1c58      	adds	r0, r3, #1
 8015e52:	81f8      	strh	r0, [r7, #14]
 8015e54:	4413      	add	r3, r2
 8015e56:	b2ca      	uxtb	r2, r1
 8015e58:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681a      	ldr	r2, [r3, #0]
 8015e5e:	89fb      	ldrh	r3, [r7, #14]
 8015e60:	1c59      	adds	r1, r3, #1
 8015e62:	81f9      	strh	r1, [r7, #14]
 8015e64:	4413      	add	r3, r2
 8015e66:	687a      	ldr	r2, [r7, #4]
 8015e68:	7b12      	ldrb	r2, [r2, #12]
 8015e6a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	89d9      	ldrh	r1, [r3, #14]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681a      	ldr	r2, [r3, #0]
 8015e74:	89fb      	ldrh	r3, [r7, #14]
 8015e76:	1c58      	adds	r0, r3, #1
 8015e78:	81f8      	strh	r0, [r7, #14]
 8015e7a:	4413      	add	r3, r2
 8015e7c:	b2ca      	uxtb	r2, r1
 8015e7e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	89db      	ldrh	r3, [r3, #14]
 8015e84:	0a1b      	lsrs	r3, r3, #8
 8015e86:	b299      	uxth	r1, r3
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	89fb      	ldrh	r3, [r7, #14]
 8015e8e:	1c58      	adds	r0, r3, #1
 8015e90:	81f8      	strh	r0, [r7, #14]
 8015e92:	4413      	add	r3, r2
 8015e94:	b2ca      	uxtb	r2, r1
 8015e96:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	89fb      	ldrh	r3, [r7, #14]
 8015e9e:	18d0      	adds	r0, r2, r3
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	f103 0110 	add.w	r1, r3, #16
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	7b1b      	ldrb	r3, [r3, #12]
 8015eaa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015eae:	b2db      	uxtb	r3, r3
 8015eb0:	461a      	mov	r2, r3
 8015eb2:	f002 fa9a 	bl	80183ea <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	7b1b      	ldrb	r3, [r3, #12]
 8015eba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	461a      	mov	r2, r3
 8015ec2:	89fb      	ldrh	r3, [r7, #14]
 8015ec4:	4413      	add	r3, r2
 8015ec6:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d009      	beq.n	8015ee6 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681a      	ldr	r2, [r3, #0]
 8015ed6:	89fb      	ldrh	r3, [r7, #14]
 8015ed8:	1c59      	adds	r1, r3, #1
 8015eda:	81f9      	strh	r1, [r7, #14]
 8015edc:	4413      	add	r3, r2
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8015ee4:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681a      	ldr	r2, [r3, #0]
 8015eea:	89fb      	ldrh	r3, [r7, #14]
 8015eec:	18d0      	adds	r0, r2, r3
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ef8:	461a      	mov	r2, r3
 8015efa:	f002 fa76 	bl	80183ea <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f04:	461a      	mov	r2, r3
 8015f06:	89fb      	ldrh	r3, [r7, #14]
 8015f08:	4413      	add	r3, r2
 8015f0a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681a      	ldr	r2, [r3, #0]
 8015f14:	89fb      	ldrh	r3, [r7, #14]
 8015f16:	1c58      	adds	r0, r3, #1
 8015f18:	81f8      	strh	r0, [r7, #14]
 8015f1a:	4413      	add	r3, r2
 8015f1c:	b2ca      	uxtb	r2, r1
 8015f1e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f24:	0a19      	lsrs	r1, r3, #8
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	89fb      	ldrh	r3, [r7, #14]
 8015f2c:	1c58      	adds	r0, r3, #1
 8015f2e:	81f8      	strh	r0, [r7, #14]
 8015f30:	4413      	add	r3, r2
 8015f32:	b2ca      	uxtb	r2, r1
 8015f34:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f3a:	0c19      	lsrs	r1, r3, #16
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681a      	ldr	r2, [r3, #0]
 8015f40:	89fb      	ldrh	r3, [r7, #14]
 8015f42:	1c58      	adds	r0, r3, #1
 8015f44:	81f8      	strh	r0, [r7, #14]
 8015f46:	4413      	add	r3, r2
 8015f48:	b2ca      	uxtb	r2, r1
 8015f4a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f50:	0e19      	lsrs	r1, r3, #24
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681a      	ldr	r2, [r3, #0]
 8015f56:	89fb      	ldrh	r3, [r7, #14]
 8015f58:	1c58      	adds	r0, r3, #1
 8015f5a:	81f8      	strh	r0, [r7, #14]
 8015f5c:	4413      	add	r3, r2
 8015f5e:	b2ca      	uxtb	r2, r1
 8015f60:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015f62:	89fb      	ldrh	r3, [r7, #14]
 8015f64:	b2da      	uxtb	r2, r3
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015f6a:	2300      	movs	r3, #0
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3710      	adds	r7, #16
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015f74:	b480      	push	{r7}
 8015f76:	b083      	sub	sp, #12
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015f7e:	79fb      	ldrb	r3, [r7, #7]
 8015f80:	2b05      	cmp	r3, #5
 8015f82:	d101      	bne.n	8015f88 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8015f84:	2301      	movs	r3, #1
 8015f86:	e000      	b.n	8015f8a <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015f88:	2300      	movs	r3, #0
        }
    }
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	370c      	adds	r7, #12
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bc80      	pop	{r7}
 8015f92:	4770      	bx	lr

08015f94 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b084      	sub	sp, #16
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	6039      	str	r1, [r7, #0]
 8015f9e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015fa4:	79fb      	ldrb	r3, [r7, #7]
 8015fa6:	2b05      	cmp	r3, #5
 8015fa8:	d105      	bne.n	8015fb6 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8015faa:	6838      	ldr	r0, [r7, #0]
 8015fac:	f001 f8fa 	bl	80171a4 <RegionEU868GetPhyParam>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	60fb      	str	r3, [r7, #12]
 8015fb4:	e001      	b.n	8015fba <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3710      	adds	r7, #16
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b082      	sub	sp, #8
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	4603      	mov	r3, r0
 8015fcc:	6039      	str	r1, [r7, #0]
 8015fce:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015fd0:	79fb      	ldrb	r3, [r7, #7]
 8015fd2:	2b05      	cmp	r3, #5
 8015fd4:	d103      	bne.n	8015fde <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8015fd6:	6838      	ldr	r0, [r7, #0]
 8015fd8:	f001 fa2a 	bl	8017430 <RegionEU868SetBandTxDone>
 8015fdc:	e000      	b.n	8015fe0 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8015fde:	bf00      	nop
        }
    }
}
 8015fe0:	3708      	adds	r7, #8
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}

08015fe6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015fe6:	b580      	push	{r7, lr}
 8015fe8:	b082      	sub	sp, #8
 8015fea:	af00      	add	r7, sp, #0
 8015fec:	4603      	mov	r3, r0
 8015fee:	6039      	str	r1, [r7, #0]
 8015ff0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015ff2:	79fb      	ldrb	r3, [r7, #7]
 8015ff4:	2b05      	cmp	r3, #5
 8015ff6:	d103      	bne.n	8016000 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8015ff8:	6838      	ldr	r0, [r7, #0]
 8015ffa:	f001 fa45 	bl	8017488 <RegionEU868InitDefaults>
 8015ffe:	e000      	b.n	8016002 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016000:	bf00      	nop
        }
    }
}
 8016002:	bf00      	nop
 8016004:	3708      	adds	r7, #8
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}

0801600a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801600a:	b580      	push	{r7, lr}
 801600c:	b082      	sub	sp, #8
 801600e:	af00      	add	r7, sp, #0
 8016010:	4603      	mov	r3, r0
 8016012:	6039      	str	r1, [r7, #0]
 8016014:	71fb      	strb	r3, [r7, #7]
 8016016:	4613      	mov	r3, r2
 8016018:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801601a:	79fb      	ldrb	r3, [r7, #7]
 801601c:	2b05      	cmp	r3, #5
 801601e:	d106      	bne.n	801602e <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016020:	79bb      	ldrb	r3, [r7, #6]
 8016022:	4619      	mov	r1, r3
 8016024:	6838      	ldr	r0, [r7, #0]
 8016026:	f001 facd 	bl	80175c4 <RegionEU868Verify>
 801602a:	4603      	mov	r3, r0
 801602c:	e000      	b.n	8016030 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801602e:	2300      	movs	r3, #0
        }
    }
}
 8016030:	4618      	mov	r0, r3
 8016032:	3708      	adds	r7, #8
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}

08016038 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b082      	sub	sp, #8
 801603c:	af00      	add	r7, sp, #0
 801603e:	4603      	mov	r3, r0
 8016040:	6039      	str	r1, [r7, #0]
 8016042:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016044:	79fb      	ldrb	r3, [r7, #7]
 8016046:	2b05      	cmp	r3, #5
 8016048:	d103      	bne.n	8016052 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801604a:	6838      	ldr	r0, [r7, #0]
 801604c:	f001 fb36 	bl	80176bc <RegionEU868ApplyCFList>
 8016050:	e000      	b.n	8016054 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016052:	bf00      	nop
        }
    }
}
 8016054:	bf00      	nop
 8016056:	3708      	adds	r7, #8
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}

0801605c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b082      	sub	sp, #8
 8016060:	af00      	add	r7, sp, #0
 8016062:	4603      	mov	r3, r0
 8016064:	6039      	str	r1, [r7, #0]
 8016066:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016068:	79fb      	ldrb	r3, [r7, #7]
 801606a:	2b05      	cmp	r3, #5
 801606c:	d104      	bne.n	8016078 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801606e:	6838      	ldr	r0, [r7, #0]
 8016070:	f001 fb98 	bl	80177a4 <RegionEU868ChanMaskSet>
 8016074:	4603      	mov	r3, r0
 8016076:	e000      	b.n	801607a <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016078:	2300      	movs	r3, #0
        }
    }
}
 801607a:	4618      	mov	r0, r3
 801607c:	3708      	adds	r7, #8
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}

08016082 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016082:	b580      	push	{r7, lr}
 8016084:	b082      	sub	sp, #8
 8016086:	af00      	add	r7, sp, #0
 8016088:	603b      	str	r3, [r7, #0]
 801608a:	4603      	mov	r3, r0
 801608c:	71fb      	strb	r3, [r7, #7]
 801608e:	460b      	mov	r3, r1
 8016090:	71bb      	strb	r3, [r7, #6]
 8016092:	4613      	mov	r3, r2
 8016094:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016096:	79fb      	ldrb	r3, [r7, #7]
 8016098:	2b05      	cmp	r3, #5
 801609a:	d107      	bne.n	80160ac <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801609c:	7979      	ldrb	r1, [r7, #5]
 801609e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	683a      	ldr	r2, [r7, #0]
 80160a6:	f001 fba7 	bl	80177f8 <RegionEU868ComputeRxWindowParameters>
 80160aa:	e000      	b.n	80160ae <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80160ac:	bf00      	nop
        }
    }
}
 80160ae:	bf00      	nop
 80160b0:	3708      	adds	r7, #8
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}

080160b6 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80160b6:	b580      	push	{r7, lr}
 80160b8:	b084      	sub	sp, #16
 80160ba:	af00      	add	r7, sp, #0
 80160bc:	4603      	mov	r3, r0
 80160be:	60b9      	str	r1, [r7, #8]
 80160c0:	607a      	str	r2, [r7, #4]
 80160c2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80160c4:	7bfb      	ldrb	r3, [r7, #15]
 80160c6:	2b05      	cmp	r3, #5
 80160c8:	d105      	bne.n	80160d6 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80160ca:	6879      	ldr	r1, [r7, #4]
 80160cc:	68b8      	ldr	r0, [r7, #8]
 80160ce:	f001 fbed 	bl	80178ac <RegionEU868RxConfig>
 80160d2:	4603      	mov	r3, r0
 80160d4:	e000      	b.n	80160d8 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80160d6:	2300      	movs	r3, #0
        }
    }
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3710      	adds	r7, #16
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b084      	sub	sp, #16
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	60b9      	str	r1, [r7, #8]
 80160e8:	607a      	str	r2, [r7, #4]
 80160ea:	603b      	str	r3, [r7, #0]
 80160ec:	4603      	mov	r3, r0
 80160ee:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80160f0:	7bfb      	ldrb	r3, [r7, #15]
 80160f2:	2b05      	cmp	r3, #5
 80160f4:	d106      	bne.n	8016104 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80160f6:	683a      	ldr	r2, [r7, #0]
 80160f8:	6879      	ldr	r1, [r7, #4]
 80160fa:	68b8      	ldr	r0, [r7, #8]
 80160fc:	f001 fca6 	bl	8017a4c <RegionEU868TxConfig>
 8016100:	4603      	mov	r3, r0
 8016102:	e000      	b.n	8016106 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016104:	2300      	movs	r3, #0
        }
    }
}
 8016106:	4618      	mov	r0, r3
 8016108:	3710      	adds	r7, #16
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}

0801610e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801610e:	b580      	push	{r7, lr}
 8016110:	b086      	sub	sp, #24
 8016112:	af02      	add	r7, sp, #8
 8016114:	60b9      	str	r1, [r7, #8]
 8016116:	607a      	str	r2, [r7, #4]
 8016118:	603b      	str	r3, [r7, #0]
 801611a:	4603      	mov	r3, r0
 801611c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801611e:	7bfb      	ldrb	r3, [r7, #15]
 8016120:	2b05      	cmp	r3, #5
 8016122:	d109      	bne.n	8016138 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016124:	69fb      	ldr	r3, [r7, #28]
 8016126:	9300      	str	r3, [sp, #0]
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	683a      	ldr	r2, [r7, #0]
 801612c:	6879      	ldr	r1, [r7, #4]
 801612e:	68b8      	ldr	r0, [r7, #8]
 8016130:	f001 fd5c 	bl	8017bec <RegionEU868LinkAdrReq>
 8016134:	4603      	mov	r3, r0
 8016136:	e000      	b.n	801613a <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016138:	2300      	movs	r3, #0
        }
    }
}
 801613a:	4618      	mov	r0, r3
 801613c:	3710      	adds	r7, #16
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}

08016142 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016142:	b580      	push	{r7, lr}
 8016144:	b082      	sub	sp, #8
 8016146:	af00      	add	r7, sp, #0
 8016148:	4603      	mov	r3, r0
 801614a:	6039      	str	r1, [r7, #0]
 801614c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801614e:	79fb      	ldrb	r3, [r7, #7]
 8016150:	2b05      	cmp	r3, #5
 8016152:	d104      	bne.n	801615e <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016154:	6838      	ldr	r0, [r7, #0]
 8016156:	f001 fe6b 	bl	8017e30 <RegionEU868RxParamSetupReq>
 801615a:	4603      	mov	r3, r0
 801615c:	e000      	b.n	8016160 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801615e:	2300      	movs	r3, #0
        }
    }
}
 8016160:	4618      	mov	r0, r3
 8016162:	3708      	adds	r7, #8
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}

08016168 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b082      	sub	sp, #8
 801616c:	af00      	add	r7, sp, #0
 801616e:	4603      	mov	r3, r0
 8016170:	6039      	str	r1, [r7, #0]
 8016172:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016174:	79fb      	ldrb	r3, [r7, #7]
 8016176:	2b05      	cmp	r3, #5
 8016178:	d104      	bne.n	8016184 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801617a:	6838      	ldr	r0, [r7, #0]
 801617c:	f001 fe96 	bl	8017eac <RegionEU868NewChannelReq>
 8016180:	4603      	mov	r3, r0
 8016182:	e000      	b.n	8016186 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016184:	2300      	movs	r3, #0
        }
    }
}
 8016186:	4618      	mov	r0, r3
 8016188:	3708      	adds	r7, #8
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}

0801618e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801618e:	b580      	push	{r7, lr}
 8016190:	b082      	sub	sp, #8
 8016192:	af00      	add	r7, sp, #0
 8016194:	4603      	mov	r3, r0
 8016196:	6039      	str	r1, [r7, #0]
 8016198:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801619a:	79fb      	ldrb	r3, [r7, #7]
 801619c:	2b05      	cmp	r3, #5
 801619e:	d104      	bne.n	80161aa <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80161a0:	6838      	ldr	r0, [r7, #0]
 80161a2:	f001 fee1 	bl	8017f68 <RegionEU868TxParamSetupReq>
 80161a6:	4603      	mov	r3, r0
 80161a8:	e000      	b.n	80161ac <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80161aa:	2300      	movs	r3, #0
        }
    }
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3708      	adds	r7, #8
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd80      	pop	{r7, pc}

080161b4 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b082      	sub	sp, #8
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	4603      	mov	r3, r0
 80161bc:	6039      	str	r1, [r7, #0]
 80161be:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80161c0:	79fb      	ldrb	r3, [r7, #7]
 80161c2:	2b05      	cmp	r3, #5
 80161c4:	d104      	bne.n	80161d0 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80161c6:	6838      	ldr	r0, [r7, #0]
 80161c8:	f001 feda 	bl	8017f80 <RegionEU868DlChannelReq>
 80161cc:	4603      	mov	r3, r0
 80161ce:	e000      	b.n	80161d2 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80161d0:	2300      	movs	r3, #0
        }
    }
}
 80161d2:	4618      	mov	r0, r3
 80161d4:	3708      	adds	r7, #8
 80161d6:	46bd      	mov	sp, r7
 80161d8:	bd80      	pop	{r7, pc}

080161da <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80161da:	b580      	push	{r7, lr}
 80161dc:	b082      	sub	sp, #8
 80161de:	af00      	add	r7, sp, #0
 80161e0:	4603      	mov	r3, r0
 80161e2:	71fb      	strb	r3, [r7, #7]
 80161e4:	460b      	mov	r3, r1
 80161e6:	71bb      	strb	r3, [r7, #6]
 80161e8:	4613      	mov	r3, r2
 80161ea:	717b      	strb	r3, [r7, #5]
    switch( region )
 80161ec:	79fb      	ldrb	r3, [r7, #7]
 80161ee:	2b05      	cmp	r3, #5
 80161f0:	d108      	bne.n	8016204 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80161f2:	797a      	ldrb	r2, [r7, #5]
 80161f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80161f8:	4611      	mov	r1, r2
 80161fa:	4618      	mov	r0, r3
 80161fc:	f001 ff0a 	bl	8018014 <RegionEU868AlternateDr>
 8016200:	4603      	mov	r3, r0
 8016202:	e000      	b.n	8016206 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016204:	2300      	movs	r3, #0
        }
    }
}
 8016206:	4618      	mov	r0, r3
 8016208:	3708      	adds	r7, #8
 801620a:	46bd      	mov	sp, r7
 801620c:	bd80      	pop	{r7, pc}

0801620e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801620e:	b580      	push	{r7, lr}
 8016210:	b084      	sub	sp, #16
 8016212:	af00      	add	r7, sp, #0
 8016214:	60b9      	str	r1, [r7, #8]
 8016216:	607a      	str	r2, [r7, #4]
 8016218:	603b      	str	r3, [r7, #0]
 801621a:	4603      	mov	r3, r0
 801621c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801621e:	7bfb      	ldrb	r3, [r7, #15]
 8016220:	2b05      	cmp	r3, #5
 8016222:	d107      	bne.n	8016234 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016224:	69bb      	ldr	r3, [r7, #24]
 8016226:	683a      	ldr	r2, [r7, #0]
 8016228:	6879      	ldr	r1, [r7, #4]
 801622a:	68b8      	ldr	r0, [r7, #8]
 801622c:	f001 ff02 	bl	8018034 <RegionEU868NextChannel>
 8016230:	4603      	mov	r3, r0
 8016232:	e000      	b.n	8016236 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016234:	2309      	movs	r3, #9
        }
    }
}
 8016236:	4618      	mov	r0, r3
 8016238:	3710      	adds	r7, #16
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}

0801623e <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801623e:	b590      	push	{r4, r7, lr}
 8016240:	b083      	sub	sp, #12
 8016242:	af00      	add	r7, sp, #0
 8016244:	4604      	mov	r4, r0
 8016246:	4608      	mov	r0, r1
 8016248:	4611      	mov	r1, r2
 801624a:	461a      	mov	r2, r3
 801624c:	4623      	mov	r3, r4
 801624e:	71fb      	strb	r3, [r7, #7]
 8016250:	4603      	mov	r3, r0
 8016252:	71bb      	strb	r3, [r7, #6]
 8016254:	460b      	mov	r3, r1
 8016256:	717b      	strb	r3, [r7, #5]
 8016258:	4613      	mov	r3, r2
 801625a:	713b      	strb	r3, [r7, #4]
    switch( region )
 801625c:	79fb      	ldrb	r3, [r7, #7]
 801625e:	2b05      	cmp	r3, #5
 8016260:	d109      	bne.n	8016276 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016262:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8016266:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801626a:	79bb      	ldrb	r3, [r7, #6]
 801626c:	4618      	mov	r0, r3
 801626e:	f002 f85b 	bl	8018328 <RegionEU868ApplyDrOffset>
 8016272:	4603      	mov	r3, r0
 8016274:	e000      	b.n	8016278 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016276:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8016278:	4618      	mov	r0, r3
 801627a:	370c      	adds	r7, #12
 801627c:	46bd      	mov	sp, r7
 801627e:	bd90      	pop	{r4, r7, pc}

08016280 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016280:	b480      	push	{r7}
 8016282:	b083      	sub	sp, #12
 8016284:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016286:	4b04      	ldr	r3, [pc, #16]	@ (8016298 <RegionGetVersion+0x18>)
 8016288:	607b      	str	r3, [r7, #4]

    return version;
 801628a:	687b      	ldr	r3, [r7, #4]
}
 801628c:	4618      	mov	r0, r3
 801628e:	370c      	adds	r7, #12
 8016290:	46bd      	mov	sp, r7
 8016292:	bc80      	pop	{r7}
 8016294:	4770      	bx	lr
 8016296:	bf00      	nop
 8016298:	02010003 	.word	0x02010003

0801629c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801629c:	b480      	push	{r7}
 801629e:	b087      	sub	sp, #28
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	60f8      	str	r0, [r7, #12]
 80162a4:	4608      	mov	r0, r1
 80162a6:	4639      	mov	r1, r7
 80162a8:	e881 000c 	stmia.w	r1, {r2, r3}
 80162ac:	4603      	mov	r3, r0
 80162ae:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	881b      	ldrh	r3, [r3, #0]
 80162b4:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80162b6:	7afb      	ldrb	r3, [r7, #11]
 80162b8:	f083 0301 	eor.w	r3, r3, #1
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d007      	beq.n	80162d2 <GetDutyCycle+0x36>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
 80162c2:	2364      	movs	r3, #100	@ 0x64
 80162c4:	82bb      	strh	r3, [r7, #20]
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80162c6:	8aba      	ldrh	r2, [r7, #20]
 80162c8:	8afb      	ldrh	r3, [r7, #22]
 80162ca:	4293      	cmp	r3, r2
 80162cc:	bf38      	it	cc
 80162ce:	4613      	movcc	r3, r2
 80162d0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80162d2:	8afb      	ldrh	r3, [r7, #22]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d101      	bne.n	80162dc <GetDutyCycle+0x40>
    {
        dutyCycle = 1;
 80162d8:	2301      	movs	r3, #1
 80162da:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80162dc:	8afb      	ldrh	r3, [r7, #22]
}
 80162de:	4618      	mov	r0, r3
 80162e0:	371c      	adds	r7, #28
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bc80      	pop	{r7}
 80162e6:	4770      	bx	lr

080162e8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b086      	sub	sp, #24
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	60f8      	str	r0, [r7, #12]
 80162f0:	4608      	mov	r0, r1
 80162f2:	4639      	mov	r1, r7
 80162f4:	e881 000c 	stmia.w	r1, {r2, r3}
 80162f8:	4603      	mov	r3, r0
 80162fa:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	881b      	ldrh	r3, [r3, #0]
 8016300:	827b      	strh	r3, [r7, #18]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016302:	4b1a      	ldr	r3, [pc, #104]	@ (801636c <SetMaxTimeCredits+0x84>)
 8016304:	617b      	str	r3, [r7, #20]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016306:	7af9      	ldrb	r1, [r7, #11]
 8016308:	463b      	mov	r3, r7
 801630a:	cb0c      	ldmia	r3, {r2, r3}
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	f7ff ffc5 	bl	801629c <GetDutyCycle>
 8016312:	4603      	mov	r3, r0
 8016314:	827b      	strh	r3, [r7, #18]

    if( joined == false )
 8016316:	7afb      	ldrb	r3, [r7, #11]
 8016318:	f083 0301 	eor.w	r3, r3, #1
 801631c:	b2db      	uxtb	r3, r3
 801631e:	2b00      	cmp	r3, #0
 8016320:	d011      	beq.n	8016346 <SetMaxTimeCredits+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016328:	d202      	bcs.n	8016330 <SetMaxTimeCredits+0x48>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801632a:	4b10      	ldr	r3, [pc, #64]	@ (801636c <SetMaxTimeCredits+0x84>)
 801632c:	617b      	str	r3, [r7, #20]
 801632e:	e014      	b.n	801635a <SetMaxTimeCredits+0x72>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016336:	4293      	cmp	r3, r2
 8016338:	d802      	bhi.n	8016340 <SetMaxTimeCredits+0x58>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801633a:	4b0c      	ldr	r3, [pc, #48]	@ (801636c <SetMaxTimeCredits+0x84>)
 801633c:	617b      	str	r3, [r7, #20]
 801633e:	e00c      	b.n	801635a <SetMaxTimeCredits+0x72>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 8016340:	4b0b      	ldr	r3, [pc, #44]	@ (8016370 <SetMaxTimeCredits+0x88>)
 8016342:	617b      	str	r3, [r7, #20]
 8016344:	e009      	b.n	801635a <SetMaxTimeCredits+0x72>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 8016346:	f897 3020 	ldrb.w	r3, [r7, #32]
 801634a:	f083 0301 	eor.w	r3, r3, #1
 801634e:	b2db      	uxtb	r3, r3
 8016350:	2b00      	cmp	r3, #0
 8016352:	d002      	beq.n	801635a <SetMaxTimeCredits+0x72>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	697a      	ldr	r2, [r7, #20]
 8016358:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	697a      	ldr	r2, [r7, #20]
 801635e:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016360:	8a7b      	ldrh	r3, [r7, #18]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3718      	adds	r7, #24
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
 801636a:	bf00      	nop
 801636c:	0036ee80 	.word	0x0036ee80
 8016370:	000d4670 	.word	0x000d4670

08016374 <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 8016374:	b580      	push	{r7, lr}
 8016376:	b086      	sub	sp, #24
 8016378:	af02      	add	r7, sp, #8
 801637a:	6078      	str	r0, [r7, #4]
 801637c:	4608      	mov	r0, r1
 801637e:	4611      	mov	r1, r2
 8016380:	461a      	mov	r2, r3
 8016382:	4603      	mov	r3, r0
 8016384:	70fb      	strb	r3, [r7, #3]
 8016386:	460b      	mov	r3, r1
 8016388:	70bb      	strb	r3, [r7, #2]
 801638a:	4613      	mov	r3, r2
 801638c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801638e:	78f9      	ldrb	r1, [r7, #3]
 8016390:	787b      	ldrb	r3, [r7, #1]
 8016392:	9301      	str	r3, [sp, #4]
 8016394:	78bb      	ldrb	r3, [r7, #2]
 8016396:	9300      	str	r3, [sp, #0]
 8016398:	f107 0318 	add.w	r3, r7, #24
 801639c:	cb0c      	ldmia	r3, {r2, r3}
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f7ff ffa2 	bl	80162e8 <SetMaxTimeCredits>
 80163a4:	4603      	mov	r3, r0
 80163a6:	817b      	strh	r3, [r7, #10]
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 80163a8:	4b1a      	ldr	r3, [pc, #104]	@ (8016414 <UpdateTimeCredits+0xa0>)
 80163aa:	60fb      	str	r3, [r7, #12]

    if( joined == false )
 80163ac:	78fb      	ldrb	r3, [r7, #3]
 80163ae:	f083 0301 	eor.w	r3, r3, #1
 80163b2:	b2db      	uxtb	r3, r3
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d010      	beq.n	80163da <UpdateTimeCredits+0x66>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80163b8:	69bb      	ldr	r3, [r7, #24]
 80163ba:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80163be:	d202      	bcs.n	80163c6 <UpdateTimeCredits+0x52>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 80163c0:	4b14      	ldr	r3, [pc, #80]	@ (8016414 <UpdateTimeCredits+0xa0>)
 80163c2:	60fb      	str	r3, [r7, #12]
 80163c4:	e009      	b.n	80163da <UpdateTimeCredits+0x66>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80163c6:	69bb      	ldr	r3, [r7, #24]
 80163c8:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80163cc:	4293      	cmp	r3, r2
 80163ce:	d802      	bhi.n	80163d6 <UpdateTimeCredits+0x62>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 80163d0:	4b11      	ldr	r3, [pc, #68]	@ (8016418 <UpdateTimeCredits+0xa4>)
 80163d2:	60fb      	str	r3, [r7, #12]
 80163d4:	e001      	b.n	80163da <UpdateTimeCredits+0x66>
        }
        else
        {
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 80163d6:	4b11      	ldr	r3, [pc, #68]	@ (801641c <UpdateTimeCredits+0xa8>)
 80163d8:	60fb      	str	r3, [r7, #12]
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 80163da:	68fa      	ldr	r2, [r7, #12]
 80163dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163de:	429a      	cmp	r2, r3
 80163e0:	d908      	bls.n	80163f4 <UpdateTimeCredits+0x80>
        ( band->LastMaxCreditAssignTime != observation ) ||
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	689b      	ldr	r3, [r3, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 80163e6:	68fa      	ldr	r2, [r7, #12]
 80163e8:	429a      	cmp	r2, r3
 80163ea:	d103      	bne.n	80163f4 <UpdateTimeCredits+0x80>
        ( band->LastBandUpdateTime == 0 ) )
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	685b      	ldr	r3, [r3, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d109      	bne.n	8016408 <UpdateTimeCredits+0x94>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	691a      	ldr	r2, [r3, #16]
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	60da      	str	r2, [r3, #12]
        band->LastBandUpdateTime = currentTime;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6a3a      	ldr	r2, [r7, #32]
 8016400:	605a      	str	r2, [r3, #4]
        band->LastMaxCreditAssignTime = observation;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	68fa      	ldr	r2, [r7, #12]
 8016406:	609a      	str	r2, [r3, #8]
    }
    return dutyCycle;
 8016408:	897b      	ldrh	r3, [r7, #10]
}
 801640a:	4618      	mov	r0, r3
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	0036ee80 	.word	0x0036ee80
 8016418:	025c3f80 	.word	0x025c3f80
 801641c:	07829b80 	.word	0x07829b80

08016420 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016420:	b480      	push	{r7}
 8016422:	b085      	sub	sp, #20
 8016424:	af00      	add	r7, sp, #0
 8016426:	4603      	mov	r3, r0
 8016428:	460a      	mov	r2, r1
 801642a:	80fb      	strh	r3, [r7, #6]
 801642c:	4613      	mov	r3, r2
 801642e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016430:	2300      	movs	r3, #0
 8016432:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016434:	2300      	movs	r3, #0
 8016436:	73bb      	strb	r3, [r7, #14]
 8016438:	e011      	b.n	801645e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801643a:	88fa      	ldrh	r2, [r7, #6]
 801643c:	7bbb      	ldrb	r3, [r7, #14]
 801643e:	2101      	movs	r1, #1
 8016440:	fa01 f303 	lsl.w	r3, r1, r3
 8016444:	401a      	ands	r2, r3
 8016446:	7bbb      	ldrb	r3, [r7, #14]
 8016448:	2101      	movs	r1, #1
 801644a:	fa01 f303 	lsl.w	r3, r1, r3
 801644e:	429a      	cmp	r2, r3
 8016450:	d102      	bne.n	8016458 <CountChannels+0x38>
        {
            nbActiveBits++;
 8016452:	7bfb      	ldrb	r3, [r7, #15]
 8016454:	3301      	adds	r3, #1
 8016456:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016458:	7bbb      	ldrb	r3, [r7, #14]
 801645a:	3301      	adds	r3, #1
 801645c:	73bb      	strb	r3, [r7, #14]
 801645e:	7bba      	ldrb	r2, [r7, #14]
 8016460:	797b      	ldrb	r3, [r7, #5]
 8016462:	429a      	cmp	r2, r3
 8016464:	d3e9      	bcc.n	801643a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016466:	7bfb      	ldrb	r3, [r7, #15]
}
 8016468:	4618      	mov	r0, r3
 801646a:	3714      	adds	r7, #20
 801646c:	46bd      	mov	sp, r7
 801646e:	bc80      	pop	{r7}
 8016470:	4770      	bx	lr

08016472 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016472:	b580      	push	{r7, lr}
 8016474:	b084      	sub	sp, #16
 8016476:	af00      	add	r7, sp, #0
 8016478:	6039      	str	r1, [r7, #0]
 801647a:	4611      	mov	r1, r2
 801647c:	461a      	mov	r2, r3
 801647e:	4603      	mov	r3, r0
 8016480:	71fb      	strb	r3, [r7, #7]
 8016482:	460b      	mov	r3, r1
 8016484:	71bb      	strb	r3, [r7, #6]
 8016486:	4613      	mov	r3, r2
 8016488:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801648a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801648e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016492:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016496:	4618      	mov	r0, r3
 8016498:	f000 f85d 	bl	8016556 <RegionCommonValueInRange>
 801649c:	4603      	mov	r3, r0
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d101      	bne.n	80164a6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80164a2:	2300      	movs	r3, #0
 80164a4:	e053      	b.n	801654e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80164a6:	2300      	movs	r3, #0
 80164a8:	73fb      	strb	r3, [r7, #15]
 80164aa:	2300      	movs	r3, #0
 80164ac:	73bb      	strb	r3, [r7, #14]
 80164ae:	e049      	b.n	8016544 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80164b0:	2300      	movs	r3, #0
 80164b2:	737b      	strb	r3, [r7, #13]
 80164b4:	e03d      	b.n	8016532 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80164b6:	7bbb      	ldrb	r3, [r7, #14]
 80164b8:	005b      	lsls	r3, r3, #1
 80164ba:	683a      	ldr	r2, [r7, #0]
 80164bc:	4413      	add	r3, r2
 80164be:	881b      	ldrh	r3, [r3, #0]
 80164c0:	461a      	mov	r2, r3
 80164c2:	7b7b      	ldrb	r3, [r7, #13]
 80164c4:	fa42 f303 	asr.w	r3, r2, r3
 80164c8:	f003 0301 	and.w	r3, r3, #1
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d02d      	beq.n	801652c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80164d0:	7bfa      	ldrb	r2, [r7, #15]
 80164d2:	7b7b      	ldrb	r3, [r7, #13]
 80164d4:	4413      	add	r3, r2
 80164d6:	461a      	mov	r2, r3
 80164d8:	4613      	mov	r3, r2
 80164da:	005b      	lsls	r3, r3, #1
 80164dc:	4413      	add	r3, r2
 80164de:	009b      	lsls	r3, r3, #2
 80164e0:	461a      	mov	r2, r3
 80164e2:	69fb      	ldr	r3, [r7, #28]
 80164e4:	4413      	add	r3, r2
 80164e6:	7a1b      	ldrb	r3, [r3, #8]
 80164e8:	f343 0303 	sbfx	r3, r3, #0, #4
 80164ec:	b25b      	sxtb	r3, r3
 80164ee:	f003 030f 	and.w	r3, r3, #15
 80164f2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80164f4:	7bfa      	ldrb	r2, [r7, #15]
 80164f6:	7b7b      	ldrb	r3, [r7, #13]
 80164f8:	4413      	add	r3, r2
 80164fa:	461a      	mov	r2, r3
 80164fc:	4613      	mov	r3, r2
 80164fe:	005b      	lsls	r3, r3, #1
 8016500:	4413      	add	r3, r2
 8016502:	009b      	lsls	r3, r3, #2
 8016504:	461a      	mov	r2, r3
 8016506:	69fb      	ldr	r3, [r7, #28]
 8016508:	4413      	add	r3, r2
 801650a:	7a1b      	ldrb	r3, [r3, #8]
 801650c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016510:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016512:	f003 030f 	and.w	r3, r3, #15
 8016516:	b25a      	sxtb	r2, r3
 8016518:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801651c:	4618      	mov	r0, r3
 801651e:	f000 f81a 	bl	8016556 <RegionCommonValueInRange>
 8016522:	4603      	mov	r3, r0
 8016524:	2b01      	cmp	r3, #1
 8016526:	d101      	bne.n	801652c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016528:	2301      	movs	r3, #1
 801652a:	e010      	b.n	801654e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801652c:	7b7b      	ldrb	r3, [r7, #13]
 801652e:	3301      	adds	r3, #1
 8016530:	737b      	strb	r3, [r7, #13]
 8016532:	7b7b      	ldrb	r3, [r7, #13]
 8016534:	2b0f      	cmp	r3, #15
 8016536:	d9be      	bls.n	80164b6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016538:	7bfb      	ldrb	r3, [r7, #15]
 801653a:	3310      	adds	r3, #16
 801653c:	73fb      	strb	r3, [r7, #15]
 801653e:	7bbb      	ldrb	r3, [r7, #14]
 8016540:	3301      	adds	r3, #1
 8016542:	73bb      	strb	r3, [r7, #14]
 8016544:	7bfa      	ldrb	r2, [r7, #15]
 8016546:	79fb      	ldrb	r3, [r7, #7]
 8016548:	429a      	cmp	r2, r3
 801654a:	d3b1      	bcc.n	80164b0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801654c:	2300      	movs	r3, #0
}
 801654e:	4618      	mov	r0, r3
 8016550:	3710      	adds	r7, #16
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}

08016556 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016556:	b480      	push	{r7}
 8016558:	b083      	sub	sp, #12
 801655a:	af00      	add	r7, sp, #0
 801655c:	4603      	mov	r3, r0
 801655e:	71fb      	strb	r3, [r7, #7]
 8016560:	460b      	mov	r3, r1
 8016562:	71bb      	strb	r3, [r7, #6]
 8016564:	4613      	mov	r3, r2
 8016566:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016568:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801656c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016570:	429a      	cmp	r2, r3
 8016572:	db07      	blt.n	8016584 <RegionCommonValueInRange+0x2e>
 8016574:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016578:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801657c:	429a      	cmp	r2, r3
 801657e:	dc01      	bgt.n	8016584 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016580:	2301      	movs	r3, #1
 8016582:	e000      	b.n	8016586 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	370c      	adds	r7, #12
 801658a:	46bd      	mov	sp, r7
 801658c:	bc80      	pop	{r7}
 801658e:	4770      	bx	lr

08016590 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016590:	b480      	push	{r7}
 8016592:	b085      	sub	sp, #20
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	460b      	mov	r3, r1
 801659a:	70fb      	strb	r3, [r7, #3]
 801659c:	4613      	mov	r3, r2
 801659e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80165a0:	78fb      	ldrb	r3, [r7, #3]
 80165a2:	091b      	lsrs	r3, r3, #4
 80165a4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80165a6:	78bb      	ldrb	r3, [r7, #2]
 80165a8:	091b      	lsrs	r3, r3, #4
 80165aa:	b2db      	uxtb	r3, r3
 80165ac:	7bfa      	ldrb	r2, [r7, #15]
 80165ae:	429a      	cmp	r2, r3
 80165b0:	d803      	bhi.n	80165ba <RegionCommonChanDisable+0x2a>
 80165b2:	78fa      	ldrb	r2, [r7, #3]
 80165b4:	78bb      	ldrb	r3, [r7, #2]
 80165b6:	429a      	cmp	r2, r3
 80165b8:	d301      	bcc.n	80165be <RegionCommonChanDisable+0x2e>
    {
        return false;
 80165ba:	2300      	movs	r3, #0
 80165bc:	e017      	b.n	80165ee <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80165be:	7bfb      	ldrb	r3, [r7, #15]
 80165c0:	005b      	lsls	r3, r3, #1
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	4413      	add	r3, r2
 80165c6:	881b      	ldrh	r3, [r3, #0]
 80165c8:	b21a      	sxth	r2, r3
 80165ca:	78fb      	ldrb	r3, [r7, #3]
 80165cc:	f003 030f 	and.w	r3, r3, #15
 80165d0:	2101      	movs	r1, #1
 80165d2:	fa01 f303 	lsl.w	r3, r1, r3
 80165d6:	b21b      	sxth	r3, r3
 80165d8:	43db      	mvns	r3, r3
 80165da:	b21b      	sxth	r3, r3
 80165dc:	4013      	ands	r3, r2
 80165de:	b219      	sxth	r1, r3
 80165e0:	7bfb      	ldrb	r3, [r7, #15]
 80165e2:	005b      	lsls	r3, r3, #1
 80165e4:	687a      	ldr	r2, [r7, #4]
 80165e6:	4413      	add	r3, r2
 80165e8:	b28a      	uxth	r2, r1
 80165ea:	801a      	strh	r2, [r3, #0]

    return true;
 80165ec:	2301      	movs	r3, #1
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3714      	adds	r7, #20
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bc80      	pop	{r7}
 80165f6:	4770      	bx	lr

080165f8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b084      	sub	sp, #16
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
 8016600:	460b      	mov	r3, r1
 8016602:	70fb      	strb	r3, [r7, #3]
 8016604:	4613      	mov	r3, r2
 8016606:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016608:	2300      	movs	r3, #0
 801660a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d101      	bne.n	8016616 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016612:	2300      	movs	r3, #0
 8016614:	e018      	b.n	8016648 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016616:	78fb      	ldrb	r3, [r7, #3]
 8016618:	73bb      	strb	r3, [r7, #14]
 801661a:	e010      	b.n	801663e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801661c:	7bbb      	ldrb	r3, [r7, #14]
 801661e:	005b      	lsls	r3, r3, #1
 8016620:	687a      	ldr	r2, [r7, #4]
 8016622:	4413      	add	r3, r2
 8016624:	881b      	ldrh	r3, [r3, #0]
 8016626:	2110      	movs	r1, #16
 8016628:	4618      	mov	r0, r3
 801662a:	f7ff fef9 	bl	8016420 <CountChannels>
 801662e:	4603      	mov	r3, r0
 8016630:	461a      	mov	r2, r3
 8016632:	7bfb      	ldrb	r3, [r7, #15]
 8016634:	4413      	add	r3, r2
 8016636:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016638:	7bbb      	ldrb	r3, [r7, #14]
 801663a:	3301      	adds	r3, #1
 801663c:	73bb      	strb	r3, [r7, #14]
 801663e:	7bba      	ldrb	r2, [r7, #14]
 8016640:	78bb      	ldrb	r3, [r7, #2]
 8016642:	429a      	cmp	r2, r3
 8016644:	d3ea      	bcc.n	801661c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016646:	7bfb      	ldrb	r3, [r7, #15]
}
 8016648:	4618      	mov	r0, r3
 801664a:	3710      	adds	r7, #16
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}

08016650 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016650:	b480      	push	{r7}
 8016652:	b087      	sub	sp, #28
 8016654:	af00      	add	r7, sp, #0
 8016656:	60f8      	str	r0, [r7, #12]
 8016658:	60b9      	str	r1, [r7, #8]
 801665a:	4613      	mov	r3, r2
 801665c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d016      	beq.n	8016692 <RegionCommonChanMaskCopy+0x42>
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d013      	beq.n	8016692 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801666a:	2300      	movs	r3, #0
 801666c:	75fb      	strb	r3, [r7, #23]
 801666e:	e00c      	b.n	801668a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016670:	7dfb      	ldrb	r3, [r7, #23]
 8016672:	005b      	lsls	r3, r3, #1
 8016674:	68ba      	ldr	r2, [r7, #8]
 8016676:	441a      	add	r2, r3
 8016678:	7dfb      	ldrb	r3, [r7, #23]
 801667a:	005b      	lsls	r3, r3, #1
 801667c:	68f9      	ldr	r1, [r7, #12]
 801667e:	440b      	add	r3, r1
 8016680:	8812      	ldrh	r2, [r2, #0]
 8016682:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016684:	7dfb      	ldrb	r3, [r7, #23]
 8016686:	3301      	adds	r3, #1
 8016688:	75fb      	strb	r3, [r7, #23]
 801668a:	7dfa      	ldrb	r2, [r7, #23]
 801668c:	79fb      	ldrb	r3, [r7, #7]
 801668e:	429a      	cmp	r2, r3
 8016690:	d3ee      	bcc.n	8016670 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016692:	bf00      	nop
 8016694:	371c      	adds	r7, #28
 8016696:	46bd      	mov	sp, r7
 8016698:	bc80      	pop	{r7}
 801669a:	4770      	bx	lr

0801669c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801669c:	b082      	sub	sp, #8
 801669e:	b580      	push	{r7, lr}
 80166a0:	b086      	sub	sp, #24
 80166a2:	af00      	add	r7, sp, #0
 80166a4:	60f8      	str	r0, [r7, #12]
 80166a6:	60b9      	str	r1, [r7, #8]
 80166a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80166aa:	4613      	mov	r3, r2
 80166ac:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80166ae:	79f9      	ldrb	r1, [r7, #7]
 80166b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80166b4:	cb0c      	ldmia	r3, {r2, r3}
 80166b6:	68f8      	ldr	r0, [r7, #12]
 80166b8:	f7ff fdf0 	bl	801629c <GetDutyCycle>
 80166bc:	4603      	mov	r3, r0
 80166be:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	68da      	ldr	r2, [r3, #12]
 80166c4:	8afb      	ldrh	r3, [r7, #22]
 80166c6:	68b9      	ldr	r1, [r7, #8]
 80166c8:	fb01 f303 	mul.w	r3, r1, r3
 80166cc:	429a      	cmp	r2, r3
 80166ce:	d909      	bls.n	80166e4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	68da      	ldr	r2, [r3, #12]
 80166d4:	8afb      	ldrh	r3, [r7, #22]
 80166d6:	68b9      	ldr	r1, [r7, #8]
 80166d8:	fb01 f303 	mul.w	r3, r1, r3
 80166dc:	1ad2      	subs	r2, r2, r3
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80166e2:	e002      	b.n	80166ea <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	2200      	movs	r2, #0
 80166e8:	60da      	str	r2, [r3, #12]
}
 80166ea:	bf00      	nop
 80166ec:	3718      	adds	r7, #24
 80166ee:	46bd      	mov	sp, r7
 80166f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80166f4:	b002      	add	sp, #8
 80166f6:	4770      	bx	lr

080166f8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80166f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166fa:	b08f      	sub	sp, #60	@ 0x3c
 80166fc:	af04      	add	r7, sp, #16
 80166fe:	6039      	str	r1, [r7, #0]
 8016700:	4611      	mov	r1, r2
 8016702:	461a      	mov	r2, r3
 8016704:	4603      	mov	r3, r0
 8016706:	71fb      	strb	r3, [r7, #7]
 8016708:	460b      	mov	r3, r1
 801670a:	71bb      	strb	r3, [r7, #6]
 801670c:	4613      	mov	r3, r2
 801670e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016710:	f04f 33ff 	mov.w	r3, #4294967295
 8016714:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016716:	f006 f8d5 	bl	801c8c4 <UTIL_TIMER_GetCurrentTime>
 801671a:	61b8      	str	r0, [r7, #24]
    TimerTime_t creditCosts = 0;
 801671c:	2300      	movs	r3, #0
 801671e:	617b      	str	r3, [r7, #20]
    uint16_t dutyCycle = 1;
 8016720:	2301      	movs	r3, #1
 8016722:	827b      	strh	r3, [r7, #18]
    uint8_t validBands = 0;
 8016724:	2300      	movs	r3, #0
 8016726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801672a:	2300      	movs	r3, #0
 801672c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016730:	e09c      	b.n	801686c <RegionCommonUpdateBandTimeOff+0x174>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 8016732:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016736:	4613      	mov	r3, r2
 8016738:	005b      	lsls	r3, r3, #1
 801673a:	4413      	add	r3, r2
 801673c:	00db      	lsls	r3, r3, #3
 801673e:	461a      	mov	r2, r3
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	4413      	add	r3, r2
 8016744:	685b      	ldr	r3, [r3, #4]
 8016746:	4618      	mov	r0, r3
 8016748:	f006 f8ce 	bl	801c8e8 <UTIL_TIMER_GetElapsedTime>
 801674c:	60f8      	str	r0, [r7, #12]

        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801674e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016752:	4613      	mov	r3, r2
 8016754:	005b      	lsls	r3, r3, #1
 8016756:	4413      	add	r3, r2
 8016758:	00db      	lsls	r3, r3, #3
 801675a:	461a      	mov	r2, r3
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	189c      	adds	r4, r3, r2
 8016760:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8016764:	797a      	ldrb	r2, [r7, #5]
 8016766:	79fd      	ldrb	r5, [r7, #7]
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	9303      	str	r3, [sp, #12]
 801676c:	69bb      	ldr	r3, [r7, #24]
 801676e:	9302      	str	r3, [sp, #8]
 8016770:	46ec      	mov	ip, sp
 8016772:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016776:	e893 0003 	ldmia.w	r3, {r0, r1}
 801677a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801677e:	4633      	mov	r3, r6
 8016780:	4629      	mov	r1, r5
 8016782:	4620      	mov	r0, r4
 8016784:	f7ff fdf6 	bl	8016374 <UpdateTimeCredits>
 8016788:	4603      	mov	r3, r0
 801678a:	827b      	strh	r3, [r7, #18]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801678c:	8a7a      	ldrh	r2, [r7, #18]
 801678e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016790:	fb02 f303 	mul.w	r3, r2, r3
 8016794:	617b      	str	r3, [r7, #20]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016796:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801679a:	4613      	mov	r3, r2
 801679c:	005b      	lsls	r3, r3, #1
 801679e:	4413      	add	r3, r2
 80167a0:	00db      	lsls	r3, r3, #3
 80167a2:	461a      	mov	r2, r3
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	4413      	add	r3, r2
 80167a8:	68db      	ldr	r3, [r3, #12]
 80167aa:	697a      	ldr	r2, [r7, #20]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d308      	bcc.n	80167c2 <RegionCommonUpdateBandTimeOff+0xca>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80167b0:	797b      	ldrb	r3, [r7, #5]
 80167b2:	f083 0301 	eor.w	r3, r3, #1
 80167b6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d013      	beq.n	80167e4 <RegionCommonUpdateBandTimeOff+0xec>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80167bc:	79fb      	ldrb	r3, [r7, #7]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d010      	beq.n	80167e4 <RegionCommonUpdateBandTimeOff+0xec>
        {
            bands[i].ReadyForTransmission = true;
 80167c2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80167c6:	4613      	mov	r3, r2
 80167c8:	005b      	lsls	r3, r3, #1
 80167ca:	4413      	add	r3, r2
 80167cc:	00db      	lsls	r3, r3, #3
 80167ce:	461a      	mov	r2, r3
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	4413      	add	r3, r2
 80167d4:	2201      	movs	r2, #1
 80167d6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80167d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80167dc:	3301      	adds	r3, #1
 80167de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80167e2:	e03e      	b.n	8016862 <RegionCommonUpdateBandTimeOff+0x16a>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80167e4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80167e8:	4613      	mov	r3, r2
 80167ea:	005b      	lsls	r3, r3, #1
 80167ec:	4413      	add	r3, r2
 80167ee:	00db      	lsls	r3, r3, #3
 80167f0:	461a      	mov	r2, r3
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	4413      	add	r3, r2
 80167f6:	2200      	movs	r2, #0
 80167f8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80167fa:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80167fe:	4613      	mov	r3, r2
 8016800:	005b      	lsls	r3, r3, #1
 8016802:	4413      	add	r3, r2
 8016804:	00db      	lsls	r3, r3, #3
 8016806:	461a      	mov	r2, r3
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	4413      	add	r3, r2
 801680c:	691b      	ldr	r3, [r3, #16]
 801680e:	697a      	ldr	r2, [r7, #20]
 8016810:	429a      	cmp	r2, r3
 8016812:	d226      	bcs.n	8016862 <RegionCommonUpdateBandTimeOff+0x16a>
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
 8016814:	2300      	movs	r3, #0
 8016816:	61fb      	str	r3, [r7, #28]
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 8016818:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801681c:	4613      	mov	r3, r2
 801681e:	005b      	lsls	r3, r3, #1
 8016820:	4413      	add	r3, r2
 8016822:	00db      	lsls	r3, r3, #3
 8016824:	461a      	mov	r2, r3
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	4413      	add	r3, r2
 801682a:	689b      	ldr	r3, [r3, #8]
 801682c:	68fa      	ldr	r2, [r7, #12]
 801682e:	429a      	cmp	r2, r3
 8016830:	d80c      	bhi.n	801684c <RegionCommonUpdateBandTimeOff+0x154>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 8016832:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016836:	4613      	mov	r3, r2
 8016838:	005b      	lsls	r3, r3, #1
 801683a:	4413      	add	r3, r2
 801683c:	00db      	lsls	r3, r3, #3
 801683e:	461a      	mov	r2, r3
 8016840:	683b      	ldr	r3, [r7, #0]
 8016842:	4413      	add	r3, r2
 8016844:	689a      	ldr	r2, [r3, #8]
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	1ad3      	subs	r3, r2, r3
 801684a:	61fb      	str	r3, [r7, #28]
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 801684c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801684e:	69fb      	ldr	r3, [r7, #28]
 8016850:	4293      	cmp	r3, r2
 8016852:	bf28      	it	cs
 8016854:	4613      	movcs	r3, r2
 8016856:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8016858:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801685c:	3301      	adds	r3, #1
 801685e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for( uint8_t i = 0; i < nbBands; i++ )
 8016862:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016866:	3301      	adds	r3, #1
 8016868:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801686c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016870:	79bb      	ldrb	r3, [r7, #6]
 8016872:	429a      	cmp	r2, r3
 8016874:	f4ff af5d 	bcc.w	8016732 <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 8016878:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801687c:	2b00      	cmp	r3, #0
 801687e:	d102      	bne.n	8016886 <RegionCommonUpdateBandTimeOff+0x18e>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016880:	f04f 33ff 	mov.w	r3, #4294967295
 8016884:	e000      	b.n	8016888 <RegionCommonUpdateBandTimeOff+0x190>
    }
    return minTimeToWait;
 8016886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016888:	4618      	mov	r0, r3
 801688a:	372c      	adds	r7, #44	@ 0x2c
 801688c:	46bd      	mov	sp, r7
 801688e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016890 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016890:	b480      	push	{r7}
 8016892:	b085      	sub	sp, #20
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
 8016898:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801689a:	2300      	movs	r3, #0
 801689c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	2b03      	cmp	r3, #3
 80168a4:	d140      	bne.n	8016928 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	3301      	adds	r3, #1
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	b25a      	sxtb	r2, r3
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168b8:	f003 030f 	and.w	r3, r3, #15
 80168bc:	b25a      	sxtb	r2, r3
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168c8:	b2db      	uxtb	r3, r3
 80168ca:	091b      	lsrs	r3, r3, #4
 80168cc:	b2db      	uxtb	r3, r3
 80168ce:	b25a      	sxtb	r2, r3
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	3302      	adds	r3, #2
 80168d8:	781b      	ldrb	r3, [r3, #0]
 80168da:	461a      	mov	r2, r3
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	889b      	ldrh	r3, [r3, #4]
 80168e4:	b21a      	sxth	r2, r3
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	3303      	adds	r3, #3
 80168ea:	781b      	ldrb	r3, [r3, #0]
 80168ec:	b21b      	sxth	r3, r3
 80168ee:	021b      	lsls	r3, r3, #8
 80168f0:	b21b      	sxth	r3, r3
 80168f2:	4313      	orrs	r3, r2
 80168f4:	b21b      	sxth	r3, r3
 80168f6:	b29a      	uxth	r2, r3
 80168f8:	683b      	ldr	r3, [r7, #0]
 80168fa:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	791a      	ldrb	r2, [r3, #4]
 8016900:	683b      	ldr	r3, [r7, #0]
 8016902:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	781b      	ldrb	r3, [r3, #0]
 8016908:	091b      	lsrs	r3, r3, #4
 801690a:	b2db      	uxtb	r3, r3
 801690c:	f003 0307 	and.w	r3, r3, #7
 8016910:	b2da      	uxtb	r2, r3
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016916:	683b      	ldr	r3, [r7, #0]
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	f003 030f 	and.w	r3, r3, #15
 801691e:	b2da      	uxtb	r2, r3
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016924:	2305      	movs	r3, #5
 8016926:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016928:	7bfb      	ldrb	r3, [r7, #15]
}
 801692a:	4618      	mov	r0, r3
 801692c:	3714      	adds	r7, #20
 801692e:	46bd      	mov	sp, r7
 8016930:	bc80      	pop	{r7}
 8016932:	4770      	bx	lr

08016934 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016934:	b5b0      	push	{r4, r5, r7, lr}
 8016936:	b088      	sub	sp, #32
 8016938:	af02      	add	r7, sp, #8
 801693a:	60f8      	str	r0, [r7, #12]
 801693c:	60b9      	str	r1, [r7, #8]
 801693e:	607a      	str	r2, [r7, #4]
 8016940:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	791b      	ldrb	r3, [r3, #4]
 8016946:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	799b      	ldrb	r3, [r3, #6]
 801694c:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	79db      	ldrb	r3, [r3, #7]
 8016952:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	7a1b      	ldrb	r3, [r3, #8]
 8016958:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	795b      	ldrb	r3, [r3, #5]
 801695e:	f083 0301 	eor.w	r3, r3, #1
 8016962:	b2db      	uxtb	r3, r3
 8016964:	2b00      	cmp	r3, #0
 8016966:	d008      	beq.n	801697a <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	7adb      	ldrb	r3, [r3, #11]
 801696c:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	7a5b      	ldrb	r3, [r3, #9]
 8016972:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	7a9b      	ldrb	r3, [r3, #10]
 8016978:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801697a:	7dfb      	ldrb	r3, [r7, #23]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d04a      	beq.n	8016a16 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016980:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016984:	2b0f      	cmp	r3, #15
 8016986:	d103      	bne.n	8016990 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	7a5b      	ldrb	r3, [r3, #9]
 801698c:	75bb      	strb	r3, [r7, #22]
 801698e:	e01d      	b.n	80169cc <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	7b18      	ldrb	r0, [r3, #12]
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	6919      	ldr	r1, [r3, #16]
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80169a4:	68fa      	ldr	r2, [r7, #12]
 80169a6:	6992      	ldr	r2, [r2, #24]
 80169a8:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80169ac:	9201      	str	r2, [sp, #4]
 80169ae:	9300      	str	r3, [sp, #0]
 80169b0:	462b      	mov	r3, r5
 80169b2:	4622      	mov	r2, r4
 80169b4:	f7ff fd5d 	bl	8016472 <RegionCommonChanVerifyDr>
 80169b8:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80169ba:	f083 0301 	eor.w	r3, r3, #1
 80169be:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d003      	beq.n	80169cc <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80169c4:	7dfb      	ldrb	r3, [r7, #23]
 80169c6:	f023 0302 	bic.w	r3, r3, #2
 80169ca:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80169cc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80169d0:	2b0f      	cmp	r3, #15
 80169d2:	d103      	bne.n	80169dc <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	7a9b      	ldrb	r3, [r3, #10]
 80169d8:	757b      	strb	r3, [r7, #21]
 80169da:	e01c      	b.n	8016a16 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80169e8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7ff fdb2 	bl	8016556 <RegionCommonValueInRange>
 80169f2:	4603      	mov	r3, r0
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d10e      	bne.n	8016a16 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80169fe:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016a02:	429a      	cmp	r2, r3
 8016a04:	da03      	bge.n	8016a0e <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	7f5b      	ldrb	r3, [r3, #29]
 8016a0a:	757b      	strb	r3, [r7, #21]
 8016a0c:	e003      	b.n	8016a16 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016a0e:	7dfb      	ldrb	r3, [r7, #23]
 8016a10:	f023 0304 	bic.w	r3, r3, #4
 8016a14:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016a16:	7dfb      	ldrb	r3, [r7, #23]
 8016a18:	2b07      	cmp	r3, #7
 8016a1a:	d105      	bne.n	8016a28 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016a1c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d101      	bne.n	8016a28 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016a24:	2301      	movs	r3, #1
 8016a26:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	7dba      	ldrb	r2, [r7, #22]
 8016a2c:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	7d7a      	ldrb	r2, [r7, #21]
 8016a32:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016a34:	7d3a      	ldrb	r2, [r7, #20]
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	701a      	strb	r2, [r3, #0]

    return status;
 8016a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3718      	adds	r7, #24
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bdb0      	pop	{r4, r5, r7, pc}

08016a44 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016a44:	b480      	push	{r7}
 8016a46:	b083      	sub	sp, #12
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	6039      	str	r1, [r7, #0]
 8016a4e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016a50:	79fb      	ldrb	r3, [r7, #7]
 8016a52:	4a06      	ldr	r2, [pc, #24]	@ (8016a6c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016a54:	fa02 f303 	lsl.w	r3, r2, r3
 8016a58:	461a      	mov	r2, r3
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016a60:	4618      	mov	r0, r3
 8016a62:	370c      	adds	r7, #12
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bc80      	pop	{r7}
 8016a68:	4770      	bx	lr
 8016a6a:	bf00      	nop
 8016a6c:	000f4240 	.word	0x000f4240

08016a70 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016a70:	b480      	push	{r7}
 8016a72:	b083      	sub	sp, #12
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	4603      	mov	r3, r0
 8016a78:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016a7a:	79fb      	ldrb	r3, [r7, #7]
 8016a7c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016a80:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	370c      	adds	r7, #12
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bc80      	pop	{r7}
 8016a8c:	4770      	bx	lr
	...

08016a90 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016a90:	b480      	push	{r7}
 8016a92:	b085      	sub	sp, #20
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	60f8      	str	r0, [r7, #12]
 8016a98:	607a      	str	r2, [r7, #4]
 8016a9a:	603b      	str	r3, [r7, #0]
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016aa0:	7afa      	ldrb	r2, [r7, #11]
 8016aa2:	7afb      	ldrb	r3, [r7, #11]
 8016aa4:	3b04      	subs	r3, #4
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	fb03 f101 	mul.w	r1, r3, r1
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016ab4:	fb00 f303 	mul.w	r3, r0, r3
 8016ab8:	440b      	add	r3, r1
 8016aba:	005b      	lsls	r3, r3, #1
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d013      	beq.n	8016ae8 <RegionCommonComputeRxWindowParameters+0x58>
 8016ac0:	7afb      	ldrb	r3, [r7, #11]
 8016ac2:	3b04      	subs	r3, #4
 8016ac4:	4619      	mov	r1, r3
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	fb03 f101 	mul.w	r1, r3, r1
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016ad2:	fb00 f303 	mul.w	r3, r0, r3
 8016ad6:	440b      	add	r3, r1
 8016ad8:	0059      	lsls	r1, r3, #1
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	440b      	add	r3, r1
 8016ade:	1e59      	subs	r1, r3, #1
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8016ae6:	e00f      	b.n	8016b08 <RegionCommonComputeRxWindowParameters+0x78>
 8016ae8:	7afb      	ldrb	r3, [r7, #11]
 8016aea:	3b04      	subs	r3, #4
 8016aec:	4619      	mov	r1, r3
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	fb03 f101 	mul.w	r1, r3, r1
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016afa:	fb00 f303 	mul.w	r3, r0, r3
 8016afe:	440b      	add	r3, r1
 8016b00:	0059      	lsls	r1, r3, #1
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	bf38      	it	cc
 8016b0c:	461a      	movcc	r2, r3
 8016b0e:	69bb      	ldr	r3, [r7, #24]
 8016b10:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	009b      	lsls	r3, r3, #2
 8016b16:	4619      	mov	r1, r3
 8016b18:	69bb      	ldr	r3, [r7, #24]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	68fa      	ldr	r2, [r7, #12]
 8016b1e:	fb02 f303 	mul.w	r3, r2, r3
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d007      	beq.n	8016b36 <RegionCommonComputeRxWindowParameters+0xa6>
 8016b26:	69bb      	ldr	r3, [r7, #24]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	68fa      	ldr	r2, [r7, #12]
 8016b2c:	fb02 f303 	mul.w	r3, r2, r3
 8016b30:	3301      	adds	r3, #1
 8016b32:	085b      	lsrs	r3, r3, #1
 8016b34:	e005      	b.n	8016b42 <RegionCommonComputeRxWindowParameters+0xb2>
 8016b36:	69bb      	ldr	r3, [r7, #24]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	68fa      	ldr	r2, [r7, #12]
 8016b3c:	fb02 f303 	mul.w	r3, r2, r3
 8016b40:	085b      	lsrs	r3, r3, #1
 8016b42:	1acb      	subs	r3, r1, r3
 8016b44:	683a      	ldr	r2, [r7, #0]
 8016b46:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b4a:	fb01 f202 	mul.w	r2, r1, r2
 8016b4e:	1a9b      	subs	r3, r3, r2
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	dd27      	ble.n	8016ba4 <RegionCommonComputeRxWindowParameters+0x114>
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	009b      	lsls	r3, r3, #2
 8016b58:	4619      	mov	r1, r3
 8016b5a:	69bb      	ldr	r3, [r7, #24]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	68fa      	ldr	r2, [r7, #12]
 8016b60:	fb02 f303 	mul.w	r3, r2, r3
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d007      	beq.n	8016b78 <RegionCommonComputeRxWindowParameters+0xe8>
 8016b68:	69bb      	ldr	r3, [r7, #24]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	68fa      	ldr	r2, [r7, #12]
 8016b6e:	fb02 f303 	mul.w	r3, r2, r3
 8016b72:	3301      	adds	r3, #1
 8016b74:	085b      	lsrs	r3, r3, #1
 8016b76:	e005      	b.n	8016b84 <RegionCommonComputeRxWindowParameters+0xf4>
 8016b78:	69bb      	ldr	r3, [r7, #24]
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	68fa      	ldr	r2, [r7, #12]
 8016b7e:	fb02 f303 	mul.w	r3, r2, r3
 8016b82:	085b      	lsrs	r3, r3, #1
 8016b84:	1acb      	subs	r3, r1, r3
 8016b86:	683a      	ldr	r2, [r7, #0]
 8016b88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b8c:	fb01 f202 	mul.w	r2, r1, r2
 8016b90:	1a9b      	subs	r3, r3, r2
 8016b92:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8016b96:	4a19      	ldr	r2, [pc, #100]	@ (8016bfc <RegionCommonComputeRxWindowParameters+0x16c>)
 8016b98:	fb82 1203 	smull	r1, r2, r2, r3
 8016b9c:	1192      	asrs	r2, r2, #6
 8016b9e:	17db      	asrs	r3, r3, #31
 8016ba0:	1ad3      	subs	r3, r2, r3
 8016ba2:	e024      	b.n	8016bee <RegionCommonComputeRxWindowParameters+0x15e>
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	009b      	lsls	r3, r3, #2
 8016ba8:	4619      	mov	r1, r3
 8016baa:	69bb      	ldr	r3, [r7, #24]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	68fa      	ldr	r2, [r7, #12]
 8016bb0:	fb02 f303 	mul.w	r3, r2, r3
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d007      	beq.n	8016bc8 <RegionCommonComputeRxWindowParameters+0x138>
 8016bb8:	69bb      	ldr	r3, [r7, #24]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	68fa      	ldr	r2, [r7, #12]
 8016bbe:	fb02 f303 	mul.w	r3, r2, r3
 8016bc2:	3301      	adds	r3, #1
 8016bc4:	085b      	lsrs	r3, r3, #1
 8016bc6:	e005      	b.n	8016bd4 <RegionCommonComputeRxWindowParameters+0x144>
 8016bc8:	69bb      	ldr	r3, [r7, #24]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	68fa      	ldr	r2, [r7, #12]
 8016bce:	fb02 f303 	mul.w	r3, r2, r3
 8016bd2:	085b      	lsrs	r3, r3, #1
 8016bd4:	1acb      	subs	r3, r1, r3
 8016bd6:	683a      	ldr	r2, [r7, #0]
 8016bd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016bdc:	fb01 f202 	mul.w	r2, r1, r2
 8016be0:	1a9b      	subs	r3, r3, r2
 8016be2:	4a06      	ldr	r2, [pc, #24]	@ (8016bfc <RegionCommonComputeRxWindowParameters+0x16c>)
 8016be4:	fb82 1203 	smull	r1, r2, r2, r3
 8016be8:	1192      	asrs	r2, r2, #6
 8016bea:	17db      	asrs	r3, r3, #31
 8016bec:	1ad3      	subs	r3, r2, r3
 8016bee:	69fa      	ldr	r2, [r7, #28]
 8016bf0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016bf2:	bf00      	nop
 8016bf4:	3714      	adds	r7, #20
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bc80      	pop	{r7}
 8016bfa:	4770      	bx	lr
 8016bfc:	10624dd3 	.word	0x10624dd3

08016c00 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b086      	sub	sp, #24
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	4603      	mov	r3, r0
 8016c08:	60b9      	str	r1, [r7, #8]
 8016c0a:	607a      	str	r2, [r7, #4]
 8016c0c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c16:	005b      	lsls	r3, r3, #1
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f7e9 fdd7 	bl	80007cc <__aeabi_ui2f>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	4619      	mov	r1, r3
 8016c22:	68b8      	ldr	r0, [r7, #8]
 8016c24:	f7e9 fd20 	bl	8000668 <__aeabi_fsub>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	6879      	ldr	r1, [r7, #4]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f7e9 fd1b 	bl	8000668 <__aeabi_fsub>
 8016c32:	4603      	mov	r3, r0
 8016c34:	4618      	mov	r0, r3
 8016c36:	f7e9 fc0b 	bl	8000450 <__aeabi_f2d>
 8016c3a:	4602      	mov	r2, r0
 8016c3c:	460b      	mov	r3, r1
 8016c3e:	4610      	mov	r0, r2
 8016c40:	4619      	mov	r1, r3
 8016c42:	f006 f9d5 	bl	801cff0 <floor>
 8016c46:	4602      	mov	r2, r0
 8016c48:	460b      	mov	r3, r1
 8016c4a:	4610      	mov	r0, r2
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	f7e9 fcdf 	bl	8000610 <__aeabi_d2iz>
 8016c52:	4603      	mov	r3, r0
 8016c54:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3718      	adds	r7, #24
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}

08016c62 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016c62:	b590      	push	{r4, r7, lr}
 8016c64:	b087      	sub	sp, #28
 8016c66:	af00      	add	r7, sp, #0
 8016c68:	60f8      	str	r0, [r7, #12]
 8016c6a:	60b9      	str	r1, [r7, #8]
 8016c6c:	607a      	str	r2, [r7, #4]
 8016c6e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016c70:	2300      	movs	r3, #0
 8016c72:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016c74:	2300      	movs	r3, #0
 8016c76:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016c78:	2300      	movs	r3, #0
 8016c7a:	757b      	strb	r3, [r7, #21]
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	753b      	strb	r3, [r7, #20]
 8016c80:	e09c      	b.n	8016dbc <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016c82:	2300      	movs	r3, #0
 8016c84:	74fb      	strb	r3, [r7, #19]
 8016c86:	e08f      	b.n	8016da8 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	685a      	ldr	r2, [r3, #4]
 8016c8c:	7d3b      	ldrb	r3, [r7, #20]
 8016c8e:	005b      	lsls	r3, r3, #1
 8016c90:	4413      	add	r3, r2
 8016c92:	881b      	ldrh	r3, [r3, #0]
 8016c94:	461a      	mov	r2, r3
 8016c96:	7cfb      	ldrb	r3, [r7, #19]
 8016c98:	fa42 f303 	asr.w	r3, r2, r3
 8016c9c:	f003 0301 	and.w	r3, r3, #1
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d07e      	beq.n	8016da2 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	689a      	ldr	r2, [r3, #8]
 8016ca8:	7d79      	ldrb	r1, [r7, #21]
 8016caa:	7cfb      	ldrb	r3, [r7, #19]
 8016cac:	440b      	add	r3, r1
 8016cae:	4619      	mov	r1, r3
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	005b      	lsls	r3, r3, #1
 8016cb4:	440b      	add	r3, r1
 8016cb6:	009b      	lsls	r3, r3, #2
 8016cb8:	4413      	add	r3, r2
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d06b      	beq.n	8016d98 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	781b      	ldrb	r3, [r3, #0]
 8016cc4:	f083 0301 	eor.w	r3, r3, #1
 8016cc8:	b2db      	uxtb	r3, r3
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d011      	beq.n	8016cf2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d00d      	beq.n	8016cf2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	695a      	ldr	r2, [r3, #20]
 8016cda:	7d3b      	ldrb	r3, [r7, #20]
 8016cdc:	005b      	lsls	r3, r3, #1
 8016cde:	4413      	add	r3, r2
 8016ce0:	881b      	ldrh	r3, [r3, #0]
 8016ce2:	461a      	mov	r2, r3
 8016ce4:	7cfb      	ldrb	r3, [r7, #19]
 8016ce6:	fa42 f303 	asr.w	r3, r2, r3
 8016cea:	f003 0301 	and.w	r3, r3, #1
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d054      	beq.n	8016d9c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	785b      	ldrb	r3, [r3, #1]
 8016cf6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	689a      	ldr	r2, [r3, #8]
 8016cfc:	7d79      	ldrb	r1, [r7, #21]
 8016cfe:	7cfb      	ldrb	r3, [r7, #19]
 8016d00:	440b      	add	r3, r1
 8016d02:	4619      	mov	r1, r3
 8016d04:	460b      	mov	r3, r1
 8016d06:	005b      	lsls	r3, r3, #1
 8016d08:	440b      	add	r3, r1
 8016d0a:	009b      	lsls	r3, r3, #2
 8016d0c:	4413      	add	r3, r2
 8016d0e:	7a1b      	ldrb	r3, [r3, #8]
 8016d10:	f343 0303 	sbfx	r3, r3, #0, #4
 8016d14:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016d16:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	689a      	ldr	r2, [r3, #8]
 8016d1c:	7d79      	ldrb	r1, [r7, #21]
 8016d1e:	7cfb      	ldrb	r3, [r7, #19]
 8016d20:	440b      	add	r3, r1
 8016d22:	4619      	mov	r1, r3
 8016d24:	460b      	mov	r3, r1
 8016d26:	005b      	lsls	r3, r3, #1
 8016d28:	440b      	add	r3, r1
 8016d2a:	009b      	lsls	r3, r3, #2
 8016d2c:	4413      	add	r3, r2
 8016d2e:	7a1b      	ldrb	r3, [r3, #8]
 8016d30:	f343 1303 	sbfx	r3, r3, #4, #4
 8016d34:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016d36:	461a      	mov	r2, r3
 8016d38:	4621      	mov	r1, r4
 8016d3a:	f7ff fc0c 	bl	8016556 <RegionCommonValueInRange>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d02d      	beq.n	8016da0 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	68da      	ldr	r2, [r3, #12]
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	6899      	ldr	r1, [r3, #8]
 8016d4c:	7d78      	ldrb	r0, [r7, #21]
 8016d4e:	7cfb      	ldrb	r3, [r7, #19]
 8016d50:	4403      	add	r3, r0
 8016d52:	4618      	mov	r0, r3
 8016d54:	4603      	mov	r3, r0
 8016d56:	005b      	lsls	r3, r3, #1
 8016d58:	4403      	add	r3, r0
 8016d5a:	009b      	lsls	r3, r3, #2
 8016d5c:	440b      	add	r3, r1
 8016d5e:	7a5b      	ldrb	r3, [r3, #9]
 8016d60:	4619      	mov	r1, r3
 8016d62:	460b      	mov	r3, r1
 8016d64:	005b      	lsls	r3, r3, #1
 8016d66:	440b      	add	r3, r1
 8016d68:	00db      	lsls	r3, r3, #3
 8016d6a:	4413      	add	r3, r2
 8016d6c:	7d1b      	ldrb	r3, [r3, #20]
 8016d6e:	f083 0301 	eor.w	r3, r3, #1
 8016d72:	b2db      	uxtb	r3, r3
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d003      	beq.n	8016d80 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016d78:	7dbb      	ldrb	r3, [r7, #22]
 8016d7a:	3301      	adds	r3, #1
 8016d7c:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016d7e:	e010      	b.n	8016da2 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016d80:	7dfb      	ldrb	r3, [r7, #23]
 8016d82:	1c5a      	adds	r2, r3, #1
 8016d84:	75fa      	strb	r2, [r7, #23]
 8016d86:	461a      	mov	r2, r3
 8016d88:	68bb      	ldr	r3, [r7, #8]
 8016d8a:	4413      	add	r3, r2
 8016d8c:	7d79      	ldrb	r1, [r7, #21]
 8016d8e:	7cfa      	ldrb	r2, [r7, #19]
 8016d90:	440a      	add	r2, r1
 8016d92:	b2d2      	uxtb	r2, r2
 8016d94:	701a      	strb	r2, [r3, #0]
 8016d96:	e004      	b.n	8016da2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016d98:	bf00      	nop
 8016d9a:	e002      	b.n	8016da2 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016d9c:	bf00      	nop
 8016d9e:	e000      	b.n	8016da2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016da0:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016da2:	7cfb      	ldrb	r3, [r7, #19]
 8016da4:	3301      	adds	r3, #1
 8016da6:	74fb      	strb	r3, [r7, #19]
 8016da8:	7cfb      	ldrb	r3, [r7, #19]
 8016daa:	2b0f      	cmp	r3, #15
 8016dac:	f67f af6c 	bls.w	8016c88 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016db0:	7d7b      	ldrb	r3, [r7, #21]
 8016db2:	3310      	adds	r3, #16
 8016db4:	757b      	strb	r3, [r7, #21]
 8016db6:	7d3b      	ldrb	r3, [r7, #20]
 8016db8:	3301      	adds	r3, #1
 8016dba:	753b      	strb	r3, [r7, #20]
 8016dbc:	7d7b      	ldrb	r3, [r7, #21]
 8016dbe:	b29a      	uxth	r2, r3
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	8a1b      	ldrh	r3, [r3, #16]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	f4ff af5c 	bcc.w	8016c82 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	7dfa      	ldrb	r2, [r7, #23]
 8016dce:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016dd0:	683b      	ldr	r3, [r7, #0]
 8016dd2:	7dba      	ldrb	r2, [r7, #22]
 8016dd4:	701a      	strb	r2, [r3, #0]
}
 8016dd6:	bf00      	nop
 8016dd8:	371c      	adds	r7, #28
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd90      	pop	{r4, r7, pc}

08016dde <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016de0:	b08b      	sub	sp, #44	@ 0x2c
 8016de2:	af04      	add	r7, sp, #16
 8016de4:	60f8      	str	r0, [r7, #12]
 8016de6:	60b9      	str	r1, [r7, #8]
 8016de8:	607a      	str	r2, [r7, #4]
 8016dea:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	685b      	ldr	r3, [r3, #4]
 8016df0:	4618      	mov	r0, r3
 8016df2:	f005 fd79 	bl	801c8e8 <UTIL_TIMER_GetElapsedTime>
 8016df6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	681a      	ldr	r2, [r3, #0]
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	1ad2      	subs	r2, r2, r3
 8016e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e02:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e06:	2201      	movs	r2, #1
 8016e08:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016e0a:	683b      	ldr	r3, [r7, #0]
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	685b      	ldr	r3, [r3, #4]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d004      	beq.n	8016e22 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016e1c:	697a      	ldr	r2, [r7, #20]
 8016e1e:	429a      	cmp	r2, r3
 8016e20:	d32b      	bcc.n	8016e7a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016e22:	68bb      	ldr	r3, [r7, #8]
 8016e24:	2200      	movs	r2, #0
 8016e26:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	69db      	ldr	r3, [r3, #28]
 8016e2c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016e32:	68dd      	ldr	r5, [r3, #12]
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	7a5e      	ldrb	r6, [r3, #9]
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	7d1b      	ldrb	r3, [r3, #20]
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	6992      	ldr	r2, [r2, #24]
 8016e46:	9203      	str	r2, [sp, #12]
 8016e48:	68fa      	ldr	r2, [r7, #12]
 8016e4a:	f10d 0e04 	add.w	lr, sp, #4
 8016e4e:	320c      	adds	r2, #12
 8016e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e54:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016e58:	9300      	str	r3, [sp, #0]
 8016e5a:	4663      	mov	r3, ip
 8016e5c:	4632      	mov	r2, r6
 8016e5e:	4629      	mov	r1, r5
 8016e60:	4620      	mov	r0, r4
 8016e62:	f7ff fc49 	bl	80166f8 <RegionCommonUpdateBandTimeOff>
 8016e66:	4602      	mov	r2, r0
 8016e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e6a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	69d8      	ldr	r0, [r3, #28]
 8016e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e72:	683a      	ldr	r2, [r7, #0]
 8016e74:	6879      	ldr	r1, [r7, #4]
 8016e76:	f7ff fef4 	bl	8016c62 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	781b      	ldrb	r3, [r3, #0]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d004      	beq.n	8016e8c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e84:	2200      	movs	r2, #0
 8016e86:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016e88:	2300      	movs	r3, #0
 8016e8a:	e006      	b.n	8016e9a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d001      	beq.n	8016e98 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016e94:	230b      	movs	r3, #11
 8016e96:	e000      	b.n	8016e9a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016e98:	230c      	movs	r3, #12
    }
}
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	371c      	adds	r7, #28
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ea2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016ea2:	b5b0      	push	{r4, r5, r7, lr}
 8016ea4:	b086      	sub	sp, #24
 8016ea6:	af02      	add	r7, sp, #8
 8016ea8:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	781b      	ldrb	r3, [r3, #0]
 8016eae:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	f993 2000 	ldrsb.w	r2, [r3]
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d103      	bne.n	8016ec8 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016ec6:	e026      	b.n	8016f16 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016ec8:	7bfb      	ldrb	r3, [r7, #15]
 8016eca:	3b01      	subs	r3, #1
 8016ecc:	b2db      	uxtb	r3, r3
 8016ece:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016ed6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d019      	beq.n	8016f12 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	78d8      	ldrb	r0, [r3, #3]
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	6859      	ldr	r1, [r3, #4]
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016ef2:	687a      	ldr	r2, [r7, #4]
 8016ef4:	6892      	ldr	r2, [r2, #8]
 8016ef6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016efa:	9201      	str	r2, [sp, #4]
 8016efc:	9300      	str	r3, [sp, #0]
 8016efe:	462b      	mov	r3, r5
 8016f00:	4622      	mov	r2, r4
 8016f02:	f7ff fab6 	bl	8016472 <RegionCommonChanVerifyDr>
 8016f06:	4603      	mov	r3, r0
 8016f08:	f083 0301 	eor.w	r3, r3, #1
 8016f0c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d1da      	bne.n	8016ec8 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3710      	adds	r7, #16
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bdb0      	pop	{r4, r5, r7, pc}

08016f1e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016f1e:	b480      	push	{r7}
 8016f20:	b083      	sub	sp, #12
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	4603      	mov	r3, r0
 8016f26:	460a      	mov	r2, r1
 8016f28:	71fb      	strb	r3, [r7, #7]
 8016f2a:	4613      	mov	r3, r2
 8016f2c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016f2e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f36:	4293      	cmp	r3, r2
 8016f38:	bfb8      	it	lt
 8016f3a:	4613      	movlt	r3, r2
 8016f3c:	b25b      	sxtb	r3, r3
}
 8016f3e:	4618      	mov	r0, r3
 8016f40:	370c      	adds	r7, #12
 8016f42:	46bd      	mov	sp, r7
 8016f44:	bc80      	pop	{r7}
 8016f46:	4770      	bx	lr

08016f48 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016f48:	b480      	push	{r7}
 8016f4a:	b083      	sub	sp, #12
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
 8016f50:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	009b      	lsls	r3, r3, #2
 8016f56:	683a      	ldr	r2, [r7, #0]
 8016f58:	4413      	add	r3, r2
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	4a07      	ldr	r2, [pc, #28]	@ (8016f7c <RegionCommonGetBandwidth+0x34>)
 8016f5e:	4293      	cmp	r3, r2
 8016f60:	d004      	beq.n	8016f6c <RegionCommonGetBandwidth+0x24>
 8016f62:	4a07      	ldr	r2, [pc, #28]	@ (8016f80 <RegionCommonGetBandwidth+0x38>)
 8016f64:	4293      	cmp	r3, r2
 8016f66:	d003      	beq.n	8016f70 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016f68:	2300      	movs	r3, #0
 8016f6a:	e002      	b.n	8016f72 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016f6c:	2301      	movs	r3, #1
 8016f6e:	e000      	b.n	8016f72 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016f70:	2302      	movs	r3, #2
    }
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	370c      	adds	r7, #12
 8016f76:	46bd      	mov	sp, r7
 8016f78:	bc80      	pop	{r7}
 8016f7a:	4770      	bx	lr
 8016f7c:	0003d090 	.word	0x0003d090
 8016f80:	0007a120 	.word	0x0007a120

08016f84 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b086      	sub	sp, #24
 8016f88:	af04      	add	r7, sp, #16
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	6039      	str	r1, [r7, #0]
 8016f8e:	71fb      	strb	r3, [r7, #7]
 8016f90:	4613      	mov	r3, r2
 8016f92:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016f94:	79fb      	ldrb	r3, [r7, #7]
 8016f96:	2b05      	cmp	r3, #5
 8016f98:	d810      	bhi.n	8016fbc <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016f9a:	79fb      	ldrb	r3, [r7, #7]
 8016f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8016fdc <RegionCommonRxConfigPrint+0x58>)
 8016f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016fa2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016fa6:	9202      	str	r2, [sp, #8]
 8016fa8:	683a      	ldr	r2, [r7, #0]
 8016faa:	9201      	str	r2, [sp, #4]
 8016fac:	9300      	str	r3, [sp, #0]
 8016fae:	4b0c      	ldr	r3, [pc, #48]	@ (8016fe0 <RegionCommonRxConfigPrint+0x5c>)
 8016fb0:	2201      	movs	r2, #1
 8016fb2:	2100      	movs	r1, #0
 8016fb4:	2002      	movs	r0, #2
 8016fb6:	f005 fd75 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016fba:	e00a      	b.n	8016fd2 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016fbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016fc0:	9301      	str	r3, [sp, #4]
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	9300      	str	r3, [sp, #0]
 8016fc6:	4b07      	ldr	r3, [pc, #28]	@ (8016fe4 <RegionCommonRxConfigPrint+0x60>)
 8016fc8:	2201      	movs	r2, #1
 8016fca:	2100      	movs	r1, #0
 8016fcc:	2002      	movs	r0, #2
 8016fce:	f005 fd69 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 8016fd2:	bf00      	nop
 8016fd4:	3708      	adds	r7, #8
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}
 8016fda:	bf00      	nop
 8016fdc:	20000118 	.word	0x20000118
 8016fe0:	0801d8c8 	.word	0x0801d8c8
 8016fe4:	0801d8e8 	.word	0x0801d8e8

08016fe8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b084      	sub	sp, #16
 8016fec:	af02      	add	r7, sp, #8
 8016fee:	6078      	str	r0, [r7, #4]
 8016ff0:	460b      	mov	r3, r1
 8016ff2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ff8:	9301      	str	r3, [sp, #4]
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	9300      	str	r3, [sp, #0]
 8016ffe:	4b05      	ldr	r3, [pc, #20]	@ (8017014 <RegionCommonTxConfigPrint+0x2c>)
 8017000:	2201      	movs	r2, #1
 8017002:	2100      	movs	r1, #0
 8017004:	2002      	movs	r0, #2
 8017006:	f005 fd4d 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
}
 801700a:	bf00      	nop
 801700c:	3708      	adds	r7, #8
 801700e:	46bd      	mov	sp, r7
 8017010:	bd80      	pop	{r7, pc}
 8017012:	bf00      	nop
 8017014:	0801d904 	.word	0x0801d904

08017018 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b082      	sub	sp, #8
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017022:	4b2d      	ldr	r3, [pc, #180]	@ (80170d8 <VerifyRfFreq+0xc0>)
 8017024:	6a1b      	ldr	r3, [r3, #32]
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	4798      	blx	r3
 801702a:	4603      	mov	r3, r0
 801702c:	f083 0301 	eor.w	r3, r3, #1
 8017030:	b2db      	uxtb	r3, r3
 8017032:	2b00      	cmp	r3, #0
 8017034:	d001      	beq.n	801703a <VerifyRfFreq+0x22>
    {
        return false;
 8017036:	2300      	movs	r3, #0
 8017038:	e04a      	b.n	80170d0 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	4a27      	ldr	r2, [pc, #156]	@ (80170dc <VerifyRfFreq+0xc4>)
 801703e:	4293      	cmp	r3, r2
 8017040:	d307      	bcc.n	8017052 <VerifyRfFreq+0x3a>
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	4a26      	ldr	r2, [pc, #152]	@ (80170e0 <VerifyRfFreq+0xc8>)
 8017046:	4293      	cmp	r3, r2
 8017048:	d803      	bhi.n	8017052 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	2202      	movs	r2, #2
 801704e:	701a      	strb	r2, [r3, #0]
 8017050:	e03d      	b.n	80170ce <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	4a22      	ldr	r2, [pc, #136]	@ (80170e0 <VerifyRfFreq+0xc8>)
 8017056:	4293      	cmp	r3, r2
 8017058:	d907      	bls.n	801706a <VerifyRfFreq+0x52>
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	4a21      	ldr	r2, [pc, #132]	@ (80170e4 <VerifyRfFreq+0xcc>)
 801705e:	4293      	cmp	r3, r2
 8017060:	d803      	bhi.n	801706a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	2200      	movs	r2, #0
 8017066:	701a      	strb	r2, [r3, #0]
 8017068:	e031      	b.n	80170ce <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	4a1d      	ldr	r2, [pc, #116]	@ (80170e4 <VerifyRfFreq+0xcc>)
 801706e:	4293      	cmp	r3, r2
 8017070:	d907      	bls.n	8017082 <VerifyRfFreq+0x6a>
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	4a1c      	ldr	r2, [pc, #112]	@ (80170e8 <VerifyRfFreq+0xd0>)
 8017076:	4293      	cmp	r3, r2
 8017078:	d803      	bhi.n	8017082 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	2201      	movs	r2, #1
 801707e:	701a      	strb	r2, [r3, #0]
 8017080:	e025      	b.n	80170ce <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	4a19      	ldr	r2, [pc, #100]	@ (80170ec <VerifyRfFreq+0xd4>)
 8017086:	4293      	cmp	r3, r2
 8017088:	d907      	bls.n	801709a <VerifyRfFreq+0x82>
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	4a18      	ldr	r2, [pc, #96]	@ (80170f0 <VerifyRfFreq+0xd8>)
 801708e:	4293      	cmp	r3, r2
 8017090:	d803      	bhi.n	801709a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	2205      	movs	r2, #5
 8017096:	701a      	strb	r2, [r3, #0]
 8017098:	e019      	b.n	80170ce <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	4a15      	ldr	r2, [pc, #84]	@ (80170f4 <VerifyRfFreq+0xdc>)
 801709e:	4293      	cmp	r3, r2
 80170a0:	d907      	bls.n	80170b2 <VerifyRfFreq+0x9a>
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	4a14      	ldr	r2, [pc, #80]	@ (80170f8 <VerifyRfFreq+0xe0>)
 80170a6:	4293      	cmp	r3, r2
 80170a8:	d803      	bhi.n	80170b2 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	2203      	movs	r2, #3
 80170ae:	701a      	strb	r2, [r3, #0]
 80170b0:	e00d      	b.n	80170ce <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	4a11      	ldr	r2, [pc, #68]	@ (80170fc <VerifyRfFreq+0xe4>)
 80170b6:	4293      	cmp	r3, r2
 80170b8:	d307      	bcc.n	80170ca <VerifyRfFreq+0xb2>
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	4a10      	ldr	r2, [pc, #64]	@ (8017100 <VerifyRfFreq+0xe8>)
 80170be:	4293      	cmp	r3, r2
 80170c0:	d803      	bhi.n	80170ca <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	2204      	movs	r2, #4
 80170c6:	701a      	strb	r2, [r3, #0]
 80170c8:	e001      	b.n	80170ce <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80170ca:	2300      	movs	r3, #0
 80170cc:	e000      	b.n	80170d0 <VerifyRfFreq+0xb8>
    }
    return true;
 80170ce:	2301      	movs	r3, #1
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3708      	adds	r7, #8
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}
 80170d8:	0801df14 	.word	0x0801df14
 80170dc:	337055c0 	.word	0x337055c0
 80170e0:	338eda3f 	.word	0x338eda3f
 80170e4:	33bca100 	.word	0x33bca100
 80170e8:	33c5c8c0 	.word	0x33c5c8c0
 80170ec:	33c74f5f 	.word	0x33c74f5f
 80170f0:	33cef080 	.word	0x33cef080
 80170f4:	33d1fdbf 	.word	0x33d1fdbf
 80170f8:	33d5ce50 	.word	0x33d5ce50
 80170fc:	33d691a0 	.word	0x33d691a0
 8017100:	33db2580 	.word	0x33db2580

08017104 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017104:	b590      	push	{r4, r7, lr}
 8017106:	b08b      	sub	sp, #44	@ 0x2c
 8017108:	af04      	add	r7, sp, #16
 801710a:	4603      	mov	r3, r0
 801710c:	460a      	mov	r2, r1
 801710e:	71fb      	strb	r3, [r7, #7]
 8017110:	4613      	mov	r3, r2
 8017112:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8017114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017118:	4a1f      	ldr	r2, [pc, #124]	@ (8017198 <GetTimeOnAir+0x94>)
 801711a:	5cd3      	ldrb	r3, [r2, r3]
 801711c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801711e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017122:	491e      	ldr	r1, [pc, #120]	@ (801719c <GetTimeOnAir+0x98>)
 8017124:	4618      	mov	r0, r3
 8017126:	f7ff ff0f 	bl	8016f48 <RegionCommonGetBandwidth>
 801712a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801712c:	2300      	movs	r3, #0
 801712e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017134:	2b07      	cmp	r3, #7
 8017136:	d118      	bne.n	801716a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017138:	4b19      	ldr	r3, [pc, #100]	@ (80171a0 <GetTimeOnAir+0x9c>)
 801713a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801713c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017140:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017144:	fb02 f303 	mul.w	r3, r2, r3
 8017148:	4619      	mov	r1, r3
 801714a:	88bb      	ldrh	r3, [r7, #4]
 801714c:	b2db      	uxtb	r3, r3
 801714e:	2201      	movs	r2, #1
 8017150:	9203      	str	r2, [sp, #12]
 8017152:	9302      	str	r3, [sp, #8]
 8017154:	2300      	movs	r3, #0
 8017156:	9301      	str	r3, [sp, #4]
 8017158:	2305      	movs	r3, #5
 801715a:	9300      	str	r3, [sp, #0]
 801715c:	2300      	movs	r3, #0
 801715e:	460a      	mov	r2, r1
 8017160:	68f9      	ldr	r1, [r7, #12]
 8017162:	2000      	movs	r0, #0
 8017164:	47a0      	blx	r4
 8017166:	6178      	str	r0, [r7, #20]
 8017168:	e011      	b.n	801718e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801716a:	4b0d      	ldr	r3, [pc, #52]	@ (80171a0 <GetTimeOnAir+0x9c>)
 801716c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801716e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017172:	88bb      	ldrh	r3, [r7, #4]
 8017174:	b2db      	uxtb	r3, r3
 8017176:	2101      	movs	r1, #1
 8017178:	9103      	str	r1, [sp, #12]
 801717a:	9302      	str	r3, [sp, #8]
 801717c:	2300      	movs	r3, #0
 801717e:	9301      	str	r3, [sp, #4]
 8017180:	2308      	movs	r3, #8
 8017182:	9300      	str	r3, [sp, #0]
 8017184:	2301      	movs	r3, #1
 8017186:	68f9      	ldr	r1, [r7, #12]
 8017188:	2001      	movs	r0, #1
 801718a:	47a0      	blx	r4
 801718c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801718e:	697b      	ldr	r3, [r7, #20]
}
 8017190:	4618      	mov	r0, r3
 8017192:	371c      	adds	r7, #28
 8017194:	46bd      	mov	sp, r7
 8017196:	bd90      	pop	{r4, r7, pc}
 8017198:	0801dedc 	.word	0x0801dedc
 801719c:	0801dee4 	.word	0x0801dee4
 80171a0:	0801df14 	.word	0x0801df14

080171a4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b088      	sub	sp, #32
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80171ac:	2300      	movs	r3, #0
 80171ae:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	781b      	ldrb	r3, [r3, #0]
 80171b4:	3b01      	subs	r3, #1
 80171b6:	2b37      	cmp	r3, #55	@ 0x37
 80171b8:	f200 8122 	bhi.w	8017400 <RegionEU868GetPhyParam+0x25c>
 80171bc:	a201      	add	r2, pc, #4	@ (adr r2, 80171c4 <RegionEU868GetPhyParam+0x20>)
 80171be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171c2:	bf00      	nop
 80171c4:	080172a5 	.word	0x080172a5
 80171c8:	080172ab 	.word	0x080172ab
 80171cc:	08017401 	.word	0x08017401
 80171d0:	08017401 	.word	0x08017401
 80171d4:	08017401 	.word	0x08017401
 80171d8:	080172b1 	.word	0x080172b1
 80171dc:	08017401 	.word	0x08017401
 80171e0:	080172eb 	.word	0x080172eb
 80171e4:	08017401 	.word	0x08017401
 80171e8:	080172f1 	.word	0x080172f1
 80171ec:	080172f7 	.word	0x080172f7
 80171f0:	080172fd 	.word	0x080172fd
 80171f4:	08017303 	.word	0x08017303
 80171f8:	08017313 	.word	0x08017313
 80171fc:	08017323 	.word	0x08017323
 8017200:	08017329 	.word	0x08017329
 8017204:	08017331 	.word	0x08017331
 8017208:	08017339 	.word	0x08017339
 801720c:	08017341 	.word	0x08017341
 8017210:	08017349 	.word	0x08017349
 8017214:	08017351 	.word	0x08017351
 8017218:	08017365 	.word	0x08017365
 801721c:	0801736b 	.word	0x0801736b
 8017220:	08017371 	.word	0x08017371
 8017224:	08017377 	.word	0x08017377
 8017228:	08017383 	.word	0x08017383
 801722c:	0801738f 	.word	0x0801738f
 8017230:	08017395 	.word	0x08017395
 8017234:	0801739d 	.word	0x0801739d
 8017238:	080173a3 	.word	0x080173a3
 801723c:	080173a9 	.word	0x080173a9
 8017240:	080173b1 	.word	0x080173b1
 8017244:	080172b7 	.word	0x080172b7
 8017248:	08017401 	.word	0x08017401
 801724c:	08017401 	.word	0x08017401
 8017250:	08017401 	.word	0x08017401
 8017254:	08017401 	.word	0x08017401
 8017258:	08017401 	.word	0x08017401
 801725c:	08017401 	.word	0x08017401
 8017260:	08017401 	.word	0x08017401
 8017264:	08017401 	.word	0x08017401
 8017268:	08017401 	.word	0x08017401
 801726c:	08017401 	.word	0x08017401
 8017270:	08017401 	.word	0x08017401
 8017274:	08017401 	.word	0x08017401
 8017278:	08017401 	.word	0x08017401
 801727c:	080173b7 	.word	0x080173b7
 8017280:	080173bd 	.word	0x080173bd
 8017284:	080173cb 	.word	0x080173cb
 8017288:	08017401 	.word	0x08017401
 801728c:	08017401 	.word	0x08017401
 8017290:	080173d1 	.word	0x080173d1
 8017294:	080173d7 	.word	0x080173d7
 8017298:	08017401 	.word	0x08017401
 801729c:	080173dd 	.word	0x080173dd
 80172a0:	080173ed 	.word	0x080173ed
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80172a4:	2300      	movs	r3, #0
 80172a6:	61bb      	str	r3, [r7, #24]
            break;
 80172a8:	e0ab      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80172aa:	2300      	movs	r3, #0
 80172ac:	61bb      	str	r3, [r7, #24]
            break;
 80172ae:	e0a8      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80172b0:	2300      	movs	r3, #0
 80172b2:	61bb      	str	r3, [r7, #24]
            break;
 80172b4:	e0a5      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80172bc:	733b      	strb	r3, [r7, #12]
 80172be:	2307      	movs	r3, #7
 80172c0:	737b      	strb	r3, [r7, #13]
 80172c2:	2300      	movs	r3, #0
 80172c4:	73bb      	strb	r3, [r7, #14]
 80172c6:	2310      	movs	r3, #16
 80172c8:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80172ca:	4b51      	ldr	r3, [pc, #324]	@ (8017410 <RegionEU868GetPhyParam+0x26c>)
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80172d2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80172d4:	4b4e      	ldr	r3, [pc, #312]	@ (8017410 <RegionEU868GetPhyParam+0x26c>)
 80172d6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80172d8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80172da:	f107 030c 	add.w	r3, r7, #12
 80172de:	4618      	mov	r0, r3
 80172e0:	f7ff fddf 	bl	8016ea2 <RegionCommonGetNextLowerTxDr>
 80172e4:	4603      	mov	r3, r0
 80172e6:	61bb      	str	r3, [r7, #24]
            break;
 80172e8:	e08b      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80172ea:	2300      	movs	r3, #0
 80172ec:	61bb      	str	r3, [r7, #24]
            break;
 80172ee:	e088      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80172f0:	2300      	movs	r3, #0
 80172f2:	61bb      	str	r3, [r7, #24]
            break;
 80172f4:	e085      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80172f6:	2340      	movs	r3, #64	@ 0x40
 80172f8:	61bb      	str	r3, [r7, #24]
            break;
 80172fa:	e082      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80172fc:	2320      	movs	r3, #32
 80172fe:	61bb      	str	r3, [r7, #24]
            break;
 8017300:	e07f      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017308:	461a      	mov	r2, r3
 801730a:	4b42      	ldr	r3, [pc, #264]	@ (8017414 <RegionEU868GetPhyParam+0x270>)
 801730c:	5c9b      	ldrb	r3, [r3, r2]
 801730e:	61bb      	str	r3, [r7, #24]
            break;
 8017310:	e077      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017318:	461a      	mov	r2, r3
 801731a:	4b3f      	ldr	r3, [pc, #252]	@ (8017418 <RegionEU868GetPhyParam+0x274>)
 801731c:	5c9b      	ldrb	r3, [r3, r2]
 801731e:	61bb      	str	r3, [r7, #24]
            break;
 8017320:	e06f      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017322:	2301      	movs	r3, #1
 8017324:	61bb      	str	r3, [r7, #24]
            break;
 8017326:	e06c      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017328:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801732c:	61bb      	str	r3, [r7, #24]
            break;
 801732e:	e068      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017330:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017334:	61bb      	str	r3, [r7, #24]
            break;
 8017336:	e064      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017338:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801733c:	61bb      	str	r3, [r7, #24]
            break;
 801733e:	e060      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017340:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017344:	61bb      	str	r3, [r7, #24]
            break;
 8017346:	e05c      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017348:	f241 7370 	movw	r3, #6000	@ 0x1770
 801734c:	61bb      	str	r3, [r7, #24]
            break;
 801734e:	e058      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017350:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017354:	4831      	ldr	r0, [pc, #196]	@ (801741c <RegionEU868GetPhyParam+0x278>)
 8017356:	f001 f831 	bl	80183bc <randr>
 801735a:	4603      	mov	r3, r0
 801735c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8017360:	61bb      	str	r3, [r7, #24]
            break;
 8017362:	e04e      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017364:	2300      	movs	r3, #0
 8017366:	61bb      	str	r3, [r7, #24]
            break;
 8017368:	e04b      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801736a:	4b2d      	ldr	r3, [pc, #180]	@ (8017420 <RegionEU868GetPhyParam+0x27c>)
 801736c:	61bb      	str	r3, [r7, #24]
            break;
 801736e:	e048      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017370:	2300      	movs	r3, #0
 8017372:	61bb      	str	r3, [r7, #24]
            break;
 8017374:	e045      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017376:	4b26      	ldr	r3, [pc, #152]	@ (8017410 <RegionEU868GetPhyParam+0x26c>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801737e:	61bb      	str	r3, [r7, #24]
            break;
 8017380:	e03f      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017382:	4b23      	ldr	r3, [pc, #140]	@ (8017410 <RegionEU868GetPhyParam+0x26c>)
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801738a:	61bb      	str	r3, [r7, #24]
            break;
 801738c:	e039      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801738e:	2310      	movs	r3, #16
 8017390:	61bb      	str	r3, [r7, #24]
            break;
 8017392:	e036      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017394:	4b1e      	ldr	r3, [pc, #120]	@ (8017410 <RegionEU868GetPhyParam+0x26c>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	61bb      	str	r3, [r7, #24]
            break;
 801739a:	e032      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801739c:	2300      	movs	r3, #0
 801739e:	61bb      	str	r3, [r7, #24]
            break;
 80173a0:	e02f      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80173a2:	2300      	movs	r3, #0
 80173a4:	61bb      	str	r3, [r7, #24]
            break;
 80173a6:	e02c      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80173a8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80173ac:	61bb      	str	r3, [r7, #24]
            break;
 80173ae:	e028      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80173b0:	4b1c      	ldr	r3, [pc, #112]	@ (8017424 <RegionEU868GetPhyParam+0x280>)
 80173b2:	61bb      	str	r3, [r7, #24]
            break;
 80173b4:	e025      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80173b6:	4b1a      	ldr	r3, [pc, #104]	@ (8017420 <RegionEU868GetPhyParam+0x27c>)
 80173b8:	61bb      	str	r3, [r7, #24]
            break;
 80173ba:	e022      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80173bc:	2311      	movs	r3, #17
 80173be:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80173c0:	2301      	movs	r3, #1
 80173c2:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80173c4:	2300      	movs	r3, #0
 80173c6:	76bb      	strb	r3, [r7, #26]
            break;
 80173c8:	e01b      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80173ca:	2303      	movs	r3, #3
 80173cc:	61bb      	str	r3, [r7, #24]
            break;
 80173ce:	e018      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80173d0:	4b13      	ldr	r3, [pc, #76]	@ (8017420 <RegionEU868GetPhyParam+0x27c>)
 80173d2:	61bb      	str	r3, [r7, #24]
            break;
 80173d4:	e015      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80173d6:	2303      	movs	r3, #3
 80173d8:	61bb      	str	r3, [r7, #24]
            break;
 80173da:	e012      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80173e2:	461a      	mov	r2, r3
 80173e4:	4b10      	ldr	r3, [pc, #64]	@ (8017428 <RegionEU868GetPhyParam+0x284>)
 80173e6:	5c9b      	ldrb	r3, [r3, r2]
 80173e8:	61bb      	str	r3, [r7, #24]
            break;
 80173ea:	e00a      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80173f2:	490e      	ldr	r1, [pc, #56]	@ (801742c <RegionEU868GetPhyParam+0x288>)
 80173f4:	4618      	mov	r0, r3
 80173f6:	f7ff fda7 	bl	8016f48 <RegionCommonGetBandwidth>
 80173fa:	4603      	mov	r3, r0
 80173fc:	61bb      	str	r3, [r7, #24]
            break;
 80173fe:	e000      	b.n	8017402 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8017400:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8017402:	69bb      	ldr	r3, [r7, #24]
 8017404:	61fb      	str	r3, [r7, #28]
 8017406:	69fb      	ldr	r3, [r7, #28]
}
 8017408:	4618      	mov	r0, r3
 801740a:	3720      	adds	r7, #32
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}
 8017410:	20001b5c 	.word	0x20001b5c
 8017414:	0801df04 	.word	0x0801df04
 8017418:	0801df0c 	.word	0x0801df0c
 801741c:	fffffc18 	.word	0xfffffc18
 8017420:	33d3e608 	.word	0x33d3e608
 8017424:	4009999a 	.word	0x4009999a
 8017428:	0801dedc 	.word	0x0801dedc
 801742c:	0801dee4 	.word	0x0801dee4

08017430 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017430:	b590      	push	{r4, r7, lr}
 8017432:	b085      	sub	sp, #20
 8017434:	af02      	add	r7, sp, #8
 8017436:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017438:	4b11      	ldr	r3, [pc, #68]	@ (8017480 <RegionEU868SetBandTxDone+0x50>)
 801743a:	681a      	ldr	r2, [r3, #0]
 801743c:	4b11      	ldr	r3, [pc, #68]	@ (8017484 <RegionEU868SetBandTxDone+0x54>)
 801743e:	6819      	ldr	r1, [r3, #0]
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	781b      	ldrb	r3, [r3, #0]
 8017444:	4618      	mov	r0, r3
 8017446:	4603      	mov	r3, r0
 8017448:	005b      	lsls	r3, r3, #1
 801744a:	4403      	add	r3, r0
 801744c:	009b      	lsls	r3, r3, #2
 801744e:	440b      	add	r3, r1
 8017450:	3309      	adds	r3, #9
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	4619      	mov	r1, r3
 8017456:	460b      	mov	r3, r1
 8017458:	005b      	lsls	r3, r3, #1
 801745a:	440b      	add	r3, r1
 801745c:	00db      	lsls	r3, r3, #3
 801745e:	18d0      	adds	r0, r2, r3
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	6899      	ldr	r1, [r3, #8]
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	785c      	ldrb	r4, [r3, #1]
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	691a      	ldr	r2, [r3, #16]
 801746c:	9200      	str	r2, [sp, #0]
 801746e:	68db      	ldr	r3, [r3, #12]
 8017470:	4622      	mov	r2, r4
 8017472:	f7ff f913 	bl	801669c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8017476:	bf00      	nop
 8017478:	370c      	adds	r7, #12
 801747a:	46bd      	mov	sp, r7
 801747c:	bd90      	pop	{r4, r7, pc}
 801747e:	bf00      	nop
 8017480:	20001b60 	.word	0x20001b60
 8017484:	20001b5c 	.word	0x20001b5c

08017488 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b0b0      	sub	sp, #192	@ 0xc0
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017490:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017494:	2290      	movs	r2, #144	@ 0x90
 8017496:	2100      	movs	r1, #0
 8017498:	4618      	mov	r0, r3
 801749a:	f005 fd7b 	bl	801cf94 <memset>
 801749e:	2364      	movs	r3, #100	@ 0x64
 80174a0:	863b      	strh	r3, [r7, #48]	@ 0x30
 80174a2:	2364      	movs	r3, #100	@ 0x64
 80174a4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80174a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80174ac:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80174b0:	230a      	movs	r3, #10
 80174b2:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 80174b6:	2364      	movs	r3, #100	@ 0x64
 80174b8:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80174bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80174c0:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	7b1b      	ldrb	r3, [r3, #12]
 80174c8:	2b02      	cmp	r3, #2
 80174ca:	d05d      	beq.n	8017588 <RegionEU868InitDefaults+0x100>
 80174cc:	2b02      	cmp	r3, #2
 80174ce:	dc6a      	bgt.n	80175a6 <RegionEU868InitDefaults+0x11e>
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d002      	beq.n	80174da <RegionEU868InitDefaults+0x52>
 80174d4:	2b01      	cmp	r3, #1
 80174d6:	d03e      	beq.n	8017556 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80174d8:	e065      	b.n	80175a6 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d062      	beq.n	80175a8 <RegionEU868InitDefaults+0x120>
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	685b      	ldr	r3, [r3, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d05e      	beq.n	80175a8 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	685b      	ldr	r3, [r3, #4]
 80174ee:	4a30      	ldr	r2, [pc, #192]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 80174f0:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	689b      	ldr	r3, [r3, #8]
 80174f6:	4a2f      	ldr	r2, [pc, #188]	@ (80175b4 <RegionEU868InitDefaults+0x12c>)
 80174f8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80174fa:	4b2e      	ldr	r3, [pc, #184]	@ (80175b4 <RegionEU868InitDefaults+0x12c>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8017502:	2290      	movs	r2, #144	@ 0x90
 8017504:	4618      	mov	r0, r3
 8017506:	f000 ff70 	bl	80183ea <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801750a:	4b29      	ldr	r3, [pc, #164]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	4a2a      	ldr	r2, [pc, #168]	@ (80175b8 <RegionEU868InitDefaults+0x130>)
 8017510:	ca07      	ldmia	r2, {r0, r1, r2}
 8017512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017516:	4b26      	ldr	r3, [pc, #152]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	4a28      	ldr	r2, [pc, #160]	@ (80175bc <RegionEU868InitDefaults+0x134>)
 801751c:	330c      	adds	r3, #12
 801751e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017524:	4b22      	ldr	r3, [pc, #136]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	4a25      	ldr	r2, [pc, #148]	@ (80175c0 <RegionEU868InitDefaults+0x138>)
 801752a:	3318      	adds	r3, #24
 801752c:	ca07      	ldmia	r2, {r0, r1, r2}
 801752e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017532:	4b1f      	ldr	r3, [pc, #124]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	2207      	movs	r2, #7
 8017538:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801753c:	4b1c      	ldr	r3, [pc, #112]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017544:	4b1a      	ldr	r3, [pc, #104]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801754c:	2201      	movs	r2, #1
 801754e:	4619      	mov	r1, r3
 8017550:	f7ff f87e 	bl	8016650 <RegionCommonChanMaskCopy>
 8017554:	e028      	b.n	80175a8 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8017556:	4b16      	ldr	r3, [pc, #88]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	2200      	movs	r2, #0
 801755c:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801755e:	4b14      	ldr	r3, [pc, #80]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	2200      	movs	r2, #0
 8017564:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8017566:	4b12      	ldr	r3, [pc, #72]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	2200      	movs	r2, #0
 801756c:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801756e:	4b10      	ldr	r3, [pc, #64]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017576:	4b0e      	ldr	r3, [pc, #56]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801757e:	2201      	movs	r2, #1
 8017580:	4619      	mov	r1, r3
 8017582:	f7ff f865 	bl	8016650 <RegionCommonChanMaskCopy>
            break;
 8017586:	e00f      	b.n	80175a8 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8017588:	4b09      	ldr	r3, [pc, #36]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8017590:	4b07      	ldr	r3, [pc, #28]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8017598:	4b05      	ldr	r3, [pc, #20]	@ (80175b0 <RegionEU868InitDefaults+0x128>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	430a      	orrs	r2, r1
 801759e:	b292      	uxth	r2, r2
 80175a0:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 80175a4:	e000      	b.n	80175a8 <RegionEU868InitDefaults+0x120>
            break;
 80175a6:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80175a8:	37c0      	adds	r7, #192	@ 0xc0
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}
 80175ae:	bf00      	nop
 80175b0:	20001b5c 	.word	0x20001b5c
 80175b4:	20001b60 	.word	0x20001b60
 80175b8:	0801d920 	.word	0x0801d920
 80175bc:	0801d92c 	.word	0x0801d92c
 80175c0:	0801d938 	.word	0x0801d938

080175c4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b084      	sub	sp, #16
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
 80175cc:	460b      	mov	r3, r1
 80175ce:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80175d0:	78fb      	ldrb	r3, [r7, #3]
 80175d2:	2b0f      	cmp	r3, #15
 80175d4:	d86c      	bhi.n	80176b0 <RegionEU868Verify+0xec>
 80175d6:	a201      	add	r2, pc, #4	@ (adr r2, 80175dc <RegionEU868Verify+0x18>)
 80175d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175dc:	0801761d 	.word	0x0801761d
 80175e0:	080176b1 	.word	0x080176b1
 80175e4:	080176b1 	.word	0x080176b1
 80175e8:	080176b1 	.word	0x080176b1
 80175ec:	080176b1 	.word	0x080176b1
 80175f0:	08017635 	.word	0x08017635
 80175f4:	08017653 	.word	0x08017653
 80175f8:	08017671 	.word	0x08017671
 80175fc:	080176b1 	.word	0x080176b1
 8017600:	0801768f 	.word	0x0801768f
 8017604:	0801768f 	.word	0x0801768f
 8017608:	080176b1 	.word	0x080176b1
 801760c:	080176b1 	.word	0x080176b1
 8017610:	080176b1 	.word	0x080176b1
 8017614:	080176b1 	.word	0x080176b1
 8017618:	080176ad 	.word	0x080176ad
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 801761c:	2300      	movs	r3, #0
 801761e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	f107 020f 	add.w	r2, r7, #15
 8017628:	4611      	mov	r1, r2
 801762a:	4618      	mov	r0, r3
 801762c:	f7ff fcf4 	bl	8017018 <VerifyRfFreq>
 8017630:	4603      	mov	r3, r0
 8017632:	e03e      	b.n	80176b2 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	f993 3000 	ldrsb.w	r3, [r3]
 801763a:	2207      	movs	r2, #7
 801763c:	2100      	movs	r1, #0
 801763e:	4618      	mov	r0, r3
 8017640:	f7fe ff89 	bl	8016556 <RegionCommonValueInRange>
 8017644:	4603      	mov	r3, r0
 8017646:	2b00      	cmp	r3, #0
 8017648:	bf14      	ite	ne
 801764a:	2301      	movne	r3, #1
 801764c:	2300      	moveq	r3, #0
 801764e:	b2db      	uxtb	r3, r3
 8017650:	e02f      	b.n	80176b2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	f993 3000 	ldrsb.w	r3, [r3]
 8017658:	2205      	movs	r2, #5
 801765a:	2100      	movs	r1, #0
 801765c:	4618      	mov	r0, r3
 801765e:	f7fe ff7a 	bl	8016556 <RegionCommonValueInRange>
 8017662:	4603      	mov	r3, r0
 8017664:	2b00      	cmp	r3, #0
 8017666:	bf14      	ite	ne
 8017668:	2301      	movne	r3, #1
 801766a:	2300      	moveq	r3, #0
 801766c:	b2db      	uxtb	r3, r3
 801766e:	e020      	b.n	80176b2 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	f993 3000 	ldrsb.w	r3, [r3]
 8017676:	2207      	movs	r2, #7
 8017678:	2100      	movs	r1, #0
 801767a:	4618      	mov	r0, r3
 801767c:	f7fe ff6b 	bl	8016556 <RegionCommonValueInRange>
 8017680:	4603      	mov	r3, r0
 8017682:	2b00      	cmp	r3, #0
 8017684:	bf14      	ite	ne
 8017686:	2301      	movne	r3, #1
 8017688:	2300      	moveq	r3, #0
 801768a:	b2db      	uxtb	r3, r3
 801768c:	e011      	b.n	80176b2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f993 3000 	ldrsb.w	r3, [r3]
 8017694:	2207      	movs	r2, #7
 8017696:	2100      	movs	r1, #0
 8017698:	4618      	mov	r0, r3
 801769a:	f7fe ff5c 	bl	8016556 <RegionCommonValueInRange>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	bf14      	ite	ne
 80176a4:	2301      	movne	r3, #1
 80176a6:	2300      	moveq	r3, #0
 80176a8:	b2db      	uxtb	r3, r3
 80176aa:	e002      	b.n	80176b2 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80176ac:	2301      	movs	r3, #1
 80176ae:	e000      	b.n	80176b2 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80176b0:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80176b2:	4618      	mov	r0, r3
 80176b4:	3710      	adds	r7, #16
 80176b6:	46bd      	mov	sp, r7
 80176b8:	bd80      	pop	{r7, pc}
 80176ba:	bf00      	nop

080176bc <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b08a      	sub	sp, #40	@ 0x28
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80176c4:	2350      	movs	r3, #80	@ 0x50
 80176c6:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	7a1b      	ldrb	r3, [r3, #8]
 80176ce:	2b10      	cmp	r3, #16
 80176d0:	d162      	bne.n	8017798 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	685b      	ldr	r3, [r3, #4]
 80176d6:	330f      	adds	r3, #15
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d15e      	bne.n	801779c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80176de:	2300      	movs	r3, #0
 80176e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80176e4:	2303      	movs	r3, #3
 80176e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80176ea:	e050      	b.n	801778e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80176ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80176f0:	2b07      	cmp	r3, #7
 80176f2:	d824      	bhi.n	801773e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	685a      	ldr	r2, [r3, #4]
 80176f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80176fc:	4413      	add	r3, r2
 80176fe:	781b      	ldrb	r3, [r3, #0]
 8017700:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017702:	69ba      	ldr	r2, [r7, #24]
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6859      	ldr	r1, [r3, #4]
 8017708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801770c:	3301      	adds	r3, #1
 801770e:	440b      	add	r3, r1
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	021b      	lsls	r3, r3, #8
 8017714:	4313      	orrs	r3, r2
 8017716:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017718:	69ba      	ldr	r2, [r7, #24]
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	6859      	ldr	r1, [r3, #4]
 801771e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017722:	3302      	adds	r3, #2
 8017724:	440b      	add	r3, r1
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	041b      	lsls	r3, r3, #16
 801772a:	4313      	orrs	r3, r2
 801772c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801772e:	69bb      	ldr	r3, [r7, #24]
 8017730:	2264      	movs	r2, #100	@ 0x64
 8017732:	fb02 f303 	mul.w	r3, r2, r3
 8017736:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017738:	2300      	movs	r3, #0
 801773a:	61fb      	str	r3, [r7, #28]
 801773c:	e006      	b.n	801774c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801773e:	2300      	movs	r3, #0
 8017740:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8017742:	2300      	movs	r3, #0
 8017744:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8017748:	2300      	movs	r3, #0
 801774a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801774c:	69bb      	ldr	r3, [r7, #24]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d00b      	beq.n	801776a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8017752:	f107 0318 	add.w	r3, r7, #24
 8017756:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8017758:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801775c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801775e:	f107 0310 	add.w	r3, r7, #16
 8017762:	4618      	mov	r0, r3
 8017764:	f000 fd14 	bl	8018190 <RegionEU868ChannelAdd>
 8017768:	e007      	b.n	801777a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801776a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801776e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8017770:	f107 030c 	add.w	r3, r7, #12
 8017774:	4618      	mov	r0, r3
 8017776:	f000 fdad 	bl	80182d4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801777a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801777e:	3303      	adds	r3, #3
 8017780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017784:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017788:	3301      	adds	r3, #1
 801778a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801778e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017792:	2b0f      	cmp	r3, #15
 8017794:	d9aa      	bls.n	80176ec <RegionEU868ApplyCFList+0x30>
 8017796:	e002      	b.n	801779e <RegionEU868ApplyCFList+0xe2>
        return;
 8017798:	bf00      	nop
 801779a:	e000      	b.n	801779e <RegionEU868ApplyCFList+0xe2>
        return;
 801779c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801779e:	3728      	adds	r7, #40	@ 0x28
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}

080177a4 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b082      	sub	sp, #8
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	791b      	ldrb	r3, [r3, #4]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d002      	beq.n	80177ba <RegionEU868ChanMaskSet+0x16>
 80177b4:	2b01      	cmp	r3, #1
 80177b6:	d00b      	beq.n	80177d0 <RegionEU868ChanMaskSet+0x2c>
 80177b8:	e015      	b.n	80177e6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80177ba:	4b0e      	ldr	r3, [pc, #56]	@ (80177f4 <RegionEU868ChanMaskSet+0x50>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	2201      	movs	r2, #1
 80177c8:	4619      	mov	r1, r3
 80177ca:	f7fe ff41 	bl	8016650 <RegionCommonChanMaskCopy>
            break;
 80177ce:	e00c      	b.n	80177ea <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80177d0:	4b08      	ldr	r3, [pc, #32]	@ (80177f4 <RegionEU868ChanMaskSet+0x50>)
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	2201      	movs	r2, #1
 80177de:	4619      	mov	r1, r3
 80177e0:	f7fe ff36 	bl	8016650 <RegionCommonChanMaskCopy>
            break;
 80177e4:	e001      	b.n	80177ea <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80177e6:	2300      	movs	r3, #0
 80177e8:	e000      	b.n	80177ec <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80177ea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80177ec:	4618      	mov	r0, r3
 80177ee:	3708      	adds	r7, #8
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}
 80177f4:	20001b5c 	.word	0x20001b5c

080177f8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b088      	sub	sp, #32
 80177fc:	af02      	add	r7, sp, #8
 80177fe:	60ba      	str	r2, [r7, #8]
 8017800:	607b      	str	r3, [r7, #4]
 8017802:	4603      	mov	r3, r0
 8017804:	73fb      	strb	r3, [r7, #15]
 8017806:	460b      	mov	r3, r1
 8017808:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801780a:	2300      	movs	r3, #0
 801780c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801780e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017812:	2b07      	cmp	r3, #7
 8017814:	bfa8      	it	ge
 8017816:	2307      	movge	r3, #7
 8017818:	b25a      	sxtb	r2, r3
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017824:	491e      	ldr	r1, [pc, #120]	@ (80178a0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017826:	4618      	mov	r0, r3
 8017828:	f7ff fb8e 	bl	8016f48 <RegionCommonGetBandwidth>
 801782c:	4603      	mov	r3, r0
 801782e:	b2da      	uxtb	r2, r3
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801783a:	2b07      	cmp	r3, #7
 801783c:	d10a      	bne.n	8017854 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017844:	461a      	mov	r2, r3
 8017846:	4b17      	ldr	r3, [pc, #92]	@ (80178a4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8017848:	5c9b      	ldrb	r3, [r3, r2]
 801784a:	4618      	mov	r0, r3
 801784c:	f7ff f910 	bl	8016a70 <RegionCommonComputeSymbolTimeFsk>
 8017850:	6178      	str	r0, [r7, #20]
 8017852:	e011      	b.n	8017878 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801785a:	461a      	mov	r2, r3
 801785c:	4b11      	ldr	r3, [pc, #68]	@ (80178a4 <RegionEU868ComputeRxWindowParameters+0xac>)
 801785e:	5c9a      	ldrb	r2, [r3, r2]
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017866:	4619      	mov	r1, r3
 8017868:	4b0d      	ldr	r3, [pc, #52]	@ (80178a0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801786a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801786e:	4619      	mov	r1, r3
 8017870:	4610      	mov	r0, r2
 8017872:	f7ff f8e7 	bl	8016a44 <RegionCommonComputeSymbolTimeLoRa>
 8017876:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017878:	4b0b      	ldr	r3, [pc, #44]	@ (80178a8 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801787a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801787c:	4798      	blx	r3
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	3308      	adds	r3, #8
 8017882:	687a      	ldr	r2, [r7, #4]
 8017884:	320c      	adds	r2, #12
 8017886:	7bb9      	ldrb	r1, [r7, #14]
 8017888:	9201      	str	r2, [sp, #4]
 801788a:	9300      	str	r3, [sp, #0]
 801788c:	4603      	mov	r3, r0
 801788e:	68ba      	ldr	r2, [r7, #8]
 8017890:	6978      	ldr	r0, [r7, #20]
 8017892:	f7ff f8fd 	bl	8016a90 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8017896:	bf00      	nop
 8017898:	3718      	adds	r7, #24
 801789a:	46bd      	mov	sp, r7
 801789c:	bd80      	pop	{r7, pc}
 801789e:	bf00      	nop
 80178a0:	0801dee4 	.word	0x0801dee4
 80178a4:	0801dedc 	.word	0x0801dedc
 80178a8:	0801df14 	.word	0x0801df14

080178ac <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80178ac:	b5b0      	push	{r4, r5, r7, lr}
 80178ae:	b090      	sub	sp, #64	@ 0x40
 80178b0:	af0a      	add	r7, sp, #40	@ 0x28
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	785b      	ldrb	r3, [r3, #1]
 80178ba:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80178bc:	2300      	movs	r3, #0
 80178be:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80178c0:	2300      	movs	r3, #0
 80178c2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	685b      	ldr	r3, [r3, #4]
 80178c8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80178ca:	4b5a      	ldr	r3, [pc, #360]	@ (8017a34 <RegionEU868RxConfig+0x188>)
 80178cc:	685b      	ldr	r3, [r3, #4]
 80178ce:	4798      	blx	r3
 80178d0:	4603      	mov	r3, r0
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d001      	beq.n	80178da <RegionEU868RxConfig+0x2e>
    {
        return false;
 80178d6:	2300      	movs	r3, #0
 80178d8:	e0a8      	b.n	8017a2c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	7cdb      	ldrb	r3, [r3, #19]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d126      	bne.n	8017930 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80178e2:	4b55      	ldr	r3, [pc, #340]	@ (8017a38 <RegionEU868RxConfig+0x18c>)
 80178e4:	681a      	ldr	r2, [r3, #0]
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	781b      	ldrb	r3, [r3, #0]
 80178ea:	4619      	mov	r1, r3
 80178ec:	460b      	mov	r3, r1
 80178ee:	005b      	lsls	r3, r3, #1
 80178f0:	440b      	add	r3, r1
 80178f2:	009b      	lsls	r3, r3, #2
 80178f4:	4413      	add	r3, r2
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80178fa:	4b4f      	ldr	r3, [pc, #316]	@ (8017a38 <RegionEU868RxConfig+0x18c>)
 80178fc:	681a      	ldr	r2, [r3, #0]
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	781b      	ldrb	r3, [r3, #0]
 8017902:	4619      	mov	r1, r3
 8017904:	460b      	mov	r3, r1
 8017906:	005b      	lsls	r3, r3, #1
 8017908:	440b      	add	r3, r1
 801790a:	009b      	lsls	r3, r3, #2
 801790c:	4413      	add	r3, r2
 801790e:	3304      	adds	r3, #4
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d00c      	beq.n	8017930 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8017916:	4b48      	ldr	r3, [pc, #288]	@ (8017a38 <RegionEU868RxConfig+0x18c>)
 8017918:	681a      	ldr	r2, [r3, #0]
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	781b      	ldrb	r3, [r3, #0]
 801791e:	4619      	mov	r1, r3
 8017920:	460b      	mov	r3, r1
 8017922:	005b      	lsls	r3, r3, #1
 8017924:	440b      	add	r3, r1
 8017926:	009b      	lsls	r3, r3, #2
 8017928:	4413      	add	r3, r2
 801792a:	3304      	adds	r3, #4
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8017930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017934:	4a41      	ldr	r2, [pc, #260]	@ (8017a3c <RegionEU868RxConfig+0x190>)
 8017936:	5cd3      	ldrb	r3, [r2, r3]
 8017938:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801793a:	4b3e      	ldr	r3, [pc, #248]	@ (8017a34 <RegionEU868RxConfig+0x188>)
 801793c:	68db      	ldr	r3, [r3, #12]
 801793e:	6938      	ldr	r0, [r7, #16]
 8017940:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8017942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017946:	2b07      	cmp	r3, #7
 8017948:	d128      	bne.n	801799c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801794a:	2300      	movs	r3, #0
 801794c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801794e:	4b39      	ldr	r3, [pc, #228]	@ (8017a34 <RegionEU868RxConfig+0x188>)
 8017950:	699c      	ldr	r4, [r3, #24]
 8017952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017956:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801795a:	fb02 f303 	mul.w	r3, r2, r3
 801795e:	4619      	mov	r1, r3
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	689b      	ldr	r3, [r3, #8]
 8017964:	b29b      	uxth	r3, r3
 8017966:	687a      	ldr	r2, [r7, #4]
 8017968:	7c92      	ldrb	r2, [r2, #18]
 801796a:	7df8      	ldrb	r0, [r7, #23]
 801796c:	9209      	str	r2, [sp, #36]	@ 0x24
 801796e:	2200      	movs	r2, #0
 8017970:	9208      	str	r2, [sp, #32]
 8017972:	2200      	movs	r2, #0
 8017974:	9207      	str	r2, [sp, #28]
 8017976:	2200      	movs	r2, #0
 8017978:	9206      	str	r2, [sp, #24]
 801797a:	2201      	movs	r2, #1
 801797c:	9205      	str	r2, [sp, #20]
 801797e:	2200      	movs	r2, #0
 8017980:	9204      	str	r2, [sp, #16]
 8017982:	2200      	movs	r2, #0
 8017984:	9203      	str	r2, [sp, #12]
 8017986:	9302      	str	r3, [sp, #8]
 8017988:	2305      	movs	r3, #5
 801798a:	9301      	str	r3, [sp, #4]
 801798c:	4b2c      	ldr	r3, [pc, #176]	@ (8017a40 <RegionEU868RxConfig+0x194>)
 801798e:	9300      	str	r3, [sp, #0]
 8017990:	2300      	movs	r3, #0
 8017992:	460a      	mov	r2, r1
 8017994:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8017998:	47a0      	blx	r4
 801799a:	e024      	b.n	80179e6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801799c:	2301      	movs	r3, #1
 801799e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80179a0:	4b24      	ldr	r3, [pc, #144]	@ (8017a34 <RegionEU868RxConfig+0x188>)
 80179a2:	699c      	ldr	r4, [r3, #24]
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	789b      	ldrb	r3, [r3, #2]
 80179a8:	461d      	mov	r5, r3
 80179aa:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	689b      	ldr	r3, [r3, #8]
 80179b2:	b29b      	uxth	r3, r3
 80179b4:	687a      	ldr	r2, [r7, #4]
 80179b6:	7c92      	ldrb	r2, [r2, #18]
 80179b8:	7df8      	ldrb	r0, [r7, #23]
 80179ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80179bc:	2201      	movs	r2, #1
 80179be:	9208      	str	r2, [sp, #32]
 80179c0:	2200      	movs	r2, #0
 80179c2:	9207      	str	r2, [sp, #28]
 80179c4:	2200      	movs	r2, #0
 80179c6:	9206      	str	r2, [sp, #24]
 80179c8:	2200      	movs	r2, #0
 80179ca:	9205      	str	r2, [sp, #20]
 80179cc:	2200      	movs	r2, #0
 80179ce:	9204      	str	r2, [sp, #16]
 80179d0:	2200      	movs	r2, #0
 80179d2:	9203      	str	r2, [sp, #12]
 80179d4:	9302      	str	r3, [sp, #8]
 80179d6:	2308      	movs	r3, #8
 80179d8:	9301      	str	r3, [sp, #4]
 80179da:	2300      	movs	r3, #0
 80179dc:	9300      	str	r3, [sp, #0]
 80179de:	2301      	movs	r3, #1
 80179e0:	460a      	mov	r2, r1
 80179e2:	4629      	mov	r1, r5
 80179e4:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	7c5b      	ldrb	r3, [r3, #17]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d005      	beq.n	80179fa <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80179ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179f2:	4a14      	ldr	r2, [pc, #80]	@ (8017a44 <RegionEU868RxConfig+0x198>)
 80179f4:	5cd3      	ldrb	r3, [r2, r3]
 80179f6:	75bb      	strb	r3, [r7, #22]
 80179f8:	e004      	b.n	8017a04 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80179fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179fe:	4a12      	ldr	r2, [pc, #72]	@ (8017a48 <RegionEU868RxConfig+0x19c>)
 8017a00:	5cd3      	ldrb	r3, [r2, r3]
 8017a02:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017a04:	4b0b      	ldr	r3, [pc, #44]	@ (8017a34 <RegionEU868RxConfig+0x188>)
 8017a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017a08:	7dba      	ldrb	r2, [r7, #22]
 8017a0a:	320d      	adds	r2, #13
 8017a0c:	b2d1      	uxtb	r1, r2
 8017a0e:	7dfa      	ldrb	r2, [r7, #23]
 8017a10:	4610      	mov	r0, r2
 8017a12:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	7cdb      	ldrb	r3, [r3, #19]
 8017a18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017a1c:	6939      	ldr	r1, [r7, #16]
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f7ff fab0 	bl	8016f84 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8017a24:	683b      	ldr	r3, [r7, #0]
 8017a26:	7bfa      	ldrb	r2, [r7, #15]
 8017a28:	701a      	strb	r2, [r3, #0]
    return true;
 8017a2a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3718      	adds	r7, #24
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bdb0      	pop	{r4, r5, r7, pc}
 8017a34:	0801df14 	.word	0x0801df14
 8017a38:	20001b5c 	.word	0x20001b5c
 8017a3c:	0801dedc 	.word	0x0801dedc
 8017a40:	00014585 	.word	0x00014585
 8017a44:	0801df0c 	.word	0x0801df0c
 8017a48:	0801df04 	.word	0x0801df04

08017a4c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017a4c:	b590      	push	{r4, r7, lr}
 8017a4e:	b093      	sub	sp, #76	@ 0x4c
 8017a50:	af0a      	add	r7, sp, #40	@ 0x28
 8017a52:	60f8      	str	r0, [r7, #12]
 8017a54:	60b9      	str	r1, [r7, #8]
 8017a56:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017a5e:	461a      	mov	r2, r3
 8017a60:	4b5d      	ldr	r3, [pc, #372]	@ (8017bd8 <RegionEU868TxConfig+0x18c>)
 8017a62:	5c9b      	ldrb	r3, [r3, r2]
 8017a64:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8017bdc <RegionEU868TxConfig+0x190>)
 8017a6e:	681a      	ldr	r2, [r3, #0]
 8017a70:	4b5b      	ldr	r3, [pc, #364]	@ (8017be0 <RegionEU868TxConfig+0x194>)
 8017a72:	6819      	ldr	r1, [r3, #0]
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	781b      	ldrb	r3, [r3, #0]
 8017a78:	461c      	mov	r4, r3
 8017a7a:	4623      	mov	r3, r4
 8017a7c:	005b      	lsls	r3, r3, #1
 8017a7e:	4423      	add	r3, r4
 8017a80:	009b      	lsls	r3, r3, #2
 8017a82:	440b      	add	r3, r1
 8017a84:	3309      	adds	r3, #9
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	4619      	mov	r1, r3
 8017a8a:	460b      	mov	r3, r1
 8017a8c:	005b      	lsls	r3, r3, #1
 8017a8e:	440b      	add	r3, r1
 8017a90:	00db      	lsls	r3, r3, #3
 8017a92:	4413      	add	r3, r2
 8017a94:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017a98:	4619      	mov	r1, r3
 8017a9a:	f7ff fa40 	bl	8016f1e <RegionCommonLimitTxPower>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017aa8:	494e      	ldr	r1, [pc, #312]	@ (8017be4 <RegionEU868TxConfig+0x198>)
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f7ff fa4c 	bl	8016f48 <RegionCommonGetBandwidth>
 8017ab0:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	6859      	ldr	r1, [r3, #4]
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	689a      	ldr	r2, [r3, #8]
 8017abe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f7ff f89c 	bl	8016c00 <RegionCommonComputeTxPower>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017acc:	4b46      	ldr	r3, [pc, #280]	@ (8017be8 <RegionEU868TxConfig+0x19c>)
 8017ace:	68da      	ldr	r2, [r3, #12]
 8017ad0:	4b43      	ldr	r3, [pc, #268]	@ (8017be0 <RegionEU868TxConfig+0x194>)
 8017ad2:	6819      	ldr	r1, [r3, #0]
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	781b      	ldrb	r3, [r3, #0]
 8017ad8:	4618      	mov	r0, r3
 8017ada:	4603      	mov	r3, r0
 8017adc:	005b      	lsls	r3, r3, #1
 8017ade:	4403      	add	r3, r0
 8017ae0:	009b      	lsls	r3, r3, #2
 8017ae2:	440b      	add	r3, r1
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017af0:	2b07      	cmp	r3, #7
 8017af2:	d124      	bne.n	8017b3e <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017af4:	2300      	movs	r3, #0
 8017af6:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017af8:	4b3b      	ldr	r3, [pc, #236]	@ (8017be8 <RegionEU868TxConfig+0x19c>)
 8017afa:	69dc      	ldr	r4, [r3, #28]
 8017afc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017b00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017b04:	fb02 f303 	mul.w	r3, r2, r3
 8017b08:	461a      	mov	r2, r3
 8017b0a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017b0e:	7ff8      	ldrb	r0, [r7, #31]
 8017b10:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8017b14:	9308      	str	r3, [sp, #32]
 8017b16:	2300      	movs	r3, #0
 8017b18:	9307      	str	r3, [sp, #28]
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	9306      	str	r3, [sp, #24]
 8017b1e:	2300      	movs	r3, #0
 8017b20:	9305      	str	r3, [sp, #20]
 8017b22:	2301      	movs	r3, #1
 8017b24:	9304      	str	r3, [sp, #16]
 8017b26:	2300      	movs	r3, #0
 8017b28:	9303      	str	r3, [sp, #12]
 8017b2a:	2305      	movs	r3, #5
 8017b2c:	9302      	str	r3, [sp, #8]
 8017b2e:	2300      	movs	r3, #0
 8017b30:	9301      	str	r3, [sp, #4]
 8017b32:	9200      	str	r2, [sp, #0]
 8017b34:	69bb      	ldr	r3, [r7, #24]
 8017b36:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8017b3a:	47a0      	blx	r4
 8017b3c:	e01d      	b.n	8017b7a <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8017b3e:	2301      	movs	r3, #1
 8017b40:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017b42:	4b29      	ldr	r3, [pc, #164]	@ (8017be8 <RegionEU868TxConfig+0x19c>)
 8017b44:	69dc      	ldr	r4, [r3, #28]
 8017b46:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017b4a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017b4e:	7ff8      	ldrb	r0, [r7, #31]
 8017b50:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8017b54:	9208      	str	r2, [sp, #32]
 8017b56:	2200      	movs	r2, #0
 8017b58:	9207      	str	r2, [sp, #28]
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	9206      	str	r2, [sp, #24]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	9205      	str	r2, [sp, #20]
 8017b62:	2201      	movs	r2, #1
 8017b64:	9204      	str	r2, [sp, #16]
 8017b66:	2200      	movs	r2, #0
 8017b68:	9203      	str	r2, [sp, #12]
 8017b6a:	2208      	movs	r2, #8
 8017b6c:	9202      	str	r2, [sp, #8]
 8017b6e:	2201      	movs	r2, #1
 8017b70:	9201      	str	r2, [sp, #4]
 8017b72:	9300      	str	r3, [sp, #0]
 8017b74:	69bb      	ldr	r3, [r7, #24]
 8017b76:	2200      	movs	r2, #0
 8017b78:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017b7a:	4b19      	ldr	r3, [pc, #100]	@ (8017be0 <RegionEU868TxConfig+0x194>)
 8017b7c:	681a      	ldr	r2, [r3, #0]
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	781b      	ldrb	r3, [r3, #0]
 8017b82:	4619      	mov	r1, r3
 8017b84:	460b      	mov	r3, r1
 8017b86:	005b      	lsls	r3, r3, #1
 8017b88:	440b      	add	r3, r1
 8017b8a:	009b      	lsls	r3, r3, #2
 8017b8c:	4413      	add	r3, r2
 8017b8e:	681a      	ldr	r2, [r3, #0]
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b96:	4619      	mov	r1, r3
 8017b98:	4610      	mov	r0, r2
 8017b9a:	f7ff fa25 	bl	8016fe8 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	899b      	ldrh	r3, [r3, #12]
 8017ba8:	4619      	mov	r1, r3
 8017baa:	4610      	mov	r0, r2
 8017bac:	f7ff faaa 	bl	8017104 <GetTimeOnAir>
 8017bb0:	4602      	mov	r2, r0
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8017bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8017be8 <RegionEU868TxConfig+0x19c>)
 8017bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017bba:	68fa      	ldr	r2, [r7, #12]
 8017bbc:	8992      	ldrh	r2, [r2, #12]
 8017bbe:	b2d1      	uxtb	r1, r2
 8017bc0:	7ffa      	ldrb	r2, [r7, #31]
 8017bc2:	4610      	mov	r0, r2
 8017bc4:	4798      	blx	r3

    *txPower = txPowerLimited;
 8017bc6:	68bb      	ldr	r3, [r7, #8]
 8017bc8:	7f7a      	ldrb	r2, [r7, #29]
 8017bca:	701a      	strb	r2, [r3, #0]
    return true;
 8017bcc:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017bce:	4618      	mov	r0, r3
 8017bd0:	3724      	adds	r7, #36	@ 0x24
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd90      	pop	{r4, r7, pc}
 8017bd6:	bf00      	nop
 8017bd8:	0801dedc 	.word	0x0801dedc
 8017bdc:	20001b60 	.word	0x20001b60
 8017be0:	20001b5c 	.word	0x20001b5c
 8017be4:	0801dee4 	.word	0x0801dee4
 8017be8:	0801df14 	.word	0x0801df14

08017bec <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017bec:	b590      	push	{r4, r7, lr}
 8017bee:	b093      	sub	sp, #76	@ 0x4c
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	60f8      	str	r0, [r7, #12]
 8017bf4:	60b9      	str	r1, [r7, #8]
 8017bf6:	607a      	str	r2, [r7, #4]
 8017bf8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017bfa:	2307      	movs	r3, #7
 8017bfc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017c00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017c04:	2200      	movs	r2, #0
 8017c06:	601a      	str	r2, [r3, #0]
 8017c08:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8017c10:	2300      	movs	r3, #0
 8017c12:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8017c16:	2300      	movs	r3, #0
 8017c18:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017c1a:	e085      	b.n	8017d28 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	685a      	ldr	r2, [r3, #4]
 8017c20:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8017c24:	4413      	add	r3, r2
 8017c26:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8017c2a:	4611      	mov	r1, r2
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7fe fe2f 	bl	8016890 <RegionCommonParseLinkAdrReq>
 8017c32:	4603      	mov	r3, r0
 8017c34:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8017c38:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d07b      	beq.n	8017d38 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017c40:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017c44:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017c48:	4413      	add	r3, r2
 8017c4a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017c4e:	2307      	movs	r3, #7
 8017c50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017c54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017c58:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8017c5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d109      	bne.n	8017c76 <RegionEU868LinkAdrReq+0x8a>
 8017c62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d106      	bne.n	8017c76 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017c68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017c6c:	f023 0301 	bic.w	r3, r3, #1
 8017c70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8017c74:	e058      	b.n	8017d28 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017c76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d003      	beq.n	8017c86 <RegionEU868LinkAdrReq+0x9a>
 8017c7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017c82:	2b05      	cmp	r3, #5
 8017c84:	d903      	bls.n	8017c8e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8017c86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017c8a:	2b06      	cmp	r3, #6
 8017c8c:	d906      	bls.n	8017c9c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8017c8e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017c92:	f023 0301 	bic.w	r3, r3, #1
 8017c96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8017c9a:	e045      	b.n	8017d28 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8017ca2:	e03d      	b.n	8017d20 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017ca4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017ca8:	2b06      	cmp	r3, #6
 8017caa:	d118      	bne.n	8017cde <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8017cac:	4b5f      	ldr	r3, [pc, #380]	@ (8017e2c <RegionEU868LinkAdrReq+0x240>)
 8017cae:	6819      	ldr	r1, [r3, #0]
 8017cb0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8017cb4:	4613      	mov	r3, r2
 8017cb6:	005b      	lsls	r3, r3, #1
 8017cb8:	4413      	add	r3, r2
 8017cba:	009b      	lsls	r3, r3, #2
 8017cbc:	440b      	add	r3, r1
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d028      	beq.n	8017d16 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8017cc4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017cc8:	2201      	movs	r2, #1
 8017cca:	fa02 f303 	lsl.w	r3, r2, r3
 8017cce:	b21a      	sxth	r2, r3
 8017cd0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017cd2:	b21b      	sxth	r3, r3
 8017cd4:	4313      	orrs	r3, r2
 8017cd6:	b21b      	sxth	r3, r3
 8017cd8:	b29b      	uxth	r3, r3
 8017cda:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8017cdc:	e01b      	b.n	8017d16 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017cde:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017ce0:	461a      	mov	r2, r3
 8017ce2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017ce6:	fa42 f303 	asr.w	r3, r2, r3
 8017cea:	f003 0301 	and.w	r3, r3, #1
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d011      	beq.n	8017d16 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8017cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8017e2c <RegionEU868LinkAdrReq+0x240>)
 8017cf4:	6819      	ldr	r1, [r3, #0]
 8017cf6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8017cfa:	4613      	mov	r3, r2
 8017cfc:	005b      	lsls	r3, r3, #1
 8017cfe:	4413      	add	r3, r2
 8017d00:	009b      	lsls	r3, r3, #2
 8017d02:	440b      	add	r3, r1
 8017d04:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d105      	bne.n	8017d16 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8017d0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017d0e:	f023 0301 	bic.w	r3, r3, #1
 8017d12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017d16:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017d1a:	3301      	adds	r3, #1
 8017d1c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8017d20:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017d24:	2b0f      	cmp	r3, #15
 8017d26:	d9bd      	bls.n	8017ca4 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	7a1b      	ldrb	r3, [r3, #8]
 8017d2c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017d30:	429a      	cmp	r2, r3
 8017d32:	f4ff af73 	bcc.w	8017c1c <RegionEU868LinkAdrReq+0x30>
 8017d36:	e000      	b.n	8017d3a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017d38:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017d3a:	2302      	movs	r3, #2
 8017d3c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	7a5b      	ldrb	r3, [r3, #9]
 8017d44:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017d48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	f7ff fa29 	bl	80171a4 <RegionEU868GetPhyParam>
 8017d52:	4603      	mov	r3, r0
 8017d54:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8017d56:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017d5a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	7a9b      	ldrb	r3, [r3, #10]
 8017d60:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017d62:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8017d66:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017d68:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8017d6c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017d6e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017d72:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017d7a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017d82:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	7b5b      	ldrb	r3, [r3, #13]
 8017d88:	b25b      	sxtb	r3, r3
 8017d8a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8017d8c:	2310      	movs	r3, #16
 8017d8e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017d90:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8017d94:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d98:	b25b      	sxtb	r3, r3
 8017d9a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8017d9e:	2307      	movs	r3, #7
 8017da0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017da4:	4b21      	ldr	r3, [pc, #132]	@ (8017e2c <RegionEU868LinkAdrReq+0x240>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8017daa:	2307      	movs	r3, #7
 8017dac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8017db0:	2300      	movs	r3, #0
 8017db2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017dbc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8017dc0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017dc4:	1c9a      	adds	r2, r3, #2
 8017dc6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017dca:	1c59      	adds	r1, r3, #1
 8017dcc:	f107 0010 	add.w	r0, r7, #16
 8017dd0:	4623      	mov	r3, r4
 8017dd2:	f7fe fdaf 	bl	8016934 <RegionCommonLinkAdrReqVerifyParams>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017ddc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017de0:	2b07      	cmp	r3, #7
 8017de2:	d10d      	bne.n	8017e00 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8017de4:	4b11      	ldr	r3, [pc, #68]	@ (8017e2c <RegionEU868LinkAdrReq+0x240>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017dec:	220c      	movs	r2, #12
 8017dee:	2100      	movs	r1, #0
 8017df0:	4618      	mov	r0, r3
 8017df2:	f000 fb35 	bl	8018460 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8017df6:	4b0d      	ldr	r3, [pc, #52]	@ (8017e2c <RegionEU868LinkAdrReq+0x240>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017dfc:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017e00:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017e08:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017e10:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017e14:	683b      	ldr	r3, [r7, #0]
 8017e16:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017e1a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017e1e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017e20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8017e24:	4618      	mov	r0, r3
 8017e26:	374c      	adds	r7, #76	@ 0x4c
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	bd90      	pop	{r4, r7, pc}
 8017e2c:	20001b5c 	.word	0x20001b5c

08017e30 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b084      	sub	sp, #16
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017e38:	2307      	movs	r3, #7
 8017e3a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	685b      	ldr	r3, [r3, #4]
 8017e44:	f107 020e 	add.w	r2, r7, #14
 8017e48:	4611      	mov	r1, r2
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7ff f8e4 	bl	8017018 <VerifyRfFreq>
 8017e50:	4603      	mov	r3, r0
 8017e52:	f083 0301 	eor.w	r3, r3, #1
 8017e56:	b2db      	uxtb	r3, r3
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d003      	beq.n	8017e64 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8017e5c:	7bfb      	ldrb	r3, [r7, #15]
 8017e5e:	f023 0301 	bic.w	r3, r3, #1
 8017e62:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	f993 3000 	ldrsb.w	r3, [r3]
 8017e6a:	2207      	movs	r2, #7
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f7fe fb71 	bl	8016556 <RegionCommonValueInRange>
 8017e74:	4603      	mov	r3, r0
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d103      	bne.n	8017e82 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8017e7a:	7bfb      	ldrb	r3, [r7, #15]
 8017e7c:	f023 0302 	bic.w	r3, r3, #2
 8017e80:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e88:	2205      	movs	r2, #5
 8017e8a:	2100      	movs	r1, #0
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f7fe fb62 	bl	8016556 <RegionCommonValueInRange>
 8017e92:	4603      	mov	r3, r0
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d103      	bne.n	8017ea0 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017e98:	7bfb      	ldrb	r3, [r7, #15]
 8017e9a:	f023 0304 	bic.w	r3, r3, #4
 8017e9e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3710      	adds	r7, #16
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
	...

08017eac <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b086      	sub	sp, #24
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017eb4:	2303      	movs	r3, #3
 8017eb6:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d114      	bne.n	8017eec <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017ec8:	b2db      	uxtb	r3, r3
 8017eca:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8017ecc:	f107 0308 	add.w	r3, r7, #8
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f000 f9ff 	bl	80182d4 <RegionEU868ChannelsRemove>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	f083 0301 	eor.w	r3, r3, #1
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d03b      	beq.n	8017f5a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8017ee2:	7dfb      	ldrb	r3, [r7, #23]
 8017ee4:	f023 0303 	bic.w	r3, r3, #3
 8017ee8:	75fb      	strb	r3, [r7, #23]
 8017eea:	e036      	b.n	8017f5a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017ef8:	b2db      	uxtb	r3, r3
 8017efa:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8017efc:	f107 030c 	add.w	r3, r7, #12
 8017f00:	4618      	mov	r0, r3
 8017f02:	f000 f945 	bl	8018190 <RegionEU868ChannelAdd>
 8017f06:	4603      	mov	r3, r0
 8017f08:	2b06      	cmp	r3, #6
 8017f0a:	d820      	bhi.n	8017f4e <RegionEU868NewChannelReq+0xa2>
 8017f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8017f14 <RegionEU868NewChannelReq+0x68>)
 8017f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f12:	bf00      	nop
 8017f14:	08017f59 	.word	0x08017f59
 8017f18:	08017f4f 	.word	0x08017f4f
 8017f1c:	08017f4f 	.word	0x08017f4f
 8017f20:	08017f4f 	.word	0x08017f4f
 8017f24:	08017f31 	.word	0x08017f31
 8017f28:	08017f3b 	.word	0x08017f3b
 8017f2c:	08017f45 	.word	0x08017f45
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017f30:	7dfb      	ldrb	r3, [r7, #23]
 8017f32:	f023 0301 	bic.w	r3, r3, #1
 8017f36:	75fb      	strb	r3, [r7, #23]
                break;
 8017f38:	e00f      	b.n	8017f5a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8017f3a:	7dfb      	ldrb	r3, [r7, #23]
 8017f3c:	f023 0302 	bic.w	r3, r3, #2
 8017f40:	75fb      	strb	r3, [r7, #23]
                break;
 8017f42:	e00a      	b.n	8017f5a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8017f44:	7dfb      	ldrb	r3, [r7, #23]
 8017f46:	f023 0303 	bic.w	r3, r3, #3
 8017f4a:	75fb      	strb	r3, [r7, #23]
                break;
 8017f4c:	e005      	b.n	8017f5a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8017f4e:	7dfb      	ldrb	r3, [r7, #23]
 8017f50:	f023 0303 	bic.w	r3, r3, #3
 8017f54:	75fb      	strb	r3, [r7, #23]
                break;
 8017f56:	e000      	b.n	8017f5a <RegionEU868NewChannelReq+0xae>
                break;
 8017f58:	bf00      	nop
            }
        }
    }

    return status;
 8017f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017f5e:	4618      	mov	r0, r3
 8017f60:	3718      	adds	r7, #24
 8017f62:	46bd      	mov	sp, r7
 8017f64:	bd80      	pop	{r7, pc}
 8017f66:	bf00      	nop

08017f68 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017f68:	b480      	push	{r7}
 8017f6a:	b083      	sub	sp, #12
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f74:	4618      	mov	r0, r3
 8017f76:	370c      	adds	r7, #12
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bc80      	pop	{r7}
 8017f7c:	4770      	bx	lr
	...

08017f80 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b084      	sub	sp, #16
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017f88:	2303      	movs	r3, #3
 8017f8a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	781b      	ldrb	r3, [r3, #0]
 8017f94:	2b0f      	cmp	r3, #15
 8017f96:	d901      	bls.n	8017f9c <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	e035      	b.n	8018008 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	685b      	ldr	r3, [r3, #4]
 8017fa0:	f107 020e 	add.w	r2, r7, #14
 8017fa4:	4611      	mov	r1, r2
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7ff f836 	bl	8017018 <VerifyRfFreq>
 8017fac:	4603      	mov	r3, r0
 8017fae:	f083 0301 	eor.w	r3, r3, #1
 8017fb2:	b2db      	uxtb	r3, r3
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d003      	beq.n	8017fc0 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8017fb8:	7bfb      	ldrb	r3, [r7, #15]
 8017fba:	f023 0301 	bic.w	r3, r3, #1
 8017fbe:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8017fc0:	4b13      	ldr	r3, [pc, #76]	@ (8018010 <RegionEU868DlChannelReq+0x90>)
 8017fc2:	681a      	ldr	r2, [r3, #0]
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	781b      	ldrb	r3, [r3, #0]
 8017fc8:	4619      	mov	r1, r3
 8017fca:	460b      	mov	r3, r1
 8017fcc:	005b      	lsls	r3, r3, #1
 8017fce:	440b      	add	r3, r1
 8017fd0:	009b      	lsls	r3, r3, #2
 8017fd2:	4413      	add	r3, r2
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d103      	bne.n	8017fe2 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8017fda:	7bfb      	ldrb	r3, [r7, #15]
 8017fdc:	f023 0302 	bic.w	r3, r3, #2
 8017fe0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8017fe2:	7bfb      	ldrb	r3, [r7, #15]
 8017fe4:	2b03      	cmp	r3, #3
 8017fe6:	d10d      	bne.n	8018004 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017fe8:	4b09      	ldr	r3, [pc, #36]	@ (8018010 <RegionEU868DlChannelReq+0x90>)
 8017fea:	6819      	ldr	r1, [r3, #0]
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	685a      	ldr	r2, [r3, #4]
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	005b      	lsls	r3, r3, #1
 8017ffa:	4403      	add	r3, r0
 8017ffc:	009b      	lsls	r3, r3, #2
 8017ffe:	440b      	add	r3, r1
 8018000:	3304      	adds	r3, #4
 8018002:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8018004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018008:	4618      	mov	r0, r3
 801800a:	3710      	adds	r7, #16
 801800c:	46bd      	mov	sp, r7
 801800e:	bd80      	pop	{r7, pc}
 8018010:	20001b5c 	.word	0x20001b5c

08018014 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018014:	b480      	push	{r7}
 8018016:	b083      	sub	sp, #12
 8018018:	af00      	add	r7, sp, #0
 801801a:	4603      	mov	r3, r0
 801801c:	460a      	mov	r2, r1
 801801e:	71fb      	strb	r3, [r7, #7]
 8018020:	4613      	mov	r3, r2
 8018022:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8018024:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8018028:	4618      	mov	r0, r3
 801802a:	370c      	adds	r7, #12
 801802c:	46bd      	mov	sp, r7
 801802e:	bc80      	pop	{r7}
 8018030:	4770      	bx	lr
	...

08018034 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b09a      	sub	sp, #104	@ 0x68
 8018038:	af02      	add	r7, sp, #8
 801803a:	60f8      	str	r0, [r7, #12]
 801803c:	60b9      	str	r1, [r7, #8]
 801803e:	607a      	str	r2, [r7, #4]
 8018040:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8018042:	2300      	movs	r3, #0
 8018044:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8018048:	2300      	movs	r3, #0
 801804a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801804e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018052:	2200      	movs	r2, #0
 8018054:	601a      	str	r2, [r3, #0]
 8018056:	605a      	str	r2, [r3, #4]
 8018058:	609a      	str	r2, [r3, #8]
 801805a:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801805c:	230c      	movs	r3, #12
 801805e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8018062:	2307      	movs	r3, #7
 8018064:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8018066:	4b48      	ldr	r3, [pc, #288]	@ (8018188 <RegionEU868NextChannel+0x154>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801806e:	2201      	movs	r2, #1
 8018070:	2100      	movs	r1, #0
 8018072:	4618      	mov	r0, r3
 8018074:	f7fe fac0 	bl	80165f8 <RegionCommonCountChannels>
 8018078:	4603      	mov	r3, r0
 801807a:	2b00      	cmp	r3, #0
 801807c:	d10a      	bne.n	8018094 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801807e:	4b42      	ldr	r3, [pc, #264]	@ (8018188 <RegionEU868NextChannel+0x154>)
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8018086:	4b40      	ldr	r3, [pc, #256]	@ (8018188 <RegionEU868NextChannel+0x154>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	f042 0207 	orr.w	r2, r2, #7
 801808e:	b292      	uxth	r2, r2
 8018090:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	7a5b      	ldrb	r3, [r3, #9]
 8018098:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80180a0:	b2db      	uxtb	r3, r3
 80180a2:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80180a4:	4b38      	ldr	r3, [pc, #224]	@ (8018188 <RegionEU868NextChannel+0x154>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80180ac:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80180ae:	4b36      	ldr	r3, [pc, #216]	@ (8018188 <RegionEU868NextChannel+0x154>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 80180b4:	4b35      	ldr	r3, [pc, #212]	@ (801818c <RegionEU868NextChannel+0x158>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80180ba:	2310      	movs	r3, #16
 80180bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80180be:	f107 0312 	add.w	r3, r7, #18
 80180c2:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	7a9b      	ldrb	r3, [r3, #10]
 80180d4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80180d8:	2306      	movs	r3, #6
 80180da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80180de:	68fa      	ldr	r2, [r7, #12]
 80180e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80180e4:	320c      	adds	r2, #12
 80180e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80180ea:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	7d1b      	ldrb	r3, [r3, #20]
 80180f2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	8adb      	ldrh	r3, [r3, #22]
 8018100:	4619      	mov	r1, r3
 8018102:	4610      	mov	r0, r2
 8018104:	f7fe fffe 	bl	8017104 <GetTimeOnAir>
 8018108:	4603      	mov	r3, r0
 801810a:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801810c:	f107 0314 	add.w	r3, r7, #20
 8018110:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018112:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8018116:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801811a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	9301      	str	r3, [sp, #4]
 8018122:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8018126:	9300      	str	r3, [sp, #0]
 8018128:	460b      	mov	r3, r1
 801812a:	6839      	ldr	r1, [r7, #0]
 801812c:	f7fe fe57 	bl	8016dde <RegionCommonIdentifyChannels>
 8018130:	4603      	mov	r3, r0
 8018132:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018136:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801813a:	2b00      	cmp	r3, #0
 801813c:	d10e      	bne.n	801815c <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801813e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8018142:	3b01      	subs	r3, #1
 8018144:	4619      	mov	r1, r3
 8018146:	2000      	movs	r0, #0
 8018148:	f000 f938 	bl	80183bc <randr>
 801814c:	4603      	mov	r3, r0
 801814e:	3360      	adds	r3, #96	@ 0x60
 8018150:	443b      	add	r3, r7
 8018152:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	701a      	strb	r2, [r3, #0]
 801815a:	e00e      	b.n	801817a <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801815c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018160:	2b0c      	cmp	r3, #12
 8018162:	d10a      	bne.n	801817a <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018164:	4b08      	ldr	r3, [pc, #32]	@ (8018188 <RegionEU868NextChannel+0x154>)
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801816c:	4b06      	ldr	r3, [pc, #24]	@ (8018188 <RegionEU868NextChannel+0x154>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	f042 0207 	orr.w	r2, r2, #7
 8018174:	b292      	uxth	r2, r2
 8018176:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 801817a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801817e:	4618      	mov	r0, r3
 8018180:	3760      	adds	r7, #96	@ 0x60
 8018182:	46bd      	mov	sp, r7
 8018184:	bd80      	pop	{r7, pc}
 8018186:	bf00      	nop
 8018188:	20001b5c 	.word	0x20001b5c
 801818c:	20001b60 	.word	0x20001b60

08018190 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b084      	sub	sp, #16
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018198:	2300      	movs	r3, #0
 801819a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801819c:	2300      	movs	r3, #0
 801819e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80181a0:	2300      	movs	r3, #0
 80181a2:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	791b      	ldrb	r3, [r3, #4]
 80181a8:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80181aa:	7b7b      	ldrb	r3, [r7, #13]
 80181ac:	2b02      	cmp	r3, #2
 80181ae:	d801      	bhi.n	80181b4 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80181b0:	2306      	movs	r3, #6
 80181b2:	e089      	b.n	80182c8 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80181b4:	7b7b      	ldrb	r3, [r7, #13]
 80181b6:	2b0f      	cmp	r3, #15
 80181b8:	d901      	bls.n	80181be <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80181ba:	2303      	movs	r3, #3
 80181bc:	e084      	b.n	80182c8 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	7a1b      	ldrb	r3, [r3, #8]
 80181c4:	f343 0303 	sbfx	r3, r3, #0, #4
 80181c8:	b25b      	sxtb	r3, r3
 80181ca:	2207      	movs	r2, #7
 80181cc:	2100      	movs	r1, #0
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7fe f9c1 	bl	8016556 <RegionCommonValueInRange>
 80181d4:	4603      	mov	r3, r0
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d101      	bne.n	80181de <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80181da:	2301      	movs	r3, #1
 80181dc:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	7a1b      	ldrb	r3, [r3, #8]
 80181e4:	f343 1303 	sbfx	r3, r3, #4, #4
 80181e8:	b25b      	sxtb	r3, r3
 80181ea:	2207      	movs	r2, #7
 80181ec:	2100      	movs	r1, #0
 80181ee:	4618      	mov	r0, r3
 80181f0:	f7fe f9b1 	bl	8016556 <RegionCommonValueInRange>
 80181f4:	4603      	mov	r3, r0
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d101      	bne.n	80181fe <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80181fa:	2301      	movs	r3, #1
 80181fc:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	7a1b      	ldrb	r3, [r3, #8]
 8018204:	f343 0303 	sbfx	r3, r3, #0, #4
 8018208:	b25a      	sxtb	r2, r3
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	7a1b      	ldrb	r3, [r3, #8]
 8018210:	f343 1303 	sbfx	r3, r3, #4, #4
 8018214:	b25b      	sxtb	r3, r3
 8018216:	429a      	cmp	r2, r3
 8018218:	dd01      	ble.n	801821e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801821a:	2301      	movs	r3, #1
 801821c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801821e:	7bbb      	ldrb	r3, [r7, #14]
 8018220:	f083 0301 	eor.w	r3, r3, #1
 8018224:	b2db      	uxtb	r3, r3
 8018226:	2b00      	cmp	r3, #0
 8018228:	d010      	beq.n	801824c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	f107 020c 	add.w	r2, r7, #12
 8018234:	4611      	mov	r1, r2
 8018236:	4618      	mov	r0, r3
 8018238:	f7fe feee 	bl	8017018 <VerifyRfFreq>
 801823c:	4603      	mov	r3, r0
 801823e:	f083 0301 	eor.w	r3, r3, #1
 8018242:	b2db      	uxtb	r3, r3
 8018244:	2b00      	cmp	r3, #0
 8018246:	d001      	beq.n	801824c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8018248:	2301      	movs	r3, #1
 801824a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801824c:	7bfb      	ldrb	r3, [r7, #15]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d004      	beq.n	801825c <RegionEU868ChannelAdd+0xcc>
 8018252:	7bbb      	ldrb	r3, [r7, #14]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d001      	beq.n	801825c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018258:	2306      	movs	r3, #6
 801825a:	e035      	b.n	80182c8 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801825c:	7bfb      	ldrb	r3, [r7, #15]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d001      	beq.n	8018266 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018262:	2305      	movs	r3, #5
 8018264:	e030      	b.n	80182c8 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8018266:	7bbb      	ldrb	r3, [r7, #14]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d001      	beq.n	8018270 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801826c:	2304      	movs	r3, #4
 801826e:	e02b      	b.n	80182c8 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8018270:	4b17      	ldr	r3, [pc, #92]	@ (80182d0 <RegionEU868ChannelAdd+0x140>)
 8018272:	6819      	ldr	r1, [r3, #0]
 8018274:	7b7a      	ldrb	r2, [r7, #13]
 8018276:	4613      	mov	r3, r2
 8018278:	005b      	lsls	r3, r3, #1
 801827a:	4413      	add	r3, r2
 801827c:	009b      	lsls	r3, r3, #2
 801827e:	18c8      	adds	r0, r1, r3
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	220c      	movs	r2, #12
 8018286:	4619      	mov	r1, r3
 8018288:	f000 f8af 	bl	80183ea <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801828c:	4b10      	ldr	r3, [pc, #64]	@ (80182d0 <RegionEU868ChannelAdd+0x140>)
 801828e:	6819      	ldr	r1, [r3, #0]
 8018290:	7b7a      	ldrb	r2, [r7, #13]
 8018292:	7b38      	ldrb	r0, [r7, #12]
 8018294:	4613      	mov	r3, r2
 8018296:	005b      	lsls	r3, r3, #1
 8018298:	4413      	add	r3, r2
 801829a:	009b      	lsls	r3, r3, #2
 801829c:	440b      	add	r3, r1
 801829e:	3309      	adds	r3, #9
 80182a0:	4602      	mov	r2, r0
 80182a2:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80182a4:	4b0a      	ldr	r3, [pc, #40]	@ (80182d0 <RegionEU868ChannelAdd+0x140>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80182ac:	b21a      	sxth	r2, r3
 80182ae:	7b7b      	ldrb	r3, [r7, #13]
 80182b0:	2101      	movs	r1, #1
 80182b2:	fa01 f303 	lsl.w	r3, r1, r3
 80182b6:	b21b      	sxth	r3, r3
 80182b8:	4313      	orrs	r3, r2
 80182ba:	b21a      	sxth	r2, r3
 80182bc:	4b04      	ldr	r3, [pc, #16]	@ (80182d0 <RegionEU868ChannelAdd+0x140>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	b292      	uxth	r2, r2
 80182c2:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80182c6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3710      	adds	r7, #16
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}
 80182d0:	20001b5c 	.word	0x20001b5c

080182d4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b086      	sub	sp, #24
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	781b      	ldrb	r3, [r3, #0]
 80182e0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80182e2:	7dfb      	ldrb	r3, [r7, #23]
 80182e4:	2b02      	cmp	r3, #2
 80182e6:	d801      	bhi.n	80182ec <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80182e8:	2300      	movs	r3, #0
 80182ea:	e016      	b.n	801831a <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80182ec:	4b0d      	ldr	r3, [pc, #52]	@ (8018324 <RegionEU868ChannelsRemove+0x50>)
 80182ee:	6819      	ldr	r1, [r3, #0]
 80182f0:	7dfa      	ldrb	r2, [r7, #23]
 80182f2:	4613      	mov	r3, r2
 80182f4:	005b      	lsls	r3, r3, #1
 80182f6:	4413      	add	r3, r2
 80182f8:	009b      	lsls	r3, r3, #2
 80182fa:	440b      	add	r3, r1
 80182fc:	461a      	mov	r2, r3
 80182fe:	2300      	movs	r3, #0
 8018300:	6013      	str	r3, [r2, #0]
 8018302:	6053      	str	r3, [r2, #4]
 8018304:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018306:	4b07      	ldr	r3, [pc, #28]	@ (8018324 <RegionEU868ChannelsRemove+0x50>)
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801830e:	7df9      	ldrb	r1, [r7, #23]
 8018310:	2210      	movs	r2, #16
 8018312:	4618      	mov	r0, r3
 8018314:	f7fe f93c 	bl	8016590 <RegionCommonChanDisable>
 8018318:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801831a:	4618      	mov	r0, r3
 801831c:	3718      	adds	r7, #24
 801831e:	46bd      	mov	sp, r7
 8018320:	bd80      	pop	{r7, pc}
 8018322:	bf00      	nop
 8018324:	20001b5c 	.word	0x20001b5c

08018328 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018328:	b480      	push	{r7}
 801832a:	b085      	sub	sp, #20
 801832c:	af00      	add	r7, sp, #0
 801832e:	4603      	mov	r3, r0
 8018330:	71fb      	strb	r3, [r7, #7]
 8018332:	460b      	mov	r3, r1
 8018334:	71bb      	strb	r3, [r7, #6]
 8018336:	4613      	mov	r3, r2
 8018338:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801833a:	79ba      	ldrb	r2, [r7, #6]
 801833c:	797b      	ldrb	r3, [r7, #5]
 801833e:	1ad3      	subs	r3, r2, r3
 8018340:	b2db      	uxtb	r3, r3
 8018342:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018348:	2b00      	cmp	r3, #0
 801834a:	da01      	bge.n	8018350 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801834c:	2300      	movs	r3, #0
 801834e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018350:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8018352:	4618      	mov	r0, r3
 8018354:	3714      	adds	r7, #20
 8018356:	46bd      	mov	sp, r7
 8018358:	bc80      	pop	{r7}
 801835a:	4770      	bx	lr

0801835c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801835c:	b480      	push	{r7}
 801835e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018360:	4b0d      	ldr	r3, [pc, #52]	@ (8018398 <rand1+0x3c>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	4a0d      	ldr	r2, [pc, #52]	@ (801839c <rand1+0x40>)
 8018366:	fb02 f303 	mul.w	r3, r2, r3
 801836a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801836e:	3339      	adds	r3, #57	@ 0x39
 8018370:	4a09      	ldr	r2, [pc, #36]	@ (8018398 <rand1+0x3c>)
 8018372:	6013      	str	r3, [r2, #0]
 8018374:	4b08      	ldr	r3, [pc, #32]	@ (8018398 <rand1+0x3c>)
 8018376:	681a      	ldr	r2, [r3, #0]
 8018378:	2303      	movs	r3, #3
 801837a:	fba3 1302 	umull	r1, r3, r3, r2
 801837e:	1ad1      	subs	r1, r2, r3
 8018380:	0849      	lsrs	r1, r1, #1
 8018382:	440b      	add	r3, r1
 8018384:	0f99      	lsrs	r1, r3, #30
 8018386:	460b      	mov	r3, r1
 8018388:	07db      	lsls	r3, r3, #31
 801838a:	1a5b      	subs	r3, r3, r1
 801838c:	1ad1      	subs	r1, r2, r3
 801838e:	460b      	mov	r3, r1
}
 8018390:	4618      	mov	r0, r3
 8018392:	46bd      	mov	sp, r7
 8018394:	bc80      	pop	{r7}
 8018396:	4770      	bx	lr
 8018398:	20000130 	.word	0x20000130
 801839c:	41c64e6d 	.word	0x41c64e6d

080183a0 <srand1>:

void srand1( uint32_t seed )
{
 80183a0:	b480      	push	{r7}
 80183a2:	b083      	sub	sp, #12
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
    next = seed;
 80183a8:	4a03      	ldr	r2, [pc, #12]	@ (80183b8 <srand1+0x18>)
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	6013      	str	r3, [r2, #0]
}
 80183ae:	bf00      	nop
 80183b0:	370c      	adds	r7, #12
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bc80      	pop	{r7}
 80183b6:	4770      	bx	lr
 80183b8:	20000130 	.word	0x20000130

080183bc <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b082      	sub	sp, #8
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
 80183c4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80183c6:	f7ff ffc9 	bl	801835c <rand1>
 80183ca:	4602      	mov	r2, r0
 80183cc:	6839      	ldr	r1, [r7, #0]
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	1acb      	subs	r3, r1, r3
 80183d2:	3301      	adds	r3, #1
 80183d4:	fb92 f1f3 	sdiv	r1, r2, r3
 80183d8:	fb01 f303 	mul.w	r3, r1, r3
 80183dc:	1ad2      	subs	r2, r2, r3
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	4413      	add	r3, r2
}
 80183e2:	4618      	mov	r0, r3
 80183e4:	3708      	adds	r7, #8
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bd80      	pop	{r7, pc}

080183ea <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80183ea:	b480      	push	{r7}
 80183ec:	b085      	sub	sp, #20
 80183ee:	af00      	add	r7, sp, #0
 80183f0:	60f8      	str	r0, [r7, #12]
 80183f2:	60b9      	str	r1, [r7, #8]
 80183f4:	4613      	mov	r3, r2
 80183f6:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80183f8:	e007      	b.n	801840a <memcpy1+0x20>
    {
        *dst++ = *src++;
 80183fa:	68ba      	ldr	r2, [r7, #8]
 80183fc:	1c53      	adds	r3, r2, #1
 80183fe:	60bb      	str	r3, [r7, #8]
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	1c59      	adds	r1, r3, #1
 8018404:	60f9      	str	r1, [r7, #12]
 8018406:	7812      	ldrb	r2, [r2, #0]
 8018408:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801840a:	88fb      	ldrh	r3, [r7, #6]
 801840c:	1e5a      	subs	r2, r3, #1
 801840e:	80fa      	strh	r2, [r7, #6]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d1f2      	bne.n	80183fa <memcpy1+0x10>
    }
}
 8018414:	bf00      	nop
 8018416:	bf00      	nop
 8018418:	3714      	adds	r7, #20
 801841a:	46bd      	mov	sp, r7
 801841c:	bc80      	pop	{r7}
 801841e:	4770      	bx	lr

08018420 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018420:	b480      	push	{r7}
 8018422:	b085      	sub	sp, #20
 8018424:	af00      	add	r7, sp, #0
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	60b9      	str	r1, [r7, #8]
 801842a:	4613      	mov	r3, r2
 801842c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801842e:	88fb      	ldrh	r3, [r7, #6]
 8018430:	3b01      	subs	r3, #1
 8018432:	68fa      	ldr	r2, [r7, #12]
 8018434:	4413      	add	r3, r2
 8018436:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018438:	e007      	b.n	801844a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801843a:	68ba      	ldr	r2, [r7, #8]
 801843c:	1c53      	adds	r3, r2, #1
 801843e:	60bb      	str	r3, [r7, #8]
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	1e59      	subs	r1, r3, #1
 8018444:	60f9      	str	r1, [r7, #12]
 8018446:	7812      	ldrb	r2, [r2, #0]
 8018448:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801844a:	88fb      	ldrh	r3, [r7, #6]
 801844c:	1e5a      	subs	r2, r3, #1
 801844e:	80fa      	strh	r2, [r7, #6]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d1f2      	bne.n	801843a <memcpyr+0x1a>
    }
}
 8018454:	bf00      	nop
 8018456:	bf00      	nop
 8018458:	3714      	adds	r7, #20
 801845a:	46bd      	mov	sp, r7
 801845c:	bc80      	pop	{r7}
 801845e:	4770      	bx	lr

08018460 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018460:	b480      	push	{r7}
 8018462:	b083      	sub	sp, #12
 8018464:	af00      	add	r7, sp, #0
 8018466:	6078      	str	r0, [r7, #4]
 8018468:	460b      	mov	r3, r1
 801846a:	70fb      	strb	r3, [r7, #3]
 801846c:	4613      	mov	r3, r2
 801846e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018470:	e004      	b.n	801847c <memset1+0x1c>
    {
        *dst++ = value;
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	1c5a      	adds	r2, r3, #1
 8018476:	607a      	str	r2, [r7, #4]
 8018478:	78fa      	ldrb	r2, [r7, #3]
 801847a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801847c:	883b      	ldrh	r3, [r7, #0]
 801847e:	1e5a      	subs	r2, r3, #1
 8018480:	803a      	strh	r2, [r7, #0]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d1f5      	bne.n	8018472 <memset1+0x12>
    }
}
 8018486:	bf00      	nop
 8018488:	bf00      	nop
 801848a:	370c      	adds	r7, #12
 801848c:	46bd      	mov	sp, r7
 801848e:	bc80      	pop	{r7}
 8018490:	4770      	bx	lr
	...

08018494 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018494:	b480      	push	{r7}
 8018496:	b085      	sub	sp, #20
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
 801849c:	460b      	mov	r3, r1
 801849e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80184a0:	f04f 33ff 	mov.w	r3, #4294967295
 80184a4:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d101      	bne.n	80184b0 <Crc32+0x1c>
    {
        return 0;
 80184ac:	2300      	movs	r3, #0
 80184ae:	e026      	b.n	80184fe <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80184b0:	2300      	movs	r3, #0
 80184b2:	817b      	strh	r3, [r7, #10]
 80184b4:	e01d      	b.n	80184f2 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80184b6:	897b      	ldrh	r3, [r7, #10]
 80184b8:	687a      	ldr	r2, [r7, #4]
 80184ba:	4413      	add	r3, r2
 80184bc:	781b      	ldrb	r3, [r3, #0]
 80184be:	461a      	mov	r2, r3
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	4053      	eors	r3, r2
 80184c4:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80184c6:	2300      	movs	r3, #0
 80184c8:	813b      	strh	r3, [r7, #8]
 80184ca:	e00c      	b.n	80184e6 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	085a      	lsrs	r2, r3, #1
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	f003 0301 	and.w	r3, r3, #1
 80184d6:	425b      	negs	r3, r3
 80184d8:	490b      	ldr	r1, [pc, #44]	@ (8018508 <Crc32+0x74>)
 80184da:	400b      	ands	r3, r1
 80184dc:	4053      	eors	r3, r2
 80184de:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80184e0:	893b      	ldrh	r3, [r7, #8]
 80184e2:	3301      	adds	r3, #1
 80184e4:	813b      	strh	r3, [r7, #8]
 80184e6:	893b      	ldrh	r3, [r7, #8]
 80184e8:	2b07      	cmp	r3, #7
 80184ea:	d9ef      	bls.n	80184cc <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80184ec:	897b      	ldrh	r3, [r7, #10]
 80184ee:	3301      	adds	r3, #1
 80184f0:	817b      	strh	r3, [r7, #10]
 80184f2:	897a      	ldrh	r2, [r7, #10]
 80184f4:	887b      	ldrh	r3, [r7, #2]
 80184f6:	429a      	cmp	r2, r3
 80184f8:	d3dd      	bcc.n	80184b6 <Crc32+0x22>
        }
    }

    return ~crc;
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	43db      	mvns	r3, r3
}
 80184fe:	4618      	mov	r0, r3
 8018500:	3714      	adds	r7, #20
 8018502:	46bd      	mov	sp, r7
 8018504:	bc80      	pop	{r7}
 8018506:	4770      	bx	lr
 8018508:	edb88320 	.word	0xedb88320

0801850c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b084      	sub	sp, #16
 8018510:	af02      	add	r7, sp, #8
 8018512:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018514:	4a24      	ldr	r2, [pc, #144]	@ (80185a8 <RadioInit+0x9c>)
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801851a:	4b24      	ldr	r3, [pc, #144]	@ (80185ac <RadioInit+0xa0>)
 801851c:	2200      	movs	r2, #0
 801851e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018520:	4b22      	ldr	r3, [pc, #136]	@ (80185ac <RadioInit+0xa0>)
 8018522:	2200      	movs	r2, #0
 8018524:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018526:	4b21      	ldr	r3, [pc, #132]	@ (80185ac <RadioInit+0xa0>)
 8018528:	2200      	movs	r2, #0
 801852a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801852c:	4b1f      	ldr	r3, [pc, #124]	@ (80185ac <RadioInit+0xa0>)
 801852e:	2200      	movs	r2, #0
 8018530:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018532:	481f      	ldr	r0, [pc, #124]	@ (80185b0 <RadioInit+0xa4>)
 8018534:	f001 ffc6 	bl	801a4c4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018538:	4b1c      	ldr	r3, [pc, #112]	@ (80185ac <RadioInit+0xa0>)
 801853a:	2200      	movs	r2, #0
 801853c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801853e:	4b1b      	ldr	r3, [pc, #108]	@ (80185ac <RadioInit+0xa0>)
 8018540:	2200      	movs	r2, #0
 8018542:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018544:	f002 fa5c 	bl	801aa00 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018548:	2100      	movs	r1, #0
 801854a:	2000      	movs	r0, #0
 801854c:	f002 fe28 	bl	801b1a0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018550:	2204      	movs	r2, #4
 8018552:	2100      	movs	r1, #0
 8018554:	2001      	movs	r0, #1
 8018556:	f002 fbeb 	bl	801ad30 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801855a:	2300      	movs	r3, #0
 801855c:	2200      	movs	r2, #0
 801855e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018562:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018566:	f002 fb1b 	bl	801aba0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801856a:	f000 fe99 	bl	80192a0 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801856e:	2300      	movs	r3, #0
 8018570:	9300      	str	r3, [sp, #0]
 8018572:	4b10      	ldr	r3, [pc, #64]	@ (80185b4 <RadioInit+0xa8>)
 8018574:	2200      	movs	r2, #0
 8018576:	f04f 31ff 	mov.w	r1, #4294967295
 801857a:	480f      	ldr	r0, [pc, #60]	@ (80185b8 <RadioInit+0xac>)
 801857c:	f003 ffe4 	bl	801c548 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018580:	2300      	movs	r3, #0
 8018582:	9300      	str	r3, [sp, #0]
 8018584:	4b0d      	ldr	r3, [pc, #52]	@ (80185bc <RadioInit+0xb0>)
 8018586:	2200      	movs	r2, #0
 8018588:	f04f 31ff 	mov.w	r1, #4294967295
 801858c:	480c      	ldr	r0, [pc, #48]	@ (80185c0 <RadioInit+0xb4>)
 801858e:	f003 ffdb 	bl	801c548 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018592:	4809      	ldr	r0, [pc, #36]	@ (80185b8 <RadioInit+0xac>)
 8018594:	f004 f87c 	bl	801c690 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018598:	4809      	ldr	r0, [pc, #36]	@ (80185c0 <RadioInit+0xb4>)
 801859a:	f004 f879 	bl	801c690 <UTIL_TIMER_Stop>
}
 801859e:	bf00      	nop
 80185a0:	3708      	adds	r7, #8
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}
 80185a6:	bf00      	nop
 80185a8:	20001c64 	.word	0x20001c64
 80185ac:	20001c68 	.word	0x20001c68
 80185b0:	08019695 	.word	0x08019695
 80185b4:	0801961d 	.word	0x0801961d
 80185b8:	20001cc4 	.word	0x20001cc4
 80185bc:	08019631 	.word	0x08019631
 80185c0:	20001cdc 	.word	0x20001cdc

080185c4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80185c8:	f001 ffc4 	bl	801a554 <SUBGRF_GetOperatingMode>
 80185cc:	4603      	mov	r3, r0
 80185ce:	2b07      	cmp	r3, #7
 80185d0:	d00a      	beq.n	80185e8 <RadioGetStatus+0x24>
 80185d2:	2b07      	cmp	r3, #7
 80185d4:	dc0a      	bgt.n	80185ec <RadioGetStatus+0x28>
 80185d6:	2b04      	cmp	r3, #4
 80185d8:	d002      	beq.n	80185e0 <RadioGetStatus+0x1c>
 80185da:	2b05      	cmp	r3, #5
 80185dc:	d002      	beq.n	80185e4 <RadioGetStatus+0x20>
 80185de:	e005      	b.n	80185ec <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80185e0:	2302      	movs	r3, #2
 80185e2:	e004      	b.n	80185ee <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80185e4:	2301      	movs	r3, #1
 80185e6:	e002      	b.n	80185ee <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80185e8:	2303      	movs	r3, #3
 80185ea:	e000      	b.n	80185ee <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80185ec:	2300      	movs	r3, #0
    }
}
 80185ee:	4618      	mov	r0, r3
 80185f0:	bd80      	pop	{r7, pc}
	...

080185f4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b082      	sub	sp, #8
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	4603      	mov	r3, r0
 80185fc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80185fe:	4a2a      	ldr	r2, [pc, #168]	@ (80186a8 <RadioSetModem+0xb4>)
 8018600:	79fb      	ldrb	r3, [r7, #7]
 8018602:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018604:	79fb      	ldrb	r3, [r7, #7]
 8018606:	4618      	mov	r0, r3
 8018608:	f003 f9b7 	bl	801b97a <RFW_SetRadioModem>
    switch( modem )
 801860c:	79fb      	ldrb	r3, [r7, #7]
 801860e:	2b05      	cmp	r3, #5
 8018610:	d80e      	bhi.n	8018630 <RadioSetModem+0x3c>
 8018612:	a201      	add	r2, pc, #4	@ (adr r2, 8018618 <RadioSetModem+0x24>)
 8018614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018618:	0801863f 	.word	0x0801863f
 801861c:	0801864d 	.word	0x0801864d
 8018620:	08018631 	.word	0x08018631
 8018624:	08018673 	.word	0x08018673
 8018628:	08018681 	.word	0x08018681
 801862c:	0801868f 	.word	0x0801868f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018630:	2003      	movs	r0, #3
 8018632:	f002 fb57 	bl	801ace4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018636:	4b1c      	ldr	r3, [pc, #112]	@ (80186a8 <RadioSetModem+0xb4>)
 8018638:	2200      	movs	r2, #0
 801863a:	735a      	strb	r2, [r3, #13]
        break;
 801863c:	e02f      	b.n	801869e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801863e:	2000      	movs	r0, #0
 8018640:	f002 fb50 	bl	801ace4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018644:	4b18      	ldr	r3, [pc, #96]	@ (80186a8 <RadioSetModem+0xb4>)
 8018646:	2200      	movs	r2, #0
 8018648:	735a      	strb	r2, [r3, #13]
        break;
 801864a:	e028      	b.n	801869e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801864c:	2001      	movs	r0, #1
 801864e:	f002 fb49 	bl	801ace4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018652:	4b15      	ldr	r3, [pc, #84]	@ (80186a8 <RadioSetModem+0xb4>)
 8018654:	7b5a      	ldrb	r2, [r3, #13]
 8018656:	4b14      	ldr	r3, [pc, #80]	@ (80186a8 <RadioSetModem+0xb4>)
 8018658:	7b1b      	ldrb	r3, [r3, #12]
 801865a:	429a      	cmp	r2, r3
 801865c:	d01e      	beq.n	801869c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801865e:	4b12      	ldr	r3, [pc, #72]	@ (80186a8 <RadioSetModem+0xb4>)
 8018660:	7b1a      	ldrb	r2, [r3, #12]
 8018662:	4b11      	ldr	r3, [pc, #68]	@ (80186a8 <RadioSetModem+0xb4>)
 8018664:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018666:	4b10      	ldr	r3, [pc, #64]	@ (80186a8 <RadioSetModem+0xb4>)
 8018668:	7b5b      	ldrb	r3, [r3, #13]
 801866a:	4618      	mov	r0, r3
 801866c:	f000 ffa0 	bl	80195b0 <RadioSetPublicNetwork>
        }
        break;
 8018670:	e014      	b.n	801869c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018672:	2002      	movs	r0, #2
 8018674:	f002 fb36 	bl	801ace4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018678:	4b0b      	ldr	r3, [pc, #44]	@ (80186a8 <RadioSetModem+0xb4>)
 801867a:	2200      	movs	r2, #0
 801867c:	735a      	strb	r2, [r3, #13]
        break;
 801867e:	e00e      	b.n	801869e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018680:	2002      	movs	r0, #2
 8018682:	f002 fb2f 	bl	801ace4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018686:	4b08      	ldr	r3, [pc, #32]	@ (80186a8 <RadioSetModem+0xb4>)
 8018688:	2200      	movs	r2, #0
 801868a:	735a      	strb	r2, [r3, #13]
        break;
 801868c:	e007      	b.n	801869e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801868e:	2000      	movs	r0, #0
 8018690:	f002 fb28 	bl	801ace4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018694:	4b04      	ldr	r3, [pc, #16]	@ (80186a8 <RadioSetModem+0xb4>)
 8018696:	2200      	movs	r2, #0
 8018698:	735a      	strb	r2, [r3, #13]
        break;
 801869a:	e000      	b.n	801869e <RadioSetModem+0xaa>
        break;
 801869c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801869e:	bf00      	nop
 80186a0:	3708      	adds	r7, #8
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}
 80186a6:	bf00      	nop
 80186a8:	20001c68 	.word	0x20001c68

080186ac <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b082      	sub	sp, #8
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80186b4:	6878      	ldr	r0, [r7, #4]
 80186b6:	f002 facf 	bl	801ac58 <SUBGRF_SetRfFrequency>
}
 80186ba:	bf00      	nop
 80186bc:	3708      	adds	r7, #8
 80186be:	46bd      	mov	sp, r7
 80186c0:	bd80      	pop	{r7, pc}

080186c2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80186c2:	b580      	push	{r7, lr}
 80186c4:	b090      	sub	sp, #64	@ 0x40
 80186c6:	af0a      	add	r7, sp, #40	@ 0x28
 80186c8:	60f8      	str	r0, [r7, #12]
 80186ca:	60b9      	str	r1, [r7, #8]
 80186cc:	603b      	str	r3, [r7, #0]
 80186ce:	4613      	mov	r3, r2
 80186d0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80186d2:	2301      	movs	r3, #1
 80186d4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80186d6:	2300      	movs	r3, #0
 80186d8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80186da:	2300      	movs	r3, #0
 80186dc:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80186de:	f000 fdf2 	bl	80192c6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80186e2:	2000      	movs	r0, #0
 80186e4:	f7ff ff86 	bl	80185f4 <RadioSetModem>

    RadioSetChannel( freq );
 80186e8:	68f8      	ldr	r0, [r7, #12]
 80186ea:	f7ff ffdf 	bl	80186ac <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80186ee:	2301      	movs	r3, #1
 80186f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80186f2:	2300      	movs	r3, #0
 80186f4:	9308      	str	r3, [sp, #32]
 80186f6:	2300      	movs	r3, #0
 80186f8:	9307      	str	r3, [sp, #28]
 80186fa:	2300      	movs	r3, #0
 80186fc:	9306      	str	r3, [sp, #24]
 80186fe:	2300      	movs	r3, #0
 8018700:	9305      	str	r3, [sp, #20]
 8018702:	2300      	movs	r3, #0
 8018704:	9304      	str	r3, [sp, #16]
 8018706:	2300      	movs	r3, #0
 8018708:	9303      	str	r3, [sp, #12]
 801870a:	2300      	movs	r3, #0
 801870c:	9302      	str	r3, [sp, #8]
 801870e:	2303      	movs	r3, #3
 8018710:	9301      	str	r3, [sp, #4]
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	9300      	str	r3, [sp, #0]
 8018716:	2300      	movs	r3, #0
 8018718:	f44f 7216 	mov.w	r2, #600	@ 0x258
 801871c:	68b9      	ldr	r1, [r7, #8]
 801871e:	2000      	movs	r0, #0
 8018720:	f000 f83c 	bl	801879c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018724:	2000      	movs	r0, #0
 8018726:	f000 fdd5 	bl	80192d4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801872a:	f000 ff6f 	bl	801960c <RadioGetWakeupTime>
 801872e:	4603      	mov	r3, r0
 8018730:	4618      	mov	r0, r3
 8018732:	f7e9 fe6f 	bl	8002414 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018736:	f004 f8c5 	bl	801c8c4 <UTIL_TIMER_GetCurrentTime>
 801873a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801873c:	e00d      	b.n	801875a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801873e:	2000      	movs	r0, #0
 8018740:	f000 feb6 	bl	80194b0 <RadioRssi>
 8018744:	4603      	mov	r3, r0
 8018746:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018748:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801874c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018750:	429a      	cmp	r2, r3
 8018752:	dd02      	ble.n	801875a <RadioIsChannelFree+0x98>
        {
            status = false;
 8018754:	2300      	movs	r3, #0
 8018756:	75fb      	strb	r3, [r7, #23]
            break;
 8018758:	e006      	b.n	8018768 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801875a:	6938      	ldr	r0, [r7, #16]
 801875c:	f004 f8c4 	bl	801c8e8 <UTIL_TIMER_GetElapsedTime>
 8018760:	4602      	mov	r2, r0
 8018762:	683b      	ldr	r3, [r7, #0]
 8018764:	4293      	cmp	r3, r2
 8018766:	d8ea      	bhi.n	801873e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8018768:	f000 fdad 	bl	80192c6 <RadioStandby>

    return status;
 801876c:	7dfb      	ldrb	r3, [r7, #23]
}
 801876e:	4618      	mov	r0, r3
 8018770:	3718      	adds	r7, #24
 8018772:	46bd      	mov	sp, r7
 8018774:	bd80      	pop	{r7, pc}

08018776 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8018776:	b580      	push	{r7, lr}
 8018778:	b082      	sub	sp, #8
 801877a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801877c:	2300      	movs	r3, #0
 801877e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018780:	2300      	movs	r3, #0
 8018782:	2200      	movs	r2, #0
 8018784:	2100      	movs	r1, #0
 8018786:	2000      	movs	r0, #0
 8018788:	f002 fa0a 	bl	801aba0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801878c:	f001 ffb3 	bl	801a6f6 <SUBGRF_GetRandom>
 8018790:	6078      	str	r0, [r7, #4]

    return rnd;
 8018792:	687b      	ldr	r3, [r7, #4]
}
 8018794:	4618      	mov	r0, r3
 8018796:	3708      	adds	r7, #8
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}

0801879c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b08a      	sub	sp, #40	@ 0x28
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	60b9      	str	r1, [r7, #8]
 80187a4:	607a      	str	r2, [r7, #4]
 80187a6:	461a      	mov	r2, r3
 80187a8:	4603      	mov	r3, r0
 80187aa:	73fb      	strb	r3, [r7, #15]
 80187ac:	4613      	mov	r3, r2
 80187ae:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80187b0:	4ab9      	ldr	r2, [pc, #740]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80187b2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80187b6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80187b8:	f003 f89d 	bl	801b8f6 <RFW_DeInit>
    if( rxContinuous == true )
 80187bc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d001      	beq.n	80187c8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80187c4:	2300      	movs	r3, #0
 80187c6:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 80187c8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d004      	beq.n	80187da <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80187d0:	4ab2      	ldr	r2, [pc, #712]	@ (8018a9c <RadioSetRxConfig+0x300>)
 80187d2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80187d6:	7013      	strb	r3, [r2, #0]
 80187d8:	e002      	b.n	80187e0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80187da:	4bb0      	ldr	r3, [pc, #704]	@ (8018a9c <RadioSetRxConfig+0x300>)
 80187dc:	22ff      	movs	r2, #255	@ 0xff
 80187de:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80187e0:	7bfb      	ldrb	r3, [r7, #15]
 80187e2:	2b05      	cmp	r3, #5
 80187e4:	d009      	beq.n	80187fa <RadioSetRxConfig+0x5e>
 80187e6:	2b05      	cmp	r3, #5
 80187e8:	f300 81d7 	bgt.w	8018b9a <RadioSetRxConfig+0x3fe>
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	f000 80bf 	beq.w	8018970 <RadioSetRxConfig+0x1d4>
 80187f2:	2b01      	cmp	r3, #1
 80187f4:	f000 8124 	beq.w	8018a40 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80187f8:	e1cf      	b.n	8018b9a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80187fa:	2001      	movs	r0, #1
 80187fc:	f002 f8c2 	bl	801a984 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018800:	4ba5      	ldr	r3, [pc, #660]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018802:	2200      	movs	r2, #0
 8018804:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018808:	4aa3      	ldr	r2, [pc, #652]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801880e:	4ba2      	ldr	r3, [pc, #648]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018810:	2209      	movs	r2, #9
 8018812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018816:	4ba0      	ldr	r3, [pc, #640]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018818:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801881c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801881e:	68b8      	ldr	r0, [r7, #8]
 8018820:	f002 ff9c 	bl	801b75c <SUBGRF_GetFskBandwidthRegValue>
 8018824:	4603      	mov	r3, r0
 8018826:	461a      	mov	r2, r3
 8018828:	4b9b      	ldr	r3, [pc, #620]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 801882a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801882e:	4b9a      	ldr	r3, [pc, #616]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018830:	2200      	movs	r2, #0
 8018832:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018834:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018836:	00db      	lsls	r3, r3, #3
 8018838:	b29a      	uxth	r2, r3
 801883a:	4b97      	ldr	r3, [pc, #604]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 801883c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801883e:	4b96      	ldr	r3, [pc, #600]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018840:	2200      	movs	r2, #0
 8018842:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018844:	4b94      	ldr	r3, [pc, #592]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018846:	2210      	movs	r2, #16
 8018848:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801884a:	4b93      	ldr	r3, [pc, #588]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 801884c:	2200      	movs	r2, #0
 801884e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018850:	4b91      	ldr	r3, [pc, #580]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018852:	2200      	movs	r2, #0
 8018854:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018856:	4b91      	ldr	r3, [pc, #580]	@ (8018a9c <RadioSetRxConfig+0x300>)
 8018858:	781a      	ldrb	r2, [r3, #0]
 801885a:	4b8f      	ldr	r3, [pc, #572]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 801885c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801885e:	4b8e      	ldr	r3, [pc, #568]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018860:	2201      	movs	r2, #1
 8018862:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018864:	4b8c      	ldr	r3, [pc, #560]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018866:	2200      	movs	r2, #0
 8018868:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801886a:	2005      	movs	r0, #5
 801886c:	f7ff fec2 	bl	80185f4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018870:	488b      	ldr	r0, [pc, #556]	@ (8018aa0 <RadioSetRxConfig+0x304>)
 8018872:	f002 fb2b 	bl	801aecc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018876:	488b      	ldr	r0, [pc, #556]	@ (8018aa4 <RadioSetRxConfig+0x308>)
 8018878:	f002 fbf6 	bl	801b068 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801887c:	4a8a      	ldr	r2, [pc, #552]	@ (8018aa8 <RadioSetRxConfig+0x30c>)
 801887e:	f107 031c 	add.w	r3, r7, #28
 8018882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018886:	e883 0003 	stmia.w	r3, {r0, r1}
 801888a:	f107 031c 	add.w	r3, r7, #28
 801888e:	4618      	mov	r0, r3
 8018890:	f001 feaf 	bl	801a5f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018894:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018898:	f001 fefa 	bl	801a690 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801889c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80188a0:	f000 fe24 	bl	80194ec <RadioRead>
 80188a4:	4603      	mov	r3, r0
 80188a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80188aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80188ae:	f023 0310 	bic.w	r3, r3, #16
 80188b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80188b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80188ba:	4619      	mov	r1, r3
 80188bc:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80188c0:	f000 fe02 	bl	80194c8 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80188c4:	2104      	movs	r1, #4
 80188c6:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80188ca:	f000 fdfd 	bl	80194c8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80188ce:	f640 009b 	movw	r0, #2203	@ 0x89b
 80188d2:	f000 fe0b 	bl	80194ec <RadioRead>
 80188d6:	4603      	mov	r3, r0
 80188d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80188dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80188e0:	f023 031c 	bic.w	r3, r3, #28
 80188e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80188e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80188ec:	f043 0308 	orr.w	r3, r3, #8
 80188f0:	b2db      	uxtb	r3, r3
 80188f2:	4619      	mov	r1, r3
 80188f4:	f640 009b 	movw	r0, #2203	@ 0x89b
 80188f8:	f000 fde6 	bl	80194c8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80188fc:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018900:	f000 fdf4 	bl	80194ec <RadioRead>
 8018904:	4603      	mov	r3, r0
 8018906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801890a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801890e:	f023 0318 	bic.w	r3, r3, #24
 8018912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801891a:	f043 0318 	orr.w	r3, r3, #24
 801891e:	b2db      	uxtb	r3, r3
 8018920:	4619      	mov	r1, r3
 8018922:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018926:	f000 fdcf 	bl	80194c8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801892a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801892e:	f000 fddd 	bl	80194ec <RadioRead>
 8018932:	4603      	mov	r3, r0
 8018934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801893c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018948:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 801894c:	b2db      	uxtb	r3, r3
 801894e:	4619      	mov	r1, r3
 8018950:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018954:	f000 fdb8 	bl	80194c8 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018958:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801895a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801895e:	fb02 f303 	mul.w	r3, r2, r3
 8018962:	461a      	mov	r2, r3
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	fbb2 f3f3 	udiv	r3, r2, r3
 801896a:	4a4b      	ldr	r2, [pc, #300]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 801896c:	6093      	str	r3, [r2, #8]
            break;
 801896e:	e115      	b.n	8018b9c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018970:	2000      	movs	r0, #0
 8018972:	f002 f807 	bl	801a984 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018976:	4b48      	ldr	r3, [pc, #288]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018978:	2200      	movs	r2, #0
 801897a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801897e:	4a46      	ldr	r2, [pc, #280]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018984:	4b44      	ldr	r3, [pc, #272]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018986:	220b      	movs	r2, #11
 8018988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801898c:	68b8      	ldr	r0, [r7, #8]
 801898e:	f002 fee5 	bl	801b75c <SUBGRF_GetFskBandwidthRegValue>
 8018992:	4603      	mov	r3, r0
 8018994:	461a      	mov	r2, r3
 8018996:	4b40      	ldr	r3, [pc, #256]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801899c:	4b3e      	ldr	r3, [pc, #248]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 801899e:	2200      	movs	r2, #0
 80189a0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80189a2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80189a4:	00db      	lsls	r3, r3, #3
 80189a6:	b29a      	uxth	r2, r3
 80189a8:	4b3b      	ldr	r3, [pc, #236]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80189aa:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80189ac:	4b3a      	ldr	r3, [pc, #232]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80189ae:	2204      	movs	r2, #4
 80189b0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80189b2:	4b39      	ldr	r3, [pc, #228]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80189b4:	2218      	movs	r2, #24
 80189b6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80189b8:	4b37      	ldr	r3, [pc, #220]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80189ba:	2200      	movs	r2, #0
 80189bc:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80189be:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80189c2:	f083 0301 	eor.w	r3, r3, #1
 80189c6:	b2db      	uxtb	r3, r3
 80189c8:	461a      	mov	r2, r3
 80189ca:	4b33      	ldr	r3, [pc, #204]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80189cc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80189ce:	4b33      	ldr	r3, [pc, #204]	@ (8018a9c <RadioSetRxConfig+0x300>)
 80189d0:	781a      	ldrb	r2, [r3, #0]
 80189d2:	4b31      	ldr	r3, [pc, #196]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80189d4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80189d6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d003      	beq.n	80189e6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80189de:	4b2e      	ldr	r3, [pc, #184]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80189e0:	22f2      	movs	r2, #242	@ 0xf2
 80189e2:	75da      	strb	r2, [r3, #23]
 80189e4:	e002      	b.n	80189ec <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80189e6:	4b2c      	ldr	r3, [pc, #176]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80189e8:	2201      	movs	r2, #1
 80189ea:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80189ec:	4b2a      	ldr	r3, [pc, #168]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 80189ee:	2201      	movs	r2, #1
 80189f0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80189f2:	f000 fc68 	bl	80192c6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80189f6:	2000      	movs	r0, #0
 80189f8:	f7ff fdfc 	bl	80185f4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80189fc:	4828      	ldr	r0, [pc, #160]	@ (8018aa0 <RadioSetRxConfig+0x304>)
 80189fe:	f002 fa65 	bl	801aecc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018a02:	4828      	ldr	r0, [pc, #160]	@ (8018aa4 <RadioSetRxConfig+0x308>)
 8018a04:	f002 fb30 	bl	801b068 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018a08:	4a28      	ldr	r2, [pc, #160]	@ (8018aac <RadioSetRxConfig+0x310>)
 8018a0a:	f107 0314 	add.w	r3, r7, #20
 8018a0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a12:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a16:	f107 0314 	add.w	r3, r7, #20
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f001 fde9 	bl	801a5f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018a20:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018a24:	f001 fe34 	bl	801a690 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018a28:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018a2a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018a2e:	fb02 f303 	mul.w	r3, r2, r3
 8018a32:	461a      	mov	r2, r3
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a3a:	4a17      	ldr	r2, [pc, #92]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018a3c:	6093      	str	r3, [r2, #8]
            break;
 8018a3e:	e0ad      	b.n	8018b9c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018a40:	2000      	movs	r0, #0
 8018a42:	f001 ff9f 	bl	801a984 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018a46:	4b14      	ldr	r3, [pc, #80]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018a48:	2201      	movs	r2, #1
 8018a4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	b2da      	uxtb	r2, r3
 8018a52:	4b11      	ldr	r3, [pc, #68]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018a54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018a58:	4a15      	ldr	r2, [pc, #84]	@ (8018ab0 <RadioSetRxConfig+0x314>)
 8018a5a:	68bb      	ldr	r3, [r7, #8]
 8018a5c:	4413      	add	r3, r2
 8018a5e:	781a      	ldrb	r2, [r3, #0]
 8018a60:	4b0d      	ldr	r3, [pc, #52]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018a66:	4a0c      	ldr	r2, [pc, #48]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018a68:	7bbb      	ldrb	r3, [r7, #14]
 8018a6a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018a6e:	68bb      	ldr	r3, [r7, #8]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d105      	bne.n	8018a80 <RadioSetRxConfig+0x2e4>
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	2b0b      	cmp	r3, #11
 8018a78:	d008      	beq.n	8018a8c <RadioSetRxConfig+0x2f0>
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2b0c      	cmp	r3, #12
 8018a7e:	d005      	beq.n	8018a8c <RadioSetRxConfig+0x2f0>
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	2b01      	cmp	r3, #1
 8018a84:	d116      	bne.n	8018ab4 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	2b0c      	cmp	r3, #12
 8018a8a:	d113      	bne.n	8018ab4 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018a8c:	4b02      	ldr	r3, [pc, #8]	@ (8018a98 <RadioSetRxConfig+0x2fc>)
 8018a8e:	2201      	movs	r2, #1
 8018a90:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018a94:	e012      	b.n	8018abc <RadioSetRxConfig+0x320>
 8018a96:	bf00      	nop
 8018a98:	20001c68 	.word	0x20001c68
 8018a9c:	20000134 	.word	0x20000134
 8018aa0:	20001ca0 	.word	0x20001ca0
 8018aa4:	20001c76 	.word	0x20001c76
 8018aa8:	0801d944 	.word	0x0801d944
 8018aac:	0801d94c 	.word	0x0801d94c
 8018ab0:	0801dfa0 	.word	0x0801dfa0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018abc:	4b39      	ldr	r3, [pc, #228]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018abe:	2201      	movs	r2, #1
 8018ac0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018ac2:	4b38      	ldr	r3, [pc, #224]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018ac4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018ac8:	2b05      	cmp	r3, #5
 8018aca:	d004      	beq.n	8018ad6 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018acc:	4b35      	ldr	r3, [pc, #212]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018ace:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018ad2:	2b06      	cmp	r3, #6
 8018ad4:	d10a      	bne.n	8018aec <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018ad6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018ad8:	2b0b      	cmp	r3, #11
 8018ada:	d803      	bhi.n	8018ae4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018adc:	4b31      	ldr	r3, [pc, #196]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018ade:	220c      	movs	r2, #12
 8018ae0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018ae2:	e006      	b.n	8018af2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018ae6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018ae8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018aea:	e002      	b.n	8018af2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018aec:	4a2d      	ldr	r2, [pc, #180]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018aee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018af0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018af2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018af6:	4b2b      	ldr	r3, [pc, #172]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018af8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018afa:	4b2b      	ldr	r3, [pc, #172]	@ (8018ba8 <RadioSetRxConfig+0x40c>)
 8018afc:	781a      	ldrb	r2, [r3, #0]
 8018afe:	4b29      	ldr	r3, [pc, #164]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018b00:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018b02:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8018b06:	4b27      	ldr	r3, [pc, #156]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018b08:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018b0c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8018b10:	4b24      	ldr	r3, [pc, #144]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018b12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018b16:	f000 fbd6 	bl	80192c6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018b1a:	2001      	movs	r0, #1
 8018b1c:	f7ff fd6a 	bl	80185f4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b20:	4822      	ldr	r0, [pc, #136]	@ (8018bac <RadioSetRxConfig+0x410>)
 8018b22:	f002 f9d3 	bl	801aecc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b26:	4822      	ldr	r0, [pc, #136]	@ (8018bb0 <RadioSetRxConfig+0x414>)
 8018b28:	f002 fa9e 	bl	801b068 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018b2c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018b2e:	b2db      	uxtb	r3, r3
 8018b30:	4618      	mov	r0, r3
 8018b32:	f001 ff36 	bl	801a9a2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8018b36:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018b3a:	f002 fbfd 	bl	801b338 <SUBGRF_ReadRegister>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	f003 0301 	and.w	r3, r3, #1
 8018b44:	b2db      	uxtb	r3, r3
 8018b46:	4619      	mov	r1, r3
 8018b48:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018b4c:	f002 fbd2 	bl	801b2f4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018b50:	4b14      	ldr	r3, [pc, #80]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018b52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018b56:	2b01      	cmp	r3, #1
 8018b58:	d10d      	bne.n	8018b76 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018b5a:	f240 7036 	movw	r0, #1846	@ 0x736
 8018b5e:	f002 fbeb 	bl	801b338 <SUBGRF_ReadRegister>
 8018b62:	4603      	mov	r3, r0
 8018b64:	f023 0304 	bic.w	r3, r3, #4
 8018b68:	b2db      	uxtb	r3, r3
 8018b6a:	4619      	mov	r1, r3
 8018b6c:	f240 7036 	movw	r0, #1846	@ 0x736
 8018b70:	f002 fbc0 	bl	801b2f4 <SUBGRF_WriteRegister>
 8018b74:	e00c      	b.n	8018b90 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018b76:	f240 7036 	movw	r0, #1846	@ 0x736
 8018b7a:	f002 fbdd 	bl	801b338 <SUBGRF_ReadRegister>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	f043 0304 	orr.w	r3, r3, #4
 8018b84:	b2db      	uxtb	r3, r3
 8018b86:	4619      	mov	r1, r3
 8018b88:	f240 7036 	movw	r0, #1846	@ 0x736
 8018b8c:	f002 fbb2 	bl	801b2f4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018b90:	4b04      	ldr	r3, [pc, #16]	@ (8018ba4 <RadioSetRxConfig+0x408>)
 8018b92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018b96:	609a      	str	r2, [r3, #8]
            break;
 8018b98:	e000      	b.n	8018b9c <RadioSetRxConfig+0x400>
            break;
 8018b9a:	bf00      	nop
    }
}
 8018b9c:	bf00      	nop
 8018b9e:	3728      	adds	r7, #40	@ 0x28
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}
 8018ba4:	20001c68 	.word	0x20001c68
 8018ba8:	20000134 	.word	0x20000134
 8018bac:	20001ca0 	.word	0x20001ca0
 8018bb0:	20001c76 	.word	0x20001c76

08018bb4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b086      	sub	sp, #24
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	60ba      	str	r2, [r7, #8]
 8018bbc:	607b      	str	r3, [r7, #4]
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	73fb      	strb	r3, [r7, #15]
 8018bc2:	460b      	mov	r3, r1
 8018bc4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8018bc6:	f002 fe96 	bl	801b8f6 <RFW_DeInit>
    switch( modem )
 8018bca:	7bfb      	ldrb	r3, [r7, #15]
 8018bcc:	2b04      	cmp	r3, #4
 8018bce:	f000 80c7 	beq.w	8018d60 <RadioSetTxConfig+0x1ac>
 8018bd2:	2b04      	cmp	r3, #4
 8018bd4:	f300 80d6 	bgt.w	8018d84 <RadioSetTxConfig+0x1d0>
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d002      	beq.n	8018be2 <RadioSetTxConfig+0x2e>
 8018bdc:	2b01      	cmp	r3, #1
 8018bde:	d059      	beq.n	8018c94 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018be0:	e0d0      	b.n	8018d84 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018be2:	4b77      	ldr	r3, [pc, #476]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018be4:	2200      	movs	r2, #0
 8018be6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018bea:	4a75      	ldr	r2, [pc, #468]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018bec:	6a3b      	ldr	r3, [r7, #32]
 8018bee:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018bf0:	4b73      	ldr	r3, [pc, #460]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018bf2:	220b      	movs	r2, #11
 8018bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018bf8:	6878      	ldr	r0, [r7, #4]
 8018bfa:	f002 fdaf 	bl	801b75c <SUBGRF_GetFskBandwidthRegValue>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	461a      	mov	r2, r3
 8018c02:	4b6f      	ldr	r3, [pc, #444]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018c08:	4a6d      	ldr	r2, [pc, #436]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018c0e:	4b6c      	ldr	r3, [pc, #432]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c10:	2200      	movs	r2, #0
 8018c12:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018c14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018c16:	00db      	lsls	r3, r3, #3
 8018c18:	b29a      	uxth	r2, r3
 8018c1a:	4b69      	ldr	r3, [pc, #420]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c1c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018c1e:	4b68      	ldr	r3, [pc, #416]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c20:	2204      	movs	r2, #4
 8018c22:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018c24:	4b66      	ldr	r3, [pc, #408]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c26:	2218      	movs	r2, #24
 8018c28:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018c2a:	4b65      	ldr	r3, [pc, #404]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c2c:	2200      	movs	r2, #0
 8018c2e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018c30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018c34:	f083 0301 	eor.w	r3, r3, #1
 8018c38:	b2db      	uxtb	r3, r3
 8018c3a:	461a      	mov	r2, r3
 8018c3c:	4b60      	ldr	r3, [pc, #384]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c3e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018c40:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d003      	beq.n	8018c50 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018c48:	4b5d      	ldr	r3, [pc, #372]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c4a:	22f2      	movs	r2, #242	@ 0xf2
 8018c4c:	75da      	strb	r2, [r3, #23]
 8018c4e:	e002      	b.n	8018c56 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018c50:	4b5b      	ldr	r3, [pc, #364]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c52:	2201      	movs	r2, #1
 8018c54:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018c56:	4b5a      	ldr	r3, [pc, #360]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c58:	2201      	movs	r2, #1
 8018c5a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018c5c:	f000 fb33 	bl	80192c6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018c60:	2000      	movs	r0, #0
 8018c62:	f7ff fcc7 	bl	80185f4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c66:	4857      	ldr	r0, [pc, #348]	@ (8018dc4 <RadioSetTxConfig+0x210>)
 8018c68:	f002 f930 	bl	801aecc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c6c:	4856      	ldr	r0, [pc, #344]	@ (8018dc8 <RadioSetTxConfig+0x214>)
 8018c6e:	f002 f9fb 	bl	801b068 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018c72:	4a56      	ldr	r2, [pc, #344]	@ (8018dcc <RadioSetTxConfig+0x218>)
 8018c74:	f107 0310 	add.w	r3, r7, #16
 8018c78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c80:	f107 0310 	add.w	r3, r7, #16
 8018c84:	4618      	mov	r0, r3
 8018c86:	f001 fcb4 	bl	801a5f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018c8a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018c8e:	f001 fcff 	bl	801a690 <SUBGRF_SetWhiteningSeed>
            break;
 8018c92:	e078      	b.n	8018d86 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018c94:	4b4a      	ldr	r3, [pc, #296]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018c96:	2201      	movs	r2, #1
 8018c98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018c9c:	6a3b      	ldr	r3, [r7, #32]
 8018c9e:	b2da      	uxtb	r2, r3
 8018ca0:	4b47      	ldr	r3, [pc, #284]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8018dd0 <RadioSetTxConfig+0x21c>)
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	4413      	add	r3, r2
 8018cac:	781a      	ldrb	r2, [r3, #0]
 8018cae:	4b44      	ldr	r3, [pc, #272]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018cb4:	4a42      	ldr	r2, [pc, #264]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018cb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018cba:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d105      	bne.n	8018cd0 <RadioSetTxConfig+0x11c>
 8018cc4:	6a3b      	ldr	r3, [r7, #32]
 8018cc6:	2b0b      	cmp	r3, #11
 8018cc8:	d008      	beq.n	8018cdc <RadioSetTxConfig+0x128>
 8018cca:	6a3b      	ldr	r3, [r7, #32]
 8018ccc:	2b0c      	cmp	r3, #12
 8018cce:	d005      	beq.n	8018cdc <RadioSetTxConfig+0x128>
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	2b01      	cmp	r3, #1
 8018cd4:	d107      	bne.n	8018ce6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018cd6:	6a3b      	ldr	r3, [r7, #32]
 8018cd8:	2b0c      	cmp	r3, #12
 8018cda:	d104      	bne.n	8018ce6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018cdc:	4b38      	ldr	r3, [pc, #224]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018cde:	2201      	movs	r2, #1
 8018ce0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018ce4:	e003      	b.n	8018cee <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018ce6:	4b36      	ldr	r3, [pc, #216]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018ce8:	2200      	movs	r2, #0
 8018cea:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018cee:	4b34      	ldr	r3, [pc, #208]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018cf0:	2201      	movs	r2, #1
 8018cf2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018cf4:	4b32      	ldr	r3, [pc, #200]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018cfa:	2b05      	cmp	r3, #5
 8018cfc:	d004      	beq.n	8018d08 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018cfe:	4b30      	ldr	r3, [pc, #192]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018d04:	2b06      	cmp	r3, #6
 8018d06:	d10a      	bne.n	8018d1e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018d08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018d0a:	2b0b      	cmp	r3, #11
 8018d0c:	d803      	bhi.n	8018d16 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d10:	220c      	movs	r2, #12
 8018d12:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018d14:	e006      	b.n	8018d24 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018d16:	4a2a      	ldr	r2, [pc, #168]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d18:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018d1a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018d1c:	e002      	b.n	8018d24 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018d1e:	4a28      	ldr	r2, [pc, #160]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018d22:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018d24:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018d28:	4b25      	ldr	r3, [pc, #148]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d2a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018d2c:	4b29      	ldr	r3, [pc, #164]	@ (8018dd4 <RadioSetTxConfig+0x220>)
 8018d2e:	781a      	ldrb	r2, [r3, #0]
 8018d30:	4b23      	ldr	r3, [pc, #140]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d32:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018d34:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018d38:	4b21      	ldr	r3, [pc, #132]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d3a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018d3e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018d42:	4b1f      	ldr	r3, [pc, #124]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018d48:	f000 fabd 	bl	80192c6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018d4c:	2001      	movs	r0, #1
 8018d4e:	f7ff fc51 	bl	80185f4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018d52:	481c      	ldr	r0, [pc, #112]	@ (8018dc4 <RadioSetTxConfig+0x210>)
 8018d54:	f002 f8ba 	bl	801aecc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018d58:	481b      	ldr	r0, [pc, #108]	@ (8018dc8 <RadioSetTxConfig+0x214>)
 8018d5a:	f002 f985 	bl	801b068 <SUBGRF_SetPacketParams>
            break;
 8018d5e:	e012      	b.n	8018d86 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018d60:	2004      	movs	r0, #4
 8018d62:	f7ff fc47 	bl	80185f4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018d66:	4b16      	ldr	r3, [pc, #88]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d68:	2202      	movs	r2, #2
 8018d6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018d6e:	4a14      	ldr	r2, [pc, #80]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d70:	6a3b      	ldr	r3, [r7, #32]
 8018d72:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018d74:	4b12      	ldr	r3, [pc, #72]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d76:	2216      	movs	r2, #22
 8018d78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018d7c:	4811      	ldr	r0, [pc, #68]	@ (8018dc4 <RadioSetTxConfig+0x210>)
 8018d7e:	f002 f8a5 	bl	801aecc <SUBGRF_SetModulationParams>
            break;
 8018d82:	e000      	b.n	8018d86 <RadioSetTxConfig+0x1d2>
            break;
 8018d84:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	f002 fbe8 	bl	801b560 <SUBGRF_SetRfTxPower>
 8018d90:	4603      	mov	r3, r0
 8018d92:	461a      	mov	r2, r3
 8018d94:	4b0a      	ldr	r3, [pc, #40]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018d96:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018d9a:	210e      	movs	r1, #14
 8018d9c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018da0:	f002 faa8 	bl	801b2f4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018da4:	4b06      	ldr	r3, [pc, #24]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018da6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018daa:	4618      	mov	r0, r3
 8018dac:	f002 fdb7 	bl	801b91e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018db0:	4a03      	ldr	r2, [pc, #12]	@ (8018dc0 <RadioSetTxConfig+0x20c>)
 8018db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018db4:	6053      	str	r3, [r2, #4]
}
 8018db6:	bf00      	nop
 8018db8:	3718      	adds	r7, #24
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bd80      	pop	{r7, pc}
 8018dbe:	bf00      	nop
 8018dc0:	20001c68 	.word	0x20001c68
 8018dc4:	20001ca0 	.word	0x20001ca0
 8018dc8:	20001c76 	.word	0x20001c76
 8018dcc:	0801d94c 	.word	0x0801d94c
 8018dd0:	0801dfa0 	.word	0x0801dfa0
 8018dd4:	20000134 	.word	0x20000134

08018dd8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018dd8:	b480      	push	{r7}
 8018dda:	b083      	sub	sp, #12
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
    return true;
 8018de0:	2301      	movs	r3, #1
}
 8018de2:	4618      	mov	r0, r3
 8018de4:	370c      	adds	r7, #12
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bc80      	pop	{r7}
 8018dea:	4770      	bx	lr

08018dec <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018dec:	b480      	push	{r7}
 8018dee:	b085      	sub	sp, #20
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	4603      	mov	r3, r0
 8018df4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018df6:	2300      	movs	r3, #0
 8018df8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018dfa:	79fb      	ldrb	r3, [r7, #7]
 8018dfc:	2b0a      	cmp	r3, #10
 8018dfe:	d83e      	bhi.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
 8018e00:	a201      	add	r2, pc, #4	@ (adr r2, 8018e08 <RadioGetLoRaBandwidthInHz+0x1c>)
 8018e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e06:	bf00      	nop
 8018e08:	08018e35 	.word	0x08018e35
 8018e0c:	08018e45 	.word	0x08018e45
 8018e10:	08018e55 	.word	0x08018e55
 8018e14:	08018e65 	.word	0x08018e65
 8018e18:	08018e6d 	.word	0x08018e6d
 8018e1c:	08018e73 	.word	0x08018e73
 8018e20:	08018e79 	.word	0x08018e79
 8018e24:	08018e7f 	.word	0x08018e7f
 8018e28:	08018e3d 	.word	0x08018e3d
 8018e2c:	08018e4d 	.word	0x08018e4d
 8018e30:	08018e5d 	.word	0x08018e5d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018e34:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8018e38:	60fb      	str	r3, [r7, #12]
        break;
 8018e3a:	e020      	b.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018e3c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8018e40:	60fb      	str	r3, [r7, #12]
        break;
 8018e42:	e01c      	b.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018e44:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8018e48:	60fb      	str	r3, [r7, #12]
        break;
 8018e4a:	e018      	b.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018e4c:	f245 1361 	movw	r3, #20833	@ 0x5161
 8018e50:	60fb      	str	r3, [r7, #12]
        break;
 8018e52:	e014      	b.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018e54:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8018e58:	60fb      	str	r3, [r7, #12]
        break;
 8018e5a:	e010      	b.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018e5c:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018e60:	60fb      	str	r3, [r7, #12]
        break;
 8018e62:	e00c      	b.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018e64:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018e68:	60fb      	str	r3, [r7, #12]
        break;
 8018e6a:	e008      	b.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018e6c:	4b07      	ldr	r3, [pc, #28]	@ (8018e8c <RadioGetLoRaBandwidthInHz+0xa0>)
 8018e6e:	60fb      	str	r3, [r7, #12]
        break;
 8018e70:	e005      	b.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018e72:	4b07      	ldr	r3, [pc, #28]	@ (8018e90 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018e74:	60fb      	str	r3, [r7, #12]
        break;
 8018e76:	e002      	b.n	8018e7e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018e78:	4b06      	ldr	r3, [pc, #24]	@ (8018e94 <RadioGetLoRaBandwidthInHz+0xa8>)
 8018e7a:	60fb      	str	r3, [r7, #12]
        break;
 8018e7c:	bf00      	nop
    }

    return bandwidthInHz;
 8018e7e:	68fb      	ldr	r3, [r7, #12]
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	3714      	adds	r7, #20
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bc80      	pop	{r7}
 8018e88:	4770      	bx	lr
 8018e8a:	bf00      	nop
 8018e8c:	0001e848 	.word	0x0001e848
 8018e90:	0003d090 	.word	0x0003d090
 8018e94:	0007a120 	.word	0x0007a120

08018e98 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018e98:	b480      	push	{r7}
 8018e9a:	b083      	sub	sp, #12
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	6078      	str	r0, [r7, #4]
 8018ea0:	4608      	mov	r0, r1
 8018ea2:	4611      	mov	r1, r2
 8018ea4:	461a      	mov	r2, r3
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	70fb      	strb	r3, [r7, #3]
 8018eaa:	460b      	mov	r3, r1
 8018eac:	803b      	strh	r3, [r7, #0]
 8018eae:	4613      	mov	r3, r2
 8018eb0:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8018eb2:	883b      	ldrh	r3, [r7, #0]
 8018eb4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018eb6:	78ba      	ldrb	r2, [r7, #2]
 8018eb8:	f082 0201 	eor.w	r2, r2, #1
 8018ebc:	b2d2      	uxtb	r2, r2
 8018ebe:	2a00      	cmp	r2, #0
 8018ec0:	d001      	beq.n	8018ec6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8018ec2:	2208      	movs	r2, #8
 8018ec4:	e000      	b.n	8018ec8 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018ec6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018ec8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018eca:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8018ece:	7c3b      	ldrb	r3, [r7, #16]
 8018ed0:	7d39      	ldrb	r1, [r7, #20]
 8018ed2:	2900      	cmp	r1, #0
 8018ed4:	d001      	beq.n	8018eda <RadioGetGfskTimeOnAirNumerator+0x42>
 8018ed6:	2102      	movs	r1, #2
 8018ed8:	e000      	b.n	8018edc <RadioGetGfskTimeOnAirNumerator+0x44>
 8018eda:	2100      	movs	r1, #0
 8018edc:	440b      	add	r3, r1
 8018ede:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018ee0:	4413      	add	r3, r2
}
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	370c      	adds	r7, #12
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bc80      	pop	{r7}
 8018eea:	4770      	bx	lr

08018eec <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018eec:	b480      	push	{r7}
 8018eee:	b08b      	sub	sp, #44	@ 0x2c
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	60f8      	str	r0, [r7, #12]
 8018ef4:	60b9      	str	r1, [r7, #8]
 8018ef6:	4611      	mov	r1, r2
 8018ef8:	461a      	mov	r2, r3
 8018efa:	460b      	mov	r3, r1
 8018efc:	71fb      	strb	r3, [r7, #7]
 8018efe:	4613      	mov	r3, r2
 8018f00:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8018f02:	79fb      	ldrb	r3, [r7, #7]
 8018f04:	3304      	adds	r3, #4
 8018f06:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018f08:	2300      	movs	r3, #0
 8018f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8018f0e:	68bb      	ldr	r3, [r7, #8]
 8018f10:	2b05      	cmp	r3, #5
 8018f12:	d002      	beq.n	8018f1a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018f14:	68bb      	ldr	r3, [r7, #8]
 8018f16:	2b06      	cmp	r3, #6
 8018f18:	d104      	bne.n	8018f24 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8018f1a:	88bb      	ldrh	r3, [r7, #4]
 8018f1c:	2b0b      	cmp	r3, #11
 8018f1e:	d801      	bhi.n	8018f24 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8018f20:	230c      	movs	r3, #12
 8018f22:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d105      	bne.n	8018f36 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018f2a:	68bb      	ldr	r3, [r7, #8]
 8018f2c:	2b0b      	cmp	r3, #11
 8018f2e:	d008      	beq.n	8018f42 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018f30:	68bb      	ldr	r3, [r7, #8]
 8018f32:	2b0c      	cmp	r3, #12
 8018f34:	d005      	beq.n	8018f42 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	2b01      	cmp	r3, #1
 8018f3a:	d105      	bne.n	8018f48 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018f3c:	68bb      	ldr	r3, [r7, #8]
 8018f3e:	2b0c      	cmp	r3, #12
 8018f40:	d102      	bne.n	8018f48 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8018f42:	2301      	movs	r3, #1
 8018f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018f48:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018f4c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8018f4e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8018f52:	2a00      	cmp	r2, #0
 8018f54:	d001      	beq.n	8018f5a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8018f56:	2210      	movs	r2, #16
 8018f58:	e000      	b.n	8018f5c <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018f5a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018f5c:	4413      	add	r3, r2
 8018f5e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018f60:	68bb      	ldr	r3, [r7, #8]
 8018f62:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018f64:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018f66:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018f6a:	2a00      	cmp	r2, #0
 8018f6c:	d001      	beq.n	8018f72 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018f6e:	2200      	movs	r2, #0
 8018f70:	e000      	b.n	8018f74 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8018f72:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018f74:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018f76:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018f78:	68bb      	ldr	r3, [r7, #8]
 8018f7a:	2b06      	cmp	r3, #6
 8018f7c:	d803      	bhi.n	8018f86 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8018f7e:	68bb      	ldr	r3, [r7, #8]
 8018f80:	009b      	lsls	r3, r3, #2
 8018f82:	623b      	str	r3, [r7, #32]
 8018f84:	e00e      	b.n	8018fa4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8018f86:	69fb      	ldr	r3, [r7, #28]
 8018f88:	3308      	adds	r3, #8
 8018f8a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d004      	beq.n	8018f9e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018f94:	68bb      	ldr	r3, [r7, #8]
 8018f96:	3b02      	subs	r3, #2
 8018f98:	009b      	lsls	r3, r3, #2
 8018f9a:	623b      	str	r3, [r7, #32]
 8018f9c:	e002      	b.n	8018fa4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	009b      	lsls	r3, r3, #2
 8018fa2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018fa4:	69fb      	ldr	r3, [r7, #28]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	da01      	bge.n	8018fae <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018faa:	2300      	movs	r3, #0
 8018fac:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8018fae:	69fa      	ldr	r2, [r7, #28]
 8018fb0:	6a3b      	ldr	r3, [r7, #32]
 8018fb2:	4413      	add	r3, r2
 8018fb4:	1e5a      	subs	r2, r3, #1
 8018fb6:	6a3b      	ldr	r3, [r7, #32]
 8018fb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8018fbc:	697a      	ldr	r2, [r7, #20]
 8018fbe:	fb03 f202 	mul.w	r2, r3, r2
 8018fc2:	88bb      	ldrh	r3, [r7, #4]
 8018fc4:	4413      	add	r3, r2
    int32_t intermediate =
 8018fc6:	330c      	adds	r3, #12
 8018fc8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018fca:	68bb      	ldr	r3, [r7, #8]
 8018fcc:	2b06      	cmp	r3, #6
 8018fce:	d802      	bhi.n	8018fd6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018fd0:	69bb      	ldr	r3, [r7, #24]
 8018fd2:	3302      	adds	r3, #2
 8018fd4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018fd6:	69bb      	ldr	r3, [r7, #24]
 8018fd8:	009b      	lsls	r3, r3, #2
 8018fda:	1c5a      	adds	r2, r3, #1
 8018fdc:	68bb      	ldr	r3, [r7, #8]
 8018fde:	3b02      	subs	r3, #2
 8018fe0:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	372c      	adds	r7, #44	@ 0x2c
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	bc80      	pop	{r7}
 8018fec:	4770      	bx	lr
	...

08018ff0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b08a      	sub	sp, #40	@ 0x28
 8018ff4:	af04      	add	r7, sp, #16
 8018ff6:	60b9      	str	r1, [r7, #8]
 8018ff8:	607a      	str	r2, [r7, #4]
 8018ffa:	461a      	mov	r2, r3
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	73fb      	strb	r3, [r7, #15]
 8019000:	4613      	mov	r3, r2
 8019002:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019004:	2300      	movs	r3, #0
 8019006:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019008:	2301      	movs	r3, #1
 801900a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801900c:	7bfb      	ldrb	r3, [r7, #15]
 801900e:	2b00      	cmp	r3, #0
 8019010:	d002      	beq.n	8019018 <RadioTimeOnAir+0x28>
 8019012:	2b01      	cmp	r3, #1
 8019014:	d017      	beq.n	8019046 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019016:	e035      	b.n	8019084 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019018:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 801901c:	8c3a      	ldrh	r2, [r7, #32]
 801901e:	7bb9      	ldrb	r1, [r7, #14]
 8019020:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019024:	9301      	str	r3, [sp, #4]
 8019026:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801902a:	9300      	str	r3, [sp, #0]
 801902c:	4603      	mov	r3, r0
 801902e:	6878      	ldr	r0, [r7, #4]
 8019030:	f7ff ff32 	bl	8018e98 <RadioGetGfskTimeOnAirNumerator>
 8019034:	4603      	mov	r3, r0
 8019036:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801903a:	fb02 f303 	mul.w	r3, r2, r3
 801903e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	613b      	str	r3, [r7, #16]
        break;
 8019044:	e01e      	b.n	8019084 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019046:	8c39      	ldrh	r1, [r7, #32]
 8019048:	7bba      	ldrb	r2, [r7, #14]
 801904a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801904e:	9302      	str	r3, [sp, #8]
 8019050:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019054:	9301      	str	r3, [sp, #4]
 8019056:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801905a:	9300      	str	r3, [sp, #0]
 801905c:	460b      	mov	r3, r1
 801905e:	6879      	ldr	r1, [r7, #4]
 8019060:	68b8      	ldr	r0, [r7, #8]
 8019062:	f7ff ff43 	bl	8018eec <RadioGetLoRaTimeOnAirNumerator>
 8019066:	4603      	mov	r3, r0
 8019068:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801906c:	fb02 f303 	mul.w	r3, r2, r3
 8019070:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019072:	4a0a      	ldr	r2, [pc, #40]	@ (801909c <RadioTimeOnAir+0xac>)
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	4413      	add	r3, r2
 8019078:	781b      	ldrb	r3, [r3, #0]
 801907a:	4618      	mov	r0, r3
 801907c:	f7ff feb6 	bl	8018dec <RadioGetLoRaBandwidthInHz>
 8019080:	6138      	str	r0, [r7, #16]
        break;
 8019082:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019084:	697a      	ldr	r2, [r7, #20]
 8019086:	693b      	ldr	r3, [r7, #16]
 8019088:	4413      	add	r3, r2
 801908a:	1e5a      	subs	r2, r3, #1
 801908c:	693b      	ldr	r3, [r7, #16]
 801908e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019092:	4618      	mov	r0, r3
 8019094:	3718      	adds	r7, #24
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}
 801909a:	bf00      	nop
 801909c:	0801dfa0 	.word	0x0801dfa0

080190a0 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	b084      	sub	sp, #16
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
 80190a8:	460b      	mov	r3, r1
 80190aa:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80190ac:	2300      	movs	r3, #0
 80190ae:	2200      	movs	r2, #0
 80190b0:	f240 2101 	movw	r1, #513	@ 0x201
 80190b4:	f240 2001 	movw	r0, #513	@ 0x201
 80190b8:	f001 fd72 	bl	801aba0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80190bc:	4b73      	ldr	r3, [pc, #460]	@ (801928c <RadioSend+0x1ec>)
 80190be:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80190c2:	2101      	movs	r1, #1
 80190c4:	4618      	mov	r0, r3
 80190c6:	f002 fa23 	bl	801b510 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80190ca:	4b70      	ldr	r3, [pc, #448]	@ (801928c <RadioSend+0x1ec>)
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	2b01      	cmp	r3, #1
 80190d0:	d112      	bne.n	80190f8 <RadioSend+0x58>
 80190d2:	4b6e      	ldr	r3, [pc, #440]	@ (801928c <RadioSend+0x1ec>)
 80190d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80190d8:	2b06      	cmp	r3, #6
 80190da:	d10d      	bne.n	80190f8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80190dc:	f640 0089 	movw	r0, #2185	@ 0x889
 80190e0:	f002 f92a 	bl	801b338 <SUBGRF_ReadRegister>
 80190e4:	4603      	mov	r3, r0
 80190e6:	f023 0304 	bic.w	r3, r3, #4
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	4619      	mov	r1, r3
 80190ee:	f640 0089 	movw	r0, #2185	@ 0x889
 80190f2:	f002 f8ff 	bl	801b2f4 <SUBGRF_WriteRegister>
 80190f6:	e00c      	b.n	8019112 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80190f8:	f640 0089 	movw	r0, #2185	@ 0x889
 80190fc:	f002 f91c 	bl	801b338 <SUBGRF_ReadRegister>
 8019100:	4603      	mov	r3, r0
 8019102:	f043 0304 	orr.w	r3, r3, #4
 8019106:	b2db      	uxtb	r3, r3
 8019108:	4619      	mov	r1, r3
 801910a:	f640 0089 	movw	r0, #2185	@ 0x889
 801910e:	f002 f8f1 	bl	801b2f4 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019112:	4b5e      	ldr	r3, [pc, #376]	@ (801928c <RadioSend+0x1ec>)
 8019114:	781b      	ldrb	r3, [r3, #0]
 8019116:	2b04      	cmp	r3, #4
 8019118:	f200 80a8 	bhi.w	801926c <RadioSend+0x1cc>
 801911c:	a201      	add	r2, pc, #4	@ (adr r2, 8019124 <RadioSend+0x84>)
 801911e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019122:	bf00      	nop
 8019124:	08019153 	.word	0x08019153
 8019128:	08019139 	.word	0x08019139
 801912c:	08019153 	.word	0x08019153
 8019130:	080191b5 	.word	0x080191b5
 8019134:	080191d5 	.word	0x080191d5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019138:	4a54      	ldr	r2, [pc, #336]	@ (801928c <RadioSend+0x1ec>)
 801913a:	78fb      	ldrb	r3, [r7, #3]
 801913c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801913e:	4854      	ldr	r0, [pc, #336]	@ (8019290 <RadioSend+0x1f0>)
 8019140:	f001 ff92 	bl	801b068 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019144:	78fb      	ldrb	r3, [r7, #3]
 8019146:	2200      	movs	r2, #0
 8019148:	4619      	mov	r1, r3
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f001 fa3e 	bl	801a5cc <SUBGRF_SendPayload>
            break;
 8019150:	e08d      	b.n	801926e <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019152:	f002 fbd6 	bl	801b902 <RFW_Is_Init>
 8019156:	4603      	mov	r3, r0
 8019158:	2b01      	cmp	r3, #1
 801915a:	d11e      	bne.n	801919a <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801915c:	f107 020d 	add.w	r2, r7, #13
 8019160:	78fb      	ldrb	r3, [r7, #3]
 8019162:	4619      	mov	r1, r3
 8019164:	6878      	ldr	r0, [r7, #4]
 8019166:	f002 fbe4 	bl	801b932 <RFW_TransmitInit>
 801916a:	4603      	mov	r3, r0
 801916c:	2b00      	cmp	r3, #0
 801916e:	d10c      	bne.n	801918a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019170:	7b7a      	ldrb	r2, [r7, #13]
 8019172:	4b46      	ldr	r3, [pc, #280]	@ (801928c <RadioSend+0x1ec>)
 8019174:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019176:	4846      	ldr	r0, [pc, #280]	@ (8019290 <RadioSend+0x1f0>)
 8019178:	f001 ff76 	bl	801b068 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801917c:	7b7b      	ldrb	r3, [r7, #13]
 801917e:	2200      	movs	r2, #0
 8019180:	4619      	mov	r1, r3
 8019182:	6878      	ldr	r0, [r7, #4]
 8019184:	f001 fa22 	bl	801a5cc <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019188:	e071      	b.n	801926e <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801918a:	4b42      	ldr	r3, [pc, #264]	@ (8019294 <RadioSend+0x1f4>)
 801918c:	2201      	movs	r2, #1
 801918e:	2100      	movs	r1, #0
 8019190:	2002      	movs	r0, #2
 8019192:	f003 fc87 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8019196:	2303      	movs	r3, #3
 8019198:	e073      	b.n	8019282 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801919a:	4a3c      	ldr	r2, [pc, #240]	@ (801928c <RadioSend+0x1ec>)
 801919c:	78fb      	ldrb	r3, [r7, #3]
 801919e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80191a0:	483b      	ldr	r0, [pc, #236]	@ (8019290 <RadioSend+0x1f0>)
 80191a2:	f001 ff61 	bl	801b068 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80191a6:	78fb      	ldrb	r3, [r7, #3]
 80191a8:	2200      	movs	r2, #0
 80191aa:	4619      	mov	r1, r3
 80191ac:	6878      	ldr	r0, [r7, #4]
 80191ae:	f001 fa0d 	bl	801a5cc <SUBGRF_SendPayload>
            break;
 80191b2:	e05c      	b.n	801926e <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80191b4:	4b35      	ldr	r3, [pc, #212]	@ (801928c <RadioSend+0x1ec>)
 80191b6:	2202      	movs	r2, #2
 80191b8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80191ba:	4a34      	ldr	r2, [pc, #208]	@ (801928c <RadioSend+0x1ec>)
 80191bc:	78fb      	ldrb	r3, [r7, #3]
 80191be:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80191c0:	4833      	ldr	r0, [pc, #204]	@ (8019290 <RadioSend+0x1f0>)
 80191c2:	f001 ff51 	bl	801b068 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80191c6:	78fb      	ldrb	r3, [r7, #3]
 80191c8:	2200      	movs	r2, #0
 80191ca:	4619      	mov	r1, r3
 80191cc:	6878      	ldr	r0, [r7, #4]
 80191ce:	f001 f9fd 	bl	801a5cc <SUBGRF_SendPayload>
            break;
 80191d2:	e04c      	b.n	801926e <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80191d4:	78fb      	ldrb	r3, [r7, #3]
 80191d6:	461a      	mov	r2, r3
 80191d8:	6879      	ldr	r1, [r7, #4]
 80191da:	482f      	ldr	r0, [pc, #188]	@ (8019298 <RadioSend+0x1f8>)
 80191dc:	f000 fcca 	bl	8019b74 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80191e0:	4b2a      	ldr	r3, [pc, #168]	@ (801928c <RadioSend+0x1ec>)
 80191e2:	2202      	movs	r2, #2
 80191e4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80191e6:	78fb      	ldrb	r3, [r7, #3]
 80191e8:	3301      	adds	r3, #1
 80191ea:	b2da      	uxtb	r2, r3
 80191ec:	4b27      	ldr	r3, [pc, #156]	@ (801928c <RadioSend+0x1ec>)
 80191ee:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80191f0:	4827      	ldr	r0, [pc, #156]	@ (8019290 <RadioSend+0x1f0>)
 80191f2:	f001 ff39 	bl	801b068 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80191f6:	2100      	movs	r1, #0
 80191f8:	20f1      	movs	r0, #241	@ 0xf1
 80191fa:	f000 f965 	bl	80194c8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80191fe:	2100      	movs	r1, #0
 8019200:	20f0      	movs	r0, #240	@ 0xf0
 8019202:	f000 f961 	bl	80194c8 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019206:	4b21      	ldr	r3, [pc, #132]	@ (801928c <RadioSend+0x1ec>)
 8019208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801920a:	2b64      	cmp	r3, #100	@ 0x64
 801920c:	d108      	bne.n	8019220 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801920e:	2170      	movs	r1, #112	@ 0x70
 8019210:	20f3      	movs	r0, #243	@ 0xf3
 8019212:	f000 f959 	bl	80194c8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019216:	211d      	movs	r1, #29
 8019218:	20f2      	movs	r0, #242	@ 0xf2
 801921a:	f000 f955 	bl	80194c8 <RadioWrite>
 801921e:	e007      	b.n	8019230 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019220:	21e1      	movs	r1, #225	@ 0xe1
 8019222:	20f3      	movs	r0, #243	@ 0xf3
 8019224:	f000 f950 	bl	80194c8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019228:	2104      	movs	r1, #4
 801922a:	20f2      	movs	r0, #242	@ 0xf2
 801922c:	f000 f94c 	bl	80194c8 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019230:	78fb      	ldrb	r3, [r7, #3]
 8019232:	b29b      	uxth	r3, r3
 8019234:	00db      	lsls	r3, r3, #3
 8019236:	b29b      	uxth	r3, r3
 8019238:	3302      	adds	r3, #2
 801923a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801923c:	89fb      	ldrh	r3, [r7, #14]
 801923e:	0a1b      	lsrs	r3, r3, #8
 8019240:	b29b      	uxth	r3, r3
 8019242:	b2db      	uxtb	r3, r3
 8019244:	4619      	mov	r1, r3
 8019246:	20f4      	movs	r0, #244	@ 0xf4
 8019248:	f000 f93e 	bl	80194c8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801924c:	89fb      	ldrh	r3, [r7, #14]
 801924e:	b2db      	uxtb	r3, r3
 8019250:	4619      	mov	r1, r3
 8019252:	20f5      	movs	r0, #245	@ 0xf5
 8019254:	f000 f938 	bl	80194c8 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8019258:	78fb      	ldrb	r3, [r7, #3]
 801925a:	3301      	adds	r3, #1
 801925c:	b2db      	uxtb	r3, r3
 801925e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8019262:	4619      	mov	r1, r3
 8019264:	480c      	ldr	r0, [pc, #48]	@ (8019298 <RadioSend+0x1f8>)
 8019266:	f001 f9b1 	bl	801a5cc <SUBGRF_SendPayload>
            break;
 801926a:	e000      	b.n	801926e <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801926c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801926e:	4b07      	ldr	r3, [pc, #28]	@ (801928c <RadioSend+0x1ec>)
 8019270:	685b      	ldr	r3, [r3, #4]
 8019272:	4619      	mov	r1, r3
 8019274:	4809      	ldr	r0, [pc, #36]	@ (801929c <RadioSend+0x1fc>)
 8019276:	f003 fa7b 	bl	801c770 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801927a:	4808      	ldr	r0, [pc, #32]	@ (801929c <RadioSend+0x1fc>)
 801927c:	f003 f99a 	bl	801c5b4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019280:	2300      	movs	r3, #0
}
 8019282:	4618      	mov	r0, r3
 8019284:	3710      	adds	r7, #16
 8019286:	46bd      	mov	sp, r7
 8019288:	bd80      	pop	{r7, pc}
 801928a:	bf00      	nop
 801928c:	20001c68 	.word	0x20001c68
 8019290:	20001c76 	.word	0x20001c76
 8019294:	0801d954 	.word	0x0801d954
 8019298:	20001b64 	.word	0x20001b64
 801929c:	20001cc4 	.word	0x20001cc4

080192a0 <RadioSleep>:

static void RadioSleep( void )
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b082      	sub	sp, #8
 80192a4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80192a6:	2300      	movs	r3, #0
 80192a8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80192aa:	793b      	ldrb	r3, [r7, #4]
 80192ac:	f043 0304 	orr.w	r3, r3, #4
 80192b0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80192b2:	7938      	ldrb	r0, [r7, #4]
 80192b4:	f001 fa66 	bl	801a784 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80192b8:	2002      	movs	r0, #2
 80192ba:	f7e9 f8ab 	bl	8002414 <HAL_Delay>
}
 80192be:	bf00      	nop
 80192c0:	3708      	adds	r7, #8
 80192c2:	46bd      	mov	sp, r7
 80192c4:	bd80      	pop	{r7, pc}

080192c6 <RadioStandby>:

static void RadioStandby( void )
{
 80192c6:	b580      	push	{r7, lr}
 80192c8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80192ca:	2000      	movs	r0, #0
 80192cc:	f001 fa8e 	bl	801a7ec <SUBGRF_SetStandby>
}
 80192d0:	bf00      	nop
 80192d2:	bd80      	pop	{r7, pc}

080192d4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b082      	sub	sp, #8
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80192dc:	f002 fb11 	bl	801b902 <RFW_Is_Init>
 80192e0:	4603      	mov	r3, r0
 80192e2:	2b01      	cmp	r3, #1
 80192e4:	d102      	bne.n	80192ec <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80192e6:	f002 fb34 	bl	801b952 <RFW_ReceiveInit>
 80192ea:	e007      	b.n	80192fc <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80192ec:	2300      	movs	r3, #0
 80192ee:	2200      	movs	r2, #0
 80192f0:	f240 2162 	movw	r1, #610	@ 0x262
 80192f4:	f240 2062 	movw	r0, #610	@ 0x262
 80192f8:	f001 fc52 	bl	801aba0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d006      	beq.n	8019310 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019302:	6879      	ldr	r1, [r7, #4]
 8019304:	4811      	ldr	r0, [pc, #68]	@ (801934c <RadioRx+0x78>)
 8019306:	f003 fa33 	bl	801c770 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801930a:	4810      	ldr	r0, [pc, #64]	@ (801934c <RadioRx+0x78>)
 801930c:	f003 f952 	bl	801c5b4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019310:	4b0f      	ldr	r3, [pc, #60]	@ (8019350 <RadioRx+0x7c>)
 8019312:	2200      	movs	r2, #0
 8019314:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019316:	4b0e      	ldr	r3, [pc, #56]	@ (8019350 <RadioRx+0x7c>)
 8019318:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801931c:	2100      	movs	r1, #0
 801931e:	4618      	mov	r0, r3
 8019320:	f002 f8f6 	bl	801b510 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019324:	4b0a      	ldr	r3, [pc, #40]	@ (8019350 <RadioRx+0x7c>)
 8019326:	785b      	ldrb	r3, [r3, #1]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d004      	beq.n	8019336 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801932c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019330:	f001 fa98 	bl	801a864 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019334:	e005      	b.n	8019342 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019336:	4b06      	ldr	r3, [pc, #24]	@ (8019350 <RadioRx+0x7c>)
 8019338:	689b      	ldr	r3, [r3, #8]
 801933a:	019b      	lsls	r3, r3, #6
 801933c:	4618      	mov	r0, r3
 801933e:	f001 fa91 	bl	801a864 <SUBGRF_SetRx>
}
 8019342:	bf00      	nop
 8019344:	3708      	adds	r7, #8
 8019346:	46bd      	mov	sp, r7
 8019348:	bd80      	pop	{r7, pc}
 801934a:	bf00      	nop
 801934c:	20001cdc 	.word	0x20001cdc
 8019350:	20001c68 	.word	0x20001c68

08019354 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019354:	b580      	push	{r7, lr}
 8019356:	b082      	sub	sp, #8
 8019358:	af00      	add	r7, sp, #0
 801935a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801935c:	f002 fad1 	bl	801b902 <RFW_Is_Init>
 8019360:	4603      	mov	r3, r0
 8019362:	2b01      	cmp	r3, #1
 8019364:	d102      	bne.n	801936c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019366:	f002 faf4 	bl	801b952 <RFW_ReceiveInit>
 801936a:	e007      	b.n	801937c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801936c:	2300      	movs	r3, #0
 801936e:	2200      	movs	r2, #0
 8019370:	f240 2162 	movw	r1, #610	@ 0x262
 8019374:	f240 2062 	movw	r0, #610	@ 0x262
 8019378:	f001 fc12 	bl	801aba0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d006      	beq.n	8019390 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019382:	6879      	ldr	r1, [r7, #4]
 8019384:	4811      	ldr	r0, [pc, #68]	@ (80193cc <RadioRxBoosted+0x78>)
 8019386:	f003 f9f3 	bl	801c770 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801938a:	4810      	ldr	r0, [pc, #64]	@ (80193cc <RadioRxBoosted+0x78>)
 801938c:	f003 f912 	bl	801c5b4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019390:	4b0f      	ldr	r3, [pc, #60]	@ (80193d0 <RadioRxBoosted+0x7c>)
 8019392:	2200      	movs	r2, #0
 8019394:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019396:	4b0e      	ldr	r3, [pc, #56]	@ (80193d0 <RadioRxBoosted+0x7c>)
 8019398:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801939c:	2100      	movs	r1, #0
 801939e:	4618      	mov	r0, r3
 80193a0:	f002 f8b6 	bl	801b510 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80193a4:	4b0a      	ldr	r3, [pc, #40]	@ (80193d0 <RadioRxBoosted+0x7c>)
 80193a6:	785b      	ldrb	r3, [r3, #1]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d004      	beq.n	80193b6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80193ac:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80193b0:	f001 fa78 	bl	801a8a4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80193b4:	e005      	b.n	80193c2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80193b6:	4b06      	ldr	r3, [pc, #24]	@ (80193d0 <RadioRxBoosted+0x7c>)
 80193b8:	689b      	ldr	r3, [r3, #8]
 80193ba:	019b      	lsls	r3, r3, #6
 80193bc:	4618      	mov	r0, r3
 80193be:	f001 fa71 	bl	801a8a4 <SUBGRF_SetRxBoosted>
}
 80193c2:	bf00      	nop
 80193c4:	3708      	adds	r7, #8
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}
 80193ca:	bf00      	nop
 80193cc:	20001cdc 	.word	0x20001cdc
 80193d0:	20001c68 	.word	0x20001c68

080193d4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b082      	sub	sp, #8
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
 80193dc:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	005a      	lsls	r2, r3, #1
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	4413      	add	r3, r2
 80193e6:	4a0c      	ldr	r2, [pc, #48]	@ (8019418 <RadioSetRxDutyCycle+0x44>)
 80193e8:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80193ea:	2300      	movs	r3, #0
 80193ec:	2200      	movs	r2, #0
 80193ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80193f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80193f6:	f001 fbd3 	bl	801aba0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80193fa:	4b07      	ldr	r3, [pc, #28]	@ (8019418 <RadioSetRxDutyCycle+0x44>)
 80193fc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019400:	2100      	movs	r1, #0
 8019402:	4618      	mov	r0, r3
 8019404:	f002 f884 	bl	801b510 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019408:	6839      	ldr	r1, [r7, #0]
 801940a:	6878      	ldr	r0, [r7, #4]
 801940c:	f001 fa6e 	bl	801a8ec <SUBGRF_SetRxDutyCycle>
}
 8019410:	bf00      	nop
 8019412:	3708      	adds	r7, #8
 8019414:	46bd      	mov	sp, r7
 8019416:	bd80      	pop	{r7, pc}
 8019418:	20001c68 	.word	0x20001c68

0801941c <RadioStartCad>:

static void RadioStartCad( void )
{
 801941c:	b580      	push	{r7, lr}
 801941e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019420:	4b09      	ldr	r3, [pc, #36]	@ (8019448 <RadioStartCad+0x2c>)
 8019422:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019426:	2100      	movs	r1, #0
 8019428:	4618      	mov	r0, r3
 801942a:	f002 f871 	bl	801b510 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801942e:	2300      	movs	r3, #0
 8019430:	2200      	movs	r2, #0
 8019432:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8019436:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801943a:	f001 fbb1 	bl	801aba0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801943e:	f001 fa81 	bl	801a944 <SUBGRF_SetCad>
}
 8019442:	bf00      	nop
 8019444:	bd80      	pop	{r7, pc}
 8019446:	bf00      	nop
 8019448:	20001c68 	.word	0x20001c68

0801944c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b084      	sub	sp, #16
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
 8019454:	460b      	mov	r3, r1
 8019456:	70fb      	strb	r3, [r7, #3]
 8019458:	4613      	mov	r3, r2
 801945a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801945c:	883b      	ldrh	r3, [r7, #0]
 801945e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019462:	fb02 f303 	mul.w	r3, r2, r3
 8019466:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019468:	6878      	ldr	r0, [r7, #4]
 801946a:	f001 fbf5 	bl	801ac58 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801946e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019472:	4618      	mov	r0, r3
 8019474:	f002 f874 	bl	801b560 <SUBGRF_SetRfTxPower>
 8019478:	4603      	mov	r3, r0
 801947a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801947c:	210e      	movs	r1, #14
 801947e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019482:	f001 ff37 	bl	801b2f4 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019486:	7afb      	ldrb	r3, [r7, #11]
 8019488:	2101      	movs	r1, #1
 801948a:	4618      	mov	r0, r3
 801948c:	f002 f840 	bl	801b510 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019490:	f001 fa66 	bl	801a960 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019494:	68f9      	ldr	r1, [r7, #12]
 8019496:	4805      	ldr	r0, [pc, #20]	@ (80194ac <RadioSetTxContinuousWave+0x60>)
 8019498:	f003 f96a 	bl	801c770 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801949c:	4803      	ldr	r0, [pc, #12]	@ (80194ac <RadioSetTxContinuousWave+0x60>)
 801949e:	f003 f889 	bl	801c5b4 <UTIL_TIMER_Start>
}
 80194a2:	bf00      	nop
 80194a4:	3710      	adds	r7, #16
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bd80      	pop	{r7, pc}
 80194aa:	bf00      	nop
 80194ac:	20001cc4 	.word	0x20001cc4

080194b0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b082      	sub	sp, #8
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	4603      	mov	r3, r0
 80194b8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80194ba:	f001 fe88 	bl	801b1ce <SUBGRF_GetRssiInst>
 80194be:	4603      	mov	r3, r0
}
 80194c0:	4618      	mov	r0, r3
 80194c2:	3708      	adds	r7, #8
 80194c4:	46bd      	mov	sp, r7
 80194c6:	bd80      	pop	{r7, pc}

080194c8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b082      	sub	sp, #8
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	4603      	mov	r3, r0
 80194d0:	460a      	mov	r2, r1
 80194d2:	80fb      	strh	r3, [r7, #6]
 80194d4:	4613      	mov	r3, r2
 80194d6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80194d8:	797a      	ldrb	r2, [r7, #5]
 80194da:	88fb      	ldrh	r3, [r7, #6]
 80194dc:	4611      	mov	r1, r2
 80194de:	4618      	mov	r0, r3
 80194e0:	f001 ff08 	bl	801b2f4 <SUBGRF_WriteRegister>
}
 80194e4:	bf00      	nop
 80194e6:	3708      	adds	r7, #8
 80194e8:	46bd      	mov	sp, r7
 80194ea:	bd80      	pop	{r7, pc}

080194ec <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b082      	sub	sp, #8
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	4603      	mov	r3, r0
 80194f4:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80194f6:	88fb      	ldrh	r3, [r7, #6]
 80194f8:	4618      	mov	r0, r3
 80194fa:	f001 ff1d 	bl	801b338 <SUBGRF_ReadRegister>
 80194fe:	4603      	mov	r3, r0
}
 8019500:	4618      	mov	r0, r3
 8019502:	3708      	adds	r7, #8
 8019504:	46bd      	mov	sp, r7
 8019506:	bd80      	pop	{r7, pc}

08019508 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b082      	sub	sp, #8
 801950c:	af00      	add	r7, sp, #0
 801950e:	4603      	mov	r3, r0
 8019510:	6039      	str	r1, [r7, #0]
 8019512:	80fb      	strh	r3, [r7, #6]
 8019514:	4613      	mov	r3, r2
 8019516:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019518:	797b      	ldrb	r3, [r7, #5]
 801951a:	b29a      	uxth	r2, r3
 801951c:	88fb      	ldrh	r3, [r7, #6]
 801951e:	6839      	ldr	r1, [r7, #0]
 8019520:	4618      	mov	r0, r3
 8019522:	f001 ff29 	bl	801b378 <SUBGRF_WriteRegisters>
}
 8019526:	bf00      	nop
 8019528:	3708      	adds	r7, #8
 801952a:	46bd      	mov	sp, r7
 801952c:	bd80      	pop	{r7, pc}

0801952e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801952e:	b580      	push	{r7, lr}
 8019530:	b082      	sub	sp, #8
 8019532:	af00      	add	r7, sp, #0
 8019534:	4603      	mov	r3, r0
 8019536:	6039      	str	r1, [r7, #0]
 8019538:	80fb      	strh	r3, [r7, #6]
 801953a:	4613      	mov	r3, r2
 801953c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801953e:	797b      	ldrb	r3, [r7, #5]
 8019540:	b29a      	uxth	r2, r3
 8019542:	88fb      	ldrh	r3, [r7, #6]
 8019544:	6839      	ldr	r1, [r7, #0]
 8019546:	4618      	mov	r0, r3
 8019548:	f001 ff38 	bl	801b3bc <SUBGRF_ReadRegisters>
}
 801954c:	bf00      	nop
 801954e:	3708      	adds	r7, #8
 8019550:	46bd      	mov	sp, r7
 8019552:	bd80      	pop	{r7, pc}

08019554 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b082      	sub	sp, #8
 8019558:	af00      	add	r7, sp, #0
 801955a:	4603      	mov	r3, r0
 801955c:	460a      	mov	r2, r1
 801955e:	71fb      	strb	r3, [r7, #7]
 8019560:	4613      	mov	r3, r2
 8019562:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019564:	79fb      	ldrb	r3, [r7, #7]
 8019566:	2b01      	cmp	r3, #1
 8019568:	d10a      	bne.n	8019580 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801956a:	4a0e      	ldr	r2, [pc, #56]	@ (80195a4 <RadioSetMaxPayloadLength+0x50>)
 801956c:	79bb      	ldrb	r3, [r7, #6]
 801956e:	7013      	strb	r3, [r2, #0]
 8019570:	4b0c      	ldr	r3, [pc, #48]	@ (80195a4 <RadioSetMaxPayloadLength+0x50>)
 8019572:	781a      	ldrb	r2, [r3, #0]
 8019574:	4b0c      	ldr	r3, [pc, #48]	@ (80195a8 <RadioSetMaxPayloadLength+0x54>)
 8019576:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019578:	480c      	ldr	r0, [pc, #48]	@ (80195ac <RadioSetMaxPayloadLength+0x58>)
 801957a:	f001 fd75 	bl	801b068 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801957e:	e00d      	b.n	801959c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019580:	4b09      	ldr	r3, [pc, #36]	@ (80195a8 <RadioSetMaxPayloadLength+0x54>)
 8019582:	7d5b      	ldrb	r3, [r3, #21]
 8019584:	2b01      	cmp	r3, #1
 8019586:	d109      	bne.n	801959c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019588:	4a06      	ldr	r2, [pc, #24]	@ (80195a4 <RadioSetMaxPayloadLength+0x50>)
 801958a:	79bb      	ldrb	r3, [r7, #6]
 801958c:	7013      	strb	r3, [r2, #0]
 801958e:	4b05      	ldr	r3, [pc, #20]	@ (80195a4 <RadioSetMaxPayloadLength+0x50>)
 8019590:	781a      	ldrb	r2, [r3, #0]
 8019592:	4b05      	ldr	r3, [pc, #20]	@ (80195a8 <RadioSetMaxPayloadLength+0x54>)
 8019594:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019596:	4805      	ldr	r0, [pc, #20]	@ (80195ac <RadioSetMaxPayloadLength+0x58>)
 8019598:	f001 fd66 	bl	801b068 <SUBGRF_SetPacketParams>
}
 801959c:	bf00      	nop
 801959e:	3708      	adds	r7, #8
 80195a0:	46bd      	mov	sp, r7
 80195a2:	bd80      	pop	{r7, pc}
 80195a4:	20000134 	.word	0x20000134
 80195a8:	20001c68 	.word	0x20001c68
 80195ac:	20001c76 	.word	0x20001c76

080195b0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b082      	sub	sp, #8
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	4603      	mov	r3, r0
 80195b8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80195ba:	4a13      	ldr	r2, [pc, #76]	@ (8019608 <RadioSetPublicNetwork+0x58>)
 80195bc:	79fb      	ldrb	r3, [r7, #7]
 80195be:	7313      	strb	r3, [r2, #12]
 80195c0:	4b11      	ldr	r3, [pc, #68]	@ (8019608 <RadioSetPublicNetwork+0x58>)
 80195c2:	7b1a      	ldrb	r2, [r3, #12]
 80195c4:	4b10      	ldr	r3, [pc, #64]	@ (8019608 <RadioSetPublicNetwork+0x58>)
 80195c6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80195c8:	2001      	movs	r0, #1
 80195ca:	f7ff f813 	bl	80185f4 <RadioSetModem>
    if( enable == true )
 80195ce:	79fb      	ldrb	r3, [r7, #7]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d00a      	beq.n	80195ea <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80195d4:	2134      	movs	r1, #52	@ 0x34
 80195d6:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80195da:	f001 fe8b 	bl	801b2f4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80195de:	2144      	movs	r1, #68	@ 0x44
 80195e0:	f240 7041 	movw	r0, #1857	@ 0x741
 80195e4:	f001 fe86 	bl	801b2f4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80195e8:	e009      	b.n	80195fe <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80195ea:	2114      	movs	r1, #20
 80195ec:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80195f0:	f001 fe80 	bl	801b2f4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80195f4:	2124      	movs	r1, #36	@ 0x24
 80195f6:	f240 7041 	movw	r0, #1857	@ 0x741
 80195fa:	f001 fe7b 	bl	801b2f4 <SUBGRF_WriteRegister>
}
 80195fe:	bf00      	nop
 8019600:	3708      	adds	r7, #8
 8019602:	46bd      	mov	sp, r7
 8019604:	bd80      	pop	{r7, pc}
 8019606:	bf00      	nop
 8019608:	20001c68 	.word	0x20001c68

0801960c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801960c:	b580      	push	{r7, lr}
 801960e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019610:	f001 ffda 	bl	801b5c8 <SUBGRF_GetRadioWakeUpTime>
 8019614:	4603      	mov	r3, r0
 8019616:	3303      	adds	r3, #3
}
 8019618:	4618      	mov	r0, r3
 801961a:	bd80      	pop	{r7, pc}

0801961c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b082      	sub	sp, #8
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019624:	f000 f80e 	bl	8019644 <RadioOnTxTimeoutProcess>
}
 8019628:	bf00      	nop
 801962a:	3708      	adds	r7, #8
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}

08019630 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b082      	sub	sp, #8
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019638:	f000 f818 	bl	801966c <RadioOnRxTimeoutProcess>
}
 801963c:	bf00      	nop
 801963e:	3708      	adds	r7, #8
 8019640:	46bd      	mov	sp, r7
 8019642:	bd80      	pop	{r7, pc}

08019644 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019644:	b580      	push	{r7, lr}
 8019646:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019648:	4b07      	ldr	r3, [pc, #28]	@ (8019668 <RadioOnTxTimeoutProcess+0x24>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d008      	beq.n	8019662 <RadioOnTxTimeoutProcess+0x1e>
 8019650:	4b05      	ldr	r3, [pc, #20]	@ (8019668 <RadioOnTxTimeoutProcess+0x24>)
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	685b      	ldr	r3, [r3, #4]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d003      	beq.n	8019662 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801965a:	4b03      	ldr	r3, [pc, #12]	@ (8019668 <RadioOnTxTimeoutProcess+0x24>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	685b      	ldr	r3, [r3, #4]
 8019660:	4798      	blx	r3
    }
}
 8019662:	bf00      	nop
 8019664:	bd80      	pop	{r7, pc}
 8019666:	bf00      	nop
 8019668:	20001c64 	.word	0x20001c64

0801966c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801966c:	b580      	push	{r7, lr}
 801966e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019670:	4b07      	ldr	r3, [pc, #28]	@ (8019690 <RadioOnRxTimeoutProcess+0x24>)
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d008      	beq.n	801968a <RadioOnRxTimeoutProcess+0x1e>
 8019678:	4b05      	ldr	r3, [pc, #20]	@ (8019690 <RadioOnRxTimeoutProcess+0x24>)
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	68db      	ldr	r3, [r3, #12]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d003      	beq.n	801968a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019682:	4b03      	ldr	r3, [pc, #12]	@ (8019690 <RadioOnRxTimeoutProcess+0x24>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	68db      	ldr	r3, [r3, #12]
 8019688:	4798      	blx	r3
    }
}
 801968a:	bf00      	nop
 801968c:	bd80      	pop	{r7, pc}
 801968e:	bf00      	nop
 8019690:	20001c64 	.word	0x20001c64

08019694 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b082      	sub	sp, #8
 8019698:	af00      	add	r7, sp, #0
 801969a:	4603      	mov	r3, r0
 801969c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801969e:	4a05      	ldr	r2, [pc, #20]	@ (80196b4 <RadioOnDioIrq+0x20>)
 80196a0:	88fb      	ldrh	r3, [r7, #6]
 80196a2:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80196a6:	f000 f807 	bl	80196b8 <RadioIrqProcess>
}
 80196aa:	bf00      	nop
 80196ac:	3708      	adds	r7, #8
 80196ae:	46bd      	mov	sp, r7
 80196b0:	bd80      	pop	{r7, pc}
 80196b2:	bf00      	nop
 80196b4:	20001c68 	.word	0x20001c68

080196b8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80196b8:	b5b0      	push	{r4, r5, r7, lr}
 80196ba:	b082      	sub	sp, #8
 80196bc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80196be:	2300      	movs	r3, #0
 80196c0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80196c2:	2300      	movs	r3, #0
 80196c4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80196c6:	4ba8      	ldr	r3, [pc, #672]	@ (8019968 <RadioIrqProcess+0x2b0>)
 80196c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80196cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80196d0:	f000 810d 	beq.w	80198ee <RadioIrqProcess+0x236>
 80196d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80196d8:	f300 81e8 	bgt.w	8019aac <RadioIrqProcess+0x3f4>
 80196dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80196e0:	f000 80f1 	beq.w	80198c6 <RadioIrqProcess+0x20e>
 80196e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80196e8:	f300 81e0 	bgt.w	8019aac <RadioIrqProcess+0x3f4>
 80196ec:	2b80      	cmp	r3, #128	@ 0x80
 80196ee:	f000 80d6 	beq.w	801989e <RadioIrqProcess+0x1e6>
 80196f2:	2b80      	cmp	r3, #128	@ 0x80
 80196f4:	f300 81da 	bgt.w	8019aac <RadioIrqProcess+0x3f4>
 80196f8:	2b20      	cmp	r3, #32
 80196fa:	dc49      	bgt.n	8019790 <RadioIrqProcess+0xd8>
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	f340 81d5 	ble.w	8019aac <RadioIrqProcess+0x3f4>
 8019702:	3b01      	subs	r3, #1
 8019704:	2b1f      	cmp	r3, #31
 8019706:	f200 81d1 	bhi.w	8019aac <RadioIrqProcess+0x3f4>
 801970a:	a201      	add	r2, pc, #4	@ (adr r2, 8019710 <RadioIrqProcess+0x58>)
 801970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019710:	08019799 	.word	0x08019799
 8019714:	080197d3 	.word	0x080197d3
 8019718:	08019aad 	.word	0x08019aad
 801971c:	08019989 	.word	0x08019989
 8019720:	08019aad 	.word	0x08019aad
 8019724:	08019aad 	.word	0x08019aad
 8019728:	08019aad 	.word	0x08019aad
 801972c:	08019a05 	.word	0x08019a05
 8019730:	08019aad 	.word	0x08019aad
 8019734:	08019aad 	.word	0x08019aad
 8019738:	08019aad 	.word	0x08019aad
 801973c:	08019aad 	.word	0x08019aad
 8019740:	08019aad 	.word	0x08019aad
 8019744:	08019aad 	.word	0x08019aad
 8019748:	08019aad 	.word	0x08019aad
 801974c:	08019a21 	.word	0x08019a21
 8019750:	08019aad 	.word	0x08019aad
 8019754:	08019aad 	.word	0x08019aad
 8019758:	08019aad 	.word	0x08019aad
 801975c:	08019aad 	.word	0x08019aad
 8019760:	08019aad 	.word	0x08019aad
 8019764:	08019aad 	.word	0x08019aad
 8019768:	08019aad 	.word	0x08019aad
 801976c:	08019aad 	.word	0x08019aad
 8019770:	08019aad 	.word	0x08019aad
 8019774:	08019aad 	.word	0x08019aad
 8019778:	08019aad 	.word	0x08019aad
 801977c:	08019aad 	.word	0x08019aad
 8019780:	08019aad 	.word	0x08019aad
 8019784:	08019aad 	.word	0x08019aad
 8019788:	08019aad 	.word	0x08019aad
 801978c:	08019a2f 	.word	0x08019a2f
 8019790:	2b40      	cmp	r3, #64	@ 0x40
 8019792:	f000 816d 	beq.w	8019a70 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8019796:	e189      	b.n	8019aac <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019798:	4874      	ldr	r0, [pc, #464]	@ (801996c <RadioIrqProcess+0x2b4>)
 801979a:	f002 ff79 	bl	801c690 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801979e:	2000      	movs	r0, #0
 80197a0:	f001 f824 	bl	801a7ec <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80197a4:	f002 f8b4 	bl	801b910 <RFW_Is_LongPacketModeEnabled>
 80197a8:	4603      	mov	r3, r0
 80197aa:	2b01      	cmp	r3, #1
 80197ac:	d101      	bne.n	80197b2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80197ae:	f002 f8d8 	bl	801b962 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80197b2:	4b6f      	ldr	r3, [pc, #444]	@ (8019970 <RadioIrqProcess+0x2b8>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	f000 817a 	beq.w	8019ab0 <RadioIrqProcess+0x3f8>
 80197bc:	4b6c      	ldr	r3, [pc, #432]	@ (8019970 <RadioIrqProcess+0x2b8>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	f000 8174 	beq.w	8019ab0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80197c8:	4b69      	ldr	r3, [pc, #420]	@ (8019970 <RadioIrqProcess+0x2b8>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	4798      	blx	r3
        break;
 80197d0:	e16e      	b.n	8019ab0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80197d2:	4868      	ldr	r0, [pc, #416]	@ (8019974 <RadioIrqProcess+0x2bc>)
 80197d4:	f002 ff5c 	bl	801c690 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80197d8:	4b63      	ldr	r3, [pc, #396]	@ (8019968 <RadioIrqProcess+0x2b0>)
 80197da:	785b      	ldrb	r3, [r3, #1]
 80197dc:	f083 0301 	eor.w	r3, r3, #1
 80197e0:	b2db      	uxtb	r3, r3
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d014      	beq.n	8019810 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80197e6:	2000      	movs	r0, #0
 80197e8:	f001 f800 	bl	801a7ec <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80197ec:	2100      	movs	r1, #0
 80197ee:	f640 1002 	movw	r0, #2306	@ 0x902
 80197f2:	f001 fd7f 	bl	801b2f4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80197f6:	f640 1044 	movw	r0, #2372	@ 0x944
 80197fa:	f001 fd9d 	bl	801b338 <SUBGRF_ReadRegister>
 80197fe:	4603      	mov	r3, r0
 8019800:	f043 0302 	orr.w	r3, r3, #2
 8019804:	b2db      	uxtb	r3, r3
 8019806:	4619      	mov	r1, r3
 8019808:	f640 1044 	movw	r0, #2372	@ 0x944
 801980c:	f001 fd72 	bl	801b2f4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019810:	1dfb      	adds	r3, r7, #7
 8019812:	22ff      	movs	r2, #255	@ 0xff
 8019814:	4619      	mov	r1, r3
 8019816:	4858      	ldr	r0, [pc, #352]	@ (8019978 <RadioIrqProcess+0x2c0>)
 8019818:	f000 feb6 	bl	801a588 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801981c:	4857      	ldr	r0, [pc, #348]	@ (801997c <RadioIrqProcess+0x2c4>)
 801981e:	f001 fd17 	bl	801b250 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019822:	4b53      	ldr	r3, [pc, #332]	@ (8019970 <RadioIrqProcess+0x2b8>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	2b00      	cmp	r3, #0
 8019828:	f000 8144 	beq.w	8019ab4 <RadioIrqProcess+0x3fc>
 801982c:	4b50      	ldr	r3, [pc, #320]	@ (8019970 <RadioIrqProcess+0x2b8>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	689b      	ldr	r3, [r3, #8]
 8019832:	2b00      	cmp	r3, #0
 8019834:	f000 813e 	beq.w	8019ab4 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8019838:	4b4b      	ldr	r3, [pc, #300]	@ (8019968 <RadioIrqProcess+0x2b0>)
 801983a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801983e:	2b01      	cmp	r3, #1
 8019840:	d10e      	bne.n	8019860 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8019842:	4b4b      	ldr	r3, [pc, #300]	@ (8019970 <RadioIrqProcess+0x2b8>)
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	689c      	ldr	r4, [r3, #8]
 8019848:	79fb      	ldrb	r3, [r7, #7]
 801984a:	4619      	mov	r1, r3
 801984c:	4b46      	ldr	r3, [pc, #280]	@ (8019968 <RadioIrqProcess+0x2b0>)
 801984e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8019852:	461a      	mov	r2, r3
 8019854:	4b44      	ldr	r3, [pc, #272]	@ (8019968 <RadioIrqProcess+0x2b0>)
 8019856:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801985a:	4847      	ldr	r0, [pc, #284]	@ (8019978 <RadioIrqProcess+0x2c0>)
 801985c:	47a0      	blx	r4
                break;
 801985e:	e01d      	b.n	801989c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019860:	4b41      	ldr	r3, [pc, #260]	@ (8019968 <RadioIrqProcess+0x2b0>)
 8019862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019864:	463a      	mov	r2, r7
 8019866:	4611      	mov	r1, r2
 8019868:	4618      	mov	r0, r3
 801986a:	f001 ff9f 	bl	801b7ac <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801986e:	4b40      	ldr	r3, [pc, #256]	@ (8019970 <RadioIrqProcess+0x2b8>)
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	689c      	ldr	r4, [r3, #8]
 8019874:	79fb      	ldrb	r3, [r7, #7]
 8019876:	4619      	mov	r1, r3
 8019878:	4b3b      	ldr	r3, [pc, #236]	@ (8019968 <RadioIrqProcess+0x2b0>)
 801987a:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 801987e:	4618      	mov	r0, r3
 8019880:	683b      	ldr	r3, [r7, #0]
 8019882:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8019886:	4a3e      	ldr	r2, [pc, #248]	@ (8019980 <RadioIrqProcess+0x2c8>)
 8019888:	fb82 5203 	smull	r5, r2, r2, r3
 801988c:	1192      	asrs	r2, r2, #6
 801988e:	17db      	asrs	r3, r3, #31
 8019890:	1ad3      	subs	r3, r2, r3
 8019892:	b25b      	sxtb	r3, r3
 8019894:	4602      	mov	r2, r0
 8019896:	4838      	ldr	r0, [pc, #224]	@ (8019978 <RadioIrqProcess+0x2c0>)
 8019898:	47a0      	blx	r4
                break;
 801989a:	bf00      	nop
        break;
 801989c:	e10a      	b.n	8019ab4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801989e:	2000      	movs	r0, #0
 80198a0:	f000 ffa4 	bl	801a7ec <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80198a4:	4b32      	ldr	r3, [pc, #200]	@ (8019970 <RadioIrqProcess+0x2b8>)
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	f000 8105 	beq.w	8019ab8 <RadioIrqProcess+0x400>
 80198ae:	4b30      	ldr	r3, [pc, #192]	@ (8019970 <RadioIrqProcess+0x2b8>)
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	699b      	ldr	r3, [r3, #24]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	f000 80ff 	beq.w	8019ab8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80198ba:	4b2d      	ldr	r3, [pc, #180]	@ (8019970 <RadioIrqProcess+0x2b8>)
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	699b      	ldr	r3, [r3, #24]
 80198c0:	2000      	movs	r0, #0
 80198c2:	4798      	blx	r3
        break;
 80198c4:	e0f8      	b.n	8019ab8 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80198c6:	2000      	movs	r0, #0
 80198c8:	f000 ff90 	bl	801a7ec <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80198cc:	4b28      	ldr	r3, [pc, #160]	@ (8019970 <RadioIrqProcess+0x2b8>)
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	f000 80f3 	beq.w	8019abc <RadioIrqProcess+0x404>
 80198d6:	4b26      	ldr	r3, [pc, #152]	@ (8019970 <RadioIrqProcess+0x2b8>)
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	699b      	ldr	r3, [r3, #24]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	f000 80ed 	beq.w	8019abc <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 80198e2:	4b23      	ldr	r3, [pc, #140]	@ (8019970 <RadioIrqProcess+0x2b8>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	699b      	ldr	r3, [r3, #24]
 80198e8:	2001      	movs	r0, #1
 80198ea:	4798      	blx	r3
        break;
 80198ec:	e0e6      	b.n	8019abc <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80198ee:	4b25      	ldr	r3, [pc, #148]	@ (8019984 <RadioIrqProcess+0x2cc>)
 80198f0:	2201      	movs	r2, #1
 80198f2:	2100      	movs	r1, #0
 80198f4:	2002      	movs	r0, #2
 80198f6:	f003 f8d5 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80198fa:	f000 fe2b 	bl	801a554 <SUBGRF_GetOperatingMode>
 80198fe:	4603      	mov	r3, r0
 8019900:	2b04      	cmp	r3, #4
 8019902:	d115      	bne.n	8019930 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8019904:	4819      	ldr	r0, [pc, #100]	@ (801996c <RadioIrqProcess+0x2b4>)
 8019906:	f002 fec3 	bl	801c690 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801990a:	2000      	movs	r0, #0
 801990c:	f000 ff6e 	bl	801a7ec <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019910:	4b17      	ldr	r3, [pc, #92]	@ (8019970 <RadioIrqProcess+0x2b8>)
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	2b00      	cmp	r3, #0
 8019916:	f000 80d3 	beq.w	8019ac0 <RadioIrqProcess+0x408>
 801991a:	4b15      	ldr	r3, [pc, #84]	@ (8019970 <RadioIrqProcess+0x2b8>)
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	685b      	ldr	r3, [r3, #4]
 8019920:	2b00      	cmp	r3, #0
 8019922:	f000 80cd 	beq.w	8019ac0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8019926:	4b12      	ldr	r3, [pc, #72]	@ (8019970 <RadioIrqProcess+0x2b8>)
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	685b      	ldr	r3, [r3, #4]
 801992c:	4798      	blx	r3
        break;
 801992e:	e0c7      	b.n	8019ac0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019930:	f000 fe10 	bl	801a554 <SUBGRF_GetOperatingMode>
 8019934:	4603      	mov	r3, r0
 8019936:	2b05      	cmp	r3, #5
 8019938:	f040 80c2 	bne.w	8019ac0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801993c:	480d      	ldr	r0, [pc, #52]	@ (8019974 <RadioIrqProcess+0x2bc>)
 801993e:	f002 fea7 	bl	801c690 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019942:	2000      	movs	r0, #0
 8019944:	f000 ff52 	bl	801a7ec <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019948:	4b09      	ldr	r3, [pc, #36]	@ (8019970 <RadioIrqProcess+0x2b8>)
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	2b00      	cmp	r3, #0
 801994e:	f000 80b7 	beq.w	8019ac0 <RadioIrqProcess+0x408>
 8019952:	4b07      	ldr	r3, [pc, #28]	@ (8019970 <RadioIrqProcess+0x2b8>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	68db      	ldr	r3, [r3, #12]
 8019958:	2b00      	cmp	r3, #0
 801995a:	f000 80b1 	beq.w	8019ac0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801995e:	4b04      	ldr	r3, [pc, #16]	@ (8019970 <RadioIrqProcess+0x2b8>)
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	68db      	ldr	r3, [r3, #12]
 8019964:	4798      	blx	r3
        break;
 8019966:	e0ab      	b.n	8019ac0 <RadioIrqProcess+0x408>
 8019968:	20001c68 	.word	0x20001c68
 801996c:	20001cc4 	.word	0x20001cc4
 8019970:	20001c64 	.word	0x20001c64
 8019974:	20001cdc 	.word	0x20001cdc
 8019978:	20001b64 	.word	0x20001b64
 801997c:	20001c8c 	.word	0x20001c8c
 8019980:	10624dd3 	.word	0x10624dd3
 8019984:	0801d96c 	.word	0x0801d96c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019988:	4b54      	ldr	r3, [pc, #336]	@ (8019adc <RadioIrqProcess+0x424>)
 801998a:	2201      	movs	r2, #1
 801998c:	2100      	movs	r1, #0
 801998e:	2002      	movs	r0, #2
 8019990:	f003 f888 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019994:	4b52      	ldr	r3, [pc, #328]	@ (8019ae0 <RadioIrqProcess+0x428>)
 8019996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019998:	2b00      	cmp	r3, #0
 801999a:	f000 8093 	beq.w	8019ac4 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801999e:	4a51      	ldr	r2, [pc, #324]	@ (8019ae4 <RadioIrqProcess+0x42c>)
 80199a0:	4b4f      	ldr	r3, [pc, #316]	@ (8019ae0 <RadioIrqProcess+0x428>)
 80199a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80199a4:	0c1b      	lsrs	r3, r3, #16
 80199a6:	b2db      	uxtb	r3, r3
 80199a8:	4619      	mov	r1, r3
 80199aa:	f640 1003 	movw	r0, #2307	@ 0x903
 80199ae:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80199b0:	4a4c      	ldr	r2, [pc, #304]	@ (8019ae4 <RadioIrqProcess+0x42c>)
 80199b2:	4b4b      	ldr	r3, [pc, #300]	@ (8019ae0 <RadioIrqProcess+0x428>)
 80199b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80199b6:	0a1b      	lsrs	r3, r3, #8
 80199b8:	b2db      	uxtb	r3, r3
 80199ba:	4619      	mov	r1, r3
 80199bc:	f640 1004 	movw	r0, #2308	@ 0x904
 80199c0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80199c2:	4a48      	ldr	r2, [pc, #288]	@ (8019ae4 <RadioIrqProcess+0x42c>)
 80199c4:	4b46      	ldr	r3, [pc, #280]	@ (8019ae0 <RadioIrqProcess+0x428>)
 80199c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80199c8:	b2db      	uxtb	r3, r3
 80199ca:	4619      	mov	r1, r3
 80199cc:	f640 1005 	movw	r0, #2309	@ 0x905
 80199d0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80199d2:	4c44      	ldr	r4, [pc, #272]	@ (8019ae4 <RadioIrqProcess+0x42c>)
 80199d4:	4b44      	ldr	r3, [pc, #272]	@ (8019ae8 <RadioIrqProcess+0x430>)
 80199d6:	f640 1002 	movw	r0, #2306	@ 0x902
 80199da:	4798      	blx	r3
 80199dc:	4603      	mov	r3, r0
 80199de:	f043 0301 	orr.w	r3, r3, #1
 80199e2:	b2db      	uxtb	r3, r3
 80199e4:	4619      	mov	r1, r3
 80199e6:	f640 1002 	movw	r0, #2306	@ 0x902
 80199ea:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80199ec:	4b3c      	ldr	r3, [pc, #240]	@ (8019ae0 <RadioIrqProcess+0x428>)
 80199ee:	2200      	movs	r2, #0
 80199f0:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80199f2:	2300      	movs	r3, #0
 80199f4:	2200      	movs	r2, #0
 80199f6:	f240 2162 	movw	r1, #610	@ 0x262
 80199fa:	f240 2062 	movw	r0, #610	@ 0x262
 80199fe:	f001 f8cf 	bl	801aba0 <SUBGRF_SetDioIrqParams>
        break;
 8019a02:	e05f      	b.n	8019ac4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019a04:	4b39      	ldr	r3, [pc, #228]	@ (8019aec <RadioIrqProcess+0x434>)
 8019a06:	2201      	movs	r2, #1
 8019a08:	2100      	movs	r1, #0
 8019a0a:	2002      	movs	r0, #2
 8019a0c:	f003 f84a 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019a10:	f001 ff77 	bl	801b902 <RFW_Is_Init>
 8019a14:	4603      	mov	r3, r0
 8019a16:	2b01      	cmp	r3, #1
 8019a18:	d156      	bne.n	8019ac8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8019a1a:	f001 ffa8 	bl	801b96e <RFW_ReceivePayload>
        break;
 8019a1e:	e053      	b.n	8019ac8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019a20:	4b33      	ldr	r3, [pc, #204]	@ (8019af0 <RadioIrqProcess+0x438>)
 8019a22:	2201      	movs	r2, #1
 8019a24:	2100      	movs	r1, #0
 8019a26:	2002      	movs	r0, #2
 8019a28:	f003 f83c 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019a2c:	e051      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8019a2e:	4831      	ldr	r0, [pc, #196]	@ (8019af4 <RadioIrqProcess+0x43c>)
 8019a30:	f002 fe2e 	bl	801c690 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019a34:	4b2a      	ldr	r3, [pc, #168]	@ (8019ae0 <RadioIrqProcess+0x428>)
 8019a36:	785b      	ldrb	r3, [r3, #1]
 8019a38:	f083 0301 	eor.w	r3, r3, #1
 8019a3c:	b2db      	uxtb	r3, r3
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d002      	beq.n	8019a48 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8019a42:	2000      	movs	r0, #0
 8019a44:	f000 fed2 	bl	801a7ec <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019a48:	4b2b      	ldr	r3, [pc, #172]	@ (8019af8 <RadioIrqProcess+0x440>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d03d      	beq.n	8019acc <RadioIrqProcess+0x414>
 8019a50:	4b29      	ldr	r3, [pc, #164]	@ (8019af8 <RadioIrqProcess+0x440>)
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	68db      	ldr	r3, [r3, #12]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d038      	beq.n	8019acc <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8019a5a:	4b27      	ldr	r3, [pc, #156]	@ (8019af8 <RadioIrqProcess+0x440>)
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	68db      	ldr	r3, [r3, #12]
 8019a60:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019a62:	4b26      	ldr	r3, [pc, #152]	@ (8019afc <RadioIrqProcess+0x444>)
 8019a64:	2201      	movs	r2, #1
 8019a66:	2100      	movs	r1, #0
 8019a68:	2002      	movs	r0, #2
 8019a6a:	f003 f81b 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019a6e:	e02d      	b.n	8019acc <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019a70:	4b23      	ldr	r3, [pc, #140]	@ (8019b00 <RadioIrqProcess+0x448>)
 8019a72:	2201      	movs	r2, #1
 8019a74:	2100      	movs	r1, #0
 8019a76:	2002      	movs	r0, #2
 8019a78:	f003 f814 	bl	801caa4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019a7c:	4b18      	ldr	r3, [pc, #96]	@ (8019ae0 <RadioIrqProcess+0x428>)
 8019a7e:	785b      	ldrb	r3, [r3, #1]
 8019a80:	f083 0301 	eor.w	r3, r3, #1
 8019a84:	b2db      	uxtb	r3, r3
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d002      	beq.n	8019a90 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8019a8a:	2000      	movs	r0, #0
 8019a8c:	f000 feae 	bl	801a7ec <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019a90:	4b19      	ldr	r3, [pc, #100]	@ (8019af8 <RadioIrqProcess+0x440>)
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d01b      	beq.n	8019ad0 <RadioIrqProcess+0x418>
 8019a98:	4b17      	ldr	r3, [pc, #92]	@ (8019af8 <RadioIrqProcess+0x440>)
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	691b      	ldr	r3, [r3, #16]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d016      	beq.n	8019ad0 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8019aa2:	4b15      	ldr	r3, [pc, #84]	@ (8019af8 <RadioIrqProcess+0x440>)
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	691b      	ldr	r3, [r3, #16]
 8019aa8:	4798      	blx	r3
        break;
 8019aaa:	e011      	b.n	8019ad0 <RadioIrqProcess+0x418>
        break;
 8019aac:	bf00      	nop
 8019aae:	e010      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        break;
 8019ab0:	bf00      	nop
 8019ab2:	e00e      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        break;
 8019ab4:	bf00      	nop
 8019ab6:	e00c      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        break;
 8019ab8:	bf00      	nop
 8019aba:	e00a      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        break;
 8019abc:	bf00      	nop
 8019abe:	e008      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        break;
 8019ac0:	bf00      	nop
 8019ac2:	e006      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        break;
 8019ac4:	bf00      	nop
 8019ac6:	e004      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        break;
 8019ac8:	bf00      	nop
 8019aca:	e002      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        break;
 8019acc:	bf00      	nop
 8019ace:	e000      	b.n	8019ad2 <RadioIrqProcess+0x41a>
        break;
 8019ad0:	bf00      	nop
    }
}
 8019ad2:	bf00      	nop
 8019ad4:	3708      	adds	r7, #8
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8019ada:	bf00      	nop
 8019adc:	0801d980 	.word	0x0801d980
 8019ae0:	20001c68 	.word	0x20001c68
 8019ae4:	080194c9 	.word	0x080194c9
 8019ae8:	080194ed 	.word	0x080194ed
 8019aec:	0801d98c 	.word	0x0801d98c
 8019af0:	0801d998 	.word	0x0801d998
 8019af4:	20001cdc 	.word	0x20001cdc
 8019af8:	20001c64 	.word	0x20001c64
 8019afc:	0801d9a4 	.word	0x0801d9a4
 8019b00:	0801d9b0 	.word	0x0801d9b0

08019b04 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019b08:	4b09      	ldr	r3, [pc, #36]	@ (8019b30 <RadioTxPrbs+0x2c>)
 8019b0a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019b0e:	2101      	movs	r1, #1
 8019b10:	4618      	mov	r0, r3
 8019b12:	f001 fcfd 	bl	801b510 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8019b16:	4b07      	ldr	r3, [pc, #28]	@ (8019b34 <RadioTxPrbs+0x30>)
 8019b18:	212d      	movs	r1, #45	@ 0x2d
 8019b1a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019b1e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019b20:	f000 ff27 	bl	801a972 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019b24:	4804      	ldr	r0, [pc, #16]	@ (8019b38 <RadioTxPrbs+0x34>)
 8019b26:	f000 fe7d 	bl	801a824 <SUBGRF_SetTx>
}
 8019b2a:	bf00      	nop
 8019b2c:	bd80      	pop	{r7, pc}
 8019b2e:	bf00      	nop
 8019b30:	20001c68 	.word	0x20001c68
 8019b34:	080194c9 	.word	0x080194c9
 8019b38:	000fffff 	.word	0x000fffff

08019b3c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b084      	sub	sp, #16
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	4603      	mov	r3, r0
 8019b44:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	f001 fd08 	bl	801b560 <SUBGRF_SetRfTxPower>
 8019b50:	4603      	mov	r3, r0
 8019b52:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019b54:	210e      	movs	r1, #14
 8019b56:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019b5a:	f001 fbcb 	bl	801b2f4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019b5e:	7bfb      	ldrb	r3, [r7, #15]
 8019b60:	2101      	movs	r1, #1
 8019b62:	4618      	mov	r0, r3
 8019b64:	f001 fcd4 	bl	801b510 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019b68:	f000 fefa 	bl	801a960 <SUBGRF_SetTxContinuousWave>
}
 8019b6c:	bf00      	nop
 8019b6e:	3710      	adds	r7, #16
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}

08019b74 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019b74:	b480      	push	{r7}
 8019b76:	b089      	sub	sp, #36	@ 0x24
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	60f8      	str	r0, [r7, #12]
 8019b7c:	60b9      	str	r1, [r7, #8]
 8019b7e:	4613      	mov	r3, r2
 8019b80:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019b82:	2300      	movs	r3, #0
 8019b84:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019b86:	2300      	movs	r3, #0
 8019b88:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	61bb      	str	r3, [r7, #24]
 8019b8e:	e011      	b.n	8019bb4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8019b90:	69bb      	ldr	r3, [r7, #24]
 8019b92:	68ba      	ldr	r2, [r7, #8]
 8019b94:	4413      	add	r3, r2
 8019b96:	781a      	ldrb	r2, [r3, #0]
 8019b98:	69bb      	ldr	r3, [r7, #24]
 8019b9a:	68b9      	ldr	r1, [r7, #8]
 8019b9c:	440b      	add	r3, r1
 8019b9e:	43d2      	mvns	r2, r2
 8019ba0:	b2d2      	uxtb	r2, r2
 8019ba2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019ba4:	69bb      	ldr	r3, [r7, #24]
 8019ba6:	68fa      	ldr	r2, [r7, #12]
 8019ba8:	4413      	add	r3, r2
 8019baa:	2200      	movs	r2, #0
 8019bac:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8019bae:	69bb      	ldr	r3, [r7, #24]
 8019bb0:	3301      	adds	r3, #1
 8019bb2:	61bb      	str	r3, [r7, #24]
 8019bb4:	79fb      	ldrb	r3, [r7, #7]
 8019bb6:	69ba      	ldr	r2, [r7, #24]
 8019bb8:	429a      	cmp	r2, r3
 8019bba:	dbe9      	blt.n	8019b90 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	61bb      	str	r3, [r7, #24]
 8019bc0:	e049      	b.n	8019c56 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019bc2:	69bb      	ldr	r3, [r7, #24]
 8019bc4:	425a      	negs	r2, r3
 8019bc6:	f003 0307 	and.w	r3, r3, #7
 8019bca:	f002 0207 	and.w	r2, r2, #7
 8019bce:	bf58      	it	pl
 8019bd0:	4253      	negpl	r3, r2
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	f1c3 0307 	rsb	r3, r3, #7
 8019bd8:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019bda:	69bb      	ldr	r3, [r7, #24]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	da00      	bge.n	8019be2 <payload_integration+0x6e>
 8019be0:	3307      	adds	r3, #7
 8019be2:	10db      	asrs	r3, r3, #3
 8019be4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019be6:	69bb      	ldr	r3, [r7, #24]
 8019be8:	3301      	adds	r3, #1
 8019bea:	425a      	negs	r2, r3
 8019bec:	f003 0307 	and.w	r3, r3, #7
 8019bf0:	f002 0207 	and.w	r2, r2, #7
 8019bf4:	bf58      	it	pl
 8019bf6:	4253      	negpl	r3, r2
 8019bf8:	b2db      	uxtb	r3, r3
 8019bfa:	f1c3 0307 	rsb	r3, r3, #7
 8019bfe:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019c00:	69bb      	ldr	r3, [r7, #24]
 8019c02:	3301      	adds	r3, #1
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	da00      	bge.n	8019c0a <payload_integration+0x96>
 8019c08:	3307      	adds	r3, #7
 8019c0a:	10db      	asrs	r3, r3, #3
 8019c0c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019c0e:	7dbb      	ldrb	r3, [r7, #22]
 8019c10:	68ba      	ldr	r2, [r7, #8]
 8019c12:	4413      	add	r3, r2
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	461a      	mov	r2, r3
 8019c18:	7dfb      	ldrb	r3, [r7, #23]
 8019c1a:	fa42 f303 	asr.w	r3, r2, r3
 8019c1e:	b2db      	uxtb	r3, r3
 8019c20:	f003 0301 	and.w	r3, r3, #1
 8019c24:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019c26:	7ffa      	ldrb	r2, [r7, #31]
 8019c28:	7cfb      	ldrb	r3, [r7, #19]
 8019c2a:	4053      	eors	r3, r2
 8019c2c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019c2e:	7d3b      	ldrb	r3, [r7, #20]
 8019c30:	68fa      	ldr	r2, [r7, #12]
 8019c32:	4413      	add	r3, r2
 8019c34:	781b      	ldrb	r3, [r3, #0]
 8019c36:	b25a      	sxtb	r2, r3
 8019c38:	7ff9      	ldrb	r1, [r7, #31]
 8019c3a:	7d7b      	ldrb	r3, [r7, #21]
 8019c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8019c40:	b25b      	sxtb	r3, r3
 8019c42:	4313      	orrs	r3, r2
 8019c44:	b259      	sxtb	r1, r3
 8019c46:	7d3b      	ldrb	r3, [r7, #20]
 8019c48:	68fa      	ldr	r2, [r7, #12]
 8019c4a:	4413      	add	r3, r2
 8019c4c:	b2ca      	uxtb	r2, r1
 8019c4e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019c50:	69bb      	ldr	r3, [r7, #24]
 8019c52:	3301      	adds	r3, #1
 8019c54:	61bb      	str	r3, [r7, #24]
 8019c56:	79fb      	ldrb	r3, [r7, #7]
 8019c58:	00db      	lsls	r3, r3, #3
 8019c5a:	69ba      	ldr	r2, [r7, #24]
 8019c5c:	429a      	cmp	r2, r3
 8019c5e:	dbb0      	blt.n	8019bc2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019c60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019c64:	01db      	lsls	r3, r3, #7
 8019c66:	b25a      	sxtb	r2, r3
 8019c68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019c6c:	019b      	lsls	r3, r3, #6
 8019c6e:	b25b      	sxtb	r3, r3
 8019c70:	4313      	orrs	r3, r2
 8019c72:	b25b      	sxtb	r3, r3
 8019c74:	7ffa      	ldrb	r2, [r7, #31]
 8019c76:	2a00      	cmp	r2, #0
 8019c78:	d101      	bne.n	8019c7e <payload_integration+0x10a>
 8019c7a:	2220      	movs	r2, #32
 8019c7c:	e000      	b.n	8019c80 <payload_integration+0x10c>
 8019c7e:	2200      	movs	r2, #0
 8019c80:	4313      	orrs	r3, r2
 8019c82:	b259      	sxtb	r1, r3
 8019c84:	79fb      	ldrb	r3, [r7, #7]
 8019c86:	68fa      	ldr	r2, [r7, #12]
 8019c88:	4413      	add	r3, r2
 8019c8a:	b2ca      	uxtb	r2, r1
 8019c8c:	701a      	strb	r2, [r3, #0]
}
 8019c8e:	bf00      	nop
 8019c90:	3724      	adds	r7, #36	@ 0x24
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bc80      	pop	{r7}
 8019c96:	4770      	bx	lr

08019c98 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b08c      	sub	sp, #48	@ 0x30
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	60b9      	str	r1, [r7, #8]
 8019ca0:	607a      	str	r2, [r7, #4]
 8019ca2:	603b      	str	r3, [r7, #0]
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019ca8:	2300      	movs	r3, #0
 8019caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8019cac:	f107 0320 	add.w	r3, r7, #32
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	601a      	str	r2, [r3, #0]
 8019cb4:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019cb6:	f001 fe1e 	bl	801b8f6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d001      	beq.n	8019cc4 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	bf14      	ite	ne
 8019cca:	2301      	movne	r3, #1
 8019ccc:	2300      	moveq	r3, #0
 8019cce:	b2da      	uxtb	r2, r3
 8019cd0:	4ba3      	ldr	r3, [pc, #652]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019cd2:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019cd4:	7bfb      	ldrb	r3, [r7, #15]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d003      	beq.n	8019ce2 <RadioSetRxGenericConfig+0x4a>
 8019cda:	2b01      	cmp	r3, #1
 8019cdc:	f000 80dc 	beq.w	8019e98 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019ce0:	e195      	b.n	801a00e <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019ce2:	68bb      	ldr	r3, [r7, #8]
 8019ce4:	689b      	ldr	r3, [r3, #8]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d003      	beq.n	8019cf2 <RadioSetRxGenericConfig+0x5a>
 8019cea:	68bb      	ldr	r3, [r7, #8]
 8019cec:	68db      	ldr	r3, [r3, #12]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d102      	bne.n	8019cf8 <RadioSetRxGenericConfig+0x60>
            return -1;
 8019cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8019cf6:	e18b      	b.n	801a010 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8019cf8:	68bb      	ldr	r3, [r7, #8]
 8019cfa:	7f9b      	ldrb	r3, [r3, #30]
 8019cfc:	2b08      	cmp	r3, #8
 8019cfe:	d902      	bls.n	8019d06 <RadioSetRxGenericConfig+0x6e>
            return -1;
 8019d00:	f04f 33ff 	mov.w	r3, #4294967295
 8019d04:	e184      	b.n	801a010 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019d06:	68bb      	ldr	r3, [r7, #8]
 8019d08:	6919      	ldr	r1, [r3, #16]
 8019d0a:	68bb      	ldr	r3, [r7, #8]
 8019d0c:	7f9b      	ldrb	r3, [r3, #30]
 8019d0e:	461a      	mov	r2, r3
 8019d10:	f107 0320 	add.w	r3, r7, #32
 8019d14:	4618      	mov	r0, r3
 8019d16:	f001 fee1 	bl	801badc <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019d1a:	68bb      	ldr	r3, [r7, #8]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	bf14      	ite	ne
 8019d22:	2301      	movne	r3, #1
 8019d24:	2300      	moveq	r3, #0
 8019d26:	b2db      	uxtb	r3, r3
 8019d28:	4618      	mov	r0, r3
 8019d2a:	f000 fe2b 	bl	801a984 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019d2e:	4b8c      	ldr	r3, [pc, #560]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019d30:	2200      	movs	r2, #0
 8019d32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019d36:	68bb      	ldr	r3, [r7, #8]
 8019d38:	689b      	ldr	r3, [r3, #8]
 8019d3a:	4a89      	ldr	r2, [pc, #548]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019d3c:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019d3e:	68bb      	ldr	r3, [r7, #8]
 8019d40:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019d44:	4b86      	ldr	r3, [pc, #536]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019d4a:	68bb      	ldr	r3, [r7, #8]
 8019d4c:	685b      	ldr	r3, [r3, #4]
 8019d4e:	4618      	mov	r0, r3
 8019d50:	f001 fd04 	bl	801b75c <SUBGRF_GetFskBandwidthRegValue>
 8019d54:	4603      	mov	r3, r0
 8019d56:	461a      	mov	r2, r3
 8019d58:	4b81      	ldr	r3, [pc, #516]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019d5e:	4b80      	ldr	r3, [pc, #512]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019d60:	2200      	movs	r2, #0
 8019d62:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019d64:	68bb      	ldr	r3, [r7, #8]
 8019d66:	68db      	ldr	r3, [r3, #12]
 8019d68:	b29b      	uxth	r3, r3
 8019d6a:	00db      	lsls	r3, r3, #3
 8019d6c:	b29a      	uxth	r2, r3
 8019d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019d70:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019d72:	68bb      	ldr	r3, [r7, #8]
 8019d74:	7fda      	ldrb	r2, [r3, #31]
 8019d76:	4b7a      	ldr	r3, [pc, #488]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019d78:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019d7a:	68bb      	ldr	r3, [r7, #8]
 8019d7c:	7f9b      	ldrb	r3, [r3, #30]
 8019d7e:	00db      	lsls	r3, r3, #3
 8019d80:	b2da      	uxtb	r2, r3
 8019d82:	4b77      	ldr	r3, [pc, #476]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019d84:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019d86:	68bb      	ldr	r3, [r7, #8]
 8019d88:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8019d8c:	4b74      	ldr	r3, [pc, #464]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019d8e:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019d90:	68bb      	ldr	r3, [r7, #8]
 8019d92:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d105      	bne.n	8019da6 <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019d9a:	68bb      	ldr	r3, [r7, #8]
 8019d9c:	695b      	ldr	r3, [r3, #20]
 8019d9e:	b2da      	uxtb	r2, r3
 8019da0:	4b6f      	ldr	r3, [pc, #444]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019da2:	759a      	strb	r2, [r3, #22]
 8019da4:	e00b      	b.n	8019dbe <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019da6:	68bb      	ldr	r3, [r7, #8]
 8019da8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019dac:	2b02      	cmp	r3, #2
 8019dae:	d103      	bne.n	8019db8 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019db0:	4b6b      	ldr	r3, [pc, #428]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019db2:	22ff      	movs	r2, #255	@ 0xff
 8019db4:	759a      	strb	r2, [r3, #22]
 8019db6:	e002      	b.n	8019dbe <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019db8:	4b69      	ldr	r3, [pc, #420]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019dba:	22ff      	movs	r2, #255	@ 0xff
 8019dbc:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8019dbe:	68bb      	ldr	r3, [r7, #8]
 8019dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019dc4:	2b02      	cmp	r3, #2
 8019dc6:	d004      	beq.n	8019dd2 <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019dc8:	68bb      	ldr	r3, [r7, #8]
 8019dca:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019dce:	2b02      	cmp	r3, #2
 8019dd0:	d12d      	bne.n	8019e2e <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8019dd2:	68bb      	ldr	r3, [r7, #8]
 8019dd4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019dd8:	2bf1      	cmp	r3, #241	@ 0xf1
 8019dda:	d00c      	beq.n	8019df6 <RadioSetRxGenericConfig+0x15e>
 8019ddc:	68bb      	ldr	r3, [r7, #8]
 8019dde:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019de2:	2bf2      	cmp	r3, #242	@ 0xf2
 8019de4:	d007      	beq.n	8019df6 <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019de6:	68bb      	ldr	r3, [r7, #8]
 8019de8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019dec:	2b01      	cmp	r3, #1
 8019dee:	d002      	beq.n	8019df6 <RadioSetRxGenericConfig+0x15e>
                return -1;
 8019df0:	f04f 33ff 	mov.w	r3, #4294967295
 8019df4:	e10c      	b.n	801a010 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8019df6:	2300      	movs	r3, #0
 8019df8:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8019dfa:	68bb      	ldr	r3, [r7, #8]
 8019dfc:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019dfe:	4b59      	ldr	r3, [pc, #356]	@ (8019f64 <RadioSetRxGenericConfig+0x2cc>)
 8019e00:	6819      	ldr	r1, [r3, #0]
 8019e02:	f107 0314 	add.w	r3, r7, #20
 8019e06:	4a58      	ldr	r2, [pc, #352]	@ (8019f68 <RadioSetRxGenericConfig+0x2d0>)
 8019e08:	4618      	mov	r0, r3
 8019e0a:	f001 fd67 	bl	801b8dc <RFW_Init>
 8019e0e:	4603      	mov	r3, r0
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d002      	beq.n	8019e1a <RadioSetRxGenericConfig+0x182>
                return -1;
 8019e14:	f04f 33ff 	mov.w	r3, #4294967295
 8019e18:	e0fa      	b.n	801a010 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019e1a:	4b51      	ldr	r3, [pc, #324]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019e1c:	2200      	movs	r2, #0
 8019e1e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019e20:	4b4f      	ldr	r3, [pc, #316]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019e22:	2201      	movs	r2, #1
 8019e24:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019e26:	4b4e      	ldr	r3, [pc, #312]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019e28:	2200      	movs	r2, #0
 8019e2a:	755a      	strb	r2, [r3, #21]
        {
 8019e2c:	e00e      	b.n	8019e4c <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019e2e:	68bb      	ldr	r3, [r7, #8]
 8019e30:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8019e34:	4b4a      	ldr	r3, [pc, #296]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019e36:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019e38:	68bb      	ldr	r3, [r7, #8]
 8019e3a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8019e3e:	4b48      	ldr	r3, [pc, #288]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019e40:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019e42:	68bb      	ldr	r3, [r7, #8]
 8019e44:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8019e48:	4b45      	ldr	r3, [pc, #276]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019e4a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019e4c:	f7ff fa3b 	bl	80192c6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019e50:	2000      	movs	r0, #0
 8019e52:	f7fe fbcf 	bl	80185f4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e56:	4845      	ldr	r0, [pc, #276]	@ (8019f6c <RadioSetRxGenericConfig+0x2d4>)
 8019e58:	f001 f838 	bl	801aecc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e5c:	4844      	ldr	r0, [pc, #272]	@ (8019f70 <RadioSetRxGenericConfig+0x2d8>)
 8019e5e:	f001 f903 	bl	801b068 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019e62:	f107 0320 	add.w	r3, r7, #32
 8019e66:	4618      	mov	r0, r3
 8019e68:	f000 fbc3 	bl	801a5f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019e6c:	68bb      	ldr	r3, [r7, #8]
 8019e6e:	8b9b      	ldrh	r3, [r3, #28]
 8019e70:	4618      	mov	r0, r3
 8019e72:	f000 fc0d 	bl	801a690 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019e76:	68bb      	ldr	r3, [r7, #8]
 8019e78:	8b1b      	ldrh	r3, [r3, #24]
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f000 fbe8 	bl	801a650 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019e80:	683b      	ldr	r3, [r7, #0]
 8019e82:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019e86:	fb03 f202 	mul.w	r2, r3, r2
 8019e8a:	68bb      	ldr	r3, [r7, #8]
 8019e8c:	689b      	ldr	r3, [r3, #8]
 8019e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e92:	4a33      	ldr	r2, [pc, #204]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019e94:	6093      	str	r3, [r2, #8]
        break;
 8019e96:	e0ba      	b.n	801a00e <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8019e98:	68bb      	ldr	r3, [r7, #8]
 8019e9a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d102      	bne.n	8019ea6 <RadioSetRxGenericConfig+0x20e>
            return -1;
 8019ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8019ea4:	e0b4      	b.n	801a010 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019ea6:	68bb      	ldr	r3, [r7, #8]
 8019ea8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8019eac:	2b01      	cmp	r3, #1
 8019eae:	d105      	bne.n	8019ebc <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8019eb0:	68bb      	ldr	r3, [r7, #8]
 8019eb2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8019eb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8019eba:	e002      	b.n	8019ec2 <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 8019ebc:	23ff      	movs	r3, #255	@ 0xff
 8019ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019ec2:	68bb      	ldr	r3, [r7, #8]
 8019ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	bf14      	ite	ne
 8019eca:	2301      	movne	r3, #1
 8019ecc:	2300      	moveq	r3, #0
 8019ece:	b2db      	uxtb	r3, r3
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f000 fd57 	bl	801a984 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	b2db      	uxtb	r3, r3
 8019eda:	4618      	mov	r0, r3
 8019edc:	f000 fd61 	bl	801a9a2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019ee2:	2201      	movs	r2, #1
 8019ee4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019ee8:	68bb      	ldr	r3, [r7, #8]
 8019eea:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8019eee:	4b1c      	ldr	r3, [pc, #112]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019ef0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019ef4:	68bb      	ldr	r3, [r7, #8]
 8019ef6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8019efa:	4b19      	ldr	r3, [pc, #100]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019f00:	68bb      	ldr	r3, [r7, #8]
 8019f02:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8019f06:	4b16      	ldr	r3, [pc, #88]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019f08:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8019f0c:	68bb      	ldr	r3, [r7, #8]
 8019f0e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8019f12:	2b02      	cmp	r3, #2
 8019f14:	d010      	beq.n	8019f38 <RadioSetRxGenericConfig+0x2a0>
 8019f16:	2b02      	cmp	r3, #2
 8019f18:	dc2c      	bgt.n	8019f74 <RadioSetRxGenericConfig+0x2dc>
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d002      	beq.n	8019f24 <RadioSetRxGenericConfig+0x28c>
 8019f1e:	2b01      	cmp	r3, #1
 8019f20:	d005      	beq.n	8019f2e <RadioSetRxGenericConfig+0x296>
            break;
 8019f22:	e027      	b.n	8019f74 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019f24:	4b0e      	ldr	r3, [pc, #56]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019f26:	2200      	movs	r2, #0
 8019f28:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019f2c:	e023      	b.n	8019f76 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019f30:	2201      	movs	r2, #1
 8019f32:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019f36:	e01e      	b.n	8019f76 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019f38:	68bb      	ldr	r3, [r7, #8]
 8019f3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019f3e:	2b0b      	cmp	r3, #11
 8019f40:	d004      	beq.n	8019f4c <RadioSetRxGenericConfig+0x2b4>
 8019f42:	68bb      	ldr	r3, [r7, #8]
 8019f44:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019f48:	2b0c      	cmp	r3, #12
 8019f4a:	d104      	bne.n	8019f56 <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019f4c:	4b04      	ldr	r3, [pc, #16]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019f4e:	2201      	movs	r2, #1
 8019f50:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019f54:	e00f      	b.n	8019f76 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019f56:	4b02      	ldr	r3, [pc, #8]	@ (8019f60 <RadioSetRxGenericConfig+0x2c8>)
 8019f58:	2200      	movs	r2, #0
 8019f5a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019f5e:	e00a      	b.n	8019f76 <RadioSetRxGenericConfig+0x2de>
 8019f60:	20001c68 	.word	0x20001c68
 8019f64:	20001c64 	.word	0x20001c64
 8019f68:	20001cdc 	.word	0x20001cdc
 8019f6c:	20001ca0 	.word	0x20001ca0
 8019f70:	20001c76 	.word	0x20001c76
            break;
 8019f74:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019f76:	4b28      	ldr	r3, [pc, #160]	@ (801a018 <RadioSetRxGenericConfig+0x380>)
 8019f78:	2201      	movs	r2, #1
 8019f7a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019f7c:	68bb      	ldr	r3, [r7, #8]
 8019f7e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8019f80:	4b25      	ldr	r3, [pc, #148]	@ (801a018 <RadioSetRxGenericConfig+0x380>)
 8019f82:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019f84:	68bb      	ldr	r3, [r7, #8]
 8019f86:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8019f8a:	4b23      	ldr	r3, [pc, #140]	@ (801a018 <RadioSetRxGenericConfig+0x380>)
 8019f8c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019f8e:	4a22      	ldr	r2, [pc, #136]	@ (801a018 <RadioSetRxGenericConfig+0x380>)
 8019f90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019f94:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019f96:	68bb      	ldr	r3, [r7, #8]
 8019f98:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8019f9c:	4b1e      	ldr	r3, [pc, #120]	@ (801a018 <RadioSetRxGenericConfig+0x380>)
 8019f9e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019fa2:	68bb      	ldr	r3, [r7, #8]
 8019fa4:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8019fa8:	4b1b      	ldr	r3, [pc, #108]	@ (801a018 <RadioSetRxGenericConfig+0x380>)
 8019faa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8019fae:	f7ff f98a 	bl	80192c6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019fb2:	2001      	movs	r0, #1
 8019fb4:	f7fe fb1e 	bl	80185f4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019fb8:	4818      	ldr	r0, [pc, #96]	@ (801a01c <RadioSetRxGenericConfig+0x384>)
 8019fba:	f000 ff87 	bl	801aecc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019fbe:	4818      	ldr	r0, [pc, #96]	@ (801a020 <RadioSetRxGenericConfig+0x388>)
 8019fc0:	f001 f852 	bl	801b068 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019fc4:	4b14      	ldr	r3, [pc, #80]	@ (801a018 <RadioSetRxGenericConfig+0x380>)
 8019fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8019fca:	2b01      	cmp	r3, #1
 8019fcc:	d10d      	bne.n	8019fea <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019fce:	f240 7036 	movw	r0, #1846	@ 0x736
 8019fd2:	f001 f9b1 	bl	801b338 <SUBGRF_ReadRegister>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	f023 0304 	bic.w	r3, r3, #4
 8019fdc:	b2db      	uxtb	r3, r3
 8019fde:	4619      	mov	r1, r3
 8019fe0:	f240 7036 	movw	r0, #1846	@ 0x736
 8019fe4:	f001 f986 	bl	801b2f4 <SUBGRF_WriteRegister>
 8019fe8:	e00c      	b.n	801a004 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019fea:	f240 7036 	movw	r0, #1846	@ 0x736
 8019fee:	f001 f9a3 	bl	801b338 <SUBGRF_ReadRegister>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	f043 0304 	orr.w	r3, r3, #4
 8019ff8:	b2db      	uxtb	r3, r3
 8019ffa:	4619      	mov	r1, r3
 8019ffc:	f240 7036 	movw	r0, #1846	@ 0x736
 801a000:	f001 f978 	bl	801b2f4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a004:	4b04      	ldr	r3, [pc, #16]	@ (801a018 <RadioSetRxGenericConfig+0x380>)
 801a006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a00a:	609a      	str	r2, [r3, #8]
        break;
 801a00c:	bf00      	nop
    }
    return status;
 801a00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a010:	4618      	mov	r0, r3
 801a012:	3730      	adds	r7, #48	@ 0x30
 801a014:	46bd      	mov	sp, r7
 801a016:	bd80      	pop	{r7, pc}
 801a018:	20001c68 	.word	0x20001c68
 801a01c:	20001ca0 	.word	0x20001ca0
 801a020:	20001c76 	.word	0x20001c76

0801a024 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b08e      	sub	sp, #56	@ 0x38
 801a028:	af00      	add	r7, sp, #0
 801a02a:	60b9      	str	r1, [r7, #8]
 801a02c:	607b      	str	r3, [r7, #4]
 801a02e:	4603      	mov	r3, r0
 801a030:	73fb      	strb	r3, [r7, #15]
 801a032:	4613      	mov	r3, r2
 801a034:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a036:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a03a:	2200      	movs	r2, #0
 801a03c:	601a      	str	r2, [r3, #0]
 801a03e:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a040:	f001 fc59 	bl	801b8f6 <RFW_DeInit>
    switch( modem )
 801a044:	7bfb      	ldrb	r3, [r7, #15]
 801a046:	2b03      	cmp	r3, #3
 801a048:	f200 8205 	bhi.w	801a456 <RadioSetTxGenericConfig+0x432>
 801a04c:	a201      	add	r2, pc, #4	@ (adr r2, 801a054 <RadioSetTxGenericConfig+0x30>)
 801a04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a052:	bf00      	nop
 801a054:	0801a1d9 	.word	0x0801a1d9
 801a058:	0801a321 	.word	0x0801a321
 801a05c:	0801a419 	.word	0x0801a419
 801a060:	0801a065 	.word	0x0801a065
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	7c9b      	ldrb	r3, [r3, #18]
 801a068:	2b08      	cmp	r3, #8
 801a06a:	d902      	bls.n	801a072 <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 801a06c:	f04f 33ff 	mov.w	r3, #4294967295
 801a070:	e206      	b.n	801a480 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801a072:	68bb      	ldr	r3, [r7, #8]
 801a074:	6899      	ldr	r1, [r3, #8]
 801a076:	68bb      	ldr	r3, [r7, #8]
 801a078:	7c9b      	ldrb	r3, [r3, #18]
 801a07a:	461a      	mov	r2, r3
 801a07c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a080:	4618      	mov	r0, r3
 801a082:	f001 fd2b 	bl	801badc <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a086:	68bb      	ldr	r3, [r7, #8]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d102      	bne.n	801a094 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 801a08e:	f04f 33ff 	mov.w	r3, #4294967295
 801a092:	e1f5      	b.n	801a480 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 801a094:	68bb      	ldr	r3, [r7, #8]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	f242 7210 	movw	r2, #10000	@ 0x2710
 801a09c:	4293      	cmp	r3, r2
 801a09e:	d813      	bhi.n	801a0c8 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801a0a0:	2302      	movs	r3, #2
 801a0a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a0a6:	4b99      	ldr	r3, [pc, #612]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a0a8:	2203      	movs	r2, #3
 801a0aa:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a0ac:	4b97      	ldr	r3, [pc, #604]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a0ae:	2203      	movs	r2, #3
 801a0b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a0b4:	68bb      	ldr	r3, [r7, #8]
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	4a94      	ldr	r2, [pc, #592]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a0ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a0bc:	68bb      	ldr	r3, [r7, #8]
 801a0be:	7cda      	ldrb	r2, [r3, #19]
 801a0c0:	4b92      	ldr	r3, [pc, #584]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a0c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a0c6:	e017      	b.n	801a0f8 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a0ce:	4b8f      	ldr	r3, [pc, #572]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a0d4:	4b8d      	ldr	r3, [pc, #564]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a0d6:	2200      	movs	r2, #0
 801a0d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a0dc:	68bb      	ldr	r3, [r7, #8]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	4a8a      	ldr	r2, [pc, #552]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a0e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a0e4:	68bb      	ldr	r3, [r7, #8]
 801a0e6:	7cda      	ldrb	r2, [r3, #19]
 801a0e8:	4b88      	ldr	r3, [pc, #544]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a0ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801a0ee:	68bb      	ldr	r3, [r7, #8]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	089b      	lsrs	r3, r3, #2
 801a0f4:	4a85      	ldr	r2, [pc, #532]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a0f6:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	b29b      	uxth	r3, r3
 801a0fe:	00db      	lsls	r3, r3, #3
 801a100:	b29a      	uxth	r2, r3
 801a102:	4b82      	ldr	r3, [pc, #520]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a104:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a106:	4b81      	ldr	r3, [pc, #516]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a108:	2204      	movs	r2, #4
 801a10a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801a10c:	68bb      	ldr	r3, [r7, #8]
 801a10e:	7c9b      	ldrb	r3, [r3, #18]
 801a110:	00db      	lsls	r3, r3, #3
 801a112:	b2da      	uxtb	r2, r3
 801a114:	4b7d      	ldr	r3, [pc, #500]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a116:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a118:	4b7c      	ldr	r3, [pc, #496]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a11a:	2200      	movs	r2, #0
 801a11c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a11e:	68bb      	ldr	r3, [r7, #8]
 801a120:	7d9b      	ldrb	r3, [r3, #22]
 801a122:	2b02      	cmp	r3, #2
 801a124:	d003      	beq.n	801a12e <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a126:	68bb      	ldr	r3, [r7, #8]
 801a128:	7d1b      	ldrb	r3, [r3, #20]
 801a12a:	2b02      	cmp	r3, #2
 801a12c:	d12b      	bne.n	801a186 <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a12e:	68bb      	ldr	r3, [r7, #8]
 801a130:	7d5b      	ldrb	r3, [r3, #21]
 801a132:	2bf1      	cmp	r3, #241	@ 0xf1
 801a134:	d00a      	beq.n	801a14c <RadioSetTxGenericConfig+0x128>
 801a136:	68bb      	ldr	r3, [r7, #8]
 801a138:	7d5b      	ldrb	r3, [r3, #21]
 801a13a:	2bf2      	cmp	r3, #242	@ 0xf2
 801a13c:	d006      	beq.n	801a14c <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a13e:	68bb      	ldr	r3, [r7, #8]
 801a140:	7d5b      	ldrb	r3, [r3, #21]
 801a142:	2b01      	cmp	r3, #1
 801a144:	d002      	beq.n	801a14c <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 801a146:	f04f 33ff 	mov.w	r3, #4294967295
 801a14a:	e199      	b.n	801a480 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801a14c:	68bb      	ldr	r3, [r7, #8]
 801a14e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801a150:	2301      	movs	r3, #1
 801a152:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a156:	4b6e      	ldr	r3, [pc, #440]	@ (801a310 <RadioSetTxGenericConfig+0x2ec>)
 801a158:	6819      	ldr	r1, [r3, #0]
 801a15a:	f107 0320 	add.w	r3, r7, #32
 801a15e:	4a6d      	ldr	r2, [pc, #436]	@ (801a314 <RadioSetTxGenericConfig+0x2f0>)
 801a160:	4618      	mov	r0, r3
 801a162:	f001 fbbb 	bl	801b8dc <RFW_Init>
 801a166:	4603      	mov	r3, r0
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d002      	beq.n	801a172 <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 801a16c:	f04f 33ff 	mov.w	r3, #4294967295
 801a170:	e186      	b.n	801a480 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a172:	4b66      	ldr	r3, [pc, #408]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a174:	2200      	movs	r2, #0
 801a176:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a178:	4b64      	ldr	r3, [pc, #400]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a17a:	2201      	movs	r2, #1
 801a17c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a17e:	4b63      	ldr	r3, [pc, #396]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a180:	2200      	movs	r2, #0
 801a182:	755a      	strb	r2, [r3, #21]
        {
 801a184:	e00b      	b.n	801a19e <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a186:	68bb      	ldr	r3, [r7, #8]
 801a188:	7d5a      	ldrb	r2, [r3, #21]
 801a18a:	4b60      	ldr	r3, [pc, #384]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a18c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a18e:	68bb      	ldr	r3, [r7, #8]
 801a190:	7d9a      	ldrb	r2, [r3, #22]
 801a192:	4b5e      	ldr	r3, [pc, #376]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a194:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a196:	68bb      	ldr	r3, [r7, #8]
 801a198:	7d1a      	ldrb	r2, [r3, #20]
 801a19a:	4b5c      	ldr	r3, [pc, #368]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a19c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a19e:	f7ff f892 	bl	80192c6 <RadioStandby>
        RadioSetModem( radio_modem );
 801a1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	f7fe fa24 	bl	80185f4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a1ac:	485a      	ldr	r0, [pc, #360]	@ (801a318 <RadioSetTxGenericConfig+0x2f4>)
 801a1ae:	f000 fe8d 	bl	801aecc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a1b2:	485a      	ldr	r0, [pc, #360]	@ (801a31c <RadioSetTxGenericConfig+0x2f8>)
 801a1b4:	f000 ff58 	bl	801b068 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a1b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a1bc:	4618      	mov	r0, r3
 801a1be:	f000 fa18 	bl	801a5f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a1c2:	68bb      	ldr	r3, [r7, #8]
 801a1c4:	8a1b      	ldrh	r3, [r3, #16]
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	f000 fa62 	bl	801a690 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	899b      	ldrh	r3, [r3, #12]
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f000 fa3d 	bl	801a650 <SUBGRF_SetCrcPolynomial>
        break;
 801a1d6:	e13f      	b.n	801a458 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a1d8:	68bb      	ldr	r3, [r7, #8]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d102      	bne.n	801a1e6 <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 801a1e0:	f04f 33ff 	mov.w	r3, #4294967295
 801a1e4:	e14c      	b.n	801a480 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a1e6:	68bb      	ldr	r3, [r7, #8]
 801a1e8:	7c9b      	ldrb	r3, [r3, #18]
 801a1ea:	2b08      	cmp	r3, #8
 801a1ec:	d902      	bls.n	801a1f4 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 801a1ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a1f2:	e145      	b.n	801a480 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a1f4:	68bb      	ldr	r3, [r7, #8]
 801a1f6:	6899      	ldr	r1, [r3, #8]
 801a1f8:	68bb      	ldr	r3, [r7, #8]
 801a1fa:	7c9b      	ldrb	r3, [r3, #18]
 801a1fc:	461a      	mov	r2, r3
 801a1fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a202:	4618      	mov	r0, r3
 801a204:	f001 fc6a 	bl	801badc <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a208:	4b40      	ldr	r3, [pc, #256]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a20a:	2200      	movs	r2, #0
 801a20c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a210:	68bb      	ldr	r3, [r7, #8]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	4a3d      	ldr	r2, [pc, #244]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a216:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	7cda      	ldrb	r2, [r3, #19]
 801a21c:	4b3b      	ldr	r3, [pc, #236]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a21e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	699b      	ldr	r3, [r3, #24]
 801a226:	4a39      	ldr	r2, [pc, #228]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a228:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a22a:	4b38      	ldr	r3, [pc, #224]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a22c:	2200      	movs	r2, #0
 801a22e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a230:	68bb      	ldr	r3, [r7, #8]
 801a232:	685b      	ldr	r3, [r3, #4]
 801a234:	b29b      	uxth	r3, r3
 801a236:	00db      	lsls	r3, r3, #3
 801a238:	b29a      	uxth	r2, r3
 801a23a:	4b34      	ldr	r3, [pc, #208]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a23c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a23e:	4b33      	ldr	r3, [pc, #204]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a240:	2204      	movs	r2, #4
 801a242:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	7c9b      	ldrb	r3, [r3, #18]
 801a248:	00db      	lsls	r3, r3, #3
 801a24a:	b2da      	uxtb	r2, r3
 801a24c:	4b2f      	ldr	r3, [pc, #188]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a24e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a250:	4b2e      	ldr	r3, [pc, #184]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a252:	2200      	movs	r2, #0
 801a254:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a256:	68bb      	ldr	r3, [r7, #8]
 801a258:	7d9b      	ldrb	r3, [r3, #22]
 801a25a:	2b02      	cmp	r3, #2
 801a25c:	d003      	beq.n	801a266 <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a25e:	68bb      	ldr	r3, [r7, #8]
 801a260:	7d1b      	ldrb	r3, [r3, #20]
 801a262:	2b02      	cmp	r3, #2
 801a264:	d12a      	bne.n	801a2bc <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a266:	68bb      	ldr	r3, [r7, #8]
 801a268:	7d5b      	ldrb	r3, [r3, #21]
 801a26a:	2bf1      	cmp	r3, #241	@ 0xf1
 801a26c:	d00a      	beq.n	801a284 <RadioSetTxGenericConfig+0x260>
 801a26e:	68bb      	ldr	r3, [r7, #8]
 801a270:	7d5b      	ldrb	r3, [r3, #21]
 801a272:	2bf2      	cmp	r3, #242	@ 0xf2
 801a274:	d006      	beq.n	801a284 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a276:	68bb      	ldr	r3, [r7, #8]
 801a278:	7d5b      	ldrb	r3, [r3, #21]
 801a27a:	2b01      	cmp	r3, #1
 801a27c:	d002      	beq.n	801a284 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 801a27e:	f04f 33ff 	mov.w	r3, #4294967295
 801a282:	e0fd      	b.n	801a480 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a284:	2301      	movs	r3, #1
 801a286:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a28c:	4b20      	ldr	r3, [pc, #128]	@ (801a310 <RadioSetTxGenericConfig+0x2ec>)
 801a28e:	6819      	ldr	r1, [r3, #0]
 801a290:	f107 0314 	add.w	r3, r7, #20
 801a294:	4a1f      	ldr	r2, [pc, #124]	@ (801a314 <RadioSetTxGenericConfig+0x2f0>)
 801a296:	4618      	mov	r0, r3
 801a298:	f001 fb20 	bl	801b8dc <RFW_Init>
 801a29c:	4603      	mov	r3, r0
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d002      	beq.n	801a2a8 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 801a2a2:	f04f 33ff 	mov.w	r3, #4294967295
 801a2a6:	e0eb      	b.n	801a480 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a2a8:	4b18      	ldr	r3, [pc, #96]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a2aa:	2200      	movs	r2, #0
 801a2ac:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a2ae:	4b17      	ldr	r3, [pc, #92]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a2b0:	2201      	movs	r2, #1
 801a2b2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a2b4:	4b15      	ldr	r3, [pc, #84]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a2b6:	2200      	movs	r2, #0
 801a2b8:	755a      	strb	r2, [r3, #21]
        {
 801a2ba:	e00b      	b.n	801a2d4 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a2bc:	68bb      	ldr	r3, [r7, #8]
 801a2be:	7d5a      	ldrb	r2, [r3, #21]
 801a2c0:	4b12      	ldr	r3, [pc, #72]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a2c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a2c4:	68bb      	ldr	r3, [r7, #8]
 801a2c6:	7d9a      	ldrb	r2, [r3, #22]
 801a2c8:	4b10      	ldr	r3, [pc, #64]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a2ca:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a2cc:	68bb      	ldr	r3, [r7, #8]
 801a2ce:	7d1a      	ldrb	r2, [r3, #20]
 801a2d0:	4b0e      	ldr	r3, [pc, #56]	@ (801a30c <RadioSetTxGenericConfig+0x2e8>)
 801a2d2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a2d4:	f7fe fff7 	bl	80192c6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a2d8:	2000      	movs	r0, #0
 801a2da:	f7fe f98b 	bl	80185f4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a2de:	480e      	ldr	r0, [pc, #56]	@ (801a318 <RadioSetTxGenericConfig+0x2f4>)
 801a2e0:	f000 fdf4 	bl	801aecc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2e4:	480d      	ldr	r0, [pc, #52]	@ (801a31c <RadioSetTxGenericConfig+0x2f8>)
 801a2e6:	f000 febf 	bl	801b068 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a2ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f000 f97f 	bl	801a5f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a2f4:	68bb      	ldr	r3, [r7, #8]
 801a2f6:	8a1b      	ldrh	r3, [r3, #16]
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	f000 f9c9 	bl	801a690 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a2fe:	68bb      	ldr	r3, [r7, #8]
 801a300:	899b      	ldrh	r3, [r3, #12]
 801a302:	4618      	mov	r0, r3
 801a304:	f000 f9a4 	bl	801a650 <SUBGRF_SetCrcPolynomial>
        break;
 801a308:	e0a6      	b.n	801a458 <RadioSetTxGenericConfig+0x434>
 801a30a:	bf00      	nop
 801a30c:	20001c68 	.word	0x20001c68
 801a310:	20001c64 	.word	0x20001c64
 801a314:	20001cc4 	.word	0x20001cc4
 801a318:	20001ca0 	.word	0x20001ca0
 801a31c:	20001c76 	.word	0x20001c76
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a320:	4b59      	ldr	r3, [pc, #356]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a322:	2201      	movs	r2, #1
 801a324:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a328:	68bb      	ldr	r3, [r7, #8]
 801a32a:	781a      	ldrb	r2, [r3, #0]
 801a32c:	4b56      	ldr	r3, [pc, #344]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a32e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a332:	68bb      	ldr	r3, [r7, #8]
 801a334:	785a      	ldrb	r2, [r3, #1]
 801a336:	4b54      	ldr	r3, [pc, #336]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a33c:	68bb      	ldr	r3, [r7, #8]
 801a33e:	789a      	ldrb	r2, [r3, #2]
 801a340:	4b51      	ldr	r3, [pc, #324]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a342:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	78db      	ldrb	r3, [r3, #3]
 801a34a:	2b02      	cmp	r3, #2
 801a34c:	d010      	beq.n	801a370 <RadioSetTxGenericConfig+0x34c>
 801a34e:	2b02      	cmp	r3, #2
 801a350:	dc20      	bgt.n	801a394 <RadioSetTxGenericConfig+0x370>
 801a352:	2b00      	cmp	r3, #0
 801a354:	d002      	beq.n	801a35c <RadioSetTxGenericConfig+0x338>
 801a356:	2b01      	cmp	r3, #1
 801a358:	d005      	beq.n	801a366 <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801a35a:	e01b      	b.n	801a394 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a35c:	4b4a      	ldr	r3, [pc, #296]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a35e:	2200      	movs	r2, #0
 801a360:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a364:	e017      	b.n	801a396 <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a366:	4b48      	ldr	r3, [pc, #288]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a368:	2201      	movs	r2, #1
 801a36a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a36e:	e012      	b.n	801a396 <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a370:	68bb      	ldr	r3, [r7, #8]
 801a372:	781b      	ldrb	r3, [r3, #0]
 801a374:	2b0b      	cmp	r3, #11
 801a376:	d003      	beq.n	801a380 <RadioSetTxGenericConfig+0x35c>
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	781b      	ldrb	r3, [r3, #0]
 801a37c:	2b0c      	cmp	r3, #12
 801a37e:	d104      	bne.n	801a38a <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a380:	4b41      	ldr	r3, [pc, #260]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a382:	2201      	movs	r2, #1
 801a384:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a388:	e005      	b.n	801a396 <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a38a:	4b3f      	ldr	r3, [pc, #252]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a38c:	2200      	movs	r2, #0
 801a38e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a392:	e000      	b.n	801a396 <RadioSetTxGenericConfig+0x372>
            break;
 801a394:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a396:	4b3c      	ldr	r3, [pc, #240]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a398:	2201      	movs	r2, #1
 801a39a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a39c:	68bb      	ldr	r3, [r7, #8]
 801a39e:	889a      	ldrh	r2, [r3, #4]
 801a3a0:	4b39      	ldr	r3, [pc, #228]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a3a2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	799a      	ldrb	r2, [r3, #6]
 801a3a8:	4b37      	ldr	r3, [pc, #220]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a3aa:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a3ac:	68bb      	ldr	r3, [r7, #8]
 801a3ae:	79da      	ldrb	r2, [r3, #7]
 801a3b0:	4b35      	ldr	r3, [pc, #212]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a3b2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a3b6:	68bb      	ldr	r3, [r7, #8]
 801a3b8:	7a1a      	ldrb	r2, [r3, #8]
 801a3ba:	4b33      	ldr	r3, [pc, #204]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a3bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801a3c0:	f7fe ff81 	bl	80192c6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a3c4:	2001      	movs	r0, #1
 801a3c6:	f7fe f915 	bl	80185f4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a3ca:	4830      	ldr	r0, [pc, #192]	@ (801a48c <RadioSetTxGenericConfig+0x468>)
 801a3cc:	f000 fd7e 	bl	801aecc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a3d0:	482f      	ldr	r0, [pc, #188]	@ (801a490 <RadioSetTxGenericConfig+0x46c>)
 801a3d2:	f000 fe49 	bl	801b068 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a3d6:	4b2c      	ldr	r3, [pc, #176]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a3d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a3dc:	2b06      	cmp	r3, #6
 801a3de:	d10d      	bne.n	801a3fc <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a3e0:	f640 0089 	movw	r0, #2185	@ 0x889
 801a3e4:	f000 ffa8 	bl	801b338 <SUBGRF_ReadRegister>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	f023 0304 	bic.w	r3, r3, #4
 801a3ee:	b2db      	uxtb	r3, r3
 801a3f0:	4619      	mov	r1, r3
 801a3f2:	f640 0089 	movw	r0, #2185	@ 0x889
 801a3f6:	f000 ff7d 	bl	801b2f4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801a3fa:	e02d      	b.n	801a458 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a3fc:	f640 0089 	movw	r0, #2185	@ 0x889
 801a400:	f000 ff9a 	bl	801b338 <SUBGRF_ReadRegister>
 801a404:	4603      	mov	r3, r0
 801a406:	f043 0304 	orr.w	r3, r3, #4
 801a40a:	b2db      	uxtb	r3, r3
 801a40c:	4619      	mov	r1, r3
 801a40e:	f640 0089 	movw	r0, #2185	@ 0x889
 801a412:	f000 ff6f 	bl	801b2f4 <SUBGRF_WriteRegister>
        break;
 801a416:	e01f      	b.n	801a458 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a418:	68bb      	ldr	r3, [r7, #8]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d004      	beq.n	801a42a <RadioSetTxGenericConfig+0x406>
 801a420:	68bb      	ldr	r3, [r7, #8]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a428:	d902      	bls.n	801a430 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 801a42a:	f04f 33ff 	mov.w	r3, #4294967295
 801a42e:	e027      	b.n	801a480 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 801a430:	2003      	movs	r0, #3
 801a432:	f7fe f8df 	bl	80185f4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a436:	4b14      	ldr	r3, [pc, #80]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a438:	2202      	movs	r2, #2
 801a43a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a43e:	68bb      	ldr	r3, [r7, #8]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	4a11      	ldr	r2, [pc, #68]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a444:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a446:	4b10      	ldr	r3, [pc, #64]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a448:	2216      	movs	r2, #22
 801a44a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a44e:	480f      	ldr	r0, [pc, #60]	@ (801a48c <RadioSetTxGenericConfig+0x468>)
 801a450:	f000 fd3c 	bl	801aecc <SUBGRF_SetModulationParams>
        break;
 801a454:	e000      	b.n	801a458 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 801a456:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a45c:	4618      	mov	r0, r3
 801a45e:	f001 f87f 	bl	801b560 <SUBGRF_SetRfTxPower>
 801a462:	4603      	mov	r3, r0
 801a464:	461a      	mov	r2, r3
 801a466:	4b08      	ldr	r3, [pc, #32]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a468:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a46c:	4b06      	ldr	r3, [pc, #24]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a46e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a472:	4618      	mov	r0, r3
 801a474:	f001 fa53 	bl	801b91e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a478:	4a03      	ldr	r2, [pc, #12]	@ (801a488 <RadioSetTxGenericConfig+0x464>)
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	6053      	str	r3, [r2, #4]
    return 0;
 801a47e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a480:	4618      	mov	r0, r3
 801a482:	3738      	adds	r7, #56	@ 0x38
 801a484:	46bd      	mov	sp, r7
 801a486:	bd80      	pop	{r7, pc}
 801a488:	20001c68 	.word	0x20001c68
 801a48c:	20001ca0 	.word	0x20001ca0
 801a490:	20001c76 	.word	0x20001c76

0801a494 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801a494:	b480      	push	{r7}
 801a496:	b085      	sub	sp, #20
 801a498:	af00      	add	r7, sp, #0
 801a49a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801a49c:	2301      	movs	r3, #1
 801a49e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	3714      	adds	r7, #20
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	bc80      	pop	{r7}
 801a4aa:	4770      	bx	lr

0801a4ac <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801a4ac:	b480      	push	{r7}
 801a4ae:	b083      	sub	sp, #12
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	6078      	str	r0, [r7, #4]
 801a4b4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801a4b6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	370c      	adds	r7, #12
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	bc80      	pop	{r7}
 801a4c0:	4770      	bx	lr
	...

0801a4c4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a4c4:	b580      	push	{r7, lr}
 801a4c6:	b084      	sub	sp, #16
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d002      	beq.n	801a4d8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a4d2:	4a1d      	ldr	r2, [pc, #116]	@ (801a548 <SUBGRF_Init+0x84>)
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a4d8:	f7e7 fd6a 	bl	8001fb0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a4dc:	2002      	movs	r0, #2
 801a4de:	f001 f91b 	bl	801b718 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a4e2:	4b1a      	ldr	r3, [pc, #104]	@ (801a54c <SUBGRF_Init+0x88>)
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a4e8:	2000      	movs	r0, #0
 801a4ea:	f000 f97f 	bl	801a7ec <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a4ee:	f7f1 fab7 	bl	800ba60 <RBI_IsTCXO>
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	2b01      	cmp	r3, #1
 801a4f6:	d10e      	bne.n	801a516 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a4f8:	2140      	movs	r1, #64	@ 0x40
 801a4fa:	2001      	movs	r0, #1
 801a4fc:	f000 fb8a 	bl	801ac14 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a500:	2100      	movs	r1, #0
 801a502:	f640 1011 	movw	r0, #2321	@ 0x911
 801a506:	f000 fef5 	bl	801b2f4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a50a:	237f      	movs	r3, #127	@ 0x7f
 801a50c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a50e:	7b38      	ldrb	r0, [r7, #12]
 801a510:	f000 fa8d 	bl	801aa2e <SUBGRF_Calibrate>
 801a514:	e009      	b.n	801a52a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a516:	2120      	movs	r1, #32
 801a518:	f640 1011 	movw	r0, #2321	@ 0x911
 801a51c:	f000 feea 	bl	801b2f4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a520:	2120      	movs	r1, #32
 801a522:	f640 1012 	movw	r0, #2322	@ 0x912
 801a526:	f000 fee5 	bl	801b2f4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a52a:	210e      	movs	r1, #14
 801a52c:	f640 101f 	movw	r0, #2335	@ 0x91f
 801a530:	f000 fee0 	bl	801b2f4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801a534:	f7f1 fa78 	bl	800ba28 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a538:	4b05      	ldr	r3, [pc, #20]	@ (801a550 <SUBGRF_Init+0x8c>)
 801a53a:	2201      	movs	r2, #1
 801a53c:	701a      	strb	r2, [r3, #0]
}
 801a53e:	bf00      	nop
 801a540:	3710      	adds	r7, #16
 801a542:	46bd      	mov	sp, r7
 801a544:	bd80      	pop	{r7, pc}
 801a546:	bf00      	nop
 801a548:	20001d00 	.word	0x20001d00
 801a54c:	20001cfc 	.word	0x20001cfc
 801a550:	20001cf4 	.word	0x20001cf4

0801a554 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a554:	b480      	push	{r7}
 801a556:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a558:	4b02      	ldr	r3, [pc, #8]	@ (801a564 <SUBGRF_GetOperatingMode+0x10>)
 801a55a:	781b      	ldrb	r3, [r3, #0]
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	46bd      	mov	sp, r7
 801a560:	bc80      	pop	{r7}
 801a562:	4770      	bx	lr
 801a564:	20001cf4 	.word	0x20001cf4

0801a568 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	b082      	sub	sp, #8
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
 801a570:	460b      	mov	r3, r1
 801a572:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a574:	78fb      	ldrb	r3, [r7, #3]
 801a576:	461a      	mov	r2, r3
 801a578:	6879      	ldr	r1, [r7, #4]
 801a57a:	2000      	movs	r0, #0
 801a57c:	f000 ff40 	bl	801b400 <SUBGRF_WriteBuffer>
}
 801a580:	bf00      	nop
 801a582:	3708      	adds	r7, #8
 801a584:	46bd      	mov	sp, r7
 801a586:	bd80      	pop	{r7, pc}

0801a588 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b086      	sub	sp, #24
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	60f8      	str	r0, [r7, #12]
 801a590:	60b9      	str	r1, [r7, #8]
 801a592:	4613      	mov	r3, r2
 801a594:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a596:	2300      	movs	r3, #0
 801a598:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a59a:	f107 0317 	add.w	r3, r7, #23
 801a59e:	4619      	mov	r1, r3
 801a5a0:	68b8      	ldr	r0, [r7, #8]
 801a5a2:	f000 fe29 	bl	801b1f8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a5a6:	68bb      	ldr	r3, [r7, #8]
 801a5a8:	781b      	ldrb	r3, [r3, #0]
 801a5aa:	79fa      	ldrb	r2, [r7, #7]
 801a5ac:	429a      	cmp	r2, r3
 801a5ae:	d201      	bcs.n	801a5b4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a5b0:	2301      	movs	r3, #1
 801a5b2:	e007      	b.n	801a5c4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a5b4:	7df8      	ldrb	r0, [r7, #23]
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	781b      	ldrb	r3, [r3, #0]
 801a5ba:	461a      	mov	r2, r3
 801a5bc:	68f9      	ldr	r1, [r7, #12]
 801a5be:	f000 ff41 	bl	801b444 <SUBGRF_ReadBuffer>

    return 0;
 801a5c2:	2300      	movs	r3, #0
}
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	3718      	adds	r7, #24
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bd80      	pop	{r7, pc}

0801a5cc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b084      	sub	sp, #16
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	60f8      	str	r0, [r7, #12]
 801a5d4:	460b      	mov	r3, r1
 801a5d6:	607a      	str	r2, [r7, #4]
 801a5d8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a5da:	7afb      	ldrb	r3, [r7, #11]
 801a5dc:	4619      	mov	r1, r3
 801a5de:	68f8      	ldr	r0, [r7, #12]
 801a5e0:	f7ff ffc2 	bl	801a568 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f000 f91d 	bl	801a824 <SUBGRF_SetTx>
}
 801a5ea:	bf00      	nop
 801a5ec:	3710      	adds	r7, #16
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	bd80      	pop	{r7, pc}

0801a5f2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a5f2:	b580      	push	{r7, lr}
 801a5f4:	b082      	sub	sp, #8
 801a5f6:	af00      	add	r7, sp, #0
 801a5f8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a5fa:	2208      	movs	r2, #8
 801a5fc:	6879      	ldr	r1, [r7, #4]
 801a5fe:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801a602:	f000 feb9 	bl	801b378 <SUBGRF_WriteRegisters>
    return 0;
 801a606:	2300      	movs	r3, #0
}
 801a608:	4618      	mov	r0, r3
 801a60a:	3708      	adds	r7, #8
 801a60c:	46bd      	mov	sp, r7
 801a60e:	bd80      	pop	{r7, pc}

0801a610 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b084      	sub	sp, #16
 801a614:	af00      	add	r7, sp, #0
 801a616:	4603      	mov	r3, r0
 801a618:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a61a:	88fb      	ldrh	r3, [r7, #6]
 801a61c:	0a1b      	lsrs	r3, r3, #8
 801a61e:	b29b      	uxth	r3, r3
 801a620:	b2db      	uxtb	r3, r3
 801a622:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a624:	88fb      	ldrh	r3, [r7, #6]
 801a626:	b2db      	uxtb	r3, r3
 801a628:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a62a:	f000 fb77 	bl	801ad1c <SUBGRF_GetPacketType>
 801a62e:	4603      	mov	r3, r0
 801a630:	2b00      	cmp	r3, #0
 801a632:	d108      	bne.n	801a646 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a634:	f107 030c 	add.w	r3, r7, #12
 801a638:	2202      	movs	r2, #2
 801a63a:	4619      	mov	r1, r3
 801a63c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801a640:	f000 fe9a 	bl	801b378 <SUBGRF_WriteRegisters>
            break;
 801a644:	e000      	b.n	801a648 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a646:	bf00      	nop
    }
}
 801a648:	bf00      	nop
 801a64a:	3710      	adds	r7, #16
 801a64c:	46bd      	mov	sp, r7
 801a64e:	bd80      	pop	{r7, pc}

0801a650 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a650:	b580      	push	{r7, lr}
 801a652:	b084      	sub	sp, #16
 801a654:	af00      	add	r7, sp, #0
 801a656:	4603      	mov	r3, r0
 801a658:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a65a:	88fb      	ldrh	r3, [r7, #6]
 801a65c:	0a1b      	lsrs	r3, r3, #8
 801a65e:	b29b      	uxth	r3, r3
 801a660:	b2db      	uxtb	r3, r3
 801a662:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a664:	88fb      	ldrh	r3, [r7, #6]
 801a666:	b2db      	uxtb	r3, r3
 801a668:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a66a:	f000 fb57 	bl	801ad1c <SUBGRF_GetPacketType>
 801a66e:	4603      	mov	r3, r0
 801a670:	2b00      	cmp	r3, #0
 801a672:	d108      	bne.n	801a686 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a674:	f107 030c 	add.w	r3, r7, #12
 801a678:	2202      	movs	r2, #2
 801a67a:	4619      	mov	r1, r3
 801a67c:	f240 60be 	movw	r0, #1726	@ 0x6be
 801a680:	f000 fe7a 	bl	801b378 <SUBGRF_WriteRegisters>
            break;
 801a684:	e000      	b.n	801a688 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a686:	bf00      	nop
    }
}
 801a688:	bf00      	nop
 801a68a:	3710      	adds	r7, #16
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bd80      	pop	{r7, pc}

0801a690 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b084      	sub	sp, #16
 801a694:	af00      	add	r7, sp, #0
 801a696:	4603      	mov	r3, r0
 801a698:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a69a:	2300      	movs	r3, #0
 801a69c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a69e:	f000 fb3d 	bl	801ad1c <SUBGRF_GetPacketType>
 801a6a2:	4603      	mov	r3, r0
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d121      	bne.n	801a6ec <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a6a8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a6ac:	f000 fe44 	bl	801b338 <SUBGRF_ReadRegister>
 801a6b0:	4603      	mov	r3, r0
 801a6b2:	f023 0301 	bic.w	r3, r3, #1
 801a6b6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a6b8:	88fb      	ldrh	r3, [r7, #6]
 801a6ba:	0a1b      	lsrs	r3, r3, #8
 801a6bc:	b29b      	uxth	r3, r3
 801a6be:	b25b      	sxtb	r3, r3
 801a6c0:	f003 0301 	and.w	r3, r3, #1
 801a6c4:	b25a      	sxtb	r2, r3
 801a6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a6ca:	4313      	orrs	r3, r2
 801a6cc:	b25b      	sxtb	r3, r3
 801a6ce:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a6d0:	7bfb      	ldrb	r3, [r7, #15]
 801a6d2:	4619      	mov	r1, r3
 801a6d4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a6d8:	f000 fe0c 	bl	801b2f4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a6dc:	88fb      	ldrh	r3, [r7, #6]
 801a6de:	b2db      	uxtb	r3, r3
 801a6e0:	4619      	mov	r1, r3
 801a6e2:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801a6e6:	f000 fe05 	bl	801b2f4 <SUBGRF_WriteRegister>
            break;
 801a6ea:	e000      	b.n	801a6ee <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a6ec:	bf00      	nop
    }
}
 801a6ee:	bf00      	nop
 801a6f0:	3710      	adds	r7, #16
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	bd80      	pop	{r7, pc}

0801a6f6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a6f6:	b580      	push	{r7, lr}
 801a6f8:	b082      	sub	sp, #8
 801a6fa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a6fc:	2300      	movs	r3, #0
 801a6fe:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a700:	2300      	movs	r3, #0
 801a702:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a704:	2300      	movs	r3, #0
 801a706:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a708:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a70c:	f000 fe14 	bl	801b338 <SUBGRF_ReadRegister>
 801a710:	4603      	mov	r3, r0
 801a712:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a714:	79fb      	ldrb	r3, [r7, #7]
 801a716:	f023 0301 	bic.w	r3, r3, #1
 801a71a:	b2db      	uxtb	r3, r3
 801a71c:	4619      	mov	r1, r3
 801a71e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a722:	f000 fde7 	bl	801b2f4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a726:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a72a:	f000 fe05 	bl	801b338 <SUBGRF_ReadRegister>
 801a72e:	4603      	mov	r3, r0
 801a730:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a732:	79bb      	ldrb	r3, [r7, #6]
 801a734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a738:	b2db      	uxtb	r3, r3
 801a73a:	4619      	mov	r1, r3
 801a73c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a740:	f000 fdd8 	bl	801b2f4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a744:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801a748:	f000 f88c 	bl	801a864 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a74c:	463b      	mov	r3, r7
 801a74e:	2204      	movs	r2, #4
 801a750:	4619      	mov	r1, r3
 801a752:	f640 0019 	movw	r0, #2073	@ 0x819
 801a756:	f000 fe31 	bl	801b3bc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a75a:	2000      	movs	r0, #0
 801a75c:	f000 f846 	bl	801a7ec <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a760:	79fb      	ldrb	r3, [r7, #7]
 801a762:	4619      	mov	r1, r3
 801a764:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a768:	f000 fdc4 	bl	801b2f4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a76c:	79bb      	ldrb	r3, [r7, #6]
 801a76e:	4619      	mov	r1, r3
 801a770:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a774:	f000 fdbe 	bl	801b2f4 <SUBGRF_WriteRegister>

    return number;
 801a778:	683b      	ldr	r3, [r7, #0]
}
 801a77a:	4618      	mov	r0, r3
 801a77c:	3708      	adds	r7, #8
 801a77e:	46bd      	mov	sp, r7
 801a780:	bd80      	pop	{r7, pc}
	...

0801a784 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a784:	b580      	push	{r7, lr}
 801a786:	b084      	sub	sp, #16
 801a788:	af00      	add	r7, sp, #0
 801a78a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a78c:	2000      	movs	r0, #0
 801a78e:	f7f1 f952 	bl	800ba36 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a792:	2002      	movs	r0, #2
 801a794:	f000 ffc0 	bl	801b718 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a798:	793b      	ldrb	r3, [r7, #4]
 801a79a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a79e:	b2db      	uxtb	r3, r3
 801a7a0:	b25b      	sxtb	r3, r3
 801a7a2:	009b      	lsls	r3, r3, #2
 801a7a4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a7a6:	793b      	ldrb	r3, [r7, #4]
 801a7a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a7ac:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a7ae:	b25b      	sxtb	r3, r3
 801a7b0:	005b      	lsls	r3, r3, #1
 801a7b2:	b25b      	sxtb	r3, r3
 801a7b4:	4313      	orrs	r3, r2
 801a7b6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a7b8:	793b      	ldrb	r3, [r7, #4]
 801a7ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a7be:	b2db      	uxtb	r3, r3
 801a7c0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a7c2:	4313      	orrs	r3, r2
 801a7c4:	b25b      	sxtb	r3, r3
 801a7c6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a7c8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a7ca:	f107 030f 	add.w	r3, r7, #15
 801a7ce:	2201      	movs	r2, #1
 801a7d0:	4619      	mov	r1, r3
 801a7d2:	2084      	movs	r0, #132	@ 0x84
 801a7d4:	f000 fe58 	bl	801b488 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a7d8:	4b03      	ldr	r3, [pc, #12]	@ (801a7e8 <SUBGRF_SetSleep+0x64>)
 801a7da:	2200      	movs	r2, #0
 801a7dc:	701a      	strb	r2, [r3, #0]
}
 801a7de:	bf00      	nop
 801a7e0:	3710      	adds	r7, #16
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}
 801a7e6:	bf00      	nop
 801a7e8:	20001cf4 	.word	0x20001cf4

0801a7ec <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b082      	sub	sp, #8
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a7f6:	1dfb      	adds	r3, r7, #7
 801a7f8:	2201      	movs	r2, #1
 801a7fa:	4619      	mov	r1, r3
 801a7fc:	2080      	movs	r0, #128	@ 0x80
 801a7fe:	f000 fe43 	bl	801b488 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a802:	79fb      	ldrb	r3, [r7, #7]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d103      	bne.n	801a810 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a808:	4b05      	ldr	r3, [pc, #20]	@ (801a820 <SUBGRF_SetStandby+0x34>)
 801a80a:	2201      	movs	r2, #1
 801a80c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a80e:	e002      	b.n	801a816 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a810:	4b03      	ldr	r3, [pc, #12]	@ (801a820 <SUBGRF_SetStandby+0x34>)
 801a812:	2202      	movs	r2, #2
 801a814:	701a      	strb	r2, [r3, #0]
}
 801a816:	bf00      	nop
 801a818:	3708      	adds	r7, #8
 801a81a:	46bd      	mov	sp, r7
 801a81c:	bd80      	pop	{r7, pc}
 801a81e:	bf00      	nop
 801a820:	20001cf4 	.word	0x20001cf4

0801a824 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a824:	b580      	push	{r7, lr}
 801a826:	b084      	sub	sp, #16
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a82c:	4b0c      	ldr	r3, [pc, #48]	@ (801a860 <SUBGRF_SetTx+0x3c>)
 801a82e:	2204      	movs	r2, #4
 801a830:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	0c1b      	lsrs	r3, r3, #16
 801a836:	b2db      	uxtb	r3, r3
 801a838:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	0a1b      	lsrs	r3, r3, #8
 801a83e:	b2db      	uxtb	r3, r3
 801a840:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	b2db      	uxtb	r3, r3
 801a846:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a848:	f107 030c 	add.w	r3, r7, #12
 801a84c:	2203      	movs	r2, #3
 801a84e:	4619      	mov	r1, r3
 801a850:	2083      	movs	r0, #131	@ 0x83
 801a852:	f000 fe19 	bl	801b488 <SUBGRF_WriteCommand>
}
 801a856:	bf00      	nop
 801a858:	3710      	adds	r7, #16
 801a85a:	46bd      	mov	sp, r7
 801a85c:	bd80      	pop	{r7, pc}
 801a85e:	bf00      	nop
 801a860:	20001cf4 	.word	0x20001cf4

0801a864 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b084      	sub	sp, #16
 801a868:	af00      	add	r7, sp, #0
 801a86a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a86c:	4b0c      	ldr	r3, [pc, #48]	@ (801a8a0 <SUBGRF_SetRx+0x3c>)
 801a86e:	2205      	movs	r2, #5
 801a870:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	0c1b      	lsrs	r3, r3, #16
 801a876:	b2db      	uxtb	r3, r3
 801a878:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	0a1b      	lsrs	r3, r3, #8
 801a87e:	b2db      	uxtb	r3, r3
 801a880:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	b2db      	uxtb	r3, r3
 801a886:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a888:	f107 030c 	add.w	r3, r7, #12
 801a88c:	2203      	movs	r2, #3
 801a88e:	4619      	mov	r1, r3
 801a890:	2082      	movs	r0, #130	@ 0x82
 801a892:	f000 fdf9 	bl	801b488 <SUBGRF_WriteCommand>
}
 801a896:	bf00      	nop
 801a898:	3710      	adds	r7, #16
 801a89a:	46bd      	mov	sp, r7
 801a89c:	bd80      	pop	{r7, pc}
 801a89e:	bf00      	nop
 801a8a0:	20001cf4 	.word	0x20001cf4

0801a8a4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b084      	sub	sp, #16
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a8ac:	4b0e      	ldr	r3, [pc, #56]	@ (801a8e8 <SUBGRF_SetRxBoosted+0x44>)
 801a8ae:	2205      	movs	r2, #5
 801a8b0:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a8b2:	2197      	movs	r1, #151	@ 0x97
 801a8b4:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801a8b8:	f000 fd1c 	bl	801b2f4 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	0c1b      	lsrs	r3, r3, #16
 801a8c0:	b2db      	uxtb	r3, r3
 801a8c2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	0a1b      	lsrs	r3, r3, #8
 801a8c8:	b2db      	uxtb	r3, r3
 801a8ca:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	b2db      	uxtb	r3, r3
 801a8d0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a8d2:	f107 030c 	add.w	r3, r7, #12
 801a8d6:	2203      	movs	r2, #3
 801a8d8:	4619      	mov	r1, r3
 801a8da:	2082      	movs	r0, #130	@ 0x82
 801a8dc:	f000 fdd4 	bl	801b488 <SUBGRF_WriteCommand>
}
 801a8e0:	bf00      	nop
 801a8e2:	3710      	adds	r7, #16
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	bd80      	pop	{r7, pc}
 801a8e8:	20001cf4 	.word	0x20001cf4

0801a8ec <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b084      	sub	sp, #16
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	6078      	str	r0, [r7, #4]
 801a8f4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	0c1b      	lsrs	r3, r3, #16
 801a8fa:	b2db      	uxtb	r3, r3
 801a8fc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	0a1b      	lsrs	r3, r3, #8
 801a902:	b2db      	uxtb	r3, r3
 801a904:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	b2db      	uxtb	r3, r3
 801a90a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801a90c:	683b      	ldr	r3, [r7, #0]
 801a90e:	0c1b      	lsrs	r3, r3, #16
 801a910:	b2db      	uxtb	r3, r3
 801a912:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801a914:	683b      	ldr	r3, [r7, #0]
 801a916:	0a1b      	lsrs	r3, r3, #8
 801a918:	b2db      	uxtb	r3, r3
 801a91a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801a91c:	683b      	ldr	r3, [r7, #0]
 801a91e:	b2db      	uxtb	r3, r3
 801a920:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801a922:	f107 0308 	add.w	r3, r7, #8
 801a926:	2206      	movs	r2, #6
 801a928:	4619      	mov	r1, r3
 801a92a:	2094      	movs	r0, #148	@ 0x94
 801a92c:	f000 fdac 	bl	801b488 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801a930:	4b03      	ldr	r3, [pc, #12]	@ (801a940 <SUBGRF_SetRxDutyCycle+0x54>)
 801a932:	2206      	movs	r2, #6
 801a934:	701a      	strb	r2, [r3, #0]
}
 801a936:	bf00      	nop
 801a938:	3710      	adds	r7, #16
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bd80      	pop	{r7, pc}
 801a93e:	bf00      	nop
 801a940:	20001cf4 	.word	0x20001cf4

0801a944 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801a944:	b580      	push	{r7, lr}
 801a946:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801a948:	2200      	movs	r2, #0
 801a94a:	2100      	movs	r1, #0
 801a94c:	20c5      	movs	r0, #197	@ 0xc5
 801a94e:	f000 fd9b 	bl	801b488 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801a952:	4b02      	ldr	r3, [pc, #8]	@ (801a95c <SUBGRF_SetCad+0x18>)
 801a954:	2207      	movs	r2, #7
 801a956:	701a      	strb	r2, [r3, #0]
}
 801a958:	bf00      	nop
 801a95a:	bd80      	pop	{r7, pc}
 801a95c:	20001cf4 	.word	0x20001cf4

0801a960 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801a960:	b580      	push	{r7, lr}
 801a962:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801a964:	2200      	movs	r2, #0
 801a966:	2100      	movs	r1, #0
 801a968:	20d1      	movs	r0, #209	@ 0xd1
 801a96a:	f000 fd8d 	bl	801b488 <SUBGRF_WriteCommand>
}
 801a96e:	bf00      	nop
 801a970:	bd80      	pop	{r7, pc}

0801a972 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801a972:	b580      	push	{r7, lr}
 801a974:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801a976:	2200      	movs	r2, #0
 801a978:	2100      	movs	r1, #0
 801a97a:	20d2      	movs	r0, #210	@ 0xd2
 801a97c:	f000 fd84 	bl	801b488 <SUBGRF_WriteCommand>
}
 801a980:	bf00      	nop
 801a982:	bd80      	pop	{r7, pc}

0801a984 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b082      	sub	sp, #8
 801a988:	af00      	add	r7, sp, #0
 801a98a:	4603      	mov	r3, r0
 801a98c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801a98e:	1dfb      	adds	r3, r7, #7
 801a990:	2201      	movs	r2, #1
 801a992:	4619      	mov	r1, r3
 801a994:	209f      	movs	r0, #159	@ 0x9f
 801a996:	f000 fd77 	bl	801b488 <SUBGRF_WriteCommand>
}
 801a99a:	bf00      	nop
 801a99c:	3708      	adds	r7, #8
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	bd80      	pop	{r7, pc}

0801a9a2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801a9a2:	b580      	push	{r7, lr}
 801a9a4:	b084      	sub	sp, #16
 801a9a6:	af00      	add	r7, sp, #0
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801a9ac:	1dfb      	adds	r3, r7, #7
 801a9ae:	2201      	movs	r2, #1
 801a9b0:	4619      	mov	r1, r3
 801a9b2:	20a0      	movs	r0, #160	@ 0xa0
 801a9b4:	f000 fd68 	bl	801b488 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801a9b8:	79fb      	ldrb	r3, [r7, #7]
 801a9ba:	2b3f      	cmp	r3, #63	@ 0x3f
 801a9bc:	d91c      	bls.n	801a9f8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801a9be:	79fb      	ldrb	r3, [r7, #7]
 801a9c0:	085b      	lsrs	r3, r3, #1
 801a9c2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801a9cc:	e005      	b.n	801a9da <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801a9ce:	7bfb      	ldrb	r3, [r7, #15]
 801a9d0:	089b      	lsrs	r3, r3, #2
 801a9d2:	73fb      	strb	r3, [r7, #15]
            exp++;
 801a9d4:	7bbb      	ldrb	r3, [r7, #14]
 801a9d6:	3301      	adds	r3, #1
 801a9d8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a9da:	7bfb      	ldrb	r3, [r7, #15]
 801a9dc:	2b1f      	cmp	r3, #31
 801a9de:	d8f6      	bhi.n	801a9ce <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a9e0:	7bfb      	ldrb	r3, [r7, #15]
 801a9e2:	00db      	lsls	r3, r3, #3
 801a9e4:	b2da      	uxtb	r2, r3
 801a9e6:	7bbb      	ldrb	r3, [r7, #14]
 801a9e8:	4413      	add	r3, r2
 801a9ea:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a9ec:	7b7b      	ldrb	r3, [r7, #13]
 801a9ee:	4619      	mov	r1, r3
 801a9f0:	f240 7006 	movw	r0, #1798	@ 0x706
 801a9f4:	f000 fc7e 	bl	801b2f4 <SUBGRF_WriteRegister>
    }
}
 801a9f8:	bf00      	nop
 801a9fa:	3710      	adds	r7, #16
 801a9fc:	46bd      	mov	sp, r7
 801a9fe:	bd80      	pop	{r7, pc}

0801aa00 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b082      	sub	sp, #8
 801aa04:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801aa06:	f7f1 f832 	bl	800ba6e <RBI_IsDCDC>
 801aa0a:	4603      	mov	r3, r0
 801aa0c:	2b01      	cmp	r3, #1
 801aa0e:	d102      	bne.n	801aa16 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801aa10:	2301      	movs	r3, #1
 801aa12:	71fb      	strb	r3, [r7, #7]
 801aa14:	e001      	b.n	801aa1a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801aa16:	2300      	movs	r3, #0
 801aa18:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801aa1a:	1dfb      	adds	r3, r7, #7
 801aa1c:	2201      	movs	r2, #1
 801aa1e:	4619      	mov	r1, r3
 801aa20:	2096      	movs	r0, #150	@ 0x96
 801aa22:	f000 fd31 	bl	801b488 <SUBGRF_WriteCommand>
}
 801aa26:	bf00      	nop
 801aa28:	3708      	adds	r7, #8
 801aa2a:	46bd      	mov	sp, r7
 801aa2c:	bd80      	pop	{r7, pc}

0801aa2e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801aa2e:	b580      	push	{r7, lr}
 801aa30:	b084      	sub	sp, #16
 801aa32:	af00      	add	r7, sp, #0
 801aa34:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801aa36:	793b      	ldrb	r3, [r7, #4]
 801aa38:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801aa3c:	b2db      	uxtb	r3, r3
 801aa3e:	b25b      	sxtb	r3, r3
 801aa40:	019b      	lsls	r3, r3, #6
 801aa42:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801aa44:	793b      	ldrb	r3, [r7, #4]
 801aa46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801aa4a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801aa4c:	b25b      	sxtb	r3, r3
 801aa4e:	015b      	lsls	r3, r3, #5
 801aa50:	b25b      	sxtb	r3, r3
 801aa52:	4313      	orrs	r3, r2
 801aa54:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801aa56:	793b      	ldrb	r3, [r7, #4]
 801aa58:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801aa5c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801aa5e:	b25b      	sxtb	r3, r3
 801aa60:	011b      	lsls	r3, r3, #4
 801aa62:	b25b      	sxtb	r3, r3
 801aa64:	4313      	orrs	r3, r2
 801aa66:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801aa68:	793b      	ldrb	r3, [r7, #4]
 801aa6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801aa6e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801aa70:	b25b      	sxtb	r3, r3
 801aa72:	00db      	lsls	r3, r3, #3
 801aa74:	b25b      	sxtb	r3, r3
 801aa76:	4313      	orrs	r3, r2
 801aa78:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801aa7a:	793b      	ldrb	r3, [r7, #4]
 801aa7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801aa80:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801aa82:	b25b      	sxtb	r3, r3
 801aa84:	009b      	lsls	r3, r3, #2
 801aa86:	b25b      	sxtb	r3, r3
 801aa88:	4313      	orrs	r3, r2
 801aa8a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801aa8c:	793b      	ldrb	r3, [r7, #4]
 801aa8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801aa92:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801aa94:	b25b      	sxtb	r3, r3
 801aa96:	005b      	lsls	r3, r3, #1
 801aa98:	b25b      	sxtb	r3, r3
 801aa9a:	4313      	orrs	r3, r2
 801aa9c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801aa9e:	793b      	ldrb	r3, [r7, #4]
 801aaa0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801aaa4:	b2db      	uxtb	r3, r3
 801aaa6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801aaa8:	4313      	orrs	r3, r2
 801aaaa:	b25b      	sxtb	r3, r3
 801aaac:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801aaae:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801aab0:	f107 030f 	add.w	r3, r7, #15
 801aab4:	2201      	movs	r2, #1
 801aab6:	4619      	mov	r1, r3
 801aab8:	2089      	movs	r0, #137	@ 0x89
 801aaba:	f000 fce5 	bl	801b488 <SUBGRF_WriteCommand>
}
 801aabe:	bf00      	nop
 801aac0:	3710      	adds	r7, #16
 801aac2:	46bd      	mov	sp, r7
 801aac4:	bd80      	pop	{r7, pc}
	...

0801aac8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	b084      	sub	sp, #16
 801aacc:	af00      	add	r7, sp, #0
 801aace:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	4a1d      	ldr	r2, [pc, #116]	@ (801ab48 <SUBGRF_CalibrateImage+0x80>)
 801aad4:	4293      	cmp	r3, r2
 801aad6:	d904      	bls.n	801aae2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801aad8:	23e1      	movs	r3, #225	@ 0xe1
 801aada:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801aadc:	23e9      	movs	r3, #233	@ 0xe9
 801aade:	737b      	strb	r3, [r7, #13]
 801aae0:	e027      	b.n	801ab32 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	4a19      	ldr	r2, [pc, #100]	@ (801ab4c <SUBGRF_CalibrateImage+0x84>)
 801aae6:	4293      	cmp	r3, r2
 801aae8:	d904      	bls.n	801aaf4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801aaea:	23d7      	movs	r3, #215	@ 0xd7
 801aaec:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801aaee:	23db      	movs	r3, #219	@ 0xdb
 801aaf0:	737b      	strb	r3, [r7, #13]
 801aaf2:	e01e      	b.n	801ab32 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	4a16      	ldr	r2, [pc, #88]	@ (801ab50 <SUBGRF_CalibrateImage+0x88>)
 801aaf8:	4293      	cmp	r3, r2
 801aafa:	d904      	bls.n	801ab06 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801aafc:	23c1      	movs	r3, #193	@ 0xc1
 801aafe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801ab00:	23c5      	movs	r3, #197	@ 0xc5
 801ab02:	737b      	strb	r3, [r7, #13]
 801ab04:	e015      	b.n	801ab32 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	4a12      	ldr	r2, [pc, #72]	@ (801ab54 <SUBGRF_CalibrateImage+0x8c>)
 801ab0a:	4293      	cmp	r3, r2
 801ab0c:	d904      	bls.n	801ab18 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801ab0e:	2375      	movs	r3, #117	@ 0x75
 801ab10:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801ab12:	2381      	movs	r3, #129	@ 0x81
 801ab14:	737b      	strb	r3, [r7, #13]
 801ab16:	e00c      	b.n	801ab32 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	4a0f      	ldr	r2, [pc, #60]	@ (801ab58 <SUBGRF_CalibrateImage+0x90>)
 801ab1c:	4293      	cmp	r3, r2
 801ab1e:	d904      	bls.n	801ab2a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801ab20:	236b      	movs	r3, #107	@ 0x6b
 801ab22:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801ab24:	236f      	movs	r3, #111	@ 0x6f
 801ab26:	737b      	strb	r3, [r7, #13]
 801ab28:	e003      	b.n	801ab32 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801ab2a:	2329      	movs	r3, #41	@ 0x29
 801ab2c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801ab2e:	232b      	movs	r3, #43	@ 0x2b
 801ab30:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801ab32:	f107 030c 	add.w	r3, r7, #12
 801ab36:	2202      	movs	r2, #2
 801ab38:	4619      	mov	r1, r3
 801ab3a:	2098      	movs	r0, #152	@ 0x98
 801ab3c:	f000 fca4 	bl	801b488 <SUBGRF_WriteCommand>
}
 801ab40:	bf00      	nop
 801ab42:	3710      	adds	r7, #16
 801ab44:	46bd      	mov	sp, r7
 801ab46:	bd80      	pop	{r7, pc}
 801ab48:	35a4e900 	.word	0x35a4e900
 801ab4c:	32a9f880 	.word	0x32a9f880
 801ab50:	2de54480 	.word	0x2de54480
 801ab54:	1b6b0b00 	.word	0x1b6b0b00
 801ab58:	1954fc40 	.word	0x1954fc40

0801ab5c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801ab5c:	b590      	push	{r4, r7, lr}
 801ab5e:	b085      	sub	sp, #20
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	4604      	mov	r4, r0
 801ab64:	4608      	mov	r0, r1
 801ab66:	4611      	mov	r1, r2
 801ab68:	461a      	mov	r2, r3
 801ab6a:	4623      	mov	r3, r4
 801ab6c:	71fb      	strb	r3, [r7, #7]
 801ab6e:	4603      	mov	r3, r0
 801ab70:	71bb      	strb	r3, [r7, #6]
 801ab72:	460b      	mov	r3, r1
 801ab74:	717b      	strb	r3, [r7, #5]
 801ab76:	4613      	mov	r3, r2
 801ab78:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801ab7a:	79fb      	ldrb	r3, [r7, #7]
 801ab7c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801ab7e:	79bb      	ldrb	r3, [r7, #6]
 801ab80:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801ab82:	797b      	ldrb	r3, [r7, #5]
 801ab84:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801ab86:	793b      	ldrb	r3, [r7, #4]
 801ab88:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801ab8a:	f107 030c 	add.w	r3, r7, #12
 801ab8e:	2204      	movs	r2, #4
 801ab90:	4619      	mov	r1, r3
 801ab92:	2095      	movs	r0, #149	@ 0x95
 801ab94:	f000 fc78 	bl	801b488 <SUBGRF_WriteCommand>
}
 801ab98:	bf00      	nop
 801ab9a:	3714      	adds	r7, #20
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bd90      	pop	{r4, r7, pc}

0801aba0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801aba0:	b590      	push	{r4, r7, lr}
 801aba2:	b085      	sub	sp, #20
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	4604      	mov	r4, r0
 801aba8:	4608      	mov	r0, r1
 801abaa:	4611      	mov	r1, r2
 801abac:	461a      	mov	r2, r3
 801abae:	4623      	mov	r3, r4
 801abb0:	80fb      	strh	r3, [r7, #6]
 801abb2:	4603      	mov	r3, r0
 801abb4:	80bb      	strh	r3, [r7, #4]
 801abb6:	460b      	mov	r3, r1
 801abb8:	807b      	strh	r3, [r7, #2]
 801abba:	4613      	mov	r3, r2
 801abbc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801abbe:	88fb      	ldrh	r3, [r7, #6]
 801abc0:	0a1b      	lsrs	r3, r3, #8
 801abc2:	b29b      	uxth	r3, r3
 801abc4:	b2db      	uxtb	r3, r3
 801abc6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801abc8:	88fb      	ldrh	r3, [r7, #6]
 801abca:	b2db      	uxtb	r3, r3
 801abcc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801abce:	88bb      	ldrh	r3, [r7, #4]
 801abd0:	0a1b      	lsrs	r3, r3, #8
 801abd2:	b29b      	uxth	r3, r3
 801abd4:	b2db      	uxtb	r3, r3
 801abd6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801abd8:	88bb      	ldrh	r3, [r7, #4]
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801abde:	887b      	ldrh	r3, [r7, #2]
 801abe0:	0a1b      	lsrs	r3, r3, #8
 801abe2:	b29b      	uxth	r3, r3
 801abe4:	b2db      	uxtb	r3, r3
 801abe6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801abe8:	887b      	ldrh	r3, [r7, #2]
 801abea:	b2db      	uxtb	r3, r3
 801abec:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801abee:	883b      	ldrh	r3, [r7, #0]
 801abf0:	0a1b      	lsrs	r3, r3, #8
 801abf2:	b29b      	uxth	r3, r3
 801abf4:	b2db      	uxtb	r3, r3
 801abf6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801abf8:	883b      	ldrh	r3, [r7, #0]
 801abfa:	b2db      	uxtb	r3, r3
 801abfc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801abfe:	f107 0308 	add.w	r3, r7, #8
 801ac02:	2208      	movs	r2, #8
 801ac04:	4619      	mov	r1, r3
 801ac06:	2008      	movs	r0, #8
 801ac08:	f000 fc3e 	bl	801b488 <SUBGRF_WriteCommand>
}
 801ac0c:	bf00      	nop
 801ac0e:	3714      	adds	r7, #20
 801ac10:	46bd      	mov	sp, r7
 801ac12:	bd90      	pop	{r4, r7, pc}

0801ac14 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b084      	sub	sp, #16
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	6039      	str	r1, [r7, #0]
 801ac1e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801ac20:	79fb      	ldrb	r3, [r7, #7]
 801ac22:	f003 0307 	and.w	r3, r3, #7
 801ac26:	b2db      	uxtb	r3, r3
 801ac28:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ac2a:	683b      	ldr	r3, [r7, #0]
 801ac2c:	0c1b      	lsrs	r3, r3, #16
 801ac2e:	b2db      	uxtb	r3, r3
 801ac30:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ac32:	683b      	ldr	r3, [r7, #0]
 801ac34:	0a1b      	lsrs	r3, r3, #8
 801ac36:	b2db      	uxtb	r3, r3
 801ac38:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801ac3a:	683b      	ldr	r3, [r7, #0]
 801ac3c:	b2db      	uxtb	r3, r3
 801ac3e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801ac40:	f107 030c 	add.w	r3, r7, #12
 801ac44:	2204      	movs	r2, #4
 801ac46:	4619      	mov	r1, r3
 801ac48:	2097      	movs	r0, #151	@ 0x97
 801ac4a:	f000 fc1d 	bl	801b488 <SUBGRF_WriteCommand>
}
 801ac4e:	bf00      	nop
 801ac50:	3710      	adds	r7, #16
 801ac52:	46bd      	mov	sp, r7
 801ac54:	bd80      	pop	{r7, pc}
	...

0801ac58 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801ac58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ac5c:	b084      	sub	sp, #16
 801ac5e:	af00      	add	r7, sp, #0
 801ac60:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801ac62:	2300      	movs	r3, #0
 801ac64:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801ac66:	4b1d      	ldr	r3, [pc, #116]	@ (801acdc <SUBGRF_SetRfFrequency+0x84>)
 801ac68:	781b      	ldrb	r3, [r3, #0]
 801ac6a:	f083 0301 	eor.w	r3, r3, #1
 801ac6e:	b2db      	uxtb	r3, r3
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d005      	beq.n	801ac80 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801ac74:	6878      	ldr	r0, [r7, #4]
 801ac76:	f7ff ff27 	bl	801aac8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801ac7a:	4b18      	ldr	r3, [pc, #96]	@ (801acdc <SUBGRF_SetRfFrequency+0x84>)
 801ac7c:	2201      	movs	r2, #1
 801ac7e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	2200      	movs	r2, #0
 801ac84:	461c      	mov	r4, r3
 801ac86:	4615      	mov	r5, r2
 801ac88:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ac8c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ac90:	4a13      	ldr	r2, [pc, #76]	@ (801ace0 <SUBGRF_SetRfFrequency+0x88>)
 801ac92:	f04f 0300 	mov.w	r3, #0
 801ac96:	4640      	mov	r0, r8
 801ac98:	4649      	mov	r1, r9
 801ac9a:	f7e5 ff85 	bl	8000ba8 <__aeabi_uldivmod>
 801ac9e:	4602      	mov	r2, r0
 801aca0:	460b      	mov	r3, r1
 801aca2:	4613      	mov	r3, r2
 801aca4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	0e1b      	lsrs	r3, r3, #24
 801acaa:	b2db      	uxtb	r3, r3
 801acac:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	0c1b      	lsrs	r3, r3, #16
 801acb2:	b2db      	uxtb	r3, r3
 801acb4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801acb6:	68fb      	ldr	r3, [r7, #12]
 801acb8:	0a1b      	lsrs	r3, r3, #8
 801acba:	b2db      	uxtb	r3, r3
 801acbc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	b2db      	uxtb	r3, r3
 801acc2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801acc4:	f107 0308 	add.w	r3, r7, #8
 801acc8:	2204      	movs	r2, #4
 801acca:	4619      	mov	r1, r3
 801accc:	2086      	movs	r0, #134	@ 0x86
 801acce:	f000 fbdb 	bl	801b488 <SUBGRF_WriteCommand>
}
 801acd2:	bf00      	nop
 801acd4:	3710      	adds	r7, #16
 801acd6:	46bd      	mov	sp, r7
 801acd8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801acdc:	20001cfc 	.word	0x20001cfc
 801ace0:	01e84800 	.word	0x01e84800

0801ace4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801ace4:	b580      	push	{r7, lr}
 801ace6:	b082      	sub	sp, #8
 801ace8:	af00      	add	r7, sp, #0
 801acea:	4603      	mov	r3, r0
 801acec:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801acee:	79fa      	ldrb	r2, [r7, #7]
 801acf0:	4b09      	ldr	r3, [pc, #36]	@ (801ad18 <SUBGRF_SetPacketType+0x34>)
 801acf2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801acf4:	79fb      	ldrb	r3, [r7, #7]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d104      	bne.n	801ad04 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801acfa:	2100      	movs	r1, #0
 801acfc:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801ad00:	f000 faf8 	bl	801b2f4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801ad04:	1dfb      	adds	r3, r7, #7
 801ad06:	2201      	movs	r2, #1
 801ad08:	4619      	mov	r1, r3
 801ad0a:	208a      	movs	r0, #138	@ 0x8a
 801ad0c:	f000 fbbc 	bl	801b488 <SUBGRF_WriteCommand>
}
 801ad10:	bf00      	nop
 801ad12:	3708      	adds	r7, #8
 801ad14:	46bd      	mov	sp, r7
 801ad16:	bd80      	pop	{r7, pc}
 801ad18:	20001cf5 	.word	0x20001cf5

0801ad1c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801ad1c:	b480      	push	{r7}
 801ad1e:	af00      	add	r7, sp, #0
    return PacketType;
 801ad20:	4b02      	ldr	r3, [pc, #8]	@ (801ad2c <SUBGRF_GetPacketType+0x10>)
 801ad22:	781b      	ldrb	r3, [r3, #0]
}
 801ad24:	4618      	mov	r0, r3
 801ad26:	46bd      	mov	sp, r7
 801ad28:	bc80      	pop	{r7}
 801ad2a:	4770      	bx	lr
 801ad2c:	20001cf5 	.word	0x20001cf5

0801ad30 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801ad30:	b580      	push	{r7, lr}
 801ad32:	b084      	sub	sp, #16
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	4603      	mov	r3, r0
 801ad38:	71fb      	strb	r3, [r7, #7]
 801ad3a:	460b      	mov	r3, r1
 801ad3c:	71bb      	strb	r3, [r7, #6]
 801ad3e:	4613      	mov	r3, r2
 801ad40:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801ad42:	79fb      	ldrb	r3, [r7, #7]
 801ad44:	2b01      	cmp	r3, #1
 801ad46:	d149      	bne.n	801addc <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801ad48:	2000      	movs	r0, #0
 801ad4a:	f7f0 fe97 	bl	800ba7c <RBI_GetRFOMaxPowerConfig>
 801ad4e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801ad50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ad54:	68fa      	ldr	r2, [r7, #12]
 801ad56:	429a      	cmp	r2, r3
 801ad58:	da01      	bge.n	801ad5e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801ad5e:	68fb      	ldr	r3, [r7, #12]
 801ad60:	2b0e      	cmp	r3, #14
 801ad62:	d10e      	bne.n	801ad82 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ad64:	2301      	movs	r3, #1
 801ad66:	2201      	movs	r2, #1
 801ad68:	2100      	movs	r1, #0
 801ad6a:	2004      	movs	r0, #4
 801ad6c:	f7ff fef6 	bl	801ab5c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ad70:	79ba      	ldrb	r2, [r7, #6]
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	b2db      	uxtb	r3, r3
 801ad76:	1ad3      	subs	r3, r2, r3
 801ad78:	b2db      	uxtb	r3, r3
 801ad7a:	330e      	adds	r3, #14
 801ad7c:	b2db      	uxtb	r3, r3
 801ad7e:	71bb      	strb	r3, [r7, #6]
 801ad80:	e01f      	b.n	801adc2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	2b0a      	cmp	r3, #10
 801ad86:	d10e      	bne.n	801ada6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801ad88:	2301      	movs	r3, #1
 801ad8a:	2201      	movs	r2, #1
 801ad8c:	2100      	movs	r1, #0
 801ad8e:	2001      	movs	r0, #1
 801ad90:	f7ff fee4 	bl	801ab5c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801ad94:	79ba      	ldrb	r2, [r7, #6]
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	b2db      	uxtb	r3, r3
 801ad9a:	1ad3      	subs	r3, r2, r3
 801ad9c:	b2db      	uxtb	r3, r3
 801ad9e:	330d      	adds	r3, #13
 801ada0:	b2db      	uxtb	r3, r3
 801ada2:	71bb      	strb	r3, [r7, #6]
 801ada4:	e00d      	b.n	801adc2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801ada6:	2301      	movs	r3, #1
 801ada8:	2201      	movs	r2, #1
 801adaa:	2100      	movs	r1, #0
 801adac:	2007      	movs	r0, #7
 801adae:	f7ff fed5 	bl	801ab5c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801adb2:	79ba      	ldrb	r2, [r7, #6]
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	b2db      	uxtb	r3, r3
 801adb8:	1ad3      	subs	r3, r2, r3
 801adba:	b2db      	uxtb	r3, r3
 801adbc:	330e      	adds	r3, #14
 801adbe:	b2db      	uxtb	r3, r3
 801adc0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801adc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801adc6:	f113 0f11 	cmn.w	r3, #17
 801adca:	da01      	bge.n	801add0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801adcc:	23ef      	movs	r3, #239	@ 0xef
 801adce:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801add0:	2118      	movs	r1, #24
 801add2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801add6:	f000 fa8d 	bl	801b2f4 <SUBGRF_WriteRegister>
 801adda:	e067      	b.n	801aeac <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801addc:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801ade0:	f000 faaa 	bl	801b338 <SUBGRF_ReadRegister>
 801ade4:	4603      	mov	r3, r0
 801ade6:	f043 031e 	orr.w	r3, r3, #30
 801adea:	b2db      	uxtb	r3, r3
 801adec:	4619      	mov	r1, r3
 801adee:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801adf2:	f000 fa7f 	bl	801b2f4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801adf6:	2001      	movs	r0, #1
 801adf8:	f7f0 fe40 	bl	800ba7c <RBI_GetRFOMaxPowerConfig>
 801adfc:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801adfe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ae02:	68fa      	ldr	r2, [r7, #12]
 801ae04:	429a      	cmp	r2, r3
 801ae06:	da01      	bge.n	801ae0c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	2b14      	cmp	r3, #20
 801ae10:	d10e      	bne.n	801ae30 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801ae12:	2301      	movs	r3, #1
 801ae14:	2200      	movs	r2, #0
 801ae16:	2105      	movs	r1, #5
 801ae18:	2003      	movs	r0, #3
 801ae1a:	f7ff fe9f 	bl	801ab5c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ae1e:	79ba      	ldrb	r2, [r7, #6]
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	b2db      	uxtb	r3, r3
 801ae24:	1ad3      	subs	r3, r2, r3
 801ae26:	b2db      	uxtb	r3, r3
 801ae28:	3316      	adds	r3, #22
 801ae2a:	b2db      	uxtb	r3, r3
 801ae2c:	71bb      	strb	r3, [r7, #6]
 801ae2e:	e031      	b.n	801ae94 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	2b11      	cmp	r3, #17
 801ae34:	d10e      	bne.n	801ae54 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801ae36:	2301      	movs	r3, #1
 801ae38:	2200      	movs	r2, #0
 801ae3a:	2103      	movs	r1, #3
 801ae3c:	2002      	movs	r0, #2
 801ae3e:	f7ff fe8d 	bl	801ab5c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ae42:	79ba      	ldrb	r2, [r7, #6]
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	b2db      	uxtb	r3, r3
 801ae48:	1ad3      	subs	r3, r2, r3
 801ae4a:	b2db      	uxtb	r3, r3
 801ae4c:	3316      	adds	r3, #22
 801ae4e:	b2db      	uxtb	r3, r3
 801ae50:	71bb      	strb	r3, [r7, #6]
 801ae52:	e01f      	b.n	801ae94 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	2b0e      	cmp	r3, #14
 801ae58:	d10e      	bne.n	801ae78 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801ae5a:	2301      	movs	r3, #1
 801ae5c:	2200      	movs	r2, #0
 801ae5e:	2102      	movs	r1, #2
 801ae60:	2002      	movs	r0, #2
 801ae62:	f7ff fe7b 	bl	801ab5c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ae66:	79ba      	ldrb	r2, [r7, #6]
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	b2db      	uxtb	r3, r3
 801ae6c:	1ad3      	subs	r3, r2, r3
 801ae6e:	b2db      	uxtb	r3, r3
 801ae70:	330e      	adds	r3, #14
 801ae72:	b2db      	uxtb	r3, r3
 801ae74:	71bb      	strb	r3, [r7, #6]
 801ae76:	e00d      	b.n	801ae94 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801ae78:	2301      	movs	r3, #1
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	2107      	movs	r1, #7
 801ae7e:	2004      	movs	r0, #4
 801ae80:	f7ff fe6c 	bl	801ab5c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ae84:	79ba      	ldrb	r2, [r7, #6]
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	b2db      	uxtb	r3, r3
 801ae8a:	1ad3      	subs	r3, r2, r3
 801ae8c:	b2db      	uxtb	r3, r3
 801ae8e:	3316      	adds	r3, #22
 801ae90:	b2db      	uxtb	r3, r3
 801ae92:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801ae94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ae98:	f113 0f09 	cmn.w	r3, #9
 801ae9c:	da01      	bge.n	801aea2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801ae9e:	23f7      	movs	r3, #247	@ 0xf7
 801aea0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801aea2:	2138      	movs	r1, #56	@ 0x38
 801aea4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801aea8:	f000 fa24 	bl	801b2f4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801aeac:	79bb      	ldrb	r3, [r7, #6]
 801aeae:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801aeb0:	797b      	ldrb	r3, [r7, #5]
 801aeb2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801aeb4:	f107 0308 	add.w	r3, r7, #8
 801aeb8:	2202      	movs	r2, #2
 801aeba:	4619      	mov	r1, r3
 801aebc:	208e      	movs	r0, #142	@ 0x8e
 801aebe:	f000 fae3 	bl	801b488 <SUBGRF_WriteCommand>
}
 801aec2:	bf00      	nop
 801aec4:	3710      	adds	r7, #16
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}
	...

0801aecc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801aecc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801aed0:	b086      	sub	sp, #24
 801aed2:	af00      	add	r7, sp, #0
 801aed4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801aed6:	2300      	movs	r3, #0
 801aed8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801aeda:	f107 0308 	add.w	r3, r7, #8
 801aede:	2200      	movs	r2, #0
 801aee0:	601a      	str	r2, [r3, #0]
 801aee2:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	781a      	ldrb	r2, [r3, #0]
 801aee8:	4b5c      	ldr	r3, [pc, #368]	@ (801b05c <SUBGRF_SetModulationParams+0x190>)
 801aeea:	781b      	ldrb	r3, [r3, #0]
 801aeec:	429a      	cmp	r2, r3
 801aeee:	d004      	beq.n	801aefa <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	781b      	ldrb	r3, [r3, #0]
 801aef4:	4618      	mov	r0, r3
 801aef6:	f7ff fef5 	bl	801ace4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	781b      	ldrb	r3, [r3, #0]
 801aefe:	2b03      	cmp	r3, #3
 801af00:	f200 80a5 	bhi.w	801b04e <SUBGRF_SetModulationParams+0x182>
 801af04:	a201      	add	r2, pc, #4	@ (adr r2, 801af0c <SUBGRF_SetModulationParams+0x40>)
 801af06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af0a:	bf00      	nop
 801af0c:	0801af1d 	.word	0x0801af1d
 801af10:	0801afdd 	.word	0x0801afdd
 801af14:	0801af9f 	.word	0x0801af9f
 801af18:	0801b00b 	.word	0x0801b00b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801af1c:	2308      	movs	r3, #8
 801af1e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	685b      	ldr	r3, [r3, #4]
 801af24:	4a4e      	ldr	r2, [pc, #312]	@ (801b060 <SUBGRF_SetModulationParams+0x194>)
 801af26:	fbb2 f3f3 	udiv	r3, r2, r3
 801af2a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801af2c:	697b      	ldr	r3, [r7, #20]
 801af2e:	0c1b      	lsrs	r3, r3, #16
 801af30:	b2db      	uxtb	r3, r3
 801af32:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801af34:	697b      	ldr	r3, [r7, #20]
 801af36:	0a1b      	lsrs	r3, r3, #8
 801af38:	b2db      	uxtb	r3, r3
 801af3a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801af3c:	697b      	ldr	r3, [r7, #20]
 801af3e:	b2db      	uxtb	r3, r3
 801af40:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	7b1b      	ldrb	r3, [r3, #12]
 801af46:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	7b5b      	ldrb	r3, [r3, #13]
 801af4c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	689b      	ldr	r3, [r3, #8]
 801af52:	2200      	movs	r2, #0
 801af54:	461c      	mov	r4, r3
 801af56:	4615      	mov	r5, r2
 801af58:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801af5c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801af60:	4a40      	ldr	r2, [pc, #256]	@ (801b064 <SUBGRF_SetModulationParams+0x198>)
 801af62:	f04f 0300 	mov.w	r3, #0
 801af66:	4640      	mov	r0, r8
 801af68:	4649      	mov	r1, r9
 801af6a:	f7e5 fe1d 	bl	8000ba8 <__aeabi_uldivmod>
 801af6e:	4602      	mov	r2, r0
 801af70:	460b      	mov	r3, r1
 801af72:	4613      	mov	r3, r2
 801af74:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801af76:	697b      	ldr	r3, [r7, #20]
 801af78:	0c1b      	lsrs	r3, r3, #16
 801af7a:	b2db      	uxtb	r3, r3
 801af7c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801af7e:	697b      	ldr	r3, [r7, #20]
 801af80:	0a1b      	lsrs	r3, r3, #8
 801af82:	b2db      	uxtb	r3, r3
 801af84:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801af86:	697b      	ldr	r3, [r7, #20]
 801af88:	b2db      	uxtb	r3, r3
 801af8a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801af8c:	7cfb      	ldrb	r3, [r7, #19]
 801af8e:	b29a      	uxth	r2, r3
 801af90:	f107 0308 	add.w	r3, r7, #8
 801af94:	4619      	mov	r1, r3
 801af96:	208b      	movs	r0, #139	@ 0x8b
 801af98:	f000 fa76 	bl	801b488 <SUBGRF_WriteCommand>
        break;
 801af9c:	e058      	b.n	801b050 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 801af9e:	2304      	movs	r3, #4
 801afa0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	691b      	ldr	r3, [r3, #16]
 801afa6:	4a2e      	ldr	r2, [pc, #184]	@ (801b060 <SUBGRF_SetModulationParams+0x194>)
 801afa8:	fbb2 f3f3 	udiv	r3, r2, r3
 801afac:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801afae:	697b      	ldr	r3, [r7, #20]
 801afb0:	0c1b      	lsrs	r3, r3, #16
 801afb2:	b2db      	uxtb	r3, r3
 801afb4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801afb6:	697b      	ldr	r3, [r7, #20]
 801afb8:	0a1b      	lsrs	r3, r3, #8
 801afba:	b2db      	uxtb	r3, r3
 801afbc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801afbe:	697b      	ldr	r3, [r7, #20]
 801afc0:	b2db      	uxtb	r3, r3
 801afc2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	7d1b      	ldrb	r3, [r3, #20]
 801afc8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801afca:	7cfb      	ldrb	r3, [r7, #19]
 801afcc:	b29a      	uxth	r2, r3
 801afce:	f107 0308 	add.w	r3, r7, #8
 801afd2:	4619      	mov	r1, r3
 801afd4:	208b      	movs	r0, #139	@ 0x8b
 801afd6:	f000 fa57 	bl	801b488 <SUBGRF_WriteCommand>
        break;
 801afda:	e039      	b.n	801b050 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 801afdc:	2304      	movs	r3, #4
 801afde:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	7e1b      	ldrb	r3, [r3, #24]
 801afe4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	7e5b      	ldrb	r3, [r3, #25]
 801afea:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	7e9b      	ldrb	r3, [r3, #26]
 801aff0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	7edb      	ldrb	r3, [r3, #27]
 801aff6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801aff8:	7cfb      	ldrb	r3, [r7, #19]
 801affa:	b29a      	uxth	r2, r3
 801affc:	f107 0308 	add.w	r3, r7, #8
 801b000:	4619      	mov	r1, r3
 801b002:	208b      	movs	r0, #139	@ 0x8b
 801b004:	f000 fa40 	bl	801b488 <SUBGRF_WriteCommand>

        break;
 801b008:	e022      	b.n	801b050 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b00a:	2305      	movs	r3, #5
 801b00c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	685b      	ldr	r3, [r3, #4]
 801b012:	4a13      	ldr	r2, [pc, #76]	@ (801b060 <SUBGRF_SetModulationParams+0x194>)
 801b014:	fbb2 f3f3 	udiv	r3, r2, r3
 801b018:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b01a:	697b      	ldr	r3, [r7, #20]
 801b01c:	0c1b      	lsrs	r3, r3, #16
 801b01e:	b2db      	uxtb	r3, r3
 801b020:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	0a1b      	lsrs	r3, r3, #8
 801b026:	b2db      	uxtb	r3, r3
 801b028:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b02a:	697b      	ldr	r3, [r7, #20]
 801b02c:	b2db      	uxtb	r3, r3
 801b02e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	7b1b      	ldrb	r3, [r3, #12]
 801b034:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	7b5b      	ldrb	r3, [r3, #13]
 801b03a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b03c:	7cfb      	ldrb	r3, [r7, #19]
 801b03e:	b29a      	uxth	r2, r3
 801b040:	f107 0308 	add.w	r3, r7, #8
 801b044:	4619      	mov	r1, r3
 801b046:	208b      	movs	r0, #139	@ 0x8b
 801b048:	f000 fa1e 	bl	801b488 <SUBGRF_WriteCommand>
        break;
 801b04c:	e000      	b.n	801b050 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b04e:	bf00      	nop
    }
}
 801b050:	bf00      	nop
 801b052:	3718      	adds	r7, #24
 801b054:	46bd      	mov	sp, r7
 801b056:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b05a:	bf00      	nop
 801b05c:	20001cf5 	.word	0x20001cf5
 801b060:	3d090000 	.word	0x3d090000
 801b064:	01e84800 	.word	0x01e84800

0801b068 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	b086      	sub	sp, #24
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b070:	2300      	movs	r3, #0
 801b072:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b074:	f107 030c 	add.w	r3, r7, #12
 801b078:	2200      	movs	r2, #0
 801b07a:	601a      	str	r2, [r3, #0]
 801b07c:	605a      	str	r2, [r3, #4]
 801b07e:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	781a      	ldrb	r2, [r3, #0]
 801b084:	4b44      	ldr	r3, [pc, #272]	@ (801b198 <SUBGRF_SetPacketParams+0x130>)
 801b086:	781b      	ldrb	r3, [r3, #0]
 801b088:	429a      	cmp	r2, r3
 801b08a:	d004      	beq.n	801b096 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	781b      	ldrb	r3, [r3, #0]
 801b090:	4618      	mov	r0, r3
 801b092:	f7ff fe27 	bl	801ace4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	781b      	ldrb	r3, [r3, #0]
 801b09a:	2b03      	cmp	r3, #3
 801b09c:	d878      	bhi.n	801b190 <SUBGRF_SetPacketParams+0x128>
 801b09e:	a201      	add	r2, pc, #4	@ (adr r2, 801b0a4 <SUBGRF_SetPacketParams+0x3c>)
 801b0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0a4:	0801b0b5 	.word	0x0801b0b5
 801b0a8:	0801b145 	.word	0x0801b145
 801b0ac:	0801b139 	.word	0x0801b139
 801b0b0:	0801b0b5 	.word	0x0801b0b5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	7a5b      	ldrb	r3, [r3, #9]
 801b0b8:	2bf1      	cmp	r3, #241	@ 0xf1
 801b0ba:	d10a      	bne.n	801b0d2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b0bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801b0c0:	f7ff faa6 	bl	801a610 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b0c4:	f248 0005 	movw	r0, #32773	@ 0x8005
 801b0c8:	f7ff fac2 	bl	801a650 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b0cc:	2302      	movs	r3, #2
 801b0ce:	75bb      	strb	r3, [r7, #22]
 801b0d0:	e011      	b.n	801b0f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	7a5b      	ldrb	r3, [r3, #9]
 801b0d6:	2bf2      	cmp	r3, #242	@ 0xf2
 801b0d8:	d10a      	bne.n	801b0f0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b0da:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801b0de:	f7ff fa97 	bl	801a610 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b0e2:	f241 0021 	movw	r0, #4129	@ 0x1021
 801b0e6:	f7ff fab3 	bl	801a650 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b0ea:	2306      	movs	r3, #6
 801b0ec:	75bb      	strb	r3, [r7, #22]
 801b0ee:	e002      	b.n	801b0f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	7a5b      	ldrb	r3, [r3, #9]
 801b0f4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b0f6:	2309      	movs	r3, #9
 801b0f8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	885b      	ldrh	r3, [r3, #2]
 801b0fe:	0a1b      	lsrs	r3, r3, #8
 801b100:	b29b      	uxth	r3, r3
 801b102:	b2db      	uxtb	r3, r3
 801b104:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	885b      	ldrh	r3, [r3, #2]
 801b10a:	b2db      	uxtb	r3, r3
 801b10c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	791b      	ldrb	r3, [r3, #4]
 801b112:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	795b      	ldrb	r3, [r3, #5]
 801b118:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	799b      	ldrb	r3, [r3, #6]
 801b11e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	79db      	ldrb	r3, [r3, #7]
 801b124:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	7a1b      	ldrb	r3, [r3, #8]
 801b12a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b12c:	7dbb      	ldrb	r3, [r7, #22]
 801b12e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	7a9b      	ldrb	r3, [r3, #10]
 801b134:	753b      	strb	r3, [r7, #20]
        break;
 801b136:	e022      	b.n	801b17e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b138:	2301      	movs	r3, #1
 801b13a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	7b1b      	ldrb	r3, [r3, #12]
 801b140:	733b      	strb	r3, [r7, #12]
        break;
 801b142:	e01c      	b.n	801b17e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b144:	2306      	movs	r3, #6
 801b146:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	89db      	ldrh	r3, [r3, #14]
 801b14c:	0a1b      	lsrs	r3, r3, #8
 801b14e:	b29b      	uxth	r3, r3
 801b150:	b2db      	uxtb	r3, r3
 801b152:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	89db      	ldrh	r3, [r3, #14]
 801b158:	b2db      	uxtb	r3, r3
 801b15a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	7c1a      	ldrb	r2, [r3, #16]
 801b160:	4b0e      	ldr	r3, [pc, #56]	@ (801b19c <SUBGRF_SetPacketParams+0x134>)
 801b162:	4611      	mov	r1, r2
 801b164:	7019      	strb	r1, [r3, #0]
 801b166:	4613      	mov	r3, r2
 801b168:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	7c5b      	ldrb	r3, [r3, #17]
 801b16e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	7c9b      	ldrb	r3, [r3, #18]
 801b174:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	7cdb      	ldrb	r3, [r3, #19]
 801b17a:	747b      	strb	r3, [r7, #17]
        break;
 801b17c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b17e:	7dfb      	ldrb	r3, [r7, #23]
 801b180:	b29a      	uxth	r2, r3
 801b182:	f107 030c 	add.w	r3, r7, #12
 801b186:	4619      	mov	r1, r3
 801b188:	208c      	movs	r0, #140	@ 0x8c
 801b18a:	f000 f97d 	bl	801b488 <SUBGRF_WriteCommand>
 801b18e:	e000      	b.n	801b192 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b190:	bf00      	nop
}
 801b192:	3718      	adds	r7, #24
 801b194:	46bd      	mov	sp, r7
 801b196:	bd80      	pop	{r7, pc}
 801b198:	20001cf5 	.word	0x20001cf5
 801b19c:	20001cf6 	.word	0x20001cf6

0801b1a0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b084      	sub	sp, #16
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	460a      	mov	r2, r1
 801b1aa:	71fb      	strb	r3, [r7, #7]
 801b1ac:	4613      	mov	r3, r2
 801b1ae:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b1b0:	79fb      	ldrb	r3, [r7, #7]
 801b1b2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b1b4:	79bb      	ldrb	r3, [r7, #6]
 801b1b6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b1b8:	f107 030c 	add.w	r3, r7, #12
 801b1bc:	2202      	movs	r2, #2
 801b1be:	4619      	mov	r1, r3
 801b1c0:	208f      	movs	r0, #143	@ 0x8f
 801b1c2:	f000 f961 	bl	801b488 <SUBGRF_WriteCommand>
}
 801b1c6:	bf00      	nop
 801b1c8:	3710      	adds	r7, #16
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	bd80      	pop	{r7, pc}

0801b1ce <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b1ce:	b580      	push	{r7, lr}
 801b1d0:	b082      	sub	sp, #8
 801b1d2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b1d8:	1d3b      	adds	r3, r7, #4
 801b1da:	2201      	movs	r2, #1
 801b1dc:	4619      	mov	r1, r3
 801b1de:	2015      	movs	r0, #21
 801b1e0:	f000 f974 	bl	801b4cc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b1e4:	793b      	ldrb	r3, [r7, #4]
 801b1e6:	425b      	negs	r3, r3
 801b1e8:	105b      	asrs	r3, r3, #1
 801b1ea:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b1ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	3708      	adds	r7, #8
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	bd80      	pop	{r7, pc}

0801b1f8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b084      	sub	sp, #16
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	6078      	str	r0, [r7, #4]
 801b200:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b202:	f107 030c 	add.w	r3, r7, #12
 801b206:	2202      	movs	r2, #2
 801b208:	4619      	mov	r1, r3
 801b20a:	2013      	movs	r0, #19
 801b20c:	f000 f95e 	bl	801b4cc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b210:	f7ff fd84 	bl	801ad1c <SUBGRF_GetPacketType>
 801b214:	4603      	mov	r3, r0
 801b216:	2b01      	cmp	r3, #1
 801b218:	d10d      	bne.n	801b236 <SUBGRF_GetRxBufferStatus+0x3e>
 801b21a:	4b0c      	ldr	r3, [pc, #48]	@ (801b24c <SUBGRF_GetRxBufferStatus+0x54>)
 801b21c:	781b      	ldrb	r3, [r3, #0]
 801b21e:	b2db      	uxtb	r3, r3
 801b220:	2b01      	cmp	r3, #1
 801b222:	d108      	bne.n	801b236 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b224:	f240 7002 	movw	r0, #1794	@ 0x702
 801b228:	f000 f886 	bl	801b338 <SUBGRF_ReadRegister>
 801b22c:	4603      	mov	r3, r0
 801b22e:	461a      	mov	r2, r3
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	701a      	strb	r2, [r3, #0]
 801b234:	e002      	b.n	801b23c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b236:	7b3a      	ldrb	r2, [r7, #12]
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b23c:	7b7a      	ldrb	r2, [r7, #13]
 801b23e:	683b      	ldr	r3, [r7, #0]
 801b240:	701a      	strb	r2, [r3, #0]
}
 801b242:	bf00      	nop
 801b244:	3710      	adds	r7, #16
 801b246:	46bd      	mov	sp, r7
 801b248:	bd80      	pop	{r7, pc}
 801b24a:	bf00      	nop
 801b24c:	20001cf6 	.word	0x20001cf6

0801b250 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b250:	b580      	push	{r7, lr}
 801b252:	b084      	sub	sp, #16
 801b254:	af00      	add	r7, sp, #0
 801b256:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b258:	f107 030c 	add.w	r3, r7, #12
 801b25c:	2203      	movs	r2, #3
 801b25e:	4619      	mov	r1, r3
 801b260:	2014      	movs	r0, #20
 801b262:	f000 f933 	bl	801b4cc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b266:	f7ff fd59 	bl	801ad1c <SUBGRF_GetPacketType>
 801b26a:	4603      	mov	r3, r0
 801b26c:	461a      	mov	r2, r3
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	781b      	ldrb	r3, [r3, #0]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d002      	beq.n	801b280 <SUBGRF_GetPacketStatus+0x30>
 801b27a:	2b01      	cmp	r3, #1
 801b27c:	d013      	beq.n	801b2a6 <SUBGRF_GetPacketStatus+0x56>
 801b27e:	e02a      	b.n	801b2d6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b280:	7b3a      	ldrb	r2, [r7, #12]
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b286:	7b7b      	ldrb	r3, [r7, #13]
 801b288:	425b      	negs	r3, r3
 801b28a:	105b      	asrs	r3, r3, #1
 801b28c:	b25a      	sxtb	r2, r3
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b292:	7bbb      	ldrb	r3, [r7, #14]
 801b294:	425b      	negs	r3, r3
 801b296:	105b      	asrs	r3, r3, #1
 801b298:	b25a      	sxtb	r2, r3
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	2200      	movs	r2, #0
 801b2a2:	609a      	str	r2, [r3, #8]
            break;
 801b2a4:	e020      	b.n	801b2e8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b2a6:	7b3b      	ldrb	r3, [r7, #12]
 801b2a8:	425b      	negs	r3, r3
 801b2aa:	105b      	asrs	r3, r3, #1
 801b2ac:	b25a      	sxtb	r2, r3
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b2b2:	7b7b      	ldrb	r3, [r7, #13]
 801b2b4:	b25b      	sxtb	r3, r3
 801b2b6:	3302      	adds	r3, #2
 801b2b8:	109b      	asrs	r3, r3, #2
 801b2ba:	b25a      	sxtb	r2, r3
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b2c0:	7bbb      	ldrb	r3, [r7, #14]
 801b2c2:	425b      	negs	r3, r3
 801b2c4:	105b      	asrs	r3, r3, #1
 801b2c6:	b25a      	sxtb	r2, r3
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b2cc:	4b08      	ldr	r3, [pc, #32]	@ (801b2f0 <SUBGRF_GetPacketStatus+0xa0>)
 801b2ce:	681a      	ldr	r2, [r3, #0]
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	611a      	str	r2, [r3, #16]
            break;
 801b2d4:	e008      	b.n	801b2e8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b2d6:	2214      	movs	r2, #20
 801b2d8:	2100      	movs	r1, #0
 801b2da:	6878      	ldr	r0, [r7, #4]
 801b2dc:	f000 fc1d 	bl	801bb1a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	220f      	movs	r2, #15
 801b2e4:	701a      	strb	r2, [r3, #0]
            break;
 801b2e6:	bf00      	nop
    }
}
 801b2e8:	bf00      	nop
 801b2ea:	3710      	adds	r7, #16
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd80      	pop	{r7, pc}
 801b2f0:	20001cf8 	.word	0x20001cf8

0801b2f4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b086      	sub	sp, #24
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	4603      	mov	r3, r0
 801b2fc:	460a      	mov	r2, r1
 801b2fe:	80fb      	strh	r3, [r7, #6]
 801b300:	4613      	mov	r3, r2
 801b302:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b304:	f3ef 8310 	mrs	r3, PRIMASK
 801b308:	60fb      	str	r3, [r7, #12]
  return(result);
 801b30a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b30c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b30e:	b672      	cpsid	i
}
 801b310:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b312:	1d7a      	adds	r2, r7, #5
 801b314:	88f9      	ldrh	r1, [r7, #6]
 801b316:	2301      	movs	r3, #1
 801b318:	4806      	ldr	r0, [pc, #24]	@ (801b334 <SUBGRF_WriteRegister+0x40>)
 801b31a:	f7ec ff2b 	bl	8008174 <HAL_SUBGHZ_WriteRegisters>
 801b31e:	697b      	ldr	r3, [r7, #20]
 801b320:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b322:	693b      	ldr	r3, [r7, #16]
 801b324:	f383 8810 	msr	PRIMASK, r3
}
 801b328:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b32a:	bf00      	nop
 801b32c:	3718      	adds	r7, #24
 801b32e:	46bd      	mov	sp, r7
 801b330:	bd80      	pop	{r7, pc}
 801b332:	bf00      	nop
 801b334:	20000258 	.word	0x20000258

0801b338 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b086      	sub	sp, #24
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	4603      	mov	r3, r0
 801b340:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b342:	f3ef 8310 	mrs	r3, PRIMASK
 801b346:	60fb      	str	r3, [r7, #12]
  return(result);
 801b348:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 801b34a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b34c:	b672      	cpsid	i
}
 801b34e:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b350:	f107 020b 	add.w	r2, r7, #11
 801b354:	88f9      	ldrh	r1, [r7, #6]
 801b356:	2301      	movs	r3, #1
 801b358:	4806      	ldr	r0, [pc, #24]	@ (801b374 <SUBGRF_ReadRegister+0x3c>)
 801b35a:	f7ec ff6a 	bl	8008232 <HAL_SUBGHZ_ReadRegisters>
 801b35e:	697b      	ldr	r3, [r7, #20]
 801b360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b362:	693b      	ldr	r3, [r7, #16]
 801b364:	f383 8810 	msr	PRIMASK, r3
}
 801b368:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 801b36a:	7afb      	ldrb	r3, [r7, #11]
}
 801b36c:	4618      	mov	r0, r3
 801b36e:	3718      	adds	r7, #24
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}
 801b374:	20000258 	.word	0x20000258

0801b378 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b086      	sub	sp, #24
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	4603      	mov	r3, r0
 801b380:	6039      	str	r1, [r7, #0]
 801b382:	80fb      	strh	r3, [r7, #6]
 801b384:	4613      	mov	r3, r2
 801b386:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b388:	f3ef 8310 	mrs	r3, PRIMASK
 801b38c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b38e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b390:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b392:	b672      	cpsid	i
}
 801b394:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b396:	88bb      	ldrh	r3, [r7, #4]
 801b398:	88f9      	ldrh	r1, [r7, #6]
 801b39a:	683a      	ldr	r2, [r7, #0]
 801b39c:	4806      	ldr	r0, [pc, #24]	@ (801b3b8 <SUBGRF_WriteRegisters+0x40>)
 801b39e:	f7ec fee9 	bl	8008174 <HAL_SUBGHZ_WriteRegisters>
 801b3a2:	697b      	ldr	r3, [r7, #20]
 801b3a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3a6:	693b      	ldr	r3, [r7, #16]
 801b3a8:	f383 8810 	msr	PRIMASK, r3
}
 801b3ac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b3ae:	bf00      	nop
 801b3b0:	3718      	adds	r7, #24
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	bd80      	pop	{r7, pc}
 801b3b6:	bf00      	nop
 801b3b8:	20000258 	.word	0x20000258

0801b3bc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b086      	sub	sp, #24
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	4603      	mov	r3, r0
 801b3c4:	6039      	str	r1, [r7, #0]
 801b3c6:	80fb      	strh	r3, [r7, #6]
 801b3c8:	4613      	mov	r3, r2
 801b3ca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b3cc:	f3ef 8310 	mrs	r3, PRIMASK
 801b3d0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b3d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b3d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b3d6:	b672      	cpsid	i
}
 801b3d8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b3da:	88bb      	ldrh	r3, [r7, #4]
 801b3dc:	88f9      	ldrh	r1, [r7, #6]
 801b3de:	683a      	ldr	r2, [r7, #0]
 801b3e0:	4806      	ldr	r0, [pc, #24]	@ (801b3fc <SUBGRF_ReadRegisters+0x40>)
 801b3e2:	f7ec ff26 	bl	8008232 <HAL_SUBGHZ_ReadRegisters>
 801b3e6:	697b      	ldr	r3, [r7, #20]
 801b3e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3ea:	693b      	ldr	r3, [r7, #16]
 801b3ec:	f383 8810 	msr	PRIMASK, r3
}
 801b3f0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b3f2:	bf00      	nop
 801b3f4:	3718      	adds	r7, #24
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	bd80      	pop	{r7, pc}
 801b3fa:	bf00      	nop
 801b3fc:	20000258 	.word	0x20000258

0801b400 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b400:	b580      	push	{r7, lr}
 801b402:	b086      	sub	sp, #24
 801b404:	af00      	add	r7, sp, #0
 801b406:	4603      	mov	r3, r0
 801b408:	6039      	str	r1, [r7, #0]
 801b40a:	71fb      	strb	r3, [r7, #7]
 801b40c:	4613      	mov	r3, r2
 801b40e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b410:	f3ef 8310 	mrs	r3, PRIMASK
 801b414:	60fb      	str	r3, [r7, #12]
  return(result);
 801b416:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b418:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b41a:	b672      	cpsid	i
}
 801b41c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b41e:	79bb      	ldrb	r3, [r7, #6]
 801b420:	b29b      	uxth	r3, r3
 801b422:	79f9      	ldrb	r1, [r7, #7]
 801b424:	683a      	ldr	r2, [r7, #0]
 801b426:	4806      	ldr	r0, [pc, #24]	@ (801b440 <SUBGRF_WriteBuffer+0x40>)
 801b428:	f7ed f817 	bl	800845a <HAL_SUBGHZ_WriteBuffer>
 801b42c:	697b      	ldr	r3, [r7, #20]
 801b42e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b430:	693b      	ldr	r3, [r7, #16]
 801b432:	f383 8810 	msr	PRIMASK, r3
}
 801b436:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b438:	bf00      	nop
 801b43a:	3718      	adds	r7, #24
 801b43c:	46bd      	mov	sp, r7
 801b43e:	bd80      	pop	{r7, pc}
 801b440:	20000258 	.word	0x20000258

0801b444 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b086      	sub	sp, #24
 801b448:	af00      	add	r7, sp, #0
 801b44a:	4603      	mov	r3, r0
 801b44c:	6039      	str	r1, [r7, #0]
 801b44e:	71fb      	strb	r3, [r7, #7]
 801b450:	4613      	mov	r3, r2
 801b452:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b454:	f3ef 8310 	mrs	r3, PRIMASK
 801b458:	60fb      	str	r3, [r7, #12]
  return(result);
 801b45a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b45c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b45e:	b672      	cpsid	i
}
 801b460:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b462:	79bb      	ldrb	r3, [r7, #6]
 801b464:	b29b      	uxth	r3, r3
 801b466:	79f9      	ldrb	r1, [r7, #7]
 801b468:	683a      	ldr	r2, [r7, #0]
 801b46a:	4806      	ldr	r0, [pc, #24]	@ (801b484 <SUBGRF_ReadBuffer+0x40>)
 801b46c:	f7ed f848 	bl	8008500 <HAL_SUBGHZ_ReadBuffer>
 801b470:	697b      	ldr	r3, [r7, #20]
 801b472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b474:	693b      	ldr	r3, [r7, #16]
 801b476:	f383 8810 	msr	PRIMASK, r3
}
 801b47a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b47c:	bf00      	nop
 801b47e:	3718      	adds	r7, #24
 801b480:	46bd      	mov	sp, r7
 801b482:	bd80      	pop	{r7, pc}
 801b484:	20000258 	.word	0x20000258

0801b488 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b488:	b580      	push	{r7, lr}
 801b48a:	b086      	sub	sp, #24
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	4603      	mov	r3, r0
 801b490:	6039      	str	r1, [r7, #0]
 801b492:	71fb      	strb	r3, [r7, #7]
 801b494:	4613      	mov	r3, r2
 801b496:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b498:	f3ef 8310 	mrs	r3, PRIMASK
 801b49c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b49e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b4a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b4a2:	b672      	cpsid	i
}
 801b4a4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b4a6:	88bb      	ldrh	r3, [r7, #4]
 801b4a8:	79f9      	ldrb	r1, [r7, #7]
 801b4aa:	683a      	ldr	r2, [r7, #0]
 801b4ac:	4806      	ldr	r0, [pc, #24]	@ (801b4c8 <SUBGRF_WriteCommand+0x40>)
 801b4ae:	f7ec ff21 	bl	80082f4 <HAL_SUBGHZ_ExecSetCmd>
 801b4b2:	697b      	ldr	r3, [r7, #20]
 801b4b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4b6:	693b      	ldr	r3, [r7, #16]
 801b4b8:	f383 8810 	msr	PRIMASK, r3
}
 801b4bc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b4be:	bf00      	nop
 801b4c0:	3718      	adds	r7, #24
 801b4c2:	46bd      	mov	sp, r7
 801b4c4:	bd80      	pop	{r7, pc}
 801b4c6:	bf00      	nop
 801b4c8:	20000258 	.word	0x20000258

0801b4cc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b4cc:	b580      	push	{r7, lr}
 801b4ce:	b086      	sub	sp, #24
 801b4d0:	af00      	add	r7, sp, #0
 801b4d2:	4603      	mov	r3, r0
 801b4d4:	6039      	str	r1, [r7, #0]
 801b4d6:	71fb      	strb	r3, [r7, #7]
 801b4d8:	4613      	mov	r3, r2
 801b4da:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4dc:	f3ef 8310 	mrs	r3, PRIMASK
 801b4e0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b4e2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b4e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b4e6:	b672      	cpsid	i
}
 801b4e8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b4ea:	88bb      	ldrh	r3, [r7, #4]
 801b4ec:	79f9      	ldrb	r1, [r7, #7]
 801b4ee:	683a      	ldr	r2, [r7, #0]
 801b4f0:	4806      	ldr	r0, [pc, #24]	@ (801b50c <SUBGRF_ReadCommand+0x40>)
 801b4f2:	f7ec ff5e 	bl	80083b2 <HAL_SUBGHZ_ExecGetCmd>
 801b4f6:	697b      	ldr	r3, [r7, #20]
 801b4f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4fa:	693b      	ldr	r3, [r7, #16]
 801b4fc:	f383 8810 	msr	PRIMASK, r3
}
 801b500:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b502:	bf00      	nop
 801b504:	3718      	adds	r7, #24
 801b506:	46bd      	mov	sp, r7
 801b508:	bd80      	pop	{r7, pc}
 801b50a:	bf00      	nop
 801b50c:	20000258 	.word	0x20000258

0801b510 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b510:	b580      	push	{r7, lr}
 801b512:	b084      	sub	sp, #16
 801b514:	af00      	add	r7, sp, #0
 801b516:	4603      	mov	r3, r0
 801b518:	460a      	mov	r2, r1
 801b51a:	71fb      	strb	r3, [r7, #7]
 801b51c:	4613      	mov	r3, r2
 801b51e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b520:	2301      	movs	r3, #1
 801b522:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b524:	79bb      	ldrb	r3, [r7, #6]
 801b526:	2b01      	cmp	r3, #1
 801b528:	d10d      	bne.n	801b546 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b52a:	79fb      	ldrb	r3, [r7, #7]
 801b52c:	2b01      	cmp	r3, #1
 801b52e:	d104      	bne.n	801b53a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b530:	2302      	movs	r3, #2
 801b532:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b534:	2004      	movs	r0, #4
 801b536:	f000 f8ef 	bl	801b718 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b53a:	79fb      	ldrb	r3, [r7, #7]
 801b53c:	2b02      	cmp	r3, #2
 801b53e:	d107      	bne.n	801b550 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b540:	2303      	movs	r3, #3
 801b542:	73fb      	strb	r3, [r7, #15]
 801b544:	e004      	b.n	801b550 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b546:	79bb      	ldrb	r3, [r7, #6]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d101      	bne.n	801b550 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b54c:	2301      	movs	r3, #1
 801b54e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b550:	7bfb      	ldrb	r3, [r7, #15]
 801b552:	4618      	mov	r0, r3
 801b554:	f7f0 fa6f 	bl	800ba36 <RBI_ConfigRFSwitch>
}
 801b558:	bf00      	nop
 801b55a:	3710      	adds	r7, #16
 801b55c:	46bd      	mov	sp, r7
 801b55e:	bd80      	pop	{r7, pc}

0801b560 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b560:	b580      	push	{r7, lr}
 801b562:	b084      	sub	sp, #16
 801b564:	af00      	add	r7, sp, #0
 801b566:	4603      	mov	r3, r0
 801b568:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b56a:	2301      	movs	r3, #1
 801b56c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b56e:	f7f0 fa70 	bl	800ba52 <RBI_GetTxConfig>
 801b572:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b574:	68bb      	ldr	r3, [r7, #8]
 801b576:	2b02      	cmp	r3, #2
 801b578:	d016      	beq.n	801b5a8 <SUBGRF_SetRfTxPower+0x48>
 801b57a:	68bb      	ldr	r3, [r7, #8]
 801b57c:	2b02      	cmp	r3, #2
 801b57e:	dc16      	bgt.n	801b5ae <SUBGRF_SetRfTxPower+0x4e>
 801b580:	68bb      	ldr	r3, [r7, #8]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d003      	beq.n	801b58e <SUBGRF_SetRfTxPower+0x2e>
 801b586:	68bb      	ldr	r3, [r7, #8]
 801b588:	2b01      	cmp	r3, #1
 801b58a:	d00a      	beq.n	801b5a2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b58c:	e00f      	b.n	801b5ae <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b58e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b592:	2b0f      	cmp	r3, #15
 801b594:	dd02      	ble.n	801b59c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b596:	2302      	movs	r3, #2
 801b598:	73fb      	strb	r3, [r7, #15]
            break;
 801b59a:	e009      	b.n	801b5b0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b59c:	2301      	movs	r3, #1
 801b59e:	73fb      	strb	r3, [r7, #15]
            break;
 801b5a0:	e006      	b.n	801b5b0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b5a2:	2301      	movs	r3, #1
 801b5a4:	73fb      	strb	r3, [r7, #15]
            break;
 801b5a6:	e003      	b.n	801b5b0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b5a8:	2302      	movs	r3, #2
 801b5aa:	73fb      	strb	r3, [r7, #15]
            break;
 801b5ac:	e000      	b.n	801b5b0 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b5ae:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b5b0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b5b4:	7bfb      	ldrb	r3, [r7, #15]
 801b5b6:	2202      	movs	r2, #2
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	f7ff fbb9 	bl	801ad30 <SUBGRF_SetTxParams>

    return paSelect;
 801b5be:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	3710      	adds	r7, #16
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	bd80      	pop	{r7, pc}

0801b5c8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b5c8:	b480      	push	{r7}
 801b5ca:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b5cc:	2301      	movs	r3, #1
}
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	46bd      	mov	sp, r7
 801b5d2:	bc80      	pop	{r7}
 801b5d4:	4770      	bx	lr
	...

0801b5d8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b5d8:	b580      	push	{r7, lr}
 801b5da:	b082      	sub	sp, #8
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b5e0:	4b03      	ldr	r3, [pc, #12]	@ (801b5f0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	2001      	movs	r0, #1
 801b5e6:	4798      	blx	r3
}
 801b5e8:	bf00      	nop
 801b5ea:	3708      	adds	r7, #8
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	bd80      	pop	{r7, pc}
 801b5f0:	20001d00 	.word	0x20001d00

0801b5f4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b5f4:	b580      	push	{r7, lr}
 801b5f6:	b082      	sub	sp, #8
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b5fc:	4b03      	ldr	r3, [pc, #12]	@ (801b60c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	2002      	movs	r0, #2
 801b602:	4798      	blx	r3
}
 801b604:	bf00      	nop
 801b606:	3708      	adds	r7, #8
 801b608:	46bd      	mov	sp, r7
 801b60a:	bd80      	pop	{r7, pc}
 801b60c:	20001d00 	.word	0x20001d00

0801b610 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b610:	b580      	push	{r7, lr}
 801b612:	b082      	sub	sp, #8
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b618:	4b03      	ldr	r3, [pc, #12]	@ (801b628 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	2040      	movs	r0, #64	@ 0x40
 801b61e:	4798      	blx	r3
}
 801b620:	bf00      	nop
 801b622:	3708      	adds	r7, #8
 801b624:	46bd      	mov	sp, r7
 801b626:	bd80      	pop	{r7, pc}
 801b628:	20001d00 	.word	0x20001d00

0801b62c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b62c:	b580      	push	{r7, lr}
 801b62e:	b082      	sub	sp, #8
 801b630:	af00      	add	r7, sp, #0
 801b632:	6078      	str	r0, [r7, #4]
 801b634:	460b      	mov	r3, r1
 801b636:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b638:	78fb      	ldrb	r3, [r7, #3]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d002      	beq.n	801b644 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b63e:	2b01      	cmp	r3, #1
 801b640:	d005      	beq.n	801b64e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b642:	e00a      	b.n	801b65a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b644:	4b07      	ldr	r3, [pc, #28]	@ (801b664 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	2080      	movs	r0, #128	@ 0x80
 801b64a:	4798      	blx	r3
            break;
 801b64c:	e005      	b.n	801b65a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b64e:	4b05      	ldr	r3, [pc, #20]	@ (801b664 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b656:	4798      	blx	r3
            break;
 801b658:	bf00      	nop
    }
}
 801b65a:	bf00      	nop
 801b65c:	3708      	adds	r7, #8
 801b65e:	46bd      	mov	sp, r7
 801b660:	bd80      	pop	{r7, pc}
 801b662:	bf00      	nop
 801b664:	20001d00 	.word	0x20001d00

0801b668 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b668:	b580      	push	{r7, lr}
 801b66a:	b082      	sub	sp, #8
 801b66c:	af00      	add	r7, sp, #0
 801b66e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b670:	4b04      	ldr	r3, [pc, #16]	@ (801b684 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b678:	4798      	blx	r3
}
 801b67a:	bf00      	nop
 801b67c:	3708      	adds	r7, #8
 801b67e:	46bd      	mov	sp, r7
 801b680:	bd80      	pop	{r7, pc}
 801b682:	bf00      	nop
 801b684:	20001d00 	.word	0x20001d00

0801b688 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b688:	b580      	push	{r7, lr}
 801b68a:	b082      	sub	sp, #8
 801b68c:	af00      	add	r7, sp, #0
 801b68e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b690:	4b03      	ldr	r3, [pc, #12]	@ (801b6a0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	2020      	movs	r0, #32
 801b696:	4798      	blx	r3
}
 801b698:	bf00      	nop
 801b69a:	3708      	adds	r7, #8
 801b69c:	46bd      	mov	sp, r7
 801b69e:	bd80      	pop	{r7, pc}
 801b6a0:	20001d00 	.word	0x20001d00

0801b6a4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6a4:	b580      	push	{r7, lr}
 801b6a6:	b082      	sub	sp, #8
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b6ac:	4b03      	ldr	r3, [pc, #12]	@ (801b6bc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	2004      	movs	r0, #4
 801b6b2:	4798      	blx	r3
}
 801b6b4:	bf00      	nop
 801b6b6:	3708      	adds	r7, #8
 801b6b8:	46bd      	mov	sp, r7
 801b6ba:	bd80      	pop	{r7, pc}
 801b6bc:	20001d00 	.word	0x20001d00

0801b6c0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b082      	sub	sp, #8
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b6c8:	4b03      	ldr	r3, [pc, #12]	@ (801b6d8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	2008      	movs	r0, #8
 801b6ce:	4798      	blx	r3
}
 801b6d0:	bf00      	nop
 801b6d2:	3708      	adds	r7, #8
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	bd80      	pop	{r7, pc}
 801b6d8:	20001d00 	.word	0x20001d00

0801b6dc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	b082      	sub	sp, #8
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b6e4:	4b03      	ldr	r3, [pc, #12]	@ (801b6f4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	2010      	movs	r0, #16
 801b6ea:	4798      	blx	r3
}
 801b6ec:	bf00      	nop
 801b6ee:	3708      	adds	r7, #8
 801b6f0:	46bd      	mov	sp, r7
 801b6f2:	bd80      	pop	{r7, pc}
 801b6f4:	20001d00 	.word	0x20001d00

0801b6f8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6f8:	b580      	push	{r7, lr}
 801b6fa:	b082      	sub	sp, #8
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801b700:	4b04      	ldr	r3, [pc, #16]	@ (801b714 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801b708:	4798      	blx	r3
}
 801b70a:	bf00      	nop
 801b70c:	3708      	adds	r7, #8
 801b70e:	46bd      	mov	sp, r7
 801b710:	bd80      	pop	{r7, pc}
 801b712:	bf00      	nop
 801b714:	20001d00 	.word	0x20001d00

0801b718 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b718:	b580      	push	{r7, lr}
 801b71a:	b084      	sub	sp, #16
 801b71c:	af00      	add	r7, sp, #0
 801b71e:	4603      	mov	r3, r0
 801b720:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b722:	f7f0 f9a4 	bl	800ba6e <RBI_IsDCDC>
 801b726:	4603      	mov	r3, r0
 801b728:	2b01      	cmp	r3, #1
 801b72a:	d112      	bne.n	801b752 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b72c:	f640 1023 	movw	r0, #2339	@ 0x923
 801b730:	f7ff fe02 	bl	801b338 <SUBGRF_ReadRegister>
 801b734:	4603      	mov	r3, r0
 801b736:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b738:	7bfb      	ldrb	r3, [r7, #15]
 801b73a:	f023 0306 	bic.w	r3, r3, #6
 801b73e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b740:	7bfa      	ldrb	r2, [r7, #15]
 801b742:	79fb      	ldrb	r3, [r7, #7]
 801b744:	4313      	orrs	r3, r2
 801b746:	b2db      	uxtb	r3, r3
 801b748:	4619      	mov	r1, r3
 801b74a:	f640 1023 	movw	r0, #2339	@ 0x923
 801b74e:	f7ff fdd1 	bl	801b2f4 <SUBGRF_WriteRegister>
  }
}
 801b752:	bf00      	nop
 801b754:	3710      	adds	r7, #16
 801b756:	46bd      	mov	sp, r7
 801b758:	bd80      	pop	{r7, pc}
	...

0801b75c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b75c:	b480      	push	{r7}
 801b75e:	b085      	sub	sp, #20
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d101      	bne.n	801b76e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b76a:	231f      	movs	r3, #31
 801b76c:	e017      	b.n	801b79e <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b76e:	2300      	movs	r3, #0
 801b770:	73fb      	strb	r3, [r7, #15]
 801b772:	e00f      	b.n	801b794 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b774:	7bfb      	ldrb	r3, [r7, #15]
 801b776:	4a0c      	ldr	r2, [pc, #48]	@ (801b7a8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b778:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b77c:	687a      	ldr	r2, [r7, #4]
 801b77e:	429a      	cmp	r2, r3
 801b780:	d205      	bcs.n	801b78e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b782:	7bfb      	ldrb	r3, [r7, #15]
 801b784:	4a08      	ldr	r2, [pc, #32]	@ (801b7a8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b786:	00db      	lsls	r3, r3, #3
 801b788:	4413      	add	r3, r2
 801b78a:	791b      	ldrb	r3, [r3, #4]
 801b78c:	e007      	b.n	801b79e <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b78e:	7bfb      	ldrb	r3, [r7, #15]
 801b790:	3301      	adds	r3, #1
 801b792:	73fb      	strb	r3, [r7, #15]
 801b794:	7bfb      	ldrb	r3, [r7, #15]
 801b796:	2b15      	cmp	r3, #21
 801b798:	d9ec      	bls.n	801b774 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801b79a:	bf00      	nop
 801b79c:	e7fd      	b.n	801b79a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b79e:	4618      	mov	r0, r3
 801b7a0:	3714      	adds	r7, #20
 801b7a2:	46bd      	mov	sp, r7
 801b7a4:	bc80      	pop	{r7}
 801b7a6:	4770      	bx	lr
 801b7a8:	0801dfa4 	.word	0x0801dfa4

0801b7ac <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b08a      	sub	sp, #40	@ 0x28
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
 801b7b4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b7b6:	4b35      	ldr	r3, [pc, #212]	@ (801b88c <SUBGRF_GetCFO+0xe0>)
 801b7b8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b7ba:	f640 0007 	movw	r0, #2055	@ 0x807
 801b7be:	f7ff fdbb 	bl	801b338 <SUBGRF_ReadRegister>
 801b7c2:	4603      	mov	r3, r0
 801b7c4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b7c6:	7ffb      	ldrb	r3, [r7, #31]
 801b7c8:	08db      	lsrs	r3, r3, #3
 801b7ca:	b2db      	uxtb	r3, r3
 801b7cc:	f003 0303 	and.w	r3, r3, #3
 801b7d0:	3328      	adds	r3, #40	@ 0x28
 801b7d2:	443b      	add	r3, r7
 801b7d4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b7d8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b7da:	7ffb      	ldrb	r3, [r7, #31]
 801b7dc:	f003 0307 	and.w	r3, r3, #7
 801b7e0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801b7e2:	7fba      	ldrb	r2, [r7, #30]
 801b7e4:	7f7b      	ldrb	r3, [r7, #29]
 801b7e6:	3301      	adds	r3, #1
 801b7e8:	fa02 f303 	lsl.w	r3, r2, r3
 801b7ec:	461a      	mov	r2, r3
 801b7ee:	4b28      	ldr	r3, [pc, #160]	@ (801b890 <SUBGRF_GetCFO+0xe4>)
 801b7f0:	fbb3 f3f2 	udiv	r3, r3, r2
 801b7f4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b7f6:	69ba      	ldr	r2, [r7, #24]
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	fbb2 f3f3 	udiv	r3, r2, r3
 801b7fe:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b800:	2301      	movs	r3, #1
 801b802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b80a:	697a      	ldr	r2, [r7, #20]
 801b80c:	fb02 f303 	mul.w	r3, r2, r3
 801b810:	2b07      	cmp	r3, #7
 801b812:	d802      	bhi.n	801b81a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b814:	2302      	movs	r3, #2
 801b816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801b81a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b81e:	697a      	ldr	r2, [r7, #20]
 801b820:	fb02 f303 	mul.w	r3, r2, r3
 801b824:	2b03      	cmp	r3, #3
 801b826:	d802      	bhi.n	801b82e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b828:	2304      	movs	r3, #4
 801b82a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b82e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b832:	69bb      	ldr	r3, [r7, #24]
 801b834:	fb02 f303 	mul.w	r3, r2, r3
 801b838:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b83a:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801b83e:	f7ff fd7b 	bl	801b338 <SUBGRF_ReadRegister>
 801b842:	4603      	mov	r3, r0
 801b844:	021b      	lsls	r3, r3, #8
 801b846:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801b84a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b84c:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801b850:	f7ff fd72 	bl	801b338 <SUBGRF_ReadRegister>
 801b854:	4603      	mov	r3, r0
 801b856:	461a      	mov	r2, r3
 801b858:	6a3b      	ldr	r3, [r7, #32]
 801b85a:	4313      	orrs	r3, r2
 801b85c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b85e:	6a3b      	ldr	r3, [r7, #32]
 801b860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b864:	2b00      	cmp	r3, #0
 801b866:	d005      	beq.n	801b874 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b868:	6a3b      	ldr	r3, [r7, #32]
 801b86a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b86e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b872:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b874:	693b      	ldr	r3, [r7, #16]
 801b876:	095b      	lsrs	r3, r3, #5
 801b878:	6a3a      	ldr	r2, [r7, #32]
 801b87a:	fb02 f303 	mul.w	r3, r2, r3
 801b87e:	11da      	asrs	r2, r3, #7
 801b880:	683b      	ldr	r3, [r7, #0]
 801b882:	601a      	str	r2, [r3, #0]
}
 801b884:	bf00      	nop
 801b886:	3728      	adds	r7, #40	@ 0x28
 801b888:	46bd      	mov	sp, r7
 801b88a:	bd80      	pop	{r7, pc}
 801b88c:	0c0a0804 	.word	0x0c0a0804
 801b890:	01e84800 	.word	0x01e84800

0801b894 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801b894:	b480      	push	{r7}
 801b896:	b087      	sub	sp, #28
 801b898:	af00      	add	r7, sp, #0
 801b89a:	4603      	mov	r3, r0
 801b89c:	60b9      	str	r1, [r7, #8]
 801b89e:	607a      	str	r2, [r7, #4]
 801b8a0:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801b8a2:	2300      	movs	r3, #0
 801b8a4:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801b8a6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8aa:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801b8ac:	697b      	ldr	r3, [r7, #20]
}
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	371c      	adds	r7, #28
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	bc80      	pop	{r7}
 801b8b6:	4770      	bx	lr

0801b8b8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801b8b8:	b480      	push	{r7}
 801b8ba:	b087      	sub	sp, #28
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	4603      	mov	r3, r0
 801b8c0:	60b9      	str	r1, [r7, #8]
 801b8c2:	607a      	str	r2, [r7, #4]
 801b8c4:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801b8c6:	2300      	movs	r3, #0
 801b8c8:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801b8ca:	f04f 33ff 	mov.w	r3, #4294967295
 801b8ce:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801b8d0:	697b      	ldr	r3, [r7, #20]
}
 801b8d2:	4618      	mov	r0, r3
 801b8d4:	371c      	adds	r7, #28
 801b8d6:	46bd      	mov	sp, r7
 801b8d8:	bc80      	pop	{r7}
 801b8da:	4770      	bx	lr

0801b8dc <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801b8dc:	b480      	push	{r7}
 801b8de:	b085      	sub	sp, #20
 801b8e0:	af00      	add	r7, sp, #0
 801b8e2:	60f8      	str	r0, [r7, #12]
 801b8e4:	60b9      	str	r1, [r7, #8]
 801b8e6:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801b8e8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	3714      	adds	r7, #20
 801b8f0:	46bd      	mov	sp, r7
 801b8f2:	bc80      	pop	{r7}
 801b8f4:	4770      	bx	lr

0801b8f6 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801b8f6:	b480      	push	{r7}
 801b8f8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801b8fa:	bf00      	nop
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	bc80      	pop	{r7}
 801b900:	4770      	bx	lr

0801b902 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801b902:	b480      	push	{r7}
 801b904:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801b906:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801b908:	4618      	mov	r0, r3
 801b90a:	46bd      	mov	sp, r7
 801b90c:	bc80      	pop	{r7}
 801b90e:	4770      	bx	lr

0801b910 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801b910:	b480      	push	{r7}
 801b912:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801b914:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801b916:	4618      	mov	r0, r3
 801b918:	46bd      	mov	sp, r7
 801b91a:	bc80      	pop	{r7}
 801b91c:	4770      	bx	lr

0801b91e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801b91e:	b480      	push	{r7}
 801b920:	b083      	sub	sp, #12
 801b922:	af00      	add	r7, sp, #0
 801b924:	4603      	mov	r3, r0
 801b926:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801b928:	bf00      	nop
 801b92a:	370c      	adds	r7, #12
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bc80      	pop	{r7}
 801b930:	4770      	bx	lr

0801b932 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801b932:	b480      	push	{r7}
 801b934:	b087      	sub	sp, #28
 801b936:	af00      	add	r7, sp, #0
 801b938:	60f8      	str	r0, [r7, #12]
 801b93a:	460b      	mov	r3, r1
 801b93c:	607a      	str	r2, [r7, #4]
 801b93e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801b940:	f04f 33ff 	mov.w	r3, #4294967295
 801b944:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801b946:	697b      	ldr	r3, [r7, #20]
}
 801b948:	4618      	mov	r0, r3
 801b94a:	371c      	adds	r7, #28
 801b94c:	46bd      	mov	sp, r7
 801b94e:	bc80      	pop	{r7}
 801b950:	4770      	bx	lr

0801b952 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801b952:	b480      	push	{r7}
 801b954:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801b956:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801b95a:	4618      	mov	r0, r3
 801b95c:	46bd      	mov	sp, r7
 801b95e:	bc80      	pop	{r7}
 801b960:	4770      	bx	lr

0801b962 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801b962:	b480      	push	{r7}
 801b964:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801b966:	bf00      	nop
 801b968:	46bd      	mov	sp, r7
 801b96a:	bc80      	pop	{r7}
 801b96c:	4770      	bx	lr

0801b96e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801b96e:	b480      	push	{r7}
 801b970:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801b972:	bf00      	nop
 801b974:	46bd      	mov	sp, r7
 801b976:	bc80      	pop	{r7}
 801b978:	4770      	bx	lr

0801b97a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801b97a:	b480      	push	{r7}
 801b97c:	b083      	sub	sp, #12
 801b97e:	af00      	add	r7, sp, #0
 801b980:	4603      	mov	r3, r0
 801b982:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801b984:	bf00      	nop
 801b986:	370c      	adds	r7, #12
 801b988:	46bd      	mov	sp, r7
 801b98a:	bc80      	pop	{r7}
 801b98c:	4770      	bx	lr
	...

0801b990 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b990:	b480      	push	{r7}
 801b992:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b994:	4b04      	ldr	r3, [pc, #16]	@ (801b9a8 <UTIL_LPM_Init+0x18>)
 801b996:	2200      	movs	r2, #0
 801b998:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b99a:	4b04      	ldr	r3, [pc, #16]	@ (801b9ac <UTIL_LPM_Init+0x1c>)
 801b99c:	2200      	movs	r2, #0
 801b99e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b9a0:	bf00      	nop
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	bc80      	pop	{r7}
 801b9a6:	4770      	bx	lr
 801b9a8:	20001d04 	.word	0x20001d04
 801b9ac:	20001d08 	.word	0x20001d08

0801b9b0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b9b0:	b480      	push	{r7}
 801b9b2:	b087      	sub	sp, #28
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]
 801b9b8:	460b      	mov	r3, r1
 801b9ba:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b9bc:	f3ef 8310 	mrs	r3, PRIMASK
 801b9c0:	613b      	str	r3, [r7, #16]
  return(result);
 801b9c2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b9c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b9c6:	b672      	cpsid	i
}
 801b9c8:	bf00      	nop
  
  switch( state )
 801b9ca:	78fb      	ldrb	r3, [r7, #3]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d008      	beq.n	801b9e2 <UTIL_LPM_SetStopMode+0x32>
 801b9d0:	2b01      	cmp	r3, #1
 801b9d2:	d10e      	bne.n	801b9f2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b9d4:	4b0d      	ldr	r3, [pc, #52]	@ (801ba0c <UTIL_LPM_SetStopMode+0x5c>)
 801b9d6:	681a      	ldr	r2, [r3, #0]
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	4313      	orrs	r3, r2
 801b9dc:	4a0b      	ldr	r2, [pc, #44]	@ (801ba0c <UTIL_LPM_SetStopMode+0x5c>)
 801b9de:	6013      	str	r3, [r2, #0]
      break;
 801b9e0:	e008      	b.n	801b9f4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	43da      	mvns	r2, r3
 801b9e6:	4b09      	ldr	r3, [pc, #36]	@ (801ba0c <UTIL_LPM_SetStopMode+0x5c>)
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	4013      	ands	r3, r2
 801b9ec:	4a07      	ldr	r2, [pc, #28]	@ (801ba0c <UTIL_LPM_SetStopMode+0x5c>)
 801b9ee:	6013      	str	r3, [r2, #0]
      break;
 801b9f0:	e000      	b.n	801b9f4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b9f2:	bf00      	nop
 801b9f4:	697b      	ldr	r3, [r7, #20]
 801b9f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	f383 8810 	msr	PRIMASK, r3
}
 801b9fe:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ba00:	bf00      	nop
 801ba02:	371c      	adds	r7, #28
 801ba04:	46bd      	mov	sp, r7
 801ba06:	bc80      	pop	{r7}
 801ba08:	4770      	bx	lr
 801ba0a:	bf00      	nop
 801ba0c:	20001d04 	.word	0x20001d04

0801ba10 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ba10:	b480      	push	{r7}
 801ba12:	b087      	sub	sp, #28
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
 801ba18:	460b      	mov	r3, r1
 801ba1a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba1c:	f3ef 8310 	mrs	r3, PRIMASK
 801ba20:	613b      	str	r3, [r7, #16]
  return(result);
 801ba22:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ba24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba26:	b672      	cpsid	i
}
 801ba28:	bf00      	nop
  
  switch(state)
 801ba2a:	78fb      	ldrb	r3, [r7, #3]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d008      	beq.n	801ba42 <UTIL_LPM_SetOffMode+0x32>
 801ba30:	2b01      	cmp	r3, #1
 801ba32:	d10e      	bne.n	801ba52 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ba34:	4b0d      	ldr	r3, [pc, #52]	@ (801ba6c <UTIL_LPM_SetOffMode+0x5c>)
 801ba36:	681a      	ldr	r2, [r3, #0]
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	4313      	orrs	r3, r2
 801ba3c:	4a0b      	ldr	r2, [pc, #44]	@ (801ba6c <UTIL_LPM_SetOffMode+0x5c>)
 801ba3e:	6013      	str	r3, [r2, #0]
      break;
 801ba40:	e008      	b.n	801ba54 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	43da      	mvns	r2, r3
 801ba46:	4b09      	ldr	r3, [pc, #36]	@ (801ba6c <UTIL_LPM_SetOffMode+0x5c>)
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	4013      	ands	r3, r2
 801ba4c:	4a07      	ldr	r2, [pc, #28]	@ (801ba6c <UTIL_LPM_SetOffMode+0x5c>)
 801ba4e:	6013      	str	r3, [r2, #0]
      break;
 801ba50:	e000      	b.n	801ba54 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ba52:	bf00      	nop
 801ba54:	697b      	ldr	r3, [r7, #20]
 801ba56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	f383 8810 	msr	PRIMASK, r3
}
 801ba5e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ba60:	bf00      	nop
 801ba62:	371c      	adds	r7, #28
 801ba64:	46bd      	mov	sp, r7
 801ba66:	bc80      	pop	{r7}
 801ba68:	4770      	bx	lr
 801ba6a:	bf00      	nop
 801ba6c:	20001d08 	.word	0x20001d08

0801ba70 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b084      	sub	sp, #16
 801ba74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba76:	f3ef 8310 	mrs	r3, PRIMASK
 801ba7a:	60bb      	str	r3, [r7, #8]
  return(result);
 801ba7c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801ba7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba80:	b672      	cpsid	i
}
 801ba82:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801ba84:	4b12      	ldr	r3, [pc, #72]	@ (801bad0 <UTIL_LPM_EnterLowPower+0x60>)
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d006      	beq.n	801ba9a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801ba8c:	4b11      	ldr	r3, [pc, #68]	@ (801bad4 <UTIL_LPM_EnterLowPower+0x64>)
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801ba92:	4b10      	ldr	r3, [pc, #64]	@ (801bad4 <UTIL_LPM_EnterLowPower+0x64>)
 801ba94:	685b      	ldr	r3, [r3, #4]
 801ba96:	4798      	blx	r3
 801ba98:	e010      	b.n	801babc <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801ba9a:	4b0f      	ldr	r3, [pc, #60]	@ (801bad8 <UTIL_LPM_EnterLowPower+0x68>)
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d006      	beq.n	801bab0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801baa2:	4b0c      	ldr	r3, [pc, #48]	@ (801bad4 <UTIL_LPM_EnterLowPower+0x64>)
 801baa4:	689b      	ldr	r3, [r3, #8]
 801baa6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801baa8:	4b0a      	ldr	r3, [pc, #40]	@ (801bad4 <UTIL_LPM_EnterLowPower+0x64>)
 801baaa:	68db      	ldr	r3, [r3, #12]
 801baac:	4798      	blx	r3
 801baae:	e005      	b.n	801babc <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801bab0:	4b08      	ldr	r3, [pc, #32]	@ (801bad4 <UTIL_LPM_EnterLowPower+0x64>)
 801bab2:	691b      	ldr	r3, [r3, #16]
 801bab4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801bab6:	4b07      	ldr	r3, [pc, #28]	@ (801bad4 <UTIL_LPM_EnterLowPower+0x64>)
 801bab8:	695b      	ldr	r3, [r3, #20]
 801baba:	4798      	blx	r3
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	f383 8810 	msr	PRIMASK, r3
}
 801bac6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801bac8:	bf00      	nop
 801baca:	3710      	adds	r7, #16
 801bacc:	46bd      	mov	sp, r7
 801bace:	bd80      	pop	{r7, pc}
 801bad0:	20001d04 	.word	0x20001d04
 801bad4:	0801da18 	.word	0x0801da18
 801bad8:	20001d08 	.word	0x20001d08

0801badc <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801badc:	b480      	push	{r7}
 801bade:	b087      	sub	sp, #28
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	60f8      	str	r0, [r7, #12]
 801bae4:	60b9      	str	r1, [r7, #8]
 801bae6:	4613      	mov	r3, r2
 801bae8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801baee:	68bb      	ldr	r3, [r7, #8]
 801baf0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801baf2:	e007      	b.n	801bb04 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801baf4:	693a      	ldr	r2, [r7, #16]
 801baf6:	1c53      	adds	r3, r2, #1
 801baf8:	613b      	str	r3, [r7, #16]
 801bafa:	697b      	ldr	r3, [r7, #20]
 801bafc:	1c59      	adds	r1, r3, #1
 801bafe:	6179      	str	r1, [r7, #20]
 801bb00:	7812      	ldrb	r2, [r2, #0]
 801bb02:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bb04:	88fb      	ldrh	r3, [r7, #6]
 801bb06:	1e5a      	subs	r2, r3, #1
 801bb08:	80fa      	strh	r2, [r7, #6]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d1f2      	bne.n	801baf4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801bb0e:	bf00      	nop
 801bb10:	bf00      	nop
 801bb12:	371c      	adds	r7, #28
 801bb14:	46bd      	mov	sp, r7
 801bb16:	bc80      	pop	{r7}
 801bb18:	4770      	bx	lr

0801bb1a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801bb1a:	b480      	push	{r7}
 801bb1c:	b085      	sub	sp, #20
 801bb1e:	af00      	add	r7, sp, #0
 801bb20:	6078      	str	r0, [r7, #4]
 801bb22:	460b      	mov	r3, r1
 801bb24:	70fb      	strb	r3, [r7, #3]
 801bb26:	4613      	mov	r3, r2
 801bb28:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801bb2e:	e004      	b.n	801bb3a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	1c5a      	adds	r2, r3, #1
 801bb34:	60fa      	str	r2, [r7, #12]
 801bb36:	78fa      	ldrb	r2, [r7, #3]
 801bb38:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bb3a:	883b      	ldrh	r3, [r7, #0]
 801bb3c:	1e5a      	subs	r2, r3, #1
 801bb3e:	803a      	strh	r2, [r7, #0]
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d1f5      	bne.n	801bb30 <UTIL_MEM_set_8+0x16>
  }
}
 801bb44:	bf00      	nop
 801bb46:	bf00      	nop
 801bb48:	3714      	adds	r7, #20
 801bb4a:	46bd      	mov	sp, r7
 801bb4c:	bc80      	pop	{r7}
 801bb4e:	4770      	bx	lr

0801bb50 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801bb50:	b082      	sub	sp, #8
 801bb52:	b480      	push	{r7}
 801bb54:	b087      	sub	sp, #28
 801bb56:	af00      	add	r7, sp, #0
 801bb58:	60f8      	str	r0, [r7, #12]
 801bb5a:	1d38      	adds	r0, r7, #4
 801bb5c:	e880 0006 	stmia.w	r0, {r1, r2}
 801bb60:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801bb62:	2300      	movs	r3, #0
 801bb64:	613b      	str	r3, [r7, #16]
 801bb66:	2300      	movs	r3, #0
 801bb68:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801bb6a:	687a      	ldr	r2, [r7, #4]
 801bb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb6e:	4413      	add	r3, r2
 801bb70:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801bb72:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bb76:	b29a      	uxth	r2, r3
 801bb78:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801bb7c:	b29b      	uxth	r3, r3
 801bb7e:	4413      	add	r3, r2
 801bb80:	b29b      	uxth	r3, r3
 801bb82:	b21b      	sxth	r3, r3
 801bb84:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801bb86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bb8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801bb8e:	db0a      	blt.n	801bba6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801bb90:	693b      	ldr	r3, [r7, #16]
 801bb92:	3301      	adds	r3, #1
 801bb94:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801bb96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bb9a:	b29b      	uxth	r3, r3
 801bb9c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801bba0:	b29b      	uxth	r3, r3
 801bba2:	b21b      	sxth	r3, r3
 801bba4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	461a      	mov	r2, r3
 801bbaa:	f107 0310 	add.w	r3, r7, #16
 801bbae:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bbb2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bbb6:	68f8      	ldr	r0, [r7, #12]
 801bbb8:	371c      	adds	r7, #28
 801bbba:	46bd      	mov	sp, r7
 801bbbc:	bc80      	pop	{r7}
 801bbbe:	b002      	add	sp, #8
 801bbc0:	4770      	bx	lr

0801bbc2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801bbc2:	b082      	sub	sp, #8
 801bbc4:	b480      	push	{r7}
 801bbc6:	b087      	sub	sp, #28
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	60f8      	str	r0, [r7, #12]
 801bbcc:	1d38      	adds	r0, r7, #4
 801bbce:	e880 0006 	stmia.w	r0, {r1, r2}
 801bbd2:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801bbd4:	2300      	movs	r3, #0
 801bbd6:	613b      	str	r3, [r7, #16]
 801bbd8:	2300      	movs	r3, #0
 801bbda:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801bbdc:	687a      	ldr	r2, [r7, #4]
 801bbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbe0:	1ad3      	subs	r3, r2, r3
 801bbe2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801bbe4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bbe8:	b29a      	uxth	r2, r3
 801bbea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801bbee:	b29b      	uxth	r3, r3
 801bbf0:	1ad3      	subs	r3, r2, r3
 801bbf2:	b29b      	uxth	r3, r3
 801bbf4:	b21b      	sxth	r3, r3
 801bbf6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801bbf8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	da0a      	bge.n	801bc16 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801bc00:	693b      	ldr	r3, [r7, #16]
 801bc02:	3b01      	subs	r3, #1
 801bc04:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801bc06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bc0a:	b29b      	uxth	r3, r3
 801bc0c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801bc10:	b29b      	uxth	r3, r3
 801bc12:	b21b      	sxth	r3, r3
 801bc14:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	461a      	mov	r2, r3
 801bc1a:	f107 0310 	add.w	r3, r7, #16
 801bc1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bc22:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bc26:	68f8      	ldr	r0, [r7, #12]
 801bc28:	371c      	adds	r7, #28
 801bc2a:	46bd      	mov	sp, r7
 801bc2c:	bc80      	pop	{r7}
 801bc2e:	b002      	add	sp, #8
 801bc30:	4770      	bx	lr
	...

0801bc34 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801bc34:	b580      	push	{r7, lr}
 801bc36:	b088      	sub	sp, #32
 801bc38:	af02      	add	r7, sp, #8
 801bc3a:	463b      	mov	r3, r7
 801bc3c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bc40:	2300      	movs	r3, #0
 801bc42:	60bb      	str	r3, [r7, #8]
 801bc44:	2300      	movs	r3, #0
 801bc46:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bc48:	4b10      	ldr	r3, [pc, #64]	@ (801bc8c <SysTimeSet+0x58>)
 801bc4a:	691b      	ldr	r3, [r3, #16]
 801bc4c:	f107 0208 	add.w	r2, r7, #8
 801bc50:	3204      	adds	r2, #4
 801bc52:	4610      	mov	r0, r2
 801bc54:	4798      	blx	r3
 801bc56:	4603      	mov	r3, r0
 801bc58:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801bc5a:	f107 0010 	add.w	r0, r7, #16
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	9300      	str	r3, [sp, #0]
 801bc62:	68bb      	ldr	r3, [r7, #8]
 801bc64:	463a      	mov	r2, r7
 801bc66:	ca06      	ldmia	r2, {r1, r2}
 801bc68:	f7ff ffab 	bl	801bbc2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801bc6c:	4b07      	ldr	r3, [pc, #28]	@ (801bc8c <SysTimeSet+0x58>)
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	693a      	ldr	r2, [r7, #16]
 801bc72:	4610      	mov	r0, r2
 801bc74:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801bc76:	4b05      	ldr	r3, [pc, #20]	@ (801bc8c <SysTimeSet+0x58>)
 801bc78:	689b      	ldr	r3, [r3, #8]
 801bc7a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bc7e:	4610      	mov	r0, r2
 801bc80:	4798      	blx	r3
}
 801bc82:	bf00      	nop
 801bc84:	3718      	adds	r7, #24
 801bc86:	46bd      	mov	sp, r7
 801bc88:	bd80      	pop	{r7, pc}
 801bc8a:	bf00      	nop
 801bc8c:	0801dafc 	.word	0x0801dafc

0801bc90 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801bc90:	b580      	push	{r7, lr}
 801bc92:	b08a      	sub	sp, #40	@ 0x28
 801bc94:	af02      	add	r7, sp, #8
 801bc96:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bc98:	2300      	movs	r3, #0
 801bc9a:	61bb      	str	r3, [r7, #24]
 801bc9c:	2300      	movs	r3, #0
 801bc9e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801bca0:	2300      	movs	r3, #0
 801bca2:	613b      	str	r3, [r7, #16]
 801bca4:	2300      	movs	r3, #0
 801bca6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bca8:	4b14      	ldr	r3, [pc, #80]	@ (801bcfc <SysTimeGet+0x6c>)
 801bcaa:	691b      	ldr	r3, [r3, #16]
 801bcac:	f107 0218 	add.w	r2, r7, #24
 801bcb0:	3204      	adds	r2, #4
 801bcb2:	4610      	mov	r0, r2
 801bcb4:	4798      	blx	r3
 801bcb6:	4603      	mov	r3, r0
 801bcb8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bcba:	4b10      	ldr	r3, [pc, #64]	@ (801bcfc <SysTimeGet+0x6c>)
 801bcbc:	68db      	ldr	r3, [r3, #12]
 801bcbe:	4798      	blx	r3
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	b21b      	sxth	r3, r3
 801bcc4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bcc6:	4b0d      	ldr	r3, [pc, #52]	@ (801bcfc <SysTimeGet+0x6c>)
 801bcc8:	685b      	ldr	r3, [r3, #4]
 801bcca:	4798      	blx	r3
 801bccc:	4603      	mov	r3, r0
 801bcce:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801bcd0:	f107 0010 	add.w	r0, r7, #16
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	9300      	str	r3, [sp, #0]
 801bcd8:	69bb      	ldr	r3, [r7, #24]
 801bcda:	f107 0208 	add.w	r2, r7, #8
 801bcde:	ca06      	ldmia	r2, {r1, r2}
 801bce0:	f7ff ff36 	bl	801bb50 <SysTimeAdd>

  return sysTime;
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	461a      	mov	r2, r3
 801bce8:	f107 0310 	add.w	r3, r7, #16
 801bcec:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bcf0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bcf4:	6878      	ldr	r0, [r7, #4]
 801bcf6:	3720      	adds	r7, #32
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bd80      	pop	{r7, pc}
 801bcfc:	0801dafc 	.word	0x0801dafc

0801bd00 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b084      	sub	sp, #16
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd08:	2300      	movs	r3, #0
 801bd0a:	60bb      	str	r3, [r7, #8]
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bd10:	4b0a      	ldr	r3, [pc, #40]	@ (801bd3c <SysTimeGetMcuTime+0x3c>)
 801bd12:	691b      	ldr	r3, [r3, #16]
 801bd14:	f107 0208 	add.w	r2, r7, #8
 801bd18:	3204      	adds	r2, #4
 801bd1a:	4610      	mov	r0, r2
 801bd1c:	4798      	blx	r3
 801bd1e:	4603      	mov	r3, r0
 801bd20:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	461a      	mov	r2, r3
 801bd26:	f107 0308 	add.w	r3, r7, #8
 801bd2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bd2e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bd32:	6878      	ldr	r0, [r7, #4]
 801bd34:	3710      	adds	r7, #16
 801bd36:	46bd      	mov	sp, r7
 801bd38:	bd80      	pop	{r7, pc}
 801bd3a:	bf00      	nop
 801bd3c:	0801dafc 	.word	0x0801dafc

0801bd40 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801bd40:	b480      	push	{r7}
 801bd42:	b085      	sub	sp, #20
 801bd44:	af00      	add	r7, sp, #0
 801bd46:	6078      	str	r0, [r7, #4]
  int i = 0;
 801bd48:	2300      	movs	r3, #0
 801bd4a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801bd4c:	e00e      	b.n	801bd6c <ee_skip_atoi+0x2c>
 801bd4e:	68fa      	ldr	r2, [r7, #12]
 801bd50:	4613      	mov	r3, r2
 801bd52:	009b      	lsls	r3, r3, #2
 801bd54:	4413      	add	r3, r2
 801bd56:	005b      	lsls	r3, r3, #1
 801bd58:	4618      	mov	r0, r3
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	1c59      	adds	r1, r3, #1
 801bd60:	687a      	ldr	r2, [r7, #4]
 801bd62:	6011      	str	r1, [r2, #0]
 801bd64:	781b      	ldrb	r3, [r3, #0]
 801bd66:	4403      	add	r3, r0
 801bd68:	3b30      	subs	r3, #48	@ 0x30
 801bd6a:	60fb      	str	r3, [r7, #12]
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	781b      	ldrb	r3, [r3, #0]
 801bd72:	2b2f      	cmp	r3, #47	@ 0x2f
 801bd74:	d904      	bls.n	801bd80 <ee_skip_atoi+0x40>
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	781b      	ldrb	r3, [r3, #0]
 801bd7c:	2b39      	cmp	r3, #57	@ 0x39
 801bd7e:	d9e6      	bls.n	801bd4e <ee_skip_atoi+0xe>
  return i;
 801bd80:	68fb      	ldr	r3, [r7, #12]
}
 801bd82:	4618      	mov	r0, r3
 801bd84:	3714      	adds	r7, #20
 801bd86:	46bd      	mov	sp, r7
 801bd88:	bc80      	pop	{r7}
 801bd8a:	4770      	bx	lr

0801bd8c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801bd8c:	b480      	push	{r7}
 801bd8e:	b099      	sub	sp, #100	@ 0x64
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	60f8      	str	r0, [r7, #12]
 801bd94:	60b9      	str	r1, [r7, #8]
 801bd96:	607a      	str	r2, [r7, #4]
 801bd98:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801bd9a:	4b71      	ldr	r3, [pc, #452]	@ (801bf60 <ee_number+0x1d4>)
 801bd9c:	681b      	ldr	r3, [r3, #0]
 801bd9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801bda0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bda2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d002      	beq.n	801bdb0 <ee_number+0x24>
 801bdaa:	4b6e      	ldr	r3, [pc, #440]	@ (801bf64 <ee_number+0x1d8>)
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bdb0:	683b      	ldr	r3, [r7, #0]
 801bdb2:	2b01      	cmp	r3, #1
 801bdb4:	dd02      	ble.n	801bdbc <ee_number+0x30>
 801bdb6:	683b      	ldr	r3, [r7, #0]
 801bdb8:	2b24      	cmp	r3, #36	@ 0x24
 801bdba:	dd01      	ble.n	801bdc0 <ee_number+0x34>
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	e0ca      	b.n	801bf56 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801bdc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bdc2:	f003 0301 	and.w	r3, r3, #1
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d001      	beq.n	801bdce <ee_number+0x42>
 801bdca:	2330      	movs	r3, #48	@ 0x30
 801bdcc:	e000      	b.n	801bdd0 <ee_number+0x44>
 801bdce:	2320      	movs	r3, #32
 801bdd0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801bdd4:	2300      	movs	r3, #0
 801bdd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801bdda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bddc:	f003 0302 	and.w	r3, r3, #2
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d00b      	beq.n	801bdfc <ee_number+0x70>
  {
    if (num < 0)
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	da08      	bge.n	801bdfc <ee_number+0x70>
    {
      sign = '-';
 801bdea:	232d      	movs	r3, #45	@ 0x2d
 801bdec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	425b      	negs	r3, r3
 801bdf4:	607b      	str	r3, [r7, #4]
      size--;
 801bdf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bdf8:	3b01      	subs	r3, #1
 801bdfa:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bdfc:	2300      	movs	r3, #0
 801bdfe:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	2b00      	cmp	r3, #0
 801be04:	d11e      	bne.n	801be44 <ee_number+0xb8>
    tmp[i++] = '0';
 801be06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801be08:	1c5a      	adds	r2, r3, #1
 801be0a:	657a      	str	r2, [r7, #84]	@ 0x54
 801be0c:	3360      	adds	r3, #96	@ 0x60
 801be0e:	443b      	add	r3, r7
 801be10:	2230      	movs	r2, #48	@ 0x30
 801be12:	f803 2c50 	strb.w	r2, [r3, #-80]
 801be16:	e018      	b.n	801be4a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	683a      	ldr	r2, [r7, #0]
 801be1c:	fbb3 f1f2 	udiv	r1, r3, r2
 801be20:	fb01 f202 	mul.w	r2, r1, r2
 801be24:	1a9b      	subs	r3, r3, r2
 801be26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801be28:	441a      	add	r2, r3
 801be2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801be2c:	1c59      	adds	r1, r3, #1
 801be2e:	6579      	str	r1, [r7, #84]	@ 0x54
 801be30:	7812      	ldrb	r2, [r2, #0]
 801be32:	3360      	adds	r3, #96	@ 0x60
 801be34:	443b      	add	r3, r7
 801be36:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801be3a:	687a      	ldr	r2, [r7, #4]
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	fbb2 f3f3 	udiv	r3, r2, r3
 801be42:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	2b00      	cmp	r3, #0
 801be48:	d1e6      	bne.n	801be18 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801be4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801be4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801be4e:	429a      	cmp	r2, r3
 801be50:	dd01      	ble.n	801be56 <ee_number+0xca>
 801be52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801be54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801be56:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801be58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801be5a:	1ad3      	subs	r3, r2, r3
 801be5c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801be5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801be60:	f003 0301 	and.w	r3, r3, #1
 801be64:	2b00      	cmp	r3, #0
 801be66:	d112      	bne.n	801be8e <ee_number+0x102>
 801be68:	e00c      	b.n	801be84 <ee_number+0xf8>
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	1c5a      	adds	r2, r3, #1
 801be6e:	60fa      	str	r2, [r7, #12]
 801be70:	2220      	movs	r2, #32
 801be72:	701a      	strb	r2, [r3, #0]
 801be74:	68bb      	ldr	r3, [r7, #8]
 801be76:	3b01      	subs	r3, #1
 801be78:	60bb      	str	r3, [r7, #8]
 801be7a:	68bb      	ldr	r3, [r7, #8]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d101      	bne.n	801be84 <ee_number+0xf8>
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	e068      	b.n	801bf56 <ee_number+0x1ca>
 801be84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801be86:	1e5a      	subs	r2, r3, #1
 801be88:	66ba      	str	r2, [r7, #104]	@ 0x68
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	dced      	bgt.n	801be6a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801be8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801be92:	2b00      	cmp	r3, #0
 801be94:	d01b      	beq.n	801bece <ee_number+0x142>
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	1c5a      	adds	r2, r3, #1
 801be9a:	60fa      	str	r2, [r7, #12]
 801be9c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801bea0:	701a      	strb	r2, [r3, #0]
 801bea2:	68bb      	ldr	r3, [r7, #8]
 801bea4:	3b01      	subs	r3, #1
 801bea6:	60bb      	str	r3, [r7, #8]
 801bea8:	68bb      	ldr	r3, [r7, #8]
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d10f      	bne.n	801bece <ee_number+0x142>
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	e051      	b.n	801bf56 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	1c5a      	adds	r2, r3, #1
 801beb6:	60fa      	str	r2, [r7, #12]
 801beb8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801bebc:	701a      	strb	r2, [r3, #0]
 801bebe:	68bb      	ldr	r3, [r7, #8]
 801bec0:	3b01      	subs	r3, #1
 801bec2:	60bb      	str	r3, [r7, #8]
 801bec4:	68bb      	ldr	r3, [r7, #8]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d101      	bne.n	801bece <ee_number+0x142>
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	e043      	b.n	801bf56 <ee_number+0x1ca>
 801bece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bed0:	1e5a      	subs	r2, r3, #1
 801bed2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	dcec      	bgt.n	801beb2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801bed8:	e00c      	b.n	801bef4 <ee_number+0x168>
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	1c5a      	adds	r2, r3, #1
 801bede:	60fa      	str	r2, [r7, #12]
 801bee0:	2230      	movs	r2, #48	@ 0x30
 801bee2:	701a      	strb	r2, [r3, #0]
 801bee4:	68bb      	ldr	r3, [r7, #8]
 801bee6:	3b01      	subs	r3, #1
 801bee8:	60bb      	str	r3, [r7, #8]
 801beea:	68bb      	ldr	r3, [r7, #8]
 801beec:	2b00      	cmp	r3, #0
 801beee:	d101      	bne.n	801bef4 <ee_number+0x168>
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	e030      	b.n	801bf56 <ee_number+0x1ca>
 801bef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bef6:	1e5a      	subs	r2, r3, #1
 801bef8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801befa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801befc:	429a      	cmp	r2, r3
 801befe:	dbec      	blt.n	801beda <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801bf00:	e010      	b.n	801bf24 <ee_number+0x198>
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	1c5a      	adds	r2, r3, #1
 801bf06:	60fa      	str	r2, [r7, #12]
 801bf08:	f107 0110 	add.w	r1, r7, #16
 801bf0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bf0e:	440a      	add	r2, r1
 801bf10:	7812      	ldrb	r2, [r2, #0]
 801bf12:	701a      	strb	r2, [r3, #0]
 801bf14:	68bb      	ldr	r3, [r7, #8]
 801bf16:	3b01      	subs	r3, #1
 801bf18:	60bb      	str	r3, [r7, #8]
 801bf1a:	68bb      	ldr	r3, [r7, #8]
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d101      	bne.n	801bf24 <ee_number+0x198>
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	e018      	b.n	801bf56 <ee_number+0x1ca>
 801bf24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bf26:	1e5a      	subs	r2, r3, #1
 801bf28:	657a      	str	r2, [r7, #84]	@ 0x54
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	dce9      	bgt.n	801bf02 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801bf2e:	e00c      	b.n	801bf4a <ee_number+0x1be>
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	1c5a      	adds	r2, r3, #1
 801bf34:	60fa      	str	r2, [r7, #12]
 801bf36:	2220      	movs	r2, #32
 801bf38:	701a      	strb	r2, [r3, #0]
 801bf3a:	68bb      	ldr	r3, [r7, #8]
 801bf3c:	3b01      	subs	r3, #1
 801bf3e:	60bb      	str	r3, [r7, #8]
 801bf40:	68bb      	ldr	r3, [r7, #8]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d101      	bne.n	801bf4a <ee_number+0x1be>
 801bf46:	68fb      	ldr	r3, [r7, #12]
 801bf48:	e005      	b.n	801bf56 <ee_number+0x1ca>
 801bf4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bf4c:	1e5a      	subs	r2, r3, #1
 801bf4e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	dced      	bgt.n	801bf30 <ee_number+0x1a4>

  return str;
 801bf54:	68fb      	ldr	r3, [r7, #12]
}
 801bf56:	4618      	mov	r0, r3
 801bf58:	3764      	adds	r7, #100	@ 0x64
 801bf5a:	46bd      	mov	sp, r7
 801bf5c:	bc80      	pop	{r7}
 801bf5e:	4770      	bx	lr
 801bf60:	20000138 	.word	0x20000138
 801bf64:	2000013c 	.word	0x2000013c

0801bf68 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801bf68:	b580      	push	{r7, lr}
 801bf6a:	b092      	sub	sp, #72	@ 0x48
 801bf6c:	af04      	add	r7, sp, #16
 801bf6e:	60f8      	str	r0, [r7, #12]
 801bf70:	60b9      	str	r1, [r7, #8]
 801bf72:	607a      	str	r2, [r7, #4]
 801bf74:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801bf76:	68bb      	ldr	r3, [r7, #8]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	dc01      	bgt.n	801bf80 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801bf7c:	2300      	movs	r3, #0
 801bf7e:	e13e      	b.n	801c1fe <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bf84:	e128      	b.n	801c1d8 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801bf86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bf88:	68fb      	ldr	r3, [r7, #12]
 801bf8a:	1ad2      	subs	r2, r2, r3
 801bf8c:	68bb      	ldr	r3, [r7, #8]
 801bf8e:	3b01      	subs	r3, #1
 801bf90:	429a      	cmp	r2, r3
 801bf92:	f280 812e 	bge.w	801c1f2 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	781b      	ldrb	r3, [r3, #0]
 801bf9a:	2b25      	cmp	r3, #37	@ 0x25
 801bf9c:	d006      	beq.n	801bfac <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801bf9e:	687a      	ldr	r2, [r7, #4]
 801bfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfa2:	1c59      	adds	r1, r3, #1
 801bfa4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801bfa6:	7812      	ldrb	r2, [r2, #0]
 801bfa8:	701a      	strb	r2, [r3, #0]
      continue;
 801bfaa:	e112      	b.n	801c1d2 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801bfac:	2300      	movs	r3, #0
 801bfae:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	3301      	adds	r3, #1
 801bfb4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	781b      	ldrb	r3, [r3, #0]
 801bfba:	2b30      	cmp	r3, #48	@ 0x30
 801bfbc:	d103      	bne.n	801bfc6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801bfbe:	6a3b      	ldr	r3, [r7, #32]
 801bfc0:	f043 0301 	orr.w	r3, r3, #1
 801bfc4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801bfc6:	f04f 33ff 	mov.w	r3, #4294967295
 801bfca:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	781b      	ldrb	r3, [r3, #0]
 801bfd0:	2b2f      	cmp	r3, #47	@ 0x2f
 801bfd2:	d908      	bls.n	801bfe6 <tiny_vsnprintf_like+0x7e>
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	781b      	ldrb	r3, [r3, #0]
 801bfd8:	2b39      	cmp	r3, #57	@ 0x39
 801bfda:	d804      	bhi.n	801bfe6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801bfdc:	1d3b      	adds	r3, r7, #4
 801bfde:	4618      	mov	r0, r3
 801bfe0:	f7ff feae 	bl	801bd40 <ee_skip_atoi>
 801bfe4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801bfe6:	f04f 33ff 	mov.w	r3, #4294967295
 801bfea:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801bfec:	f04f 33ff 	mov.w	r3, #4294967295
 801bff0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801bff2:	230a      	movs	r3, #10
 801bff4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	781b      	ldrb	r3, [r3, #0]
 801bffa:	3b58      	subs	r3, #88	@ 0x58
 801bffc:	2b20      	cmp	r3, #32
 801bffe:	f200 8094 	bhi.w	801c12a <tiny_vsnprintf_like+0x1c2>
 801c002:	a201      	add	r2, pc, #4	@ (adr r2, 801c008 <tiny_vsnprintf_like+0xa0>)
 801c004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c008:	0801c113 	.word	0x0801c113
 801c00c:	0801c12b 	.word	0x0801c12b
 801c010:	0801c12b 	.word	0x0801c12b
 801c014:	0801c12b 	.word	0x0801c12b
 801c018:	0801c12b 	.word	0x0801c12b
 801c01c:	0801c12b 	.word	0x0801c12b
 801c020:	0801c12b 	.word	0x0801c12b
 801c024:	0801c12b 	.word	0x0801c12b
 801c028:	0801c12b 	.word	0x0801c12b
 801c02c:	0801c12b 	.word	0x0801c12b
 801c030:	0801c12b 	.word	0x0801c12b
 801c034:	0801c097 	.word	0x0801c097
 801c038:	0801c121 	.word	0x0801c121
 801c03c:	0801c12b 	.word	0x0801c12b
 801c040:	0801c12b 	.word	0x0801c12b
 801c044:	0801c12b 	.word	0x0801c12b
 801c048:	0801c12b 	.word	0x0801c12b
 801c04c:	0801c121 	.word	0x0801c121
 801c050:	0801c12b 	.word	0x0801c12b
 801c054:	0801c12b 	.word	0x0801c12b
 801c058:	0801c12b 	.word	0x0801c12b
 801c05c:	0801c12b 	.word	0x0801c12b
 801c060:	0801c12b 	.word	0x0801c12b
 801c064:	0801c12b 	.word	0x0801c12b
 801c068:	0801c12b 	.word	0x0801c12b
 801c06c:	0801c12b 	.word	0x0801c12b
 801c070:	0801c12b 	.word	0x0801c12b
 801c074:	0801c0b7 	.word	0x0801c0b7
 801c078:	0801c12b 	.word	0x0801c12b
 801c07c:	0801c177 	.word	0x0801c177
 801c080:	0801c12b 	.word	0x0801c12b
 801c084:	0801c12b 	.word	0x0801c12b
 801c088:	0801c11b 	.word	0x0801c11b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c08e:	1c5a      	adds	r2, r3, #1
 801c090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c092:	2220      	movs	r2, #32
 801c094:	701a      	strb	r2, [r3, #0]
 801c096:	69fb      	ldr	r3, [r7, #28]
 801c098:	3b01      	subs	r3, #1
 801c09a:	61fb      	str	r3, [r7, #28]
 801c09c:	69fb      	ldr	r3, [r7, #28]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	dcf4      	bgt.n	801c08c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801c0a2:	683b      	ldr	r3, [r7, #0]
 801c0a4:	1d1a      	adds	r2, r3, #4
 801c0a6:	603a      	str	r2, [r7, #0]
 801c0a8:	6819      	ldr	r1, [r3, #0]
 801c0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0ac:	1c5a      	adds	r2, r3, #1
 801c0ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c0b0:	b2ca      	uxtb	r2, r1
 801c0b2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c0b4:	e08d      	b.n	801c1d2 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	1d1a      	adds	r2, r3, #4
 801c0ba:	603a      	str	r2, [r7, #0]
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801c0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d101      	bne.n	801c0ca <tiny_vsnprintf_like+0x162>
 801c0c6:	4b50      	ldr	r3, [pc, #320]	@ (801c208 <tiny_vsnprintf_like+0x2a0>)
 801c0c8:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c0ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c0cc:	f7e4 f854 	bl	8000178 <strlen>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c0d4:	e004      	b.n	801c0e0 <tiny_vsnprintf_like+0x178>
 801c0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0d8:	1c5a      	adds	r2, r3, #1
 801c0da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c0dc:	2220      	movs	r2, #32
 801c0de:	701a      	strb	r2, [r3, #0]
 801c0e0:	69fb      	ldr	r3, [r7, #28]
 801c0e2:	1e5a      	subs	r2, r3, #1
 801c0e4:	61fa      	str	r2, [r7, #28]
 801c0e6:	693a      	ldr	r2, [r7, #16]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	dbf4      	blt.n	801c0d6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c0ec:	2300      	movs	r3, #0
 801c0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c0f0:	e00a      	b.n	801c108 <tiny_vsnprintf_like+0x1a0>
 801c0f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c0f4:	1c53      	adds	r3, r2, #1
 801c0f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801c0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0fa:	1c59      	adds	r1, r3, #1
 801c0fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c0fe:	7812      	ldrb	r2, [r2, #0]
 801c100:	701a      	strb	r2, [r3, #0]
 801c102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c104:	3301      	adds	r3, #1
 801c106:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c108:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c10a:	693b      	ldr	r3, [r7, #16]
 801c10c:	429a      	cmp	r2, r3
 801c10e:	dbf0      	blt.n	801c0f2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c110:	e05f      	b.n	801c1d2 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801c112:	6a3b      	ldr	r3, [r7, #32]
 801c114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c118:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c11a:	2310      	movs	r3, #16
 801c11c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801c11e:	e02b      	b.n	801c178 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c120:	6a3b      	ldr	r3, [r7, #32]
 801c122:	f043 0302 	orr.w	r3, r3, #2
 801c126:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c128:	e025      	b.n	801c176 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	2b25      	cmp	r3, #37	@ 0x25
 801c130:	d004      	beq.n	801c13c <tiny_vsnprintf_like+0x1d4>
 801c132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c134:	1c5a      	adds	r2, r3, #1
 801c136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c138:	2225      	movs	r2, #37	@ 0x25
 801c13a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c13c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	1ad2      	subs	r2, r2, r3
 801c142:	68bb      	ldr	r3, [r7, #8]
 801c144:	3b01      	subs	r3, #1
 801c146:	429a      	cmp	r2, r3
 801c148:	da16      	bge.n	801c178 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	781b      	ldrb	r3, [r3, #0]
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d006      	beq.n	801c160 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801c152:	687a      	ldr	r2, [r7, #4]
 801c154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c156:	1c59      	adds	r1, r3, #1
 801c158:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c15a:	7812      	ldrb	r2, [r2, #0]
 801c15c:	701a      	strb	r2, [r3, #0]
 801c15e:	e002      	b.n	801c166 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	3b01      	subs	r3, #1
 801c164:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	1ad2      	subs	r2, r2, r3
 801c16c:	68bb      	ldr	r3, [r7, #8]
 801c16e:	3b01      	subs	r3, #1
 801c170:	429a      	cmp	r2, r3
 801c172:	db2d      	blt.n	801c1d0 <tiny_vsnprintf_like+0x268>
 801c174:	e000      	b.n	801c178 <tiny_vsnprintf_like+0x210>
        break;
 801c176:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801c178:	697b      	ldr	r3, [r7, #20]
 801c17a:	2b6c      	cmp	r3, #108	@ 0x6c
 801c17c:	d105      	bne.n	801c18a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801c17e:	683b      	ldr	r3, [r7, #0]
 801c180:	1d1a      	adds	r2, r3, #4
 801c182:	603a      	str	r2, [r7, #0]
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	637b      	str	r3, [r7, #52]	@ 0x34
 801c188:	e00f      	b.n	801c1aa <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801c18a:	6a3b      	ldr	r3, [r7, #32]
 801c18c:	f003 0302 	and.w	r3, r3, #2
 801c190:	2b00      	cmp	r3, #0
 801c192:	d005      	beq.n	801c1a0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801c194:	683b      	ldr	r3, [r7, #0]
 801c196:	1d1a      	adds	r2, r3, #4
 801c198:	603a      	str	r2, [r7, #0]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	637b      	str	r3, [r7, #52]	@ 0x34
 801c19e:	e004      	b.n	801c1aa <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801c1a0:	683b      	ldr	r3, [r7, #0]
 801c1a2:	1d1a      	adds	r2, r3, #4
 801c1a4:	603a      	str	r2, [r7, #0]
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c1aa:	68bb      	ldr	r3, [r7, #8]
 801c1ac:	1e5a      	subs	r2, r3, #1
 801c1ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	1acb      	subs	r3, r1, r3
 801c1b4:	1ad1      	subs	r1, r2, r3
 801c1b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c1b8:	6a3b      	ldr	r3, [r7, #32]
 801c1ba:	9302      	str	r3, [sp, #8]
 801c1bc:	69bb      	ldr	r3, [r7, #24]
 801c1be:	9301      	str	r3, [sp, #4]
 801c1c0:	69fb      	ldr	r3, [r7, #28]
 801c1c2:	9300      	str	r3, [sp, #0]
 801c1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c1c8:	f7ff fde0 	bl	801bd8c <ee_number>
 801c1cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801c1ce:	e000      	b.n	801c1d2 <tiny_vsnprintf_like+0x26a>
        continue;
 801c1d0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	3301      	adds	r3, #1
 801c1d6:	607b      	str	r3, [r7, #4]
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	781b      	ldrb	r3, [r3, #0]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	f47f aed2 	bne.w	801bf86 <tiny_vsnprintf_like+0x1e>
 801c1e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	1ad2      	subs	r2, r2, r3
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	3b01      	subs	r3, #1
 801c1ec:	429a      	cmp	r2, r3
 801c1ee:	f6bf aeca 	bge.w	801bf86 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801c1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1f4:	2200      	movs	r2, #0
 801c1f6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c1f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	1ad3      	subs	r3, r2, r3
}
 801c1fe:	4618      	mov	r0, r3
 801c200:	3738      	adds	r7, #56	@ 0x38
 801c202:	46bd      	mov	sp, r7
 801c204:	bd80      	pop	{r7, pc}
 801c206:	bf00      	nop
 801c208:	0801da10 	.word	0x0801da10

0801c20c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b090      	sub	sp, #64	@ 0x40
 801c210:	af00      	add	r7, sp, #0
 801c212:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c214:	4b73      	ldr	r3, [pc, #460]	@ (801c3e4 <UTIL_SEQ_Run+0x1d8>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801c21a:	4b72      	ldr	r3, [pc, #456]	@ (801c3e4 <UTIL_SEQ_Run+0x1d8>)
 801c21c:	681a      	ldr	r2, [r3, #0]
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	4013      	ands	r3, r2
 801c222:	4a70      	ldr	r2, [pc, #448]	@ (801c3e4 <UTIL_SEQ_Run+0x1d8>)
 801c224:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c226:	4b70      	ldr	r3, [pc, #448]	@ (801c3e8 <UTIL_SEQ_Run+0x1dc>)
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c22c:	4b6f      	ldr	r3, [pc, #444]	@ (801c3ec <UTIL_SEQ_Run+0x1e0>)
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c232:	4b6f      	ldr	r3, [pc, #444]	@ (801c3f0 <UTIL_SEQ_Run+0x1e4>)
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801c238:	4b6e      	ldr	r3, [pc, #440]	@ (801c3f4 <UTIL_SEQ_Run+0x1e8>)
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c23e:	e08d      	b.n	801c35c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c240:	2300      	movs	r3, #0
 801c242:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c244:	e002      	b.n	801c24c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c248:	3301      	adds	r3, #1
 801c24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c24c:	4a6a      	ldr	r2, [pc, #424]	@ (801c3f8 <UTIL_SEQ_Run+0x1ec>)
 801c24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c250:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c256:	401a      	ands	r2, r3
 801c258:	4b62      	ldr	r3, [pc, #392]	@ (801c3e4 <UTIL_SEQ_Run+0x1d8>)
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	4013      	ands	r3, r2
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d0f1      	beq.n	801c246 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c262:	4a65      	ldr	r2, [pc, #404]	@ (801c3f8 <UTIL_SEQ_Run+0x1ec>)
 801c264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c266:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c26c:	401a      	ands	r2, r3
 801c26e:	4b5d      	ldr	r3, [pc, #372]	@ (801c3e4 <UTIL_SEQ_Run+0x1d8>)
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	4013      	ands	r3, r2
 801c274:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c276:	4a60      	ldr	r2, [pc, #384]	@ (801c3f8 <UTIL_SEQ_Run+0x1ec>)
 801c278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c27a:	00db      	lsls	r3, r3, #3
 801c27c:	4413      	add	r3, r2
 801c27e:	685a      	ldr	r2, [r3, #4]
 801c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c282:	4013      	ands	r3, r2
 801c284:	2b00      	cmp	r3, #0
 801c286:	d106      	bne.n	801c296 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c288:	4a5b      	ldr	r2, [pc, #364]	@ (801c3f8 <UTIL_SEQ_Run+0x1ec>)
 801c28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c28c:	00db      	lsls	r3, r3, #3
 801c28e:	4413      	add	r3, r2
 801c290:	f04f 32ff 	mov.w	r2, #4294967295
 801c294:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c296:	4a58      	ldr	r2, [pc, #352]	@ (801c3f8 <UTIL_SEQ_Run+0x1ec>)
 801c298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c29a:	00db      	lsls	r3, r3, #3
 801c29c:	4413      	add	r3, r2
 801c29e:	685a      	ldr	r2, [r3, #4]
 801c2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2a2:	4013      	ands	r3, r2
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	f000 f907 	bl	801c4b8 <SEQ_BitPosition>
 801c2aa:	4603      	mov	r3, r0
 801c2ac:	461a      	mov	r2, r3
 801c2ae:	4b53      	ldr	r3, [pc, #332]	@ (801c3fc <UTIL_SEQ_Run+0x1f0>)
 801c2b0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c2b2:	4a51      	ldr	r2, [pc, #324]	@ (801c3f8 <UTIL_SEQ_Run+0x1ec>)
 801c2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c2b6:	00db      	lsls	r3, r3, #3
 801c2b8:	4413      	add	r3, r2
 801c2ba:	685a      	ldr	r2, [r3, #4]
 801c2bc:	4b4f      	ldr	r3, [pc, #316]	@ (801c3fc <UTIL_SEQ_Run+0x1f0>)
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	2101      	movs	r1, #1
 801c2c2:	fa01 f303 	lsl.w	r3, r1, r3
 801c2c6:	43db      	mvns	r3, r3
 801c2c8:	401a      	ands	r2, r3
 801c2ca:	494b      	ldr	r1, [pc, #300]	@ (801c3f8 <UTIL_SEQ_Run+0x1ec>)
 801c2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c2ce:	00db      	lsls	r3, r3, #3
 801c2d0:	440b      	add	r3, r1
 801c2d2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2d4:	f3ef 8310 	mrs	r3, PRIMASK
 801c2d8:	61bb      	str	r3, [r7, #24]
  return(result);
 801c2da:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c2dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2de:	b672      	cpsid	i
}
 801c2e0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c2e2:	4b46      	ldr	r3, [pc, #280]	@ (801c3fc <UTIL_SEQ_Run+0x1f0>)
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	2201      	movs	r2, #1
 801c2e8:	fa02 f303 	lsl.w	r3, r2, r3
 801c2ec:	43da      	mvns	r2, r3
 801c2ee:	4b3e      	ldr	r3, [pc, #248]	@ (801c3e8 <UTIL_SEQ_Run+0x1dc>)
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	4013      	ands	r3, r2
 801c2f4:	4a3c      	ldr	r2, [pc, #240]	@ (801c3e8 <UTIL_SEQ_Run+0x1dc>)
 801c2f6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c2f8:	2301      	movs	r3, #1
 801c2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c2fc:	e013      	b.n	801c326 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c300:	3b01      	subs	r3, #1
 801c302:	4a3d      	ldr	r2, [pc, #244]	@ (801c3f8 <UTIL_SEQ_Run+0x1ec>)
 801c304:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c308:	4b3c      	ldr	r3, [pc, #240]	@ (801c3fc <UTIL_SEQ_Run+0x1f0>)
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	2201      	movs	r2, #1
 801c30e:	fa02 f303 	lsl.w	r3, r2, r3
 801c312:	43da      	mvns	r2, r3
 801c314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c316:	3b01      	subs	r3, #1
 801c318:	400a      	ands	r2, r1
 801c31a:	4937      	ldr	r1, [pc, #220]	@ (801c3f8 <UTIL_SEQ_Run+0x1ec>)
 801c31c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c322:	3b01      	subs	r3, #1
 801c324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d1e8      	bne.n	801c2fe <UTIL_SEQ_Run+0xf2>
 801c32c:	6a3b      	ldr	r3, [r7, #32]
 801c32e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c330:	697b      	ldr	r3, [r7, #20]
 801c332:	f383 8810 	msr	PRIMASK, r3
}
 801c336:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c338:	4b30      	ldr	r3, [pc, #192]	@ (801c3fc <UTIL_SEQ_Run+0x1f0>)
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	4a30      	ldr	r2, [pc, #192]	@ (801c400 <UTIL_SEQ_Run+0x1f4>)
 801c33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c342:	4798      	blx	r3

    local_taskset = TaskSet;
 801c344:	4b28      	ldr	r3, [pc, #160]	@ (801c3e8 <UTIL_SEQ_Run+0x1dc>)
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801c34a:	4b28      	ldr	r3, [pc, #160]	@ (801c3ec <UTIL_SEQ_Run+0x1e0>)
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801c350:	4b27      	ldr	r3, [pc, #156]	@ (801c3f0 <UTIL_SEQ_Run+0x1e4>)
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801c356:	4b27      	ldr	r3, [pc, #156]	@ (801c3f4 <UTIL_SEQ_Run+0x1e8>)
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c35c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c360:	401a      	ands	r2, r3
 801c362:	4b20      	ldr	r3, [pc, #128]	@ (801c3e4 <UTIL_SEQ_Run+0x1d8>)
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	4013      	ands	r3, r2
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d005      	beq.n	801c378 <UTIL_SEQ_Run+0x16c>
 801c36c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c370:	4013      	ands	r3, r2
 801c372:	2b00      	cmp	r3, #0
 801c374:	f43f af64 	beq.w	801c240 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c378:	4b20      	ldr	r3, [pc, #128]	@ (801c3fc <UTIL_SEQ_Run+0x1f0>)
 801c37a:	f04f 32ff 	mov.w	r2, #4294967295
 801c37e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c380:	f000 f88e 	bl	801c4a0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c384:	f3ef 8310 	mrs	r3, PRIMASK
 801c388:	613b      	str	r3, [r7, #16]
  return(result);
 801c38a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c38c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c38e:	b672      	cpsid	i
}
 801c390:	bf00      	nop
  local_taskset = TaskSet;
 801c392:	4b15      	ldr	r3, [pc, #84]	@ (801c3e8 <UTIL_SEQ_Run+0x1dc>)
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c398:	4b14      	ldr	r3, [pc, #80]	@ (801c3ec <UTIL_SEQ_Run+0x1e0>)
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c39e:	4b14      	ldr	r3, [pc, #80]	@ (801c3f0 <UTIL_SEQ_Run+0x1e4>)
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c3a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3a8:	401a      	ands	r2, r3
 801c3aa:	4b0e      	ldr	r3, [pc, #56]	@ (801c3e4 <UTIL_SEQ_Run+0x1d8>)
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	4013      	ands	r3, r2
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d107      	bne.n	801c3c4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c3b4:	4b0f      	ldr	r3, [pc, #60]	@ (801c3f4 <UTIL_SEQ_Run+0x1e8>)
 801c3b6:	681a      	ldr	r2, [r3, #0]
 801c3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c3ba:	4013      	ands	r3, r2
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d101      	bne.n	801c3c4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c3c0:	f7e5 fede 	bl	8002180 <UTIL_SEQ_Idle>
 801c3c4:	69fb      	ldr	r3, [r7, #28]
 801c3c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	f383 8810 	msr	PRIMASK, r3
}
 801c3ce:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c3d0:	f000 f86c 	bl	801c4ac <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c3d4:	4a03      	ldr	r2, [pc, #12]	@ (801c3e4 <UTIL_SEQ_Run+0x1d8>)
 801c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3d8:	6013      	str	r3, [r2, #0]

  return;
 801c3da:	bf00      	nop
}
 801c3dc:	3740      	adds	r7, #64	@ 0x40
 801c3de:	46bd      	mov	sp, r7
 801c3e0:	bd80      	pop	{r7, pc}
 801c3e2:	bf00      	nop
 801c3e4:	20000144 	.word	0x20000144
 801c3e8:	20001d0c 	.word	0x20001d0c
 801c3ec:	20001d10 	.word	0x20001d10
 801c3f0:	20000140 	.word	0x20000140
 801c3f4:	20001d14 	.word	0x20001d14
 801c3f8:	20001d2c 	.word	0x20001d2c
 801c3fc:	20001d18 	.word	0x20001d18
 801c400:	20001d1c 	.word	0x20001d1c

0801c404 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c404:	b580      	push	{r7, lr}
 801c406:	b088      	sub	sp, #32
 801c408:	af00      	add	r7, sp, #0
 801c40a:	60f8      	str	r0, [r7, #12]
 801c40c:	60b9      	str	r1, [r7, #8]
 801c40e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c410:	f3ef 8310 	mrs	r3, PRIMASK
 801c414:	617b      	str	r3, [r7, #20]
  return(result);
 801c416:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c41a:	b672      	cpsid	i
}
 801c41c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c41e:	68f8      	ldr	r0, [r7, #12]
 801c420:	f000 f84a 	bl	801c4b8 <SEQ_BitPosition>
 801c424:	4603      	mov	r3, r0
 801c426:	4619      	mov	r1, r3
 801c428:	4a06      	ldr	r2, [pc, #24]	@ (801c444 <UTIL_SEQ_RegTask+0x40>)
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c430:	69fb      	ldr	r3, [r7, #28]
 801c432:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c434:	69bb      	ldr	r3, [r7, #24]
 801c436:	f383 8810 	msr	PRIMASK, r3
}
 801c43a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c43c:	bf00      	nop
}
 801c43e:	3720      	adds	r7, #32
 801c440:	46bd      	mov	sp, r7
 801c442:	bd80      	pop	{r7, pc}
 801c444:	20001d1c 	.word	0x20001d1c

0801c448 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c448:	b480      	push	{r7}
 801c44a:	b087      	sub	sp, #28
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	6078      	str	r0, [r7, #4]
 801c450:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c452:	f3ef 8310 	mrs	r3, PRIMASK
 801c456:	60fb      	str	r3, [r7, #12]
  return(result);
 801c458:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c45a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c45c:	b672      	cpsid	i
}
 801c45e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c460:	4b0d      	ldr	r3, [pc, #52]	@ (801c498 <UTIL_SEQ_SetTask+0x50>)
 801c462:	681a      	ldr	r2, [r3, #0]
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	4313      	orrs	r3, r2
 801c468:	4a0b      	ldr	r2, [pc, #44]	@ (801c498 <UTIL_SEQ_SetTask+0x50>)
 801c46a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c46c:	4a0b      	ldr	r2, [pc, #44]	@ (801c49c <UTIL_SEQ_SetTask+0x54>)
 801c46e:	683b      	ldr	r3, [r7, #0]
 801c470:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	431a      	orrs	r2, r3
 801c478:	4908      	ldr	r1, [pc, #32]	@ (801c49c <UTIL_SEQ_SetTask+0x54>)
 801c47a:	683b      	ldr	r3, [r7, #0]
 801c47c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c480:	697b      	ldr	r3, [r7, #20]
 801c482:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c484:	693b      	ldr	r3, [r7, #16]
 801c486:	f383 8810 	msr	PRIMASK, r3
}
 801c48a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c48c:	bf00      	nop
}
 801c48e:	371c      	adds	r7, #28
 801c490:	46bd      	mov	sp, r7
 801c492:	bc80      	pop	{r7}
 801c494:	4770      	bx	lr
 801c496:	bf00      	nop
 801c498:	20001d0c 	.word	0x20001d0c
 801c49c:	20001d2c 	.word	0x20001d2c

0801c4a0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c4a0:	b480      	push	{r7}
 801c4a2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c4a4:	bf00      	nop
}
 801c4a6:	46bd      	mov	sp, r7
 801c4a8:	bc80      	pop	{r7}
 801c4aa:	4770      	bx	lr

0801c4ac <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c4ac:	b480      	push	{r7}
 801c4ae:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c4b0:	bf00      	nop
}
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	bc80      	pop	{r7}
 801c4b6:	4770      	bx	lr

0801c4b8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c4b8:	b480      	push	{r7}
 801c4ba:	b085      	sub	sp, #20
 801c4bc:	af00      	add	r7, sp, #0
 801c4be:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c4c0:	2300      	movs	r3, #0
 801c4c2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c4c8:	68bb      	ldr	r3, [r7, #8]
 801c4ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c4ce:	d204      	bcs.n	801c4da <SEQ_BitPosition+0x22>
 801c4d0:	2310      	movs	r3, #16
 801c4d2:	73fb      	strb	r3, [r7, #15]
 801c4d4:	68bb      	ldr	r3, [r7, #8]
 801c4d6:	041b      	lsls	r3, r3, #16
 801c4d8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c4da:	68bb      	ldr	r3, [r7, #8]
 801c4dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c4e0:	d205      	bcs.n	801c4ee <SEQ_BitPosition+0x36>
 801c4e2:	7bfb      	ldrb	r3, [r7, #15]
 801c4e4:	3308      	adds	r3, #8
 801c4e6:	73fb      	strb	r3, [r7, #15]
 801c4e8:	68bb      	ldr	r3, [r7, #8]
 801c4ea:	021b      	lsls	r3, r3, #8
 801c4ec:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c4ee:	68bb      	ldr	r3, [r7, #8]
 801c4f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c4f4:	d205      	bcs.n	801c502 <SEQ_BitPosition+0x4a>
 801c4f6:	7bfb      	ldrb	r3, [r7, #15]
 801c4f8:	3304      	adds	r3, #4
 801c4fa:	73fb      	strb	r3, [r7, #15]
 801c4fc:	68bb      	ldr	r3, [r7, #8]
 801c4fe:	011b      	lsls	r3, r3, #4
 801c500:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c502:	68bb      	ldr	r3, [r7, #8]
 801c504:	0f1b      	lsrs	r3, r3, #28
 801c506:	4a07      	ldr	r2, [pc, #28]	@ (801c524 <SEQ_BitPosition+0x6c>)
 801c508:	5cd2      	ldrb	r2, [r2, r3]
 801c50a:	7bfb      	ldrb	r3, [r7, #15]
 801c50c:	4413      	add	r3, r2
 801c50e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c510:	7bfb      	ldrb	r3, [r7, #15]
 801c512:	f1c3 031f 	rsb	r3, r3, #31
 801c516:	b2db      	uxtb	r3, r3
}
 801c518:	4618      	mov	r0, r3
 801c51a:	3714      	adds	r7, #20
 801c51c:	46bd      	mov	sp, r7
 801c51e:	bc80      	pop	{r7}
 801c520:	4770      	bx	lr
 801c522:	bf00      	nop
 801c524:	0801e054 	.word	0x0801e054

0801c528 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c528:	b580      	push	{r7, lr}
 801c52a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c52c:	4b04      	ldr	r3, [pc, #16]	@ (801c540 <UTIL_TIMER_Init+0x18>)
 801c52e:	2200      	movs	r2, #0
 801c530:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c532:	4b04      	ldr	r3, [pc, #16]	@ (801c544 <UTIL_TIMER_Init+0x1c>)
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	4798      	blx	r3
 801c538:	4603      	mov	r3, r0
}
 801c53a:	4618      	mov	r0, r3
 801c53c:	bd80      	pop	{r7, pc}
 801c53e:	bf00      	nop
 801c540:	20001d34 	.word	0x20001d34
 801c544:	0801dad0 	.word	0x0801dad0

0801c548 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	b084      	sub	sp, #16
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	60f8      	str	r0, [r7, #12]
 801c550:	60b9      	str	r1, [r7, #8]
 801c552:	603b      	str	r3, [r7, #0]
 801c554:	4613      	mov	r3, r2
 801c556:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d023      	beq.n	801c5a6 <UTIL_TIMER_Create+0x5e>
 801c55e:	683b      	ldr	r3, [r7, #0]
 801c560:	2b00      	cmp	r3, #0
 801c562:	d020      	beq.n	801c5a6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	2200      	movs	r2, #0
 801c568:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c56a:	4b11      	ldr	r3, [pc, #68]	@ (801c5b0 <UTIL_TIMER_Create+0x68>)
 801c56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c56e:	68b8      	ldr	r0, [r7, #8]
 801c570:	4798      	blx	r3
 801c572:	4602      	mov	r2, r0
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	2200      	movs	r2, #0
 801c57c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	2200      	movs	r2, #0
 801c582:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	2200      	movs	r2, #0
 801c588:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	683a      	ldr	r2, [r7, #0]
 801c58e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	69ba      	ldr	r2, [r7, #24]
 801c594:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	79fa      	ldrb	r2, [r7, #7]
 801c59a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	2200      	movs	r2, #0
 801c5a0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c5a2:	2300      	movs	r3, #0
 801c5a4:	e000      	b.n	801c5a8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c5a6:	2301      	movs	r3, #1
  }
}
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	3710      	adds	r7, #16
 801c5ac:	46bd      	mov	sp, r7
 801c5ae:	bd80      	pop	{r7, pc}
 801c5b0:	0801dad0 	.word	0x0801dad0

0801c5b4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c5b4:	b580      	push	{r7, lr}
 801c5b6:	b08a      	sub	sp, #40	@ 0x28
 801c5b8:	af00      	add	r7, sp, #0
 801c5ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c5bc:	2300      	movs	r3, #0
 801c5be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d056      	beq.n	801c676 <UTIL_TIMER_Start+0xc2>
 801c5c8:	6878      	ldr	r0, [r7, #4]
 801c5ca:	f000 f9a9 	bl	801c920 <TimerExists>
 801c5ce:	4603      	mov	r3, r0
 801c5d0:	f083 0301 	eor.w	r3, r3, #1
 801c5d4:	b2db      	uxtb	r3, r3
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d04d      	beq.n	801c676 <UTIL_TIMER_Start+0xc2>
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	7a5b      	ldrb	r3, [r3, #9]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d149      	bne.n	801c676 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5e2:	f3ef 8310 	mrs	r3, PRIMASK
 801c5e6:	613b      	str	r3, [r7, #16]
  return(result);
 801c5e8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c5ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5ec:	b672      	cpsid	i
}
 801c5ee:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	685b      	ldr	r3, [r3, #4]
 801c5f4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c5f6:	4b24      	ldr	r3, [pc, #144]	@ (801c688 <UTIL_TIMER_Start+0xd4>)
 801c5f8:	6a1b      	ldr	r3, [r3, #32]
 801c5fa:	4798      	blx	r3
 801c5fc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c5fe:	6a3a      	ldr	r2, [r7, #32]
 801c600:	69bb      	ldr	r3, [r7, #24]
 801c602:	429a      	cmp	r2, r3
 801c604:	d201      	bcs.n	801c60a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c606:	69bb      	ldr	r3, [r7, #24]
 801c608:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	6a3a      	ldr	r2, [r7, #32]
 801c60e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	2200      	movs	r2, #0
 801c614:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	2201      	movs	r2, #1
 801c61a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	2200      	movs	r2, #0
 801c620:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c622:	4b1a      	ldr	r3, [pc, #104]	@ (801c68c <UTIL_TIMER_Start+0xd8>)
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d106      	bne.n	801c638 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c62a:	4b17      	ldr	r3, [pc, #92]	@ (801c688 <UTIL_TIMER_Start+0xd4>)
 801c62c:	691b      	ldr	r3, [r3, #16]
 801c62e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c630:	6878      	ldr	r0, [r7, #4]
 801c632:	f000 f9eb 	bl	801ca0c <TimerInsertNewHeadTimer>
 801c636:	e017      	b.n	801c668 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c638:	4b13      	ldr	r3, [pc, #76]	@ (801c688 <UTIL_TIMER_Start+0xd4>)
 801c63a:	699b      	ldr	r3, [r3, #24]
 801c63c:	4798      	blx	r3
 801c63e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	681a      	ldr	r2, [r3, #0]
 801c644:	697b      	ldr	r3, [r7, #20]
 801c646:	441a      	add	r2, r3
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	681a      	ldr	r2, [r3, #0]
 801c650:	4b0e      	ldr	r3, [pc, #56]	@ (801c68c <UTIL_TIMER_Start+0xd8>)
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	429a      	cmp	r2, r3
 801c658:	d203      	bcs.n	801c662 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c65a:	6878      	ldr	r0, [r7, #4]
 801c65c:	f000 f9d6 	bl	801ca0c <TimerInsertNewHeadTimer>
 801c660:	e002      	b.n	801c668 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c662:	6878      	ldr	r0, [r7, #4]
 801c664:	f000 f9a2 	bl	801c9ac <TimerInsertTimer>
 801c668:	69fb      	ldr	r3, [r7, #28]
 801c66a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	f383 8810 	msr	PRIMASK, r3
}
 801c672:	bf00      	nop
  {
 801c674:	e002      	b.n	801c67c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c676:	2301      	movs	r3, #1
 801c678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801c67c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801c680:	4618      	mov	r0, r3
 801c682:	3728      	adds	r7, #40	@ 0x28
 801c684:	46bd      	mov	sp, r7
 801c686:	bd80      	pop	{r7, pc}
 801c688:	0801dad0 	.word	0x0801dad0
 801c68c:	20001d34 	.word	0x20001d34

0801c690 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c690:	b580      	push	{r7, lr}
 801c692:	b088      	sub	sp, #32
 801c694:	af00      	add	r7, sp, #0
 801c696:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c698:	2300      	movs	r3, #0
 801c69a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d05b      	beq.n	801c75a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c6a2:	f3ef 8310 	mrs	r3, PRIMASK
 801c6a6:	60fb      	str	r3, [r7, #12]
  return(result);
 801c6a8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c6aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c6ac:	b672      	cpsid	i
}
 801c6ae:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c6b0:	4b2d      	ldr	r3, [pc, #180]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c6b6:	4b2c      	ldr	r3, [pc, #176]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	2201      	movs	r2, #1
 801c6c0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c6c2:	4b29      	ldr	r3, [pc, #164]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d041      	beq.n	801c74e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c6d0:	4b25      	ldr	r3, [pc, #148]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	687a      	ldr	r2, [r7, #4]
 801c6d6:	429a      	cmp	r2, r3
 801c6d8:	d134      	bne.n	801c744 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c6da:	4b23      	ldr	r3, [pc, #140]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	2200      	movs	r2, #0
 801c6e0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c6e2:	4b21      	ldr	r3, [pc, #132]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	695b      	ldr	r3, [r3, #20]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d00a      	beq.n	801c702 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c6ec:	4b1e      	ldr	r3, [pc, #120]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	695b      	ldr	r3, [r3, #20]
 801c6f2:	4a1d      	ldr	r2, [pc, #116]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c6f4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c6f6:	4b1c      	ldr	r3, [pc, #112]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c6f8:	681b      	ldr	r3, [r3, #0]
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	f000 f92c 	bl	801c958 <TimerSetTimeout>
 801c700:	e023      	b.n	801c74a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c702:	4b1a      	ldr	r3, [pc, #104]	@ (801c76c <UTIL_TIMER_Stop+0xdc>)
 801c704:	68db      	ldr	r3, [r3, #12]
 801c706:	4798      	blx	r3
            TimerListHead = NULL;
 801c708:	4b17      	ldr	r3, [pc, #92]	@ (801c768 <UTIL_TIMER_Stop+0xd8>)
 801c70a:	2200      	movs	r2, #0
 801c70c:	601a      	str	r2, [r3, #0]
 801c70e:	e01c      	b.n	801c74a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c710:	697a      	ldr	r2, [r7, #20]
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	429a      	cmp	r2, r3
 801c716:	d110      	bne.n	801c73a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c718:	697b      	ldr	r3, [r7, #20]
 801c71a:	695b      	ldr	r3, [r3, #20]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d006      	beq.n	801c72e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c720:	697b      	ldr	r3, [r7, #20]
 801c722:	695b      	ldr	r3, [r3, #20]
 801c724:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c726:	69bb      	ldr	r3, [r7, #24]
 801c728:	697a      	ldr	r2, [r7, #20]
 801c72a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c72c:	e00d      	b.n	801c74a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c72e:	2300      	movs	r3, #0
 801c730:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c732:	69bb      	ldr	r3, [r7, #24]
 801c734:	697a      	ldr	r2, [r7, #20]
 801c736:	615a      	str	r2, [r3, #20]
            break;
 801c738:	e007      	b.n	801c74a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c73a:	697b      	ldr	r3, [r7, #20]
 801c73c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c73e:	697b      	ldr	r3, [r7, #20]
 801c740:	695b      	ldr	r3, [r3, #20]
 801c742:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c744:	697b      	ldr	r3, [r7, #20]
 801c746:	2b00      	cmp	r3, #0
 801c748:	d1e2      	bne.n	801c710 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c74a:	2300      	movs	r3, #0
 801c74c:	77fb      	strb	r3, [r7, #31]
 801c74e:	693b      	ldr	r3, [r7, #16]
 801c750:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c752:	68bb      	ldr	r3, [r7, #8]
 801c754:	f383 8810 	msr	PRIMASK, r3
}
 801c758:	e001      	b.n	801c75e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c75a:	2301      	movs	r3, #1
 801c75c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c75e:	7ffb      	ldrb	r3, [r7, #31]
}
 801c760:	4618      	mov	r0, r3
 801c762:	3720      	adds	r7, #32
 801c764:	46bd      	mov	sp, r7
 801c766:	bd80      	pop	{r7, pc}
 801c768:	20001d34 	.word	0x20001d34
 801c76c:	0801dad0 	.word	0x0801dad0

0801c770 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b084      	sub	sp, #16
 801c774:	af00      	add	r7, sp, #0
 801c776:	6078      	str	r0, [r7, #4]
 801c778:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c77a:	2300      	movs	r3, #0
 801c77c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d102      	bne.n	801c78a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c784:	2301      	movs	r3, #1
 801c786:	73fb      	strb	r3, [r7, #15]
 801c788:	e014      	b.n	801c7b4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c78a:	4b0d      	ldr	r3, [pc, #52]	@ (801c7c0 <UTIL_TIMER_SetPeriod+0x50>)
 801c78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c78e:	6838      	ldr	r0, [r7, #0]
 801c790:	4798      	blx	r3
 801c792:	4602      	mov	r2, r0
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c798:	6878      	ldr	r0, [r7, #4]
 801c79a:	f000 f8c1 	bl	801c920 <TimerExists>
 801c79e:	4603      	mov	r3, r0
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d007      	beq.n	801c7b4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c7a4:	6878      	ldr	r0, [r7, #4]
 801c7a6:	f7ff ff73 	bl	801c690 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c7aa:	6878      	ldr	r0, [r7, #4]
 801c7ac:	f7ff ff02 	bl	801c5b4 <UTIL_TIMER_Start>
 801c7b0:	4603      	mov	r3, r0
 801c7b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801c7b6:	4618      	mov	r0, r3
 801c7b8:	3710      	adds	r7, #16
 801c7ba:	46bd      	mov	sp, r7
 801c7bc:	bd80      	pop	{r7, pc}
 801c7be:	bf00      	nop
 801c7c0:	0801dad0 	.word	0x0801dad0

0801c7c4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c7c4:	b590      	push	{r4, r7, lr}
 801c7c6:	b089      	sub	sp, #36	@ 0x24
 801c7c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7ca:	f3ef 8310 	mrs	r3, PRIMASK
 801c7ce:	60bb      	str	r3, [r7, #8]
  return(result);
 801c7d0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c7d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7d4:	b672      	cpsid	i
}
 801c7d6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c7d8:	4b38      	ldr	r3, [pc, #224]	@ (801c8bc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c7da:	695b      	ldr	r3, [r3, #20]
 801c7dc:	4798      	blx	r3
 801c7de:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c7e0:	4b36      	ldr	r3, [pc, #216]	@ (801c8bc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c7e2:	691b      	ldr	r3, [r3, #16]
 801c7e4:	4798      	blx	r3
 801c7e6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c7e8:	693a      	ldr	r2, [r7, #16]
 801c7ea:	697b      	ldr	r3, [r7, #20]
 801c7ec:	1ad3      	subs	r3, r2, r3
 801c7ee:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c7f0:	4b33      	ldr	r3, [pc, #204]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d037      	beq.n	801c868 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c7f8:	4b31      	ldr	r3, [pc, #196]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c7fe:	69fb      	ldr	r3, [r7, #28]
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	68fa      	ldr	r2, [r7, #12]
 801c804:	429a      	cmp	r2, r3
 801c806:	d206      	bcs.n	801c816 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c808:	69fb      	ldr	r3, [r7, #28]
 801c80a:	681a      	ldr	r2, [r3, #0]
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	1ad2      	subs	r2, r2, r3
 801c810:	69fb      	ldr	r3, [r7, #28]
 801c812:	601a      	str	r2, [r3, #0]
 801c814:	e002      	b.n	801c81c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c816:	69fb      	ldr	r3, [r7, #28]
 801c818:	2200      	movs	r2, #0
 801c81a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c81c:	69fb      	ldr	r3, [r7, #28]
 801c81e:	695b      	ldr	r3, [r3, #20]
 801c820:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c822:	69fb      	ldr	r3, [r7, #28]
 801c824:	2b00      	cmp	r3, #0
 801c826:	d1ea      	bne.n	801c7fe <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c828:	e01e      	b.n	801c868 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c82a:	4b25      	ldr	r3, [pc, #148]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c830:	4b23      	ldr	r3, [pc, #140]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	695b      	ldr	r3, [r3, #20]
 801c836:	4a22      	ldr	r2, [pc, #136]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c838:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c83a:	69fb      	ldr	r3, [r7, #28]
 801c83c:	2200      	movs	r2, #0
 801c83e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c840:	69fb      	ldr	r3, [r7, #28]
 801c842:	2200      	movs	r2, #0
 801c844:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c846:	69fb      	ldr	r3, [r7, #28]
 801c848:	68db      	ldr	r3, [r3, #12]
 801c84a:	69fa      	ldr	r2, [r7, #28]
 801c84c:	6912      	ldr	r2, [r2, #16]
 801c84e:	4610      	mov	r0, r2
 801c850:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c852:	69fb      	ldr	r3, [r7, #28]
 801c854:	7adb      	ldrb	r3, [r3, #11]
 801c856:	2b01      	cmp	r3, #1
 801c858:	d106      	bne.n	801c868 <UTIL_TIMER_IRQ_Handler+0xa4>
 801c85a:	69fb      	ldr	r3, [r7, #28]
 801c85c:	7a9b      	ldrb	r3, [r3, #10]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d102      	bne.n	801c868 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c862:	69f8      	ldr	r0, [r7, #28]
 801c864:	f7ff fea6 	bl	801c5b4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c868:	4b15      	ldr	r3, [pc, #84]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d00d      	beq.n	801c88c <UTIL_TIMER_IRQ_Handler+0xc8>
 801c870:	4b13      	ldr	r3, [pc, #76]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	2b00      	cmp	r3, #0
 801c878:	d0d7      	beq.n	801c82a <UTIL_TIMER_IRQ_Handler+0x66>
 801c87a:	4b11      	ldr	r3, [pc, #68]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	681c      	ldr	r4, [r3, #0]
 801c880:	4b0e      	ldr	r3, [pc, #56]	@ (801c8bc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c882:	699b      	ldr	r3, [r3, #24]
 801c884:	4798      	blx	r3
 801c886:	4603      	mov	r3, r0
 801c888:	429c      	cmp	r4, r3
 801c88a:	d3ce      	bcc.n	801c82a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c88c:	4b0c      	ldr	r3, [pc, #48]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	2b00      	cmp	r3, #0
 801c892:	d009      	beq.n	801c8a8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801c894:	4b0a      	ldr	r3, [pc, #40]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	7a1b      	ldrb	r3, [r3, #8]
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d104      	bne.n	801c8a8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801c89e:	4b08      	ldr	r3, [pc, #32]	@ (801c8c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	4618      	mov	r0, r3
 801c8a4:	f000 f858 	bl	801c958 <TimerSetTimeout>
 801c8a8:	69bb      	ldr	r3, [r7, #24]
 801c8aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	f383 8810 	msr	PRIMASK, r3
}
 801c8b2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c8b4:	bf00      	nop
 801c8b6:	3724      	adds	r7, #36	@ 0x24
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	bd90      	pop	{r4, r7, pc}
 801c8bc:	0801dad0 	.word	0x0801dad0
 801c8c0:	20001d34 	.word	0x20001d34

0801c8c4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	b082      	sub	sp, #8
 801c8c8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c8ca:	4b06      	ldr	r3, [pc, #24]	@ (801c8e4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c8cc:	69db      	ldr	r3, [r3, #28]
 801c8ce:	4798      	blx	r3
 801c8d0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c8d2:	4b04      	ldr	r3, [pc, #16]	@ (801c8e4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c8d6:	6878      	ldr	r0, [r7, #4]
 801c8d8:	4798      	blx	r3
 801c8da:	4603      	mov	r3, r0
}
 801c8dc:	4618      	mov	r0, r3
 801c8de:	3708      	adds	r7, #8
 801c8e0:	46bd      	mov	sp, r7
 801c8e2:	bd80      	pop	{r7, pc}
 801c8e4:	0801dad0 	.word	0x0801dad0

0801c8e8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c8e8:	b580      	push	{r7, lr}
 801c8ea:	b084      	sub	sp, #16
 801c8ec:	af00      	add	r7, sp, #0
 801c8ee:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c8f0:	4b0a      	ldr	r3, [pc, #40]	@ (801c91c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c8f2:	69db      	ldr	r3, [r3, #28]
 801c8f4:	4798      	blx	r3
 801c8f6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c8f8:	4b08      	ldr	r3, [pc, #32]	@ (801c91c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c8fc:	6878      	ldr	r0, [r7, #4]
 801c8fe:	4798      	blx	r3
 801c900:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c902:	4b06      	ldr	r3, [pc, #24]	@ (801c91c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c906:	68f9      	ldr	r1, [r7, #12]
 801c908:	68ba      	ldr	r2, [r7, #8]
 801c90a:	1a8a      	subs	r2, r1, r2
 801c90c:	4610      	mov	r0, r2
 801c90e:	4798      	blx	r3
 801c910:	4603      	mov	r3, r0
}
 801c912:	4618      	mov	r0, r3
 801c914:	3710      	adds	r7, #16
 801c916:	46bd      	mov	sp, r7
 801c918:	bd80      	pop	{r7, pc}
 801c91a:	bf00      	nop
 801c91c:	0801dad0 	.word	0x0801dad0

0801c920 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c920:	b480      	push	{r7}
 801c922:	b085      	sub	sp, #20
 801c924:	af00      	add	r7, sp, #0
 801c926:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c928:	4b0a      	ldr	r3, [pc, #40]	@ (801c954 <TimerExists+0x34>)
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c92e:	e008      	b.n	801c942 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c930:	68fa      	ldr	r2, [r7, #12]
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	429a      	cmp	r2, r3
 801c936:	d101      	bne.n	801c93c <TimerExists+0x1c>
    {
      return true;
 801c938:	2301      	movs	r3, #1
 801c93a:	e006      	b.n	801c94a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	695b      	ldr	r3, [r3, #20]
 801c940:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	2b00      	cmp	r3, #0
 801c946:	d1f3      	bne.n	801c930 <TimerExists+0x10>
  }
  return false;
 801c948:	2300      	movs	r3, #0
}
 801c94a:	4618      	mov	r0, r3
 801c94c:	3714      	adds	r7, #20
 801c94e:	46bd      	mov	sp, r7
 801c950:	bc80      	pop	{r7}
 801c952:	4770      	bx	lr
 801c954:	20001d34 	.word	0x20001d34

0801c958 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c958:	b590      	push	{r4, r7, lr}
 801c95a:	b085      	sub	sp, #20
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c960:	4b11      	ldr	r3, [pc, #68]	@ (801c9a8 <TimerSetTimeout+0x50>)
 801c962:	6a1b      	ldr	r3, [r3, #32]
 801c964:	4798      	blx	r3
 801c966:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	2201      	movs	r2, #1
 801c96c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	681c      	ldr	r4, [r3, #0]
 801c972:	4b0d      	ldr	r3, [pc, #52]	@ (801c9a8 <TimerSetTimeout+0x50>)
 801c974:	699b      	ldr	r3, [r3, #24]
 801c976:	4798      	blx	r3
 801c978:	4602      	mov	r2, r0
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	4413      	add	r3, r2
 801c97e:	429c      	cmp	r4, r3
 801c980:	d207      	bcs.n	801c992 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c982:	4b09      	ldr	r3, [pc, #36]	@ (801c9a8 <TimerSetTimeout+0x50>)
 801c984:	699b      	ldr	r3, [r3, #24]
 801c986:	4798      	blx	r3
 801c988:	4602      	mov	r2, r0
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	441a      	add	r2, r3
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c992:	4b05      	ldr	r3, [pc, #20]	@ (801c9a8 <TimerSetTimeout+0x50>)
 801c994:	689b      	ldr	r3, [r3, #8]
 801c996:	687a      	ldr	r2, [r7, #4]
 801c998:	6812      	ldr	r2, [r2, #0]
 801c99a:	4610      	mov	r0, r2
 801c99c:	4798      	blx	r3
}
 801c99e:	bf00      	nop
 801c9a0:	3714      	adds	r7, #20
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	bd90      	pop	{r4, r7, pc}
 801c9a6:	bf00      	nop
 801c9a8:	0801dad0 	.word	0x0801dad0

0801c9ac <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c9ac:	b480      	push	{r7}
 801c9ae:	b085      	sub	sp, #20
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c9b4:	4b14      	ldr	r3, [pc, #80]	@ (801ca08 <TimerInsertTimer+0x5c>)
 801c9b6:	681b      	ldr	r3, [r3, #0]
 801c9b8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c9ba:	4b13      	ldr	r3, [pc, #76]	@ (801ca08 <TimerInsertTimer+0x5c>)
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	695b      	ldr	r3, [r3, #20]
 801c9c0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c9c2:	e012      	b.n	801c9ea <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	681a      	ldr	r2, [r3, #0]
 801c9c8:	68bb      	ldr	r3, [r7, #8]
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	429a      	cmp	r2, r3
 801c9ce:	d905      	bls.n	801c9dc <TimerInsertTimer+0x30>
    {
        cur = next;
 801c9d0:	68bb      	ldr	r3, [r7, #8]
 801c9d2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c9d4:	68bb      	ldr	r3, [r7, #8]
 801c9d6:	695b      	ldr	r3, [r3, #20]
 801c9d8:	60bb      	str	r3, [r7, #8]
 801c9da:	e006      	b.n	801c9ea <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	687a      	ldr	r2, [r7, #4]
 801c9e0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	68ba      	ldr	r2, [r7, #8]
 801c9e6:	615a      	str	r2, [r3, #20]
        return;
 801c9e8:	e009      	b.n	801c9fe <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	695b      	ldr	r3, [r3, #20]
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d1e8      	bne.n	801c9c4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	687a      	ldr	r2, [r7, #4]
 801c9f6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	2200      	movs	r2, #0
 801c9fc:	615a      	str	r2, [r3, #20]
}
 801c9fe:	3714      	adds	r7, #20
 801ca00:	46bd      	mov	sp, r7
 801ca02:	bc80      	pop	{r7}
 801ca04:	4770      	bx	lr
 801ca06:	bf00      	nop
 801ca08:	20001d34 	.word	0x20001d34

0801ca0c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ca0c:	b580      	push	{r7, lr}
 801ca0e:	b084      	sub	sp, #16
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ca14:	4b0b      	ldr	r3, [pc, #44]	@ (801ca44 <TimerInsertNewHeadTimer+0x38>)
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d002      	beq.n	801ca26 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	2200      	movs	r2, #0
 801ca24:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	68fa      	ldr	r2, [r7, #12]
 801ca2a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ca2c:	4a05      	ldr	r2, [pc, #20]	@ (801ca44 <TimerInsertNewHeadTimer+0x38>)
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801ca32:	4b04      	ldr	r3, [pc, #16]	@ (801ca44 <TimerInsertNewHeadTimer+0x38>)
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	4618      	mov	r0, r3
 801ca38:	f7ff ff8e 	bl	801c958 <TimerSetTimeout>
}
 801ca3c:	bf00      	nop
 801ca3e:	3710      	adds	r7, #16
 801ca40:	46bd      	mov	sp, r7
 801ca42:	bd80      	pop	{r7, pc}
 801ca44:	20001d34 	.word	0x20001d34

0801ca48 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801ca48:	b580      	push	{r7, lr}
 801ca4a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801ca4c:	2218      	movs	r2, #24
 801ca4e:	2100      	movs	r1, #0
 801ca50:	4807      	ldr	r0, [pc, #28]	@ (801ca70 <UTIL_ADV_TRACE_Init+0x28>)
 801ca52:	f7ff f862 	bl	801bb1a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801ca56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801ca5a:	2100      	movs	r1, #0
 801ca5c:	4805      	ldr	r0, [pc, #20]	@ (801ca74 <UTIL_ADV_TRACE_Init+0x2c>)
 801ca5e:	f7ff f85c 	bl	801bb1a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801ca62:	4b05      	ldr	r3, [pc, #20]	@ (801ca78 <UTIL_ADV_TRACE_Init+0x30>)
 801ca64:	681b      	ldr	r3, [r3, #0]
 801ca66:	4805      	ldr	r0, [pc, #20]	@ (801ca7c <UTIL_ADV_TRACE_Init+0x34>)
 801ca68:	4798      	blx	r3
 801ca6a:	4603      	mov	r3, r0
}
 801ca6c:	4618      	mov	r0, r3
 801ca6e:	bd80      	pop	{r7, pc}
 801ca70:	20001d38 	.word	0x20001d38
 801ca74:	20001d50 	.word	0x20001d50
 801ca78:	0801db10 	.word	0x0801db10
 801ca7c:	0801cce9 	.word	0x0801cce9

0801ca80 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ca80:	b480      	push	{r7}
 801ca82:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ca84:	4b06      	ldr	r3, [pc, #24]	@ (801caa0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ca86:	8a5a      	ldrh	r2, [r3, #18]
 801ca88:	4b05      	ldr	r3, [pc, #20]	@ (801caa0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ca8a:	8a1b      	ldrh	r3, [r3, #16]
 801ca8c:	429a      	cmp	r2, r3
 801ca8e:	d101      	bne.n	801ca94 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801ca90:	2301      	movs	r3, #1
 801ca92:	e000      	b.n	801ca96 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801ca94:	2300      	movs	r3, #0
}
 801ca96:	4618      	mov	r0, r3
 801ca98:	46bd      	mov	sp, r7
 801ca9a:	bc80      	pop	{r7}
 801ca9c:	4770      	bx	lr
 801ca9e:	bf00      	nop
 801caa0:	20001d38 	.word	0x20001d38

0801caa4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801caa4:	b408      	push	{r3}
 801caa6:	b580      	push	{r7, lr}
 801caa8:	b08d      	sub	sp, #52	@ 0x34
 801caaa:	af00      	add	r7, sp, #0
 801caac:	60f8      	str	r0, [r7, #12]
 801caae:	60b9      	str	r1, [r7, #8]
 801cab0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801cab2:	2300      	movs	r3, #0
 801cab4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801cab6:	2300      	movs	r3, #0
 801cab8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801caba:	4b37      	ldr	r3, [pc, #220]	@ (801cb98 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cabc:	7a1b      	ldrb	r3, [r3, #8]
 801cabe:	461a      	mov	r2, r3
 801cac0:	68fb      	ldr	r3, [r7, #12]
 801cac2:	4293      	cmp	r3, r2
 801cac4:	d902      	bls.n	801cacc <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801cac6:	f06f 0304 	mvn.w	r3, #4
 801caca:	e05e      	b.n	801cb8a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801cacc:	4b32      	ldr	r3, [pc, #200]	@ (801cb98 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cace:	68da      	ldr	r2, [r3, #12]
 801cad0:	68bb      	ldr	r3, [r7, #8]
 801cad2:	4013      	ands	r3, r2
 801cad4:	68ba      	ldr	r2, [r7, #8]
 801cad6:	429a      	cmp	r2, r3
 801cad8:	d002      	beq.n	801cae0 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801cada:	f06f 0305 	mvn.w	r3, #5
 801cade:	e054      	b.n	801cb8a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801cae0:	4b2d      	ldr	r3, [pc, #180]	@ (801cb98 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cae2:	685b      	ldr	r3, [r3, #4]
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d00a      	beq.n	801cafe <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	2b00      	cmp	r3, #0
 801caec:	d007      	beq.n	801cafe <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801caee:	4b2a      	ldr	r3, [pc, #168]	@ (801cb98 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801caf0:	685b      	ldr	r3, [r3, #4]
 801caf2:	f107 0116 	add.w	r1, r7, #22
 801caf6:	f107 0218 	add.w	r2, r7, #24
 801cafa:	4610      	mov	r0, r2
 801cafc:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801cafe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801cb02:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cb08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cb0c:	4823      	ldr	r0, [pc, #140]	@ (801cb9c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801cb0e:	f7ff fa2b 	bl	801bf68 <tiny_vsnprintf_like>
 801cb12:	4603      	mov	r3, r0
 801cb14:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801cb16:	f000 f9f1 	bl	801cefc <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801cb1a:	8afa      	ldrh	r2, [r7, #22]
 801cb1c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801cb1e:	4413      	add	r3, r2
 801cb20:	b29b      	uxth	r3, r3
 801cb22:	f107 0214 	add.w	r2, r7, #20
 801cb26:	4611      	mov	r1, r2
 801cb28:	4618      	mov	r0, r3
 801cb2a:	f000 f969 	bl	801ce00 <TRACE_AllocateBufer>
 801cb2e:	4603      	mov	r3, r0
 801cb30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb34:	d025      	beq.n	801cb82 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801cb36:	2300      	movs	r3, #0
 801cb38:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801cb3a:	e00e      	b.n	801cb5a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801cb3c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cb3e:	8aba      	ldrh	r2, [r7, #20]
 801cb40:	3330      	adds	r3, #48	@ 0x30
 801cb42:	443b      	add	r3, r7
 801cb44:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801cb48:	4b15      	ldr	r3, [pc, #84]	@ (801cba0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801cb4a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801cb4c:	8abb      	ldrh	r3, [r7, #20]
 801cb4e:	3301      	adds	r3, #1
 801cb50:	b29b      	uxth	r3, r3
 801cb52:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801cb54:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cb56:	3301      	adds	r3, #1
 801cb58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801cb5a:	8afb      	ldrh	r3, [r7, #22]
 801cb5c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cb5e:	429a      	cmp	r2, r3
 801cb60:	d3ec      	bcc.n	801cb3c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cb62:	8abb      	ldrh	r3, [r7, #20]
 801cb64:	461a      	mov	r2, r3
 801cb66:	4b0e      	ldr	r3, [pc, #56]	@ (801cba0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801cb68:	18d0      	adds	r0, r2, r3
 801cb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cb6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cb72:	f7ff f9f9 	bl	801bf68 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801cb76:	f000 f9df 	bl	801cf38 <TRACE_UnLock>

    return TRACE_Send();
 801cb7a:	f000 f831 	bl	801cbe0 <TRACE_Send>
 801cb7e:	4603      	mov	r3, r0
 801cb80:	e003      	b.n	801cb8a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801cb82:	f000 f9d9 	bl	801cf38 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801cb86:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801cb8a:	4618      	mov	r0, r3
 801cb8c:	3734      	adds	r7, #52	@ 0x34
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cb94:	b001      	add	sp, #4
 801cb96:	4770      	bx	lr
 801cb98:	20001d38 	.word	0x20001d38
 801cb9c:	20002150 	.word	0x20002150
 801cba0:	20001d50 	.word	0x20001d50

0801cba4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801cba4:	b480      	push	{r7}
 801cba6:	b083      	sub	sp, #12
 801cba8:	af00      	add	r7, sp, #0
 801cbaa:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801cbac:	4a03      	ldr	r2, [pc, #12]	@ (801cbbc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	6053      	str	r3, [r2, #4]
}
 801cbb2:	bf00      	nop
 801cbb4:	370c      	adds	r7, #12
 801cbb6:	46bd      	mov	sp, r7
 801cbb8:	bc80      	pop	{r7}
 801cbba:	4770      	bx	lr
 801cbbc:	20001d38 	.word	0x20001d38

0801cbc0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801cbc0:	b480      	push	{r7}
 801cbc2:	b083      	sub	sp, #12
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	4603      	mov	r3, r0
 801cbc8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801cbca:	4a04      	ldr	r2, [pc, #16]	@ (801cbdc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801cbcc:	79fb      	ldrb	r3, [r7, #7]
 801cbce:	7213      	strb	r3, [r2, #8]
}
 801cbd0:	bf00      	nop
 801cbd2:	370c      	adds	r7, #12
 801cbd4:	46bd      	mov	sp, r7
 801cbd6:	bc80      	pop	{r7}
 801cbd8:	4770      	bx	lr
 801cbda:	bf00      	nop
 801cbdc:	20001d38 	.word	0x20001d38

0801cbe0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b088      	sub	sp, #32
 801cbe4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801cbe6:	2300      	movs	r3, #0
 801cbe8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801cbea:	2300      	movs	r3, #0
 801cbec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbee:	f3ef 8310 	mrs	r3, PRIMASK
 801cbf2:	613b      	str	r3, [r7, #16]
  return(result);
 801cbf4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cbf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cbf8:	b672      	cpsid	i
}
 801cbfa:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801cbfc:	f000 f9ba 	bl	801cf74 <TRACE_IsLocked>
 801cc00:	4603      	mov	r3, r0
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d15d      	bne.n	801ccc2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801cc06:	f000 f979 	bl	801cefc <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801cc0a:	4b34      	ldr	r3, [pc, #208]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc0c:	8a1a      	ldrh	r2, [r3, #16]
 801cc0e:	4b33      	ldr	r3, [pc, #204]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc10:	8a5b      	ldrh	r3, [r3, #18]
 801cc12:	429a      	cmp	r2, r3
 801cc14:	d04d      	beq.n	801ccb2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cc16:	4b31      	ldr	r3, [pc, #196]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc18:	789b      	ldrb	r3, [r3, #2]
 801cc1a:	2b01      	cmp	r3, #1
 801cc1c:	d117      	bne.n	801cc4e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801cc1e:	4b2f      	ldr	r3, [pc, #188]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc20:	881a      	ldrh	r2, [r3, #0]
 801cc22:	4b2e      	ldr	r3, [pc, #184]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc24:	8a1b      	ldrh	r3, [r3, #16]
 801cc26:	1ad3      	subs	r3, r2, r3
 801cc28:	b29a      	uxth	r2, r3
 801cc2a:	4b2c      	ldr	r3, [pc, #176]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc2c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cc2e:	4b2b      	ldr	r3, [pc, #172]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc30:	2202      	movs	r2, #2
 801cc32:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cc34:	4b29      	ldr	r3, [pc, #164]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc36:	2200      	movs	r2, #0
 801cc38:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cc3a:	4b28      	ldr	r3, [pc, #160]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc3c:	8a9b      	ldrh	r3, [r3, #20]
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d105      	bne.n	801cc4e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cc42:	4b26      	ldr	r3, [pc, #152]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc44:	2200      	movs	r2, #0
 801cc46:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cc48:	4b24      	ldr	r3, [pc, #144]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cc4e:	4b23      	ldr	r3, [pc, #140]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc50:	789b      	ldrb	r3, [r3, #2]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d115      	bne.n	801cc82 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cc56:	4b21      	ldr	r3, [pc, #132]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc58:	8a5a      	ldrh	r2, [r3, #18]
 801cc5a:	4b20      	ldr	r3, [pc, #128]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc5c:	8a1b      	ldrh	r3, [r3, #16]
 801cc5e:	429a      	cmp	r2, r3
 801cc60:	d908      	bls.n	801cc74 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cc62:	4b1e      	ldr	r3, [pc, #120]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc64:	8a5a      	ldrh	r2, [r3, #18]
 801cc66:	4b1d      	ldr	r3, [pc, #116]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc68:	8a1b      	ldrh	r3, [r3, #16]
 801cc6a:	1ad3      	subs	r3, r2, r3
 801cc6c:	b29a      	uxth	r2, r3
 801cc6e:	4b1b      	ldr	r3, [pc, #108]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc70:	829a      	strh	r2, [r3, #20]
 801cc72:	e006      	b.n	801cc82 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cc74:	4b19      	ldr	r3, [pc, #100]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc76:	8a1b      	ldrh	r3, [r3, #16]
 801cc78:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cc7c:	b29a      	uxth	r2, r3
 801cc7e:	4b17      	ldr	r3, [pc, #92]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc80:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cc82:	4b16      	ldr	r3, [pc, #88]	@ (801ccdc <TRACE_Send+0xfc>)
 801cc84:	8a1b      	ldrh	r3, [r3, #16]
 801cc86:	461a      	mov	r2, r3
 801cc88:	4b15      	ldr	r3, [pc, #84]	@ (801cce0 <TRACE_Send+0x100>)
 801cc8a:	4413      	add	r3, r2
 801cc8c:	61bb      	str	r3, [r7, #24]
 801cc8e:	697b      	ldr	r3, [r7, #20]
 801cc90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	f383 8810 	msr	PRIMASK, r3
}
 801cc98:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801cc9a:	f7e5 fb77 	bl	800238c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cc9e:	4b11      	ldr	r3, [pc, #68]	@ (801cce4 <TRACE_Send+0x104>)
 801cca0:	68db      	ldr	r3, [r3, #12]
 801cca2:	4a0e      	ldr	r2, [pc, #56]	@ (801ccdc <TRACE_Send+0xfc>)
 801cca4:	8a92      	ldrh	r2, [r2, #20]
 801cca6:	4611      	mov	r1, r2
 801cca8:	69b8      	ldr	r0, [r7, #24]
 801ccaa:	4798      	blx	r3
 801ccac:	4603      	mov	r3, r0
 801ccae:	77fb      	strb	r3, [r7, #31]
 801ccb0:	e00d      	b.n	801ccce <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ccb2:	f000 f941 	bl	801cf38 <TRACE_UnLock>
 801ccb6:	697b      	ldr	r3, [r7, #20]
 801ccb8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccba:	68bb      	ldr	r3, [r7, #8]
 801ccbc:	f383 8810 	msr	PRIMASK, r3
}
 801ccc0:	e005      	b.n	801ccce <TRACE_Send+0xee>
 801ccc2:	697b      	ldr	r3, [r7, #20]
 801ccc4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	f383 8810 	msr	PRIMASK, r3
}
 801cccc:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ccce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	3720      	adds	r7, #32
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	bd80      	pop	{r7, pc}
 801ccda:	bf00      	nop
 801ccdc:	20001d38 	.word	0x20001d38
 801cce0:	20001d50 	.word	0x20001d50
 801cce4:	0801db10 	.word	0x0801db10

0801cce8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801cce8:	b580      	push	{r7, lr}
 801ccea:	b088      	sub	sp, #32
 801ccec:	af00      	add	r7, sp, #0
 801ccee:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ccf0:	2300      	movs	r3, #0
 801ccf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccf4:	f3ef 8310 	mrs	r3, PRIMASK
 801ccf8:	617b      	str	r3, [r7, #20]
  return(result);
 801ccfa:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ccfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ccfe:	b672      	cpsid	i
}
 801cd00:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801cd02:	4b3c      	ldr	r3, [pc, #240]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd04:	789b      	ldrb	r3, [r3, #2]
 801cd06:	2b02      	cmp	r3, #2
 801cd08:	d106      	bne.n	801cd18 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cd0a:	4b3a      	ldr	r3, [pc, #232]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cd10:	4b38      	ldr	r3, [pc, #224]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd12:	2200      	movs	r2, #0
 801cd14:	821a      	strh	r2, [r3, #16]
 801cd16:	e00a      	b.n	801cd2e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cd18:	4b36      	ldr	r3, [pc, #216]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd1a:	8a1a      	ldrh	r2, [r3, #16]
 801cd1c:	4b35      	ldr	r3, [pc, #212]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd1e:	8a9b      	ldrh	r3, [r3, #20]
 801cd20:	4413      	add	r3, r2
 801cd22:	b29b      	uxth	r3, r3
 801cd24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cd28:	b29a      	uxth	r2, r3
 801cd2a:	4b32      	ldr	r3, [pc, #200]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd2c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801cd2e:	4b31      	ldr	r3, [pc, #196]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd30:	8a1a      	ldrh	r2, [r3, #16]
 801cd32:	4b30      	ldr	r3, [pc, #192]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd34:	8a5b      	ldrh	r3, [r3, #18]
 801cd36:	429a      	cmp	r2, r3
 801cd38:	d04d      	beq.n	801cdd6 <TRACE_TxCpltCallback+0xee>
 801cd3a:	4b2e      	ldr	r3, [pc, #184]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd3c:	8adb      	ldrh	r3, [r3, #22]
 801cd3e:	2b01      	cmp	r3, #1
 801cd40:	d149      	bne.n	801cdd6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cd42:	4b2c      	ldr	r3, [pc, #176]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd44:	789b      	ldrb	r3, [r3, #2]
 801cd46:	2b01      	cmp	r3, #1
 801cd48:	d117      	bne.n	801cd7a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801cd4a:	4b2a      	ldr	r3, [pc, #168]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd4c:	881a      	ldrh	r2, [r3, #0]
 801cd4e:	4b29      	ldr	r3, [pc, #164]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd50:	8a1b      	ldrh	r3, [r3, #16]
 801cd52:	1ad3      	subs	r3, r2, r3
 801cd54:	b29a      	uxth	r2, r3
 801cd56:	4b27      	ldr	r3, [pc, #156]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd58:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cd5a:	4b26      	ldr	r3, [pc, #152]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd5c:	2202      	movs	r2, #2
 801cd5e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cd60:	4b24      	ldr	r3, [pc, #144]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd62:	2200      	movs	r2, #0
 801cd64:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cd66:	4b23      	ldr	r3, [pc, #140]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd68:	8a9b      	ldrh	r3, [r3, #20]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d105      	bne.n	801cd7a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cd6e:	4b21      	ldr	r3, [pc, #132]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd70:	2200      	movs	r2, #0
 801cd72:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cd74:	4b1f      	ldr	r3, [pc, #124]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd76:	2200      	movs	r2, #0
 801cd78:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cd7a:	4b1e      	ldr	r3, [pc, #120]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd7c:	789b      	ldrb	r3, [r3, #2]
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d115      	bne.n	801cdae <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cd82:	4b1c      	ldr	r3, [pc, #112]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd84:	8a5a      	ldrh	r2, [r3, #18]
 801cd86:	4b1b      	ldr	r3, [pc, #108]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd88:	8a1b      	ldrh	r3, [r3, #16]
 801cd8a:	429a      	cmp	r2, r3
 801cd8c:	d908      	bls.n	801cda0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cd8e:	4b19      	ldr	r3, [pc, #100]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd90:	8a5a      	ldrh	r2, [r3, #18]
 801cd92:	4b18      	ldr	r3, [pc, #96]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd94:	8a1b      	ldrh	r3, [r3, #16]
 801cd96:	1ad3      	subs	r3, r2, r3
 801cd98:	b29a      	uxth	r2, r3
 801cd9a:	4b16      	ldr	r3, [pc, #88]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cd9c:	829a      	strh	r2, [r3, #20]
 801cd9e:	e006      	b.n	801cdae <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cda0:	4b14      	ldr	r3, [pc, #80]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cda2:	8a1b      	ldrh	r3, [r3, #16]
 801cda4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cda8:	b29a      	uxth	r2, r3
 801cdaa:	4b12      	ldr	r3, [pc, #72]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cdac:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cdae:	4b11      	ldr	r3, [pc, #68]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cdb0:	8a1b      	ldrh	r3, [r3, #16]
 801cdb2:	461a      	mov	r2, r3
 801cdb4:	4b10      	ldr	r3, [pc, #64]	@ (801cdf8 <TRACE_TxCpltCallback+0x110>)
 801cdb6:	4413      	add	r3, r2
 801cdb8:	61fb      	str	r3, [r7, #28]
 801cdba:	69bb      	ldr	r3, [r7, #24]
 801cdbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdbe:	693b      	ldr	r3, [r7, #16]
 801cdc0:	f383 8810 	msr	PRIMASK, r3
}
 801cdc4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cdc6:	4b0d      	ldr	r3, [pc, #52]	@ (801cdfc <TRACE_TxCpltCallback+0x114>)
 801cdc8:	68db      	ldr	r3, [r3, #12]
 801cdca:	4a0a      	ldr	r2, [pc, #40]	@ (801cdf4 <TRACE_TxCpltCallback+0x10c>)
 801cdcc:	8a92      	ldrh	r2, [r2, #20]
 801cdce:	4611      	mov	r1, r2
 801cdd0:	69f8      	ldr	r0, [r7, #28]
 801cdd2:	4798      	blx	r3
 801cdd4:	e00a      	b.n	801cdec <TRACE_TxCpltCallback+0x104>
 801cdd6:	69bb      	ldr	r3, [r7, #24]
 801cdd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdda:	68fb      	ldr	r3, [r7, #12]
 801cddc:	f383 8810 	msr	PRIMASK, r3
}
 801cde0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801cde2:	f7e5 fadb 	bl	800239c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801cde6:	f000 f8a7 	bl	801cf38 <TRACE_UnLock>
  }
}
 801cdea:	bf00      	nop
 801cdec:	bf00      	nop
 801cdee:	3720      	adds	r7, #32
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	bd80      	pop	{r7, pc}
 801cdf4:	20001d38 	.word	0x20001d38
 801cdf8:	20001d50 	.word	0x20001d50
 801cdfc:	0801db10 	.word	0x0801db10

0801ce00 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801ce00:	b480      	push	{r7}
 801ce02:	b087      	sub	sp, #28
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	4603      	mov	r3, r0
 801ce08:	6039      	str	r1, [r7, #0]
 801ce0a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801ce0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ce10:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce12:	f3ef 8310 	mrs	r3, PRIMASK
 801ce16:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce18:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ce1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce1c:	b672      	cpsid	i
}
 801ce1e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ce20:	4b35      	ldr	r3, [pc, #212]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce22:	8a5a      	ldrh	r2, [r3, #18]
 801ce24:	4b34      	ldr	r3, [pc, #208]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce26:	8a1b      	ldrh	r3, [r3, #16]
 801ce28:	429a      	cmp	r2, r3
 801ce2a:	d11b      	bne.n	801ce64 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ce2c:	4b32      	ldr	r3, [pc, #200]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce2e:	8a5b      	ldrh	r3, [r3, #18]
 801ce30:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801ce34:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801ce36:	88fa      	ldrh	r2, [r7, #6]
 801ce38:	8afb      	ldrh	r3, [r7, #22]
 801ce3a:	429a      	cmp	r2, r3
 801ce3c:	d33a      	bcc.n	801ceb4 <TRACE_AllocateBufer+0xb4>
 801ce3e:	4b2e      	ldr	r3, [pc, #184]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce40:	8a1b      	ldrh	r3, [r3, #16]
 801ce42:	88fa      	ldrh	r2, [r7, #6]
 801ce44:	429a      	cmp	r2, r3
 801ce46:	d235      	bcs.n	801ceb4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ce48:	4b2b      	ldr	r3, [pc, #172]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce4a:	2201      	movs	r2, #1
 801ce4c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ce4e:	4b2a      	ldr	r3, [pc, #168]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce50:	8a5a      	ldrh	r2, [r3, #18]
 801ce52:	4b29      	ldr	r3, [pc, #164]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce54:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ce56:	4b28      	ldr	r3, [pc, #160]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce58:	8a1b      	ldrh	r3, [r3, #16]
 801ce5a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ce5c:	4b26      	ldr	r3, [pc, #152]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce5e:	2200      	movs	r2, #0
 801ce60:	825a      	strh	r2, [r3, #18]
 801ce62:	e027      	b.n	801ceb4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ce64:	4b24      	ldr	r3, [pc, #144]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce66:	8a5a      	ldrh	r2, [r3, #18]
 801ce68:	4b23      	ldr	r3, [pc, #140]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce6a:	8a1b      	ldrh	r3, [r3, #16]
 801ce6c:	429a      	cmp	r2, r3
 801ce6e:	d91b      	bls.n	801cea8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ce70:	4b21      	ldr	r3, [pc, #132]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce72:	8a5b      	ldrh	r3, [r3, #18]
 801ce74:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801ce78:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801ce7a:	88fa      	ldrh	r2, [r7, #6]
 801ce7c:	8afb      	ldrh	r3, [r7, #22]
 801ce7e:	429a      	cmp	r2, r3
 801ce80:	d318      	bcc.n	801ceb4 <TRACE_AllocateBufer+0xb4>
 801ce82:	4b1d      	ldr	r3, [pc, #116]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce84:	8a1b      	ldrh	r3, [r3, #16]
 801ce86:	88fa      	ldrh	r2, [r7, #6]
 801ce88:	429a      	cmp	r2, r3
 801ce8a:	d213      	bcs.n	801ceb4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ce8c:	4b1a      	ldr	r3, [pc, #104]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce8e:	2201      	movs	r2, #1
 801ce90:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ce92:	4b19      	ldr	r3, [pc, #100]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce94:	8a5a      	ldrh	r2, [r3, #18]
 801ce96:	4b18      	ldr	r3, [pc, #96]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce98:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ce9a:	4b17      	ldr	r3, [pc, #92]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ce9c:	8a1b      	ldrh	r3, [r3, #16]
 801ce9e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cea0:	4b15      	ldr	r3, [pc, #84]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801cea2:	2200      	movs	r2, #0
 801cea4:	825a      	strh	r2, [r3, #18]
 801cea6:	e005      	b.n	801ceb4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801cea8:	4b13      	ldr	r3, [pc, #76]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ceaa:	8a1a      	ldrh	r2, [r3, #16]
 801ceac:	4b12      	ldr	r3, [pc, #72]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ceae:	8a5b      	ldrh	r3, [r3, #18]
 801ceb0:	1ad3      	subs	r3, r2, r3
 801ceb2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ceb4:	8afa      	ldrh	r2, [r7, #22]
 801ceb6:	88fb      	ldrh	r3, [r7, #6]
 801ceb8:	429a      	cmp	r2, r3
 801ceba:	d90f      	bls.n	801cedc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801cebc:	4b0e      	ldr	r3, [pc, #56]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801cebe:	8a5a      	ldrh	r2, [r3, #18]
 801cec0:	683b      	ldr	r3, [r7, #0]
 801cec2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cec4:	4b0c      	ldr	r3, [pc, #48]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801cec6:	8a5a      	ldrh	r2, [r3, #18]
 801cec8:	88fb      	ldrh	r3, [r7, #6]
 801ceca:	4413      	add	r3, r2
 801cecc:	b29b      	uxth	r3, r3
 801cece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ced2:	b29a      	uxth	r2, r3
 801ced4:	4b08      	ldr	r3, [pc, #32]	@ (801cef8 <TRACE_AllocateBufer+0xf8>)
 801ced6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ced8:	2300      	movs	r3, #0
 801ceda:	82bb      	strh	r3, [r7, #20]
 801cedc:	693b      	ldr	r3, [r7, #16]
 801cede:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cee0:	68bb      	ldr	r3, [r7, #8]
 801cee2:	f383 8810 	msr	PRIMASK, r3
}
 801cee6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801cee8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ceec:	4618      	mov	r0, r3
 801ceee:	371c      	adds	r7, #28
 801cef0:	46bd      	mov	sp, r7
 801cef2:	bc80      	pop	{r7}
 801cef4:	4770      	bx	lr
 801cef6:	bf00      	nop
 801cef8:	20001d38 	.word	0x20001d38

0801cefc <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801cefc:	b480      	push	{r7}
 801cefe:	b085      	sub	sp, #20
 801cf00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf02:	f3ef 8310 	mrs	r3, PRIMASK
 801cf06:	607b      	str	r3, [r7, #4]
  return(result);
 801cf08:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cf0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf0c:	b672      	cpsid	i
}
 801cf0e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801cf10:	4b08      	ldr	r3, [pc, #32]	@ (801cf34 <TRACE_Lock+0x38>)
 801cf12:	8adb      	ldrh	r3, [r3, #22]
 801cf14:	3301      	adds	r3, #1
 801cf16:	b29a      	uxth	r2, r3
 801cf18:	4b06      	ldr	r3, [pc, #24]	@ (801cf34 <TRACE_Lock+0x38>)
 801cf1a:	82da      	strh	r2, [r3, #22]
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf20:	68bb      	ldr	r3, [r7, #8]
 801cf22:	f383 8810 	msr	PRIMASK, r3
}
 801cf26:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cf28:	bf00      	nop
 801cf2a:	3714      	adds	r7, #20
 801cf2c:	46bd      	mov	sp, r7
 801cf2e:	bc80      	pop	{r7}
 801cf30:	4770      	bx	lr
 801cf32:	bf00      	nop
 801cf34:	20001d38 	.word	0x20001d38

0801cf38 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801cf38:	b480      	push	{r7}
 801cf3a:	b085      	sub	sp, #20
 801cf3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf3e:	f3ef 8310 	mrs	r3, PRIMASK
 801cf42:	607b      	str	r3, [r7, #4]
  return(result);
 801cf44:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cf46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf48:	b672      	cpsid	i
}
 801cf4a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801cf4c:	4b08      	ldr	r3, [pc, #32]	@ (801cf70 <TRACE_UnLock+0x38>)
 801cf4e:	8adb      	ldrh	r3, [r3, #22]
 801cf50:	3b01      	subs	r3, #1
 801cf52:	b29a      	uxth	r2, r3
 801cf54:	4b06      	ldr	r3, [pc, #24]	@ (801cf70 <TRACE_UnLock+0x38>)
 801cf56:	82da      	strh	r2, [r3, #22]
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf5c:	68bb      	ldr	r3, [r7, #8]
 801cf5e:	f383 8810 	msr	PRIMASK, r3
}
 801cf62:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cf64:	bf00      	nop
 801cf66:	3714      	adds	r7, #20
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	bc80      	pop	{r7}
 801cf6c:	4770      	bx	lr
 801cf6e:	bf00      	nop
 801cf70:	20001d38 	.word	0x20001d38

0801cf74 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801cf74:	b480      	push	{r7}
 801cf76:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801cf78:	4b05      	ldr	r3, [pc, #20]	@ (801cf90 <TRACE_IsLocked+0x1c>)
 801cf7a:	8adb      	ldrh	r3, [r3, #22]
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	bf14      	ite	ne
 801cf80:	2301      	movne	r3, #1
 801cf82:	2300      	moveq	r3, #0
 801cf84:	b2db      	uxtb	r3, r3
}
 801cf86:	4618      	mov	r0, r3
 801cf88:	46bd      	mov	sp, r7
 801cf8a:	bc80      	pop	{r7}
 801cf8c:	4770      	bx	lr
 801cf8e:	bf00      	nop
 801cf90:	20001d38 	.word	0x20001d38

0801cf94 <memset>:
 801cf94:	4402      	add	r2, r0
 801cf96:	4603      	mov	r3, r0
 801cf98:	4293      	cmp	r3, r2
 801cf9a:	d100      	bne.n	801cf9e <memset+0xa>
 801cf9c:	4770      	bx	lr
 801cf9e:	f803 1b01 	strb.w	r1, [r3], #1
 801cfa2:	e7f9      	b.n	801cf98 <memset+0x4>

0801cfa4 <__libc_init_array>:
 801cfa4:	b570      	push	{r4, r5, r6, lr}
 801cfa6:	4d0d      	ldr	r5, [pc, #52]	@ (801cfdc <__libc_init_array+0x38>)
 801cfa8:	4c0d      	ldr	r4, [pc, #52]	@ (801cfe0 <__libc_init_array+0x3c>)
 801cfaa:	1b64      	subs	r4, r4, r5
 801cfac:	10a4      	asrs	r4, r4, #2
 801cfae:	2600      	movs	r6, #0
 801cfb0:	42a6      	cmp	r6, r4
 801cfb2:	d109      	bne.n	801cfc8 <__libc_init_array+0x24>
 801cfb4:	4d0b      	ldr	r5, [pc, #44]	@ (801cfe4 <__libc_init_array+0x40>)
 801cfb6:	4c0c      	ldr	r4, [pc, #48]	@ (801cfe8 <__libc_init_array+0x44>)
 801cfb8:	f000 f89a 	bl	801d0f0 <_init>
 801cfbc:	1b64      	subs	r4, r4, r5
 801cfbe:	10a4      	asrs	r4, r4, #2
 801cfc0:	2600      	movs	r6, #0
 801cfc2:	42a6      	cmp	r6, r4
 801cfc4:	d105      	bne.n	801cfd2 <__libc_init_array+0x2e>
 801cfc6:	bd70      	pop	{r4, r5, r6, pc}
 801cfc8:	f855 3b04 	ldr.w	r3, [r5], #4
 801cfcc:	4798      	blx	r3
 801cfce:	3601      	adds	r6, #1
 801cfd0:	e7ee      	b.n	801cfb0 <__libc_init_array+0xc>
 801cfd2:	f855 3b04 	ldr.w	r3, [r5], #4
 801cfd6:	4798      	blx	r3
 801cfd8:	3601      	adds	r6, #1
 801cfda:	e7f2      	b.n	801cfc2 <__libc_init_array+0x1e>
 801cfdc:	0801e144 	.word	0x0801e144
 801cfe0:	0801e144 	.word	0x0801e144
 801cfe4:	0801e144 	.word	0x0801e144
 801cfe8:	0801e148 	.word	0x0801e148
 801cfec:	00000000 	.word	0x00000000

0801cff0 <floor>:
 801cff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cff4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801cff8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801cffc:	2e13      	cmp	r6, #19
 801cffe:	4602      	mov	r2, r0
 801d000:	460b      	mov	r3, r1
 801d002:	460c      	mov	r4, r1
 801d004:	4605      	mov	r5, r0
 801d006:	4680      	mov	r8, r0
 801d008:	dc35      	bgt.n	801d076 <floor+0x86>
 801d00a:	2e00      	cmp	r6, #0
 801d00c:	da17      	bge.n	801d03e <floor+0x4e>
 801d00e:	a334      	add	r3, pc, #208	@ (adr r3, 801d0e0 <floor+0xf0>)
 801d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d014:	f7e3 f8be 	bl	8000194 <__adddf3>
 801d018:	2200      	movs	r2, #0
 801d01a:	2300      	movs	r3, #0
 801d01c:	f7e3 faee 	bl	80005fc <__aeabi_dcmpgt>
 801d020:	b150      	cbz	r0, 801d038 <floor+0x48>
 801d022:	2c00      	cmp	r4, #0
 801d024:	da57      	bge.n	801d0d6 <floor+0xe6>
 801d026:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801d02a:	432c      	orrs	r4, r5
 801d02c:	2500      	movs	r5, #0
 801d02e:	42ac      	cmp	r4, r5
 801d030:	4c2d      	ldr	r4, [pc, #180]	@ (801d0e8 <floor+0xf8>)
 801d032:	bf08      	it	eq
 801d034:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801d038:	4623      	mov	r3, r4
 801d03a:	462a      	mov	r2, r5
 801d03c:	e024      	b.n	801d088 <floor+0x98>
 801d03e:	4f2b      	ldr	r7, [pc, #172]	@ (801d0ec <floor+0xfc>)
 801d040:	4137      	asrs	r7, r6
 801d042:	ea01 0c07 	and.w	ip, r1, r7
 801d046:	ea5c 0c00 	orrs.w	ip, ip, r0
 801d04a:	d01d      	beq.n	801d088 <floor+0x98>
 801d04c:	a324      	add	r3, pc, #144	@ (adr r3, 801d0e0 <floor+0xf0>)
 801d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d052:	f7e3 f89f 	bl	8000194 <__adddf3>
 801d056:	2200      	movs	r2, #0
 801d058:	2300      	movs	r3, #0
 801d05a:	f7e3 facf 	bl	80005fc <__aeabi_dcmpgt>
 801d05e:	2800      	cmp	r0, #0
 801d060:	d0ea      	beq.n	801d038 <floor+0x48>
 801d062:	2c00      	cmp	r4, #0
 801d064:	bfbe      	ittt	lt
 801d066:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801d06a:	4133      	asrlt	r3, r6
 801d06c:	18e4      	addlt	r4, r4, r3
 801d06e:	ea24 0407 	bic.w	r4, r4, r7
 801d072:	2500      	movs	r5, #0
 801d074:	e7e0      	b.n	801d038 <floor+0x48>
 801d076:	2e33      	cmp	r6, #51	@ 0x33
 801d078:	dd0a      	ble.n	801d090 <floor+0xa0>
 801d07a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d07e:	d103      	bne.n	801d088 <floor+0x98>
 801d080:	f7e3 f888 	bl	8000194 <__adddf3>
 801d084:	4602      	mov	r2, r0
 801d086:	460b      	mov	r3, r1
 801d088:	4610      	mov	r0, r2
 801d08a:	4619      	mov	r1, r3
 801d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d090:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801d094:	f04f 3cff 	mov.w	ip, #4294967295
 801d098:	fa2c f707 	lsr.w	r7, ip, r7
 801d09c:	4207      	tst	r7, r0
 801d09e:	d0f3      	beq.n	801d088 <floor+0x98>
 801d0a0:	a30f      	add	r3, pc, #60	@ (adr r3, 801d0e0 <floor+0xf0>)
 801d0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0a6:	f7e3 f875 	bl	8000194 <__adddf3>
 801d0aa:	2200      	movs	r2, #0
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	f7e3 faa5 	bl	80005fc <__aeabi_dcmpgt>
 801d0b2:	2800      	cmp	r0, #0
 801d0b4:	d0c0      	beq.n	801d038 <floor+0x48>
 801d0b6:	2c00      	cmp	r4, #0
 801d0b8:	da0a      	bge.n	801d0d0 <floor+0xe0>
 801d0ba:	2e14      	cmp	r6, #20
 801d0bc:	d101      	bne.n	801d0c2 <floor+0xd2>
 801d0be:	3401      	adds	r4, #1
 801d0c0:	e006      	b.n	801d0d0 <floor+0xe0>
 801d0c2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d0c6:	2301      	movs	r3, #1
 801d0c8:	40b3      	lsls	r3, r6
 801d0ca:	441d      	add	r5, r3
 801d0cc:	4545      	cmp	r5, r8
 801d0ce:	d3f6      	bcc.n	801d0be <floor+0xce>
 801d0d0:	ea25 0507 	bic.w	r5, r5, r7
 801d0d4:	e7b0      	b.n	801d038 <floor+0x48>
 801d0d6:	2500      	movs	r5, #0
 801d0d8:	462c      	mov	r4, r5
 801d0da:	e7ad      	b.n	801d038 <floor+0x48>
 801d0dc:	f3af 8000 	nop.w
 801d0e0:	8800759c 	.word	0x8800759c
 801d0e4:	7e37e43c 	.word	0x7e37e43c
 801d0e8:	bff00000 	.word	0xbff00000
 801d0ec:	000fffff 	.word	0x000fffff

0801d0f0 <_init>:
 801d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d0f2:	bf00      	nop
 801d0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d0f6:	bc08      	pop	{r3}
 801d0f8:	469e      	mov	lr, r3
 801d0fa:	4770      	bx	lr

0801d0fc <_fini>:
 801d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d0fe:	bf00      	nop
 801d100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d102:	bc08      	pop	{r3}
 801d104:	469e      	mov	lr, r3
 801d106:	4770      	bx	lr

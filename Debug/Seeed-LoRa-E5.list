
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bd78  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0801beb0  0801beb0  0001ceb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801c6c0  0801c6c0  0001d6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801c798  0801c798  0001e118  2**0
                  CONTENTS
  5 .ARM          00000008  0801c798  0801c798  0001d798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801c7a0  0801c7a0  0001e118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801c7a0  0801c7a0  0001d7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801c7a4  0801c7a4  0001d7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000118  20000000  0801c7a8  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002208  20000118  0801c8c0  0001e118  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002320  0801c8c0  0001e320  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001e118  2**0
                  CONTENTS, READONLY
 13 .debug_info   00042c38  00000000  00000000  0001e142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a6c9  00000000  00000000  00060d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000035d8  00000000  00000000  0006b448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002930  00000000  00000000  0006ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002963f  00000000  00000000  00071350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043a3b  00000000  00000000  0009a98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce98e  00000000  00000000  000de3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001acd58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de4c  00000000  00000000  001acd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001babe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000118 	.word	0x20000118
 8000154:	00000000 	.word	0x00000000
 8000158:	0801be98 	.word	0x0801be98

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000011c 	.word	0x2000011c
 8000174:	0801be98 	.word	0x0801be98

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ce:	2afd      	cmp	r2, #253	@ 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	@ 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	@ 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	@ 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f5e:	4a24      	ldr	r2, [pc, #144]	@ (8000ff0 <MX_ADC_Init+0x98>)
 8000f60:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f62:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f68:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <MX_ADC_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fda:	f002 f9a7 	bl	800332c <HAL_ADC_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fe4:	f000 fdd6 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000134 	.word	0x20000134
 8000ff0:	40012400 	.word	0x40012400

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <HAL_ADC_MspInit+0x54>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d113      	bne.n	800103e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001016:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800101a:	f7ff ff73 	bl	8000f04 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2002      	movs	r0, #2
 8001020:	f7ff ff58 	bl	8000ed4 <LL_AHB2_GRP1_EnableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin;
 8001024:	f246 0318 	movw	r3, #24600	@ 0x6018
 8001028:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <HAL_ADC_MspInit+0x58>)
 800103a:	f003 ff77 	bl	8004f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012400 	.word	0x40012400
 800104c:	48000400 	.word	0x48000400

08001050 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_ADC_MspDeInit+0x2c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d108      	bne.n	8001074 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001062:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001066:	f7ff ff65 	bl	8000f34 <LL_APB2_GRP1_DisableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin);
 800106a:	f246 0118 	movw	r1, #24600	@ 0x6018
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <HAL_ADC_MspDeInit+0x30>)
 8001070:	f004 f8bc 	bl	80051ec <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40012400 	.word	0x40012400
 8001080:	48000400 	.word	0x48000400

08001084 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <SYS_InitMeasurement+0x14>)
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <SYS_InitMeasurement+0x18>)
 800108c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000134 	.word	0x20000134
 800109c:	40012400 	.word	0x40012400

080010a0 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80010ae:	f000 f869 	bl	8001184 <SYS_GetBatteryLevel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80010b6:	482d      	ldr	r0, [pc, #180]	@ (800116c <SYS_GetTemperatureLevel+0xcc>)
 80010b8:	f000 f898 	bl	80011ec <ADC_ReadChannels>
 80010bc:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80010be:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d026      	beq.n	8001118 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80010ca:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d01c      	beq.n	8001110 <SYS_GetTemperatureLevel+0x70>
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	4a25      	ldr	r2, [pc, #148]	@ (8001178 <SYS_GetTemperatureLevel+0xd8>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2264      	movs	r2, #100	@ 0x64
 80010f2:	fb03 f202 	mul.w	r2, r3, r2
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	1acb      	subs	r3, r1, r3
 8001102:	fb92 f3f3 	sdiv	r3, r2, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	331e      	adds	r3, #30
 800110a:	b29b      	uxth	r3, r3
 800110c:	b21b      	sxth	r3, r3
 800110e:	e001      	b.n	8001114 <SYS_GetTemperatureLevel+0x74>
 8001110:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001114:	803b      	strh	r3, [r7, #0]
 8001116:	e01d      	b.n	8001154 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	fb03 f202 	mul.w	r2, r3, r2
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <SYS_GetTemperatureLevel+0xdc>)
 8001122:	fba3 1302 	umull	r1, r3, r3, r2
 8001126:	1ad2      	subs	r2, r2, r3
 8001128:	0852      	lsrs	r2, r2, #1
 800112a:	4413      	add	r3, r2
 800112c:	0adb      	lsrs	r3, r3, #11
 800112e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 800113a:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <SYS_GetTemperatureLevel+0xe0>)
 8001140:	fb82 1203 	smull	r1, r2, r2, r3
 8001144:	1292      	asrs	r2, r2, #10
 8001146:	17db      	asrs	r3, r3, #31
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	b29b      	uxth	r3, r3
 800114c:	331e      	adds	r3, #30
 800114e:	b29b      	uxth	r3, r3
 8001150:	b21b      	sxth	r3, r3
 8001152:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001154:	883b      	ldrh	r3, [r7, #0]
 8001156:	b21b      	sxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21b      	sxth	r3, r3
 800115c:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 800115e:	883b      	ldrh	r3, [r7, #0]
 8001160:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	b0001000 	.word	0xb0001000
 8001170:	1fff75c8 	.word	0x1fff75c8
 8001174:	1fff75a8 	.word	0x1fff75a8
 8001178:	09ee009f 	.word	0x09ee009f
 800117c:	00100101 	.word	0x00100101
 8001180:	68db8bad 	.word	0x68db8bad

08001184 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001192:	4813      	ldr	r0, [pc, #76]	@ (80011e0 <SYS_GetBatteryLevel+0x5c>)
 8001194:	f000 f82a 	bl	80011ec <ADC_ReadChannels>
 8001198:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	e016      	b.n	80011d4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <SYS_GetBatteryLevel+0x60>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00b      	beq.n	80011ca <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <SYS_GetBatteryLevel+0x60>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80011bc:	fb03 f202 	mul.w	r2, r3, r2
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	e004      	b.n	80011d4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80011ca:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <SYS_GetBatteryLevel+0x64>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	b4002000 	.word	0xb4002000
 80011e4:	1fff75aa 	.word	0x1fff75aa
 80011e8:	004c08d8 	.word	0x004c08d8

080011ec <ADC_ReadChannels>:
	return outvoltage;
}
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001204:	f7ff fea8 	bl	8000f58 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001208:	481a      	ldr	r0, [pc, #104]	@ (8001274 <ADC_ReadChannels+0x88>)
 800120a:	f002 feae 	bl	8003f6a <HAL_ADCEx_Calibration_Start>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001214:	f000 fcbe 	bl	8001b94 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4619      	mov	r1, r3
 800122a:	4812      	ldr	r0, [pc, #72]	@ (8001274 <ADC_ReadChannels+0x88>)
 800122c:	f002 fbba 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001236:	f000 fcad 	bl	8001b94 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	@ (8001274 <ADC_ReadChannels+0x88>)
 800123c:	f002 fa96 	bl	800376c <HAL_ADC_Start>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001246:	f000 fca5 	bl	8001b94 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800124a:	f04f 31ff 	mov.w	r1, #4294967295
 800124e:	4809      	ldr	r0, [pc, #36]	@ (8001274 <ADC_ReadChannels+0x88>)
 8001250:	f002 fb04 	bl	800385c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001254:	4807      	ldr	r0, [pc, #28]	@ (8001274 <ADC_ReadChannels+0x88>)
 8001256:	f002 facf 	bl	80037f8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <ADC_ReadChannels+0x88>)
 800125c:	f002 fb95 	bl	800398a <HAL_ADC_GetValue>
 8001260:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001262:	4804      	ldr	r0, [pc, #16]	@ (8001274 <ADC_ReadChannels+0x88>)
 8001264:	f002 f9f6 	bl	8003654 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001268:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000134 	.word	0x20000134

08001278 <LL_AHB1_GRP1_EnableClock>:
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001284:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001286:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4313      	orrs	r3, r2
 800128e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001294:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800129c:	68fb      	ldr	r3, [r7, #12]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012ac:	2004      	movs	r0, #4
 80012ae:	f7ff ffe3 	bl	8001278 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff ffe0 	bl	8001278 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2102      	movs	r1, #2
 80012bc:	200b      	movs	r0, #11
 80012be:	f002 fffa 	bl	80042b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012c2:	200b      	movs	r0, #11
 80012c4:	f003 f811 	bl	80042ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	200c      	movs	r0, #12
 80012ce:	f002 fff2 	bl	80042b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012d2:	200c      	movs	r0, #12
 80012d4:	f003 f809 	bl	80042ea <HAL_NVIC_EnableIRQ>

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80012e8:	23ff      	movs	r3, #255	@ 0xff
 80012ea:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80012f2:	d311      	bcc.n	8001318 <FLASH_IF_Write+0x3c>
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <FLASH_IF_Write+0x48>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	029a      	lsls	r2, r3, #10
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <FLASH_IF_Write+0x4c>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001302:	3b01      	subs	r3, #1
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4293      	cmp	r3, r2
 8001308:	d306      	bcc.n	8001318 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 f85a 	bl	80013c8 <FLASH_IF_INT_Write>
 8001314:	4603      	mov	r3, r0
 8001316:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	1fff75e0 	.word	0x1fff75e0
 8001328:	03fffc00 	.word	0x03fffc00

0800132c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001338:	23ff      	movs	r3, #255	@ 0xff
 800133a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001342:	d311      	bcc.n	8001368 <FLASH_IF_Read+0x3c>
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <FLASH_IF_Read+0x48>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	029a      	lsls	r2, r3, #10
 800134a:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <FLASH_IF_Read+0x4c>)
 800134c:	4013      	ands	r3, r2
 800134e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001352:	3b01      	subs	r3, #1
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	4293      	cmp	r3, r2
 8001358:	d306      	bcc.n	8001368 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 f93a 	bl	80015d8 <FLASH_IF_INT_Read>
 8001364:	4603      	mov	r3, r0
 8001366:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001368:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	1fff75e0 	.word	0x1fff75e0
 8001378:	03fffc00 	.word	0x03fffc00

0800137c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001386:	23ff      	movs	r3, #255	@ 0xff
 8001388:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001390:	d310      	bcc.n	80013b4 <FLASH_IF_Erase+0x38>
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <FLASH_IF_Erase+0x44>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	029a      	lsls	r2, r3, #10
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <FLASH_IF_Erase+0x48>)
 800139a:	4013      	ands	r3, r2
 800139c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80013a0:	3b01      	subs	r3, #1
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d305      	bcc.n	80013b4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f932 	bl	8001614 <FLASH_IF_INT_Erase>
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80013b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	1fff75e0 	.word	0x1fff75e0
 80013c4:	03fffc00 	.word	0x03fffc00

080013c8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b090      	sub	sp, #64	@ 0x40
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00c      	beq.n	8001406 <FLASH_IF_INT_Write+0x3e>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d009      	beq.n	8001406 <FLASH_IF_INT_Write+0x3e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d104      	bne.n	8001406 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001406:	f06f 0305 	mvn.w	r3, #5
 800140a:	e0da      	b.n	80015c2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800140c:	f000 f992 	bl	8001734 <FLASH_IF_INT_Clear_Error>
 8001410:	4603      	mov	r3, r0
 8001412:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8001416:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 80cf 	bne.w	80015be <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001420:	f003 fbae 	bl	8004b80 <HAL_FLASH_Unlock>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 80c6 	bne.w	80015b8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800142c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800142e:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001432:	4b66      	ldr	r3, [pc, #408]	@ (80015cc <FLASH_IF_INT_Write+0x204>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0299      	lsls	r1, r3, #10
 8001438:	4b65      	ldr	r3, [pc, #404]	@ (80015d0 <FLASH_IF_INT_Write+0x208>)
 800143a:	400b      	ands	r3, r1
 800143c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001440:	fb01 f303 	mul.w	r3, r1, r3
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	0adb      	lsrs	r3, r3, #11
 8001448:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800144a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001454:	3b01      	subs	r3, #1
 8001456:	4a5d      	ldr	r2, [pc, #372]	@ (80015cc <FLASH_IF_INT_Write+0x204>)
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	0291      	lsls	r1, r2, #10
 800145c:	4a5c      	ldr	r2, [pc, #368]	@ (80015d0 <FLASH_IF_INT_Write+0x208>)
 800145e:	400a      	ands	r2, r1
 8001460:	fbb3 f1f2 	udiv	r1, r3, r2
 8001464:	fb01 f202 	mul.w	r2, r1, r2
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	0ada      	lsrs	r2, r3, #11
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d905      	bls.n	8001486 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800147a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800147c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001480:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001484:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800148a:	e089      	b.n	80015a0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800148c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800148e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001492:	02db      	lsls	r3, r3, #11
 8001494:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001496:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 f925 	bl	80016e8 <FLASH_IF_INT_IsEmpty>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d031      	beq.n	8001508 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80014a4:	4b4b      	ldr	r3, [pc, #300]	@ (80015d4 <FLASH_IF_INT_Write+0x20c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d103      	bne.n	80014b4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80014ac:	23fa      	movs	r3, #250	@ 0xfa
 80014ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80014b2:	e07e      	b.n	80015b2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80014b4:	4b47      	ldr	r3, [pc, #284]	@ (80015d4 <FLASH_IF_INT_Write+0x20c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6939      	ldr	r1, [r7, #16]
 80014ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f88a 	bl	80015d8 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80014c4:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <FLASH_IF_INT_Write+0x20c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ce:	4413      	add	r3, r2
 80014d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80014d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014d4:	b292      	uxth	r2, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f019 f9d4 	bl	801a884 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f896 	bl	8001614 <FLASH_IF_INT_Erase>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80014ee:	23fe      	movs	r3, #254	@ 0xfe
 80014f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80014f4:	e05d      	b.n	80015b2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80014fa:	4b36      	ldr	r3, [pc, #216]	@ (80015d4 <FLASH_IF_INT_Write+0x20c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001500:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e005      	b.n	8001514 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 800150c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800150e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001512:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001518:	e026      	b.n	8001568 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800151a:	6a3a      	ldr	r2, [r7, #32]
 800151c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001526:	2001      	movs	r0, #1
 8001528:	f003 fae6 	bl	8004af8 <HAL_FLASH_Program>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d113      	bne.n	800155a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001538:	6a3a      	ldr	r2, [r7, #32]
 800153a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153c:	4413      	add	r3, r2
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	4299      	cmp	r1, r3
 8001544:	bf08      	it	eq
 8001546:	4290      	cmpeq	r0, r2
 8001548:	d003      	beq.n	8001552 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800154a:	23fc      	movs	r3, #252	@ 0xfc
 800154c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 8001550:	e00e      	b.n	8001570 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	3308      	adds	r3, #8
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
 8001558:	e003      	b.n	8001562 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800155a:	23fc      	movs	r3, #252	@ 0xfc
 800155c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001560:	e006      	b.n	8001570 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	3308      	adds	r3, #8
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	429a      	cmp	r2, r3
 800156e:	d3d4      	bcc.n	800151a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001570:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11b      	bne.n	80015b0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800157a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800157c:	4413      	add	r3, r2
 800157e:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 8001580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001584:	4413      	add	r3, r2
 8001586:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001592:	bf28      	it	cs
 8001594:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001598:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800159a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159c:	3301      	adds	r3, #1
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	4413      	add	r3, r2
 80015a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f4ff af6f 	bcc.w	800148c <FLASH_IF_INT_Write+0xc4>
 80015ae:	e000      	b.n	80015b2 <FLASH_IF_INT_Write+0x1ea>
          break;
 80015b0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80015b2:	f003 fb07 	bl	8004bc4 <HAL_FLASH_Lock>
 80015b6:	e002      	b.n	80015be <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80015b8:	23fb      	movs	r3, #251	@ 0xfb
 80015ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80015be:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3740      	adds	r7, #64	@ 0x40
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	1fff75e0 	.word	0x1fff75e0
 80015d0:	03fffc00 	.word	0x03fffc00
 80015d4:	20000198 	.word	0x20000198

080015d8 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <FLASH_IF_INT_Read+0x1c>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80015f4:	f06f 0305 	mvn.w	r3, #5
 80015f8:	e008      	b.n	800160c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f019 f93e 	bl	801a884 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001634:	f06f 0305 	mvn.w	r3, #5
 8001638:	e04e      	b.n	80016d8 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800163a:	f000 f87b 	bl	8001734 <FLASH_IF_INT_Clear_Error>
 800163e:	4603      	mov	r3, r0
 8001640:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001642:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d144      	bne.n	80016d4 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800164a:	f003 fa99 	bl	8004b80 <HAL_FLASH_Unlock>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d13d      	bne.n	80016d0 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001654:	2302      	movs	r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 800165e:	4b20      	ldr	r3, [pc, #128]	@ (80016e0 <FLASH_IF_INT_Erase+0xcc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	0299      	lsls	r1, r3, #10
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <FLASH_IF_INT_Erase+0xd0>)
 8001666:	400b      	ands	r3, r1
 8001668:	fbb2 f1f3 	udiv	r1, r2, r3
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	0adb      	lsrs	r3, r3, #11
 8001674:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4413      	add	r3, r2
 800167c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001680:	3b01      	subs	r3, #1
 8001682:	4a17      	ldr	r2, [pc, #92]	@ (80016e0 <FLASH_IF_INT_Erase+0xcc>)
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	0291      	lsls	r1, r2, #10
 8001688:	4a16      	ldr	r2, [pc, #88]	@ (80016e4 <FLASH_IF_INT_Erase+0xd0>)
 800168a:	400a      	ands	r2, r1
 800168c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001690:	fb01 f202 	mul.w	r2, r1, r2
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	0ada      	lsrs	r2, r3, #11
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	3301      	adds	r3, #1
 800169e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80016a0:	f107 0214 	add.w	r2, r7, #20
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 fb6a 	bl	8004d84 <HAL_FLASHEx_Erase>
 80016b0:	4603      	mov	r3, r0
 80016b2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80016b4:	7fbb      	ldrb	r3, [r7, #30]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80016ba:	7fbb      	ldrb	r3, [r7, #30]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d101      	bne.n	80016c4 <FLASH_IF_INT_Erase+0xb0>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e001      	b.n	80016c8 <FLASH_IF_INT_Erase+0xb4>
 80016c4:	f06f 0301 	mvn.w	r3, #1
 80016c8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80016ca:	f003 fa7b 	bl	8004bc4 <HAL_FLASH_Lock>
 80016ce:	e001      	b.n	80016d4 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80016d0:	23fb      	movs	r3, #251	@ 0xfb
 80016d2:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80016d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	1fff75e0 	.word	0x1fff75e0
 80016e4:	03fffc00 	.word	0x03fffc00

080016e8 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	e011      	b.n	8001720 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001706:	bf08      	it	eq
 8001708:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800170c:	d002      	beq.n	8001714 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800170e:	2301      	movs	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
      break;
 8001712:	e009      	b.n	8001728 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3308      	adds	r3, #8
 8001718:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3308      	adds	r3, #8
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d3e9      	bcc.n	80016fc <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001728:	68fb      	ldr	r3, [r7, #12]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 800173a:	23fb      	movs	r3, #251	@ 0xfb
 800173c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800173e:	f003 fa1f 	bl	8004b80 <HAL_FLASH_Unlock>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d110      	bne.n	800176a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <FLASH_IF_INT_Clear_Error+0x44>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <FLASH_IF_INT_Clear_Error+0x44>)
 800174e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <FLASH_IF_INT_Clear_Error+0x44>)
 8001756:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 800175a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 800175c:	f003 fa32 	bl	8004bc4 <HAL_FLASH_Lock>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	58004000 	.word	0x58004000

0800177c <LL_AHB2_GRP1_EnableClock>:
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001788:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800178a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4313      	orrs	r3, r2
 8001792:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001798:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a0:	68fb      	ldr	r3, [r7, #12]
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff ffdb 	bl	800177c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2002      	movs	r0, #2
 80017c8:	f7ff ffd8 	bl	800177c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017cc:	2004      	movs	r0, #4
 80017ce:	f7ff ffd5 	bl	800177c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d2:	2080      	movs	r0, #128	@ 0x80
 80017d4:	f7ff ffd2 	bl	800177c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|VCC_OUT_EN_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f248 0131 	movw	r1, #32817	@ 0x8031
 80017de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e2:	f003 fdd1 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ec:	4839      	ldr	r0, [pc, #228]	@ (80018d4 <MX_GPIO_Init+0x128>)
 80017ee:	f003 fdcb 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS485_RE_Pin|RS485_DE_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2103      	movs	r1, #3
 80017f6:	4838      	ldr	r0, [pc, #224]	@ (80018d8 <MX_GPIO_Init+0x12c>)
 80017f8:	f003 fdc6 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA12 PA11 PA6 PA1
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_6|GPIO_PIN_1
 80017fc:	f641 13c2 	movw	r3, #6594	@ 0x19c2
 8001800:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f003 fb8b 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001816:	f248 0330 	movw	r3, #32816	@ 0x8030
 800181a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001830:	f003 fb7c 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001838:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4822      	ldr	r0, [pc, #136]	@ (80018d4 <MX_GPIO_Init+0x128>)
 800184c:	f003 fb6e 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB5 PB8 PB2
                           PB12 PB1 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_2
 8001850:	f641 7326 	movw	r3, #7974	@ 0x1f26
 8001854:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001856:	2303      	movs	r3, #3
 8001858:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4619      	mov	r1, r3
 8001862:	481c      	ldr	r0, [pc, #112]	@ (80018d4 <MX_GPIO_Init+0x128>)
 8001864:	f003 fb62 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC2 PC3 PC5
                           PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8001868:	f242 037c 	movw	r3, #8316	@ 0x207c
 800186c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186e:	2303      	movs	r3, #3
 8001870:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <MX_GPIO_Init+0x12c>)
 800187c:	f003 fb56 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_EN_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_EN_Pin;
 8001880:	2301      	movs	r3, #1
 8001882:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VCC_OUT_EN_GPIO_Port, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001898:	f003 fb48 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_RE_Pin RS485_DE_Pin */
  GPIO_InitStruct.Pin = RS485_RE_Pin|RS485_DE_Pin;
 800189c:	2303      	movs	r3, #3
 800189e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <MX_GPIO_Init+0x12c>)
 80018b2:	f003 fb3b 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018b6:	2308      	movs	r3, #8
 80018b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4805      	ldr	r0, [pc, #20]	@ (80018dc <MX_GPIO_Init+0x130>)
 80018c8:	f003 fb30 	bl	8004f2c <HAL_GPIO_Init>

}
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	48000400 	.word	0x48000400
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48001c00 	.word	0x48001c00

080018e0 <LL_AHB2_GRP1_EnableClock>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001904:	68fb      	ldr	r3, [r7, #12]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <LL_APB1_GRP1_EnableClock>:
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800191e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4313      	orrs	r3, r2
 8001926:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001934:	68fb      	ldr	r3, [r7, #12]
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <MX_I2C1_Init+0x74>)
 8001946:	4a1c      	ldr	r2, [pc, #112]	@ (80019b8 <MX_I2C1_Init+0x78>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 800194a:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <MX_I2C1_Init+0x74>)
 800194c:	4a1b      	ldr	r2, [pc, #108]	@ (80019bc <MX_I2C1_Init+0x7c>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001950:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <MX_I2C1_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001956:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <MX_I2C1_Init+0x74>)
 8001958:	2201      	movs	r2, #1
 800195a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <MX_I2C1_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <MX_I2C1_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <MX_I2C1_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_I2C1_Init+0x74>)
 8001970:	2200      	movs	r2, #0
 8001972:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_I2C1_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197a:	480e      	ldr	r0, [pc, #56]	@ (80019b4 <MX_I2C1_Init+0x74>)
 800197c:	f003 fd1b 	bl	80053b6 <HAL_I2C_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001986:	f000 f905 	bl	8001b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800198a:	2100      	movs	r1, #0
 800198c:	4809      	ldr	r0, [pc, #36]	@ (80019b4 <MX_I2C1_Init+0x74>)
 800198e:	f003 fdad 	bl	80054ec <HAL_I2CEx_ConfigAnalogFilter>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001998:	f000 f8fc 	bl	8001b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800199c:	2100      	movs	r1, #0
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_I2C1_Init+0x74>)
 80019a0:	f003 fdee 	bl	8005580 <HAL_I2CEx_ConfigDigitalFilter>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019aa:	f000 f8f3 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000019c 	.word	0x2000019c
 80019b8:	40005400 	.word	0x40005400
 80019bc:	10805d88 	.word	0x10805d88

080019c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b096      	sub	sp, #88	@ 0x58
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2238      	movs	r2, #56	@ 0x38
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f01a f9ab 	bl	801bd3c <memset>
  if(i2cHandle->Instance==I2C1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <HAL_I2C_MspInit+0xb0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d13a      	bne.n	8001a66 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019f0:	2340      	movs	r3, #64	@ 0x40
 80019f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019f4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80019f8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 f87a 	bl	8006af8 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a0a:	f000 f8c3 	bl	8001b94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f7ff ff66 	bl	80018e0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff ff63 	bl	80018e0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = HDC_SDA_Pin;
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1e:	2312      	movs	r3, #18
 8001a20:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a32:	4619      	mov	r1, r3
 8001a34:	480f      	ldr	r0, [pc, #60]	@ (8001a74 <HAL_I2C_MspInit+0xb4>)
 8001a36:	f003 fa79 	bl	8004f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HDC_SCL_Pin;
 8001a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a3e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a40:	2312      	movs	r3, #18
 8001a42:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5a:	f003 fa67 	bl	8004f2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a5e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001a62:	f7ff ff55 	bl	8001910 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a66:	bf00      	nop
 8001a68:	3758      	adds	r7, #88	@ 0x58
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40005400 	.word	0x40005400
 8001a74:	48000400 	.word	0x48000400

08001a78 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a88:	f023 0218 	bic.w	r2, r3, #24
 8001a8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
	...

08001aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa8:	f001 fa52 	bl	8002f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aac:	f000 f818 	bl	8001ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab0:	f7ff fe7c 	bl	80017ac <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001ab4:	f008 fbca 	bl	800a24c <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001ab8:	f000 fec4 	bl	8002844 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001abc:	f7ff ff40 	bl	8001940 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(RS485_RE_GPIO_Port, RS485_RE_Pin, 1);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <main+0x38>)
 8001ac6:	f003 fc5f 	bl	8005388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2101      	movs	r1, #1
 8001ace:	4803      	ldr	r0, [pc, #12]	@ (8001adc <main+0x38>)
 8001ad0:	f003 fc5a 	bl	8005388 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001ad4:	f008 fbc2 	bl	800a25c <MX_LoRaWAN_Process>
 8001ad8:	e7fc      	b.n	8001ad4 <main+0x30>
 8001ada:	bf00      	nop
 8001adc:	48000800 	.word	0x48000800

08001ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09a      	sub	sp, #104	@ 0x68
 8001ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	2248      	movs	r2, #72	@ 0x48
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f01a f924 	bl	801bd3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
 8001b04:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b06:	f003 fd87 	bl	8005618 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff ffb4 	bl	8001a78 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b10:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <SystemClock_Config+0xb0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b18:	4a1d      	ldr	r2, [pc, #116]	@ (8001b90 <SystemClock_Config+0xb0>)
 8001b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <SystemClock_Config+0xb0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b2c:	2324      	movs	r3, #36	@ 0x24
 8001b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b30:	2381      	movs	r3, #129	@ 0x81
 8001b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b34:	2301      	movs	r3, #1
 8001b36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001b3c:	23b0      	movs	r3, #176	@ 0xb0
 8001b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f004 f8b1 	bl	8005cb0 <HAL_RCC_OscConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001b54:	f000 f81e 	bl	8001b94 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001b58:	234f      	movs	r3, #79	@ 0x4f
 8001b5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b70:	f107 0308 	add.w	r3, r7, #8
 8001b74:	2102      	movs	r1, #2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fc1c 	bl	80063b4 <HAL_RCC_ClockConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b82:	f000 f807 	bl	8001b94 <Error_Handler>
  }
}
 8001b86:	bf00      	nop
 8001b88:	3768      	adds	r7, #104	@ 0x68
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	58000400 	.word	0x58000400

08001b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b98:	b672      	cpsid	i
}
 8001b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <Error_Handler+0x8>

08001ba0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <LL_APB1_GRP1_EnableClock>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bcc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be4:	68fb      	ldr	r3, [r7, #12]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	222c      	movs	r2, #44	@ 0x2c
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f01a f89d 	bl	801bd3c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c02:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c04:	4a22      	ldr	r2, [pc, #136]	@ (8001c90 <MX_RTC_Init+0xa0>)
 8001c06:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001c08:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c0a:	221f      	movs	r2, #31
 8001c0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c26:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c36:	4815      	ldr	r0, [pc, #84]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c38:	f005 f878 	bl	8006d2c <HAL_RTC_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001c42:	f7ff ffa7 	bl	8001b94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001c46:	4811      	ldr	r0, [pc, #68]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c48:	f005 fb6e 	bl	8007328 <HAL_RTCEx_SetSSRU_IT>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c52:	f7ff ff9f 	bl	8001b94 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c66:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_RTC_Init+0x9c>)
 8001c76:	f005 f8db 	bl	8006e30 <HAL_RTC_SetAlarm_IT>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c80:	f7ff ff88 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3730      	adds	r7, #48	@ 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200001f0 	.word	0x200001f0
 8001c90:	40002800 	.word	0x40002800

08001c94 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	@ 0x40
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	2238      	movs	r2, #56	@ 0x38
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f01a f849 	bl	801bd3c <memset>
  if(rtcHandle->Instance==RTC)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a16      	ldr	r2, [pc, #88]	@ (8001d08 <HAL_RTC_MspInit+0x74>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d125      	bne.n	8001d00 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cb8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 ff17 	bl	8006af8 <HAL_RCCEx_PeriphCLKConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001cd0:	f7ff ff60 	bl	8001b94 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cd4:	f7ff ff64 	bl	8001ba0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001cd8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001cdc:	f7ff ff70 	bl	8001bc0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f002 fae6 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001cea:	2002      	movs	r0, #2
 8001cec:	f002 fafd 	bl	80042ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	202a      	movs	r0, #42	@ 0x2a
 8001cf6:	f002 fade 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cfa:	202a      	movs	r0, #42	@ 0x2a
 8001cfc:	f002 faf5 	bl	80042ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d00:	bf00      	nop
 8001d02:	3740      	adds	r7, #64	@ 0x40
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40002800 	.word	0x40002800

08001d0c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	58000400 	.word	0x58000400

08001d24 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001d40:	f001 f926 	bl	8002f90 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001d44:	f7ff ffe2 	bl	8001d0c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f003 fcf7 	bl	800573c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001d56:	f001 f929 	bl	8002fac <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001d5a:	f000 ffa9 	bl	8002cb0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001d66:	f001 f913 	bl	8002f90 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f003 fc61 	bl	8005634 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d7a:	f001 f917 	bl	8002fac <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d92:	bf00      	nop
 8001d94:	e7fd      	b.n	8001d92 <NMI_Handler+0x4>

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	bf00      	nop
 8001d9c:	e7fd      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da2:	bf00      	nop
 8001da4:	e7fd      	b.n	8001da2 <MemManage_Handler+0x4>

08001da6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001daa:	bf00      	nop
 8001dac:	e7fd      	b.n	8001daa <BusFault_Handler+0x4>

08001dae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db2:	bf00      	nop
 8001db4:	e7fd      	b.n	8001db2 <UsageFault_Handler+0x4>

08001db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001dee:	f005 fad7 	bl	80073a0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200001f0 	.word	0x200001f0

08001dfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <DMA1_Channel1_IRQHandler+0x10>)
 8001e02:	f002 fd09 	bl	8004818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000364 	.word	0x20000364

08001e10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <DMA1_Channel2_IRQHandler+0x10>)
 8001e16:	f002 fcff 	bl	8004818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200003c4 	.word	0x200003c4

08001e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <USART1_IRQHandler+0x10>)
 8001e2a:	f006 f913 	bl	8008054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000023c 	.word	0x2000023c

08001e38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e3c:	4802      	ldr	r0, [pc, #8]	@ (8001e48 <USART2_IRQHandler+0x10>)
 8001e3e:	f006 f909 	bl	8008054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200002d0 	.word	0x200002d0

08001e4c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <RTC_Alarm_IRQHandler+0x10>)
 8001e52:	f005 f955 	bl	8007100 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200001f0 	.word	0x200001f0

08001e60 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001e66:	f005 fe09 	bl	8007a7c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000228 	.word	0x20000228

08001e74 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e80:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e90:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <MX_SUBGHZ_Init+0x20>)
 8001eaa:	2208      	movs	r2, #8
 8001eac:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_SUBGHZ_Init+0x20>)
 8001eb0:	f005 fb62 	bl	8007578 <HAL_SUBGHZ_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001eba:	f7ff fe6b 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000228 	.word	0x20000228

08001ec8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff ffcf 	bl	8001e74 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2032      	movs	r0, #50	@ 0x32
 8001edc:	f002 f9eb 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ee0:	2032      	movs	r0, #50	@ 0x32
 8001ee2:	f002 fa02 	bl	80042ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001f00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001f18:	4b02      	ldr	r3, [pc, #8]	@ (8001f24 <LL_FLASH_GetUDN+0x10>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	1fff7580 	.word	0x1fff7580

08001f28 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <LL_FLASH_GetDeviceID+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	1fff7584 	.word	0x1fff7584

08001f40 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <LL_FLASH_GetSTCompanyID+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0a1b      	lsrs	r3, r3, #8
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	1fff7584 	.word	0x1fff7584

08001f58 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff ffc6 	bl	8001eee <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001f62:	f019 f9b5 	bl	801b2d0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <SystemApp_Init+0x48>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001f6c:	f000 f974 	bl	8002258 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001f70:	f019 fc3e 	bl	801b7f0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f74:	480b      	ldr	r0, [pc, #44]	@ (8001fa4 <SystemApp_Init+0x4c>)
 8001f76:	f019 fce9 	bl	801b94c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <SystemApp_Init+0x50>)
 8001f7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f80:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f82:	2002      	movs	r0, #2
 8001f84:	f019 fcf0 	bl	801b968 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f88:	f7ff f87c 	bl	8001084 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f8c:	f000 f9a0 	bl	80022d0 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f90:	f018 fbd2 	bl	801a738 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f94:	2101      	movs	r1, #1
 8001f96:	2001      	movs	r0, #1
 8001f98:	f018 fc0e 	bl	801a7b8 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000234 	.word	0x20000234
 8001fa4:	08002179 	.word	0x08002179
 8001fa8:	58004000 	.word	0x58004000

08001fac <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001fb0:	f018 fc32 	bl	801a818 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001fc2:	f7ff f8df 	bl	8001184 <SYS_GetBatteryLevel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d902      	bls.n	8001fda <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001fd4:	23fe      	movs	r3, #254	@ 0xfe
 8001fd6:	71fb      	strb	r3, [r7, #7]
 8001fd8:	e014      	b.n	8002004 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001fda:	88bb      	ldrh	r3, [r7, #4]
 8001fdc:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001fe0:	d202      	bcs.n	8001fe8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	e00d      	b.n	8002004 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	01db      	lsls	r3, r3, #7
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <GetBatteryLevel+0x58>)
 8001ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8002000:	09db      	lsrs	r3, r3, #7
 8002002:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002004:	79fb      	ldrb	r3, [r7, #7]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	1b4e81b5 	.word	0x1b4e81b5

08002014 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f923 	bl	800226c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fd77 	bl	8000b1c <__aeabi_f2iz>
 800202e:	4603      	mov	r3, r0
 8002030:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002032:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800203e:	b590      	push	{r4, r7, lr}
 8002040:	b087      	sub	sp, #28
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800204a:	f7ff ff63 	bl	8001f14 <LL_FLASH_GetUDN>
 800204e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002056:	d138      	bne.n	80020ca <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002058:	f000 ffb6 	bl	8002fc8 <HAL_GetUIDw0>
 800205c:	4604      	mov	r4, r0
 800205e:	f000 ffc7 	bl	8002ff0 <HAL_GetUIDw2>
 8002062:	4603      	mov	r3, r0
 8002064:	4423      	add	r3, r4
 8002066:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002068:	f000 ffb8 	bl	8002fdc <HAL_GetUIDw1>
 800206c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	0e1a      	lsrs	r2, r3, #24
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3307      	adds	r3, #7
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	0c1a      	lsrs	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3306      	adds	r3, #6
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	0a1a      	lsrs	r2, r3, #8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3305      	adds	r3, #5
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	0e1a      	lsrs	r2, r3, #24
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3303      	adds	r3, #3
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	0c1a      	lsrs	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3302      	adds	r3, #2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	0a1a      	lsrs	r2, r3, #8
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3301      	adds	r3, #1
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80020c8:	e031      	b.n	800212e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3307      	adds	r3, #7
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	0a1a      	lsrs	r2, r3, #8
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3306      	adds	r3, #6
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	0c1a      	lsrs	r2, r3, #16
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3305      	adds	r3, #5
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	0e1a      	lsrs	r2, r3, #24
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80020f8:	f7ff ff16 	bl	8001f28 <LL_FLASH_GetDeviceID>
 80020fc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3303      	adds	r3, #3
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002108:	f7ff ff1a 	bl	8001f40 <LL_FLASH_GetSTCompanyID>
 800210c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3302      	adds	r3, #2
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	0a1a      	lsrs	r2, r3, #8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3301      	adds	r3, #1
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	0c1b      	lsrs	r3, r3, #16
 8002128:	b2da      	uxtb	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	701a      	strb	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd90      	pop	{r4, r7, pc}

08002136 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002136:	b590      	push	{r4, r7, lr}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800213e:	f7ff fee9 	bl	8001f14 <LL_FLASH_GetUDN>
 8002142:	4602      	mov	r2, r0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d10d      	bne.n	800216e <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002152:	f000 ff39 	bl	8002fc8 <HAL_GetUIDw0>
 8002156:	4604      	mov	r4, r0
 8002158:	f000 ff40 	bl	8002fdc <HAL_GetUIDw1>
 800215c:	4603      	mov	r3, r0
 800215e:	405c      	eors	r4, r3
 8002160:	f000 ff46 	bl	8002ff0 <HAL_GetUIDw2>
 8002164:	4603      	mov	r3, r0
 8002166:	ea84 0203 	eor.w	r2, r4, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
	...

08002178 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af02      	add	r7, sp, #8
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	4618      	mov	r0, r3
 8002188:	f018 fc56 	bl	801aa38 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002192:	9200      	str	r2, [sp, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	@ (80021b4 <TimestampNow+0x3c>)
 8002196:	2110      	movs	r1, #16
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f81d 	bl	80021d8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fd ffea 	bl	8000178 <strlen>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	0801beb0 	.word	0x0801beb0

080021b8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80021bc:	2101      	movs	r1, #1
 80021be:	2002      	movs	r0, #2
 80021c0:	f018 faca 	bl	801a758 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80021cc:	2100      	movs	r1, #0
 80021ce:	2002      	movs	r0, #2
 80021d0:	f018 fac2 	bl	801a758 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80021d8:	b40c      	push	{r2, r3}
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80021ea:	6839      	ldr	r1, [r7, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f018 fd8d 	bl	801ad10 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002200:	b002      	add	sp, #8
 8002202:	4770      	bx	lr

08002204 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_GetTick+0x24>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800222a:	f000 f91d 	bl	8002468 <TIMER_IF_GetTimerValue>
 800222e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002230:	687b      	ldr	r3, [r7, #4]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000234 	.word	0x20000234

08002240 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f993 	bl	8002576 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800225c:	f000 fed2 	bl	8003004 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002260:	f000 fed6 	bl	8003010 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002264:	f000 feda 	bl	800301c <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <EnvSensors_Read+0x50>)
 8002276:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <EnvSensors_Read+0x54>)
 800227a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 800227c:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <EnvSensors_Read+0x58>)
 800227e:	60fb      	str	r3, [r7, #12]

  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002280:	f7fe ff0e 	bl	80010a0 <SYS_GetTemperatureLevel>
 8002284:	4603      	mov	r3, r0
 8002286:	121b      	asrs	r3, r3, #8
 8002288:	b21b      	sxth	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe faa2 	bl	80007d4 <__aeabi_i2f>
 8002290:	4603      	mov	r3, r0
 8002292:	613b      	str	r3, [r7, #16]

  sensor_data->humidity    = HUMIDITY_Value;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <EnvSensors_Read+0x5c>)
 80022aa:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a07      	ldr	r2, [pc, #28]	@ (80022cc <EnvSensors_Read+0x60>)
 80022b0:	611a      	str	r2, [r3, #16]

  return 0;
 80022b2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	42480000 	.word	0x42480000
 80022c0:	41900000 	.word	0x41900000
 80022c4:	447a0000 	.word	0x447a0000
 80022c8:	003e090d 	.word	0x003e090d
 80022cc:	000503ab 	.word	0x000503ab

080022d0 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80022da:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002312:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <TIMER_IF_Init+0x5c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f083 0301 	eor.w	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01b      	beq.n	8002358 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002320:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <TIMER_IF_Init+0x60>)
 8002322:	f04f 32ff 	mov.w	r2, #4294967295
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002328:	f7ff fc62 	bl	8001bf0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800232c:	f000 f856 	bl	80023dc <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002334:	480c      	ldr	r0, [pc, #48]	@ (8002368 <TIMER_IF_Init+0x60>)
 8002336:	f004 fe87 	bl	8007048 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <TIMER_IF_Init+0x60>)
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002342:	4809      	ldr	r0, [pc, #36]	@ (8002368 <TIMER_IF_Init+0x60>)
 8002344:	f004 ffbe 	bl	80072c4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002348:	2000      	movs	r0, #0
 800234a:	f000 f9d3 	bl	80026f4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800234e:	f000 f85f 	bl	8002410 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002352:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <TIMER_IF_Init+0x5c>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002358:	79fb      	ldrb	r3, [r7, #7]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000235 	.word	0x20000235
 8002368:	200001f0 	.word	0x200001f0

0800236c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	@ 0x38
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800237a:	f107 0308 	add.w	r3, r7, #8
 800237e:	222c      	movs	r2, #44	@ 0x2c
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f019 fcda 	bl	801bd3c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002388:	f000 f828 	bl	80023dc <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <TIMER_IF_StartTimer+0x68>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	43db      	mvns	r3, r3
 800239e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80023a4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023a8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80023aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	2201      	movs	r2, #1
 80023b6:	4619      	mov	r1, r3
 80023b8:	4807      	ldr	r0, [pc, #28]	@ (80023d8 <TIMER_IF_StartTimer+0x6c>)
 80023ba:	f004 fd39 	bl	8006e30 <HAL_RTC_SetAlarm_IT>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80023c4:	f7ff fbe6 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80023c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3738      	adds	r7, #56	@ 0x38
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000238 	.word	0x20000238
 80023d8:	200001f0 	.word	0x200001f0

080023dc <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80023e6:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <TIMER_IF_StopTimer+0x2c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023f0:	4806      	ldr	r0, [pc, #24]	@ (800240c <TIMER_IF_StopTimer+0x30>)
 80023f2:	f004 fe29 	bl	8007048 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <TIMER_IF_StopTimer+0x30>)
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80023fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40002800 	.word	0x40002800
 800240c:	200001f0 	.word	0x200001f0

08002410 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002414:	f000 f98e 	bl	8002734 <GetTimerTicks>
 8002418:	4603      	mov	r3, r0
 800241a:	4a03      	ldr	r2, [pc, #12]	@ (8002428 <TIMER_IF_SetTimerContext+0x18>)
 800241c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800241e:	4b02      	ldr	r3, [pc, #8]	@ (8002428 <TIMER_IF_SetTimerContext+0x18>)
 8002420:	681b      	ldr	r3, [r3, #0]
}
 8002422:	4618      	mov	r0, r3
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000238 	.word	0x20000238

0800242c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002430:	4b02      	ldr	r3, [pc, #8]	@ (800243c <TIMER_IF_GetTimerContext+0x10>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	20000238 	.word	0x20000238

08002440 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800244a:	f000 f973 	bl	8002734 <GetTimerTicks>
 800244e:	4602      	mov	r2, r0
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000238 	.word	0x20000238

08002468 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <TIMER_IF_GetTimerValue+0x24>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800247a:	f000 f95b 	bl	8002734 <GetTimerTicks>
 800247e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002480:	687b      	ldr	r3, [r7, #4]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000235 	.word	0x20000235

08002490 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800249a:	2303      	movs	r3, #3
 800249c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800249e:	687b      	ldr	r3, [r7, #4]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80024aa:	b5b0      	push	{r4, r5, r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024b2:	2100      	movs	r1, #0
 80024b4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	2000      	movs	r0, #0
 80024ba:	460a      	mov	r2, r1
 80024bc:	4603      	mov	r3, r0
 80024be:	0d95      	lsrs	r5, r2, #22
 80024c0:	0294      	lsls	r4, r2, #10
 80024c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	4620      	mov	r0, r4
 80024cc:	4629      	mov	r1, r5
 80024ce:	f7fe fb6b 	bl	8000ba8 <__aeabi_uldivmod>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4613      	mov	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bdb0      	pop	{r4, r5, r7, pc}

080024e4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80024e4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024ee:	2100      	movs	r1, #0
 80024f0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	2000      	movs	r0, #0
 80024f6:	460c      	mov	r4, r1
 80024f8:	4605      	mov	r5, r0
 80024fa:	4620      	mov	r0, r4
 80024fc:	4629      	mov	r1, r5
 80024fe:	f04f 0a00 	mov.w	sl, #0
 8002502:	f04f 0b00 	mov.w	fp, #0
 8002506:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800250a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800250e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002512:	4650      	mov	r0, sl
 8002514:	4659      	mov	r1, fp
 8002516:	1b02      	subs	r2, r0, r4
 8002518:	eb61 0305 	sbc.w	r3, r1, r5
 800251c:	f04f 0000 	mov.w	r0, #0
 8002520:	f04f 0100 	mov.w	r1, #0
 8002524:	0099      	lsls	r1, r3, #2
 8002526:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800252a:	0090      	lsls	r0, r2, #2
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	eb12 0804 	adds.w	r8, r2, r4
 8002534:	eb43 0905 	adc.w	r9, r3, r5
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002544:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002548:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800254c:	4690      	mov	r8, r2
 800254e:	4699      	mov	r9, r3
 8002550:	4640      	mov	r0, r8
 8002552:	4649      	mov	r1, r9
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	0a82      	lsrs	r2, r0, #10
 800255e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002562:	0a8b      	lsrs	r3, r1, #10
 8002564:	4613      	mov	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002574:	4770      	bx	lr

08002576 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff93 	bl	80024aa <TIMER_IF_Convert_ms2Tick>
 8002584:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002586:	f000 f8d5 	bl	8002734 <GetTimerTicks>
 800258a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800258c:	e000      	b.n	8002590 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800258e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002590:	f000 f8d0 	bl	8002734 <GetTimerTicks>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8f6      	bhi.n	800258e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80025b2:	f018 ffdb 	bl	801b56c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80025c6:	f000 f8a5 	bl	8002714 <TIMER_IF_BkUp_Read_MSBticks>
 80025ca:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3301      	adds	r3, #1
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 f88f 	bl	80026f4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80025de:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e2:	b08c      	sub	sp, #48	@ 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80025ec:	f000 f8a2 	bl	8002734 <GetTimerTicks>
 80025f0:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80025f2:	f000 f88f 	bl	8002714 <TIMER_IF_BkUp_Read_MSBticks>
 80025f6:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	2200      	movs	r2, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	60fa      	str	r2, [r7, #12]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	000b      	movs	r3, r1
 800260c:	2200      	movs	r2, #0
 800260e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002610:	2000      	movs	r0, #0
 8002612:	460c      	mov	r4, r1
 8002614:	4605      	mov	r5, r0
 8002616:	eb12 0804 	adds.w	r8, r2, r4
 800261a:	eb43 0905 	adc.w	r9, r3, r5
 800261e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002622:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	0a82      	lsrs	r2, r0, #10
 8002630:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002634:	0a8b      	lsrs	r3, r1, #10
 8002636:	4613      	mov	r3, r2
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2200      	movs	r2, #0
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002648:	f04f 0b00 	mov.w	fp, #0
 800264c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff46 	bl	80024e4 <TIMER_IF_Convert_Tick2ms>
 8002658:	4603      	mov	r3, r0
 800265a:	b29a      	uxth	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002662:	4618      	mov	r0, r3
 8002664:	3730      	adds	r7, #48	@ 0x30
 8002666:	46bd      	mov	sp, r7
 8002668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800266c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	2100      	movs	r1, #0
 8002678:	4803      	ldr	r0, [pc, #12]	@ (8002688 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800267a:	f004 feb5 	bl	80073e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200001f0 	.word	0x200001f0

0800268c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	2101      	movs	r1, #1
 8002698:	4803      	ldr	r0, [pc, #12]	@ (80026a8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800269a:	f004 fea5 	bl	80073e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200001f0 	.word	0x200001f0

080026ac <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80026b6:	2100      	movs	r1, #0
 80026b8:	4804      	ldr	r0, [pc, #16]	@ (80026cc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80026ba:	f004 fead 	bl	8007418 <HAL_RTCEx_BKUPRead>
 80026be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200001f0 	.word	0x200001f0

080026d0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80026da:	2101      	movs	r1, #1
 80026dc:	4804      	ldr	r0, [pc, #16]	@ (80026f0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80026de:	f004 fe9b 	bl	8007418 <HAL_RTCEx_BKUPRead>
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80026e4:	687b      	ldr	r3, [r7, #4]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200001f0 	.word	0x200001f0

080026f4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	2102      	movs	r1, #2
 8002700:	4803      	ldr	r0, [pc, #12]	@ (8002710 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002702:	f004 fe71 	bl	80073e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200001f0 	.word	0x200001f0

08002714 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800271a:	2102      	movs	r1, #2
 800271c:	4804      	ldr	r0, [pc, #16]	@ (8002730 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800271e:	f004 fe7b 	bl	8007418 <HAL_RTCEx_BKUPRead>
 8002722:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002724:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200001f0 	.word	0x200001f0

08002734 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800273a:	480b      	ldr	r0, [pc, #44]	@ (8002768 <GetTimerTicks+0x34>)
 800273c:	f7ff fdd9 	bl	80022f2 <LL_RTC_TIME_GetSubSecond>
 8002740:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002742:	e003      	b.n	800274c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002744:	4808      	ldr	r0, [pc, #32]	@ (8002768 <GetTimerTicks+0x34>)
 8002746:	f7ff fdd4 	bl	80022f2 <LL_RTC_TIME_GetSubSecond>
 800274a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800274c:	4806      	ldr	r0, [pc, #24]	@ (8002768 <GetTimerTicks+0x34>)
 800274e:	f7ff fdd0 	bl	80022f2 <LL_RTC_TIME_GetSubSecond>
 8002752:	4602      	mov	r2, r0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4293      	cmp	r3, r2
 8002758:	d1f4      	bne.n	8002744 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40002800 	.word	0x40002800

0800276c <LL_AHB2_GRP1_EnableClock>:
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002778:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800277a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4313      	orrs	r3, r2
 8002782:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002788:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002790:	68fb      	ldr	r3, [r7, #12]
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <LL_APB1_GRP1_EnableClock>:
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027c0:	68fb      	ldr	r3, [r7, #12]
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <LL_APB1_GRP1_DisableClock>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	43db      	mvns	r3, r3
 80027de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027e2:	4013      	ands	r3, r2
 80027e4:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <LL_APB2_GRP1_EnableClock>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4313      	orrs	r3, r2
 8002806:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002814:	68fb      	ldr	r3, [r7, #12]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <LL_APB2_GRP1_DisableClock>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	43db      	mvns	r3, r3
 8002832:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002836:	4013      	ands	r3, r2
 8002838:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002848:	4b22      	ldr	r3, [pc, #136]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 800284a:	4a23      	ldr	r2, [pc, #140]	@ (80028d8 <MX_USART2_UART_Init+0x94>)
 800284c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800284e:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 8002850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002856:	4b1f      	ldr	r3, [pc, #124]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800285c:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002862:	4b1c      	ldr	r3, [pc, #112]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002868:	4b1a      	ldr	r3, [pc, #104]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 800286a:	220c      	movs	r2, #12
 800286c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286e:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002874:	4b17      	ldr	r3, [pc, #92]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800287a:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 800287c:	2200      	movs	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002880:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 8002882:	2200      	movs	r2, #0
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002886:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 8002888:	2200      	movs	r2, #0
 800288a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800288c:	4811      	ldr	r0, [pc, #68]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 800288e:	f005 fac4 	bl	8007e1a <HAL_UART_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002898:	f7ff f97c 	bl	8001b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800289c:	2100      	movs	r1, #0
 800289e:	480d      	ldr	r0, [pc, #52]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 80028a0:	f007 fbea 	bl	800a078 <HAL_UARTEx_SetTxFifoThreshold>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028aa:	f7ff f973 	bl	8001b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ae:	2100      	movs	r1, #0
 80028b0:	4808      	ldr	r0, [pc, #32]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 80028b2:	f007 fc1f 	bl	800a0f4 <HAL_UARTEx_SetRxFifoThreshold>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028bc:	f7ff f96a 	bl	8001b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028c0:	4804      	ldr	r0, [pc, #16]	@ (80028d4 <MX_USART2_UART_Init+0x90>)
 80028c2:	f007 fba1 	bl	800a008 <HAL_UARTEx_DisableFifoMode>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028cc:	f7ff f962 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200002d0 	.word	0x200002d0
 80028d8:	40004400 	.word	0x40004400

080028dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b096      	sub	sp, #88	@ 0x58
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028f4:	f107 030c 	add.w	r3, r7, #12
 80028f8:	2238      	movs	r2, #56	@ 0x38
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f019 fa1d 	bl	801bd3c <memset>
  if(uartHandle->Instance==USART1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a68      	ldr	r2, [pc, #416]	@ (8002aa8 <HAL_UART_MspInit+0x1cc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d16c      	bne.n	80029e6 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800290c:	2301      	movs	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002910:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002914:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	4618      	mov	r0, r3
 800291c:	f004 f8ec 	bl	8006af8 <HAL_RCCEx_PeriphCLKConfig>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002926:	f7ff f935 	bl	8001b94 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800292a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800292e:	f7ff ff5f 	bl	80027f0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	2001      	movs	r0, #1
 8002934:	f7ff ff1a 	bl	800276c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002938:	2002      	movs	r0, #2
 800293a:	f7ff ff17 	bl	800276c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 800293e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002942:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002950:	2307      	movs	r3, #7
 8002952:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002954:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800295e:	f002 fae5 	bl	8004f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002962:	2340      	movs	r3, #64	@ 0x40
 8002964:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002972:	2307      	movs	r3, #7
 8002974:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800297a:	4619      	mov	r1, r3
 800297c:	484b      	ldr	r0, [pc, #300]	@ (8002aac <HAL_UART_MspInit+0x1d0>)
 800297e:	f002 fad5 	bl	8004f2c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002982:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 8002984:	4a4b      	ldr	r2, [pc, #300]	@ (8002ab4 <HAL_UART_MspInit+0x1d8>)
 8002986:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002988:	4b49      	ldr	r3, [pc, #292]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 800298a:	2212      	movs	r2, #18
 800298c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800298e:	4b48      	ldr	r3, [pc, #288]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 8002990:	2210      	movs	r2, #16
 8002992:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002994:	4b46      	ldr	r3, [pc, #280]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800299a:	4b45      	ldr	r3, [pc, #276]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 800299c:	2280      	movs	r2, #128	@ 0x80
 800299e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a0:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a6:	4b42      	ldr	r3, [pc, #264]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029ac:	4b40      	ldr	r3, [pc, #256]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029b2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029b8:	483d      	ldr	r0, [pc, #244]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 80029ba:	f001 fcb3 	bl	8004324 <HAL_DMA_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 80029c4:	f7ff f8e6 	bl	8001b94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a39      	ldr	r2, [pc, #228]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 80029cc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029ce:	4a38      	ldr	r2, [pc, #224]	@ (8002ab0 <HAL_UART_MspInit+0x1d4>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2102      	movs	r1, #2
 80029d8:	2024      	movs	r0, #36	@ 0x24
 80029da:	f001 fc6c 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029de:	2024      	movs	r0, #36	@ 0x24
 80029e0:	f001 fc83 	bl	80042ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029e4:	e05c      	b.n	8002aa0 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a33      	ldr	r2, [pc, #204]	@ (8002ab8 <HAL_UART_MspInit+0x1dc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d157      	bne.n	8002aa0 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029f0:	2302      	movs	r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029f4:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80029f8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 f87a 	bl	8006af8 <HAL_RCCEx_PeriphCLKConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002a0a:	f7ff f8c3 	bl	8001b94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a0e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002a12:	f7ff fec3 	bl	800279c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7ff fea8 	bl	800276c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a2c:	2307      	movs	r3, #7
 8002a2e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a3a:	f002 fa77 	bl	8004f2c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a40:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac0 <HAL_UART_MspInit+0x1e4>)
 8002a42:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a46:	2214      	movs	r2, #20
 8002a48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a56:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a5c:	4b17      	ldr	r3, [pc, #92]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a62:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a68:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a6e:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a74:	4811      	ldr	r0, [pc, #68]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a76:	f001 fc55 	bl	8004324 <HAL_DMA_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002a80:	f7ff f888 	bl	8001b94 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0d      	ldr	r2, [pc, #52]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a88:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002abc <HAL_UART_MspInit+0x1e0>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a90:	2200      	movs	r2, #0
 8002a92:	2100      	movs	r1, #0
 8002a94:	2025      	movs	r0, #37	@ 0x25
 8002a96:	f001 fc0e 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a9a:	2025      	movs	r0, #37	@ 0x25
 8002a9c:	f001 fc25 	bl	80042ea <HAL_NVIC_EnableIRQ>
}
 8002aa0:	bf00      	nop
 8002aa2:	3758      	adds	r7, #88	@ 0x58
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	48000400 	.word	0x48000400
 8002ab0:	20000364 	.word	0x20000364
 8002ab4:	40020008 	.word	0x40020008
 8002ab8:	40004400 	.word	0x40004400
 8002abc:	200003c4 	.word	0x200003c4
 8002ac0:	4002001c 	.word	0x4002001c

08002ac4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a19      	ldr	r2, [pc, #100]	@ (8002b38 <HAL_UART_MspDeInit+0x74>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d116      	bne.n	8002b04 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002ad6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002ada:	f7ff fea1 	bl	8002820 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(RS485_RX_GPIO_Port, RS485_RX_Pin);
 8002ade:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ae6:	f002 fb81 	bl	80051ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(RS485_TX_GPIO_Port, RS485_TX_Pin);
 8002aea:	2140      	movs	r1, #64	@ 0x40
 8002aec:	4813      	ldr	r0, [pc, #76]	@ (8002b3c <HAL_UART_MspDeInit+0x78>)
 8002aee:	f002 fb7d 	bl	80051ec <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 fcbc 	bl	8004474 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002afc:	2024      	movs	r0, #36	@ 0x24
 8002afe:	f001 fc02 	bl	8004306 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002b02:	e015      	b.n	8002b30 <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	@ (8002b40 <HAL_UART_MspDeInit+0x7c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d110      	bne.n	8002b30 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002b0e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002b12:	f7ff fe5b 	bl	80027cc <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002b16:	210c      	movs	r1, #12
 8002b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b1c:	f002 fb66 	bl	80051ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 fca5 	bl	8004474 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002b2a:	2025      	movs	r0, #37	@ 0x25
 8002b2c:	f001 fbeb 	bl	8004306 <HAL_NVIC_DisableIRQ>
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	48000400 	.word	0x48000400
 8002b40:	40004400 	.word	0x40004400

08002b44 <LL_APB1_GRP1_ForceReset>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <LL_APB1_GRP1_ReleaseReset>:
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002b94:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002b96:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002b9a:	4905      	ldr	r1, [pc, #20]	@ (8002bb0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	58000800 	.word	0x58000800

08002bb4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002bbc:	4a07      	ldr	r2, [pc, #28]	@ (8002bdc <vcom_Init+0x28>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002bc2:	f7fe fb71 	bl	80012a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002bc6:	f7ff fe3d 	bl	8002844 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002bca:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002bce:	f7ff ffdd 	bl	8002b8c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002bd2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000428 	.word	0x20000428

08002be0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002be4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002be8:	f7ff ffac 	bl	8002b44 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002bec:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002bf0:	f7ff ffb9 	bl	8002b66 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002bf4:	4804      	ldr	r0, [pc, #16]	@ (8002c08 <vcom_DeInit+0x28>)
 8002bf6:	f7ff ff65 	bl	8002ac4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002bfa:	200f      	movs	r0, #15
 8002bfc:	f001 fb83 	bl	8004306 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002c00:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200002d0 	.word	0x200002d0

08002c0c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4804      	ldr	r0, [pc, #16]	@ (8002c30 <vcom_Trace_DMA+0x24>)
 8002c20:	f005 f998 	bl	8007f54 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002c24:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200002d0 	.word	0x200002d0

08002c34 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002c3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <vcom_ReceiveInit+0x70>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002c42:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c46:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002c48:	f107 0308 	add.w	r3, r7, #8
 8002c4c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c50:	4815      	ldr	r0, [pc, #84]	@ (8002ca8 <vcom_ReceiveInit+0x74>)
 8002c52:	f007 f94c 	bl	8009eee <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002c56:	bf00      	nop
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <vcom_ReceiveInit+0x74>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c66:	d0f7      	beq.n	8002c58 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002c68:	bf00      	nop
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <vcom_ReceiveInit+0x74>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c78:	d1f7      	bne.n	8002c6a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <vcom_ReceiveInit+0x74>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <vcom_ReceiveInit+0x74>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002c88:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002c8a:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <vcom_ReceiveInit+0x74>)
 8002c8c:	f007 f98a 	bl	8009fa4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002c90:	2201      	movs	r2, #1
 8002c92:	4906      	ldr	r1, [pc, #24]	@ (8002cac <vcom_ReceiveInit+0x78>)
 8002c94:	4804      	ldr	r0, [pc, #16]	@ (8002ca8 <vcom_ReceiveInit+0x74>)
 8002c96:	f005 f911 	bl	8007ebc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002c9a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	2000042c 	.word	0x2000042c
 8002ca8:	200002d0 	.word	0x200002d0
 8002cac:	20000424 	.word	0x20000424

08002cb0 <vcom_Resume>:

void vcom_Resume(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cb4:	4808      	ldr	r0, [pc, #32]	@ (8002cd8 <vcom_Resume+0x28>)
 8002cb6:	f005 f8b0 	bl	8007e1a <HAL_UART_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002cc0:	f7fe ff68 	bl	8001b94 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002cc4:	4805      	ldr	r0, [pc, #20]	@ (8002cdc <vcom_Resume+0x2c>)
 8002cc6:	f001 fb2d 	bl	8004324 <HAL_DMA_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002cd0:	f7fe ff60 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	200002d0 	.word	0x200002d0
 8002cdc:	200003c4 	.word	0x200003c4

08002ce0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a05      	ldr	r2, [pc, #20]	@ (8002d04 <HAL_UART_TxCpltCallback+0x24>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d103      	bne.n	8002cfa <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_UART_TxCpltCallback+0x28>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40004400 	.word	0x40004400
 8002d08:	20000428 	.word	0x20000428

08002d0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0d      	ldr	r2, [pc, #52]	@ (8002d50 <HAL_UART_RxCpltCallback+0x44>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d113      	bne.n	8002d46 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <HAL_UART_RxCpltCallback+0x48>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_UART_RxCpltCallback+0x30>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <HAL_UART_RxCpltCallback+0x48>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	2101      	movs	r1, #1
 8002d38:	4807      	ldr	r0, [pc, #28]	@ (8002d58 <HAL_UART_RxCpltCallback+0x4c>)
 8002d3a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4906      	ldr	r1, [pc, #24]	@ (8002d58 <HAL_UART_RxCpltCallback+0x4c>)
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f005 f8bb 	bl	8007ebc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40004400 	.word	0x40004400
 8002d54:	2000042c 	.word	0x2000042c
 8002d58:	20000424 	.word	0x20000424

08002d5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d5c:	480d      	ldr	r0, [pc, #52]	@ (8002d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d60:	f7ff fac1 	bl	80022e6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d64:	480c      	ldr	r0, [pc, #48]	@ (8002d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d66:	490d      	ldr	r1, [pc, #52]	@ (8002d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d68:	4a0d      	ldr	r2, [pc, #52]	@ (8002da0 <LoopForever+0xe>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d6c:	e002      	b.n	8002d74 <LoopCopyDataInit>

08002d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d72:	3304      	adds	r3, #4

08002d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d78:	d3f9      	bcc.n	8002d6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002da8 <LoopForever+0x16>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d80:	e001      	b.n	8002d86 <LoopFillZerobss>

08002d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d84:	3204      	adds	r2, #4

08002d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d88:	d3fb      	bcc.n	8002d82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d8a:	f018 ffdf 	bl	801bd4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d8e:	f7fe fe89 	bl	8001aa4 <main>

08002d92 <LoopForever>:

LoopForever:
    b LoopForever
 8002d92:	e7fe      	b.n	8002d92 <LoopForever>
  ldr   r0, =_estack
 8002d94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d9c:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002da0:	0801c7a8 	.word	0x0801c7a8
  ldr r2, =_sbss
 8002da4:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002da8:	20002320 	.word	0x20002320

08002dac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC_IRQHandler>

08002dae <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	60da      	str	r2, [r3, #12]
 8002dc0:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dda:	f002 f8a7 	bl	8004f2c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002dde:	2320      	movs	r3, #32
 8002de0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dea:	f002 f89f 	bl	8004f2c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002dee:	2200      	movs	r2, #0
 8002df0:	2120      	movs	r1, #32
 8002df2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002df6:	f002 fac7 	bl	8005388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e02:	f002 fac1 	bl	8005388 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d83f      	bhi.n	8002ea0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002e20:	a201      	add	r2, pc, #4	@ (adr r2, 8002e28 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e53 	.word	0x08002e53
 8002e30:	08002e6d 	.word	0x08002e6d
 8002e34:	08002e87 	.word	0x08002e87
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2110      	movs	r1, #16
 8002e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e40:	f002 faa2 	bl	8005388 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002e44:	2200      	movs	r2, #0
 8002e46:	2120      	movs	r1, #32
 8002e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e4c:	f002 fa9c 	bl	8005388 <HAL_GPIO_WritePin>
      break;      
 8002e50:	e027      	b.n	8002ea2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e52:	2201      	movs	r2, #1
 8002e54:	2110      	movs	r1, #16
 8002e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e5a:	f002 fa95 	bl	8005388 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2120      	movs	r1, #32
 8002e62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e66:	f002 fa8f 	bl	8005388 <HAL_GPIO_WritePin>
      break;
 8002e6a:	e01a      	b.n	8002ea2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2110      	movs	r1, #16
 8002e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e74:	f002 fa88 	bl	8005388 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2120      	movs	r1, #32
 8002e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e80:	f002 fa82 	bl	8005388 <HAL_GPIO_WritePin>
      break;
 8002e84:	e00d      	b.n	8002ea2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e86:	2200      	movs	r2, #0
 8002e88:	2110      	movs	r1, #16
 8002e8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e8e:	f002 fa7b 	bl	8005388 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e92:	2201      	movs	r2, #1
 8002e94:	2120      	movs	r1, #32
 8002e96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e9a:	f002 fa75 	bl	8005388 <HAL_GPIO_WritePin>
      break;
 8002e9e:	e000      	b.n	8002ea2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002ea0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002eb0:	2302      	movs	r3, #2
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002ecc:	2301      	movs	r3, #1
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d102      	bne.n	8002eec <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002ee6:	230f      	movs	r3, #15
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e001      	b.n	8002ef0 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002eec:	2316      	movs	r3, #22
 8002eee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4a03      	ldr	r2, [pc, #12]	@ (8002f14 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	6053      	str	r3, [r2, #4]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	e0042000 	.word	0xe0042000

08002f18 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f1c:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a03      	ldr	r2, [pc, #12]	@ (8002f30 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f22:	f023 0302 	bic.w	r3, r3, #2
 8002f26:	6053      	str	r3, [r2, #4]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	e0042000 	.word	0xe0042000

08002f34 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f38:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a03      	ldr	r2, [pc, #12]	@ (8002f4c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f3e:	f023 0304 	bic.w	r3, r3, #4
 8002f42:	6053      	str	r3, [r2, #4]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	e0042000 	.word	0xe0042000

08002f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f5a:	2003      	movs	r0, #3
 8002f5c:	f001 f9a0 	bl	80042a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f60:	f003 fbec 	bl	800673c <HAL_RCC_GetHCLKFreq>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <HAL_Init+0x3c>)
 8002f68:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f6a:	200f      	movs	r0, #15
 8002f6c:	f7ff f94a 	bl	8002204 <HAL_InitTick>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	71fb      	strb	r3, [r7, #7]
 8002f7a:	e001      	b.n	8002f80 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f7c:	f7fe ff01 	bl	8001d82 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f80:	79fb      	ldrb	r3, [r7, #7]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000

08002f90 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f94:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <HAL_SuspendTick+0x18>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a03      	ldr	r2, [pc, #12]	@ (8002fa8 <HAL_SuspendTick+0x18>)
 8002f9a:	f023 0302 	bic.w	r3, r3, #2
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e010 	.word	0xe000e010

08002fac <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002fb0:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <HAL_ResumeTick+0x18>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a03      	ldr	r2, [pc, #12]	@ (8002fc4 <HAL_ResumeTick+0x18>)
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002fcc:	4b02      	ldr	r3, [pc, #8]	@ (8002fd8 <HAL_GetUIDw0+0x10>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	1fff7590 	.word	0x1fff7590

08002fdc <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002fe0:	4b02      	ldr	r3, [pc, #8]	@ (8002fec <HAL_GetUIDw1+0x10>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	1fff7594 	.word	0x1fff7594

08002ff0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002ff4:	4b02      	ldr	r3, [pc, #8]	@ (8003000 <HAL_GetUIDw2+0x10>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	1fff7598 	.word	0x1fff7598

08003004 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003008:	f7ff ff78 	bl	8002efc <LL_DBGMCU_DisableDBGSleepMode>
}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003014:	f7ff ff80 	bl	8002f18 <LL_DBGMCU_DisableDBGStopMode>
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003020:	f7ff ff88 	bl	8002f34 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}

08003028 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2107      	movs	r1, #7
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	401a      	ands	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	431a      	orrs	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2107      	movs	r1, #7
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	210f      	movs	r1, #15
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	401a      	ands	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	0e9b      	lsrs	r3, r3, #26
 800311a:	f003 010f 	and.w	r1, r3, #15
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003170:	43db      	mvns	r3, r3
 8003172:	401a      	ands	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	43db      	mvns	r3, r3
 8003198:	401a      	ands	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	0219      	lsls	r1, r3, #8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	400b      	ands	r3, r1
 80031a2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80031a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031aa:	431a      	orrs	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031ca:	f023 0317 	bic.w	r3, r3, #23
 80031ce:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031f0:	f023 0317 	bic.w	r3, r3, #23
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6093      	str	r3, [r2, #8]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003216:	d101      	bne.n	800321c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003238:	f023 0317 	bic.w	r3, r3, #23
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800325e:	f023 0317 	bic.w	r3, r3, #23
 8003262:	f043 0202 	orr.w	r2, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <LL_ADC_IsEnabled+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_IsEnabled+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d101      	bne.n	80032b0 <LL_ADC_IsDisableOngoing+0x18>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <LL_ADC_IsDisableOngoing+0x1a>
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032cc:	f023 0317 	bic.w	r3, r3, #23
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032f2:	f023 0317 	bic.w	r3, r3, #23
 80032f6:	f043 0210 	orr.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d101      	bne.n	8003320 <LL_ADC_REG_IsConversionOngoing+0x18>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e17e      	b.n	800364c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fd fe49 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff44 	bl	8003202 <LL_ADC_IsInternalRegulatorEnabled>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d115      	bne.n	80033ac <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff18 	bl	80031ba <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800338a:	4b9e      	ldr	r3, [pc, #632]	@ (8003604 <HAL_ADC_Init+0x2d8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	4a9d      	ldr	r2, [pc, #628]	@ (8003608 <HAL_ADC_Init+0x2dc>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	3301      	adds	r3, #1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800339e:	e002      	b.n	80033a6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f9      	bne.n	80033a0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff26 	bl	8003202 <LL_ADC_IsInternalRegulatorEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10d      	bne.n	80033d8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	f043 0210 	orr.w	r2, r3, #16
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff93 	bl	8003308 <LL_ADC_REG_IsConversionOngoing>
 80033e2:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 8124 	bne.w	800363a <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 8120 	bne.w	800363a <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ff30 	bl	8003274 <LL_ADC_IsEnabled>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 80a7 	bne.w	800356a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7e1b      	ldrb	r3, [r3, #24]
 8003424:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003426:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7e5b      	ldrb	r3, [r3, #25]
 800342c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800342e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7e9b      	ldrb	r3, [r3, #26]
 8003434:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003436:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800343c:	2a00      	cmp	r2, #0
 800343e:	d002      	beq.n	8003446 <HAL_ADC_Init+0x11a>
 8003440:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003444:	e000      	b.n	8003448 <HAL_ADC_Init+0x11c>
 8003446:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003448:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800344e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	da04      	bge.n	8003462 <HAL_ADC_Init+0x136>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003460:	e001      	b.n	8003466 <HAL_ADC_Init+0x13a>
 8003462:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003466:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800346e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003470:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d114      	bne.n	80034ac <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7e9b      	ldrb	r3, [r3, #26]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	e00b      	b.n	80034ac <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034c0:	4313      	orrs	r3, r2
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80034d2:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	430b      	orrs	r3, r1
 80034de:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034ec:	4313      	orrs	r3, r2
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d111      	bne.n	8003522 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800350a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003510:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003516:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	4b38      	ldr	r3, [pc, #224]	@ (800360c <HAL_ADC_Init+0x2e0>)
 800352a:	4013      	ands	r3, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	6979      	ldr	r1, [r7, #20]
 8003532:	430b      	orrs	r3, r1
 8003534:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800353e:	d014      	beq.n	800356a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003548:	d00f      	beq.n	800356a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800354e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003552:	d00a      	beq.n	800356a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003554:	4b2e      	ldr	r3, [pc, #184]	@ (8003610 <HAL_ADC_Init+0x2e4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003564:	492a      	ldr	r1, [pc, #168]	@ (8003610 <HAL_ADC_Init+0x2e4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003572:	461a      	mov	r2, r3
 8003574:	2100      	movs	r1, #0
 8003576:	f7ff fd76 	bl	8003066 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003582:	461a      	mov	r2, r3
 8003584:	4923      	ldr	r1, [pc, #140]	@ (8003614 <HAL_ADC_Init+0x2e8>)
 8003586:	f7ff fd6e 	bl	8003066 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d108      	bne.n	80035a4 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f062 020f 	orn	r2, r2, #15
 80035a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80035a2:	e017      	b.n	80035d4 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035ac:	d112      	bne.n	80035d4 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	f003 031c 	and.w	r3, r3, #28
 80035c0:	f06f 020f 	mvn.w	r2, #15
 80035c4:	fa02 f103 	lsl.w	r1, r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2100      	movs	r1, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fd61 	bl	80030a2 <LL_ADC_GetSamplingTimeCommonChannels>
 80035e0:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d116      	bne.n	8003618 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f4:	f023 0303 	bic.w	r3, r3, #3
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003600:	e023      	b.n	800364a <HAL_ADC_Init+0x31e>
 8003602:	bf00      	nop
 8003604:	20000000 	.word	0x20000000
 8003608:	053e2d63 	.word	0x053e2d63
 800360c:	1ffffc02 	.word	0x1ffffc02
 8003610:	40012708 	.word	0x40012708
 8003614:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361c:	f023 0312 	bic.w	r3, r3, #18
 8003620:	f043 0210 	orr.w	r2, r3, #16
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003638:	e007      	b.n	800364a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	f043 0210 	orr.w	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800364a:	7ffb      	ldrb	r3, [r7, #31]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07a      	b.n	800375c <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	f043 0202 	orr.w	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 face 	bl	8003c14 <ADC_ConversionStop>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10f      	bne.n	80036a2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb92 	bl	8003dac <ADC_Disable>
 8003688:	4603      	mov	r3, r0
 800368a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fd9f 	bl	80031e0 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 80036b0:	f023 0303 	bic.w	r3, r3, #3
 80036b4:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f240 329f 	movw	r2, #927	@ 0x39f
 80036be:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68d9      	ldr	r1, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4b26      	ldr	r3, [pc, #152]	@ (8003764 <HAL_ADC_DeInit+0x110>)
 80036cc:	400b      	ands	r3, r1
 80036ce:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0207 	bic.w	r2, r2, #7
 80036de:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a1a      	ldr	r2, [r3, #32]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80036fc:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800371c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800372c:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800372e:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_ADC_DeInit+0x114>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a0d      	ldr	r2, [pc, #52]	@ (8003768 <HAL_ADC_DeInit+0x114>)
 8003734:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003738:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fc88 	bl	8001050 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	833e0200 	.word	0x833e0200
 8003768:	40012708 	.word	0x40012708

0800376c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fdc5 	bl	8003308 <LL_ADC_REG_IsConversionOngoing>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d132      	bne.n	80037ea <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_ADC_Start+0x26>
 800378e:	2302      	movs	r3, #2
 8003790:	e02e      	b.n	80037f0 <HAL_ADC_Start+0x84>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa80 	bl	8003ca0 <ADC_Enable>
 80037a0:	4603      	mov	r3, r0
 80037a2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11a      	bne.n	80037e0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	221c      	movs	r2, #28
 80037ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fd6f 	bl	80032bc <LL_ADC_REG_StartConversion>
 80037de:	e006      	b.n	80037ee <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80037e8:	e001      	b.n	80037ee <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
 80037ec:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_ADC_Stop+0x16>
 800380a:	2302      	movs	r3, #2
 800380c:	e022      	b.n	8003854 <HAL_ADC_Stop+0x5c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9fc 	bl	8003c14 <ADC_ConversionStop>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d111      	bne.n	800384a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fac0 	bl	8003dac <ADC_Disable>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b08      	cmp	r3, #8
 800386c:	d102      	bne.n	8003874 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800386e:	2308      	movs	r3, #8
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e010      	b.n	8003896 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003886:	f043 0220 	orr.w	r2, r3, #32
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e077      	b.n	8003982 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003892:	2304      	movs	r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003896:	f7fe fcbf 	bl	8002218 <HAL_GetTick>
 800389a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800389c:	e021      	b.n	80038e2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d01d      	beq.n	80038e2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80038a6:	f7fe fcb7 	bl	8002218 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d302      	bcc.n	80038bc <HAL_ADC_PollForConversion+0x60>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d112      	bne.n	80038e2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	f043 0204 	orr.w	r2, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e04f      	b.n	8003982 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0d6      	beq.n	800389e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fbe6 	bl	80030d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d031      	beq.n	8003970 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7e9b      	ldrb	r3, [r3, #26]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d12d      	bne.n	8003970 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b08      	cmp	r3, #8
 8003920:	d126      	bne.n	8003970 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fcee 	bl	8003308 <LL_ADC_REG_IsConversionOngoing>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d112      	bne.n	8003958 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 020c 	bic.w	r2, r2, #12
 8003940:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	659a      	str	r2, [r3, #88]	@ 0x58
 8003956:	e00b      	b.n	8003970 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7e1b      	ldrb	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	220c      	movs	r2, #12
 800397e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x28>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e110      	b.n	8003bee <HAL_ADC_ConfigChannel+0x24a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fc95 	bl	8003308 <LL_ADC_REG_IsConversionOngoing>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 80f7 	bne.w	8003bd4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	f000 80b1 	beq.w	8003b52 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039f8:	d004      	beq.n	8003a04 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039fe:	4a7e      	ldr	r2, [pc, #504]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x254>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d108      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7ff fb92 	bl	8003138 <LL_ADC_REG_SetSequencerChAdd>
 8003a14:	e041      	b.n	8003a9a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	210f      	movs	r1, #15
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0xa0>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	e011      	b.n	8003a68 <HAL_ADC_ConfigChannel+0xc4>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e003      	b.n	8003a68 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	6849      	ldr	r1, [r1, #4]
 8003a6c:	f001 011f 	and.w	r1, r1, #31
 8003a70:	408b      	lsls	r3, r1
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d808      	bhi.n	8003a9a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	f7ff fb2e 	bl	80030f6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f7ff fb6b 	bl	8003182 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f280 8097 	bge.w	8003be4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab6:	4851      	ldr	r0, [pc, #324]	@ (8003bfc <HAL_ADC_ConfigChannel+0x258>)
 8003ab8:	f7ff fac8 	bl	800304c <LL_ADC_GetCommonPathInternalCh>
 8003abc:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8003c00 <HAL_ADC_ConfigChannel+0x25c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d120      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11b      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4848      	ldr	r0, [pc, #288]	@ (8003bfc <HAL_ADC_ConfigChannel+0x258>)
 8003adc:	f7ff faa4 	bl	8003028 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ae0:	4b48      	ldr	r3, [pc, #288]	@ (8003c04 <HAL_ADC_ConfigChannel+0x260>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	099b      	lsrs	r3, r3, #6
 8003ae6:	4a48      	ldr	r2, [pc, #288]	@ (8003c08 <HAL_ADC_ConfigChannel+0x264>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003afa:	e002      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f9      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b08:	e06c      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c0c <HAL_ADC_ConfigChannel+0x268>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10c      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d107      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b24:	4619      	mov	r1, r3
 8003b26:	4835      	ldr	r0, [pc, #212]	@ (8003bfc <HAL_ADC_ConfigChannel+0x258>)
 8003b28:	f7ff fa7e 	bl	8003028 <LL_ADC_SetCommonPathInternalCh>
 8003b2c:	e05a      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a37      	ldr	r2, [pc, #220]	@ (8003c10 <HAL_ADC_ConfigChannel+0x26c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d155      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d150      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b48:	4619      	mov	r1, r3
 8003b4a:	482c      	ldr	r0, [pc, #176]	@ (8003bfc <HAL_ADC_ConfigChannel+0x258>)
 8003b4c:	f7ff fa6c 	bl	8003028 <LL_ADC_SetCommonPathInternalCh>
 8003b50:	e048      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b5a:	d004      	beq.n	8003b66 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b60:	4a25      	ldr	r2, [pc, #148]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x254>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d107      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f7ff faf3 	bl	800315c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	da32      	bge.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b7e:	481f      	ldr	r0, [pc, #124]	@ (8003bfc <HAL_ADC_ConfigChannel+0x258>)
 8003b80:	f7ff fa64 	bl	800304c <LL_ADC_GetCommonPathInternalCh>
 8003b84:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c00 <HAL_ADC_ConfigChannel+0x25c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d107      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b96:	4619      	mov	r1, r3
 8003b98:	4818      	ldr	r0, [pc, #96]	@ (8003bfc <HAL_ADC_ConfigChannel+0x258>)
 8003b9a:	f7ff fa45 	bl	8003028 <LL_ADC_SetCommonPathInternalCh>
 8003b9e:	e021      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	@ (8003c0c <HAL_ADC_ConfigChannel+0x268>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d107      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4812      	ldr	r0, [pc, #72]	@ (8003bfc <HAL_ADC_ConfigChannel+0x258>)
 8003bb4:	f7ff fa38 	bl	8003028 <LL_ADC_SetCommonPathInternalCh>
 8003bb8:	e014      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <HAL_ADC_ConfigChannel+0x26c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10f      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003bca:	4619      	mov	r1, r3
 8003bcc:	480b      	ldr	r0, [pc, #44]	@ (8003bfc <HAL_ADC_ConfigChannel+0x258>)
 8003bce:	f7ff fa2b 	bl	8003028 <LL_ADC_SetCommonPathInternalCh>
 8003bd2:	e007      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	80000004 	.word	0x80000004
 8003bfc:	40012708 	.word	0x40012708
 8003c00:	b0001000 	.word	0xb0001000
 8003c04:	20000000 	.word	0x20000000
 8003c08:	053e2d63 	.word	0x053e2d63
 8003c0c:	b8004000 	.word	0xb8004000
 8003c10:	b4002000 	.word	0xb4002000

08003c14 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fb71 	bl	8003308 <LL_ADC_REG_IsConversionOngoing>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d033      	beq.n	8003c94 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fb31 	bl	8003298 <LL_ADC_IsDisableOngoing>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d104      	bne.n	8003c46 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fb4e 	bl	80032e2 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c46:	f7fe fae7 	bl	8002218 <HAL_GetTick>
 8003c4a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c4c:	e01b      	b.n	8003c86 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c4e:	f7fe fae3 	bl	8002218 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d914      	bls.n	8003c86 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	f043 0210 	orr.w	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e007      	b.n	8003c96 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1dc      	bne.n	8003c4e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fadf 	bl	8003274 <LL_ADC_IsEnabled>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d169      	bne.n	8003d90 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	4b36      	ldr	r3, [pc, #216]	@ (8003d9c <ADC_Enable+0xfc>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	f043 0210 	orr.w	r2, r3, #16
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e055      	b.n	8003d92 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fa9c 	bl	8003228 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003cf0:	482b      	ldr	r0, [pc, #172]	@ (8003da0 <ADC_Enable+0x100>)
 8003cf2:	f7ff f9ab 	bl	800304c <LL_ADC_GetCommonPathInternalCh>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00f      	beq.n	8003d20 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d00:	4b28      	ldr	r3, [pc, #160]	@ (8003da4 <ADC_Enable+0x104>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	4a28      	ldr	r2, [pc, #160]	@ (8003da8 <ADC_Enable+0x108>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003d10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d12:	e002      	b.n	8003d1a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f9      	bne.n	8003d14 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	7e5b      	ldrb	r3, [r3, #25]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d033      	beq.n	8003d90 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003d28:	f7fe fa76 	bl	8002218 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d2e:	e028      	b.n	8003d82 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fa9d 	bl	8003274 <LL_ADC_IsEnabled>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fa6f 	bl	8003228 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d4a:	f7fe fa65 	bl	8002218 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d914      	bls.n	8003d82 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d00d      	beq.n	8003d82 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	f043 0210 	orr.w	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e007      	b.n	8003d92 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d1cf      	bne.n	8003d30 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	80000017 	.word	0x80000017
 8003da0:	40012708 	.word	0x40012708
 8003da4:	20000000 	.word	0x20000000
 8003da8:	053e2d63 	.word	0x053e2d63

08003dac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fa6d 	bl	8003298 <LL_ADC_IsDisableOngoing>
 8003dbe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fa55 	bl	8003274 <LL_ADC_IsEnabled>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d047      	beq.n	8003e60 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d144      	bne.n	8003e60 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0305 	and.w	r3, r3, #5
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d10c      	bne.n	8003dfe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fa30 	bl	800324e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2203      	movs	r2, #3
 8003df4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003df6:	f7fe fa0f 	bl	8002218 <HAL_GetTick>
 8003dfa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dfc:	e029      	b.n	8003e52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e02:	f043 0210 	orr.w	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e023      	b.n	8003e62 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e1a:	f7fe f9fd 	bl	8002218 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d914      	bls.n	8003e52 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	f043 0210 	orr.w	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	f043 0201 	orr.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e007      	b.n	8003e62 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1dc      	bne.n	8003e1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <LL_ADC_SetCalibrationFactor>:
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e7a:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <LL_ADC_GetCalibrationFactor>:
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <LL_ADC_Enable>:
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ebe:	f023 0317 	bic.w	r3, r3, #23
 8003ec2:	f043 0201 	orr.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <LL_ADC_Disable>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ee4:	f023 0317 	bic.w	r3, r3, #23
 8003ee8:	f043 0202 	orr.w	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <LL_ADC_IsEnabled>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <LL_ADC_IsEnabled+0x18>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <LL_ADC_IsEnabled+0x1a>
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <LL_ADC_StartCalibration>:
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f2e:	f023 0317 	bic.w	r3, r3, #23
 8003f32:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f58:	d101      	bne.n	8003f5e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b088      	sub	sp, #32
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e0b9      	b.n	80040fc <HAL_ADCEx_Calibration_Start+0x192>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff0b 	bl	8003dac <ADC_Disable>
 8003f96:	4603      	mov	r3, r0
 8003f98:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff ffab 	bl	8003efa <LL_ADC_IsEnabled>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 809d 	bne.w	80040e6 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003fb4:	f043 0202 	orr.w	r2, r3, #2
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	f248 0303 	movw	r3, #32771	@ 0x8003
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003fd8:	f023 0303 	bic.w	r3, r3, #3
 8003fdc:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e02e      	b.n	8004042 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff ff98 	bl	8003f1e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fee:	e014      	b.n	800401a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003ffc:	d30d      	bcc.n	800401a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	f023 0312 	bic.w	r3, r3, #18
 8004006:	f043 0210 	orr.w	r2, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e070      	b.n	80040fc <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff90 	bl	8003f44 <LL_ADC_IsCalibrationOnGoing>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e2      	bne.n	8003ff0 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ff2f 	bl	8003e92 <LL_ADC_GetCalibrationFactor>
 8004034:	4602      	mov	r2, r0
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	3301      	adds	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	2b07      	cmp	r3, #7
 8004046:	d9cd      	bls.n	8003fe4 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ff29 	bl	8003eae <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69b9      	ldr	r1, [r7, #24]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ff01 	bl	8003e6a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff ff31 	bl	8003ed4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004072:	f7fe f8d1 	bl	8002218 <HAL_GetTick>
 8004076:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004078:	e01c      	b.n	80040b4 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800407a:	f7fe f8cd 	bl	8002218 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d915      	bls.n	80040b4 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff34 	bl	8003efa <LL_ADC_IsEnabled>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409c:	f043 0210 	orr.w	r2, r3, #16
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e023      	b.n	80040fc <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff1e 	bl	8003efa <LL_ADC_IsEnabled>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1da      	bne.n	800407a <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68d9      	ldr	r1, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	f023 0303 	bic.w	r3, r3, #3
 80040dc:	f043 0201 	orr.w	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80040e4:	e005      	b.n	80040f2 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ea:	f043 0210 	orr.w	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004114:	4b0c      	ldr	r3, [pc, #48]	@ (8004148 <__NVIC_SetPriorityGrouping+0x44>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004120:	4013      	ands	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800412c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004136:	4a04      	ldr	r2, [pc, #16]	@ (8004148 <__NVIC_SetPriorityGrouping+0x44>)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	60d3      	str	r3, [r2, #12]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004150:	4b04      	ldr	r3, [pc, #16]	@ (8004164 <__NVIC_GetPriorityGrouping+0x18>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	f003 0307 	and.w	r3, r3, #7
}
 800415a:	4618      	mov	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	2b00      	cmp	r3, #0
 8004178:	db0b      	blt.n	8004192 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	f003 021f 	and.w	r2, r3, #31
 8004180:	4906      	ldr	r1, [pc, #24]	@ (800419c <__NVIC_EnableIRQ+0x34>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2001      	movs	r0, #1
 800418a:	fa00 f202 	lsl.w	r2, r0, r2
 800418e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	e000e100 	.word	0xe000e100

080041a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db12      	blt.n	80041d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	490a      	ldr	r1, [pc, #40]	@ (80041e4 <__NVIC_DisableIRQ+0x44>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2001      	movs	r0, #1
 80041c2:	fa00 f202 	lsl.w	r2, r0, r2
 80041c6:	3320      	adds	r3, #32
 80041c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80041cc:	f3bf 8f4f 	dsb	sy
}
 80041d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041d2:	f3bf 8f6f 	isb	sy
}
 80041d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	db0a      	blt.n	8004212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	490c      	ldr	r1, [pc, #48]	@ (8004234 <__NVIC_SetPriority+0x4c>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	0112      	lsls	r2, r2, #4
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	440b      	add	r3, r1
 800420c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004210:	e00a      	b.n	8004228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4908      	ldr	r1, [pc, #32]	@ (8004238 <__NVIC_SetPriority+0x50>)
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	3b04      	subs	r3, #4
 8004220:	0112      	lsls	r2, r2, #4
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	440b      	add	r3, r1
 8004226:	761a      	strb	r2, [r3, #24]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	e000e100 	.word	0xe000e100
 8004238:	e000ed00 	.word	0xe000ed00

0800423c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	@ 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f1c3 0307 	rsb	r3, r3, #7
 8004256:	2b04      	cmp	r3, #4
 8004258:	bf28      	it	cs
 800425a:	2304      	movcs	r3, #4
 800425c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3304      	adds	r3, #4
 8004262:	2b06      	cmp	r3, #6
 8004264:	d902      	bls.n	800426c <NVIC_EncodePriority+0x30>
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3b03      	subs	r3, #3
 800426a:	e000      	b.n	800426e <NVIC_EncodePriority+0x32>
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	401a      	ands	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004284:	f04f 31ff 	mov.w	r1, #4294967295
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	43d9      	mvns	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	4313      	orrs	r3, r2
         );
}
 8004296:	4618      	mov	r0, r3
 8004298:	3724      	adds	r7, #36	@ 0x24
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff2b 	bl	8004104 <__NVIC_SetPriorityGrouping>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4603      	mov	r3, r0
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042c4:	f7ff ff42 	bl	800414c <__NVIC_GetPriorityGrouping>
 80042c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	6978      	ldr	r0, [r7, #20]
 80042d0:	f7ff ffb4 	bl	800423c <NVIC_EncodePriority>
 80042d4:	4602      	mov	r2, r0
 80042d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff83 	bl	80041e8 <__NVIC_SetPriority>
}
 80042e2:	bf00      	nop
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff35 	bl	8004168 <__NVIC_EnableIRQ>
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	4603      	mov	r3, r0
 800430e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff43 	bl	80041a0 <__NVIC_DisableIRQ>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e08e      	b.n	8004454 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	4b47      	ldr	r3, [pc, #284]	@ (800445c <HAL_DMA_Init+0x138>)
 800433e:	429a      	cmp	r2, r3
 8004340:	d80f      	bhi.n	8004362 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4b45      	ldr	r3, [pc, #276]	@ (8004460 <HAL_DMA_Init+0x13c>)
 800434a:	4413      	add	r3, r2
 800434c:	4a45      	ldr	r2, [pc, #276]	@ (8004464 <HAL_DMA_Init+0x140>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	009a      	lsls	r2, r3, #2
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a42      	ldr	r2, [pc, #264]	@ (8004468 <HAL_DMA_Init+0x144>)
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004360:	e00e      	b.n	8004380 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	4b40      	ldr	r3, [pc, #256]	@ (800446c <HAL_DMA_Init+0x148>)
 800436a:	4413      	add	r3, r2
 800436c:	4a3d      	ldr	r2, [pc, #244]	@ (8004464 <HAL_DMA_Init+0x140>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	009a      	lsls	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a3c      	ldr	r2, [pc, #240]	@ (8004470 <HAL_DMA_Init+0x14c>)
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fb24 	bl	8004a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043e0:	d102      	bne.n	80043e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d010      	beq.n	800442a <HAL_DMA_Init+0x106>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d80c      	bhi.n	800442a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fb4d 	bl	8004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004426:	605a      	str	r2, [r3, #4]
 8004428:	e008      	b.n	800443c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40020407 	.word	0x40020407
 8004460:	bffdfff8 	.word	0xbffdfff8
 8004464:	cccccccd 	.word	0xcccccccd
 8004468:	40020000 	.word	0x40020000
 800446c:	bffdfbf8 	.word	0xbffdfbf8
 8004470:	40020400 	.word	0x40020400

08004474 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e07b      	b.n	800457e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	4b3a      	ldr	r3, [pc, #232]	@ (8004588 <HAL_DMA_DeInit+0x114>)
 800449e:	429a      	cmp	r2, r3
 80044a0:	d80f      	bhi.n	80044c2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	4b38      	ldr	r3, [pc, #224]	@ (800458c <HAL_DMA_DeInit+0x118>)
 80044aa:	4413      	add	r3, r2
 80044ac:	4a38      	ldr	r2, [pc, #224]	@ (8004590 <HAL_DMA_DeInit+0x11c>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	009a      	lsls	r2, r3, #2
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a35      	ldr	r2, [pc, #212]	@ (8004594 <HAL_DMA_DeInit+0x120>)
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40
 80044c0:	e00e      	b.n	80044e0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b33      	ldr	r3, [pc, #204]	@ (8004598 <HAL_DMA_DeInit+0x124>)
 80044ca:	4413      	add	r3, r2
 80044cc:	4a30      	ldr	r2, [pc, #192]	@ (8004590 <HAL_DMA_DeInit+0x11c>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	009a      	lsls	r2, r3, #2
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2f      	ldr	r2, [pc, #188]	@ (800459c <HAL_DMA_DeInit+0x128>)
 80044de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ec:	f003 021c 	and.w	r2, r3, #28
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f202 	lsl.w	r2, r1, r2
 80044fa:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fa8f 	bl	8004a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004512:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00f      	beq.n	800453c <HAL_DMA_DeInit+0xc8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d80b      	bhi.n	800453c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fac3 	bl	8004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800453a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40020407 	.word	0x40020407
 800458c:	bffdfff8 	.word	0xbffdfff8
 8004590:	cccccccd 	.word	0xcccccccd
 8004594:	40020000 	.word	0x40020000
 8004598:	bffdfbf8 	.word	0xbffdfbf8
 800459c:	40020400 	.word	0x40020400

080045a0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_DMA_Start_IT+0x20>
 80045bc:	2302      	movs	r3, #2
 80045be:	e069      	b.n	8004694 <HAL_DMA_Start_IT+0xf4>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d155      	bne.n	8004680 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f9d3 	bl	80049a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 020e 	orr.w	r2, r2, #14
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e00f      	b.n	8004638 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0204 	bic.w	r2, r2, #4
 8004626:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 020a 	orr.w	r2, r2, #10
 8004636:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004654:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800466c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e008      	b.n	8004692 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2280      	movs	r2, #128	@ 0x80
 8004684:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004692:	7dfb      	ldrb	r3, [r7, #23]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e04f      	b.n	800474e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d008      	beq.n	80046cc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2204      	movs	r2, #4
 80046be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e040      	b.n	800474e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 020e 	bic.w	r2, r2, #14
 80046da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004700:	f003 021c 	and.w	r2, r3, #28
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f202 	lsl.w	r2, r1, r2
 800470e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004718:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004730:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800473a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d005      	beq.n	800477c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2204      	movs	r2, #4
 8004774:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e047      	b.n	800480c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 020e 	bic.w	r2, r2, #14
 800478a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b0:	f003 021c 	and.w	r2, r3, #28
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f202 	lsl.w	r2, r1, r2
 80047be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
    }
  }
  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004834:	f003 031c 	and.w	r3, r3, #28
 8004838:	2204      	movs	r2, #4
 800483a:	409a      	lsls	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d027      	beq.n	8004894 <HAL_DMA_IRQHandler+0x7c>
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d022      	beq.n	8004894 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0204 	bic.w	r2, r2, #4
 800486a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004870:	f003 021c 	and.w	r2, r3, #28
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	2104      	movs	r1, #4
 800487a:	fa01 f202 	lsl.w	r2, r1, r2
 800487e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8081 	beq.w	800498c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004892:	e07b      	b.n	800498c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004898:	f003 031c 	and.w	r3, r3, #28
 800489c:	2202      	movs	r2, #2
 800489e:	409a      	lsls	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d03d      	beq.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d038      	beq.n	8004924 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 020a 	bic.w	r2, r2, #10
 80048ce:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	4b2e      	ldr	r3, [pc, #184]	@ (8004998 <HAL_DMA_IRQHandler+0x180>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d909      	bls.n	80048f8 <HAL_DMA_IRQHandler+0xe0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e8:	f003 031c 	and.w	r3, r3, #28
 80048ec:	4a2b      	ldr	r2, [pc, #172]	@ (800499c <HAL_DMA_IRQHandler+0x184>)
 80048ee:	2102      	movs	r1, #2
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	6053      	str	r3, [r2, #4]
 80048f6:	e008      	b.n	800490a <HAL_DMA_IRQHandler+0xf2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fc:	f003 031c 	and.w	r3, r3, #28
 8004900:	4a27      	ldr	r2, [pc, #156]	@ (80049a0 <HAL_DMA_IRQHandler+0x188>)
 8004902:	2102      	movs	r1, #2
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d038      	beq.n	800498c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004922:	e033      	b.n	800498c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004928:	f003 031c 	and.w	r3, r3, #28
 800492c:	2208      	movs	r2, #8
 800492e:	409a      	lsls	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02a      	beq.n	800498e <HAL_DMA_IRQHandler+0x176>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d025      	beq.n	800498e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 020e 	bic.w	r2, r2, #14
 8004950:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f003 021c 	and.w	r2, r3, #28
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	2101      	movs	r1, #1
 8004960:	fa01 f202 	lsl.w	r2, r1, r2
 8004964:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800498c:	bf00      	nop
 800498e:	bf00      	nop
}
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40020080 	.word	0x40020080
 800499c:	40020400 	.word	0x40020400
 80049a0:	40020000 	.word	0x40020000

080049a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d2:	f003 021c 	and.w	r2, r3, #28
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f202 	lsl.w	r2, r1, r2
 80049e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d108      	bne.n	8004a04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a02:	e007      	b.n	8004a14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	60da      	str	r2, [r3, #12]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr
	...

08004a20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d813      	bhi.n	8004a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a40:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	3b08      	subs	r3, #8
 8004a50:	4a14      	ldr	r2, [pc, #80]	@ (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e011      	b.n	8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a60:	089b      	lsrs	r3, r3, #2
 8004a62:	009a      	lsls	r2, r3, #2
 8004a64:	4b10      	ldr	r3, [pc, #64]	@ (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004a66:	4413      	add	r3, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	3b08      	subs	r3, #8
 8004a74:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	3307      	adds	r3, #7
 8004a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0a      	ldr	r2, [pc, #40]	@ (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004a84:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40020407 	.word	0x40020407
 8004aa4:	cccccccd 	.word	0xcccccccd
 8004aa8:	4002081c 	.word	0x4002081c
 8004aac:	40020880 	.word	0x40020880

08004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	461a      	mov	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a08      	ldr	r2, [pc, #32]	@ (8004af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ad4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2201      	movs	r2, #1
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	1000823f 	.word	0x1000823f
 8004af4:	40020940 	.word	0x40020940

08004af8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004b06:	4b1c      	ldr	r3, [pc, #112]	@ (8004b78 <HAL_FLASH_Program+0x80>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_FLASH_Program+0x1a>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e02d      	b.n	8004b6e <HAL_FLASH_Program+0x76>
 8004b12:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <HAL_FLASH_Program+0x80>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b18:	4b17      	ldr	r3, [pc, #92]	@ (8004b78 <HAL_FLASH_Program+0x80>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b22:	f000 f869 	bl	8004bf8 <FLASH_WaitForLastOperation>
 8004b26:	4603      	mov	r3, r0
 8004b28:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d11a      	bne.n	8004b66 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d105      	bne.n	8004b42 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b3a:	68b8      	ldr	r0, [r7, #8]
 8004b3c:	f000 f8be 	bl	8004cbc <FLASH_Program_DoubleWord>
 8004b40:	e004      	b.n	8004b4c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	68b8      	ldr	r0, [r7, #8]
 8004b48:	f000 f8de 	bl	8004d08 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b50:	f000 f852 	bl	8004bf8 <FLASH_WaitForLastOperation>
 8004b54:	4603      	mov	r3, r0
 8004b56:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004b58:	4b08      	ldr	r3, [pc, #32]	@ (8004b7c <HAL_FLASH_Program+0x84>)
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	4906      	ldr	r1, [pc, #24]	@ (8004b7c <HAL_FLASH_Program+0x84>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b66:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <HAL_FLASH_Program+0x80>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000430 	.word	0x20000430
 8004b7c:	58004000 	.word	0x58004000

08004b80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <HAL_FLASH_Unlock+0x38>)
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da0b      	bge.n	8004baa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b92:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <HAL_FLASH_Unlock+0x38>)
 8004b94:	4a09      	ldr	r2, [pc, #36]	@ (8004bbc <HAL_FLASH_Unlock+0x3c>)
 8004b96:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b98:	4b07      	ldr	r3, [pc, #28]	@ (8004bb8 <HAL_FLASH_Unlock+0x38>)
 8004b9a:	4a09      	ldr	r2, [pc, #36]	@ (8004bc0 <HAL_FLASH_Unlock+0x40>)
 8004b9c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004b9e:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <HAL_FLASH_Unlock+0x38>)
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da01      	bge.n	8004baa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004baa:	79fb      	ldrb	r3, [r7, #7]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	58004000 	.word	0x58004000
 8004bbc:	45670123 	.word	0x45670123
 8004bc0:	cdef89ab 	.word	0xcdef89ab

08004bc4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004bce:	4b09      	ldr	r3, [pc, #36]	@ (8004bf4 <HAL_FLASH_Lock+0x30>)
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	4a08      	ldr	r2, [pc, #32]	@ (8004bf4 <HAL_FLASH_Lock+0x30>)
 8004bd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bd8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004bda:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_FLASH_Lock+0x30>)
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db01      	blt.n	8004be6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004be6:	79fb      	ldrb	r3, [r7, #7]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	58004000 	.word	0x58004000

08004bf8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004c00:	f7fd fb0a 	bl	8002218 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004c06:	e009      	b.n	8004c1c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004c08:	f7fd fb06 	bl	8002218 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d801      	bhi.n	8004c1c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e046      	b.n	8004caa <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004c1c:	4b25      	ldr	r3, [pc, #148]	@ (8004cb4 <FLASH_WaitForLastOperation+0xbc>)
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c28:	d0ee      	beq.n	8004c08 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004c2a:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <FLASH_WaitForLastOperation+0xbc>)
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb4 <FLASH_WaitForLastOperation+0xbc>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004c46:	4013      	ands	r3, r2
 8004c48:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c50:	d307      	bcc.n	8004c62 <FLASH_WaitForLastOperation+0x6a>
 8004c52:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <FLASH_WaitForLastOperation+0xbc>)
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004c5c:	4915      	ldr	r1, [pc, #84]	@ (8004cb4 <FLASH_WaitForLastOperation+0xbc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	618b      	str	r3, [r1, #24]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <FLASH_WaitForLastOperation+0x7e>
 8004c6c:	4a11      	ldr	r2, [pc, #68]	@ (8004cb4 <FLASH_WaitForLastOperation+0xbc>)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004c74:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00e      	beq.n	8004c9a <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8004cb8 <FLASH_WaitForLastOperation+0xc0>)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e011      	b.n	8004caa <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004c86:	f7fd fac7 	bl	8002218 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d801      	bhi.n	8004c9a <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e007      	b.n	8004caa <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <FLASH_WaitForLastOperation+0xbc>)
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ca2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ca6:	d0ee      	beq.n	8004c86 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	58004000 	.word	0x58004000
 8004cb8:	20000430 	.word	0x20000430

08004cbc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d04 <FLASH_Program_DoubleWord+0x48>)
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d04 <FLASH_Program_DoubleWord+0x48>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004cda:	f3bf 8f6f 	isb	sy
}
 8004cde:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	000a      	movs	r2, r1
 8004cee:	2300      	movs	r3, #0
 8004cf0:	68f9      	ldr	r1, [r7, #12]
 8004cf2:	3104      	adds	r1, #4
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	58004000 	.word	0x58004000

08004d08 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b089      	sub	sp, #36	@ 0x24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004d12:	2340      	movs	r3, #64	@ 0x40
 8004d14:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004d1e:	4b18      	ldr	r3, [pc, #96]	@ (8004d80 <FLASH_Program_Fast+0x78>)
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <FLASH_Program_Fast+0x78>)
 8004d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d28:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d30:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d34:	b672      	cpsid	i
}
 8004d36:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	3304      	adds	r3, #4
 8004d44:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	617b      	str	r3, [r7, #20]
    row_index--;
 8004d4c:	7ffb      	ldrb	r3, [r7, #31]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004d52:	7ffb      	ldrb	r3, [r7, #31]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ef      	bne.n	8004d38 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004d58:	bf00      	nop
 8004d5a:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <FLASH_Program_Fast+0x78>)
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d66:	d0f8      	beq.n	8004d5a <FLASH_Program_Fast+0x52>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f383 8810 	msr	PRIMASK, r3
}
 8004d72:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004d74:	bf00      	nop
 8004d76:	3724      	adds	r7, #36	@ 0x24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	58004000 	.word	0x58004000

08004d84 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d8e:	4b28      	ldr	r3, [pc, #160]	@ (8004e30 <HAL_FLASHEx_Erase+0xac>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_FLASHEx_Erase+0x16>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e046      	b.n	8004e28 <HAL_FLASHEx_Erase+0xa4>
 8004d9a:	4b25      	ldr	r3, [pc, #148]	@ (8004e30 <HAL_FLASHEx_Erase+0xac>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004da0:	4b23      	ldr	r3, [pc, #140]	@ (8004e30 <HAL_FLASHEx_Erase+0xac>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004da6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004daa:	f7ff ff25 	bl	8004bf8 <FLASH_WaitForLastOperation>
 8004dae:	4603      	mov	r3, r0
 8004db0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d133      	bne.n	8004e20 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d108      	bne.n	8004dd2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004dc0:	f000 f838 	bl	8004e34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004dc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004dc8:	f7ff ff16 	bl	8004bf8 <FLASH_WaitForLastOperation>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	e024      	b.n	8004e1c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	e012      	b.n	8004e08 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004de2:	68b8      	ldr	r0, [r7, #8]
 8004de4:	f000 f836 	bl	8004e54 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004de8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004dec:	f7ff ff04 	bl	8004bf8 <FLASH_WaitForLastOperation>
 8004df0:	4603      	mov	r3, r0
 8004df2:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	601a      	str	r2, [r3, #0]
          break;
 8004e00:	e00a      	b.n	8004e18 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d3e4      	bcc.n	8004de2 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004e18:	f000 f878 	bl	8004f0c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004e1c:	f000 f832 	bl	8004e84 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e20:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <HAL_FLASHEx_Erase+0xac>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]

  return status;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000430 	.word	0x20000430

08004e34 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004e38:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <FLASH_MassErase+0x1c>)
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	4a04      	ldr	r2, [pc, #16]	@ (8004e50 <FLASH_MassErase+0x1c>)
 8004e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e42:	f043 0304 	orr.w	r3, r3, #4
 8004e46:	6153      	str	r3, [r2, #20]
#endif
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	58004000 	.word	0x58004000

08004e54 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004e5c:	4b08      	ldr	r3, [pc, #32]	@ (8004e80 <FLASH_PageErase+0x2c>)
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	4a05      	ldr	r2, [pc, #20]	@ (8004e80 <FLASH_PageErase+0x2c>)
 8004e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e70:	f043 0302 	orr.w	r3, r3, #2
 8004e74:	6153      	str	r3, [r2, #20]
#endif
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr
 8004e80:	58004000 	.word	0x58004000

08004e84 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004e88:	4b1f      	ldr	r3, [pc, #124]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d117      	bne.n	8004ec4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004e94:	4b1c      	ldr	r3, [pc, #112]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1b      	ldr	r2, [pc, #108]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004e9a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e9e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004ea0:	4b19      	ldr	r3, [pc, #100]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a18      	ldr	r2, [pc, #96]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004ea6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4b16      	ldr	r3, [pc, #88]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a15      	ldr	r2, [pc, #84]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004eb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eb6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004eb8:	4b13      	ldr	r3, [pc, #76]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a12      	ldr	r2, [pc, #72]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ec2:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004ec4:	4b10      	ldr	r3, [pc, #64]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d117      	bne.n	8004f00 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004ed6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eda:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004edc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a09      	ldr	r2, [pc, #36]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004ee2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	4b07      	ldr	r3, [pc, #28]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a06      	ldr	r2, [pc, #24]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ef2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ef4:	4b04      	ldr	r3, [pc, #16]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a03      	ldr	r2, [pc, #12]	@ (8004f08 <FLASH_FlushCaches+0x84>)
 8004efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004efe:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	58004000 	.word	0x58004000

08004f0c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004f10:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <FLASH_AcknowledgePageErase+0x1c>)
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	4a04      	ldr	r2, [pc, #16]	@ (8004f28 <FLASH_AcknowledgePageErase+0x1c>)
 8004f16:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004f1a:	f023 0302 	bic.w	r3, r3, #2
 8004f1e:	6153      	str	r3, [r2, #20]
#endif
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	58004000 	.word	0x58004000

08004f2c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f3a:	e140      	b.n	80051be <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	fa01 f303 	lsl.w	r3, r1, r3
 8004f48:	4013      	ands	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 8132 	beq.w	80051b8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d005      	beq.n	8004f6c <HAL_GPIO_Init+0x40>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d130      	bne.n	8004fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	2203      	movs	r2, #3
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4013      	ands	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43db      	mvns	r3, r3
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	091b      	lsrs	r3, r3, #4
 8004fb8:	f003 0201 	and.w	r2, r3, #1
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d017      	beq.n	800500a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	43db      	mvns	r3, r3
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d123      	bne.n	800505e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	08da      	lsrs	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3208      	adds	r2, #8
 800501e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	220f      	movs	r2, #15
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4013      	ands	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	08da      	lsrs	r2, r3, #3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3208      	adds	r2, #8
 8005058:	6939      	ldr	r1, [r7, #16]
 800505a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	2203      	movs	r2, #3
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4013      	ands	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f003 0203 	and.w	r2, r3, #3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 808c 	beq.w	80051b8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80050a0:	4a4e      	ldr	r2, [pc, #312]	@ (80051dc <HAL_GPIO_Init+0x2b0>)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	089b      	lsrs	r3, r3, #2
 80050a6:	3302      	adds	r3, #2
 80050a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	2207      	movs	r2, #7
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80050ca:	d00d      	beq.n	80050e8 <HAL_GPIO_Init+0x1bc>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a44      	ldr	r2, [pc, #272]	@ (80051e0 <HAL_GPIO_Init+0x2b4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <HAL_GPIO_Init+0x1b8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a43      	ldr	r2, [pc, #268]	@ (80051e4 <HAL_GPIO_Init+0x2b8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d101      	bne.n	80050e0 <HAL_GPIO_Init+0x1b4>
 80050dc:	2302      	movs	r3, #2
 80050de:	e004      	b.n	80050ea <HAL_GPIO_Init+0x1be>
 80050e0:	2307      	movs	r3, #7
 80050e2:	e002      	b.n	80050ea <HAL_GPIO_Init+0x1be>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_GPIO_Init+0x1be>
 80050e8:	2300      	movs	r3, #0
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	f002 0203 	and.w	r2, r2, #3
 80050f0:	0092      	lsls	r2, r2, #2
 80050f2:	4093      	lsls	r3, r2
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050fa:	4938      	ldr	r1, [pc, #224]	@ (80051dc <HAL_GPIO_Init+0x2b0>)
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	089b      	lsrs	r3, r3, #2
 8005100:	3302      	adds	r3, #2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005108:	4b37      	ldr	r3, [pc, #220]	@ (80051e8 <HAL_GPIO_Init+0x2bc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	43db      	mvns	r3, r3
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4013      	ands	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800512c:	4a2e      	ldr	r2, [pc, #184]	@ (80051e8 <HAL_GPIO_Init+0x2bc>)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005132:	4b2d      	ldr	r3, [pc, #180]	@ (80051e8 <HAL_GPIO_Init+0x2bc>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	43db      	mvns	r3, r3
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4013      	ands	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005156:	4a24      	ldr	r2, [pc, #144]	@ (80051e8 <HAL_GPIO_Init+0x2bc>)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800515c:	4b22      	ldr	r3, [pc, #136]	@ (80051e8 <HAL_GPIO_Init+0x2bc>)
 800515e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005162:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	43db      	mvns	r3, r3
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4013      	ands	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005182:	4a19      	ldr	r2, [pc, #100]	@ (80051e8 <HAL_GPIO_Init+0x2bc>)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800518a:	4b17      	ldr	r3, [pc, #92]	@ (80051e8 <HAL_GPIO_Init+0x2bc>)
 800518c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005190:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	43db      	mvns	r3, r3
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4013      	ands	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80051b0:	4a0d      	ldr	r2, [pc, #52]	@ (80051e8 <HAL_GPIO_Init+0x2bc>)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	3301      	adds	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f47f aeb7 	bne.w	8004f3c <HAL_GPIO_Init+0x10>
  }
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000
 80051e0:	48000400 	.word	0x48000400
 80051e4:	48000800 	.word	0x48000800
 80051e8:	58000800 	.word	0x58000800

080051ec <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80051fa:	e0af      	b.n	800535c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80051fc:	2201      	movs	r2, #1
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	4013      	ands	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80a2 	beq.w	8005356 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005212:	4a59      	ldr	r2, [pc, #356]	@ (8005378 <HAL_GPIO_DeInit+0x18c>)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	3302      	adds	r3, #2
 800521a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	2207      	movs	r2, #7
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4013      	ands	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800523a:	d00d      	beq.n	8005258 <HAL_GPIO_DeInit+0x6c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a4f      	ldr	r2, [pc, #316]	@ (800537c <HAL_GPIO_DeInit+0x190>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d007      	beq.n	8005254 <HAL_GPIO_DeInit+0x68>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a4e      	ldr	r2, [pc, #312]	@ (8005380 <HAL_GPIO_DeInit+0x194>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d101      	bne.n	8005250 <HAL_GPIO_DeInit+0x64>
 800524c:	2302      	movs	r3, #2
 800524e:	e004      	b.n	800525a <HAL_GPIO_DeInit+0x6e>
 8005250:	2307      	movs	r3, #7
 8005252:	e002      	b.n	800525a <HAL_GPIO_DeInit+0x6e>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_GPIO_DeInit+0x6e>
 8005258:	2300      	movs	r3, #0
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	f002 0203 	and.w	r2, r2, #3
 8005260:	0092      	lsls	r2, r2, #2
 8005262:	4093      	lsls	r3, r2
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	429a      	cmp	r2, r3
 8005268:	d136      	bne.n	80052d8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800526a:	4b46      	ldr	r3, [pc, #280]	@ (8005384 <HAL_GPIO_DeInit+0x198>)
 800526c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	43db      	mvns	r3, r3
 8005274:	4943      	ldr	r1, [pc, #268]	@ (8005384 <HAL_GPIO_DeInit+0x198>)
 8005276:	4013      	ands	r3, r2
 8005278:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800527c:	4b41      	ldr	r3, [pc, #260]	@ (8005384 <HAL_GPIO_DeInit+0x198>)
 800527e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	43db      	mvns	r3, r3
 8005286:	493f      	ldr	r1, [pc, #252]	@ (8005384 <HAL_GPIO_DeInit+0x198>)
 8005288:	4013      	ands	r3, r2
 800528a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800528e:	4b3d      	ldr	r3, [pc, #244]	@ (8005384 <HAL_GPIO_DeInit+0x198>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	43db      	mvns	r3, r3
 8005296:	493b      	ldr	r1, [pc, #236]	@ (8005384 <HAL_GPIO_DeInit+0x198>)
 8005298:	4013      	ands	r3, r2
 800529a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800529c:	4b39      	ldr	r3, [pc, #228]	@ (8005384 <HAL_GPIO_DeInit+0x198>)
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	4937      	ldr	r1, [pc, #220]	@ (8005384 <HAL_GPIO_DeInit+0x198>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	2207      	movs	r2, #7
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80052ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005378 <HAL_GPIO_DeInit+0x18c>)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	089b      	lsrs	r3, r3, #2
 80052c0:	3302      	adds	r3, #2
 80052c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	43da      	mvns	r2, r3
 80052ca:	482b      	ldr	r0, [pc, #172]	@ (8005378 <HAL_GPIO_DeInit+0x18c>)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	089b      	lsrs	r3, r3, #2
 80052d0:	400a      	ands	r2, r1
 80052d2:	3302      	adds	r3, #2
 80052d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	2103      	movs	r1, #3
 80052e2:	fa01 f303 	lsl.w	r3, r1, r3
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	08da      	lsrs	r2, r3, #3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3208      	adds	r2, #8
 80052f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	220f      	movs	r2, #15
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	08d2      	lsrs	r2, r2, #3
 800530c:	4019      	ands	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3208      	adds	r2, #8
 8005312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	2103      	movs	r1, #3
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	401a      	ands	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	2101      	movs	r1, #1
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	2103      	movs	r1, #3
 800534a:	fa01 f303 	lsl.w	r3, r1, r3
 800534e:	43db      	mvns	r3, r3
 8005350:	401a      	ands	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	3301      	adds	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	f47f af49 	bne.w	80051fc <HAL_GPIO_DeInit+0x10>
  }
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	48000400 	.word	0x48000400
 8005380:	48000800 	.word	0x48000800
 8005384:	58000800 	.word	0x58000800

08005388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	807b      	strh	r3, [r7, #2]
 8005394:	4613      	mov	r3, r2
 8005396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005398:	787b      	ldrb	r3, [r7, #1]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800539e:	887a      	ldrh	r2, [r7, #2]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053a4:	e002      	b.n	80053ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e08d      	b.n	80054e4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fc faef 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2224      	movs	r2, #36	@ 0x24
 80053e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005406:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005416:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d107      	bne.n	8005430 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	e006      	b.n	800543e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800543c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d108      	bne.n	8005458 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	e007      	b.n	8005468 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005466:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800547a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800548a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69d9      	ldr	r1, [r3, #28]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d138      	bne.n	8005574 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800550c:	2302      	movs	r3, #2
 800550e:	e032      	b.n	8005576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2224      	movs	r2, #36	@ 0x24
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800553e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6819      	ldr	r1, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e000      	b.n	8005576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b20      	cmp	r3, #32
 8005594:	d139      	bne.n	800560a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e033      	b.n	800560c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2224      	movs	r2, #36	@ 0x24
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e000      	b.n	800560c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800560a:	2302      	movs	r3, #2
  }
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
	...

08005618 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800561c:	4b04      	ldr	r3, [pc, #16]	@ (8005630 <HAL_PWR_EnableBkUpAccess+0x18>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a03      	ldr	r2, [pc, #12]	@ (8005630 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005626:	6013      	str	r3, [r2, #0]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	58000400 	.word	0x58000400

08005634 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10c      	bne.n	8005660 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005646:	4b13      	ldr	r3, [pc, #76]	@ (8005694 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800564e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005652:	d10d      	bne.n	8005670 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005654:	f000 f83c 	bl	80056d0 <HAL_PWREx_DisableLowPowerRunMode>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800565e:	e015      	b.n	800568c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005660:	4b0c      	ldr	r3, [pc, #48]	@ (8005694 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800566c:	f000 f822 	bl	80056b4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005670:	4b09      	ldr	r3, [pc, #36]	@ (8005698 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	4a08      	ldr	r2, [pc, #32]	@ (8005698 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005676:	f023 0304 	bic.w	r3, r3, #4
 800567a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005682:	bf30      	wfi
 8005684:	e002      	b.n	800568c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005686:	bf40      	sev
    __WFE();
 8005688:	bf20      	wfe
    __WFE();
 800568a:	bf20      	wfe
  }
}
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	58000400 	.word	0x58000400
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80056a0:	4b03      	ldr	r3, [pc, #12]	@ (80056b0 <HAL_PWREx_GetVoltageRange+0x14>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	58000400 	.word	0x58000400

080056b4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80056b8:	4b04      	ldr	r3, [pc, #16]	@ (80056cc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a03      	ldr	r2, [pc, #12]	@ (80056cc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80056be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056c2:	6013      	str	r3, [r2, #0]
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	58000400 	.word	0x58000400

080056d0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80056d6:	4b16      	ldr	r3, [pc, #88]	@ (8005730 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a15      	ldr	r2, [pc, #84]	@ (8005730 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056e0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80056e2:	4b14      	ldr	r3, [pc, #80]	@ (8005734 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2232      	movs	r2, #50	@ 0x32
 80056e8:	fb02 f303 	mul.w	r3, r2, r3
 80056ec:	4a12      	ldr	r2, [pc, #72]	@ (8005738 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	0c9b      	lsrs	r3, r3, #18
 80056f4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056f6:	e002      	b.n	80056fe <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005730 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800570a:	d102      	bne.n	8005712 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f2      	bne.n	80056f8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005712:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800571a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800571e:	d101      	bne.n	8005724 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e000      	b.n	8005726 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	58000400 	.word	0x58000400
 8005734:	20000000 	.word	0x20000000
 8005738:	431bde83 	.word	0x431bde83

0800573c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005746:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f023 0307 	bic.w	r3, r3, #7
 800574e:	4a0e      	ldr	r2, [pc, #56]	@ (8005788 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005750:	f043 0302 	orr.w	r3, r3, #2
 8005754:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005756:	4b0d      	ldr	r3, [pc, #52]	@ (800578c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	4a0c      	ldr	r2, [pc, #48]	@ (800578c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800575c:	f043 0304 	orr.w	r3, r3, #4
 8005760:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005768:	bf30      	wfi
 800576a:	e002      	b.n	8005772 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800576c:	bf40      	sev
    __WFE();
 800576e:	bf20      	wfe
    __WFE();
 8005770:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005772:	4b06      	ldr	r3, [pc, #24]	@ (800578c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	4a05      	ldr	r2, [pc, #20]	@ (800578c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005778:	f023 0304 	bic.w	r3, r3, #4
 800577c:	6113      	str	r3, [r2, #16]
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	58000400 	.word	0x58000400
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005794:	4b06      	ldr	r3, [pc, #24]	@ (80057b0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a0:	d101      	bne.n	80057a6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr
 80057b0:	58000400 	.word	0x58000400

080057b4 <LL_RCC_HSE_EnableTcxo>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80057b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057c6:	6013      	str	r3, [r2, #0]
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <LL_RCC_HSE_DisableTcxo>:
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr

080057ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057fe:	d101      	bne.n	8005804 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <LL_RCC_HSE_Enable>:
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800581c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005820:	6013      	str	r3, [r2, #0]
}
 8005822:	bf00      	nop
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <LL_RCC_HSE_Disable>:
{
 800582a:	b480      	push	{r7}
 800582c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800582e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800583c:	6013      	str	r3, [r2, #0]
}
 800583e:	bf00      	nop
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <LL_RCC_HSE_IsReady>:
{
 8005846:	b480      	push	{r7}
 8005848:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800584a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005858:	d101      	bne.n	800585e <LL_RCC_HSE_IsReady+0x18>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <LL_RCC_HSE_IsReady+0x1a>
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <LL_RCC_HSI_Enable>:
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800586c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800587a:	6013      	str	r3, [r2, #0]
}
 800587c:	bf00      	nop
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr

08005884 <LL_RCC_HSI_Disable>:
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005892:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005896:	6013      	str	r3, [r2, #0]
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <LL_RCC_HSI_IsReady>:
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b2:	d101      	bne.n	80058b8 <LL_RCC_HSI_IsReady+0x18>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <LL_RCC_HSI_IsReady+0x1a>
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr

080058c2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80058ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	061b      	lsls	r3, r3, #24
 80058d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058dc:	4313      	orrs	r3, r2
 80058de:	604b      	str	r3, [r1, #4]
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr

080058ea <LL_RCC_LSE_IsReady>:
{
 80058ea:	b480      	push	{r7}
 80058ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d101      	bne.n	8005902 <LL_RCC_LSE_IsReady+0x18>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <LL_RCC_LSE_IsReady+0x1a>
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <LL_RCC_LSI_Enable>:
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005918:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <LL_RCC_LSI_Disable>:
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005938:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr

0800594c <LL_RCC_LSI_IsReady>:
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d101      	bne.n	8005964 <LL_RCC_LSI_IsReady+0x18>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <LL_RCC_LSI_IsReady+0x1a>
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr

0800596e <LL_RCC_MSI_Enable>:
{
 800596e:	b480      	push	{r7}
 8005970:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	6013      	str	r3, [r2, #0]
}
 8005982:	bf00      	nop
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <LL_RCC_MSI_Disable>:
{
 800598a:	b480      	push	{r7}
 800598c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	6013      	str	r3, [r2, #0]
}
 800599e:	bf00      	nop
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <LL_RCC_MSI_IsReady>:
{
 80059a6:	b480      	push	{r7}
 80059a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d101      	bne.n	80059bc <LL_RCC_MSI_IsReady+0x16>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <LL_RCC_MSI_IsReady+0x18>
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80059c6:	b480      	push	{r7}
 80059c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80059ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d101      	bne.n	80059dc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <LL_RCC_MSI_GetRange>:
{
 80059e6:	b480      	push	{r7}
 80059e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80059ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr

08005a14 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	021b      	lsls	r3, r3, #8
 8005a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	604b      	str	r3, [r1, #4]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <LL_RCC_SetSysClkSource>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f023 0203 	bic.w	r2, r3, #3
 8005a4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	608b      	str	r3, [r1, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr

08005a62 <LL_RCC_GetSysClkSource>:
{
 8005a62:	b480      	push	{r7}
 8005a64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr

08005a78 <LL_RCC_SetAHBPrescaler>:
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	608b      	str	r3, [r1, #8]
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <LL_RCC_SetAHB3Prescaler>:
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005aae:	f023 020f 	bic.w	r2, r3, #15
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <LL_RCC_SetAPB1Prescaler>:
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005adc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr

08005af0 <LL_RCC_SetAPB2Prescaler>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	608b      	str	r3, [r1, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr

08005b16 <LL_RCC_GetAHBPrescaler>:
{
 8005b16:	b480      	push	{r7}
 8005b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <LL_RCC_GetAHB3Prescaler>:
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b34:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <LL_RCC_GetAPB1Prescaler>:
{
 8005b46:	b480      	push	{r7}
 8005b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <LL_RCC_GetAPB2Prescaler>:
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005b72:	b480      	push	{r7}
 8005b74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b84:	6013      	str	r3, [r2, #0]
}
 8005b86:	bf00      	nop
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr

08005b8e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ba0:	6013      	str	r3, [r2, #0]
}
 8005ba2:	bf00      	nop
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr

08005baa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005baa:	b480      	push	{r7}
 8005bac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bbc:	d101      	bne.n	8005bc2 <LL_RCC_PLL_IsReady+0x18>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <LL_RCC_PLL_IsReady+0x1a>
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005c26:	b480      	push	{r7}
 8005c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c38:	d101      	bne.n	8005c3e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c50:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c5c:	d101      	bne.n	8005c62 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c7e:	d101      	bne.n	8005c84 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ca0:	d101      	bne.n	8005ca6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e36f      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc2:	f7ff fece 	bl	8005a62 <LL_RCC_GetSysClkSource>
 8005cc6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cc8:	f7ff ffa2 	bl	8005c10 <LL_RCC_PLL_GetMainSource>
 8005ccc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 80c4 	beq.w	8005e64 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <HAL_RCC_OscConfig+0x3e>
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	2b0c      	cmp	r3, #12
 8005ce6:	d176      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d173      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e353      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_OscConfig+0x68>
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d16:	e006      	b.n	8005d26 <HAL_RCC_OscConfig+0x76>
 8005d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d222      	bcs.n	8005d70 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fd3c 	bl	80067ac <RCC_SetFlashLatencyFromMSIRange>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e331      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d48:	f043 0308 	orr.w	r3, r3, #8
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d60:	4313      	orrs	r3, r2
 8005d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff fe53 	bl	8005a14 <LL_RCC_MSI_SetCalibTrimming>
 8005d6e:	e021      	b.n	8005db4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d7a:	f043 0308 	orr.w	r3, r3, #8
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fe3a 	bl	8005a14 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fd01 	bl	80067ac <RCC_SetFlashLatencyFromMSIRange>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e2f6      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005db4:	f000 fcc2 	bl	800673c <HAL_RCC_GetHCLKFreq>
 8005db8:	4603      	mov	r3, r0
 8005dba:	4aa7      	ldr	r2, [pc, #668]	@ (8006058 <HAL_RCC_OscConfig+0x3a8>)
 8005dbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005dbe:	4ba7      	ldr	r3, [pc, #668]	@ (800605c <HAL_RCC_OscConfig+0x3ac>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fc fa1e 	bl	8002204 <HAL_InitTick>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005dcc:	7cfb      	ldrb	r3, [r7, #19]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d047      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005dd2:	7cfb      	ldrb	r3, [r7, #19]
 8005dd4:	e2e5      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d02c      	beq.n	8005e38 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005dde:	f7ff fdc6 	bl	800596e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005de2:	f7fc fa19 	bl	8002218 <HAL_GetTick>
 8005de6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005dea:	f7fc fa15 	bl	8002218 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e2d2      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005dfc:	f7ff fdd3 	bl	80059a6 <LL_RCC_MSI_IsReady>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f1      	beq.n	8005dea <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e10:	f043 0308 	orr.w	r3, r3, #8
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fdef 	bl	8005a14 <LL_RCC_MSI_SetCalibTrimming>
 8005e36:	e015      	b.n	8005e64 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e38:	f7ff fda7 	bl	800598a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e3c:	f7fc f9ec 	bl	8002218 <HAL_GetTick>
 8005e40:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e44:	f7fc f9e8 	bl	8002218 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e2a5      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005e56:	f7ff fda6 	bl	80059a6 <LL_RCC_MSI_IsReady>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f1      	bne.n	8005e44 <HAL_RCC_OscConfig+0x194>
 8005e60:	e000      	b.n	8005e64 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e62:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d058      	beq.n	8005f22 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d005      	beq.n	8005e82 <HAL_RCC_OscConfig+0x1d2>
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2b0c      	cmp	r3, #12
 8005e7a:	d108      	bne.n	8005e8e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d105      	bne.n	8005e8e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d14b      	bne.n	8005f22 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e289      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eac:	d102      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x204>
 8005eae:	f7ff fcae 	bl	800580e <LL_RCC_HSE_Enable>
 8005eb2:	e00d      	b.n	8005ed0 <HAL_RCC_OscConfig+0x220>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005ebc:	d104      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x218>
 8005ebe:	f7ff fc79 	bl	80057b4 <LL_RCC_HSE_EnableTcxo>
 8005ec2:	f7ff fca4 	bl	800580e <LL_RCC_HSE_Enable>
 8005ec6:	e003      	b.n	8005ed0 <HAL_RCC_OscConfig+0x220>
 8005ec8:	f7ff fcaf 	bl	800582a <LL_RCC_HSE_Disable>
 8005ecc:	f7ff fc80 	bl	80057d0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d012      	beq.n	8005efe <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed8:	f7fc f99e 	bl	8002218 <HAL_GetTick>
 8005edc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee0:	f7fc f99a 	bl	8002218 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b64      	cmp	r3, #100	@ 0x64
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e257      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005ef2:	f7ff fca8 	bl	8005846 <LL_RCC_HSE_IsReady>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f1      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x230>
 8005efc:	e011      	b.n	8005f22 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efe:	f7fc f98b 	bl	8002218 <HAL_GetTick>
 8005f02:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f06:	f7fc f987 	bl	8002218 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b64      	cmp	r3, #100	@ 0x64
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e244      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f18:	f7ff fc95 	bl	8005846 <LL_RCC_HSE_IsReady>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f1      	bne.n	8005f06 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d046      	beq.n	8005fbc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_OscConfig+0x290>
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b0c      	cmp	r3, #12
 8005f38:	d10e      	bne.n	8005f58 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d10b      	bne.n	8005f58 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e22a      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fcb6 	bl	80058c2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005f56:	e031      	b.n	8005fbc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d019      	beq.n	8005f94 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f60:	f7ff fc82 	bl	8005868 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f64:	f7fc f958 	bl	8002218 <HAL_GetTick>
 8005f68:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f6c:	f7fc f954 	bl	8002218 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e211      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f7e:	f7ff fc8f 	bl	80058a0 <LL_RCC_HSI_IsReady>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f1      	beq.n	8005f6c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fc98 	bl	80058c2 <LL_RCC_HSI_SetCalibTrimming>
 8005f92:	e013      	b.n	8005fbc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f94:	f7ff fc76 	bl	8005884 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fc f93e 	bl	8002218 <HAL_GetTick>
 8005f9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa0:	f7fc f93a 	bl	8002218 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e1f7      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005fb2:	f7ff fc75 	bl	80058a0 <LL_RCC_HSI_IsReady>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f1      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d06e      	beq.n	80060a6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d056      	beq.n	800607e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fd8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69da      	ldr	r2, [r3, #28]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d031      	beq.n	800604c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d006      	beq.n	8006000 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e1d0      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d013      	beq.n	8006032 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800600a:	f7ff fc8f 	bl	800592c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800600e:	f7fc f903 	bl	8002218 <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006016:	f7fc f8ff 	bl	8002218 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b11      	cmp	r3, #17
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e1bc      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006028:	f7ff fc90 	bl	800594c <LL_RCC_LSI_IsReady>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1f1      	bne.n	8006016 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800603a:	f023 0210 	bic.w	r2, r3, #16
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800604c:	f7ff fc5e 	bl	800590c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006050:	f7fc f8e2 	bl	8002218 <HAL_GetTick>
 8006054:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006056:	e00c      	b.n	8006072 <HAL_RCC_OscConfig+0x3c2>
 8006058:	20000000 	.word	0x20000000
 800605c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006060:	f7fc f8da 	bl	8002218 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b11      	cmp	r3, #17
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e197      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006072:	f7ff fc6b 	bl	800594c <LL_RCC_LSI_IsReady>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0f1      	beq.n	8006060 <HAL_RCC_OscConfig+0x3b0>
 800607c:	e013      	b.n	80060a6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607e:	f7ff fc55 	bl	800592c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006082:	f7fc f8c9 	bl	8002218 <HAL_GetTick>
 8006086:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800608a:	f7fc f8c5 	bl	8002218 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b11      	cmp	r3, #17
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e182      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800609c:	f7ff fc56 	bl	800594c <LL_RCC_LSI_IsReady>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f1      	bne.n	800608a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 80d8 	beq.w	8006264 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80060b4:	f7ff fb6c 	bl	8005790 <LL_PWR_IsEnabledBkUpAccess>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d113      	bne.n	80060e6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80060be:	f7ff faab 	bl	8005618 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060c2:	f7fc f8a9 	bl	8002218 <HAL_GetTick>
 80060c6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ca:	f7fc f8a5 	bl	8002218 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e162      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80060dc:	f7ff fb58 	bl	8005790 <LL_PWR_IsEnabledBkUpAccess>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f1      	beq.n	80060ca <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d07b      	beq.n	80061e6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	2b85      	cmp	r3, #133	@ 0x85
 80060f4:	d003      	beq.n	80060fe <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b05      	cmp	r3, #5
 80060fc:	d109      	bne.n	8006112 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006106:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800610a:	f043 0304 	orr.w	r3, r3, #4
 800610e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006112:	f7fc f881 	bl	8002218 <HAL_GetTick>
 8006116:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800611c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006120:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800612c:	e00a      	b.n	8006144 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fc f873 	bl	8002218 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e12e      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006144:	f7ff fbd1 	bl	80058ea <LL_RCC_LSE_IsReady>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0ef      	beq.n	800612e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b81      	cmp	r3, #129	@ 0x81
 8006154:	d003      	beq.n	800615e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2b85      	cmp	r3, #133	@ 0x85
 800615c:	d121      	bne.n	80061a2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615e:	f7fc f85b 	bl	8002218 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006178:	e00a      	b.n	8006190 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617a:	f7fc f84d 	bl	8002218 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006188:	4293      	cmp	r3, r2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e108      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ec      	beq.n	800617a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80061a0:	e060      	b.n	8006264 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a2:	f7fc f839 	bl	8002218 <HAL_GetTick>
 80061a6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061bc:	e00a      	b.n	80061d4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061be:	f7fc f82b 	bl	8002218 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e0e6      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1ec      	bne.n	80061be <HAL_RCC_OscConfig+0x50e>
 80061e4:	e03e      	b.n	8006264 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061e6:	f7fc f817 	bl	8002218 <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006200:	e00a      	b.n	8006218 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006202:	f7fc f809 	bl	8002218 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006210:	4293      	cmp	r3, r2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e0c4      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1ec      	bne.n	8006202 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006228:	f7fb fff6 	bl	8002218 <HAL_GetTick>
 800622c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006236:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006242:	e00a      	b.n	800625a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006244:	f7fb ffe8 	bl	8002218 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006252:	4293      	cmp	r3, r2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e0a3      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800625a:	f7ff fb46 	bl	80058ea <LL_RCC_LSE_IsReady>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1ef      	bne.n	8006244 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8099 	beq.w	80063a0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2b0c      	cmp	r3, #12
 8006272:	d06c      	beq.n	800634e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006278:	2b02      	cmp	r3, #2
 800627a:	d14b      	bne.n	8006314 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627c:	f7ff fc87 	bl	8005b8e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fb ffca 	bl	8002218 <HAL_GetTick>
 8006284:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006288:	f7fb ffc6 	bl	8002218 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b0a      	cmp	r3, #10
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e083      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800629a:	f7ff fc86 	bl	8005baa <LL_RCC_PLL_IsReady>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1f1      	bne.n	8006288 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	4b40      	ldr	r3, [pc, #256]	@ (80063ac <HAL_RCC_OscConfig+0x6fc>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80062b6:	4311      	orrs	r1, r2
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062bc:	0212      	lsls	r2, r2, #8
 80062be:	4311      	orrs	r1, r2
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062c4:	4311      	orrs	r1, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80062ca:	4311      	orrs	r1, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80062d0:	430a      	orrs	r2, r1
 80062d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062da:	f7ff fc4a 	bl	8005b72 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ee:	f7fb ff93 	bl	8002218 <HAL_GetTick>
 80062f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f6:	f7fb ff8f 	bl	8002218 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b0a      	cmp	r3, #10
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e04c      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006308:	f7ff fc4f 	bl	8005baa <LL_RCC_PLL_IsReady>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f1      	beq.n	80062f6 <HAL_RCC_OscConfig+0x646>
 8006312:	e045      	b.n	80063a0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006314:	f7ff fc3b 	bl	8005b8e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006318:	f7fb ff7e 	bl	8002218 <HAL_GetTick>
 800631c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006320:	f7fb ff7a 	bl	8002218 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b0a      	cmp	r3, #10
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e037      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006332:	f7ff fc3a 	bl	8005baa <LL_RCC_PLL_IsReady>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f1      	bne.n	8006320 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800633c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006346:	4b1a      	ldr	r3, [pc, #104]	@ (80063b0 <HAL_RCC_OscConfig+0x700>)
 8006348:	4013      	ands	r3, r2
 800634a:	60cb      	str	r3, [r1, #12]
 800634c:	e028      	b.n	80063a0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e023      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800635a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f003 0203 	and.w	r2, r3, #3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636c:	429a      	cmp	r2, r3
 800636e:	d115      	bne.n	800639c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800637a:	429a      	cmp	r2, r3
 800637c:	d10e      	bne.n	800639c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	429a      	cmp	r2, r3
 800638c:	d106      	bne.n	800639c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	11c1808c 	.word	0x11c1808c
 80063b0:	eefefffc 	.word	0xeefefffc

080063b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e10f      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063c8:	4b89      	ldr	r3, [pc, #548]	@ (80065f0 <HAL_RCC_ClockConfig+0x23c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d91b      	bls.n	800640e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d6:	4b86      	ldr	r3, [pc, #536]	@ (80065f0 <HAL_RCC_ClockConfig+0x23c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f023 0207 	bic.w	r2, r3, #7
 80063de:	4984      	ldr	r1, [pc, #528]	@ (80065f0 <HAL_RCC_ClockConfig+0x23c>)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063e6:	f7fb ff17 	bl	8002218 <HAL_GetTick>
 80063ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ec:	e008      	b.n	8006400 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80063ee:	f7fb ff13 	bl	8002218 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e0f3      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006400:	4b7b      	ldr	r3, [pc, #492]	@ (80065f0 <HAL_RCC_ClockConfig+0x23c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d1ef      	bne.n	80063ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fb2a 	bl	8005a78 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006424:	f7fb fef8 	bl	8002218 <HAL_GetTick>
 8006428:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800642c:	f7fb fef4 	bl	8002218 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e0d4      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800643e:	f7ff fbf2 	bl	8005c26 <LL_RCC_IsActiveFlag_HPRE>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f1      	beq.n	800642c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d016      	beq.n	8006482 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff fb20 	bl	8005a9e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800645e:	f7fb fedb 	bl	8002218 <HAL_GetTick>
 8006462:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006466:	f7fb fed7 	bl	8002218 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e0b7      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006478:	f7ff fbe6 	bl	8005c48 <LL_RCC_IsActiveFlag_SHDHPRE>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f1      	beq.n	8006466 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d016      	beq.n	80064bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fb19 	bl	8005aca <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006498:	f7fb febe 	bl	8002218 <HAL_GetTick>
 800649c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064a0:	f7fb feba 	bl	8002218 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e09a      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80064b2:	f7ff fbdb 	bl	8005c6c <LL_RCC_IsActiveFlag_PPRE1>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0f1      	beq.n	80064a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d017      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fb0e 	bl	8005af0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064d4:	f7fb fea0 	bl	8002218 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064dc:	f7fb fe9c 	bl	8002218 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e07c      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064ee:	f7ff fbce 	bl	8005c8e <LL_RCC_IsActiveFlag_PPRE2>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f1      	beq.n	80064dc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d043      	beq.n	800658c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d106      	bne.n	800651a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800650c:	f7ff f99b 	bl	8005846 <LL_RCC_HSE_IsReady>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d11e      	bne.n	8006554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e066      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b03      	cmp	r3, #3
 8006520:	d106      	bne.n	8006530 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006522:	f7ff fb42 	bl	8005baa <LL_RCC_PLL_IsReady>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d113      	bne.n	8006554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e05b      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d106      	bne.n	8006546 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006538:	f7ff fa35 	bl	80059a6 <LL_RCC_MSI_IsReady>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d108      	bne.n	8006554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e050      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006546:	f7ff f9ab 	bl	80058a0 <LL_RCC_HSI_IsReady>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e049      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fa6f 	bl	8005a3c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800655e:	f7fb fe5b 	bl	8002218 <HAL_GetTick>
 8006562:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006564:	e00a      	b.n	800657c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006566:	f7fb fe57 	bl	8002218 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006574:	4293      	cmp	r3, r2
 8006576:	d901      	bls.n	800657c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e035      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657c:	f7ff fa71 	bl	8005a62 <LL_RCC_GetSysClkSource>
 8006580:	4602      	mov	r2, r0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	429a      	cmp	r2, r3
 800658a:	d1ec      	bne.n	8006566 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800658c:	4b18      	ldr	r3, [pc, #96]	@ (80065f0 <HAL_RCC_ClockConfig+0x23c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d21b      	bcs.n	80065d2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659a:	4b15      	ldr	r3, [pc, #84]	@ (80065f0 <HAL_RCC_ClockConfig+0x23c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f023 0207 	bic.w	r2, r3, #7
 80065a2:	4913      	ldr	r1, [pc, #76]	@ (80065f0 <HAL_RCC_ClockConfig+0x23c>)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065aa:	f7fb fe35 	bl	8002218 <HAL_GetTick>
 80065ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065b2:	f7fb fe31 	bl	8002218 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e011      	b.n	80065e8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c4:	4b0a      	ldr	r3, [pc, #40]	@ (80065f0 <HAL_RCC_ClockConfig+0x23c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d1ef      	bne.n	80065b2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80065d2:	f000 f8b3 	bl	800673c <HAL_RCC_GetHCLKFreq>
 80065d6:	4603      	mov	r3, r0
 80065d8:	4a06      	ldr	r2, [pc, #24]	@ (80065f4 <HAL_RCC_ClockConfig+0x240>)
 80065da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80065dc:	4b06      	ldr	r3, [pc, #24]	@ (80065f8 <HAL_RCC_ClockConfig+0x244>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fb fe0f 	bl	8002204 <HAL_InitTick>
 80065e6:	4603      	mov	r3, r0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	58004000 	.word	0x58004000
 80065f4:	20000000 	.word	0x20000000
 80065f8:	20000004 	.word	0x20000004

080065fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800660a:	f7ff fa2a 	bl	8005a62 <LL_RCC_GetSysClkSource>
 800660e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006610:	f7ff fafe 	bl	8005c10 <LL_RCC_PLL_GetMainSource>
 8006614:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <HAL_RCC_GetSysClockFreq+0x2c>
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b0c      	cmp	r3, #12
 8006620:	d139      	bne.n	8006696 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d136      	bne.n	8006696 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006628:	f7ff f9cd 	bl	80059c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d115      	bne.n	800665e <HAL_RCC_GetSysClockFreq+0x62>
 8006632:	f7ff f9c8 	bl	80059c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d106      	bne.n	800664a <HAL_RCC_GetSysClockFreq+0x4e>
 800663c:	f7ff f9d3 	bl	80059e6 <LL_RCC_MSI_GetRange>
 8006640:	4603      	mov	r3, r0
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	e005      	b.n	8006656 <HAL_RCC_GetSysClockFreq+0x5a>
 800664a:	f7ff f9d7 	bl	80059fc <LL_RCC_MSI_GetRangeAfterStandby>
 800664e:	4603      	mov	r3, r0
 8006650:	0a1b      	lsrs	r3, r3, #8
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	4a36      	ldr	r2, [pc, #216]	@ (8006730 <HAL_RCC_GetSysClockFreq+0x134>)
 8006658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665c:	e014      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0x8c>
 800665e:	f7ff f9b2 	bl	80059c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006662:	4603      	mov	r3, r0
 8006664:	2b01      	cmp	r3, #1
 8006666:	d106      	bne.n	8006676 <HAL_RCC_GetSysClockFreq+0x7a>
 8006668:	f7ff f9bd 	bl	80059e6 <LL_RCC_MSI_GetRange>
 800666c:	4603      	mov	r3, r0
 800666e:	091b      	lsrs	r3, r3, #4
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	e005      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x86>
 8006676:	f7ff f9c1 	bl	80059fc <LL_RCC_MSI_GetRangeAfterStandby>
 800667a:	4603      	mov	r3, r0
 800667c:	091b      	lsrs	r3, r3, #4
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	4a2b      	ldr	r2, [pc, #172]	@ (8006730 <HAL_RCC_GetSysClockFreq+0x134>)
 8006684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006688:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d115      	bne.n	80066bc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006694:	e012      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b04      	cmp	r3, #4
 800669a:	d102      	bne.n	80066a2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800669c:	4b25      	ldr	r3, [pc, #148]	@ (8006734 <HAL_RCC_GetSysClockFreq+0x138>)
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e00c      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d109      	bne.n	80066bc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80066a8:	f7ff f8a0 	bl	80057ec <LL_RCC_HSE_IsEnabledDiv2>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d102      	bne.n	80066b8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80066b2:	4b20      	ldr	r3, [pc, #128]	@ (8006734 <HAL_RCC_GetSysClockFreq+0x138>)
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	e001      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80066b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x13c>)
 80066ba:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066bc:	f7ff f9d1 	bl	8005a62 <LL_RCC_GetSysClkSource>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b0c      	cmp	r3, #12
 80066c4:	d12f      	bne.n	8006726 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80066c6:	f7ff faa3 	bl	8005c10 <LL_RCC_PLL_GetMainSource>
 80066ca:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d003      	beq.n	80066da <HAL_RCC_GetSysClockFreq+0xde>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d003      	beq.n	80066e0 <HAL_RCC_GetSysClockFreq+0xe4>
 80066d8:	e00d      	b.n	80066f6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80066da:	4b16      	ldr	r3, [pc, #88]	@ (8006734 <HAL_RCC_GetSysClockFreq+0x138>)
 80066dc:	60fb      	str	r3, [r7, #12]
        break;
 80066de:	e00d      	b.n	80066fc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80066e0:	f7ff f884 	bl	80057ec <LL_RCC_HSE_IsEnabledDiv2>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d102      	bne.n	80066f0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80066ea:	4b12      	ldr	r3, [pc, #72]	@ (8006734 <HAL_RCC_GetSysClockFreq+0x138>)
 80066ec:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80066ee:	e005      	b.n	80066fc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80066f0:	4b11      	ldr	r3, [pc, #68]	@ (8006738 <HAL_RCC_GetSysClockFreq+0x13c>)
 80066f2:	60fb      	str	r3, [r7, #12]
        break;
 80066f4:	e002      	b.n	80066fc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	60fb      	str	r3, [r7, #12]
        break;
 80066fa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80066fc:	f7ff fa66 	bl	8005bcc <LL_RCC_PLL_GetN>
 8006700:	4602      	mov	r2, r0
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	fb03 f402 	mul.w	r4, r3, r2
 8006708:	f7ff fa77 	bl	8005bfa <LL_RCC_PLL_GetDivider>
 800670c:	4603      	mov	r3, r0
 800670e:	091b      	lsrs	r3, r3, #4
 8006710:	3301      	adds	r3, #1
 8006712:	fbb4 f4f3 	udiv	r4, r4, r3
 8006716:	f7ff fa65 	bl	8005be4 <LL_RCC_PLL_GetR>
 800671a:	4603      	mov	r3, r0
 800671c:	0f5b      	lsrs	r3, r3, #29
 800671e:	3301      	adds	r3, #1
 8006720:	fbb4 f3f3 	udiv	r3, r4, r3
 8006724:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006726:	697b      	ldr	r3, [r7, #20]
}
 8006728:	4618      	mov	r0, r3
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd90      	pop	{r4, r7, pc}
 8006730:	0801c0ec 	.word	0x0801c0ec
 8006734:	00f42400 	.word	0x00f42400
 8006738:	01e84800 	.word	0x01e84800

0800673c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800673c:	b598      	push	{r3, r4, r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006740:	f7ff ff5c 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 8006744:	4604      	mov	r4, r0
 8006746:	f7ff f9e6 	bl	8005b16 <LL_RCC_GetAHBPrescaler>
 800674a:	4603      	mov	r3, r0
 800674c:	091b      	lsrs	r3, r3, #4
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	4a03      	ldr	r2, [pc, #12]	@ (8006760 <HAL_RCC_GetHCLKFreq+0x24>)
 8006754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006758:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	bd98      	pop	{r3, r4, r7, pc}
 8006760:	0801c08c 	.word	0x0801c08c

08006764 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006764:	b598      	push	{r3, r4, r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006768:	f7ff ffe8 	bl	800673c <HAL_RCC_GetHCLKFreq>
 800676c:	4604      	mov	r4, r0
 800676e:	f7ff f9ea 	bl	8005b46 <LL_RCC_GetAPB1Prescaler>
 8006772:	4603      	mov	r3, r0
 8006774:	0a1b      	lsrs	r3, r3, #8
 8006776:	4a03      	ldr	r2, [pc, #12]	@ (8006784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800677c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006780:	4618      	mov	r0, r3
 8006782:	bd98      	pop	{r3, r4, r7, pc}
 8006784:	0801c0cc 	.word	0x0801c0cc

08006788 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006788:	b598      	push	{r3, r4, r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800678c:	f7ff ffd6 	bl	800673c <HAL_RCC_GetHCLKFreq>
 8006790:	4604      	mov	r4, r0
 8006792:	f7ff f9e3 	bl	8005b5c <LL_RCC_GetAPB2Prescaler>
 8006796:	4603      	mov	r3, r0
 8006798:	0adb      	lsrs	r3, r3, #11
 800679a:	4a03      	ldr	r2, [pc, #12]	@ (80067a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800679c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	bd98      	pop	{r3, r4, r7, pc}
 80067a8:	0801c0cc 	.word	0x0801c0cc

080067ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80067ac:	b590      	push	{r4, r7, lr}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	091b      	lsrs	r3, r3, #4
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	4a10      	ldr	r2, [pc, #64]	@ (8006800 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80067be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80067c4:	f7ff f9b2 	bl	8005b2c <LL_RCC_GetAHB3Prescaler>
 80067c8:	4603      	mov	r3, r0
 80067ca:	091b      	lsrs	r3, r3, #4
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006804 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80067d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4a09      	ldr	r2, [pc, #36]	@ (8006808 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	0c9c      	lsrs	r4, r3, #18
 80067e8:	f7fe ff58 	bl	800569c <HAL_PWREx_GetVoltageRange>
 80067ec:	4603      	mov	r3, r0
 80067ee:	4619      	mov	r1, r3
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 f80b 	bl	800680c <RCC_SetFlashLatency>
 80067f6:	4603      	mov	r3, r0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd90      	pop	{r4, r7, pc}
 8006800:	0801c0ec 	.word	0x0801c0ec
 8006804:	0801c08c 	.word	0x0801c08c
 8006808:	431bde83 	.word	0x431bde83

0800680c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08e      	sub	sp, #56	@ 0x38
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006816:	4a3a      	ldr	r2, [pc, #232]	@ (8006900 <RCC_SetFlashLatency+0xf4>)
 8006818:	f107 0320 	add.w	r3, r7, #32
 800681c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006820:	6018      	str	r0, [r3, #0]
 8006822:	3304      	adds	r3, #4
 8006824:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006826:	4a37      	ldr	r2, [pc, #220]	@ (8006904 <RCC_SetFlashLatency+0xf8>)
 8006828:	f107 0318 	add.w	r3, r7, #24
 800682c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006830:	6018      	str	r0, [r3, #0]
 8006832:	3304      	adds	r3, #4
 8006834:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006836:	4a34      	ldr	r2, [pc, #208]	@ (8006908 <RCC_SetFlashLatency+0xfc>)
 8006838:	f107 030c 	add.w	r3, r7, #12
 800683c:	ca07      	ldmia	r2, {r0, r1, r2}
 800683e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006842:	2300      	movs	r3, #0
 8006844:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800684c:	d11b      	bne.n	8006886 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800684e:	2300      	movs	r3, #0
 8006850:	633b      	str	r3, [r7, #48]	@ 0x30
 8006852:	e014      	b.n	800687e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	3338      	adds	r3, #56	@ 0x38
 800685a:	443b      	add	r3, r7
 800685c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006860:	461a      	mov	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4293      	cmp	r3, r2
 8006866:	d807      	bhi.n	8006878 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	3338      	adds	r3, #56	@ 0x38
 800686e:	443b      	add	r3, r7
 8006870:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006876:	e021      	b.n	80068bc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	3301      	adds	r3, #1
 800687c:	633b      	str	r3, [r7, #48]	@ 0x30
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	2b02      	cmp	r3, #2
 8006882:	d9e7      	bls.n	8006854 <RCC_SetFlashLatency+0x48>
 8006884:	e01a      	b.n	80068bc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006886:	2300      	movs	r3, #0
 8006888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800688a:	e014      	b.n	80068b6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800688c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	3338      	adds	r3, #56	@ 0x38
 8006892:	443b      	add	r3, r7
 8006894:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4293      	cmp	r3, r2
 800689e:	d807      	bhi.n	80068b0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80068a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	3338      	adds	r3, #56	@ 0x38
 80068a6:	443b      	add	r3, r7
 80068a8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80068ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068ae:	e005      	b.n	80068bc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80068b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b2:	3301      	adds	r3, #1
 80068b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d9e7      	bls.n	800688c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80068bc:	4b13      	ldr	r3, [pc, #76]	@ (800690c <RCC_SetFlashLatency+0x100>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f023 0207 	bic.w	r2, r3, #7
 80068c4:	4911      	ldr	r1, [pc, #68]	@ (800690c <RCC_SetFlashLatency+0x100>)
 80068c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c8:	4313      	orrs	r3, r2
 80068ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068cc:	f7fb fca4 	bl	8002218 <HAL_GetTick>
 80068d0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80068d2:	e008      	b.n	80068e6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80068d4:	f7fb fca0 	bl	8002218 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e007      	b.n	80068f6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80068e6:	4b09      	ldr	r3, [pc, #36]	@ (800690c <RCC_SetFlashLatency+0x100>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d1ef      	bne.n	80068d4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3738      	adds	r7, #56	@ 0x38
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	0801bebc 	.word	0x0801bebc
 8006904:	0801bec4 	.word	0x0801bec4
 8006908:	0801becc 	.word	0x0801becc
 800690c:	58004000 	.word	0x58004000

08006910 <LL_RCC_LSE_IsReady>:
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d101      	bne.n	8006928 <LL_RCC_LSE_IsReady+0x18>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <LL_RCC_LSE_IsReady+0x1a>
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <LL_RCC_SetUSARTClockSource>:
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800693a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800693e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	0c1b      	lsrs	r3, r3, #16
 8006946:	43db      	mvns	r3, r3
 8006948:	401a      	ands	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <LL_RCC_SetI2SClockSource>:
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800696a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006972:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <LL_RCC_SetLPUARTClockSource>:
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr

080069b6 <LL_RCC_SetI2CClockSource>:
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80069be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	091b      	lsrs	r3, r3, #4
 80069ca:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80069ce:	43db      	mvns	r3, r3
 80069d0:	401a      	ands	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80069da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <LL_RCC_SetLPTIMClockSource>:
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80069f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	0c1b      	lsrs	r3, r3, #16
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	43db      	mvns	r3, r3
 8006a06:	401a      	ands	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	041b      	lsls	r3, r3, #16
 8006a0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bc80      	pop	{r7}
 8006a1e:	4770      	bx	lr

08006a20 <LL_RCC_SetRNGClockSource>:
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a30:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006a34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr

08006a4a <LL_RCC_SetADCClockSource>:
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr

08006a74 <LL_RCC_SetRTCClockSource>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <LL_RCC_GetRTCClockSource>:
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <LL_RCC_ForceBackupDomainReset>:
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006ace:	bf00      	nop
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr
	...

08006af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006b04:	2300      	movs	r3, #0
 8006b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006b08:	2300      	movs	r3, #0
 8006b0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d058      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006b18:	f7fe fd7e 	bl	8005618 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b1c:	f7fb fb7c 	bl	8002218 <HAL_GetTick>
 8006b20:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b22:	e009      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b24:	f7fb fb78 	bl	8002218 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d902      	bls.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	74fb      	strb	r3, [r7, #19]
        break;
 8006b36:	e006      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b38:	4b7b      	ldr	r3, [pc, #492]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b44:	d1ee      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006b46:	7cfb      	ldrb	r3, [r7, #19]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d13c      	bne.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006b4c:	f7ff ffa7 	bl	8006a9e <LL_RCC_GetRTCClockSource>
 8006b50:	4602      	mov	r2, r0
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d00f      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b66:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b68:	f7ff ffa5 	bl	8006ab6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b6c:	f7ff ffb3 	bl	8006ad6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d014      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fb fb48 	bl	8002218 <HAL_GetTick>
 8006b88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006b8a:	e00b      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8c:	f7fb fb44 	bl	8002218 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d902      	bls.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	74fb      	strb	r3, [r7, #19]
            break;
 8006ba2:	e004      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006ba4:	f7ff feb4 	bl	8006910 <LL_RCC_LSE_IsReady>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d1ee      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006bae:	7cfb      	ldrb	r3, [r7, #19]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff ff5b 	bl	8006a74 <LL_RCC_SetRTCClockSource>
 8006bbe:	e004      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bc0:	7cfb      	ldrb	r3, [r7, #19]
 8006bc2:	74bb      	strb	r3, [r7, #18]
 8006bc4:	e001      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc6:	7cfb      	ldrb	r3, [r7, #19]
 8006bc8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff fea9 	bl	8006932 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fe9e 	bl	8006932 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fec0 	bl	800698c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d004      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fee6 	bl	80069ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d004      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff fedb 	bl	80069ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff fed0 	bl	80069ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d004      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff fea9 	bl	80069b6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff fe9e 	bl	80069b6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff fe93 	bl	80069b6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d011      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fe5e 	bl	8006962 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d010      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fea5 	bl	8006a20 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d107      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ce8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d011      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fea3 	bl	8006a4a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d0c:	d107      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d1c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006d1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	58000400 	.word	0x58000400

08006d2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d071      	beq.n	8006e22 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fa ff9e 	bl	8001c94 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006d60:	4b32      	ldr	r3, [pc, #200]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b10      	cmp	r3, #16
 8006d6a:	d051      	beq.n	8006e10 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006d6e:	22ca      	movs	r2, #202	@ 0xca
 8006d70:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d72:	4b2e      	ldr	r3, [pc, #184]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006d74:	2253      	movs	r2, #83	@ 0x53
 8006d76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fa11 	bl	80071a0 <RTC_EnterInitMode>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13f      	bne.n	8006e08 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006d88:	4b28      	ldr	r3, [pc, #160]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	4a27      	ldr	r2, [pc, #156]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006d8e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d96:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006d98:	4b24      	ldr	r3, [pc, #144]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6859      	ldr	r1, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	4319      	orrs	r1, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	430b      	orrs	r3, r1
 8006dac:	491f      	ldr	r1, [pc, #124]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	041b      	lsls	r3, r3, #16
 8006dbc:	491b      	ldr	r1, [pc, #108]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	4915      	ldr	r1, [pc, #84]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa14 	bl	8007208 <RTC_ExitInitMode>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10e      	bne.n	8006e08 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8006dea:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a19      	ldr	r1, [r3, #32]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	4319      	orrs	r1, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	430b      	orrs	r3, r1
 8006e02:	490a      	ldr	r1, [pc, #40]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e08:	4b08      	ldr	r3, [pc, #32]	@ (8006e2c <HAL_RTC_Init+0x100>)
 8006e0a:	22ff      	movs	r2, #255	@ 0xff
 8006e0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e0e:	e001      	b.n	8006e14 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	40002800 	.word	0x40002800

08006e30 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_RTC_SetAlarm_IT+0x1e>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e0f3      	b.n	8007036 <HAL_RTC_SetAlarm_IT+0x206>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006e5e:	4b78      	ldr	r3, [pc, #480]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e66:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e6e:	d06a      	beq.n	8006f46 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d13a      	bne.n	8006eec <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006e76:	4b72      	ldr	r3, [pc, #456]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d102      	bne.n	8006e88 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 f9f5 	bl	8007284 <RTC_ByteToBcd2>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 f9ee 	bl	8007284 <RTC_ByteToBcd2>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006eac:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	789b      	ldrb	r3, [r3, #2]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f9e6 	bl	8007284 <RTC_ByteToBcd2>
 8006eb8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006eba:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	78db      	ldrb	r3, [r3, #3]
 8006ec2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ec4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 f9d8 	bl	8007284 <RTC_ByteToBcd2>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ed8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ee0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]
 8006eea:	e02c      	b.n	8006f46 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006ef4:	d00d      	beq.n	8006f12 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006efe:	d008      	beq.n	8006f12 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f00:	4b4f      	ldr	r3, [pc, #316]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f1e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f24:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	78db      	ldrb	r3, [r3, #3]
 8006f2a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f2c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f34:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f36:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f3c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f46:	4b3e      	ldr	r3, [pc, #248]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f48:	22ca      	movs	r2, #202	@ 0xca
 8006f4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f4e:	2253      	movs	r2, #83	@ 0x53
 8006f50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f5a:	d12c      	bne.n	8006fb6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006f5c:	4b38      	ldr	r3, [pc, #224]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	4a37      	ldr	r2, [pc, #220]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f62:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006f66:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006f68:	4b35      	ldr	r3, [pc, #212]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f74:	d107      	bne.n	8006f86 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	4930      	ldr	r1, [pc, #192]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	644b      	str	r3, [r1, #68]	@ 0x44
 8006f84:	e006      	b.n	8006f94 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006f86:	4a2e      	ldr	r2, [pc, #184]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006f94:	4a2a      	ldr	r2, [pc, #168]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa0:	f043 0201 	orr.w	r2, r3, #1
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006fa8:	4b25      	ldr	r3, [pc, #148]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	4a24      	ldr	r2, [pc, #144]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fae:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006fb2:	6193      	str	r3, [r2, #24]
 8006fb4:	e02b      	b.n	800700e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006fb6:	4b22      	ldr	r3, [pc, #136]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	4a21      	ldr	r2, [pc, #132]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fbc:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006fc0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fce:	d107      	bne.n	8006fe0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	4919      	ldr	r1, [pc, #100]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006fde:	e006      	b.n	8006fee <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006fe0:	4a17      	ldr	r2, [pc, #92]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006fe6:	4a16      	ldr	r2, [pc, #88]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006fee:	4a14      	ldr	r2, [pc, #80]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffa:	f043 0202 	orr.w	r2, r3, #2
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007002:	4b0f      	ldr	r3, [pc, #60]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	4a0e      	ldr	r2, [pc, #56]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8007008:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800700c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800700e:	4b0d      	ldr	r3, [pc, #52]	@ (8007044 <HAL_RTC_SetAlarm_IT+0x214>)
 8007010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007014:	4a0b      	ldr	r2, [pc, #44]	@ (8007044 <HAL_RTC_SetAlarm_IT+0x214>)
 8007016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800701a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800701e:	4b08      	ldr	r3, [pc, #32]	@ (8007040 <HAL_RTC_SetAlarm_IT+0x210>)
 8007020:	22ff      	movs	r2, #255	@ 0xff
 8007022:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	bd90      	pop	{r4, r7, pc}
 800703e:	bf00      	nop
 8007040:	40002800 	.word	0x40002800
 8007044:	58000800 	.word	0x58000800

08007048 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_RTC_DeactivateAlarm+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e048      	b.n	80070f2 <HAL_RTC_DeactivateAlarm+0xaa>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007070:	4b22      	ldr	r3, [pc, #136]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007072:	22ca      	movs	r2, #202	@ 0xca
 8007074:	625a      	str	r2, [r3, #36]	@ 0x24
 8007076:	4b21      	ldr	r3, [pc, #132]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007078:	2253      	movs	r2, #83	@ 0x53
 800707a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007082:	d115      	bne.n	80070b0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007084:	4b1d      	ldr	r3, [pc, #116]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	4a1c      	ldr	r2, [pc, #112]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 800708a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800708e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007090:	4b1a      	ldr	r3, [pc, #104]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007094:	4a19      	ldr	r2, [pc, #100]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007096:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800709a:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a0:	f023 0201 	bic.w	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80070a8:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070ae:	e014      	b.n	80070da <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80070b0:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	4a11      	ldr	r2, [pc, #68]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80070b6:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80070ba:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80070bc:	4b0f      	ldr	r3, [pc, #60]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80070be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c0:	4a0e      	ldr	r2, [pc, #56]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80070c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070c6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070cc:	f023 0202 	bic.w	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80070d4:	4b09      	ldr	r3, [pc, #36]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80070d6:	2202      	movs	r2, #2
 80070d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070da:	4b08      	ldr	r3, [pc, #32]	@ (80070fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80070dc:	22ff      	movs	r2, #255	@ 0xff
 80070de:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr
 80070fc:	40002800 	.word	0x40002800

08007100 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007108:	4b11      	ldr	r3, [pc, #68]	@ (8007150 <HAL_RTC_AlarmIRQHandler+0x50>)
 800710a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007110:	4013      	ands	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800711e:	4b0c      	ldr	r3, [pc, #48]	@ (8007150 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007120:	2201      	movs	r2, #1
 8007122:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fb fa40 	bl	80025aa <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007134:	4b06      	ldr	r3, [pc, #24]	@ (8007150 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007136:	2202      	movs	r2, #2
 8007138:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f94a 	bl	80073d4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40002800 	.word	0x40002800

08007154 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800715c:	4b0f      	ldr	r3, [pc, #60]	@ (800719c <HAL_RTC_WaitForSynchro+0x48>)
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	4a0e      	ldr	r2, [pc, #56]	@ (800719c <HAL_RTC_WaitForSynchro+0x48>)
 8007162:	f023 0320 	bic.w	r3, r3, #32
 8007166:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007168:	f7fb f856 	bl	8002218 <HAL_GetTick>
 800716c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800716e:	e009      	b.n	8007184 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007170:	f7fb f852 	bl	8002218 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800717e:	d901      	bls.n	8007184 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e006      	b.n	8007192 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007184:	4b05      	ldr	r3, [pc, #20]	@ (800719c <HAL_RTC_WaitForSynchro+0x48>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f003 0320 	and.w	r3, r3, #32
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ef      	beq.n	8007170 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40002800 	.word	0x40002800

080071a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80071ac:	4b15      	ldr	r3, [pc, #84]	@ (8007204 <RTC_EnterInitMode+0x64>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d120      	bne.n	80071fa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80071b8:	4b12      	ldr	r3, [pc, #72]	@ (8007204 <RTC_EnterInitMode+0x64>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4a11      	ldr	r2, [pc, #68]	@ (8007204 <RTC_EnterInitMode+0x64>)
 80071be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80071c4:	f7fb f828 	bl	8002218 <HAL_GetTick>
 80071c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071ca:	e00d      	b.n	80071e8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80071cc:	f7fb f824 	bl	8002218 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071da:	d905      	bls.n	80071e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2203      	movs	r2, #3
 80071e4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071e8:	4b06      	ldr	r3, [pc, #24]	@ (8007204 <RTC_EnterInitMode+0x64>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <RTC_EnterInitMode+0x5a>
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d1e8      	bne.n	80071cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40002800 	.word	0x40002800

08007208 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007214:	4b1a      	ldr	r3, [pc, #104]	@ (8007280 <RTC_ExitInitMode+0x78>)
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	4a19      	ldr	r2, [pc, #100]	@ (8007280 <RTC_ExitInitMode+0x78>)
 800721a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800721e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007220:	4b17      	ldr	r3, [pc, #92]	@ (8007280 <RTC_ExitInitMode+0x78>)
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10c      	bne.n	8007246 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff ff91 	bl	8007154 <HAL_RTC_WaitForSynchro>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01e      	beq.n	8007276 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2203      	movs	r2, #3
 800723c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
 8007244:	e017      	b.n	8007276 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007246:	4b0e      	ldr	r3, [pc, #56]	@ (8007280 <RTC_ExitInitMode+0x78>)
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	4a0d      	ldr	r2, [pc, #52]	@ (8007280 <RTC_ExitInitMode+0x78>)
 800724c:	f023 0320 	bic.w	r3, r3, #32
 8007250:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff ff7e 	bl	8007154 <HAL_RTC_WaitForSynchro>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2203      	movs	r2, #3
 8007262:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800726a:	4b05      	ldr	r3, [pc, #20]	@ (8007280 <RTC_ExitInitMode+0x78>)
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	4a04      	ldr	r2, [pc, #16]	@ (8007280 <RTC_ExitInitMode+0x78>)
 8007270:	f043 0320 	orr.w	r3, r3, #32
 8007274:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007276:	7bfb      	ldrb	r3, [r7, #15]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40002800 	.word	0x40002800

08007284 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007296:	e005      	b.n	80072a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	3b0a      	subs	r3, #10
 80072a2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	2b09      	cmp	r3, #9
 80072a8:	d8f6      	bhi.n	8007298 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	7afb      	ldrb	r3, [r7, #11]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b2db      	uxtb	r3, r3
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr
	...

080072c4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d101      	bne.n	80072da <HAL_RTCEx_EnableBypassShadow+0x16>
 80072d6:	2302      	movs	r3, #2
 80072d8:	e01f      	b.n	800731a <HAL_RTCEx_EnableBypassShadow+0x56>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2202      	movs	r2, #2
 80072e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007324 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80072ec:	22ca      	movs	r2, #202	@ 0xca
 80072ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80072f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007324 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80072f2:	2253      	movs	r2, #83	@ 0x53
 80072f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007324 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007324 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80072fc:	f043 0320 	orr.w	r3, r3, #32
 8007300:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007302:	4b08      	ldr	r3, [pc, #32]	@ (8007324 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007304:	22ff      	movs	r2, #255	@ 0xff
 8007306:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr
 8007324:	40002800 	.word	0x40002800

08007328 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_RTCEx_SetSSRU_IT+0x16>
 800733a:	2302      	movs	r3, #2
 800733c:	e027      	b.n	800738e <HAL_RTCEx_SetSSRU_IT+0x66>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800734e:	4b12      	ldr	r3, [pc, #72]	@ (8007398 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007350:	22ca      	movs	r2, #202	@ 0xca
 8007352:	625a      	str	r2, [r3, #36]	@ 0x24
 8007354:	4b10      	ldr	r3, [pc, #64]	@ (8007398 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007356:	2253      	movs	r2, #83	@ 0x53
 8007358:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800735a:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	4a0e      	ldr	r2, [pc, #56]	@ (8007398 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007364:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007366:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800736c:	4a0b      	ldr	r2, [pc, #44]	@ (800739c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800736e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007372:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007376:	4b08      	ldr	r3, [pc, #32]	@ (8007398 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007378:	22ff      	movs	r2, #255	@ 0xff
 800737a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	bc80      	pop	{r7}
 8007396:	4770      	bx	lr
 8007398:	40002800 	.word	0x40002800
 800739c:	58000800 	.word	0x58000800

080073a0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80073a8:	4b09      	ldr	r3, [pc, #36]	@ (80073d0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80073aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80073b4:	4b06      	ldr	r3, [pc, #24]	@ (80073d0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80073b6:	2240      	movs	r2, #64	@ 0x40
 80073b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fb f8ff 	bl	80025be <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40002800 	.word	0x40002800

080073d4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bc80      	pop	{r7}
 80073e4:	4770      	bx	lr
	...

080073e8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80073f4:	4b07      	ldr	r3, [pc, #28]	@ (8007414 <HAL_RTCEx_BKUPWrite+0x2c>)
 80073f6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4413      	add	r3, r2
 8007400:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
}
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	bc80      	pop	{r7}
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	4000b100 	.word	0x4000b100

08007418 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007422:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <HAL_RTCEx_BKUPRead+0x28>)
 8007424:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	4000b100 	.word	0x4000b100

08007444 <LL_PWR_SetRadioBusyTrigger>:
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800744c:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007454:	4904      	ldr	r1, [pc, #16]	@ (8007468 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4313      	orrs	r3, r2
 800745a:	608b      	str	r3, [r1, #8]
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	58000400 	.word	0x58000400

0800746c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007470:	4b05      	ldr	r3, [pc, #20]	@ (8007488 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007476:	4a04      	ldr	r2, [pc, #16]	@ (8007488 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800747c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007480:	bf00      	nop
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	58000400 	.word	0x58000400

0800748c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007490:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007496:	4a04      	ldr	r2, [pc, #16]	@ (80074a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007498:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800749c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074a0:	bf00      	nop
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr
 80074a8:	58000400 	.word	0x58000400

080074ac <LL_PWR_ClearFlag_RFBUSY>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80074b0:	4b03      	ldr	r3, [pc, #12]	@ (80074c0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80074b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074b6:	619a      	str	r2, [r3, #24]
}
 80074b8:	bf00      	nop
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr
 80074c0:	58000400 	.word	0x58000400

080074c4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80074c8:	4b06      	ldr	r3, [pc, #24]	@ (80074e4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d101      	bne.n	80074d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	58000400 	.word	0x58000400

080074e8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80074ec:	4b06      	ldr	r3, [pc, #24]	@ (8007508 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d101      	bne.n	80074fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80074f8:	2301      	movs	r3, #1
 80074fa:	e000      	b.n	80074fe <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	58000400 	.word	0x58000400

0800750c <LL_RCC_RF_DisableReset>:
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007518:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800751c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007520:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr

0800752c <LL_RCC_IsRFUnderReset>:
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800753c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007540:	d101      	bne.n	8007546 <LL_RCC_IsRFUnderReset+0x1a>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <LL_RCC_IsRFUnderReset+0x1c>
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr

08007550 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007558:	4b06      	ldr	r3, [pc, #24]	@ (8007574 <LL_EXTI_EnableIT_32_63+0x24>)
 800755a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800755e:	4905      	ldr	r1, [pc, #20]	@ (8007574 <LL_EXTI_EnableIT_32_63+0x24>)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	58000800 	.word	0x58000800

08007578 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	73fb      	strb	r3, [r7, #15]
    return status;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	e052      	b.n	8007634 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	799b      	ldrb	r3, [r3, #6]
 8007596:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_SUBGHZ_Init+0x2c>
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d109      	bne.n	80075b8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fa fc8c 	bl	8001ec8 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80075b0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80075b4:	f7ff ffcc 	bl	8007550 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d126      	bne.n	800760c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80075c4:	f7ff ffa2 	bl	800750c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075c8:	4b1c      	ldr	r3, [pc, #112]	@ (800763c <HAL_SUBGHZ_Init+0xc4>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	4613      	mov	r3, r2
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	1a9b      	subs	r3, r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	0cdb      	lsrs	r3, r3, #19
 80075d6:	2264      	movs	r2, #100	@ 0x64
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	609a      	str	r2, [r3, #8]
        break;
 80075ee:	e007      	b.n	8007600 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80075f6:	f7ff ff99 	bl	800752c <LL_RCC_IsRFUnderReset>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1ee      	bne.n	80075de <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007600:	f7ff ff34 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007604:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007608:	f7ff ff1c 	bl	8007444 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800760c:	f7ff ff4e 	bl	80074ac <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10a      	bne.n	800762c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fabc 	bl	8007b98 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	719a      	strb	r2, [r3, #6]

  return status;
 8007632:	7bfb      	ldrb	r3, [r7, #15]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000000 	.word	0x20000000

08007640 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	461a      	mov	r2, r3
 800764c:	460b      	mov	r3, r1
 800764e:	817b      	strh	r3, [r7, #10]
 8007650:	4613      	mov	r3, r2
 8007652:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	799b      	ldrb	r3, [r3, #6]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b01      	cmp	r3, #1
 800765c:	d14a      	bne.n	80076f4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	795b      	ldrb	r3, [r3, #5]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007666:	2302      	movs	r3, #2
 8007668:	e045      	b.n	80076f6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2202      	movs	r2, #2
 8007674:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fb5c 	bl	8007d34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800767c:	f7ff ff06 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007680:	210d      	movs	r1, #13
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 faa8 	bl	8007bd8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007688:	897b      	ldrh	r3, [r7, #10]
 800768a:	0a1b      	lsrs	r3, r3, #8
 800768c:	b29b      	uxth	r3, r3
 800768e:	b2db      	uxtb	r3, r3
 8007690:	4619      	mov	r1, r3
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 faa0 	bl	8007bd8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007698:	897b      	ldrh	r3, [r7, #10]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fa9a 	bl	8007bd8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076a4:	2300      	movs	r3, #0
 80076a6:	82bb      	strh	r3, [r7, #20]
 80076a8:	e00a      	b.n	80076c0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80076aa:	8abb      	ldrh	r3, [r7, #20]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	4413      	add	r3, r2
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fa8f 	bl	8007bd8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80076ba:	8abb      	ldrh	r3, [r7, #20]
 80076bc:	3301      	adds	r3, #1
 80076be:	82bb      	strh	r3, [r7, #20]
 80076c0:	8aba      	ldrh	r2, [r7, #20]
 80076c2:	893b      	ldrh	r3, [r7, #8]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d3f0      	bcc.n	80076aa <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076c8:	f7ff fed0 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fb55 	bl	8007d7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	75fb      	strb	r3, [r7, #23]
 80076de:	e001      	b.n	80076e4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	715a      	strb	r2, [r3, #5]

    return status;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	e000      	b.n	80076f6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80076f4:	2302      	movs	r3, #2
  }
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b088      	sub	sp, #32
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	461a      	mov	r2, r3
 800770a:	460b      	mov	r3, r1
 800770c:	817b      	strh	r3, [r7, #10]
 800770e:	4613      	mov	r3, r2
 8007710:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	799b      	ldrb	r3, [r3, #6]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b01      	cmp	r3, #1
 800771e:	d14a      	bne.n	80077b6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	795b      	ldrb	r3, [r3, #5]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007728:	2302      	movs	r3, #2
 800772a:	e045      	b.n	80077b8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 fafe 	bl	8007d34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007738:	f7ff fea8 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800773c:	211d      	movs	r1, #29
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fa4a 	bl	8007bd8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007744:	897b      	ldrh	r3, [r7, #10]
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	b29b      	uxth	r3, r3
 800774a:	b2db      	uxtb	r3, r3
 800774c:	4619      	mov	r1, r3
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fa42 	bl	8007bd8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007754:	897b      	ldrh	r3, [r7, #10]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	4619      	mov	r1, r3
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fa3c 	bl	8007bd8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007760:	2100      	movs	r1, #0
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 fa38 	bl	8007bd8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007768:	2300      	movs	r3, #0
 800776a:	82fb      	strh	r3, [r7, #22]
 800776c:	e009      	b.n	8007782 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800776e:	69b9      	ldr	r1, [r7, #24]
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fa87 	bl	8007c84 <SUBGHZSPI_Receive>
      pData++;
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	3301      	adds	r3, #1
 800777a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800777c:	8afb      	ldrh	r3, [r7, #22]
 800777e:	3301      	adds	r3, #1
 8007780:	82fb      	strh	r3, [r7, #22]
 8007782:	8afa      	ldrh	r2, [r7, #22]
 8007784:	893b      	ldrh	r3, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	d3f1      	bcc.n	800776e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800778a:	f7ff fe6f 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 faf4 	bl	8007d7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e001      	b.n	80077a6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	715a      	strb	r2, [r3, #5]

    return status;
 80077b2:	7ffb      	ldrb	r3, [r7, #31]
 80077b4:	e000      	b.n	80077b8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80077b6:	2302      	movs	r3, #2
  }
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3720      	adds	r7, #32
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	607a      	str	r2, [r7, #4]
 80077ca:	461a      	mov	r2, r3
 80077cc:	460b      	mov	r3, r1
 80077ce:	72fb      	strb	r3, [r7, #11]
 80077d0:	4613      	mov	r3, r2
 80077d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	799b      	ldrb	r3, [r3, #6]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d14a      	bne.n	8007874 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	795b      	ldrb	r3, [r3, #5]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e045      	b.n	8007876 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fa9f 	bl	8007d34 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	2b84      	cmp	r3, #132	@ 0x84
 80077fa:	d002      	beq.n	8007802 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	2b94      	cmp	r3, #148	@ 0x94
 8007800:	d103      	bne.n	800780a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	711a      	strb	r2, [r3, #4]
 8007808:	e002      	b.n	8007810 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007810:	f7ff fe3c 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	4619      	mov	r1, r3
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f9dd 	bl	8007bd8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800781e:	2300      	movs	r3, #0
 8007820:	82bb      	strh	r3, [r7, #20]
 8007822:	e00a      	b.n	800783a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007824:	8abb      	ldrh	r3, [r7, #20]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	4619      	mov	r1, r3
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f9d2 	bl	8007bd8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007834:	8abb      	ldrh	r3, [r7, #20]
 8007836:	3301      	adds	r3, #1
 8007838:	82bb      	strh	r3, [r7, #20]
 800783a:	8aba      	ldrh	r2, [r7, #20]
 800783c:	893b      	ldrh	r3, [r7, #8]
 800783e:	429a      	cmp	r2, r3
 8007840:	d3f0      	bcc.n	8007824 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007842:	f7ff fe13 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007846:	7afb      	ldrb	r3, [r7, #11]
 8007848:	2b84      	cmp	r3, #132	@ 0x84
 800784a:	d002      	beq.n	8007852 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fa95 	bl	8007d7c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	75fb      	strb	r3, [r7, #23]
 800785e:	e001      	b.n	8007864 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	715a      	strb	r2, [r3, #5]

    return status;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	e000      	b.n	8007876 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b088      	sub	sp, #32
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	461a      	mov	r2, r3
 800788a:	460b      	mov	r3, r1
 800788c:	72fb      	strb	r3, [r7, #11]
 800788e:	4613      	mov	r3, r2
 8007890:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	799b      	ldrb	r3, [r3, #6]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	d13d      	bne.n	800791c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	795b      	ldrb	r3, [r3, #5]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e038      	b.n	800791e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fa3e 	bl	8007d34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078b8:	f7ff fde8 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	4619      	mov	r1, r3
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f989 	bl	8007bd8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80078c6:	2100      	movs	r1, #0
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f985 	bl	8007bd8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078ce:	2300      	movs	r3, #0
 80078d0:	82fb      	strh	r3, [r7, #22]
 80078d2:	e009      	b.n	80078e8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80078d4:	69b9      	ldr	r1, [r7, #24]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 f9d4 	bl	8007c84 <SUBGHZSPI_Receive>
      pData++;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	3301      	adds	r3, #1
 80078e0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80078e2:	8afb      	ldrh	r3, [r7, #22]
 80078e4:	3301      	adds	r3, #1
 80078e6:	82fb      	strh	r3, [r7, #22]
 80078e8:	8afa      	ldrh	r2, [r7, #22]
 80078ea:	893b      	ldrh	r3, [r7, #8]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d3f1      	bcc.n	80078d4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078f0:	f7ff fdbc 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fa41 	bl	8007d7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	77fb      	strb	r3, [r7, #31]
 8007906:	e001      	b.n	800790c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	715a      	strb	r2, [r3, #5]

    return status;
 8007918:	7ffb      	ldrb	r3, [r7, #31]
 800791a:	e000      	b.n	800791e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800791c:	2302      	movs	r3, #2
  }
}
 800791e:	4618      	mov	r0, r3
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b086      	sub	sp, #24
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	461a      	mov	r2, r3
 8007932:	460b      	mov	r3, r1
 8007934:	72fb      	strb	r3, [r7, #11]
 8007936:	4613      	mov	r3, r2
 8007938:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	799b      	ldrb	r3, [r3, #6]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d13e      	bne.n	80079c2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	795b      	ldrb	r3, [r3, #5]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800794c:	2302      	movs	r3, #2
 800794e:	e039      	b.n	80079c4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2201      	movs	r2, #1
 8007954:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f9ec 	bl	8007d34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800795c:	f7ff fd96 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007960:	210e      	movs	r1, #14
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f938 	bl	8007bd8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	4619      	mov	r1, r3
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f933 	bl	8007bd8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007972:	2300      	movs	r3, #0
 8007974:	82bb      	strh	r3, [r7, #20]
 8007976:	e00a      	b.n	800798e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007978:	8abb      	ldrh	r3, [r7, #20]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	4413      	add	r3, r2
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f928 	bl	8007bd8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007988:	8abb      	ldrh	r3, [r7, #20]
 800798a:	3301      	adds	r3, #1
 800798c:	82bb      	strh	r3, [r7, #20]
 800798e:	8aba      	ldrh	r2, [r7, #20]
 8007990:	893b      	ldrh	r3, [r7, #8]
 8007992:	429a      	cmp	r2, r3
 8007994:	d3f0      	bcc.n	8007978 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007996:	f7ff fd69 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f9ee 	bl	8007d7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
 80079ac:	e001      	b.n	80079b2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	715a      	strb	r2, [r3, #5]

    return status;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	e000      	b.n	80079c4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80079c2:	2302      	movs	r3, #2
  }
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	461a      	mov	r2, r3
 80079d8:	460b      	mov	r3, r1
 80079da:	72fb      	strb	r3, [r7, #11]
 80079dc:	4613      	mov	r3, r2
 80079de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	799b      	ldrb	r3, [r3, #6]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d141      	bne.n	8007a72 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	795b      	ldrb	r3, [r3, #5]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_SUBGHZ_ReadBuffer+0x2e>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e03c      	b.n	8007a74 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 f997 	bl	8007d34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a06:	f7ff fd41 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007a0a:	211e      	movs	r1, #30
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f8e3 	bl	8007bd8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	4619      	mov	r1, r3
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f8de 	bl	8007bd8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 f8da 	bl	8007bd8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a24:	2300      	movs	r3, #0
 8007a26:	82fb      	strh	r3, [r7, #22]
 8007a28:	e009      	b.n	8007a3e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a2a:	69b9      	ldr	r1, [r7, #24]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f929 	bl	8007c84 <SUBGHZSPI_Receive>
      pData++;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	3301      	adds	r3, #1
 8007a36:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a38:	8afb      	ldrh	r3, [r7, #22]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	82fb      	strh	r3, [r7, #22]
 8007a3e:	8afa      	ldrh	r2, [r7, #22]
 8007a40:	893b      	ldrh	r3, [r7, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d3f1      	bcc.n	8007a2a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a46:	f7ff fd11 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f996 	bl	8007d7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	77fb      	strb	r3, [r7, #31]
 8007a5c:	e001      	b.n	8007a62 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	715a      	strb	r2, [r3, #5]

    return status;
 8007a6e:	7ffb      	ldrb	r3, [r7, #31]
 8007a70:	e000      	b.n	8007a74 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007a72:	2302      	movs	r3, #2
  }
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3720      	adds	r7, #32
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007a84:	2300      	movs	r3, #0
 8007a86:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007a88:	f107 020c 	add.w	r2, r7, #12
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	2112      	movs	r1, #18
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff fef4 	bl	800787e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007a96:	7b3b      	ldrb	r3, [r7, #12]
 8007a98:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007a9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	b21a      	sxth	r2, r3
 8007aa2:	7b7b      	ldrb	r3, [r7, #13]
 8007aa4:	b21b      	sxth	r3, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	b21b      	sxth	r3, r3
 8007aaa:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007aac:	f107 020c 	add.w	r2, r7, #12
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	2102      	movs	r1, #2
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff fe83 	bl	80077c0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007aba:	89fb      	ldrh	r3, [r7, #14]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f012 fc5b 	bl	801a380 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8007aca:	89fb      	ldrh	r3, [r7, #14]
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d008      	beq.n	8007ae8 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8007ad6:	89fb      	ldrh	r3, [r7, #14]
 8007ad8:	099b      	lsrs	r3, r3, #6
 8007ada:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f012 fc5a 	bl	801a39c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007ae8:	89fb      	ldrh	r3, [r7, #14]
 8007aea:	089b      	lsrs	r3, r3, #2
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f012 fca9 	bl	801a44c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007afa:	89fb      	ldrh	r3, [r7, #14]
 8007afc:	08db      	lsrs	r3, r3, #3
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f012 fcae 	bl	801a468 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007b0c:	89fb      	ldrh	r3, [r7, #14]
 8007b0e:	091b      	lsrs	r3, r3, #4
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f012 fcb3 	bl	801a484 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007b1e:	89fb      	ldrh	r3, [r7, #14]
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f012 fc80 	bl	801a430 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007b30:	89fb      	ldrh	r3, [r7, #14]
 8007b32:	099b      	lsrs	r3, r3, #6
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f012 fc3b 	bl	801a3b8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007b42:	89fb      	ldrh	r3, [r7, #14]
 8007b44:	09db      	lsrs	r3, r3, #7
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00e      	beq.n	8007b6c <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007b4e:	89fb      	ldrh	r3, [r7, #14]
 8007b50:	0a1b      	lsrs	r3, r3, #8
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f012 fc39 	bl	801a3d4 <HAL_SUBGHZ_CADStatusCallback>
 8007b62:	e003      	b.n	8007b6c <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007b64:	2100      	movs	r1, #0
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f012 fc34 	bl	801a3d4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007b6c:	89fb      	ldrh	r3, [r7, #14]
 8007b6e:	0a5b      	lsrs	r3, r3, #9
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f012 fc49 	bl	801a410 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
 8007b80:	0b9b      	lsrs	r3, r3, #14
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f012 fc88 	bl	801a4a0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd4 <SUBGHZSPI_Init+0x3c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8007bd4 <SUBGHZSPI_Init+0x3c>)
 8007ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007baa:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007bac:	4a09      	ldr	r2, [pc, #36]	@ (8007bd4 <SUBGHZSPI_Init+0x3c>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007bb4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007bb6:	4b07      	ldr	r3, [pc, #28]	@ (8007bd4 <SUBGHZSPI_Init+0x3c>)
 8007bb8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007bbe:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <SUBGHZSPI_Init+0x3c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a04      	ldr	r2, [pc, #16]	@ (8007bd4 <SUBGHZSPI_Init+0x3c>)
 8007bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bc8:	6013      	str	r3, [r2, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr
 8007bd4:	58010000 	.word	0x58010000

08007bd8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007be8:	4b23      	ldr	r3, [pc, #140]	@ (8007c78 <SUBGHZSPI_Transmit+0xa0>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	4613      	mov	r3, r2
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	0cdb      	lsrs	r3, r3, #19
 8007bf6:	2264      	movs	r2, #100	@ 0x64
 8007bf8:	fb02 f303 	mul.w	r3, r2, r3
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d105      	bne.n	8007c10 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	609a      	str	r2, [r3, #8]
      break;
 8007c0e:	e008      	b.n	8007c22 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007c16:	4b19      	ldr	r3, [pc, #100]	@ (8007c7c <SUBGHZSPI_Transmit+0xa4>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d1ed      	bne.n	8007bfe <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007c22:	4b17      	ldr	r3, [pc, #92]	@ (8007c80 <SUBGHZSPI_Transmit+0xa8>)
 8007c24:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c2c:	4b12      	ldr	r3, [pc, #72]	@ (8007c78 <SUBGHZSPI_Transmit+0xa0>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	1a9b      	subs	r3, r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	0cdb      	lsrs	r3, r3, #19
 8007c3a:	2264      	movs	r2, #100	@ 0x64
 8007c3c:	fb02 f303 	mul.w	r3, r2, r3
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d105      	bne.n	8007c54 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	609a      	str	r2, [r3, #8]
      break;
 8007c52:	e008      	b.n	8007c66 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3b01      	subs	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007c5a:	4b08      	ldr	r3, [pc, #32]	@ (8007c7c <SUBGHZSPI_Transmit+0xa4>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d1ed      	bne.n	8007c42 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007c66:	4b05      	ldr	r3, [pc, #20]	@ (8007c7c <SUBGHZSPI_Transmit+0xa4>)
 8007c68:	68db      	ldr	r3, [r3, #12]

  return status;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20000000 	.word	0x20000000
 8007c7c:	58010000 	.word	0x58010000
 8007c80:	5801000c 	.word	0x5801000c

08007c84 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c92:	4b25      	ldr	r3, [pc, #148]	@ (8007d28 <SUBGHZSPI_Receive+0xa4>)
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	4613      	mov	r3, r2
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	1a9b      	subs	r3, r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	0cdb      	lsrs	r3, r3, #19
 8007ca0:	2264      	movs	r2, #100	@ 0x64
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d105      	bne.n	8007cba <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	609a      	str	r2, [r3, #8]
      break;
 8007cb8:	e008      	b.n	8007ccc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d2c <SUBGHZSPI_Receive+0xa8>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d1ed      	bne.n	8007ca8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007ccc:	4b18      	ldr	r3, [pc, #96]	@ (8007d30 <SUBGHZSPI_Receive+0xac>)
 8007cce:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	22ff      	movs	r2, #255	@ 0xff
 8007cd4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cd6:	4b14      	ldr	r3, [pc, #80]	@ (8007d28 <SUBGHZSPI_Receive+0xa4>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	0cdb      	lsrs	r3, r3, #19
 8007ce4:	2264      	movs	r2, #100	@ 0x64
 8007ce6:	fb02 f303 	mul.w	r3, r2, r3
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d105      	bne.n	8007cfe <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	609a      	str	r2, [r3, #8]
      break;
 8007cfc:	e008      	b.n	8007d10 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007d04:	4b09      	ldr	r3, [pc, #36]	@ (8007d2c <SUBGHZSPI_Receive+0xa8>)
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d1ed      	bne.n	8007cec <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007d10:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <SUBGHZSPI_Receive+0xa8>)
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	701a      	strb	r2, [r3, #0]

  return status;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	20000000 	.word	0x20000000
 8007d2c:	58010000 	.word	0x58010000
 8007d30:	5801000c 	.word	0x5801000c

08007d34 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	791b      	ldrb	r3, [r3, #4]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d111      	bne.n	8007d68 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007d44:	4b0c      	ldr	r3, [pc, #48]	@ (8007d78 <SUBGHZ_CheckDeviceReady+0x44>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	4413      	add	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	0c1b      	lsrs	r3, r3, #16
 8007d52:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d54:	f7ff fb9a 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1f9      	bne.n	8007d58 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d64:	f7ff fb82 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f807 	bl	8007d7c <SUBGHZ_WaitOnBusy>
 8007d6e:	4603      	mov	r3, r0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	20000000 	.word	0x20000000

08007d7c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007d88:	4b12      	ldr	r3, [pc, #72]	@ (8007dd4 <SUBGHZ_WaitOnBusy+0x58>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	4413      	add	r3, r2
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	0d1b      	lsrs	r3, r3, #20
 8007d96:	2264      	movs	r2, #100	@ 0x64
 8007d98:	fb02 f303 	mul.w	r3, r2, r3
 8007d9c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007d9e:	f7ff fba3 	bl	80074e8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007da2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d105      	bne.n	8007db6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2202      	movs	r2, #2
 8007db2:	609a      	str	r2, [r3, #8]
      break;
 8007db4:	e009      	b.n	8007dca <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007dbc:	f7ff fb82 	bl	80074c4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d0e9      	beq.n	8007d9e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20000000 	.word	0x20000000

08007dd8 <LL_RCC_GetUSARTClockSource>:
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007de4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	401a      	ands	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	041b      	lsls	r3, r3, #16
 8007df0:	4313      	orrs	r3, r2
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr

08007dfc <LL_RCC_GetLPUARTClockSource>:
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e08:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4013      	ands	r3, r2
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr

08007e1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e042      	b.n	8007eb2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d106      	bne.n	8007e44 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fa fd4c 	bl	80028dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2224      	movs	r2, #36	@ 0x24
 8007e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0201 	bic.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 feab 	bl	8008bc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fc34 	bl	80086d8 <UART_SetConfig>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e01b      	b.n	8007eb2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f042 0201 	orr.w	r2, r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 ff29 	bl	8008d02 <UART_CheckIdleState>
 8007eb0:	4603      	mov	r3, r0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	@ 0x28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d137      	bne.n	8007f44 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <HAL_UART_Receive_IT+0x24>
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e030      	b.n	8007f46 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a18      	ldr	r2, [pc, #96]	@ (8007f50 <HAL_UART_Receive_IT+0x94>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d01f      	beq.n	8007f34 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d018      	beq.n	8007f34 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	e853 3f00 	ldrex	r3, [r3]
 8007f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	623b      	str	r3, [r7, #32]
 8007f22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	69f9      	ldr	r1, [r7, #28]
 8007f26:	6a3a      	ldr	r2, [r7, #32]
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e6      	bne.n	8007f02 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	461a      	mov	r2, r3
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 fffe 	bl	8008f3c <UART_Start_Receive_IT>
 8007f40:	4603      	mov	r3, r0
 8007f42:	e000      	b.n	8007f46 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f44:	2302      	movs	r3, #2
  }
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3728      	adds	r7, #40	@ 0x28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	40008000 	.word	0x40008000

08007f54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08a      	sub	sp, #40	@ 0x28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d167      	bne.n	800803c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <HAL_UART_Transmit_DMA+0x24>
 8007f72:	88fb      	ldrh	r3, [r7, #6]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e060      	b.n	800803e <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	88fa      	ldrh	r2, [r7, #6]
 8007f86:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	88fa      	ldrh	r2, [r7, #6]
 8007f8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2221      	movs	r2, #33	@ 0x21
 8007f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d028      	beq.n	8007ffc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fae:	4a26      	ldr	r2, [pc, #152]	@ (8008048 <HAL_UART_Transmit_DMA+0xf4>)
 8007fb0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fb6:	4a25      	ldr	r2, [pc, #148]	@ (800804c <HAL_UART_Transmit_DMA+0xf8>)
 8007fb8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fbe:	4a24      	ldr	r2, [pc, #144]	@ (8008050 <HAL_UART_Transmit_DMA+0xfc>)
 8007fc0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3328      	adds	r3, #40	@ 0x28
 8007fda:	461a      	mov	r2, r3
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	f7fc fadf 	bl	80045a0 <HAL_DMA_Start_IT>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d009      	beq.n	8007ffc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2210      	movs	r2, #16
 8007fec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e020      	b.n	800803e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2240      	movs	r2, #64	@ 0x40
 8008002:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3308      	adds	r3, #8
 800800a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	613b      	str	r3, [r7, #16]
   return(result);
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800801a:	627b      	str	r3, [r7, #36]	@ 0x24
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3308      	adds	r3, #8
 8008022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008024:	623a      	str	r2, [r7, #32]
 8008026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	69f9      	ldr	r1, [r7, #28]
 800802a:	6a3a      	ldr	r2, [r7, #32]
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	61bb      	str	r3, [r7, #24]
   return(result);
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e5      	bne.n	8008004 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	e000      	b.n	800803e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	3728      	adds	r7, #40	@ 0x28
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	080092c7 	.word	0x080092c7
 800804c:	08009361 	.word	0x08009361
 8008050:	0800937d 	.word	0x0800937d

08008054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b0ba      	sub	sp, #232	@ 0xe8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800807a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800807e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008082:	4013      	ands	r3, r2
 8008084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d11b      	bne.n	80080c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008094:	f003 0320 	and.w	r3, r3, #32
 8008098:	2b00      	cmp	r3, #0
 800809a:	d015      	beq.n	80080c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800809c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d105      	bne.n	80080b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d009      	beq.n	80080c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 82e3 	beq.w	8008684 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
      }
      return;
 80080c6:	e2dd      	b.n	8008684 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8123 	beq.w	8008318 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080d6:	4b8d      	ldr	r3, [pc, #564]	@ (800830c <HAL_UART_IRQHandler+0x2b8>)
 80080d8:	4013      	ands	r3, r2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80080e2:	4b8b      	ldr	r3, [pc, #556]	@ (8008310 <HAL_UART_IRQHandler+0x2bc>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 8116 	beq.w	8008318 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d011      	beq.n	800811c <HAL_UART_IRQHandler+0xc8>
 80080f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2201      	movs	r2, #1
 800810a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008112:	f043 0201 	orr.w	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800811c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d011      	beq.n	800814c <HAL_UART_IRQHandler+0xf8>
 8008128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2202      	movs	r2, #2
 800813a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008142:	f043 0204 	orr.w	r2, r3, #4
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d011      	beq.n	800817c <HAL_UART_IRQHandler+0x128>
 8008158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2204      	movs	r2, #4
 800816a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008172:	f043 0202 	orr.w	r2, r3, #2
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800817c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008180:	f003 0308 	and.w	r3, r3, #8
 8008184:	2b00      	cmp	r3, #0
 8008186:	d017      	beq.n	80081b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d105      	bne.n	80081a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008194:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008198:	4b5c      	ldr	r3, [pc, #368]	@ (800830c <HAL_UART_IRQHandler+0x2b8>)
 800819a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00b      	beq.n	80081b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2208      	movs	r2, #8
 80081a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ae:	f043 0208 	orr.w	r2, r3, #8
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d012      	beq.n	80081ea <HAL_UART_IRQHandler+0x196>
 80081c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00c      	beq.n	80081ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e0:	f043 0220 	orr.w	r2, r3, #32
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 8249 	beq.w	8008688 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d013      	beq.n	800822a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	2b00      	cmp	r3, #0
 800820c:	d105      	bne.n	800821a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800820e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823e:	2b40      	cmp	r3, #64	@ 0x40
 8008240:	d005      	beq.n	800824e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008246:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800824a:	2b00      	cmp	r3, #0
 800824c:	d054      	beq.n	80082f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 ffd4 	bl	80091fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825e:	2b40      	cmp	r3, #64	@ 0x40
 8008260:	d146      	bne.n	80082f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3308      	adds	r3, #8
 8008268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800827c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3308      	adds	r3, #8
 800828a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800828e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800829a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80082a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1d9      	bne.n	8008262 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d017      	beq.n	80082e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082be:	4a15      	ldr	r2, [pc, #84]	@ (8008314 <HAL_UART_IRQHandler+0x2c0>)
 80082c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fc fa45 	bl	8004758 <HAL_DMA_Abort_IT>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d019      	beq.n	8008308 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80082e2:	4610      	mov	r0, r2
 80082e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e6:	e00f      	b.n	8008308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f9e0 	bl	80086ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ee:	e00b      	b.n	8008308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f9dc 	bl	80086ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f6:	e007      	b.n	8008308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f9d8 	bl	80086ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008306:	e1bf      	b.n	8008688 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008308:	bf00      	nop
    return;
 800830a:	e1bd      	b.n	8008688 <HAL_UART_IRQHandler+0x634>
 800830c:	10000001 	.word	0x10000001
 8008310:	04000120 	.word	0x04000120
 8008314:	080093fd 	.word	0x080093fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800831c:	2b01      	cmp	r3, #1
 800831e:	f040 8153 	bne.w	80085c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008326:	f003 0310 	and.w	r3, r3, #16
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 814c 	beq.w	80085c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 8145 	beq.w	80085c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2210      	movs	r2, #16
 8008344:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008350:	2b40      	cmp	r3, #64	@ 0x40
 8008352:	f040 80bb 	bne.w	80084cc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008364:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 818f 	beq.w	800868c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008374:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008378:	429a      	cmp	r2, r3
 800837a:	f080 8187 	bcs.w	800868c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008384:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b00      	cmp	r3, #0
 8008398:	f040 8087 	bne.w	80084aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80083d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80083de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1da      	bne.n	800839c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3308      	adds	r3, #8
 80083ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80083f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083f8:	f023 0301 	bic.w	r3, r3, #1
 80083fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800840a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800840e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008412:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800841c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e1      	bne.n	80083e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3308      	adds	r3, #8
 8008442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008446:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008448:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800844c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e3      	bne.n	8008422 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008478:	f023 0310 	bic.w	r3, r3, #16
 800847c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800848a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800848c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008490:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e4      	bne.n	8008468 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fc f8f9 	bl	800469c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2202      	movs	r2, #2
 80084ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084bc:	b29b      	uxth	r3, r3
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f8fb 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084ca:	e0df      	b.n	800868c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084d8:	b29b      	uxth	r3, r3
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 80d1 	beq.w	8008690 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80084ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 80cc 	beq.w	8008690 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800850c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800851a:	647b      	str	r3, [r7, #68]	@ 0x44
 800851c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008520:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e4      	bne.n	80084f8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	623b      	str	r3, [r7, #32]
   return(result);
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008544:	f023 0301 	bic.w	r3, r3, #1
 8008548:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008556:	633a      	str	r2, [r7, #48]	@ 0x30
 8008558:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800855c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e1      	bne.n	800852e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	60fb      	str	r3, [r7, #12]
   return(result);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f023 0310 	bic.w	r3, r3, #16
 8008592:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085a0:	61fb      	str	r3, [r7, #28]
 80085a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	69b9      	ldr	r1, [r7, #24]
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	617b      	str	r3, [r7, #20]
   return(result);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e4      	bne.n	800857e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f87d 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085c6:	e063      	b.n	8008690 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00e      	beq.n	80085f2 <HAL_UART_IRQHandler+0x59e>
 80085d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d008      	beq.n	80085f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 fc64 	bl	8009eb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085f0:	e051      	b.n	8008696 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d014      	beq.n	8008628 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800860a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800860e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d008      	beq.n	8008628 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800861a:	2b00      	cmp	r3, #0
 800861c:	d03a      	beq.n	8008694 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
    }
    return;
 8008626:	e035      	b.n	8008694 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <HAL_UART_IRQHandler+0x5f4>
 8008634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fef1 	bl	8009428 <UART_EndTransmit_IT>
    return;
 8008646:	e026      	b.n	8008696 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800864c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <HAL_UART_IRQHandler+0x614>
 8008654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008658:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 fc3b 	bl	8009edc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008666:	e016      	b.n	8008696 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d010      	beq.n	8008696 <HAL_UART_IRQHandler+0x642>
 8008674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008678:	2b00      	cmp	r3, #0
 800867a:	da0c      	bge.n	8008696 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 fc24 	bl	8009eca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008682:	e008      	b.n	8008696 <HAL_UART_IRQHandler+0x642>
      return;
 8008684:	bf00      	nop
 8008686:	e006      	b.n	8008696 <HAL_UART_IRQHandler+0x642>
    return;
 8008688:	bf00      	nop
 800868a:	e004      	b.n	8008696 <HAL_UART_IRQHandler+0x642>
      return;
 800868c:	bf00      	nop
 800868e:	e002      	b.n	8008696 <HAL_UART_IRQHandler+0x642>
      return;
 8008690:	bf00      	nop
 8008692:	e000      	b.n	8008696 <HAL_UART_IRQHandler+0x642>
    return;
 8008694:	bf00      	nop
  }
}
 8008696:	37e8      	adds	r7, #232	@ 0xe8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr

080086ae <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr
	...

080086d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086dc:	b08c      	sub	sp, #48	@ 0x30
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	431a      	orrs	r2, r3
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	4b94      	ldr	r3, [pc, #592]	@ (8008958 <UART_SetConfig+0x280>)
 8008708:	4013      	ands	r3, r2
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	6812      	ldr	r2, [r2, #0]
 800870e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008710:	430b      	orrs	r3, r1
 8008712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a89      	ldr	r2, [pc, #548]	@ (800895c <UART_SetConfig+0x284>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d004      	beq.n	8008744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008740:	4313      	orrs	r3, r2
 8008742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800874e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008758:	430b      	orrs	r3, r1
 800875a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008762:	f023 010f 	bic.w	r1, r3, #15
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a7a      	ldr	r2, [pc, #488]	@ (8008960 <UART_SetConfig+0x288>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d127      	bne.n	80087cc <UART_SetConfig+0xf4>
 800877c:	2003      	movs	r0, #3
 800877e:	f7ff fb2b 	bl	8007dd8 <LL_RCC_GetUSARTClockSource>
 8008782:	4603      	mov	r3, r0
 8008784:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008788:	2b03      	cmp	r3, #3
 800878a:	d81b      	bhi.n	80087c4 <UART_SetConfig+0xec>
 800878c:	a201      	add	r2, pc, #4	@ (adr r2, 8008794 <UART_SetConfig+0xbc>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087a5 	.word	0x080087a5
 8008798:	080087b5 	.word	0x080087b5
 800879c:	080087ad 	.word	0x080087ad
 80087a0:	080087bd 	.word	0x080087bd
 80087a4:	2301      	movs	r3, #1
 80087a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087aa:	e080      	b.n	80088ae <UART_SetConfig+0x1d6>
 80087ac:	2302      	movs	r3, #2
 80087ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b2:	e07c      	b.n	80088ae <UART_SetConfig+0x1d6>
 80087b4:	2304      	movs	r3, #4
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ba:	e078      	b.n	80088ae <UART_SetConfig+0x1d6>
 80087bc:	2308      	movs	r3, #8
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c2:	e074      	b.n	80088ae <UART_SetConfig+0x1d6>
 80087c4:	2310      	movs	r3, #16
 80087c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ca:	e070      	b.n	80088ae <UART_SetConfig+0x1d6>
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a64      	ldr	r2, [pc, #400]	@ (8008964 <UART_SetConfig+0x28c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d138      	bne.n	8008848 <UART_SetConfig+0x170>
 80087d6:	200c      	movs	r0, #12
 80087d8:	f7ff fafe 	bl	8007dd8 <LL_RCC_GetUSARTClockSource>
 80087dc:	4603      	mov	r3, r0
 80087de:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80087e2:	2b0c      	cmp	r3, #12
 80087e4:	d82c      	bhi.n	8008840 <UART_SetConfig+0x168>
 80087e6:	a201      	add	r2, pc, #4	@ (adr r2, 80087ec <UART_SetConfig+0x114>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	08008821 	.word	0x08008821
 80087f0:	08008841 	.word	0x08008841
 80087f4:	08008841 	.word	0x08008841
 80087f8:	08008841 	.word	0x08008841
 80087fc:	08008831 	.word	0x08008831
 8008800:	08008841 	.word	0x08008841
 8008804:	08008841 	.word	0x08008841
 8008808:	08008841 	.word	0x08008841
 800880c:	08008829 	.word	0x08008829
 8008810:	08008841 	.word	0x08008841
 8008814:	08008841 	.word	0x08008841
 8008818:	08008841 	.word	0x08008841
 800881c:	08008839 	.word	0x08008839
 8008820:	2300      	movs	r3, #0
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008826:	e042      	b.n	80088ae <UART_SetConfig+0x1d6>
 8008828:	2302      	movs	r3, #2
 800882a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800882e:	e03e      	b.n	80088ae <UART_SetConfig+0x1d6>
 8008830:	2304      	movs	r3, #4
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008836:	e03a      	b.n	80088ae <UART_SetConfig+0x1d6>
 8008838:	2308      	movs	r3, #8
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800883e:	e036      	b.n	80088ae <UART_SetConfig+0x1d6>
 8008840:	2310      	movs	r3, #16
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008846:	e032      	b.n	80088ae <UART_SetConfig+0x1d6>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a43      	ldr	r2, [pc, #268]	@ (800895c <UART_SetConfig+0x284>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d12a      	bne.n	80088a8 <UART_SetConfig+0x1d0>
 8008852:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008856:	f7ff fad1 	bl	8007dfc <LL_RCC_GetLPUARTClockSource>
 800885a:	4603      	mov	r3, r0
 800885c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008860:	d01a      	beq.n	8008898 <UART_SetConfig+0x1c0>
 8008862:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008866:	d81b      	bhi.n	80088a0 <UART_SetConfig+0x1c8>
 8008868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800886c:	d00c      	beq.n	8008888 <UART_SetConfig+0x1b0>
 800886e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008872:	d815      	bhi.n	80088a0 <UART_SetConfig+0x1c8>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <UART_SetConfig+0x1a8>
 8008878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800887c:	d008      	beq.n	8008890 <UART_SetConfig+0x1b8>
 800887e:	e00f      	b.n	80088a0 <UART_SetConfig+0x1c8>
 8008880:	2300      	movs	r3, #0
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008886:	e012      	b.n	80088ae <UART_SetConfig+0x1d6>
 8008888:	2302      	movs	r3, #2
 800888a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800888e:	e00e      	b.n	80088ae <UART_SetConfig+0x1d6>
 8008890:	2304      	movs	r3, #4
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008896:	e00a      	b.n	80088ae <UART_SetConfig+0x1d6>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800889e:	e006      	b.n	80088ae <UART_SetConfig+0x1d6>
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088a6:	e002      	b.n	80088ae <UART_SetConfig+0x1d6>
 80088a8:	2310      	movs	r3, #16
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a2a      	ldr	r2, [pc, #168]	@ (800895c <UART_SetConfig+0x284>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	f040 80a4 	bne.w	8008a02 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d823      	bhi.n	800890a <UART_SetConfig+0x232>
 80088c2:	a201      	add	r2, pc, #4	@ (adr r2, 80088c8 <UART_SetConfig+0x1f0>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	0800890b 	.word	0x0800890b
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	0800890b 	.word	0x0800890b
 80088d8:	080088fb 	.word	0x080088fb
 80088dc:	0800890b 	.word	0x0800890b
 80088e0:	0800890b 	.word	0x0800890b
 80088e4:	0800890b 	.word	0x0800890b
 80088e8:	08008903 	.word	0x08008903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ec:	f7fd ff3a 	bl	8006764 <HAL_RCC_GetPCLK1Freq>
 80088f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088f2:	e010      	b.n	8008916 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008968 <UART_SetConfig+0x290>)
 80088f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088f8:	e00d      	b.n	8008916 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088fa:	f7fd fe7f 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 80088fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008900:	e009      	b.n	8008916 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008908:	e005      	b.n	8008916 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008914:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 8137 	beq.w	8008b8c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008922:	4a12      	ldr	r2, [pc, #72]	@ (800896c <UART_SetConfig+0x294>)
 8008924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008928:	461a      	mov	r2, r3
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008930:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	4613      	mov	r3, r2
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	4413      	add	r3, r2
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	429a      	cmp	r2, r3
 8008940:	d305      	bcc.n	800894e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	429a      	cmp	r2, r3
 800894c:	d910      	bls.n	8008970 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008954:	e11a      	b.n	8008b8c <UART_SetConfig+0x4b4>
 8008956:	bf00      	nop
 8008958:	cfff69f3 	.word	0xcfff69f3
 800895c:	40008000 	.word	0x40008000
 8008960:	40013800 	.word	0x40013800
 8008964:	40004400 	.word	0x40004400
 8008968:	00f42400 	.word	0x00f42400
 800896c:	0801c17c 	.word	0x0801c17c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	2200      	movs	r2, #0
 8008974:	60bb      	str	r3, [r7, #8]
 8008976:	60fa      	str	r2, [r7, #12]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897c:	4a8e      	ldr	r2, [pc, #568]	@ (8008bb8 <UART_SetConfig+0x4e0>)
 800897e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008982:	b29b      	uxth	r3, r3
 8008984:	2200      	movs	r2, #0
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800898e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008992:	f7f8 f909 	bl	8000ba8 <__aeabi_uldivmod>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4610      	mov	r0, r2
 800899c:	4619      	mov	r1, r3
 800899e:	f04f 0200 	mov.w	r2, #0
 80089a2:	f04f 0300 	mov.w	r3, #0
 80089a6:	020b      	lsls	r3, r1, #8
 80089a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089ac:	0202      	lsls	r2, r0, #8
 80089ae:	6979      	ldr	r1, [r7, #20]
 80089b0:	6849      	ldr	r1, [r1, #4]
 80089b2:	0849      	lsrs	r1, r1, #1
 80089b4:	2000      	movs	r0, #0
 80089b6:	460c      	mov	r4, r1
 80089b8:	4605      	mov	r5, r0
 80089ba:	eb12 0804 	adds.w	r8, r2, r4
 80089be:	eb43 0905 	adc.w	r9, r3, r5
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	469a      	mov	sl, r3
 80089ca:	4693      	mov	fp, r2
 80089cc:	4652      	mov	r2, sl
 80089ce:	465b      	mov	r3, fp
 80089d0:	4640      	mov	r0, r8
 80089d2:	4649      	mov	r1, r9
 80089d4:	f7f8 f8e8 	bl	8000ba8 <__aeabi_uldivmod>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4613      	mov	r3, r2
 80089de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089e6:	d308      	bcc.n	80089fa <UART_SetConfig+0x322>
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089ee:	d204      	bcs.n	80089fa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6a3a      	ldr	r2, [r7, #32]
 80089f6:	60da      	str	r2, [r3, #12]
 80089f8:	e0c8      	b.n	8008b8c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a00:	e0c4      	b.n	8008b8c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a0a:	d167      	bne.n	8008adc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d828      	bhi.n	8008a66 <UART_SetConfig+0x38e>
 8008a14:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <UART_SetConfig+0x344>)
 8008a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1a:	bf00      	nop
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a49 	.word	0x08008a49
 8008a24:	08008a51 	.word	0x08008a51
 8008a28:	08008a67 	.word	0x08008a67
 8008a2c:	08008a57 	.word	0x08008a57
 8008a30:	08008a67 	.word	0x08008a67
 8008a34:	08008a67 	.word	0x08008a67
 8008a38:	08008a67 	.word	0x08008a67
 8008a3c:	08008a5f 	.word	0x08008a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a40:	f7fd fe90 	bl	8006764 <HAL_RCC_GetPCLK1Freq>
 8008a44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a46:	e014      	b.n	8008a72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a48:	f7fd fe9e 	bl	8006788 <HAL_RCC_GetPCLK2Freq>
 8008a4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a4e:	e010      	b.n	8008a72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a50:	4b5a      	ldr	r3, [pc, #360]	@ (8008bbc <UART_SetConfig+0x4e4>)
 8008a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a54:	e00d      	b.n	8008a72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a56:	f7fd fdd1 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 8008a5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a5c:	e009      	b.n	8008a72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a64:	e005      	b.n	8008a72 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 8089 	beq.w	8008b8c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8008bb8 <UART_SetConfig+0x4e0>)
 8008a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a84:	461a      	mov	r2, r3
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a8c:	005a      	lsls	r2, r3, #1
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	441a      	add	r2, r3
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	2b0f      	cmp	r3, #15
 8008aa4:	d916      	bls.n	8008ad4 <UART_SetConfig+0x3fc>
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aac:	d212      	bcs.n	8008ad4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f023 030f 	bic.w	r3, r3, #15
 8008ab6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	f003 0307 	and.w	r3, r3, #7
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	8bfb      	ldrh	r3, [r7, #30]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	8bfa      	ldrh	r2, [r7, #30]
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e05b      	b.n	8008b8c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ada:	e057      	b.n	8008b8c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008adc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d828      	bhi.n	8008b36 <UART_SetConfig+0x45e>
 8008ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8008aec <UART_SetConfig+0x414>)
 8008ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aea:	bf00      	nop
 8008aec:	08008b11 	.word	0x08008b11
 8008af0:	08008b19 	.word	0x08008b19
 8008af4:	08008b21 	.word	0x08008b21
 8008af8:	08008b37 	.word	0x08008b37
 8008afc:	08008b27 	.word	0x08008b27
 8008b00:	08008b37 	.word	0x08008b37
 8008b04:	08008b37 	.word	0x08008b37
 8008b08:	08008b37 	.word	0x08008b37
 8008b0c:	08008b2f 	.word	0x08008b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b10:	f7fd fe28 	bl	8006764 <HAL_RCC_GetPCLK1Freq>
 8008b14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b16:	e014      	b.n	8008b42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b18:	f7fd fe36 	bl	8006788 <HAL_RCC_GetPCLK2Freq>
 8008b1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b1e:	e010      	b.n	8008b42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b20:	4b26      	ldr	r3, [pc, #152]	@ (8008bbc <UART_SetConfig+0x4e4>)
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b24:	e00d      	b.n	8008b42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b26:	f7fd fd69 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 8008b2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b2c:	e009      	b.n	8008b42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b34:	e005      	b.n	8008b42 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b40:	bf00      	nop
    }

    if (pclk != 0U)
 8008b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d021      	beq.n	8008b8c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8008bb8 <UART_SetConfig+0x4e0>)
 8008b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b52:	461a      	mov	r2, r3
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	085b      	lsrs	r3, r3, #1
 8008b60:	441a      	add	r2, r3
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	2b0f      	cmp	r3, #15
 8008b70:	d909      	bls.n	8008b86 <UART_SetConfig+0x4ae>
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b78:	d205      	bcs.n	8008b86 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60da      	str	r2, [r3, #12]
 8008b84:	e002      	b.n	8008b8c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ba8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3730      	adds	r7, #48	@ 0x30
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bb6:	bf00      	nop
 8008bb8:	0801c17c 	.word	0x0801c17c
 8008bbc:	00f42400 	.word	0x00f42400

08008bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00a      	beq.n	8008c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c32:	f003 0304 	and.w	r3, r3, #4
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c54:	f003 0310 	and.w	r3, r3, #16
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00a      	beq.n	8008c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01a      	beq.n	8008cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cbe:	d10a      	bne.n	8008cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	605a      	str	r2, [r3, #4]
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr

08008d02 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af02      	add	r7, sp, #8
 8008d08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d12:	f7f9 fa81 	bl	8002218 <HAL_GetTick>
 8008d16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0308 	and.w	r3, r3, #8
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d10e      	bne.n	8008d44 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f832 	bl	8008d9e <UART_WaitOnFlagUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e028      	b.n	8008d96 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d10e      	bne.n	8008d70 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f81c 	bl	8008d9e <UART_WaitOnFlagUntilTimeout>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e012      	b.n	8008d96 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b09c      	sub	sp, #112	@ 0x70
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	603b      	str	r3, [r7, #0]
 8008daa:	4613      	mov	r3, r2
 8008dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dae:	e0af      	b.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db6:	f000 80ab 	beq.w	8008f10 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dba:	f7f9 fa2d 	bl	8002218 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d302      	bcc.n	8008dd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8008dca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d140      	bne.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008df0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008df4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e6      	bne.n	8008dd0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e14:	f023 0301 	bic.w	r3, r3, #1
 8008e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e22:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008e24:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e2a:	e841 2300 	strex	r3, r2, [r1]
 8008e2e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1e5      	bne.n	8008e02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e06f      	b.n	8008f32 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d057      	beq.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x172>
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b80      	cmp	r3, #128	@ 0x80
 8008e64:	d054      	beq.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x172>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2b40      	cmp	r3, #64	@ 0x40
 8008e6a:	d051      	beq.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e7a:	d149      	bne.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e96:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008e9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008eaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eac:	e841 2300 	strex	r3, r2, [r1]
 8008eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e6      	bne.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	e853 3f00 	ldrex	r3, [r3]
 8008ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f023 0301 	bic.w	r3, r3, #1
 8008ece:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008ed8:	623a      	str	r2, [r7, #32]
 8008eda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	69f9      	ldr	r1, [r7, #28]
 8008ede:	6a3a      	ldr	r2, [r7, #32]
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e5      	bne.n	8008eb8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e010      	b.n	8008f32 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69da      	ldr	r2, [r3, #28]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	4013      	ands	r3, r2
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	bf0c      	ite	eq
 8008f20:	2301      	moveq	r3, #1
 8008f22:	2300      	movne	r3, #0
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	461a      	mov	r2, r3
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	f43f af40 	beq.w	8008db0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3770      	adds	r7, #112	@ 0x70
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b0a3      	sub	sp, #140	@ 0x8c
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	88fa      	ldrh	r2, [r7, #6]
 8008f54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	88fa      	ldrh	r2, [r7, #6]
 8008f5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f6e:	d10e      	bne.n	8008f8e <UART_Start_Receive_IT+0x52>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d105      	bne.n	8008f84 <UART_Start_Receive_IT+0x48>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f82:	e02d      	b.n	8008fe0 <UART_Start_Receive_IT+0xa4>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	22ff      	movs	r2, #255	@ 0xff
 8008f88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f8c:	e028      	b.n	8008fe0 <UART_Start_Receive_IT+0xa4>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10d      	bne.n	8008fb2 <UART_Start_Receive_IT+0x76>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d104      	bne.n	8008fa8 <UART_Start_Receive_IT+0x6c>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	22ff      	movs	r2, #255	@ 0xff
 8008fa2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fa6:	e01b      	b.n	8008fe0 <UART_Start_Receive_IT+0xa4>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	227f      	movs	r2, #127	@ 0x7f
 8008fac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fb0:	e016      	b.n	8008fe0 <UART_Start_Receive_IT+0xa4>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fba:	d10d      	bne.n	8008fd8 <UART_Start_Receive_IT+0x9c>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d104      	bne.n	8008fce <UART_Start_Receive_IT+0x92>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	227f      	movs	r2, #127	@ 0x7f
 8008fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fcc:	e008      	b.n	8008fe0 <UART_Start_Receive_IT+0xa4>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	223f      	movs	r2, #63	@ 0x3f
 8008fd2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fd6:	e003      	b.n	8008fe0 <UART_Start_Receive_IT+0xa4>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2222      	movs	r2, #34	@ 0x22
 8008fec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3308      	adds	r3, #8
 8008ff6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ffa:	e853 3f00 	ldrex	r3, [r3]
 8008ffe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009002:	f043 0301 	orr.w	r3, r3, #1
 8009006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3308      	adds	r3, #8
 8009010:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009014:	673a      	str	r2, [r7, #112]	@ 0x70
 8009016:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800901a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009022:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e3      	bne.n	8008ff0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800902c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009030:	d14f      	bne.n	80090d2 <UART_Start_Receive_IT+0x196>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009038:	88fa      	ldrh	r2, [r7, #6]
 800903a:	429a      	cmp	r2, r3
 800903c:	d349      	bcc.n	80090d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009046:	d107      	bne.n	8009058 <UART_Start_Receive_IT+0x11c>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d103      	bne.n	8009058 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4a46      	ldr	r2, [pc, #280]	@ (800916c <UART_Start_Receive_IT+0x230>)
 8009054:	675a      	str	r2, [r3, #116]	@ 0x74
 8009056:	e002      	b.n	800905e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4a45      	ldr	r2, [pc, #276]	@ (8009170 <UART_Start_Receive_IT+0x234>)
 800905c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01a      	beq.n	800909c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800907a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009088:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800908a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800908e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e4      	bne.n	8009066 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3308      	adds	r3, #8
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3308      	adds	r3, #8
 80090ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80090be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80090ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e5      	bne.n	800909c <UART_Start_Receive_IT+0x160>
 80090d0:	e046      	b.n	8009160 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090da:	d107      	bne.n	80090ec <UART_Start_Receive_IT+0x1b0>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d103      	bne.n	80090ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4a23      	ldr	r2, [pc, #140]	@ (8009174 <UART_Start_Receive_IT+0x238>)
 80090e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80090ea:	e002      	b.n	80090f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4a22      	ldr	r2, [pc, #136]	@ (8009178 <UART_Start_Receive_IT+0x23c>)
 80090f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d019      	beq.n	800912e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800910e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009118:	637b      	str	r3, [r7, #52]	@ 0x34
 800911a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800911e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e6      	bne.n	80090fa <UART_Start_Receive_IT+0x1be>
 800912c:	e018      	b.n	8009160 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	613b      	str	r3, [r7, #16]
   return(result);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f043 0320 	orr.w	r3, r3, #32
 8009142:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800914c:	623b      	str	r3, [r7, #32]
 800914e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	69f9      	ldr	r1, [r7, #28]
 8009152:	6a3a      	ldr	r2, [r7, #32]
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	61bb      	str	r3, [r7, #24]
   return(result);
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e6      	bne.n	800912e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	378c      	adds	r7, #140	@ 0x8c
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr
 800916c:	08009b51 	.word	0x08009b51
 8009170:	080097f1 	.word	0x080097f1
 8009174:	08009639 	.word	0x08009639
 8009178:	08009481 	.word	0x08009481

0800917c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800917c:	b480      	push	{r7}
 800917e:	b08f      	sub	sp, #60	@ 0x3c
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	61fb      	str	r3, [r7, #28]
   return(result);
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009198:	637b      	str	r3, [r7, #52]	@ 0x34
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091a4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e6      	bne.n	8009184 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80091cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d6:	61ba      	str	r2, [r7, #24]
 80091d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	6979      	ldr	r1, [r7, #20]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	613b      	str	r3, [r7, #16]
   return(result);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e5      	bne.n	80091b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80091f2:	bf00      	nop
 80091f4:	373c      	adds	r7, #60	@ 0x3c
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bc80      	pop	{r7}
 80091fa:	4770      	bx	lr

080091fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b095      	sub	sp, #84	@ 0x54
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009222:	643b      	str	r3, [r7, #64]	@ 0x40
 8009224:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e6      	bne.n	8009204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	61fb      	str	r3, [r7, #28]
   return(result);
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3308      	adds	r3, #8
 8009258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800925a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800925c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e3      	bne.n	8009236 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009272:	2b01      	cmp	r3, #1
 8009274:	d118      	bne.n	80092a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	60bb      	str	r3, [r7, #8]
   return(result);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f023 0310 	bic.w	r3, r3, #16
 800928a:	647b      	str	r3, [r7, #68]	@ 0x44
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	6979      	ldr	r1, [r7, #20]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	613b      	str	r3, [r7, #16]
   return(result);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e6      	bne.n	8009276 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2220      	movs	r2, #32
 80092ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80092bc:	bf00      	nop
 80092be:	3754      	adds	r7, #84	@ 0x54
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bc80      	pop	{r7}
 80092c4:	4770      	bx	lr

080092c6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b090      	sub	sp, #64	@ 0x40
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0320 	and.w	r3, r3, #32
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d137      	bne.n	8009352 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80092e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3308      	adds	r3, #8
 80092f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f4:	e853 3f00 	ldrex	r3, [r3]
 80092f8:	623b      	str	r3, [r7, #32]
   return(result);
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800930a:	633a      	str	r2, [r7, #48]	@ 0x30
 800930c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e5      	bne.n	80092ea <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800931e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	e853 3f00 	ldrex	r3, [r3]
 800932a:	60fb      	str	r3, [r7, #12]
   return(result);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009332:	637b      	str	r3, [r7, #52]	@ 0x34
 8009334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	461a      	mov	r2, r3
 800933a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933c:	61fb      	str	r3, [r7, #28]
 800933e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	69b9      	ldr	r1, [r7, #24]
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	617b      	str	r3, [r7, #20]
   return(result);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e6      	bne.n	800931e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009350:	e002      	b.n	8009358 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009352:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009354:	f7f9 fcc4 	bl	8002ce0 <HAL_UART_TxCpltCallback>
}
 8009358:	bf00      	nop
 800935a:	3740      	adds	r7, #64	@ 0x40
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7ff f994 	bl	800869c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009374:	bf00      	nop
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009388:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009390:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009398:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a4:	2b80      	cmp	r3, #128	@ 0x80
 80093a6:	d109      	bne.n	80093bc <UART_DMAError+0x40>
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	2b21      	cmp	r3, #33	@ 0x21
 80093ac:	d106      	bne.n	80093bc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80093b6:	6978      	ldr	r0, [r7, #20]
 80093b8:	f7ff fee0 	bl	800917c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c6:	2b40      	cmp	r3, #64	@ 0x40
 80093c8:	d109      	bne.n	80093de <UART_DMAError+0x62>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b22      	cmp	r3, #34	@ 0x22
 80093ce:	d106      	bne.n	80093de <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80093d8:	6978      	ldr	r0, [r7, #20]
 80093da:	f7ff ff0f 	bl	80091fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093e4:	f043 0210 	orr.w	r2, r3, #16
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093ee:	6978      	ldr	r0, [r7, #20]
 80093f0:	f7ff f95d 	bl	80086ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093f4:	bf00      	nop
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff f947 	bl	80086ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	60bb      	str	r3, [r7, #8]
   return(result);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	61bb      	str	r3, [r7, #24]
 8009450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	613b      	str	r3, [r7, #16]
   return(result);
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e6      	bne.n	8009430 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7f9 fc35 	bl	8002ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009476:	bf00      	nop
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b09c      	sub	sp, #112	@ 0x70
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800948e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009498:	2b22      	cmp	r3, #34	@ 0x22
 800949a:	f040 80be 	bne.w	800961a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80094ac:	b2d9      	uxtb	r1, r3
 80094ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b8:	400a      	ands	r2, r1
 80094ba:	b2d2      	uxtb	r2, r2
 80094bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f040 80a1 	bne.w	800962a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009506:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009508:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800950c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e6      	bne.n	80094e8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800952a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800952c:	f023 0301 	bic.w	r3, r3, #1
 8009530:	667b      	str	r3, [r7, #100]	@ 0x64
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800953a:	647a      	str	r2, [r7, #68]	@ 0x44
 800953c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009540:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e5      	bne.n	800951a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2220      	movs	r2, #32
 8009552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a33      	ldr	r2, [pc, #204]	@ (8009634 <UART_RxISR_8BIT+0x1b4>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d01f      	beq.n	80095ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d018      	beq.n	80095ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	e853 3f00 	ldrex	r3, [r3]
 8009586:	623b      	str	r3, [r7, #32]
   return(result);
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800958e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	461a      	mov	r2, r3
 8009596:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009598:	633b      	str	r3, [r7, #48]	@ 0x30
 800959a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800959e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e6      	bne.n	800957a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d12e      	bne.n	8009612 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 0310 	bic.w	r3, r3, #16
 80095ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095d8:	61fb      	str	r3, [r7, #28]
 80095da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	69b9      	ldr	r1, [r7, #24]
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	617b      	str	r3, [r7, #20]
   return(result);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e6      	bne.n	80095ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	f003 0310 	and.w	r3, r3, #16
 80095f6:	2b10      	cmp	r3, #16
 80095f8:	d103      	bne.n	8009602 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2210      	movs	r2, #16
 8009600:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff f858 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009610:	e00b      	b.n	800962a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7f9 fb7a 	bl	8002d0c <HAL_UART_RxCpltCallback>
}
 8009618:	e007      	b.n	800962a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f042 0208 	orr.w	r2, r2, #8
 8009628:	619a      	str	r2, [r3, #24]
}
 800962a:	bf00      	nop
 800962c:	3770      	adds	r7, #112	@ 0x70
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	40008000 	.word	0x40008000

08009638 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b09c      	sub	sp, #112	@ 0x70
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009646:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009650:	2b22      	cmp	r3, #34	@ 0x22
 8009652:	f040 80be 	bne.w	80097d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009664:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009666:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800966a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800966e:	4013      	ands	r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009674:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800967a:	1c9a      	adds	r2, r3, #2
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009686:	b29b      	uxth	r3, r3
 8009688:	3b01      	subs	r3, #1
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009698:	b29b      	uxth	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	f040 80a1 	bne.w	80097e2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096be:	657b      	str	r3, [r7, #84]	@ 0x54
 80096c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e6      	bne.n	80096a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3308      	adds	r3, #8
 80096d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	f023 0301 	bic.w	r3, r3, #1
 80096e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3308      	adds	r3, #8
 80096f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80096f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e5      	bne.n	80096d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2220      	movs	r2, #32
 800970a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a33      	ldr	r2, [pc, #204]	@ (80097ec <UART_RxISR_16BIT+0x1b4>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d01f      	beq.n	8009764 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d018      	beq.n	8009764 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	e853 3f00 	ldrex	r3, [r3]
 800973e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009746:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009752:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800975e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e6      	bne.n	8009732 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009768:	2b01      	cmp	r3, #1
 800976a:	d12e      	bne.n	80097ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f023 0310 	bic.w	r3, r3, #16
 8009786:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	461a      	mov	r2, r3
 800978e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009790:	61bb      	str	r3, [r7, #24]
 8009792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6979      	ldr	r1, [r7, #20]
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	613b      	str	r3, [r7, #16]
   return(result);
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e6      	bne.n	8009772 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	f003 0310 	and.w	r3, r3, #16
 80097ae:	2b10      	cmp	r3, #16
 80097b0:	d103      	bne.n	80097ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2210      	movs	r2, #16
 80097b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7fe ff7c 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097c8:	e00b      	b.n	80097e2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7f9 fa9e 	bl	8002d0c <HAL_UART_RxCpltCallback>
}
 80097d0:	e007      	b.n	80097e2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f042 0208 	orr.w	r2, r2, #8
 80097e0:	619a      	str	r2, [r3, #24]
}
 80097e2:	bf00      	nop
 80097e4:	3770      	adds	r7, #112	@ 0x70
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	40008000 	.word	0x40008000

080097f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b0ac      	sub	sp, #176	@ 0xb0
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009826:	2b22      	cmp	r3, #34	@ 0x22
 8009828:	f040 8182 	bne.w	8009b30 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009832:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009836:	e125      	b.n	8009a84 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009842:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009846:	b2d9      	uxtb	r1, r3
 8009848:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800984c:	b2da      	uxtb	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009852:	400a      	ands	r2, r1
 8009854:	b2d2      	uxtb	r2, r2
 8009856:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009868:	b29b      	uxth	r3, r3
 800986a:	3b01      	subs	r3, #1
 800986c:	b29a      	uxth	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800987e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	2b00      	cmp	r3, #0
 8009888:	d053      	beq.n	8009932 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800988a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d011      	beq.n	80098ba <UART_RxISR_8BIT_FIFOEN+0xca>
 8009896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800989a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00b      	beq.n	80098ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2201      	movs	r2, #1
 80098a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098b0:	f043 0201 	orr.w	r2, r3, #1
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d011      	beq.n	80098ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00b      	beq.n	80098ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2202      	movs	r2, #2
 80098d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098e0:	f043 0204 	orr.w	r2, r3, #4
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d011      	beq.n	800991a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2204      	movs	r2, #4
 8009908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009910:	f043 0202 	orr.w	r2, r3, #2
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009920:	2b00      	cmp	r3, #0
 8009922:	d006      	beq.n	8009932 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fe fec2 	bl	80086ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009938:	b29b      	uxth	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	f040 80a2 	bne.w	8009a84 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800994e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	461a      	mov	r2, r3
 800995e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009962:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009964:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009968:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e4      	bne.n	8009940 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009980:	e853 3f00 	ldrex	r3, [r3]
 8009984:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800998c:	f023 0301 	bic.w	r3, r3, #1
 8009990:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3308      	adds	r3, #8
 800999a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800999e:	66ba      	str	r2, [r7, #104]	@ 0x68
 80099a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80099a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80099ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e1      	bne.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2220      	movs	r2, #32
 80099b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a5f      	ldr	r2, [pc, #380]	@ (8009b48 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d021      	beq.n	8009a14 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d01a      	beq.n	8009a14 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80099ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a00:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a02:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e4      	bne.n	80099de <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d130      	bne.n	8009a7e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a32:	f023 0310 	bic.w	r3, r3, #16
 8009a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a4c:	e841 2300 	strex	r3, r2, [r1]
 8009a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e4      	bne.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f003 0310 	and.w	r3, r3, #16
 8009a62:	2b10      	cmp	r3, #16
 8009a64:	d103      	bne.n	8009a6e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2210      	movs	r2, #16
 8009a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7fe fe22 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
 8009a7c:	e002      	b.n	8009a84 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7f9 f944 	bl	8002d0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a84:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d006      	beq.n	8009a9a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f47f aecf 	bne.w	8009838 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aa0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009aa4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d049      	beq.n	8009b40 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ab2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d242      	bcs.n	8009b40 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ae6:	e841 2300 	strex	r3, r2, [r1]
 8009aea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e3      	bne.n	8009aba <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a15      	ldr	r2, [pc, #84]	@ (8009b4c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009af6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f043 0320 	orr.w	r3, r3, #32
 8009b0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b1a:	61bb      	str	r3, [r7, #24]
 8009b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	6979      	ldr	r1, [r7, #20]
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	613b      	str	r3, [r7, #16]
   return(result);
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e4      	bne.n	8009af8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b2e:	e007      	b.n	8009b40 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	699a      	ldr	r2, [r3, #24]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0208 	orr.w	r2, r2, #8
 8009b3e:	619a      	str	r2, [r3, #24]
}
 8009b40:	bf00      	nop
 8009b42:	37b0      	adds	r7, #176	@ 0xb0
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40008000 	.word	0x40008000
 8009b4c:	08009481 	.word	0x08009481

08009b50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b0ae      	sub	sp, #184	@ 0xb8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b5e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b86:	2b22      	cmp	r3, #34	@ 0x22
 8009b88:	f040 8186 	bne.w	8009e98 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b92:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b96:	e129      	b.n	8009dec <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b9e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009baa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009bae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc0:	1c9a      	adds	r2, r3, #2
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009be2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009be6:	f003 0307 	and.w	r3, r3, #7
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d053      	beq.n	8009c96 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d011      	beq.n	8009c1e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00b      	beq.n	8009c1e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c14:	f043 0201 	orr.w	r2, r3, #1
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d011      	beq.n	8009c4e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c44:	f043 0204 	orr.w	r2, r3, #4
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c52:	f003 0304 	and.w	r3, r3, #4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d011      	beq.n	8009c7e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00b      	beq.n	8009c7e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2204      	movs	r2, #4
 8009c6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c74:	f043 0202 	orr.w	r2, r3, #2
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d006      	beq.n	8009c96 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7fe fd10 	bl	80086ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f040 80a4 	bne.w	8009dec <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009cca:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ccc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009cd2:	e841 2300 	strex	r3, r2, [r1]
 8009cd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e2      	bne.n	8009ca4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cf4:	f023 0301 	bic.w	r3, r3, #1
 8009cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3308      	adds	r3, #8
 8009d02:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009d06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d0e:	e841 2300 	strex	r3, r2, [r1]
 8009d12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1e1      	bne.n	8009cde <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a5f      	ldr	r2, [pc, #380]	@ (8009eb0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d021      	beq.n	8009d7c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d01a      	beq.n	8009d7c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	461a      	mov	r2, r3
 8009d64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009d68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d6a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d70:	e841 2300 	strex	r3, r2, [r1]
 8009d74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1e4      	bne.n	8009d46 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d130      	bne.n	8009de6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d92:	e853 3f00 	ldrex	r3, [r3]
 8009d96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9a:	f023 0310 	bic.w	r3, r3, #16
 8009d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009db4:	e841 2300 	strex	r3, r2, [r1]
 8009db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e4      	bne.n	8009d8a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	f003 0310 	and.w	r3, r3, #16
 8009dca:	2b10      	cmp	r3, #16
 8009dcc:	d103      	bne.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2210      	movs	r2, #16
 8009dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7fe fc6e 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
 8009de4:	e002      	b.n	8009dec <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7f8 ff90 	bl	8002d0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d006      	beq.n	8009e02 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009df4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009df8:	f003 0320 	and.w	r3, r3, #32
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f47f aecb 	bne.w	8009b98 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e08:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e0c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d049      	beq.n	8009ea8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e1a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d242      	bcs.n	8009ea8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3308      	adds	r3, #8
 8009e28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2c:	e853 3f00 	ldrex	r3, [r3]
 8009e30:	623b      	str	r3, [r7, #32]
   return(result);
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3308      	adds	r3, #8
 8009e42:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009e46:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e3      	bne.n	8009e22 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a15      	ldr	r2, [pc, #84]	@ (8009eb4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009e5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f043 0320 	orr.w	r3, r3, #32
 8009e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e82:	61fb      	str	r3, [r7, #28]
 8009e84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e86:	69b9      	ldr	r1, [r7, #24]
 8009e88:	69fa      	ldr	r2, [r7, #28]
 8009e8a:	e841 2300 	strex	r3, r2, [r1]
 8009e8e:	617b      	str	r3, [r7, #20]
   return(result);
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e4      	bne.n	8009e60 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e96:	e007      	b.n	8009ea8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	699a      	ldr	r2, [r3, #24]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f042 0208 	orr.w	r2, r2, #8
 8009ea6:	619a      	str	r2, [r3, #24]
}
 8009ea8:	bf00      	nop
 8009eaa:	37b8      	adds	r7, #184	@ 0xb8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	40008000 	.word	0x40008000
 8009eb4:	08009639 	.word	0x08009639

08009eb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bc80      	pop	{r7}
 8009ec8:	4770      	bx	lr

08009eca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr

08009edc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bc80      	pop	{r7}
 8009eec:	4770      	bx	lr

08009eee <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b088      	sub	sp, #32
 8009ef2:	af02      	add	r7, sp, #8
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	1d3b      	adds	r3, r7, #4
 8009ef8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d101      	bne.n	8009f0e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	e046      	b.n	8009f9c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2224      	movs	r2, #36	@ 0x24
 8009f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0201 	bic.w	r2, r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d105      	bne.n	8009f54 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009f48:	1d3b      	adds	r3, r7, #4
 8009f4a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f000 f90e 	bl	800a170 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0201 	orr.w	r2, r2, #1
 8009f62:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f64:	f7f8 f958 	bl	8002218 <HAL_GetTick>
 8009f68:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7fe ff10 	bl	8008d9e <UART_WaitOnFlagUntilTimeout>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	75fb      	strb	r3, [r7, #23]
 8009f88:	e003      	b.n	8009f92 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b089      	sub	sp, #36	@ 0x24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d101      	bne.n	8009fba <HAL_UARTEx_EnableStopMode+0x16>
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	e021      	b.n	8009ffe <HAL_UARTEx_EnableStopMode+0x5a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f043 0302 	orr.w	r3, r3, #2
 8009fd6:	61fb      	str	r3, [r7, #28]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	61bb      	str	r3, [r7, #24]
 8009fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	6979      	ldr	r1, [r7, #20]
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	613b      	str	r3, [r7, #16]
   return(result);
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e6      	bne.n	8009fc2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3724      	adds	r7, #36	@ 0x24
 800a002:	46bd      	mov	sp, r7
 800a004:	bc80      	pop	{r7}
 800a006:	4770      	bx	lr

0800a008 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a016:	2b01      	cmp	r3, #1
 800a018:	d101      	bne.n	800a01e <HAL_UARTEx_DisableFifoMode+0x16>
 800a01a:	2302      	movs	r3, #2
 800a01c:	e027      	b.n	800a06e <HAL_UARTEx_DisableFifoMode+0x66>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2224      	movs	r2, #36	@ 0x24
 800a02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f022 0201 	bic.w	r2, r2, #1
 800a044:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a04c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	bc80      	pop	{r7}
 800a076:	4770      	bx	lr

0800a078 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d101      	bne.n	800a090 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a08c:	2302      	movs	r3, #2
 800a08e:	e02d      	b.n	800a0ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2224      	movs	r2, #36	@ 0x24
 800a09c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f022 0201 	bic.w	r2, r2, #1
 800a0b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f871 	bl	800a1b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a104:	2b01      	cmp	r3, #1
 800a106:	d101      	bne.n	800a10c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a108:	2302      	movs	r3, #2
 800a10a:	e02d      	b.n	800a168 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2224      	movs	r2, #36	@ 0x24
 800a118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0201 	bic.w	r2, r2, #1
 800a132:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	430a      	orrs	r2, r1
 800a146:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f833 	bl	800a1b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2220      	movs	r2, #32
 800a15a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	1d3b      	adds	r3, r7, #4
 800a17a:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f023 0210 	bic.w	r2, r3, #16
 800a188:	893b      	ldrh	r3, [r7, #8]
 800a18a:	4619      	mov	r1, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	430a      	orrs	r2, r1
 800a192:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a19e:	7abb      	ldrb	r3, [r7, #10]
 800a1a0:	061a      	lsls	r2, r3, #24
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	605a      	str	r2, [r3, #4]
}
 800a1aa:	bf00      	nop
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bc80      	pop	{r7}
 800a1b2:	4770      	bx	lr

0800a1b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d108      	bne.n	800a1d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1d4:	e031      	b.n	800a23a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1d6:	2308      	movs	r3, #8
 800a1d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1da:	2308      	movs	r3, #8
 800a1dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	0e5b      	lsrs	r3, r3, #25
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	0f5b      	lsrs	r3, r3, #29
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	f003 0307 	and.w	r3, r3, #7
 800a1fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1fe:	7bbb      	ldrb	r3, [r7, #14]
 800a200:	7b3a      	ldrb	r2, [r7, #12]
 800a202:	4910      	ldr	r1, [pc, #64]	@ (800a244 <UARTEx_SetNbDataToProcess+0x90>)
 800a204:	5c8a      	ldrb	r2, [r1, r2]
 800a206:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a20a:	7b3a      	ldrb	r2, [r7, #12]
 800a20c:	490e      	ldr	r1, [pc, #56]	@ (800a248 <UARTEx_SetNbDataToProcess+0x94>)
 800a20e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a210:	fb93 f3f2 	sdiv	r3, r3, r2
 800a214:	b29a      	uxth	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	7b7a      	ldrb	r2, [r7, #13]
 800a220:	4908      	ldr	r1, [pc, #32]	@ (800a244 <UARTEx_SetNbDataToProcess+0x90>)
 800a222:	5c8a      	ldrb	r2, [r1, r2]
 800a224:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a228:	7b7a      	ldrb	r2, [r7, #13]
 800a22a:	4907      	ldr	r1, [pc, #28]	@ (800a248 <UARTEx_SetNbDataToProcess+0x94>)
 800a22c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a22e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a232:	b29a      	uxth	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a23a:	bf00      	nop
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr
 800a244:	0801c194 	.word	0x0801c194
 800a248:	0801c19c 	.word	0x0801c19c

0800a24c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a250:	f7f7 fe82 	bl	8001f58 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a254:	f000 f820 	bl	800a298 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a258:	bf00      	nop
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	f010 fea6 	bl	801afb4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a268:	bf00      	nop
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a26c:	b480      	push	{r7}
 800a26e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a270:	f3bf 8f4f 	dsb	sy
}
 800a274:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a276:	4b06      	ldr	r3, [pc, #24]	@ (800a290 <__NVIC_SystemReset+0x24>)
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a27e:	4904      	ldr	r1, [pc, #16]	@ (800a290 <__NVIC_SystemReset+0x24>)
 800a280:	4b04      	ldr	r3, [pc, #16]	@ (800a294 <__NVIC_SystemReset+0x28>)
 800a282:	4313      	orrs	r3, r2
 800a284:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a286:	f3bf 8f4f 	dsb	sy
}
 800a28a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a28c:	bf00      	nop
 800a28e:	e7fd      	b.n	800a28c <__NVIC_SystemReset+0x20>
 800a290:	e000ed00 	.word	0xe000ed00
 800a294:	05fa0004 	.word	0x05fa0004

0800a298 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a2a2:	1d3b      	adds	r3, r7, #4
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	f002 ff92 	bl	800d1d0 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a2ac:	1d3b      	adds	r3, r7, #4
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	f002 ff8d 	bl	800d1d0 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a378 <LoRaWAN_Init+0xe0>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a2c2:	482e      	ldr	r0, [pc, #184]	@ (800a37c <LoRaWAN_Init+0xe4>)
 800a2c4:	f011 f814 	bl	801b2f0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	4b2c      	ldr	r3, [pc, #176]	@ (800a380 <LoRaWAN_Init+0xe8>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a2d4:	482b      	ldr	r0, [pc, #172]	@ (800a384 <LoRaWAN_Init+0xec>)
 800a2d6:	f011 f80b 	bl	801b2f0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a2da:	2300      	movs	r3, #0
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	4b2a      	ldr	r3, [pc, #168]	@ (800a388 <LoRaWAN_Init+0xf0>)
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a2e6:	4829      	ldr	r0, [pc, #164]	@ (800a38c <LoRaWAN_Init+0xf4>)
 800a2e8:	f011 f802 	bl	801b2f0 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	4b27      	ldr	r3, [pc, #156]	@ (800a390 <LoRaWAN_Init+0xf8>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a2f8:	4826      	ldr	r0, [pc, #152]	@ (800a394 <LoRaWAN_Init+0xfc>)
 800a2fa:	f010 fff9 	bl	801b2f0 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a2fe:	4a26      	ldr	r2, [pc, #152]	@ (800a398 <LoRaWAN_Init+0x100>)
 800a300:	2100      	movs	r1, #0
 800a302:	2001      	movs	r0, #1
 800a304:	f010 ff52 	bl	801b1ac <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a308:	4a24      	ldr	r2, [pc, #144]	@ (800a39c <LoRaWAN_Init+0x104>)
 800a30a:	2100      	movs	r1, #0
 800a30c:	2002      	movs	r0, #2
 800a30e:	f010 ff4d 	bl	801b1ac <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a312:	4a23      	ldr	r2, [pc, #140]	@ (800a3a0 <LoRaWAN_Init+0x108>)
 800a314:	2100      	movs	r1, #0
 800a316:	2004      	movs	r0, #4
 800a318:	f010 ff48 	bl	801b1ac <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a31c:	4a21      	ldr	r2, [pc, #132]	@ (800a3a4 <LoRaWAN_Init+0x10c>)
 800a31e:	2100      	movs	r1, #0
 800a320:	2008      	movs	r0, #8
 800a322:	f010 ff43 	bl	801b1ac <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a326:	f000 fb61 	bl	800a9ec <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a32a:	491f      	ldr	r1, [pc, #124]	@ (800a3a8 <LoRaWAN_Init+0x110>)
 800a32c:	481f      	ldr	r0, [pc, #124]	@ (800a3ac <LoRaWAN_Init+0x114>)
 800a32e:	f001 ffbd 	bl	800c2ac <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a332:	481f      	ldr	r0, [pc, #124]	@ (800a3b0 <LoRaWAN_Init+0x118>)
 800a334:	f002 f828 	bl	800c388 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a338:	4814      	ldr	r0, [pc, #80]	@ (800a38c <LoRaWAN_Init+0xf4>)
 800a33a:	f011 f80f 	bl	801b35c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a33e:	4b1d      	ldr	r3, [pc, #116]	@ (800a3b4 <LoRaWAN_Init+0x11c>)
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	4a1d      	ldr	r2, [pc, #116]	@ (800a3b8 <LoRaWAN_Init+0x120>)
 800a344:	7812      	ldrb	r2, [r2, #0]
 800a346:	4611      	mov	r1, r2
 800a348:	4618      	mov	r0, r3
 800a34a:	f002 f979 	bl	800c640 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a34e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3bc <LoRaWAN_Init+0x124>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10b      	bne.n	800a36e <LoRaWAN_Init+0xd6>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a356:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c0 <LoRaWAN_Init+0x128>)
 800a358:	6819      	ldr	r1, [r3, #0]
 800a35a:	2300      	movs	r3, #0
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	4b19      	ldr	r3, [pc, #100]	@ (800a3c4 <LoRaWAN_Init+0x12c>)
 800a360:	2200      	movs	r2, #0
 800a362:	4819      	ldr	r0, [pc, #100]	@ (800a3c8 <LoRaWAN_Init+0x130>)
 800a364:	f010 ffc4 	bl	801b2f0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a368:	4817      	ldr	r0, [pc, #92]	@ (800a3c8 <LoRaWAN_Init+0x130>)
 800a36a:	f010 fff7 	bl	801b35c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a36e:	bf00      	nop
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	0800a751 	.word	0x0800a751
 800a37c:	20000570 	.word	0x20000570
 800a380:	0800a763 	.word	0x0800a763
 800a384:	20000588 	.word	0x20000588
 800a388:	0800a775 	.word	0x0800a775
 800a38c:	200005a0 	.word	0x200005a0
 800a390:	0800a949 	.word	0x0800a949
 800a394:	20000464 	.word	0x20000464
 800a398:	0800c5d5 	.word	0x0800c5d5
 800a39c:	0800a481 	.word	0x0800a481
 800a3a0:	0800a96d 	.word	0x0800a96d
 800a3a4:	0800a8fd 	.word	0x0800a8fd
 800a3a8:	01030100 	.word	0x01030100
 800a3ac:	2000000c 	.word	0x2000000c
 800a3b0:	20000058 	.word	0x20000058
 800a3b4:	20000008 	.word	0x20000008
 800a3b8:	20000009 	.word	0x20000009
 800a3bc:	20000448 	.word	0x20000448
 800a3c0:	20000070 	.word	0x20000070
 800a3c4:	0800a72d 	.word	0x0800a72d
 800a3c8:	2000044c 	.word	0x2000044c

0800a3cc <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d046      	beq.n	800a46e <OnRxData+0xa2>
  {
#if defined(DBG)   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800a3e0:	4825      	ldr	r0, [pc, #148]	@ (800a478 <OnRxData+0xac>)
 800a3e2:	f010 ffbb 	bl	801b35c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d03f      	beq.n	800a46e <OnRxData+0xa2>
    {
      if (appData != NULL)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d03c      	beq.n	800a46e <OnRxData+0xa2>
      {
        RxPort = appData->Port;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d035      	beq.n	800a46e <OnRxData+0xa2>
        {
          switch (appData->Port)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b02      	cmp	r3, #2
 800a408:	d01f      	beq.n	800a44a <OnRxData+0x7e>
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d12a      	bne.n	800a464 <OnRxData+0x98>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	785b      	ldrb	r3, [r3, #1]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d128      	bne.n	800a468 <OnRxData+0x9c>
              {
                switch (appData->Buffer[0])
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d00e      	beq.n	800a43e <OnRxData+0x72>
 800a420:	2b02      	cmp	r3, #2
 800a422:	dc10      	bgt.n	800a446 <OnRxData+0x7a>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <OnRxData+0x62>
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d004      	beq.n	800a436 <OnRxData+0x6a>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a42c:	e00b      	b.n	800a446 <OnRxData+0x7a>
                    LmHandlerRequestClass(CLASS_A);
 800a42e:	2000      	movs	r0, #0
 800a430:	f002 faba 	bl	800c9a8 <LmHandlerRequestClass>
                    break;
 800a434:	e008      	b.n	800a448 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_B);
 800a436:	2001      	movs	r0, #1
 800a438:	f002 fab6 	bl	800c9a8 <LmHandlerRequestClass>
                    break;
 800a43c:	e004      	b.n	800a448 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_C);
 800a43e:	2002      	movs	r0, #2
 800a440:	f002 fab2 	bl	800c9a8 <LmHandlerRequestClass>
                    break;
 800a444:	e000      	b.n	800a448 <OnRxData+0x7c>
                    break;
 800a446:	bf00      	nop
                }
              }
              break;
 800a448:	e00e      	b.n	800a468 <OnRxData+0x9c>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d10c      	bne.n	800a46c <OnRxData+0xa0>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	4b07      	ldr	r3, [pc, #28]	@ (800a47c <OnRxData+0xb0>)
 800a460:	701a      	strb	r2, [r3, #0]
					#if defined(DBG)   // XXX:
                  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
					#endif
                }
              }
              break;
 800a462:	e003      	b.n	800a46c <OnRxData+0xa0>

            default:

              break;
 800a464:	bf00      	nop
 800a466:	e002      	b.n	800a46e <OnRxData+0xa2>
              break;
 800a468:	bf00      	nop
 800a46a:	e000      	b.n	800a46e <OnRxData+0xa2>
              break;
 800a46c:	bf00      	nop
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000588 	.word	0x20000588
 800a47c:	2000056e 	.word	0x2000056e

0800a480 <SendTxData>:

static void SendTxData(void)
{
 800a480:	b590      	push	{r4, r7, lr}
 800a482:	b08f      	sub	sp, #60	@ 0x3c
 800a484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a486:	23ff      	movs	r3, #255	@ 0xff
 800a488:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a48c:	f7f7 fd94 	bl	8001fb8 <GetBatteryLevel>
 800a490:	4603      	mov	r3, r0
 800a492:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	637b      	str	r3, [r7, #52]	@ 0x34

  uint16_t pressure = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	83fb      	strh	r3, [r7, #30]

  EnvSensors_Read(&sensor_data);
 800a4b6:	1d3b      	adds	r3, r7, #4
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7f7 fed7 	bl	800226c <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "ADC0 - Temp : %d\r\n", (int16_t)(SYS_GetADC0()));
  APP_LOG(TS_ON, VLEVEL_M, "ADC1 - Out V: %d\r\n", (int16_t)(SYS_GetADC1()));
  APP_LOG(TS_ON, VLEVEL_M, "ADC2 - Out A: %d\r\n", (int16_t)(SYS_GetADC2()));
  APP_LOG(TS_ON, VLEVEL_M, "ADC3 - In V : %d\r\n", (int16_t)(SYS_GetADC3()));

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a4be:	4b92      	ldr	r3, [pc, #584]	@ (800a708 <SendTxData+0x288>)
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	701a      	strb	r2, [r3, #0]


  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4991      	ldr	r1, [pc, #580]	@ (800a70c <SendTxData+0x28c>)
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7f6 f9d7 	bl	800087c <__aeabi_fmul>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7f6 fb49 	bl	8000b68 <__aeabi_f2uiz>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	853b      	strh	r3, [r7, #40]	@ 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7f6 fb1d 	bl	8000b1c <__aeabi_f2iz>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4989      	ldr	r1, [pc, #548]	@ (800a710 <SendTxData+0x290>)
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7f6 f9c6 	bl	800087c <__aeabi_fmul>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	4986      	ldr	r1, [pc, #536]	@ (800a70c <SendTxData+0x28c>)
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7f6 fa75 	bl	80009e4 <__aeabi_fdiv>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7f6 fb33 	bl	8000b68 <__aeabi_f2uiz>
 800a502:	4603      	mov	r3, r0
 800a504:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800a506:	4b80      	ldr	r3, [pc, #512]	@ (800a708 <SendTxData+0x288>)
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	1c59      	adds	r1, r3, #1
 800a50e:	6339      	str	r1, [r7, #48]	@ 0x30
 800a510:	4413      	add	r3, r2
 800a512:	4a80      	ldr	r2, [pc, #512]	@ (800a714 <SendTxData+0x294>)
 800a514:	7812      	ldrb	r2, [r2, #0]
 800a516:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a518:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a51a:	0a1b      	lsrs	r3, r3, #8
 800a51c:	b298      	uxth	r0, r3
 800a51e:	4b7a      	ldr	r3, [pc, #488]	@ (800a708 <SendTxData+0x288>)
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	1c59      	adds	r1, r3, #1
 800a526:	6339      	str	r1, [r7, #48]	@ 0x30
 800a528:	4413      	add	r3, r2
 800a52a:	b2c2      	uxtb	r2, r0
 800a52c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a52e:	4b76      	ldr	r3, [pc, #472]	@ (800a708 <SendTxData+0x288>)
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a534:	1c59      	adds	r1, r3, #1
 800a536:	6339      	str	r1, [r7, #48]	@ 0x30
 800a538:	4413      	add	r3, r2
 800a53a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a53c:	b2d2      	uxtb	r2, r2
 800a53e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a540:	4b71      	ldr	r3, [pc, #452]	@ (800a708 <SendTxData+0x288>)
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a546:	1c59      	adds	r1, r3, #1
 800a548:	6339      	str	r1, [r7, #48]	@ 0x30
 800a54a:	4413      	add	r3, r2
 800a54c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a54e:	b2d2      	uxtb	r2, r2
 800a550:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a552:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a554:	0a1b      	lsrs	r3, r3, #8
 800a556:	b298      	uxth	r0, r3
 800a558:	4b6b      	ldr	r3, [pc, #428]	@ (800a708 <SendTxData+0x288>)
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55e:	1c59      	adds	r1, r3, #1
 800a560:	6339      	str	r1, [r7, #48]	@ 0x30
 800a562:	4413      	add	r3, r2
 800a564:	b2c2      	uxtb	r2, r0
 800a566:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a568:	4b67      	ldr	r3, [pc, #412]	@ (800a708 <SendTxData+0x288>)
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56e:	1c59      	adds	r1, r3, #1
 800a570:	6339      	str	r1, [r7, #48]	@ 0x30
 800a572:	4413      	add	r3, r2
 800a574:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a576:	b2d2      	uxtb	r2, r2
 800a578:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a57a:	4b67      	ldr	r3, [pc, #412]	@ (800a718 <SendTxData+0x298>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d007      	beq.n	800a592 <SendTxData+0x112>
 800a582:	4b65      	ldr	r3, [pc, #404]	@ (800a718 <SendTxData+0x298>)
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b01      	cmp	r3, #1
 800a588:	d003      	beq.n	800a592 <SendTxData+0x112>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a58a:	4b63      	ldr	r3, [pc, #396]	@ (800a718 <SendTxData+0x298>)
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d120      	bne.n	800a5d4 <SendTxData+0x154>
  {
    AppData.Buffer[i++] = 0;
 800a592:	4b5d      	ldr	r3, [pc, #372]	@ (800a708 <SendTxData+0x288>)
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a598:	1c59      	adds	r1, r3, #1
 800a59a:	6339      	str	r1, [r7, #48]	@ 0x30
 800a59c:	4413      	add	r3, r2
 800a59e:	2200      	movs	r2, #0
 800a5a0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a5a2:	4b59      	ldr	r3, [pc, #356]	@ (800a708 <SendTxData+0x288>)
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	1c59      	adds	r1, r3, #1
 800a5aa:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5ac:	4413      	add	r3, r2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a5b2:	4b55      	ldr	r3, [pc, #340]	@ (800a708 <SendTxData+0x288>)
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b8:	1c59      	adds	r1, r3, #1
 800a5ba:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5bc:	4413      	add	r3, r2
 800a5be:	2200      	movs	r2, #0
 800a5c0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a5c2:	4b51      	ldr	r3, [pc, #324]	@ (800a708 <SendTxData+0x288>)
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c8:	1c59      	adds	r1, r3, #1
 800a5ca:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5cc:	4413      	add	r3, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	701a      	strb	r2, [r3, #0]
 800a5d2:	e05b      	b.n	800a68c <SendTxData+0x20c>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	627b      	str	r3, [r7, #36]	@ 0x24
    longitude = sensor_data.longitude;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a5dc:	4b4a      	ldr	r3, [pc, #296]	@ (800a708 <SendTxData+0x288>)
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e2:	1c59      	adds	r1, r3, #1
 800a5e4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5e6:	18d4      	adds	r4, r2, r3
 800a5e8:	f7f7 fce6 	bl	8001fb8 <GetBatteryLevel>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	1418      	asrs	r0, r3, #16
 800a5f4:	4b44      	ldr	r3, [pc, #272]	@ (800a708 <SendTxData+0x288>)
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fa:	1c59      	adds	r1, r3, #1
 800a5fc:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5fe:	4413      	add	r3, r2
 800a600:	b2c2      	uxtb	r2, r0
 800a602:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a606:	1218      	asrs	r0, r3, #8
 800a608:	4b3f      	ldr	r3, [pc, #252]	@ (800a708 <SendTxData+0x288>)
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60e:	1c59      	adds	r1, r3, #1
 800a610:	6339      	str	r1, [r7, #48]	@ 0x30
 800a612:	4413      	add	r3, r2
 800a614:	b2c2      	uxtb	r2, r0
 800a616:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a618:	4b3b      	ldr	r3, [pc, #236]	@ (800a708 <SendTxData+0x288>)
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61e:	1c59      	adds	r1, r3, #1
 800a620:	6339      	str	r1, [r7, #48]	@ 0x30
 800a622:	4413      	add	r3, r2
 800a624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	1418      	asrs	r0, r3, #16
 800a62e:	4b36      	ldr	r3, [pc, #216]	@ (800a708 <SendTxData+0x288>)
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a634:	1c59      	adds	r1, r3, #1
 800a636:	6339      	str	r1, [r7, #48]	@ 0x30
 800a638:	4413      	add	r3, r2
 800a63a:	b2c2      	uxtb	r2, r0
 800a63c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a63e:	6a3b      	ldr	r3, [r7, #32]
 800a640:	1218      	asrs	r0, r3, #8
 800a642:	4b31      	ldr	r3, [pc, #196]	@ (800a708 <SendTxData+0x288>)
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	1c59      	adds	r1, r3, #1
 800a64a:	6339      	str	r1, [r7, #48]	@ 0x30
 800a64c:	4413      	add	r3, r2
 800a64e:	b2c2      	uxtb	r2, r0
 800a650:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a652:	4b2d      	ldr	r3, [pc, #180]	@ (800a708 <SendTxData+0x288>)
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a658:	1c59      	adds	r1, r3, #1
 800a65a:	6339      	str	r1, [r7, #48]	@ 0x30
 800a65c:	4413      	add	r3, r2
 800a65e:	6a3a      	ldr	r2, [r7, #32]
 800a660:	b2d2      	uxtb	r2, r2
 800a662:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a664:	8bfb      	ldrh	r3, [r7, #30]
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	b298      	uxth	r0, r3
 800a66a:	4b27      	ldr	r3, [pc, #156]	@ (800a708 <SendTxData+0x288>)
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a670:	1c59      	adds	r1, r3, #1
 800a672:	6339      	str	r1, [r7, #48]	@ 0x30
 800a674:	4413      	add	r3, r2
 800a676:	b2c2      	uxtb	r2, r0
 800a678:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a67a:	4b23      	ldr	r3, [pc, #140]	@ (800a708 <SendTxData+0x288>)
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	1c59      	adds	r1, r3, #1
 800a682:	6339      	str	r1, [r7, #48]	@ 0x30
 800a684:	4413      	add	r3, r2
 800a686:	8bfa      	ldrh	r2, [r7, #30]
 800a688:	b2d2      	uxtb	r2, r2
 800a68a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	4b1d      	ldr	r3, [pc, #116]	@ (800a708 <SendTxData+0x288>)
 800a692:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a694:	4b21      	ldr	r3, [pc, #132]	@ (800a71c <SendTxData+0x29c>)
 800a696:	7a5b      	ldrb	r3, [r3, #9]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d007      	beq.n	800a6ac <SendTxData+0x22c>
 800a69c:	f002 f872 	bl	800c784 <LmHandlerJoinStatus>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d102      	bne.n	800a6ac <SendTxData+0x22c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a6a6:	481d      	ldr	r0, [pc, #116]	@ (800a71c <SendTxData+0x29c>)
 800a6a8:	f010 fec6 	bl	801b438 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
    //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a6ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a718 <SendTxData+0x298>)
 800a6ae:	78db      	ldrb	r3, [r3, #3]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4814      	ldr	r0, [pc, #80]	@ (800a708 <SendTxData+0x288>)
 800a6b6:	f002 f881 	bl	800c7bc <LmHandlerSend>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a6c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d007      	beq.n	800a6d8 <SendTxData+0x258>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a6c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a6cc:	f113 0f06 	cmn.w	r3, #6
 800a6d0:	d102      	bne.n	800a6d8 <SendTxData+0x258>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a6d2:	f001 ffab 	bl	800c62c <LmHandlerGetDutyCycleWaitTime>
 800a6d6:	6378      	str	r0, [r7, #52]	@ 0x34
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
    }
  }

  if (EventType == TX_ON_TIMER)
 800a6d8:	4b11      	ldr	r3, [pc, #68]	@ (800a720 <SendTxData+0x2a0>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10f      	bne.n	800a700 <SendTxData+0x280>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a6e0:	4810      	ldr	r0, [pc, #64]	@ (800a724 <SendTxData+0x2a4>)
 800a6e2:	f010 fea9 	bl	801b438 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a6e6:	4b10      	ldr	r3, [pc, #64]	@ (800a728 <SendTxData+0x2a8>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	bf38      	it	cc
 800a6f0:	4613      	movcc	r3, r2
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	480b      	ldr	r0, [pc, #44]	@ (800a724 <SendTxData+0x2a4>)
 800a6f6:	f010 ff0f 	bl	801b518 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a6fa:	480a      	ldr	r0, [pc, #40]	@ (800a724 <SendTxData+0x2a4>)
 800a6fc:	f010 fe2e 	bl	801b35c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a700:	bf00      	nop
 800a702:	373c      	adds	r7, #60	@ 0x3c
 800a704:	46bd      	mov	sp, r7
 800a706:	bd90      	pop	{r4, r7, pc}
 800a708:	20000074 	.word	0x20000074
 800a70c:	41200000 	.word	0x41200000
 800a710:	42c80000 	.word	0x42c80000
 800a714:	2000056e 	.word	0x2000056e
 800a718:	20000058 	.word	0x20000058
 800a71c:	200005a0 	.word	0x200005a0
 800a720:	20000448 	.word	0x20000448
 800a724:	2000044c 	.word	0x2000044c
 800a728:	20000070 	.word	0x20000070

0800a72c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a734:	2100      	movs	r1, #0
 800a736:	2002      	movs	r0, #2
 800a738:	f010 fd5a 	bl	801b1f0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a73c:	4803      	ldr	r0, [pc, #12]	@ (800a74c <OnTxTimerEvent+0x20>)
 800a73e:	f010 fe0d 	bl	801b35c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a742:	bf00      	nop
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	2000044c 	.word	0x2000044c

0800a750 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
#if defined(DBG)	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bc80      	pop	{r7}
 800a760:	4770      	bx	lr

0800a762 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a762:	b480      	push	{r7}
 800a764:	b083      	sub	sp, #12
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a76a:	bf00      	nop
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	bc80      	pop	{r7}
 800a772:	4770      	bx	lr

0800a774 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_RED */
#endif
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	bc80      	pop	{r7}
 800a784:	4770      	bx	lr
	...

0800a788 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d006      	beq.n	800a7a4 <OnTxData+0x1c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <OnTxData+0x1c>
    {
#if defined(DBG)	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a79e:	4803      	ldr	r0, [pc, #12]	@ (800a7ac <OnTxData+0x24>)
 800a7a0:	f010 fddc 	bl	801b35c <UTIL_TIMER_Start>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20000570 	.word	0x20000570

0800a7b0 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d016      	beq.n	800a7ec <OnJoinRequest+0x3c>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d107      	bne.n	800a7d8 <OnJoinRequest+0x28>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	2004      	movs	r0, #4
 800a7cc:	f010 fd10 	bl	801b1f0 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a7d0:	4808      	ldr	r0, [pc, #32]	@ (800a7f4 <OnJoinRequest+0x44>)
 800a7d2:	f010 fe31 	bl	801b438 <UTIL_TIMER_Stop>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a7d6:	e009      	b.n	800a7ec <OnJoinRequest+0x3c>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	79db      	ldrb	r3, [r3, #7]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d105      	bne.n	800a7ec <OnJoinRequest+0x3c>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a7e0:	4b05      	ldr	r3, [pc, #20]	@ (800a7f8 <OnJoinRequest+0x48>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 ff2a 	bl	800c640 <LmHandlerJoin>
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	200005a0 	.word	0x200005a0
 800a7f8:	20000008 	.word	0x20000008

0800a7fc <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d006      	beq.n	800a818 <OnBeaconStatusChange+0x1c>
  {
    switch (params->State)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	785b      	ldrb	r3, [r3, #1]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d001      	beq.n	800a816 <OnBeaconStatusChange+0x1a>
 800a812:	2b03      	cmp	r3, #3
        break;
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
        break;
 800a814:	e000      	b.n	800a818 <OnBeaconStatusChange+0x1c>
        break;
 800a816:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc80      	pop	{r7}
 800a820:	4770      	bx	lr

0800a822 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800a822:	b480      	push	{r7}
 800a824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800a826:	bf00      	nop
 800a828:	46bd      	mov	sp, r7
 800a82a:	bc80      	pop	{r7}
 800a82c:	4770      	bx	lr

0800a82e <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	4603      	mov	r3, r0
 800a836:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
  /* USER CODE END OnClassChange_1 */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bc80      	pop	{r7}
 800a840:	4770      	bx	lr

0800a842 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a846:	2100      	movs	r1, #0
 800a848:	2001      	movs	r0, #1
 800a84a:	f010 fcd1 	bl	801b1f0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a84e:	bf00      	nop
 800a850:	bd80      	pop	{r7, pc}
	...

0800a854 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a85c:	4a0d      	ldr	r2, [pc, #52]	@ (800a894 <OnTxPeriodicityChanged+0x40>)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a862:	4b0c      	ldr	r3, [pc, #48]	@ (800a894 <OnTxPeriodicityChanged+0x40>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d103      	bne.n	800a872 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a86a:	4b0a      	ldr	r3, [pc, #40]	@ (800a894 <OnTxPeriodicityChanged+0x40>)
 800a86c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800a870:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a872:	4809      	ldr	r0, [pc, #36]	@ (800a898 <OnTxPeriodicityChanged+0x44>)
 800a874:	f010 fde0 	bl	801b438 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a878:	4b06      	ldr	r3, [pc, #24]	@ (800a894 <OnTxPeriodicityChanged+0x40>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4619      	mov	r1, r3
 800a87e:	4806      	ldr	r0, [pc, #24]	@ (800a898 <OnTxPeriodicityChanged+0x44>)
 800a880:	f010 fe4a 	bl	801b518 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a884:	4804      	ldr	r0, [pc, #16]	@ (800a898 <OnTxPeriodicityChanged+0x44>)
 800a886:	f010 fd69 	bl	801b35c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a88a:	bf00      	nop
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	20000070 	.word	0x20000070
 800a898:	2000044c 	.word	0x2000044c

0800a89c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a8a6:	4a04      	ldr	r2, [pc, #16]	@ (800a8b8 <OnTxFrameCtrlChanged+0x1c>)
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	20000058 	.word	0x20000058

0800a8bc <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a8c6:	4a04      	ldr	r2, [pc, #16]	@ (800a8d8 <OnPingSlotPeriodicityChanged+0x1c>)
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bc80      	pop	{r7}
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	20000058 	.word	0x20000058

0800a8dc <OnSystemReset>:

static void OnSystemReset(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a8e0:	f002 fca7 	bl	800d232 <LmHandlerHalt>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <OnSystemReset+0x1c>
 800a8ea:	f001 ff4b 	bl	800c784 <LmHandlerJoinStatus>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d101      	bne.n	800a8f8 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a8f4:	f7ff fcba 	bl	800a26c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a8f8:	bf00      	nop
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <StopJoin>:

static void StopJoin(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a900:	480d      	ldr	r0, [pc, #52]	@ (800a938 <StopJoin+0x3c>)
 800a902:	f010 fd99 	bl	801b438 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a906:	f002 fc87 	bl	800d218 <LmHandlerStop>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10e      	bne.n	800a92e <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a910:	4b0a      	ldr	r3, [pc, #40]	@ (800a93c <StopJoin+0x40>)
 800a912:	2201      	movs	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a916:	480a      	ldr	r0, [pc, #40]	@ (800a940 <StopJoin+0x44>)
 800a918:	f001 fd36 	bl	800c388 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a91c:	4b07      	ldr	r3, [pc, #28]	@ (800a93c <StopJoin+0x40>)
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	2101      	movs	r1, #1
 800a922:	4618      	mov	r0, r3
 800a924:	f001 fe8c 	bl	800c640 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a928:	4803      	ldr	r0, [pc, #12]	@ (800a938 <StopJoin+0x3c>)
 800a92a:	f010 fd17 	bl	801b35c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a92e:	4805      	ldr	r0, [pc, #20]	@ (800a944 <StopJoin+0x48>)
 800a930:	f010 fd14 	bl	801b35c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a934:	bf00      	nop
 800a936:	bd80      	pop	{r7, pc}
 800a938:	2000044c 	.word	0x2000044c
 800a93c:	20000008 	.word	0x20000008
 800a940:	20000058 	.word	0x20000058
 800a944:	20000464 	.word	0x20000464

0800a948 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a950:	4b05      	ldr	r3, [pc, #20]	@ (800a968 <OnStopJoinTimerEvent+0x20>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2b02      	cmp	r3, #2
 800a956:	d103      	bne.n	800a960 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a958:	2100      	movs	r1, #0
 800a95a:	2008      	movs	r0, #8
 800a95c:	f010 fc48 	bl	801b1f0 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a960:	bf00      	nop
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	20000008 	.word	0x20000008

0800a96c <StoreContext>:

static void StoreContext(void)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a972:	23ff      	movs	r3, #255	@ 0xff
 800a974:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a976:	f002 fc91 	bl	800d29c <LmHandlerNvmDataStore>
 800a97a:	4603      	mov	r3, r0
 800a97c:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a97e:	bf00      	nop
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	4603      	mov	r3, r0
 800a98e:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	bc80      	pop	{r7}
 800a998:	4770      	bx	lr
	...

0800a99c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800a9a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a9aa:	4807      	ldr	r0, [pc, #28]	@ (800a9c8 <OnStoreContextRequest+0x2c>)
 800a9ac:	f7f6 fce6 	bl	800137c <FLASH_IF_Erase>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d104      	bne.n	800a9c0 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	4803      	ldr	r0, [pc, #12]	@ (800a9c8 <OnStoreContextRequest+0x2c>)
 800a9bc:	f7f6 fc8e 	bl	80012dc <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a9c0:	bf00      	nop
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	0803f000 	.word	0x0803f000

0800a9cc <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	4903      	ldr	r1, [pc, #12]	@ (800a9e8 <OnRestoreContextRequest+0x1c>)
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7f6 fca6 	bl	800132c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	0803f000 	.word	0x0803f000

0800a9ec <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800a9f0:	4b15      	ldr	r3, [pc, #84]	@ (800aa48 <LoraInfo_Init+0x5c>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a9f6:	4b14      	ldr	r3, [pc, #80]	@ (800aa48 <LoraInfo_Init+0x5c>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a9fc:	4b12      	ldr	r3, [pc, #72]	@ (800aa48 <LoraInfo_Init+0x5c>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800aa02:	4b11      	ldr	r3, [pc, #68]	@ (800aa48 <LoraInfo_Init+0x5c>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800aa08:	4b0f      	ldr	r3, [pc, #60]	@ (800aa48 <LoraInfo_Init+0x5c>)
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	f043 0320 	orr.w	r3, r3, #32
 800aa10:	4a0d      	ldr	r2, [pc, #52]	@ (800aa48 <LoraInfo_Init+0x5c>)
 800aa12:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800aa14:	4b0c      	ldr	r3, [pc, #48]	@ (800aa48 <LoraInfo_Init+0x5c>)
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10d      	bne.n	800aa38 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800aa1c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa4c <LoraInfo_Init+0x60>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2100      	movs	r1, #0
 800aa22:	2000      	movs	r0, #0
 800aa24:	f010 ff12 	bl	801b84c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800aa28:	bf00      	nop
 800aa2a:	f010 fefd 	bl	801b828 <UTIL_ADV_TRACE_IsBufferEmpty>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d1fa      	bne.n	800aa2a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800aa34:	bf00      	nop
 800aa36:	e7fd      	b.n	800aa34 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800aa38:	4b03      	ldr	r3, [pc, #12]	@ (800aa48 <LoraInfo_Init+0x5c>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800aa3e:	4b02      	ldr	r3, [pc, #8]	@ (800aa48 <LoraInfo_Init+0x5c>)
 800aa40:	2201      	movs	r2, #1
 800aa42:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800aa44:	bf00      	nop
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	200005b8 	.word	0x200005b8
 800aa4c:	0801bed8 	.word	0x0801bed8

0800aa50 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800aa54:	4b02      	ldr	r3, [pc, #8]	@ (800aa60 <LoraInfo_GetPtr+0x10>)
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bc80      	pop	{r7}
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	200005b8 	.word	0x200005b8

0800aa64 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800aa68:	f7f8 f9a1 	bl	8002dae <BSP_RADIO_Init>
 800aa6c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b082      	sub	sp, #8
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	4603      	mov	r3, r0
 800aa7a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7f8 f9c6 	bl	8002e10 <BSP_RADIO_ConfigRFSwitch>
 800aa84:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800aa92:	f7f8 fa0b 	bl	8002eac <BSP_RADIO_GetTxConfig>
 800aa96:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800aaa0:	f7f8 fa0b 	bl	8002eba <BSP_RADIO_IsTCXO>
 800aaa4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800aaae:	f7f8 fa0b 	bl	8002ec8 <BSP_RADIO_IsDCDC>
 800aab2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7f8 fa06 	bl	8002ed6 <BSP_RADIO_GetRFOMaxPowerConfig>
 800aaca:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	33f1      	adds	r3, #241	@ 0xf1
 800aae0:	2210      	movs	r2, #16
 800aae2:	2100      	movs	r1, #0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f00c fbc9 	bl	801727c <memset1>
    ctx->M_n = 0;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	22f0      	movs	r2, #240	@ 0xf0
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f00c fbbf 	bl	801727c <memset1>
}
 800aafe:	bf00      	nop
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b082      	sub	sp, #8
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	461a      	mov	r2, r3
 800ab14:	2110      	movs	r1, #16
 800ab16:	6838      	ldr	r0, [r7, #0]
 800ab18:	f000 fe60 	bl	800b7dc <lorawan_aes_set_key>
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08c      	sub	sp, #48	@ 0x30
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 80a1 	beq.w	800ac7e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ab42:	f1c3 0310 	rsb	r3, r3, #16
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	bf28      	it	cs
 800ab4c:	4613      	movcs	r3, r2
 800ab4e:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ab5c:	4413      	add	r3, r2
 800ab5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab60:	b292      	uxth	r2, r2
 800ab62:	68b9      	ldr	r1, [r7, #8]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f00c fb4e 	bl	8017206 <memcpy1>
        ctx->M_n += mlen;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800ab70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab72:	441a      	add	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ab80:	2b0f      	cmp	r3, #15
 800ab82:	f240 808d 	bls.w	800aca0 <AES_CMAC_Update+0x17c>
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	f000 8088 	beq.w	800aca0 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ab90:	2300      	movs	r3, #0
 800ab92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab94:	e015      	b.n	800abc2 <AES_CMAC_Update+0x9e>
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab9a:	4413      	add	r3, r2
 800ab9c:	33f1      	adds	r3, #241	@ 0xf1
 800ab9e:	781a      	ldrb	r2, [r3, #0]
 800aba0:	68f9      	ldr	r1, [r7, #12]
 800aba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba4:	440b      	add	r3, r1
 800aba6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	4053      	eors	r3, r2
 800abae:	b2d9      	uxtb	r1, r3
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb4:	4413      	add	r3, r2
 800abb6:	33f1      	adds	r3, #241	@ 0xf1
 800abb8:	460a      	mov	r2, r1
 800abba:	701a      	strb	r2, [r3, #0]
 800abbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abbe:	3301      	adds	r3, #1
 800abc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc4:	2b0f      	cmp	r3, #15
 800abc6:	dde6      	ble.n	800ab96 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800abce:	f107 0314 	add.w	r3, r7, #20
 800abd2:	2210      	movs	r2, #16
 800abd4:	4618      	mov	r0, r3
 800abd6:	f00c fb16 	bl	8017206 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	f107 0114 	add.w	r1, r7, #20
 800abe0:	f107 0314 	add.w	r3, r7, #20
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 fed7 	bl	800b998 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	33f1      	adds	r3, #241	@ 0xf1
 800abee:	f107 0114 	add.w	r1, r7, #20
 800abf2:	2210      	movs	r2, #16
 800abf4:	4618      	mov	r0, r3
 800abf6:	f00c fb06 	bl	8017206 <memcpy1>

        data += mlen;
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfe:	4413      	add	r3, r2
 800ac00:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ac0a:	e038      	b.n	800ac7e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac10:	e013      	b.n	800ac3a <AES_CMAC_Update+0x116>
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac16:	4413      	add	r3, r2
 800ac18:	33f1      	adds	r3, #241	@ 0xf1
 800ac1a:	781a      	ldrb	r2, [r3, #0]
 800ac1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1e:	68b9      	ldr	r1, [r7, #8]
 800ac20:	440b      	add	r3, r1
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	4053      	eors	r3, r2
 800ac26:	b2d9      	uxtb	r1, r3
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2c:	4413      	add	r3, r2
 800ac2e:	33f1      	adds	r3, #241	@ 0xf1
 800ac30:	460a      	mov	r2, r1
 800ac32:	701a      	strb	r2, [r3, #0]
 800ac34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac36:	3301      	adds	r3, #1
 800ac38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac3c:	2b0f      	cmp	r3, #15
 800ac3e:	dde8      	ble.n	800ac12 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800ac46:	f107 0314 	add.w	r3, r7, #20
 800ac4a:	2210      	movs	r2, #16
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f00c fada 	bl	8017206 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	f107 0114 	add.w	r1, r7, #20
 800ac58:	f107 0314 	add.w	r3, r7, #20
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fe9b 	bl	800b998 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	33f1      	adds	r3, #241	@ 0xf1
 800ac66:	f107 0114 	add.w	r1, r7, #20
 800ac6a:	2210      	movs	r2, #16
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f00c faca 	bl	8017206 <memcpy1>

        data += 16;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	3310      	adds	r3, #16
 800ac76:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3b10      	subs	r3, #16
 800ac7c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b10      	cmp	r3, #16
 800ac82:	d8c3      	bhi.n	800ac0c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	b292      	uxth	r2, r2
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f00c fab8 	bl	8017206 <memcpy1>
    ctx->M_n = len;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800ac9e:	e000      	b.n	800aca2 <AES_CMAC_Update+0x17e>
            return;
 800aca0:	bf00      	nop
}
 800aca2:	3730      	adds	r7, #48	@ 0x30
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b092      	sub	sp, #72	@ 0x48
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800acb2:	f107 031c 	add.w	r3, r7, #28
 800acb6:	2210      	movs	r2, #16
 800acb8:	2100      	movs	r1, #0
 800acba:	4618      	mov	r0, r3
 800acbc:	f00c fade 	bl	801727c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	f107 011c 	add.w	r1, r7, #28
 800acc6:	f107 031c 	add.w	r3, r7, #28
 800acca:	4618      	mov	r0, r3
 800accc:	f000 fe64 	bl	800b998 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800acd0:	7f3b      	ldrb	r3, [r7, #28]
 800acd2:	b25b      	sxtb	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	da31      	bge.n	800ad3c <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800acd8:	2300      	movs	r3, #0
 800acda:	647b      	str	r3, [r7, #68]	@ 0x44
 800acdc:	e01c      	b.n	800ad18 <AES_CMAC_Final+0x70>
 800acde:	f107 021c 	add.w	r2, r7, #28
 800ace2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ace4:	4413      	add	r3, r2
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	b25b      	sxtb	r3, r3
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	b25a      	sxtb	r2, r3
 800acee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acf0:	3301      	adds	r3, #1
 800acf2:	3348      	adds	r3, #72	@ 0x48
 800acf4:	443b      	add	r3, r7
 800acf6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800acfa:	09db      	lsrs	r3, r3, #7
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	b25b      	sxtb	r3, r3
 800ad00:	4313      	orrs	r3, r2
 800ad02:	b25b      	sxtb	r3, r3
 800ad04:	b2d9      	uxtb	r1, r3
 800ad06:	f107 021c 	add.w	r2, r7, #28
 800ad0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad0c:	4413      	add	r3, r2
 800ad0e:	460a      	mov	r2, r1
 800ad10:	701a      	strb	r2, [r3, #0]
 800ad12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad14:	3301      	adds	r3, #1
 800ad16:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad1a:	2b0e      	cmp	r3, #14
 800ad1c:	dddf      	ble.n	800acde <AES_CMAC_Final+0x36>
 800ad1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800ad2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad2e:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800ad32:	43db      	mvns	r3, r3
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3a:	e028      	b.n	800ad8e <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad40:	e01c      	b.n	800ad7c <AES_CMAC_Final+0xd4>
 800ad42:	f107 021c 	add.w	r2, r7, #28
 800ad46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad48:	4413      	add	r3, r2
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	b25b      	sxtb	r3, r3
 800ad4e:	005b      	lsls	r3, r3, #1
 800ad50:	b25a      	sxtb	r2, r3
 800ad52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad54:	3301      	adds	r3, #1
 800ad56:	3348      	adds	r3, #72	@ 0x48
 800ad58:	443b      	add	r3, r7
 800ad5a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ad5e:	09db      	lsrs	r3, r3, #7
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	b25b      	sxtb	r3, r3
 800ad64:	4313      	orrs	r3, r2
 800ad66:	b25b      	sxtb	r3, r3
 800ad68:	b2d9      	uxtb	r1, r3
 800ad6a:	f107 021c 	add.w	r2, r7, #28
 800ad6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad70:	4413      	add	r3, r2
 800ad72:	460a      	mov	r2, r1
 800ad74:	701a      	strb	r2, [r3, #0]
 800ad76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad78:	3301      	adds	r3, #1
 800ad7a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad7e:	2b0e      	cmp	r3, #14
 800ad80:	dddf      	ble.n	800ad42 <AES_CMAC_Final+0x9a>
 800ad82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad86:	005b      	lsls	r3, r3, #1
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad94:	2b10      	cmp	r3, #16
 800ad96:	d11d      	bne.n	800add4 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ad98:	2300      	movs	r3, #0
 800ad9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad9c:	e016      	b.n	800adcc <AES_CMAC_Final+0x124>
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ada2:	4413      	add	r3, r2
 800ada4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ada8:	781a      	ldrb	r2, [r3, #0]
 800adaa:	f107 011c 	add.w	r1, r7, #28
 800adae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb0:	440b      	add	r3, r1
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	4053      	eors	r3, r2
 800adb6:	b2d9      	uxtb	r1, r3
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adbc:	4413      	add	r3, r2
 800adbe:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800adc2:	460a      	mov	r2, r1
 800adc4:	701a      	strb	r2, [r3, #0]
 800adc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc8:	3301      	adds	r3, #1
 800adca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adce:	2b0f      	cmp	r3, #15
 800add0:	dde5      	ble.n	800ad9e <AES_CMAC_Final+0xf6>
 800add2:	e098      	b.n	800af06 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800add4:	7f3b      	ldrb	r3, [r7, #28]
 800add6:	b25b      	sxtb	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	da31      	bge.n	800ae40 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800addc:	2300      	movs	r3, #0
 800adde:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ade0:	e01c      	b.n	800ae1c <AES_CMAC_Final+0x174>
 800ade2:	f107 021c 	add.w	r2, r7, #28
 800ade6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade8:	4413      	add	r3, r2
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	b25b      	sxtb	r3, r3
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	b25a      	sxtb	r2, r3
 800adf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf4:	3301      	adds	r3, #1
 800adf6:	3348      	adds	r3, #72	@ 0x48
 800adf8:	443b      	add	r3, r7
 800adfa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800adfe:	09db      	lsrs	r3, r3, #7
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	b25b      	sxtb	r3, r3
 800ae04:	4313      	orrs	r3, r2
 800ae06:	b25b      	sxtb	r3, r3
 800ae08:	b2d9      	uxtb	r1, r3
 800ae0a:	f107 021c 	add.w	r2, r7, #28
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae10:	4413      	add	r3, r2
 800ae12:	460a      	mov	r2, r1
 800ae14:	701a      	strb	r2, [r3, #0]
 800ae16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae18:	3301      	adds	r3, #1
 800ae1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1e:	2b0e      	cmp	r3, #14
 800ae20:	dddf      	ble.n	800ade2 <AES_CMAC_Final+0x13a>
 800ae22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae26:	005b      	lsls	r3, r3, #1
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800ae2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae32:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800ae36:	43db      	mvns	r3, r3
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae3e:	e028      	b.n	800ae92 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800ae40:	2300      	movs	r3, #0
 800ae42:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae44:	e01c      	b.n	800ae80 <AES_CMAC_Final+0x1d8>
 800ae46:	f107 021c 	add.w	r2, r7, #28
 800ae4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae4c:	4413      	add	r3, r2
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	b25b      	sxtb	r3, r3
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	b25a      	sxtb	r2, r3
 800ae56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae58:	3301      	adds	r3, #1
 800ae5a:	3348      	adds	r3, #72	@ 0x48
 800ae5c:	443b      	add	r3, r7
 800ae5e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ae62:	09db      	lsrs	r3, r3, #7
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	b25b      	sxtb	r3, r3
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	b25b      	sxtb	r3, r3
 800ae6c:	b2d9      	uxtb	r1, r3
 800ae6e:	f107 021c 	add.w	r2, r7, #28
 800ae72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae74:	4413      	add	r3, r2
 800ae76:	460a      	mov	r2, r1
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae82:	2b0e      	cmp	r3, #14
 800ae84:	dddf      	ble.n	800ae46 <AES_CMAC_Final+0x19e>
 800ae86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	2280      	movs	r2, #128	@ 0x80
 800ae9e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800aea2:	e007      	b.n	800aeb4 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	4413      	add	r3, r2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aec8:	2b0f      	cmp	r3, #15
 800aeca:	d9eb      	bls.n	800aea4 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800aecc:	2300      	movs	r3, #0
 800aece:	633b      	str	r3, [r7, #48]	@ 0x30
 800aed0:	e016      	b.n	800af00 <AES_CMAC_Final+0x258>
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed6:	4413      	add	r3, r2
 800aed8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	f107 011c 	add.w	r1, r7, #28
 800aee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee4:	440b      	add	r3, r1
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	4053      	eors	r3, r2
 800aeea:	b2d9      	uxtb	r1, r3
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef0:	4413      	add	r3, r2
 800aef2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aef6:	460a      	mov	r2, r1
 800aef8:	701a      	strb	r2, [r3, #0]
 800aefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefc:	3301      	adds	r3, #1
 800aefe:	633b      	str	r3, [r7, #48]	@ 0x30
 800af00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af02:	2b0f      	cmp	r3, #15
 800af04:	dde5      	ble.n	800aed2 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800af06:	2300      	movs	r3, #0
 800af08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af0a:	e015      	b.n	800af38 <AES_CMAC_Final+0x290>
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af10:	4413      	add	r3, r2
 800af12:	33f1      	adds	r3, #241	@ 0xf1
 800af14:	781a      	ldrb	r2, [r3, #0]
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1a:	440b      	add	r3, r1
 800af1c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	4053      	eors	r3, r2
 800af24:	b2d9      	uxtb	r1, r3
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2a:	4413      	add	r3, r2
 800af2c:	33f1      	adds	r3, #241	@ 0xf1
 800af2e:	460a      	mov	r2, r1
 800af30:	701a      	strb	r2, [r3, #0]
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	3301      	adds	r3, #1
 800af36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3a:	2b0f      	cmp	r3, #15
 800af3c:	dde6      	ble.n	800af0c <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800af44:	f107 030c 	add.w	r3, r7, #12
 800af48:	2210      	movs	r2, #16
 800af4a:	4618      	mov	r0, r3
 800af4c:	f00c f95b 	bl	8017206 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	f107 030c 	add.w	r3, r7, #12
 800af56:	6879      	ldr	r1, [r7, #4]
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 fd1d 	bl	800b998 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800af5e:	f107 031c 	add.w	r3, r7, #28
 800af62:	2210      	movs	r2, #16
 800af64:	2100      	movs	r1, #0
 800af66:	4618      	mov	r0, r3
 800af68:	f00c f988 	bl	801727c <memset1>
}
 800af6c:	bf00      	nop
 800af6e:	3748      	adds	r7, #72	@ 0x48
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781a      	ldrb	r2, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3301      	adds	r3, #1
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	7852      	ldrb	r2, [r2, #1]
 800af8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3302      	adds	r3, #2
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	7892      	ldrb	r2, [r2, #2]
 800af98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	3303      	adds	r3, #3
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	78d2      	ldrb	r2, [r2, #3]
 800afa2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3304      	adds	r3, #4
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	7912      	ldrb	r2, [r2, #4]
 800afac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3305      	adds	r3, #5
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	7952      	ldrb	r2, [r2, #5]
 800afb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3306      	adds	r3, #6
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	7992      	ldrb	r2, [r2, #6]
 800afc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3307      	adds	r3, #7
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	79d2      	ldrb	r2, [r2, #7]
 800afca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3308      	adds	r3, #8
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	7a12      	ldrb	r2, [r2, #8]
 800afd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	3309      	adds	r3, #9
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	7a52      	ldrb	r2, [r2, #9]
 800afde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	330a      	adds	r3, #10
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	7a92      	ldrb	r2, [r2, #10]
 800afe8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	330b      	adds	r3, #11
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	7ad2      	ldrb	r2, [r2, #11]
 800aff2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	330c      	adds	r3, #12
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	7b12      	ldrb	r2, [r2, #12]
 800affc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	330d      	adds	r3, #13
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	7b52      	ldrb	r2, [r2, #13]
 800b006:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	330e      	adds	r3, #14
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	7b92      	ldrb	r2, [r2, #14]
 800b010:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	330f      	adds	r3, #15
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	7bd2      	ldrb	r2, [r2, #15]
 800b01a:	701a      	strb	r2, [r3, #0]
#endif
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	bc80      	pop	{r7}
 800b024:	4770      	bx	lr

0800b026 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b026:	b480      	push	{r7}
 800b028:	b085      	sub	sp, #20
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	4613      	mov	r3, r2
 800b032:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b034:	e007      	b.n	800b046 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	1c53      	adds	r3, r2, #1
 800b03a:	60bb      	str	r3, [r7, #8]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	1c59      	adds	r1, r3, #1
 800b040:	60f9      	str	r1, [r7, #12]
 800b042:	7812      	ldrb	r2, [r2, #0]
 800b044:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b046:	79fb      	ldrb	r3, [r7, #7]
 800b048:	1e5a      	subs	r2, r3, #1
 800b04a:	71fa      	strb	r2, [r7, #7]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1f2      	bne.n	800b036 <copy_block_nn+0x10>
}
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	bc80      	pop	{r7}
 800b05a:	4770      	bx	lr

0800b05c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	781a      	ldrb	r2, [r3, #0]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	4053      	eors	r3, r2
 800b070:	b2da      	uxtb	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	3301      	adds	r3, #1
 800b07a:	7819      	ldrb	r1, [r3, #0]
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	3301      	adds	r3, #1
 800b080:	781a      	ldrb	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3301      	adds	r3, #1
 800b086:	404a      	eors	r2, r1
 800b088:	b2d2      	uxtb	r2, r2
 800b08a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3302      	adds	r3, #2
 800b090:	7819      	ldrb	r1, [r3, #0]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	3302      	adds	r3, #2
 800b096:	781a      	ldrb	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3302      	adds	r3, #2
 800b09c:	404a      	eors	r2, r1
 800b09e:	b2d2      	uxtb	r2, r2
 800b0a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3303      	adds	r3, #3
 800b0a6:	7819      	ldrb	r1, [r3, #0]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	3303      	adds	r3, #3
 800b0ac:	781a      	ldrb	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	3303      	adds	r3, #3
 800b0b2:	404a      	eors	r2, r1
 800b0b4:	b2d2      	uxtb	r2, r2
 800b0b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	7819      	ldrb	r1, [r3, #0]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	781a      	ldrb	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	404a      	eors	r2, r1
 800b0ca:	b2d2      	uxtb	r2, r2
 800b0cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3305      	adds	r3, #5
 800b0d2:	7819      	ldrb	r1, [r3, #0]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	3305      	adds	r3, #5
 800b0d8:	781a      	ldrb	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3305      	adds	r3, #5
 800b0de:	404a      	eors	r2, r1
 800b0e0:	b2d2      	uxtb	r2, r2
 800b0e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3306      	adds	r3, #6
 800b0e8:	7819      	ldrb	r1, [r3, #0]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	3306      	adds	r3, #6
 800b0ee:	781a      	ldrb	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3306      	adds	r3, #6
 800b0f4:	404a      	eors	r2, r1
 800b0f6:	b2d2      	uxtb	r2, r2
 800b0f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3307      	adds	r3, #7
 800b0fe:	7819      	ldrb	r1, [r3, #0]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	3307      	adds	r3, #7
 800b104:	781a      	ldrb	r2, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	3307      	adds	r3, #7
 800b10a:	404a      	eors	r2, r1
 800b10c:	b2d2      	uxtb	r2, r2
 800b10e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3308      	adds	r3, #8
 800b114:	7819      	ldrb	r1, [r3, #0]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	3308      	adds	r3, #8
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3308      	adds	r3, #8
 800b120:	404a      	eors	r2, r1
 800b122:	b2d2      	uxtb	r2, r2
 800b124:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	3309      	adds	r3, #9
 800b12a:	7819      	ldrb	r1, [r3, #0]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	3309      	adds	r3, #9
 800b130:	781a      	ldrb	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	3309      	adds	r3, #9
 800b136:	404a      	eors	r2, r1
 800b138:	b2d2      	uxtb	r2, r2
 800b13a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	330a      	adds	r3, #10
 800b140:	7819      	ldrb	r1, [r3, #0]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	330a      	adds	r3, #10
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	330a      	adds	r3, #10
 800b14c:	404a      	eors	r2, r1
 800b14e:	b2d2      	uxtb	r2, r2
 800b150:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	330b      	adds	r3, #11
 800b156:	7819      	ldrb	r1, [r3, #0]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	330b      	adds	r3, #11
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	330b      	adds	r3, #11
 800b162:	404a      	eors	r2, r1
 800b164:	b2d2      	uxtb	r2, r2
 800b166:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	330c      	adds	r3, #12
 800b16c:	7819      	ldrb	r1, [r3, #0]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	330c      	adds	r3, #12
 800b172:	781a      	ldrb	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	330c      	adds	r3, #12
 800b178:	404a      	eors	r2, r1
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	330d      	adds	r3, #13
 800b182:	7819      	ldrb	r1, [r3, #0]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	330d      	adds	r3, #13
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	330d      	adds	r3, #13
 800b18e:	404a      	eors	r2, r1
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	330e      	adds	r3, #14
 800b198:	7819      	ldrb	r1, [r3, #0]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	330e      	adds	r3, #14
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	330e      	adds	r3, #14
 800b1a4:	404a      	eors	r2, r1
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	330f      	adds	r3, #15
 800b1ae:	7819      	ldrb	r1, [r3, #0]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	330f      	adds	r3, #15
 800b1b4:	781a      	ldrb	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	330f      	adds	r3, #15
 800b1ba:	404a      	eors	r2, r1
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	701a      	strb	r2, [r3, #0]
#endif
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bc80      	pop	{r7}
 800b1c8:	4770      	bx	lr

0800b1ca <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b085      	sub	sp, #20
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	781a      	ldrb	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	4053      	eors	r3, r2
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	7819      	ldrb	r1, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	781a      	ldrb	r2, [r3, #0]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	404a      	eors	r2, r1
 800b1f8:	b2d2      	uxtb	r2, r2
 800b1fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	3302      	adds	r3, #2
 800b200:	7819      	ldrb	r1, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3302      	adds	r3, #2
 800b206:	781a      	ldrb	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3302      	adds	r3, #2
 800b20c:	404a      	eors	r2, r1
 800b20e:	b2d2      	uxtb	r2, r2
 800b210:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	3303      	adds	r3, #3
 800b216:	7819      	ldrb	r1, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	3303      	adds	r3, #3
 800b21c:	781a      	ldrb	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3303      	adds	r3, #3
 800b222:	404a      	eors	r2, r1
 800b224:	b2d2      	uxtb	r2, r2
 800b226:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	3304      	adds	r3, #4
 800b22c:	7819      	ldrb	r1, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	3304      	adds	r3, #4
 800b232:	781a      	ldrb	r2, [r3, #0]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3304      	adds	r3, #4
 800b238:	404a      	eors	r2, r1
 800b23a:	b2d2      	uxtb	r2, r2
 800b23c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	3305      	adds	r3, #5
 800b242:	7819      	ldrb	r1, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3305      	adds	r3, #5
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3305      	adds	r3, #5
 800b24e:	404a      	eors	r2, r1
 800b250:	b2d2      	uxtb	r2, r2
 800b252:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	3306      	adds	r3, #6
 800b258:	7819      	ldrb	r1, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	3306      	adds	r3, #6
 800b25e:	781a      	ldrb	r2, [r3, #0]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	3306      	adds	r3, #6
 800b264:	404a      	eors	r2, r1
 800b266:	b2d2      	uxtb	r2, r2
 800b268:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	3307      	adds	r3, #7
 800b26e:	7819      	ldrb	r1, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3307      	adds	r3, #7
 800b274:	781a      	ldrb	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3307      	adds	r3, #7
 800b27a:	404a      	eors	r2, r1
 800b27c:	b2d2      	uxtb	r2, r2
 800b27e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	3308      	adds	r3, #8
 800b284:	7819      	ldrb	r1, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3308      	adds	r3, #8
 800b28a:	781a      	ldrb	r2, [r3, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3308      	adds	r3, #8
 800b290:	404a      	eors	r2, r1
 800b292:	b2d2      	uxtb	r2, r2
 800b294:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	3309      	adds	r3, #9
 800b29a:	7819      	ldrb	r1, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	3309      	adds	r3, #9
 800b2a0:	781a      	ldrb	r2, [r3, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3309      	adds	r3, #9
 800b2a6:	404a      	eors	r2, r1
 800b2a8:	b2d2      	uxtb	r2, r2
 800b2aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	330a      	adds	r3, #10
 800b2b0:	7819      	ldrb	r1, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	330a      	adds	r3, #10
 800b2b6:	781a      	ldrb	r2, [r3, #0]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	330a      	adds	r3, #10
 800b2bc:	404a      	eors	r2, r1
 800b2be:	b2d2      	uxtb	r2, r2
 800b2c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	330b      	adds	r3, #11
 800b2c6:	7819      	ldrb	r1, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	330b      	adds	r3, #11
 800b2cc:	781a      	ldrb	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	330b      	adds	r3, #11
 800b2d2:	404a      	eors	r2, r1
 800b2d4:	b2d2      	uxtb	r2, r2
 800b2d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	330c      	adds	r3, #12
 800b2dc:	7819      	ldrb	r1, [r3, #0]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	781a      	ldrb	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	330c      	adds	r3, #12
 800b2e8:	404a      	eors	r2, r1
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	330d      	adds	r3, #13
 800b2f2:	7819      	ldrb	r1, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	330d      	adds	r3, #13
 800b2f8:	781a      	ldrb	r2, [r3, #0]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	330d      	adds	r3, #13
 800b2fe:	404a      	eors	r2, r1
 800b300:	b2d2      	uxtb	r2, r2
 800b302:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	330e      	adds	r3, #14
 800b308:	7819      	ldrb	r1, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	330e      	adds	r3, #14
 800b30e:	781a      	ldrb	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	330e      	adds	r3, #14
 800b314:	404a      	eors	r2, r1
 800b316:	b2d2      	uxtb	r2, r2
 800b318:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	330f      	adds	r3, #15
 800b31e:	7819      	ldrb	r1, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	330f      	adds	r3, #15
 800b324:	781a      	ldrb	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	330f      	adds	r3, #15
 800b32a:	404a      	eors	r2, r1
 800b32c:	b2d2      	uxtb	r2, r2
 800b32e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b330:	bf00      	nop
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	bc80      	pop	{r7}
 800b338:	4770      	bx	lr

0800b33a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b082      	sub	sp, #8
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff fe88 	bl	800b05c <xor_block>
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	4b48      	ldr	r3, [pc, #288]	@ (800b484 <shift_sub_rows+0x130>)
 800b364:	5c9a      	ldrb	r2, [r3, r2]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	701a      	strb	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3304      	adds	r3, #4
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	4619      	mov	r1, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3304      	adds	r3, #4
 800b376:	4a43      	ldr	r2, [pc, #268]	@ (800b484 <shift_sub_rows+0x130>)
 800b378:	5c52      	ldrb	r2, [r2, r1]
 800b37a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3308      	adds	r3, #8
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	4619      	mov	r1, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3308      	adds	r3, #8
 800b388:	4a3e      	ldr	r2, [pc, #248]	@ (800b484 <shift_sub_rows+0x130>)
 800b38a:	5c52      	ldrb	r2, [r2, r1]
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	330c      	adds	r3, #12
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	4619      	mov	r1, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	330c      	adds	r3, #12
 800b39a:	4a3a      	ldr	r2, [pc, #232]	@ (800b484 <shift_sub_rows+0x130>)
 800b39c:	5c52      	ldrb	r2, [r2, r1]
 800b39e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	785b      	ldrb	r3, [r3, #1]
 800b3a4:	73fb      	strb	r3, [r7, #15]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3305      	adds	r3, #5
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	4a34      	ldr	r2, [pc, #208]	@ (800b484 <shift_sub_rows+0x130>)
 800b3b4:	5c52      	ldrb	r2, [r2, r1]
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3309      	adds	r3, #9
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3305      	adds	r3, #5
 800b3c4:	4a2f      	ldr	r2, [pc, #188]	@ (800b484 <shift_sub_rows+0x130>)
 800b3c6:	5c52      	ldrb	r2, [r2, r1]
 800b3c8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	330d      	adds	r3, #13
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3309      	adds	r3, #9
 800b3d6:	4a2b      	ldr	r2, [pc, #172]	@ (800b484 <shift_sub_rows+0x130>)
 800b3d8:	5c52      	ldrb	r2, [r2, r1]
 800b3da:	701a      	strb	r2, [r3, #0]
 800b3dc:	7bfa      	ldrb	r2, [r7, #15]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	330d      	adds	r3, #13
 800b3e2:	4928      	ldr	r1, [pc, #160]	@ (800b484 <shift_sub_rows+0x130>)
 800b3e4:	5c8a      	ldrb	r2, [r1, r2]
 800b3e6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	789b      	ldrb	r3, [r3, #2]
 800b3ec:	73fb      	strb	r3, [r7, #15]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	330a      	adds	r3, #10
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3302      	adds	r3, #2
 800b3fa:	4a22      	ldr	r2, [pc, #136]	@ (800b484 <shift_sub_rows+0x130>)
 800b3fc:	5c52      	ldrb	r2, [r2, r1]
 800b3fe:	701a      	strb	r2, [r3, #0]
 800b400:	7bfa      	ldrb	r2, [r7, #15]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	330a      	adds	r3, #10
 800b406:	491f      	ldr	r1, [pc, #124]	@ (800b484 <shift_sub_rows+0x130>)
 800b408:	5c8a      	ldrb	r2, [r1, r2]
 800b40a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	799b      	ldrb	r3, [r3, #6]
 800b410:	73fb      	strb	r3, [r7, #15]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	330e      	adds	r3, #14
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	4619      	mov	r1, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3306      	adds	r3, #6
 800b41e:	4a19      	ldr	r2, [pc, #100]	@ (800b484 <shift_sub_rows+0x130>)
 800b420:	5c52      	ldrb	r2, [r2, r1]
 800b422:	701a      	strb	r2, [r3, #0]
 800b424:	7bfa      	ldrb	r2, [r7, #15]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	330e      	adds	r3, #14
 800b42a:	4916      	ldr	r1, [pc, #88]	@ (800b484 <shift_sub_rows+0x130>)
 800b42c:	5c8a      	ldrb	r2, [r1, r2]
 800b42e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7bdb      	ldrb	r3, [r3, #15]
 800b434:	73fb      	strb	r3, [r7, #15]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	330b      	adds	r3, #11
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	4619      	mov	r1, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	330f      	adds	r3, #15
 800b442:	4a10      	ldr	r2, [pc, #64]	@ (800b484 <shift_sub_rows+0x130>)
 800b444:	5c52      	ldrb	r2, [r2, r1]
 800b446:	701a      	strb	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	3307      	adds	r3, #7
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	4619      	mov	r1, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	330b      	adds	r3, #11
 800b454:	4a0b      	ldr	r2, [pc, #44]	@ (800b484 <shift_sub_rows+0x130>)
 800b456:	5c52      	ldrb	r2, [r2, r1]
 800b458:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	3303      	adds	r3, #3
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	4619      	mov	r1, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3307      	adds	r3, #7
 800b466:	4a07      	ldr	r2, [pc, #28]	@ (800b484 <shift_sub_rows+0x130>)
 800b468:	5c52      	ldrb	r2, [r2, r1]
 800b46a:	701a      	strb	r2, [r3, #0]
 800b46c:	7bfa      	ldrb	r2, [r7, #15]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3303      	adds	r3, #3
 800b472:	4904      	ldr	r1, [pc, #16]	@ (800b484 <shift_sub_rows+0x130>)
 800b474:	5c8a      	ldrb	r2, [r1, r2]
 800b476:	701a      	strb	r2, [r3, #0]
}
 800b478:	bf00      	nop
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bc80      	pop	{r7}
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	0801c1a4 	.word	0x0801c1a4

0800b488 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b490:	f107 0308 	add.w	r3, r7, #8
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff fd6c 	bl	800af74 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b49c:	7a3b      	ldrb	r3, [r7, #8]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	4b9a      	ldr	r3, [pc, #616]	@ (800b70c <mix_sub_columns+0x284>)
 800b4a2:	5c9a      	ldrb	r2, [r3, r2]
 800b4a4:	7b7b      	ldrb	r3, [r7, #13]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4b99      	ldr	r3, [pc, #612]	@ (800b710 <mix_sub_columns+0x288>)
 800b4aa:	5c5b      	ldrb	r3, [r3, r1]
 800b4ac:	4053      	eors	r3, r2
 800b4ae:	b2da      	uxtb	r2, r3
 800b4b0:	7cbb      	ldrb	r3, [r7, #18]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4b97      	ldr	r3, [pc, #604]	@ (800b714 <mix_sub_columns+0x28c>)
 800b4b6:	5c5b      	ldrb	r3, [r3, r1]
 800b4b8:	4053      	eors	r3, r2
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4b94      	ldr	r3, [pc, #592]	@ (800b714 <mix_sub_columns+0x28c>)
 800b4c2:	5c5b      	ldrb	r3, [r3, r1]
 800b4c4:	4053      	eors	r3, r2
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b4cc:	7a3b      	ldrb	r3, [r7, #8]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	4b90      	ldr	r3, [pc, #576]	@ (800b714 <mix_sub_columns+0x28c>)
 800b4d2:	5c9a      	ldrb	r2, [r3, r2]
 800b4d4:	7b7b      	ldrb	r3, [r7, #13]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4b8c      	ldr	r3, [pc, #560]	@ (800b70c <mix_sub_columns+0x284>)
 800b4da:	5c5b      	ldrb	r3, [r3, r1]
 800b4dc:	4053      	eors	r3, r2
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	7cbb      	ldrb	r3, [r7, #18]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4b8a      	ldr	r3, [pc, #552]	@ (800b710 <mix_sub_columns+0x288>)
 800b4e6:	5c5b      	ldrb	r3, [r3, r1]
 800b4e8:	4053      	eors	r3, r2
 800b4ea:	b2d9      	uxtb	r1, r3
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	4b88      	ldr	r3, [pc, #544]	@ (800b714 <mix_sub_columns+0x28c>)
 800b4f2:	5c9a      	ldrb	r2, [r3, r2]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	404a      	eors	r2, r1
 800b4fa:	b2d2      	uxtb	r2, r2
 800b4fc:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b4fe:	7a3b      	ldrb	r3, [r7, #8]
 800b500:	461a      	mov	r2, r3
 800b502:	4b84      	ldr	r3, [pc, #528]	@ (800b714 <mix_sub_columns+0x28c>)
 800b504:	5c9a      	ldrb	r2, [r3, r2]
 800b506:	7b7b      	ldrb	r3, [r7, #13]
 800b508:	4619      	mov	r1, r3
 800b50a:	4b82      	ldr	r3, [pc, #520]	@ (800b714 <mix_sub_columns+0x28c>)
 800b50c:	5c5b      	ldrb	r3, [r3, r1]
 800b50e:	4053      	eors	r3, r2
 800b510:	b2da      	uxtb	r2, r3
 800b512:	7cbb      	ldrb	r3, [r7, #18]
 800b514:	4619      	mov	r1, r3
 800b516:	4b7d      	ldr	r3, [pc, #500]	@ (800b70c <mix_sub_columns+0x284>)
 800b518:	5c5b      	ldrb	r3, [r3, r1]
 800b51a:	4053      	eors	r3, r2
 800b51c:	b2d9      	uxtb	r1, r3
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
 800b520:	461a      	mov	r2, r3
 800b522:	4b7b      	ldr	r3, [pc, #492]	@ (800b710 <mix_sub_columns+0x288>)
 800b524:	5c9a      	ldrb	r2, [r3, r2]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	3302      	adds	r3, #2
 800b52a:	404a      	eors	r2, r1
 800b52c:	b2d2      	uxtb	r2, r2
 800b52e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b530:	7a3b      	ldrb	r3, [r7, #8]
 800b532:	461a      	mov	r2, r3
 800b534:	4b76      	ldr	r3, [pc, #472]	@ (800b710 <mix_sub_columns+0x288>)
 800b536:	5c9a      	ldrb	r2, [r3, r2]
 800b538:	7b7b      	ldrb	r3, [r7, #13]
 800b53a:	4619      	mov	r1, r3
 800b53c:	4b75      	ldr	r3, [pc, #468]	@ (800b714 <mix_sub_columns+0x28c>)
 800b53e:	5c5b      	ldrb	r3, [r3, r1]
 800b540:	4053      	eors	r3, r2
 800b542:	b2da      	uxtb	r2, r3
 800b544:	7cbb      	ldrb	r3, [r7, #18]
 800b546:	4619      	mov	r1, r3
 800b548:	4b72      	ldr	r3, [pc, #456]	@ (800b714 <mix_sub_columns+0x28c>)
 800b54a:	5c5b      	ldrb	r3, [r3, r1]
 800b54c:	4053      	eors	r3, r2
 800b54e:	b2d9      	uxtb	r1, r3
 800b550:	7dfb      	ldrb	r3, [r7, #23]
 800b552:	461a      	mov	r2, r3
 800b554:	4b6d      	ldr	r3, [pc, #436]	@ (800b70c <mix_sub_columns+0x284>)
 800b556:	5c9a      	ldrb	r2, [r3, r2]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3303      	adds	r3, #3
 800b55c:	404a      	eors	r2, r1
 800b55e:	b2d2      	uxtb	r2, r2
 800b560:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b562:	7b3b      	ldrb	r3, [r7, #12]
 800b564:	461a      	mov	r2, r3
 800b566:	4b69      	ldr	r3, [pc, #420]	@ (800b70c <mix_sub_columns+0x284>)
 800b568:	5c9a      	ldrb	r2, [r3, r2]
 800b56a:	7c7b      	ldrb	r3, [r7, #17]
 800b56c:	4619      	mov	r1, r3
 800b56e:	4b68      	ldr	r3, [pc, #416]	@ (800b710 <mix_sub_columns+0x288>)
 800b570:	5c5b      	ldrb	r3, [r3, r1]
 800b572:	4053      	eors	r3, r2
 800b574:	b2da      	uxtb	r2, r3
 800b576:	7dbb      	ldrb	r3, [r7, #22]
 800b578:	4619      	mov	r1, r3
 800b57a:	4b66      	ldr	r3, [pc, #408]	@ (800b714 <mix_sub_columns+0x28c>)
 800b57c:	5c5b      	ldrb	r3, [r3, r1]
 800b57e:	4053      	eors	r3, r2
 800b580:	b2d9      	uxtb	r1, r3
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	461a      	mov	r2, r3
 800b586:	4b63      	ldr	r3, [pc, #396]	@ (800b714 <mix_sub_columns+0x28c>)
 800b588:	5c9a      	ldrb	r2, [r3, r2]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	3304      	adds	r3, #4
 800b58e:	404a      	eors	r2, r1
 800b590:	b2d2      	uxtb	r2, r2
 800b592:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b594:	7b3b      	ldrb	r3, [r7, #12]
 800b596:	461a      	mov	r2, r3
 800b598:	4b5e      	ldr	r3, [pc, #376]	@ (800b714 <mix_sub_columns+0x28c>)
 800b59a:	5c9a      	ldrb	r2, [r3, r2]
 800b59c:	7c7b      	ldrb	r3, [r7, #17]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4b5a      	ldr	r3, [pc, #360]	@ (800b70c <mix_sub_columns+0x284>)
 800b5a2:	5c5b      	ldrb	r3, [r3, r1]
 800b5a4:	4053      	eors	r3, r2
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	7dbb      	ldrb	r3, [r7, #22]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4b58      	ldr	r3, [pc, #352]	@ (800b710 <mix_sub_columns+0x288>)
 800b5ae:	5c5b      	ldrb	r3, [r3, r1]
 800b5b0:	4053      	eors	r3, r2
 800b5b2:	b2d9      	uxtb	r1, r3
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	4b56      	ldr	r3, [pc, #344]	@ (800b714 <mix_sub_columns+0x28c>)
 800b5ba:	5c9a      	ldrb	r2, [r3, r2]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3305      	adds	r3, #5
 800b5c0:	404a      	eors	r2, r1
 800b5c2:	b2d2      	uxtb	r2, r2
 800b5c4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b5c6:	7b3b      	ldrb	r3, [r7, #12]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4b52      	ldr	r3, [pc, #328]	@ (800b714 <mix_sub_columns+0x28c>)
 800b5cc:	5c9a      	ldrb	r2, [r3, r2]
 800b5ce:	7c7b      	ldrb	r3, [r7, #17]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	4b50      	ldr	r3, [pc, #320]	@ (800b714 <mix_sub_columns+0x28c>)
 800b5d4:	5c5b      	ldrb	r3, [r3, r1]
 800b5d6:	4053      	eors	r3, r2
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	7dbb      	ldrb	r3, [r7, #22]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4b4b      	ldr	r3, [pc, #300]	@ (800b70c <mix_sub_columns+0x284>)
 800b5e0:	5c5b      	ldrb	r3, [r3, r1]
 800b5e2:	4053      	eors	r3, r2
 800b5e4:	b2d9      	uxtb	r1, r3
 800b5e6:	7afb      	ldrb	r3, [r7, #11]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4b49      	ldr	r3, [pc, #292]	@ (800b710 <mix_sub_columns+0x288>)
 800b5ec:	5c9a      	ldrb	r2, [r3, r2]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3306      	adds	r3, #6
 800b5f2:	404a      	eors	r2, r1
 800b5f4:	b2d2      	uxtb	r2, r2
 800b5f6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b5f8:	7b3b      	ldrb	r3, [r7, #12]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	4b44      	ldr	r3, [pc, #272]	@ (800b710 <mix_sub_columns+0x288>)
 800b5fe:	5c9a      	ldrb	r2, [r3, r2]
 800b600:	7c7b      	ldrb	r3, [r7, #17]
 800b602:	4619      	mov	r1, r3
 800b604:	4b43      	ldr	r3, [pc, #268]	@ (800b714 <mix_sub_columns+0x28c>)
 800b606:	5c5b      	ldrb	r3, [r3, r1]
 800b608:	4053      	eors	r3, r2
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	7dbb      	ldrb	r3, [r7, #22]
 800b60e:	4619      	mov	r1, r3
 800b610:	4b40      	ldr	r3, [pc, #256]	@ (800b714 <mix_sub_columns+0x28c>)
 800b612:	5c5b      	ldrb	r3, [r3, r1]
 800b614:	4053      	eors	r3, r2
 800b616:	b2d9      	uxtb	r1, r3
 800b618:	7afb      	ldrb	r3, [r7, #11]
 800b61a:	461a      	mov	r2, r3
 800b61c:	4b3b      	ldr	r3, [pc, #236]	@ (800b70c <mix_sub_columns+0x284>)
 800b61e:	5c9a      	ldrb	r2, [r3, r2]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3307      	adds	r3, #7
 800b624:	404a      	eors	r2, r1
 800b626:	b2d2      	uxtb	r2, r2
 800b628:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b62a:	7c3b      	ldrb	r3, [r7, #16]
 800b62c:	461a      	mov	r2, r3
 800b62e:	4b37      	ldr	r3, [pc, #220]	@ (800b70c <mix_sub_columns+0x284>)
 800b630:	5c9a      	ldrb	r2, [r3, r2]
 800b632:	7d7b      	ldrb	r3, [r7, #21]
 800b634:	4619      	mov	r1, r3
 800b636:	4b36      	ldr	r3, [pc, #216]	@ (800b710 <mix_sub_columns+0x288>)
 800b638:	5c5b      	ldrb	r3, [r3, r1]
 800b63a:	4053      	eors	r3, r2
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	7abb      	ldrb	r3, [r7, #10]
 800b640:	4619      	mov	r1, r3
 800b642:	4b34      	ldr	r3, [pc, #208]	@ (800b714 <mix_sub_columns+0x28c>)
 800b644:	5c5b      	ldrb	r3, [r3, r1]
 800b646:	4053      	eors	r3, r2
 800b648:	b2d9      	uxtb	r1, r3
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	461a      	mov	r2, r3
 800b64e:	4b31      	ldr	r3, [pc, #196]	@ (800b714 <mix_sub_columns+0x28c>)
 800b650:	5c9a      	ldrb	r2, [r3, r2]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	3308      	adds	r3, #8
 800b656:	404a      	eors	r2, r1
 800b658:	b2d2      	uxtb	r2, r2
 800b65a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b65c:	7c3b      	ldrb	r3, [r7, #16]
 800b65e:	461a      	mov	r2, r3
 800b660:	4b2c      	ldr	r3, [pc, #176]	@ (800b714 <mix_sub_columns+0x28c>)
 800b662:	5c9a      	ldrb	r2, [r3, r2]
 800b664:	7d7b      	ldrb	r3, [r7, #21]
 800b666:	4619      	mov	r1, r3
 800b668:	4b28      	ldr	r3, [pc, #160]	@ (800b70c <mix_sub_columns+0x284>)
 800b66a:	5c5b      	ldrb	r3, [r3, r1]
 800b66c:	4053      	eors	r3, r2
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	7abb      	ldrb	r3, [r7, #10]
 800b672:	4619      	mov	r1, r3
 800b674:	4b26      	ldr	r3, [pc, #152]	@ (800b710 <mix_sub_columns+0x288>)
 800b676:	5c5b      	ldrb	r3, [r3, r1]
 800b678:	4053      	eors	r3, r2
 800b67a:	b2d9      	uxtb	r1, r3
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	461a      	mov	r2, r3
 800b680:	4b24      	ldr	r3, [pc, #144]	@ (800b714 <mix_sub_columns+0x28c>)
 800b682:	5c9a      	ldrb	r2, [r3, r2]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3309      	adds	r3, #9
 800b688:	404a      	eors	r2, r1
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b68e:	7c3b      	ldrb	r3, [r7, #16]
 800b690:	461a      	mov	r2, r3
 800b692:	4b20      	ldr	r3, [pc, #128]	@ (800b714 <mix_sub_columns+0x28c>)
 800b694:	5c9a      	ldrb	r2, [r3, r2]
 800b696:	7d7b      	ldrb	r3, [r7, #21]
 800b698:	4619      	mov	r1, r3
 800b69a:	4b1e      	ldr	r3, [pc, #120]	@ (800b714 <mix_sub_columns+0x28c>)
 800b69c:	5c5b      	ldrb	r3, [r3, r1]
 800b69e:	4053      	eors	r3, r2
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	7abb      	ldrb	r3, [r7, #10]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4b19      	ldr	r3, [pc, #100]	@ (800b70c <mix_sub_columns+0x284>)
 800b6a8:	5c5b      	ldrb	r3, [r3, r1]
 800b6aa:	4053      	eors	r3, r2
 800b6ac:	b2d9      	uxtb	r1, r3
 800b6ae:	7bfb      	ldrb	r3, [r7, #15]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	4b17      	ldr	r3, [pc, #92]	@ (800b710 <mix_sub_columns+0x288>)
 800b6b4:	5c9a      	ldrb	r2, [r3, r2]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	330a      	adds	r3, #10
 800b6ba:	404a      	eors	r2, r1
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b6c0:	7c3b      	ldrb	r3, [r7, #16]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4b12      	ldr	r3, [pc, #72]	@ (800b710 <mix_sub_columns+0x288>)
 800b6c6:	5c9a      	ldrb	r2, [r3, r2]
 800b6c8:	7d7b      	ldrb	r3, [r7, #21]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4b11      	ldr	r3, [pc, #68]	@ (800b714 <mix_sub_columns+0x28c>)
 800b6ce:	5c5b      	ldrb	r3, [r3, r1]
 800b6d0:	4053      	eors	r3, r2
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	7abb      	ldrb	r3, [r7, #10]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4b0e      	ldr	r3, [pc, #56]	@ (800b714 <mix_sub_columns+0x28c>)
 800b6da:	5c5b      	ldrb	r3, [r3, r1]
 800b6dc:	4053      	eors	r3, r2
 800b6de:	b2d9      	uxtb	r1, r3
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	4b09      	ldr	r3, [pc, #36]	@ (800b70c <mix_sub_columns+0x284>)
 800b6e6:	5c9a      	ldrb	r2, [r3, r2]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	330b      	adds	r3, #11
 800b6ec:	404a      	eors	r2, r1
 800b6ee:	b2d2      	uxtb	r2, r2
 800b6f0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b6f2:	7d3b      	ldrb	r3, [r7, #20]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	4b05      	ldr	r3, [pc, #20]	@ (800b70c <mix_sub_columns+0x284>)
 800b6f8:	5c9a      	ldrb	r2, [r3, r2]
 800b6fa:	7a7b      	ldrb	r3, [r7, #9]
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4b04      	ldr	r3, [pc, #16]	@ (800b710 <mix_sub_columns+0x288>)
 800b700:	5c5b      	ldrb	r3, [r3, r1]
 800b702:	4053      	eors	r3, r2
 800b704:	b2da      	uxtb	r2, r3
 800b706:	7bbb      	ldrb	r3, [r7, #14]
 800b708:	4619      	mov	r1, r3
 800b70a:	e005      	b.n	800b718 <mix_sub_columns+0x290>
 800b70c:	0801c2a4 	.word	0x0801c2a4
 800b710:	0801c3a4 	.word	0x0801c3a4
 800b714:	0801c1a4 	.word	0x0801c1a4
 800b718:	4b2d      	ldr	r3, [pc, #180]	@ (800b7d0 <mix_sub_columns+0x348>)
 800b71a:	5c5b      	ldrb	r3, [r3, r1]
 800b71c:	4053      	eors	r3, r2
 800b71e:	b2d9      	uxtb	r1, r3
 800b720:	7cfb      	ldrb	r3, [r7, #19]
 800b722:	461a      	mov	r2, r3
 800b724:	4b2a      	ldr	r3, [pc, #168]	@ (800b7d0 <mix_sub_columns+0x348>)
 800b726:	5c9a      	ldrb	r2, [r3, r2]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	330c      	adds	r3, #12
 800b72c:	404a      	eors	r2, r1
 800b72e:	b2d2      	uxtb	r2, r2
 800b730:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b732:	7d3b      	ldrb	r3, [r7, #20]
 800b734:	461a      	mov	r2, r3
 800b736:	4b26      	ldr	r3, [pc, #152]	@ (800b7d0 <mix_sub_columns+0x348>)
 800b738:	5c9a      	ldrb	r2, [r3, r2]
 800b73a:	7a7b      	ldrb	r3, [r7, #9]
 800b73c:	4619      	mov	r1, r3
 800b73e:	4b25      	ldr	r3, [pc, #148]	@ (800b7d4 <mix_sub_columns+0x34c>)
 800b740:	5c5b      	ldrb	r3, [r3, r1]
 800b742:	4053      	eors	r3, r2
 800b744:	b2da      	uxtb	r2, r3
 800b746:	7bbb      	ldrb	r3, [r7, #14]
 800b748:	4619      	mov	r1, r3
 800b74a:	4b23      	ldr	r3, [pc, #140]	@ (800b7d8 <mix_sub_columns+0x350>)
 800b74c:	5c5b      	ldrb	r3, [r3, r1]
 800b74e:	4053      	eors	r3, r2
 800b750:	b2d9      	uxtb	r1, r3
 800b752:	7cfb      	ldrb	r3, [r7, #19]
 800b754:	461a      	mov	r2, r3
 800b756:	4b1e      	ldr	r3, [pc, #120]	@ (800b7d0 <mix_sub_columns+0x348>)
 800b758:	5c9a      	ldrb	r2, [r3, r2]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	330d      	adds	r3, #13
 800b75e:	404a      	eors	r2, r1
 800b760:	b2d2      	uxtb	r2, r2
 800b762:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b764:	7d3b      	ldrb	r3, [r7, #20]
 800b766:	461a      	mov	r2, r3
 800b768:	4b19      	ldr	r3, [pc, #100]	@ (800b7d0 <mix_sub_columns+0x348>)
 800b76a:	5c9a      	ldrb	r2, [r3, r2]
 800b76c:	7a7b      	ldrb	r3, [r7, #9]
 800b76e:	4619      	mov	r1, r3
 800b770:	4b17      	ldr	r3, [pc, #92]	@ (800b7d0 <mix_sub_columns+0x348>)
 800b772:	5c5b      	ldrb	r3, [r3, r1]
 800b774:	4053      	eors	r3, r2
 800b776:	b2da      	uxtb	r2, r3
 800b778:	7bbb      	ldrb	r3, [r7, #14]
 800b77a:	4619      	mov	r1, r3
 800b77c:	4b15      	ldr	r3, [pc, #84]	@ (800b7d4 <mix_sub_columns+0x34c>)
 800b77e:	5c5b      	ldrb	r3, [r3, r1]
 800b780:	4053      	eors	r3, r2
 800b782:	b2d9      	uxtb	r1, r3
 800b784:	7cfb      	ldrb	r3, [r7, #19]
 800b786:	461a      	mov	r2, r3
 800b788:	4b13      	ldr	r3, [pc, #76]	@ (800b7d8 <mix_sub_columns+0x350>)
 800b78a:	5c9a      	ldrb	r2, [r3, r2]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	330e      	adds	r3, #14
 800b790:	404a      	eors	r2, r1
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b796:	7d3b      	ldrb	r3, [r7, #20]
 800b798:	461a      	mov	r2, r3
 800b79a:	4b0f      	ldr	r3, [pc, #60]	@ (800b7d8 <mix_sub_columns+0x350>)
 800b79c:	5c9a      	ldrb	r2, [r3, r2]
 800b79e:	7a7b      	ldrb	r3, [r7, #9]
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b7d0 <mix_sub_columns+0x348>)
 800b7a4:	5c5b      	ldrb	r3, [r3, r1]
 800b7a6:	4053      	eors	r3, r2
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4b08      	ldr	r3, [pc, #32]	@ (800b7d0 <mix_sub_columns+0x348>)
 800b7b0:	5c5b      	ldrb	r3, [r3, r1]
 800b7b2:	4053      	eors	r3, r2
 800b7b4:	b2d9      	uxtb	r1, r3
 800b7b6:	7cfb      	ldrb	r3, [r7, #19]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	4b06      	ldr	r3, [pc, #24]	@ (800b7d4 <mix_sub_columns+0x34c>)
 800b7bc:	5c9a      	ldrb	r2, [r3, r2]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	330f      	adds	r3, #15
 800b7c2:	404a      	eors	r2, r1
 800b7c4:	b2d2      	uxtb	r2, r2
 800b7c6:	701a      	strb	r2, [r3, #0]
  }
 800b7c8:	bf00      	nop
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	0801c1a4 	.word	0x0801c1a4
 800b7d4:	0801c2a4 	.word	0x0801c2a4
 800b7d8:	0801c3a4 	.word	0x0801c3a4

0800b7dc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b7ea:	7afb      	ldrb	r3, [r7, #11]
 800b7ec:	3b10      	subs	r3, #16
 800b7ee:	2b10      	cmp	r3, #16
 800b7f0:	bf8c      	ite	hi
 800b7f2:	2201      	movhi	r2, #1
 800b7f4:	2200      	movls	r2, #0
 800b7f6:	b2d2      	uxtb	r2, r2
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d10b      	bne.n	800b814 <lorawan_aes_set_key+0x38>
 800b7fc:	4a64      	ldr	r2, [pc, #400]	@ (800b990 <lorawan_aes_set_key+0x1b4>)
 800b7fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	bf14      	ite	ne
 800b80a:	2301      	movne	r3, #1
 800b80c:	2300      	moveq	r3, #0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b00      	cmp	r3, #0
 800b812:	d105      	bne.n	800b820 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b81c:	23ff      	movs	r3, #255	@ 0xff
 800b81e:	e0b3      	b.n	800b988 <lorawan_aes_set_key+0x1ac>
        break;
 800b820:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	7afa      	ldrb	r2, [r7, #11]
 800b826:	68f9      	ldr	r1, [r7, #12]
 800b828:	4618      	mov	r0, r3
 800b82a:	f7ff fbfc 	bl	800b026 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b82e:	7afb      	ldrb	r3, [r7, #11]
 800b830:	331c      	adds	r3, #28
 800b832:	b2db      	uxtb	r3, r3
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b838:	7c7b      	ldrb	r3, [r7, #17]
 800b83a:	091b      	lsrs	r3, r3, #4
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	3b01      	subs	r3, #1
 800b840:	b2da      	uxtb	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b848:	7afb      	ldrb	r3, [r7, #11]
 800b84a:	75fb      	strb	r3, [r7, #23]
 800b84c:	2301      	movs	r3, #1
 800b84e:	75bb      	strb	r3, [r7, #22]
 800b850:	e094      	b.n	800b97c <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b852:	7dfb      	ldrb	r3, [r7, #23]
 800b854:	3b04      	subs	r3, #4
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	5cd3      	ldrb	r3, [r2, r3]
 800b85a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b85c:	7dfb      	ldrb	r3, [r7, #23]
 800b85e:	3b03      	subs	r3, #3
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	5cd3      	ldrb	r3, [r2, r3]
 800b864:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	3b02      	subs	r3, #2
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	5cd3      	ldrb	r3, [r2, r3]
 800b86e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b870:	7dfb      	ldrb	r3, [r7, #23]
 800b872:	3b01      	subs	r3, #1
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	5cd3      	ldrb	r3, [r2, r3]
 800b878:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b87a:	7dfb      	ldrb	r3, [r7, #23]
 800b87c:	7afa      	ldrb	r2, [r7, #11]
 800b87e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b882:	fb01 f202 	mul.w	r2, r1, r2
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d128      	bne.n	800b8e0 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800b88e:	7d7b      	ldrb	r3, [r7, #21]
 800b890:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b892:	7d3b      	ldrb	r3, [r7, #20]
 800b894:	4a3f      	ldr	r2, [pc, #252]	@ (800b994 <lorawan_aes_set_key+0x1b8>)
 800b896:	5cd2      	ldrb	r2, [r2, r3]
 800b898:	7dbb      	ldrb	r3, [r7, #22]
 800b89a:	4053      	eors	r3, r2
 800b89c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b89e:	7cfb      	ldrb	r3, [r7, #19]
 800b8a0:	4a3c      	ldr	r2, [pc, #240]	@ (800b994 <lorawan_aes_set_key+0x1b8>)
 800b8a2:	5cd3      	ldrb	r3, [r2, r3]
 800b8a4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b8a6:	7cbb      	ldrb	r3, [r7, #18]
 800b8a8:	4a3a      	ldr	r2, [pc, #232]	@ (800b994 <lorawan_aes_set_key+0x1b8>)
 800b8aa:	5cd3      	ldrb	r3, [r2, r3]
 800b8ac:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b8ae:	7c3b      	ldrb	r3, [r7, #16]
 800b8b0:	4a38      	ldr	r2, [pc, #224]	@ (800b994 <lorawan_aes_set_key+0x1b8>)
 800b8b2:	5cd3      	ldrb	r3, [r2, r3]
 800b8b4:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b8b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800b8ba:	005b      	lsls	r3, r3, #1
 800b8bc:	b25a      	sxtb	r2, r3
 800b8be:	7dbb      	ldrb	r3, [r7, #22]
 800b8c0:	09db      	lsrs	r3, r3, #7
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	b25b      	sxtb	r3, r3
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	0049      	lsls	r1, r1, #1
 800b8ca:	440b      	add	r3, r1
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	00c8      	lsls	r0, r1, #3
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	440b      	add	r3, r1
 800b8d6:	b25b      	sxtb	r3, r3
 800b8d8:	4053      	eors	r3, r2
 800b8da:	b25b      	sxtb	r3, r3
 800b8dc:	75bb      	strb	r3, [r7, #22]
 800b8de:	e01c      	b.n	800b91a <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b8e0:	7afb      	ldrb	r3, [r7, #11]
 800b8e2:	2b18      	cmp	r3, #24
 800b8e4:	d919      	bls.n	800b91a <lorawan_aes_set_key+0x13e>
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	7afa      	ldrb	r2, [r7, #11]
 800b8ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8ee:	fb01 f202 	mul.w	r2, r1, r2
 800b8f2:	1a9b      	subs	r3, r3, r2
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b10      	cmp	r3, #16
 800b8f8:	d10f      	bne.n	800b91a <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800b8fa:	7d7b      	ldrb	r3, [r7, #21]
 800b8fc:	4a25      	ldr	r2, [pc, #148]	@ (800b994 <lorawan_aes_set_key+0x1b8>)
 800b8fe:	5cd3      	ldrb	r3, [r2, r3]
 800b900:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b902:	7d3b      	ldrb	r3, [r7, #20]
 800b904:	4a23      	ldr	r2, [pc, #140]	@ (800b994 <lorawan_aes_set_key+0x1b8>)
 800b906:	5cd3      	ldrb	r3, [r2, r3]
 800b908:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b90a:	7cfb      	ldrb	r3, [r7, #19]
 800b90c:	4a21      	ldr	r2, [pc, #132]	@ (800b994 <lorawan_aes_set_key+0x1b8>)
 800b90e:	5cd3      	ldrb	r3, [r2, r3]
 800b910:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b912:	7cbb      	ldrb	r3, [r7, #18]
 800b914:	4a1f      	ldr	r2, [pc, #124]	@ (800b994 <lorawan_aes_set_key+0x1b8>)
 800b916:	5cd3      	ldrb	r3, [r2, r3]
 800b918:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b91a:	7dfa      	ldrb	r2, [r7, #23]
 800b91c:	7afb      	ldrb	r3, [r7, #11]
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b922:	7c3b      	ldrb	r3, [r7, #16]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	5cd1      	ldrb	r1, [r2, r3]
 800b928:	7dfb      	ldrb	r3, [r7, #23]
 800b92a:	7d7a      	ldrb	r2, [r7, #21]
 800b92c:	404a      	eors	r2, r1
 800b92e:	b2d1      	uxtb	r1, r2
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b934:	7c3b      	ldrb	r3, [r7, #16]
 800b936:	3301      	adds	r3, #1
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	5cd1      	ldrb	r1, [r2, r3]
 800b93c:	7dfb      	ldrb	r3, [r7, #23]
 800b93e:	3301      	adds	r3, #1
 800b940:	7d3a      	ldrb	r2, [r7, #20]
 800b942:	404a      	eors	r2, r1
 800b944:	b2d1      	uxtb	r1, r2
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b94a:	7c3b      	ldrb	r3, [r7, #16]
 800b94c:	3302      	adds	r3, #2
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	5cd1      	ldrb	r1, [r2, r3]
 800b952:	7dfb      	ldrb	r3, [r7, #23]
 800b954:	3302      	adds	r3, #2
 800b956:	7cfa      	ldrb	r2, [r7, #19]
 800b958:	404a      	eors	r2, r1
 800b95a:	b2d1      	uxtb	r1, r2
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b960:	7c3b      	ldrb	r3, [r7, #16]
 800b962:	3303      	adds	r3, #3
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	5cd1      	ldrb	r1, [r2, r3]
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	3303      	adds	r3, #3
 800b96c:	7cba      	ldrb	r2, [r7, #18]
 800b96e:	404a      	eors	r2, r1
 800b970:	b2d1      	uxtb	r1, r2
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b976:	7dfb      	ldrb	r3, [r7, #23]
 800b978:	3304      	adds	r3, #4
 800b97a:	75fb      	strb	r3, [r7, #23]
 800b97c:	7dfa      	ldrb	r2, [r7, #23]
 800b97e:	7c7b      	ldrb	r3, [r7, #17]
 800b980:	429a      	cmp	r2, r3
 800b982:	f4ff af66 	bcc.w	800b852 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3718      	adds	r7, #24
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	00010101 	.word	0x00010101
 800b994:	0801c1a4 	.word	0x0801c1a4

0800b998 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b08a      	sub	sp, #40	@ 0x28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d038      	beq.n	800ba20 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	f107 0314 	add.w	r3, r7, #20
 800b9b4:	68f9      	ldr	r1, [r7, #12]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff fc07 	bl	800b1ca <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b9c2:	e014      	b.n	800b9ee <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b9c4:	f107 0314 	add.w	r3, r7, #20
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fd5d 	bl	800b488 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b9d4:	0112      	lsls	r2, r2, #4
 800b9d6:	441a      	add	r2, r3
 800b9d8:	f107 0314 	add.w	r3, r7, #20
 800b9dc:	4611      	mov	r1, r2
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7ff fcab 	bl	800b33a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b9f4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d3e3      	bcc.n	800b9c4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b9fc:	f107 0314 	add.w	r3, r7, #20
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7ff fca7 	bl	800b354 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ba0c:	0112      	lsls	r2, r2, #4
 800ba0e:	441a      	add	r2, r3
 800ba10:	f107 0314 	add.w	r3, r7, #20
 800ba14:	4619      	mov	r1, r3
 800ba16:	68b8      	ldr	r0, [r7, #8]
 800ba18:	f7ff fbd7 	bl	800b1ca <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e000      	b.n	800ba22 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ba20:	23ff      	movs	r3, #255	@ 0xff
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3728      	adds	r7, #40	@ 0x28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	4603      	mov	r3, r0
 800ba34:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ba36:	f107 0208 	add.w	r2, r7, #8
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	4611      	mov	r1, r2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f95e 	bl	800bd00 <SecureElementGetKeyByID>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d115      	bne.n	800ba76 <PrintKey+0x4a>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]
 800ba4e:	e00d      	b.n	800ba6c <PrintKey+0x40>
        {
            if( KeyLabel[i].keyID == keyID )
 800ba50:	7bfa      	ldrb	r2, [r7, #15]
 800ba52:	490a      	ldr	r1, [pc, #40]	@ (800ba7c <PrintKey+0x50>)
 800ba54:	4613      	mov	r3, r2
 800ba56:	005b      	lsls	r3, r3, #1
 800ba58:	4413      	add	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	440b      	add	r3, r1
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	79fa      	ldrb	r2, [r7, #7]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d006      	beq.n	800ba74 <PrintKey+0x48>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	73fb      	strb	r3, [r7, #15]
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
 800ba6e:	2b0a      	cmp	r3, #10
 800ba70:	d9ee      	bls.n	800ba50 <PrintKey+0x24>
 800ba72:	e000      	b.n	800ba76 <PrintKey+0x4a>
                MW_LOG( TS_OFF, VLEVEL_M,
                        "###### %s %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
                        KeyLabel[i].keyStr,
                        HEX16( extractable_key ) );
#endif /* LORAWAN_KMS */
                return;
 800ba74:	bf00      	nop
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	0801c4a4 	.word	0x0801c4a4

0800ba80 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b088      	sub	sp, #32
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	4603      	mov	r3, r0
 800ba88:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800ba8e:	f107 0310 	add.w	r3, r7, #16
 800ba92:	4618      	mov	r0, r3
 800ba94:	f000 fb86 	bl	800c1a4 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );

    SecureElementGetJoinEui( joinEui );
 800ba98:	f107 0318 	add.w	r3, r7, #24
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f000 fbb1 	bl	800c204 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );

    SecureElementGetDevAddr( mode, &devAddr );
 800baa2:	f107 020c 	add.w	r2, r7, #12
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 fbdc 	bl	800c268 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800bab0:	bf00      	nop
 800bab2:	3720      	adds	r7, #32
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bac4:	2300      	movs	r3, #0
 800bac6:	73fb      	strb	r3, [r7, #15]
 800bac8:	e01a      	b.n	800bb00 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800baca:	4b12      	ldr	r3, [pc, #72]	@ (800bb14 <GetKeyByID+0x5c>)
 800bacc:	6819      	ldr	r1, [r3, #0]
 800bace:	7bfa      	ldrb	r2, [r7, #15]
 800bad0:	4613      	mov	r3, r2
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	4413      	add	r3, r2
 800bad6:	440b      	add	r3, r1
 800bad8:	3318      	adds	r3, #24
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	79fa      	ldrb	r2, [r7, #7]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d10b      	bne.n	800bafa <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bae2:	4b0c      	ldr	r3, [pc, #48]	@ (800bb14 <GetKeyByID+0x5c>)
 800bae4:	6819      	ldr	r1, [r3, #0]
 800bae6:	7bfa      	ldrb	r2, [r7, #15]
 800bae8:	4613      	mov	r3, r2
 800baea:	011b      	lsls	r3, r3, #4
 800baec:	4413      	add	r3, r2
 800baee:	3318      	adds	r3, #24
 800baf0:	18ca      	adds	r2, r1, r3
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800baf6:	2300      	movs	r3, #0
 800baf8:	e006      	b.n	800bb08 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
 800bafc:	3301      	adds	r3, #1
 800bafe:	73fb      	strb	r3, [r7, #15]
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
 800bb02:	2b0a      	cmp	r3, #10
 800bb04:	d9e1      	bls.n	800baca <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb06:	2303      	movs	r3, #3
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bc80      	pop	{r7}
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	200005c8 	.word	0x200005c8

0800bb18 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800bb18:	b590      	push	{r4, r7, lr}
 800bb1a:	b0d1      	sub	sp, #324	@ 0x144
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800bb22:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800bb26:	6020      	str	r0, [r4, #0]
 800bb28:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800bb2c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800bb30:	6001      	str	r1, [r0, #0]
 800bb32:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800bb36:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800bb3a:	600a      	str	r2, [r1, #0]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb42:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800bb46:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bb48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb4c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d003      	beq.n	800bb5e <ComputeCmac+0x46>
 800bb56:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb5e:	2302      	movs	r3, #2
 800bb60:	e05d      	b.n	800bc1e <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bb62:	f107 0314 	add.w	r3, r7, #20
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe ffb4 	bl	800aad4 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bb6c:	f107 0210 	add.w	r2, r7, #16
 800bb70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb74:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7ff ff9b 	bl	800bab8 <GetKeyByID>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bb88:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d144      	bne.n	800bc1a <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bb90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb94:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	f107 0314 	add.w	r3, r7, #20
 800bba0:	4611      	mov	r1, r2
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fe ffaf 	bl	800ab06 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bba8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d009      	beq.n	800bbca <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800bbb6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bbbe:	f107 0014 	add.w	r0, r7, #20
 800bbc2:	2210      	movs	r2, #16
 800bbc4:	6819      	ldr	r1, [r3, #0]
 800bbc6:	f7fe ffad 	bl	800ab24 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bbca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbce:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800bbd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbd6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bbda:	f107 0014 	add.w	r0, r7, #20
 800bbde:	6812      	ldr	r2, [r2, #0]
 800bbe0:	6819      	ldr	r1, [r3, #0]
 800bbe2:	f7fe ff9f 	bl	800ab24 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bbe6:	f107 0214 	add.w	r2, r7, #20
 800bbea:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800bbee:	4611      	mov	r1, r2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff f859 	bl	800aca8 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800bbf6:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	431a      	orrs	r2, r3
 800bc04:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800bc08:	041b      	lsls	r3, r3, #16
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800bc10:	061b      	lsls	r3, r3, #24
 800bc12:	431a      	orrs	r2, r3
 800bc14:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bc18:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bc1a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd90      	pop	{r4, r7, pc}

0800bc28 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc36:	2302      	movs	r3, #2
 800bc38:	e00a      	b.n	800bc50 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800bc3a:	4a07      	ldr	r2, [pc, #28]	@ (800bc58 <SecureElementInit+0x30>)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800bc40:	4b05      	ldr	r3, [pc, #20]	@ (800bc58 <SecureElementInit+0x30>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	22d8      	movs	r2, #216	@ 0xd8
 800bc46:	4905      	ldr	r1, [pc, #20]	@ (800bc5c <SecureElementInit+0x34>)
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f00b fadc 	bl	8017206 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	200005c8 	.word	0x200005c8
 800bc5c:	0801c6c0 	.word	0x0801c6c0

0800bc60 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800bc6e:	f107 030c 	add.w	r3, r7, #12
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 fa96 	bl	800c1a4 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800bc78:	f107 0308 	add.w	r3, r7, #8
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	2001      	movs	r0, #1
 800bc80:	f000 faf2 	bl	800c268 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d024      	beq.n	800bcd4 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75bb      	strb	r3, [r7, #22]
 800bc92:	e00c      	b.n	800bcae <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800bc94:	7dbb      	ldrb	r3, [r7, #22]
 800bc96:	3318      	adds	r3, #24
 800bc98:	443b      	add	r3, r7
 800bc9a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d002      	beq.n	800bca8 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800bca2:	2301      	movs	r3, #1
 800bca4:	75fb      	strb	r3, [r7, #23]
                break;
 800bca6:	e005      	b.n	800bcb4 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800bca8:	7dbb      	ldrb	r3, [r7, #22]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	75bb      	strb	r3, [r7, #22]
 800bcae:	7dbb      	ldrb	r3, [r7, #22]
 800bcb0:	2b07      	cmp	r3, #7
 800bcb2:	d9ef      	bls.n	800bc94 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	f083 0301 	eor.w	r3, r3, #1
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d009      	beq.n	800bcd4 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800bcc0:	f107 020c 	add.w	r2, r7, #12
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800bcca:	f107 030c 	add.w	r3, r7, #12
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 fa50 	bl	800c174 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00c      	beq.n	800bcf4 <SecureElementInitMcuID+0x94>
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d109      	bne.n	800bcf4 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800bce0:	f107 0208 	add.w	r2, r7, #8
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	4610      	mov	r0, r2
 800bce8:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	4619      	mov	r1, r3
 800bcee:	2001      	movs	r0, #1
 800bcf0:	f000 faa0 	bl	800c234 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4603      	mov	r3, r0
 800bd08:	6039      	str	r1, [r7, #0]
 800bd0a:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	73fb      	strb	r3, [r7, #15]
 800bd10:	e01a      	b.n	800bd48 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bd12:	4b12      	ldr	r3, [pc, #72]	@ (800bd5c <SecureElementGetKeyByID+0x5c>)
 800bd14:	6819      	ldr	r1, [r3, #0]
 800bd16:	7bfa      	ldrb	r2, [r7, #15]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	011b      	lsls	r3, r3, #4
 800bd1c:	4413      	add	r3, r2
 800bd1e:	440b      	add	r3, r1
 800bd20:	3318      	adds	r3, #24
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	79fa      	ldrb	r2, [r7, #7]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d10b      	bne.n	800bd42 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bd2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd5c <SecureElementGetKeyByID+0x5c>)
 800bd2c:	6819      	ldr	r1, [r3, #0]
 800bd2e:	7bfa      	ldrb	r2, [r7, #15]
 800bd30:	4613      	mov	r3, r2
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	4413      	add	r3, r2
 800bd36:	3318      	adds	r3, #24
 800bd38:	18ca      	adds	r2, r1, r3
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e006      	b.n	800bd50 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
 800bd44:	3301      	adds	r3, #1
 800bd46:	73fb      	strb	r3, [r7, #15]
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	2b0a      	cmp	r3, #10
 800bd4c:	d9e1      	bls.n	800bd12 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bd4e:	2303      	movs	r3, #3
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bc80      	pop	{r7}
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	200005c8 	.word	0x200005c8

0800bd60 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800bd64:	2000      	movs	r0, #0
 800bd66:	f7ff fe61 	bl	800ba2c <PrintKey>
    PrintKey( NWK_KEY );
 800bd6a:	2001      	movs	r0, #1
 800bd6c:	f7ff fe5e 	bl	800ba2c <PrintKey>
    PrintKey( APP_S_KEY );
 800bd70:	2009      	movs	r0, #9
 800bd72:	f7ff fe5b 	bl	800ba2c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800bd76:	2008      	movs	r0, #8
 800bd78:	f7ff fe58 	bl	800ba2c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	f7ff fe7f 	bl	800ba80 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	4603      	mov	r3, r0
 800bd90:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800bd92:	200b      	movs	r0, #11
 800bd94:	f7ff fe4a 	bl	800ba2c <PrintKey>
    PrintKey( MC_KE_KEY );
 800bd98:	200c      	movs	r0, #12
 800bd9a:	f7ff fe47 	bl	800ba2c <PrintKey>
    PrintKey( APP_S_KEY );
 800bd9e:	2009      	movs	r0, #9
 800bda0:	f7ff fe44 	bl	800ba2c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800bda4:	2008      	movs	r0, #8
 800bda6:	f7ff fe41 	bl	800ba2c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800bdaa:	200a      	movs	r0, #10
 800bdac:	f7ff fe3e 	bl	800ba2c <PrintKey>
    PrintIds( mode );
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fe64 	bl	800ba80 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
	...

0800bdc4 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	4603      	mov	r3, r0
 800bdcc:	6039      	str	r1, [r7, #0]
 800bdce:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	e04b      	b.n	800be72 <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdda:	2300      	movs	r3, #0
 800bddc:	77fb      	strb	r3, [r7, #31]
 800bdde:	e044      	b.n	800be6a <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bde0:	4b26      	ldr	r3, [pc, #152]	@ (800be7c <SecureElementSetKey+0xb8>)
 800bde2:	6819      	ldr	r1, [r3, #0]
 800bde4:	7ffa      	ldrb	r2, [r7, #31]
 800bde6:	4613      	mov	r3, r2
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	4413      	add	r3, r2
 800bdec:	440b      	add	r3, r1
 800bdee:	3318      	adds	r3, #24
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	79fa      	ldrb	r2, [r7, #7]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d135      	bne.n	800be64 <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800bdf8:	79fb      	ldrb	r3, [r7, #7]
 800bdfa:	2b0d      	cmp	r3, #13
 800bdfc:	d122      	bne.n	800be44 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bdfe:	2306      	movs	r3, #6
 800be00:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800be02:	f107 030c 	add.w	r3, r7, #12
 800be06:	2200      	movs	r2, #0
 800be08:	601a      	str	r2, [r3, #0]
 800be0a:	605a      	str	r2, [r3, #4]
 800be0c:	609a      	str	r2, [r3, #8]
 800be0e:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800be10:	f107 030c 	add.w	r3, r7, #12
 800be14:	220c      	movs	r2, #12
 800be16:	2110      	movs	r1, #16
 800be18:	6838      	ldr	r0, [r7, #0]
 800be1a:	f000 f877 	bl	800bf0c <SecureElementAesEncrypt>
 800be1e:	4603      	mov	r3, r0
 800be20:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800be22:	4b16      	ldr	r3, [pc, #88]	@ (800be7c <SecureElementSetKey+0xb8>)
 800be24:	6819      	ldr	r1, [r3, #0]
 800be26:	7ffa      	ldrb	r2, [r7, #31]
 800be28:	4613      	mov	r3, r2
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	4413      	add	r3, r2
 800be2e:	3318      	adds	r3, #24
 800be30:	440b      	add	r3, r1
 800be32:	3301      	adds	r3, #1
 800be34:	f107 010c 	add.w	r1, r7, #12
 800be38:	2210      	movs	r2, #16
 800be3a:	4618      	mov	r0, r3
 800be3c:	f00b f9e3 	bl	8017206 <memcpy1>
                return retval;
 800be40:	7fbb      	ldrb	r3, [r7, #30]
 800be42:	e016      	b.n	800be72 <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800be44:	4b0d      	ldr	r3, [pc, #52]	@ (800be7c <SecureElementSetKey+0xb8>)
 800be46:	6819      	ldr	r1, [r3, #0]
 800be48:	7ffa      	ldrb	r2, [r7, #31]
 800be4a:	4613      	mov	r3, r2
 800be4c:	011b      	lsls	r3, r3, #4
 800be4e:	4413      	add	r3, r2
 800be50:	3318      	adds	r3, #24
 800be52:	440b      	add	r3, r1
 800be54:	3301      	adds	r3, #1
 800be56:	2210      	movs	r2, #16
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f00b f9d3 	bl	8017206 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800be60:	2300      	movs	r3, #0
 800be62:	e006      	b.n	800be72 <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be64:	7ffb      	ldrb	r3, [r7, #31]
 800be66:	3301      	adds	r3, #1
 800be68:	77fb      	strb	r3, [r7, #31]
 800be6a:	7ffb      	ldrb	r3, [r7, #31]
 800be6c:	2b0a      	cmp	r3, #10
 800be6e:	d9b7      	bls.n	800bde0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be70:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800be72:	4618      	mov	r0, r3
 800be74:	3720      	adds	r7, #32
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	200005c8 	.word	0x200005c8

0800be80 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af02      	add	r7, sp, #8
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800be8e:	78fb      	ldrb	r3, [r7, #3]
 800be90:	2b0b      	cmp	r3, #11
 800be92:	d901      	bls.n	800be98 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be94:	2303      	movs	r3, #3
 800be96:	e009      	b.n	800beac <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800be98:	78fa      	ldrb	r2, [r7, #3]
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	4613      	mov	r3, r2
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	68b9      	ldr	r1, [r7, #8]
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f7ff fe37 	bl	800bb18 <ComputeCmac>
 800beaa:	4603      	mov	r3, r0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b088      	sub	sp, #32
 800beb8:	af02      	add	r7, sp, #8
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bec8:	2302      	movs	r3, #2
 800beca:	e01b      	b.n	800bf04 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800becc:	2306      	movs	r3, #6
 800bece:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bed4:	78fa      	ldrb	r2, [r7, #3]
 800bed6:	f107 0310 	add.w	r3, r7, #16
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	4613      	mov	r3, r2
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	68f9      	ldr	r1, [r7, #12]
 800bee2:	2000      	movs	r0, #0
 800bee4:	f7ff fe18 	bl	800bb18 <ComputeCmac>
 800bee8:	4603      	mov	r3, r0
 800beea:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800bef2:	7dfb      	ldrb	r3, [r7, #23]
 800bef4:	e006      	b.n	800bf04 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	429a      	cmp	r2, r3
 800befc:	d001      	beq.n	800bf02 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800befe:	2301      	movs	r3, #1
 800bf00:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bf02:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b0c2      	sub	sp, #264	@ 0x108
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bf18:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800bf1c:	6001      	str	r1, [r0, #0]
 800bf1e:	4611      	mov	r1, r2
 800bf20:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bf24:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800bf28:	6013      	str	r3, [r2, #0]
 800bf2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf2e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800bf32:	460a      	mov	r2, r1
 800bf34:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d006      	beq.n	800bf4a <SecureElementAesEncrypt+0x3e>
 800bf3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d101      	bne.n	800bf4e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	e059      	b.n	800c002 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800bf4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf52:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d001      	beq.n	800bf64 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bf60:	2305      	movs	r3, #5
 800bf62:	e04e      	b.n	800c002 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bf64:	f107 0314 	add.w	r3, r7, #20
 800bf68:	22f0      	movs	r2, #240	@ 0xf0
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f00b f985 	bl	801727c <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bf72:	f107 0210 	add.w	r2, r7, #16
 800bf76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf7a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	4611      	mov	r1, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff fd98 	bl	800bab8 <GetKeyByID>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bf8e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d133      	bne.n	800bffe <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	f107 0214 	add.w	r2, r7, #20
 800bf9e:	2110      	movs	r1, #16
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff fc1b 	bl	800b7dc <lorawan_aes_set_key>

        uint8_t block = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800bfac:	e020      	b.n	800bff0 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800bfae:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	18d0      	adds	r0, r2, r3
 800bfb6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bfba:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bfbe:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800bfc2:	6812      	ldr	r2, [r2, #0]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f107 0214 	add.w	r2, r7, #20
 800bfca:	4619      	mov	r1, r3
 800bfcc:	f7ff fce4 	bl	800b998 <lorawan_aes_encrypt>
            block = block + 16;
 800bfd0:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bfd4:	3310      	adds	r3, #16
 800bfd6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800bfda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfde:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bfe2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bfe6:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800bfea:	6812      	ldr	r2, [r2, #0]
 800bfec:	3a10      	subs	r2, #16
 800bfee:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800bff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1d7      	bne.n	800bfae <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bffe:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800c002:	4618      	mov	r0, r3
 800c004:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b088      	sub	sp, #32
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
 800c018:	4613      	mov	r3, r2
 800c01a:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d101      	bne.n	800c026 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c022:	2302      	movs	r3, #2
 800c024:	e02d      	b.n	800c082 <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c026:	2306      	movs	r3, #6
 800c028:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800c02a:	78bb      	ldrb	r3, [r7, #2]
 800c02c:	2b0c      	cmp	r3, #12
 800c02e:	d104      	bne.n	800c03a <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c030:	78fb      	ldrb	r3, [r7, #3]
 800c032:	2b0b      	cmp	r3, #11
 800c034:	d001      	beq.n	800c03a <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c036:	2303      	movs	r3, #3
 800c038:	e023      	b.n	800c082 <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800c03a:	f107 030c 	add.w	r3, r7, #12
 800c03e:	2200      	movs	r2, #0
 800c040:	601a      	str	r2, [r3, #0]
 800c042:	605a      	str	r2, [r3, #4]
 800c044:	609a      	str	r2, [r3, #8]
 800c046:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800c048:	f107 030c 	add.w	r3, r7, #12
 800c04c:	78fa      	ldrb	r2, [r7, #3]
 800c04e:	2110      	movs	r1, #16
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff ff5b 	bl	800bf0c <SecureElementAesEncrypt>
 800c056:	4603      	mov	r3, r0
 800c058:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c05a:	7ffb      	ldrb	r3, [r7, #31]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800c060:	7ffb      	ldrb	r3, [r7, #31]
 800c062:	e00e      	b.n	800c082 <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800c064:	f107 020c 	add.w	r2, r7, #12
 800c068:	78bb      	ldrb	r3, [r7, #2]
 800c06a:	4611      	mov	r1, r2
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff fea9 	bl	800bdc4 <SecureElementSetKey>
 800c072:	4603      	mov	r3, r0
 800c074:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c076:	7ffb      	ldrb	r3, [r7, #31]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800c07c:	7ffb      	ldrb	r3, [r7, #31]
 800c07e:	e000      	b.n	800c082 <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c080:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c082:	4618      	mov	r0, r3
 800c084:	3720      	adds	r7, #32
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b086      	sub	sp, #24
 800c08e:	af00      	add	r7, sp, #0
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607b      	str	r3, [r7, #4]
 800c094:	4603      	mov	r3, r0
 800c096:	73fb      	strb	r3, [r7, #15]
 800c098:	4613      	mov	r3, r2
 800c09a:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d005      	beq.n	800c0ae <SecureElementProcessJoinAccept+0x24>
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d002      	beq.n	800c0ae <SecureElementProcessJoinAccept+0x24>
 800c0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d101      	bne.n	800c0b2 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	e05c      	b.n	800c16c <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c0b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0b6:	2b21      	cmp	r3, #33	@ 0x21
 800c0b8:	d901      	bls.n	800c0be <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c0ba:	2305      	movs	r3, #5
 800c0bc:	e056      	b.n	800c16c <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c0c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c0ce:	f00b f89a 	bl	8017206 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	1c58      	adds	r0, r3, #1
 800c0d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	7dfa      	ldrb	r2, [r7, #23]
 800c0e4:	f7ff ff12 	bl	800bf0c <SecureElementAesEncrypt>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c0ee:	2307      	movs	r3, #7
 800c0f0:	e03c      	b.n	800c16c <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f4:	330b      	adds	r3, #11
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	09db      	lsrs	r3, r3, #7
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fe:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800c100:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c104:	3b04      	subs	r3, #4
 800c106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c108:	4413      	add	r3, r2
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	4619      	mov	r1, r3
 800c10e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c112:	3b03      	subs	r3, #3
 800c114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c116:	4413      	add	r3, r2
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	021b      	lsls	r3, r3, #8
 800c11c:	ea41 0203 	orr.w	r2, r1, r3
 800c120:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c124:	3b02      	subs	r3, #2
 800c126:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c128:	440b      	add	r3, r1
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	041b      	lsls	r3, r3, #16
 800c12e:	431a      	orrs	r2, r3
 800c130:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c134:	3b01      	subs	r3, #1
 800c136:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c138:	440b      	add	r3, r1
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	061b      	lsls	r3, r3, #24
 800c13e:	4313      	orrs	r3, r2
 800c140:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800c142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10d      	bne.n	800c166 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c14a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c14e:	3b04      	subs	r3, #4
 800c150:	4619      	mov	r1, r3
 800c152:	2301      	movs	r3, #1
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c158:	f7ff feac 	bl	800beb4 <SecureElementVerifyAesCmac>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c162:	2301      	movs	r3, #1
 800c164:	e002      	b.n	800c16c <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c166:	2304      	movs	r3, #4
 800c168:	e000      	b.n	800c16c <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c182:	2302      	movs	r3, #2
 800c184:	e007      	b.n	800c196 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800c186:	4b06      	ldr	r3, [pc, #24]	@ (800c1a0 <SecureElementSetDevEui+0x2c>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2208      	movs	r2, #8
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	4618      	mov	r0, r3
 800c190:	f00b f839 	bl	8017206 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c194:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c196:	4618      	mov	r0, r3
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	200005c8 	.word	0x200005c8

0800c1a4 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	e007      	b.n	800c1c6 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800c1b6:	4b06      	ldr	r3, [pc, #24]	@ (800c1d0 <SecureElementGetDevEui+0x2c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2208      	movs	r2, #8
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f00b f821 	bl	8017206 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1c4:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200005c8 	.word	0x200005c8

0800c1d4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1e2:	2302      	movs	r3, #2
 800c1e4:	e008      	b.n	800c1f8 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800c1e6:	4b06      	ldr	r3, [pc, #24]	@ (800c200 <SecureElementSetJoinEui+0x2c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	3308      	adds	r3, #8
 800c1ec:	2208      	movs	r2, #8
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f00b f808 	bl	8017206 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1f6:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	200005c8 	.word	0x200005c8

0800c204 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d101      	bne.n	800c216 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c212:	2302      	movs	r3, #2
 800c214:	e008      	b.n	800c228 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800c216:	4b06      	ldr	r3, [pc, #24]	@ (800c230 <SecureElementGetJoinEui+0x2c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	2208      	movs	r2, #8
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f00a fff0 	bl	8017206 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c226:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	200005c8 	.word	0x200005c8

0800c234 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	4603      	mov	r3, r0
 800c23c:	6039      	str	r1, [r7, #0]
 800c23e:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800c240:	79fb      	ldrb	r3, [r7, #7]
 800c242:	2b02      	cmp	r3, #2
 800c244:	d104      	bne.n	800c250 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800c246:	4b07      	ldr	r3, [pc, #28]	@ (800c264 <SecureElementSetDevAddr+0x30>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	611a      	str	r2, [r3, #16]
 800c24e:	e003      	b.n	800c258 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800c250:	4b04      	ldr	r3, [pc, #16]	@ (800c264 <SecureElementSetDevAddr+0x30>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800c258:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	bc80      	pop	{r7}
 800c262:	4770      	bx	lr
 800c264:	200005c8 	.word	0x200005c8

0800c268 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	6039      	str	r1, [r7, #0]
 800c272:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c27a:	2302      	movs	r3, #2
 800c27c:	e00e      	b.n	800c29c <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800c27e:	79fb      	ldrb	r3, [r7, #7]
 800c280:	2b02      	cmp	r3, #2
 800c282:	d105      	bne.n	800c290 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800c284:	4b08      	ldr	r3, [pc, #32]	@ (800c2a8 <SecureElementGetDevAddr+0x40>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	691a      	ldr	r2, [r3, #16]
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e004      	b.n	800c29a <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800c290:	4b05      	ldr	r3, [pc, #20]	@ (800c2a8 <SecureElementGetDevAddr+0x40>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	695a      	ldr	r2, [r3, #20]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800c29a:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bc80      	pop	{r7}
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	200005c8 	.word	0x200005c8

0800c2ac <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c2b6:	4a29      	ldr	r2, [pc, #164]	@ (800c35c <LmHandlerInit+0xb0>)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c2bc:	4b28      	ldr	r3, [pc, #160]	@ (800c360 <LmHandlerInit+0xb4>)
 800c2be:	4a29      	ldr	r2, [pc, #164]	@ (800c364 <LmHandlerInit+0xb8>)
 800c2c0:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c2c2:	4b27      	ldr	r3, [pc, #156]	@ (800c360 <LmHandlerInit+0xb4>)
 800c2c4:	4a28      	ldr	r2, [pc, #160]	@ (800c368 <LmHandlerInit+0xbc>)
 800c2c6:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c2c8:	4b25      	ldr	r3, [pc, #148]	@ (800c360 <LmHandlerInit+0xb4>)
 800c2ca:	4a28      	ldr	r2, [pc, #160]	@ (800c36c <LmHandlerInit+0xc0>)
 800c2cc:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c2ce:	4b24      	ldr	r3, [pc, #144]	@ (800c360 <LmHandlerInit+0xb4>)
 800c2d0:	4a27      	ldr	r2, [pc, #156]	@ (800c370 <LmHandlerInit+0xc4>)
 800c2d2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c2d4:	4b21      	ldr	r3, [pc, #132]	@ (800c35c <LmHandlerInit+0xb0>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a26      	ldr	r2, [pc, #152]	@ (800c374 <LmHandlerInit+0xc8>)
 800c2dc:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c2de:	4b1f      	ldr	r3, [pc, #124]	@ (800c35c <LmHandlerInit+0xb0>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	4a23      	ldr	r2, [pc, #140]	@ (800c374 <LmHandlerInit+0xc8>)
 800c2e6:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c2e8:	4b1c      	ldr	r3, [pc, #112]	@ (800c35c <LmHandlerInit+0xb0>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	4a21      	ldr	r2, [pc, #132]	@ (800c374 <LmHandlerInit+0xc8>)
 800c2f0:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800c2f2:	4b1a      	ldr	r3, [pc, #104]	@ (800c35c <LmHandlerInit+0xb0>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	4a1e      	ldr	r2, [pc, #120]	@ (800c374 <LmHandlerInit+0xc8>)
 800c2fa:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c2fc:	4b1d      	ldr	r3, [pc, #116]	@ (800c374 <LmHandlerInit+0xc8>)
 800c2fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c378 <LmHandlerInit+0xcc>)
 800c300:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c302:	4b16      	ldr	r3, [pc, #88]	@ (800c35c <LmHandlerInit+0xb0>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	4a1a      	ldr	r2, [pc, #104]	@ (800c374 <LmHandlerInit+0xc8>)
 800c30a:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	4a1b      	ldr	r2, [pc, #108]	@ (800c37c <LmHandlerInit+0xd0>)
 800c310:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c312:	4b12      	ldr	r3, [pc, #72]	@ (800c35c <LmHandlerInit+0xb0>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c318:	4a18      	ldr	r2, [pc, #96]	@ (800c37c <LmHandlerInit+0xd0>)
 800c31a:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800c31c:	4b17      	ldr	r3, [pc, #92]	@ (800c37c <LmHandlerInit+0xd0>)
 800c31e:	4a18      	ldr	r2, [pc, #96]	@ (800c380 <LmHandlerInit+0xd4>)
 800c320:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800c322:	4b16      	ldr	r3, [pc, #88]	@ (800c37c <LmHandlerInit+0xd0>)
 800c324:	4a17      	ldr	r2, [pc, #92]	@ (800c384 <LmHandlerInit+0xd8>)
 800c326:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800c328:	4914      	ldr	r1, [pc, #80]	@ (800c37c <LmHandlerInit+0xd0>)
 800c32a:	2000      	movs	r0, #0
 800c32c:	f000 fdb8 	bl	800cea0 <LmHandlerPackageRegister>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800c336:	f04f 33ff 	mov.w	r3, #4294967295
 800c33a:	e00a      	b.n	800c352 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800c33c:	463b      	mov	r3, r7
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 fd2e 	bl	800dda0 <LmhpPackagesRegistrationInit>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800c34a:	f04f 33ff 	mov.w	r3, #4294967295
 800c34e:	e000      	b.n	800c352 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20000620 	.word	0x20000620
 800c360:	20000624 	.word	0x20000624
 800c364:	0800cb79 	.word	0x0800cb79
 800c368:	0800cbed 	.word	0x0800cbed
 800c36c:	0800ccbd 	.word	0x0800ccbd
 800c370:	0800ce0d 	.word	0x0800ce0d
 800c374:	20000634 	.word	0x20000634
 800c378:	0800d34d 	.word	0x0800d34d
 800c37c:	200005e4 	.word	0x200005e4
 800c380:	0800d161 	.word	0x0800d161
 800c384:	0800d199 	.word	0x0800d199

0800c388 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b092      	sub	sp, #72	@ 0x48
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800c390:	2218      	movs	r2, #24
 800c392:	6879      	ldr	r1, [r7, #4]
 800c394:	4887      	ldr	r0, [pc, #540]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c396:	f00a ff36 	bl	8017206 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800c39a:	4b87      	ldr	r3, [pc, #540]	@ (800c5b8 <LmHandlerConfigure+0x230>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c3a0:	f7fe fb56 	bl	800aa50 <LoraInfo_GetPtr>
 800c3a4:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800c3a6:	4b83      	ldr	r3, [pc, #524]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	4093      	lsls	r3, r2
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <LmHandlerConfigure+0x38>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
        while( 1 ) {} /* error: Region is not defined in the MW */
 800c3bc:	bf00      	nop
 800c3be:	e7fd      	b.n	800c3bc <LmHandlerConfigure+0x34>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800c3c0:	4b7c      	ldr	r3, [pc, #496]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	497d      	ldr	r1, [pc, #500]	@ (800c5bc <LmHandlerConfigure+0x234>)
 800c3c8:	487d      	ldr	r0, [pc, #500]	@ (800c5c0 <LmHandlerConfigure+0x238>)
 800c3ca:	f004 ffeb 	bl	80113a4 <LoRaMacInitialization>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <LmHandlerConfigure+0x52>
    {
        return LORAMAC_HANDLER_ERROR;
 800c3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d8:	e0e8      	b.n	800c5ac <LmHandlerConfigure+0x224>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800c3da:	2327      	movs	r3, #39	@ 0x27
 800c3dc:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c3de:	f107 0318 	add.w	r3, r7, #24
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f005 fd6a 	bl	8011ebc <LoRaMacMibSetRequestConfirm>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d103      	bne.n	800c3f6 <LmHandlerConfigure+0x6e>
    {
        CtxRestoreDone = true;
 800c3ee:	4b75      	ldr	r3, [pc, #468]	@ (800c5c4 <LmHandlerConfigure+0x23c>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	701a      	strb	r2, [r3, #0]
 800c3f4:	e02a      	b.n	800c44c <LmHandlerConfigure+0xc4>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c3f6:	2328      	movs	r3, #40	@ 0x28
 800c3f8:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800c3fa:	4b73      	ldr	r3, [pc, #460]	@ (800c5c8 <LmHandlerConfigure+0x240>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00c      	beq.n	800c41e <LmHandlerConfigure+0x96>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c404:	f107 0318 	add.w	r3, r7, #24
 800c408:	4618      	mov	r0, r3
 800c40a:	f005 fb7f 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800c40e:	4b6e      	ldr	r3, [pc, #440]	@ (800c5c8 <LmHandlerConfigure+0x240>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	69fa      	ldr	r2, [r7, #28]
 800c416:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800c41a:	4610      	mov	r0, r2
 800c41c:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800c41e:	2327      	movs	r3, #39	@ 0x27
 800c420:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c422:	f107 0318 	add.w	r3, r7, #24
 800c426:	4618      	mov	r0, r3
 800c428:	f005 fd48 	bl	8011ebc <LoRaMacMibSetRequestConfirm>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10c      	bne.n	800c44c <LmHandlerConfigure+0xc4>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c432:	2301      	movs	r3, #1
 800c434:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c436:	f107 0318 	add.w	r3, r7, #24
 800c43a:	4618      	mov	r0, r3
 800c43c:	f005 fb66 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c440:	7f3b      	ldrb	r3, [r7, #28]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <LmHandlerConfigure+0xc4>
            {
                CtxRestoreDone = true;
 800c446:	4b5f      	ldr	r3, [pc, #380]	@ (800c5c4 <LmHandlerConfigure+0x23c>)
 800c448:	2201      	movs	r2, #1
 800c44a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800c44c:	4b5d      	ldr	r3, [pc, #372]	@ (800c5c4 <LmHandlerConfigure+0x23c>)
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d02e      	beq.n	800c4b2 <LmHandlerConfigure+0x12a>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c454:	4b5c      	ldr	r3, [pc, #368]	@ (800c5c8 <LmHandlerConfigure+0x240>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	69db      	ldr	r3, [r3, #28]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d004      	beq.n	800c468 <LmHandlerConfigure+0xe0>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c45e:	4b5a      	ldr	r3, [pc, #360]	@ (800c5c8 <LmHandlerConfigure+0x240>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	69db      	ldr	r3, [r3, #28]
 800c464:	2000      	movs	r0, #0
 800c466:	4798      	blx	r3
        }

        //BZ #156695
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 800c468:	f000 f98c 	bl	800c784 <LmHandlerJoinStatus>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d106      	bne.n	800c480 <LmHandlerConfigure+0xf8>
 800c472:	f002 fc77 	bl	800ed64 <LoRaMacIsStopped>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <LmHandlerConfigure+0xf8>
        { 
            LoRaMacStart();
 800c47c:	f005 fa48 	bl	8011910 <LoRaMacStart>
        }

        mibReq.Type = MIB_NVM_CTXS;
 800c480:	2327      	movs	r3, #39	@ 0x27
 800c482:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c484:	f107 0318 	add.w	r3, r7, #24
 800c488:	4618      	mov	r0, r3
 800c48a:	f005 fb3f 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800c492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c494:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c498:	4b46      	ldr	r3, [pc, #280]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c49a:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800c49c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c49e:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800c4a2:	4b44      	ldr	r3, [pc, #272]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c4a4:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800c4a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4a8:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800c4ac:	4b41      	ldr	r3, [pc, #260]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c4ae:	709a      	strb	r2, [r3, #2]
 800c4b0:	e008      	b.n	800c4c4 <LmHandlerConfigure+0x13c>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800c4b2:	2305      	movs	r3, #5
 800c4b4:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c4ba:	f107 0318 	add.w	r3, r7, #24
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f005 fcfc 	bl	8011ebc <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800c4c4:	4b3d      	ldr	r3, [pc, #244]	@ (800c5bc <LmHandlerConfigure+0x234>)
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	4a3c      	ldr	r2, [pc, #240]	@ (800c5bc <LmHandlerConfigure+0x234>)
 800c4ca:	68d2      	ldr	r2, [r2, #12]
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7ff fbc6 	bl	800bc60 <SecureElementInitMcuID>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d002      	beq.n	800c4e0 <LmHandlerConfigure+0x158>
    {
        return LORAMAC_HANDLER_ERROR;
 800c4da:	f04f 33ff 	mov.w	r3, #4294967295
 800c4de:	e065      	b.n	800c5ac <LmHandlerConfigure+0x224>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800c4e0:	2306      	movs	r3, #6
 800c4e2:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c4e4:	f107 0318 	add.w	r3, r7, #24
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f005 fb0f 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	4a36      	ldr	r2, [pc, #216]	@ (800c5cc <LmHandlerConfigure+0x244>)
 800c4f2:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c4f4:	f107 0318 	add.w	r3, r7, #24
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f005 fcdf 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800c4fe:	2302      	movs	r3, #2
 800c500:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800c502:	4b32      	ldr	r3, [pc, #200]	@ (800c5cc <LmHandlerConfigure+0x244>)
 800c504:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c506:	f107 0318 	add.w	r3, r7, #24
 800c50a:	4618      	mov	r0, r3
 800c50c:	f005 fafe 	bl	8011b0c <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800c510:	2303      	movs	r3, #3
 800c512:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800c514:	4b2e      	ldr	r3, [pc, #184]	@ (800c5d0 <LmHandlerConfigure+0x248>)
 800c516:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c518:	f107 0318 	add.w	r3, r7, #24
 800c51c:	4618      	mov	r0, r3
 800c51e:	f005 faf5 	bl	8011b0c <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800c522:	f7ff fc1d 	bl	800bd60 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c526:	230f      	movs	r3, #15
 800c528:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c52a:	2301      	movs	r3, #1
 800c52c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c52e:	f107 0318 	add.w	r3, r7, #24
 800c532:	4618      	mov	r0, r3
 800c534:	f005 fcc2 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c538:	2310      	movs	r3, #16
 800c53a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c53c:	2300      	movs	r3, #0
 800c53e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c540:	f107 0318 	add.w	r3, r7, #24
 800c544:	4618      	mov	r0, r3
 800c546:	f005 fcb9 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c54a:	2304      	movs	r3, #4
 800c54c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c54e:	4b19      	ldr	r3, [pc, #100]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c550:	789b      	ldrb	r3, [r3, #2]
 800c552:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c554:	f107 0318 	add.w	r3, r7, #24
 800c558:	4618      	mov	r0, r3
 800c55a:	f005 fcaf 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c55e:	233a      	movs	r3, #58	@ 0x3a
 800c560:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c562:	4b14      	ldr	r3, [pc, #80]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c564:	695b      	ldr	r3, [r3, #20]
 800c566:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c568:	f107 0318 	add.w	r3, r7, #24
 800c56c:	4618      	mov	r0, r3
 800c56e:	f005 fca5 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c572:	230f      	movs	r3, #15
 800c574:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c576:	4b0f      	ldr	r3, [pc, #60]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	f107 0210 	add.w	r2, r7, #16
 800c57e:	4611      	mov	r1, r2
 800c580:	4618      	mov	r0, r3
 800c582:	f008 fc47 	bl	8014e14 <RegionGetPhyParam>
 800c586:	4603      	mov	r3, r0
 800c588:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bf14      	ite	ne
 800c590:	2301      	movne	r3, #1
 800c592:	2300      	moveq	r3, #0
 800c594:	b2da      	uxtb	r2, r3
 800c596:	4b07      	ldr	r3, [pc, #28]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c598:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800c59a:	2014      	movs	r0, #20
 800c59c:	f000 fad4 	bl	800cb48 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c5a0:	4b04      	ldr	r3, [pc, #16]	@ (800c5b4 <LmHandlerConfigure+0x22c>)
 800c5a2:	79db      	ldrb	r3, [r3, #7]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f006 fb67 	bl	8012c78 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3748      	adds	r7, #72	@ 0x48
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20000608 	.word	0x20000608
 800c5b8:	20000650 	.word	0x20000650
 800c5bc:	20000634 	.word	0x20000634
 800c5c0:	20000624 	.word	0x20000624
 800c5c4:	20000746 	.word	0x20000746
 800c5c8:	20000620 	.word	0x20000620
 800c5cc:	200005cc 	.word	0x200005cc
 800c5d0:	200005d4 	.word	0x200005d4

0800c5d4 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800c5da:	f002 fe41 	bl	800f260 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800c5de:	f000 fd8b 	bl	800d0f8 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800c5e2:	f000 fd5f 	bl	800d0a4 <LmHandlerPackageIsTxPending>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d117      	bne.n	800c61c <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800c5ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c624 <LmHandlerProcess+0x50>)
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d014      	beq.n	800c61e <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	703b      	strb	r3, [r7, #0]
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	707b      	strb	r3, [r7, #1]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c600:	4b09      	ldr	r3, [pc, #36]	@ (800c628 <LmHandlerProcess+0x54>)
 800c602:	78d9      	ldrb	r1, [r3, #3]
 800c604:	463b      	mov	r3, r7
 800c606:	2200      	movs	r2, #0
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 f8d7 	bl	800c7bc <LmHandlerSend>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d104      	bne.n	800c61e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c614:	4b03      	ldr	r3, [pc, #12]	@ (800c624 <LmHandlerProcess+0x50>)
 800c616:	2200      	movs	r2, #0
 800c618:	701a      	strb	r2, [r3, #0]
 800c61a:	e000      	b.n	800c61e <LmHandlerProcess+0x4a>
        return;
 800c61c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	20000650 	.word	0x20000650
 800c628:	20000608 	.word	0x20000608

0800c62c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c62c:	b480      	push	{r7}
 800c62e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c630:	4b02      	ldr	r3, [pc, #8]	@ (800c63c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c632:	681b      	ldr	r3, [r3, #0]
}
 800c634:	4618      	mov	r0, r3
 800c636:	46bd      	mov	sp, r7
 800c638:	bc80      	pop	{r7}
 800c63a:	4770      	bx	lr
 800c63c:	2000064c 	.word	0x2000064c

0800c640 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b092      	sub	sp, #72	@ 0x48
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	460a      	mov	r2, r1
 800c64a:	71fb      	strb	r3, [r7, #7]
 800c64c:	4613      	mov	r3, r2
 800c64e:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c650:	2301      	movs	r3, #1
 800c652:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c656:	4b46      	ldr	r3, [pc, #280]	@ (800c770 <LmHandlerJoin+0x130>)
 800c658:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800c662:	4b43      	ldr	r3, [pc, #268]	@ (800c770 <LmHandlerJoin+0x130>)
 800c664:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c668:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800c66c:	79fb      	ldrb	r3, [r7, #7]
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d10b      	bne.n	800c68a <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c672:	2302      	movs	r3, #2
 800c674:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c678:	4b3e      	ldr	r3, [pc, #248]	@ (800c774 <LmHandlerJoin+0x134>)
 800c67a:	2202      	movs	r2, #2
 800c67c:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800c67e:	4a3d      	ldr	r2, [pc, #244]	@ (800c774 <LmHandlerJoin+0x134>)
 800c680:	79bb      	ldrb	r3, [r7, #6]
 800c682:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800c684:	f005 f944 	bl	8011910 <LoRaMacStart>
 800c688:	e05c      	b.n	800c744 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c68a:	2301      	movs	r3, #1
 800c68c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c690:	4b38      	ldr	r3, [pc, #224]	@ (800c774 <LmHandlerJoin+0x134>)
 800c692:	2201      	movs	r2, #1
 800c694:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c696:	4b36      	ldr	r3, [pc, #216]	@ (800c770 <LmHandlerJoin+0x130>)
 800c698:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c69c:	4b35      	ldr	r3, [pc, #212]	@ (800c774 <LmHandlerJoin+0x134>)
 800c69e:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800c6a0:	4b33      	ldr	r3, [pc, #204]	@ (800c770 <LmHandlerJoin+0x130>)
 800c6a2:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800c6a6:	4b33      	ldr	r3, [pc, #204]	@ (800c774 <LmHandlerJoin+0x134>)
 800c6a8:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c6aa:	4b32      	ldr	r3, [pc, #200]	@ (800c774 <LmHandlerJoin+0x134>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c6b0:	4a30      	ldr	r2, [pc, #192]	@ (800c774 <LmHandlerJoin+0x134>)
 800c6b2:	79bb      	ldrb	r3, [r7, #6]
 800c6b4:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800c6b6:	4b30      	ldr	r3, [pc, #192]	@ (800c778 <LmHandlerJoin+0x138>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	f083 0301 	eor.w	r3, r3, #1
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d034      	beq.n	800c72e <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c6c4:	231f      	movs	r3, #31
 800c6c6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c6c8:	4b29      	ldr	r3, [pc, #164]	@ (800c770 <LmHandlerJoin+0x130>)
 800c6ca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c6ce:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c6d0:	f107 030c 	add.w	r3, r7, #12
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f005 fbf1 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c6da:	2320      	movs	r3, #32
 800c6dc:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c6de:	4b24      	ldr	r3, [pc, #144]	@ (800c770 <LmHandlerJoin+0x130>)
 800c6e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c6e4:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c6e6:	f107 030c 	add.w	r3, r7, #12
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f005 fbe6 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800c6f0:	2322      	movs	r3, #34	@ 0x22
 800c6f2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800c6f4:	4b1e      	ldr	r3, [pc, #120]	@ (800c770 <LmHandlerJoin+0x130>)
 800c6f6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c6fa:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c6fc:	f107 030c 	add.w	r3, r7, #12
 800c700:	4618      	mov	r0, r3
 800c702:	f005 fbdb 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800c706:	2321      	movs	r3, #33	@ 0x21
 800c708:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800c70a:	4b19      	ldr	r3, [pc, #100]	@ (800c770 <LmHandlerJoin+0x130>)
 800c70c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c710:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c712:	f107 030c 	add.w	r3, r7, #12
 800c716:	4618      	mov	r0, r3
 800c718:	f005 fbd0 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c71c:	2329      	movs	r3, #41	@ 0x29
 800c71e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c720:	4b16      	ldr	r3, [pc, #88]	@ (800c77c <LmHandlerJoin+0x13c>)
 800c722:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c724:	f107 030c 	add.w	r3, r7, #12
 800c728:	4618      	mov	r0, r3
 800c72a:	f005 fbc7 	bl	8011ebc <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800c72e:	f005 f8ef 	bl	8011910 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c732:	2301      	movs	r3, #1
 800c734:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c736:	2301      	movs	r3, #1
 800c738:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c73a:	f107 030c 	add.w	r3, r7, #12
 800c73e:	4618      	mov	r0, r3
 800c740:	f005 fbbc 	bl	8011ebc <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800c744:	4b0c      	ldr	r3, [pc, #48]	@ (800c778 <LmHandlerJoin+0x138>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	f083 0301 	eor.w	r3, r3, #1
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d102      	bne.n	800c758 <LmHandlerJoin+0x118>
 800c752:	79bb      	ldrb	r3, [r7, #6]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d004      	beq.n	800c762 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800c758:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c75c:	4618      	mov	r0, r3
 800c75e:	f005 ffaf 	bl	80126c0 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c764:	4a06      	ldr	r2, [pc, #24]	@ (800c780 <LmHandlerJoin+0x140>)
 800c766:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c768:	bf00      	nop
 800c76a:	3748      	adds	r7, #72	@ 0x48
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	20000608 	.word	0x20000608
 800c774:	2000007c 	.word	0x2000007c
 800c778:	20000746 	.word	0x20000746
 800c77c:	01000400 	.word	0x01000400
 800c780:	2000064c 	.word	0x2000064c

0800c784 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b08c      	sub	sp, #48	@ 0x30
 800c788:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c78a:	2301      	movs	r3, #1
 800c78c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c78e:	1d3b      	adds	r3, r7, #4
 800c790:	4618      	mov	r0, r3
 800c792:	f005 f9bb 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
 800c796:	4603      	mov	r3, r0
 800c798:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800c79c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d106      	bne.n	800c7b2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c7a4:	7a3b      	ldrb	r3, [r7, #8]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d101      	bne.n	800c7ae <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e002      	b.n	800c7b4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e000      	b.n	800c7b4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c7b2:	2300      	movs	r3, #0
    }
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3730      	adds	r7, #48	@ 0x30
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b08a      	sub	sp, #40	@ 0x28
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	70fb      	strb	r3, [r7, #3]
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c7cc:	23ff      	movs	r3, #255	@ 0xff
 800c7ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800c7d2:	f002 fa9f 	bl	800ed14 <LoRaMacIsBusy>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c7dc:	f06f 0301 	mvn.w	r3, #1
 800c7e0:	e0ab      	b.n	800c93a <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800c7e2:	f002 fabf 	bl	800ed64 <LoRaMacIsStopped>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c7ec:	f06f 0302 	mvn.w	r3, #2
 800c7f0:	e0a3      	b.n	800c93a <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c7f2:	f7ff ffc7 	bl	800c784 <LmHandlerJoinStatus>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d00a      	beq.n	800c812 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c7fc:	4b51      	ldr	r3, [pc, #324]	@ (800c944 <LmHandlerSend+0x188>)
 800c7fe:	79db      	ldrb	r3, [r3, #7]
 800c800:	4a50      	ldr	r2, [pc, #320]	@ (800c944 <LmHandlerSend+0x188>)
 800c802:	7a12      	ldrb	r2, [r2, #8]
 800c804:	4611      	mov	r1, r2
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff ff1a 	bl	800c640 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c80c:	f06f 0302 	mvn.w	r3, #2
 800c810:	e093      	b.n	800c93a <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c812:	4a4d      	ldr	r2, [pc, #308]	@ (800c948 <LmHandlerSend+0x18c>)
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c818:	78fb      	ldrb	r3, [r7, #3]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	bf14      	ite	ne
 800c81e:	2301      	movne	r3, #1
 800c820:	2300      	moveq	r3, #0
 800c822:	b2db      	uxtb	r3, r3
 800c824:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c826:	4b49      	ldr	r3, [pc, #292]	@ (800c94c <LmHandlerSend+0x190>)
 800c828:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c82c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	785b      	ldrb	r3, [r3, #1]
 800c832:	f107 020c 	add.w	r2, r7, #12
 800c836:	4611      	mov	r1, r2
 800c838:	4618      	mov	r0, r3
 800c83a:	f005 f8d7 	bl	80119ec <LoRaMacQueryTxPossible>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d009      	beq.n	800c858 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c844:	2300      	movs	r3, #0
 800c846:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c848:	2300      	movs	r3, #0
 800c84a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c850:	23f9      	movs	r3, #249	@ 0xf9
 800c852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c856:	e008      	b.n	800c86a <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	785b      	ldrb	r3, [r3, #1]
 800c862:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c86a:	4b37      	ldr	r3, [pc, #220]	@ (800c948 <LmHandlerSend+0x18c>)
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	3310      	adds	r3, #16
 800c870:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c874:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c878:	4b34      	ldr	r3, [pc, #208]	@ (800c94c <LmHandlerSend+0x190>)
 800c87a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c87e:	4b32      	ldr	r3, [pc, #200]	@ (800c948 <LmHandlerSend+0x18c>)
 800c880:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800c882:	78ba      	ldrb	r2, [r7, #2]
 800c884:	f107 0310 	add.w	r3, r7, #16
 800c888:	4611      	mov	r1, r2
 800c88a:	4618      	mov	r0, r3
 800c88c:	f006 f8bc 	bl	8012a08 <LoRaMacMcpsRequest>
 800c890:	4603      	mov	r3, r0
 800c892:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	4a2d      	ldr	r2, [pc, #180]	@ (800c950 <LmHandlerSend+0x194>)
 800c89a:	6013      	str	r3, [r2, #0]

    switch( status )
 800c89c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8a0:	2b11      	cmp	r3, #17
 800c8a2:	d843      	bhi.n	800c92c <LmHandlerSend+0x170>
 800c8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c8ac <LmHandlerSend+0xf0>)
 800c8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8aa:	bf00      	nop
 800c8ac:	0800c8f5 	.word	0x0800c8f5
 800c8b0:	0800c90d 	.word	0x0800c90d
 800c8b4:	0800c92d 	.word	0x0800c92d
 800c8b8:	0800c92d 	.word	0x0800c92d
 800c8bc:	0800c92d 	.word	0x0800c92d
 800c8c0:	0800c92d 	.word	0x0800c92d
 800c8c4:	0800c92d 	.word	0x0800c92d
 800c8c8:	0800c915 	.word	0x0800c915
 800c8cc:	0800c92d 	.word	0x0800c92d
 800c8d0:	0800c92d 	.word	0x0800c92d
 800c8d4:	0800c92d 	.word	0x0800c92d
 800c8d8:	0800c925 	.word	0x0800c925
 800c8dc:	0800c92d 	.word	0x0800c92d
 800c8e0:	0800c92d 	.word	0x0800c92d
 800c8e4:	0800c90d 	.word	0x0800c90d
 800c8e8:	0800c90d 	.word	0x0800c90d
 800c8ec:	0800c90d 	.word	0x0800c90d
 800c8f0:	0800c91d 	.word	0x0800c91d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800c8f4:	4b17      	ldr	r3, [pc, #92]	@ (800c954 <LmHandlerSend+0x198>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800c8fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c8fe:	f113 0f07 	cmn.w	r3, #7
 800c902:	d017      	beq.n	800c934 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c904:	2300      	movs	r3, #0
 800c906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800c90a:	e013      	b.n	800c934 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c90c:	23fe      	movs	r3, #254	@ 0xfe
 800c90e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c912:	e010      	b.n	800c936 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c914:	23fd      	movs	r3, #253	@ 0xfd
 800c916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c91a:	e00c      	b.n	800c936 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c91c:	23fb      	movs	r3, #251	@ 0xfb
 800c91e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c922:	e008      	b.n	800c936 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c924:	23fa      	movs	r3, #250	@ 0xfa
 800c926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c92a:	e004      	b.n	800c936 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c92c:	23ff      	movs	r3, #255	@ 0xff
 800c92e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c932:	e000      	b.n	800c936 <LmHandlerSend+0x17a>
            break;
 800c934:	bf00      	nop
    }

    return lmhStatus;
 800c936:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3728      	adds	r7, #40	@ 0x28
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	2000007c 	.word	0x2000007c
 800c948:	20000088 	.word	0x20000088
 800c94c:	20000608 	.word	0x20000608
 800c950:	2000064c 	.word	0x2000064c
 800c954:	20000650 	.word	0x20000650

0800c958 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c95e:	2309      	movs	r3, #9
 800c960:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c962:	463b      	mov	r3, r7
 800c964:	4618      	mov	r0, r3
 800c966:	f005 feab 	bl	80126c0 <LoRaMacMlmeRequest>
 800c96a:	4603      	mov	r3, r0
 800c96c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	4a06      	ldr	r2, [pc, #24]	@ (800c98c <LmHandlerDeviceTimeReq+0x34>)
 800c972:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c974:	7dfb      	ldrb	r3, [r7, #23]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d101      	bne.n	800c97e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c97a:	2300      	movs	r3, #0
 800c97c:	e001      	b.n	800c982 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c97e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c982:	4618      	mov	r0, r3
 800c984:	3718      	adds	r7, #24
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	2000064c 	.word	0x2000064c

0800c990 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	4603      	mov	r3, r0
 800c998:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c99a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	370c      	adds	r7, #12
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bc80      	pop	{r7}
 800c9a6:	4770      	bx	lr

0800c9a8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08e      	sub	sp, #56	@ 0x38
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800c9b8:	f002 f9ac 	bl	800ed14 <LoRaMacIsBusy>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c9c2:	f06f 0301 	mvn.w	r3, #1
 800c9c6:	e071      	b.n	800caac <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800c9c8:	f7ff fedc 	bl	800c784 <LmHandlerJoinStatus>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d002      	beq.n	800c9d8 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c9d2:	f06f 0302 	mvn.w	r3, #2
 800c9d6:	e069      	b.n	800caac <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c9dc:	f107 030c 	add.w	r3, r7, #12
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f005 f893 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f0:	e05c      	b.n	800caac <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800c9f2:	7c3b      	ldrb	r3, [r7, #16]
 800c9f4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800c9f8:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d052      	beq.n	800caa8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800ca02:	79fb      	ldrb	r3, [r7, #7]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d028      	beq.n	800ca5a <LmHandlerRequestClass+0xb2>
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	dc48      	bgt.n	800ca9e <LmHandlerRequestClass+0xf6>
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <LmHandlerRequestClass+0x6e>
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d01e      	beq.n	800ca52 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800ca14:	e043      	b.n	800ca9e <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800ca16:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d041      	beq.n	800caa2 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800ca1e:	79fb      	ldrb	r3, [r7, #7]
 800ca20:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ca22:	f107 030c 	add.w	r3, r7, #12
 800ca26:	4618      	mov	r0, r3
 800ca28:	f005 fa48 	bl	8011ebc <LoRaMacMibSetRequestConfirm>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10b      	bne.n	800ca4a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ca32:	4b20      	ldr	r3, [pc, #128]	@ (800cab4 <LmHandlerRequestClass+0x10c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d032      	beq.n	800caa2 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ca3c:	4b1d      	ldr	r3, [pc, #116]	@ (800cab4 <LmHandlerRequestClass+0x10c>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca42:	79fa      	ldrb	r2, [r7, #7]
 800ca44:	4610      	mov	r0, r2
 800ca46:	4798      	blx	r3
                break;
 800ca48:	e02b      	b.n	800caa2 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ca4a:	23ff      	movs	r3, #255	@ 0xff
 800ca4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800ca50:	e027      	b.n	800caa2 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800ca52:	23ff      	movs	r3, #255	@ 0xff
 800ca54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800ca58:	e026      	b.n	800caa8 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800ca5a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d003      	beq.n	800ca6a <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ca62:	23ff      	movs	r3, #255	@ 0xff
 800ca64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800ca68:	e01d      	b.n	800caa6 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800ca6a:	79fb      	ldrb	r3, [r7, #7]
 800ca6c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ca6e:	f107 030c 	add.w	r3, r7, #12
 800ca72:	4618      	mov	r0, r3
 800ca74:	f005 fa22 	bl	8011ebc <LoRaMacMibSetRequestConfirm>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10b      	bne.n	800ca96 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ca7e:	4b0d      	ldr	r3, [pc, #52]	@ (800cab4 <LmHandlerRequestClass+0x10c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00e      	beq.n	800caa6 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ca88:	4b0a      	ldr	r3, [pc, #40]	@ (800cab4 <LmHandlerRequestClass+0x10c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca8e:	79fa      	ldrb	r2, [r7, #7]
 800ca90:	4610      	mov	r0, r2
 800ca92:	4798      	blx	r3
                break;
 800ca94:	e007      	b.n	800caa6 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ca96:	23ff      	movs	r3, #255	@ 0xff
 800ca98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800ca9c:	e003      	b.n	800caa6 <LmHandlerRequestClass+0xfe>
                break;
 800ca9e:	bf00      	nop
 800caa0:	e002      	b.n	800caa8 <LmHandlerRequestClass+0x100>
                break;
 800caa2:	bf00      	nop
 800caa4:	e000      	b.n	800caa8 <LmHandlerRequestClass+0x100>
                break;
 800caa6:	bf00      	nop
        }
    }
    return errorStatus;
 800caa8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800caac:	4618      	mov	r0, r3
 800caae:	3738      	adds	r7, #56	@ 0x38
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	20000620 	.word	0x20000620

0800cab8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08c      	sub	sp, #48	@ 0x30
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d102      	bne.n	800cacc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cac6:	f04f 33ff 	mov.w	r3, #4294967295
 800caca:	e010      	b.n	800caee <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cacc:	2300      	movs	r3, #0
 800cace:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cad0:	f107 0308 	add.w	r3, r7, #8
 800cad4:	4618      	mov	r0, r3
 800cad6:	f005 f819 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cae0:	f04f 33ff 	mov.w	r3, #4294967295
 800cae4:	e003      	b.n	800caee <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cae6:	7b3a      	ldrb	r2, [r7, #12]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3730      	adds	r7, #48	@ 0x30
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08c      	sub	sp, #48	@ 0x30
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d102      	bne.n	800cb0c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb06:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0a:	e016      	b.n	800cb3a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cb0c:	2320      	movs	r3, #32
 800cb0e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800cb10:	f107 0308 	add.w	r3, r7, #8
 800cb14:	4618      	mov	r0, r3
 800cb16:	f004 fff9 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb20:	f04f 33ff 	mov.w	r3, #4294967295
 800cb24:	e009      	b.n	800cb3a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cb26:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f993 2000 	ldrsb.w	r2, [r3]
 800cb34:	4b03      	ldr	r3, [pc, #12]	@ (800cb44 <LmHandlerGetTxDatarate+0x4c>)
 800cb36:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3730      	adds	r7, #48	@ 0x30
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	20000608 	.word	0x20000608

0800cb48 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08c      	sub	sp, #48	@ 0x30
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cb50:	2323      	movs	r3, #35	@ 0x23
 800cb52:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cb58:	f107 0308 	add.w	r3, r7, #8
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f005 f9ad 	bl	8011ebc <LoRaMacMibSetRequestConfirm>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d002      	beq.n	800cb6e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb68:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6c:	e000      	b.n	800cb70 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3730      	adds	r7, #48	@ 0x30
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cb80:	4b18      	ldr	r3, [pc, #96]	@ (800cbe4 <McpsConfirm+0x6c>)
 800cb82:	2201      	movs	r2, #1
 800cb84:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	785a      	ldrb	r2, [r3, #1]
 800cb8a:	4b16      	ldr	r3, [pc, #88]	@ (800cbe4 <McpsConfirm+0x6c>)
 800cb8c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	789b      	ldrb	r3, [r3, #2]
 800cb92:	b25a      	sxtb	r2, r3
 800cb94:	4b13      	ldr	r3, [pc, #76]	@ (800cbe4 <McpsConfirm+0x6c>)
 800cb96:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	4a11      	ldr	r2, [pc, #68]	@ (800cbe4 <McpsConfirm+0x6c>)
 800cb9e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cba6:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe4 <McpsConfirm+0x6c>)
 800cba8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbe4 <McpsConfirm+0x6c>)
 800cbb2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	791b      	ldrb	r3, [r3, #4]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe4 <McpsConfirm+0x6c>)
 800cbbc:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800cbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe8 <McpsConfirm+0x70>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d004      	beq.n	800cbd2 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800cbc8:	4b07      	ldr	r3, [pc, #28]	@ (800cbe8 <McpsConfirm+0x70>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbce:	4805      	ldr	r0, [pc, #20]	@ (800cbe4 <McpsConfirm+0x6c>)
 800cbd0:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800cbd2:	6879      	ldr	r1, [r7, #4]
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	f000 f9e9 	bl	800cfac <LmHandlerPackagesNotify>
}
 800cbda:	bf00      	nop
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20000088 	.word	0x20000088
 800cbe8:	20000620 	.word	0x20000620

0800cbec <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b086      	sub	sp, #24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800cbfa:	4b2d      	ldr	r3, [pc, #180]	@ (800ccb0 <McpsIndication+0xc4>)
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	785a      	ldrb	r2, [r3, #1]
 800cc04:	4b2a      	ldr	r3, [pc, #168]	@ (800ccb0 <McpsIndication+0xc4>)
 800cc06:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800cc08:	4b29      	ldr	r3, [pc, #164]	@ (800ccb0 <McpsIndication+0xc4>)
 800cc0a:	785b      	ldrb	r3, [r3, #1]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d14b      	bne.n	800cca8 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	791b      	ldrb	r3, [r3, #4]
 800cc14:	b25a      	sxtb	r2, r3
 800cc16:	4b26      	ldr	r3, [pc, #152]	@ (800ccb0 <McpsIndication+0xc4>)
 800cc18:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc20:	b25a      	sxtb	r2, r3
 800cc22:	4b23      	ldr	r3, [pc, #140]	@ (800ccb0 <McpsIndication+0xc4>)
 800cc24:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cc2c:	4b20      	ldr	r3, [pc, #128]	@ (800ccb0 <McpsIndication+0xc4>)
 800cc2e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	78da      	ldrb	r2, [r3, #3]
 800cc34:	4b1e      	ldr	r3, [pc, #120]	@ (800ccb0 <McpsIndication+0xc4>)
 800cc36:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	4a1c      	ldr	r2, [pc, #112]	@ (800ccb0 <McpsIndication+0xc4>)
 800cc3e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	78db      	ldrb	r3, [r3, #3]
 800cc44:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	7b1b      	ldrb	r3, [r3, #12]
 800cc4a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800cc52:	4b18      	ldr	r3, [pc, #96]	@ (800ccb4 <McpsIndication+0xc8>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d007      	beq.n	800cc6c <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800cc5c:	4b15      	ldr	r3, [pc, #84]	@ (800ccb4 <McpsIndication+0xc8>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc62:	f107 0210 	add.w	r2, r7, #16
 800cc66:	4912      	ldr	r1, [pc, #72]	@ (800ccb0 <McpsIndication+0xc4>)
 800cc68:	4610      	mov	r0, r2
 800cc6a:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800cc6c:	4b11      	ldr	r3, [pc, #68]	@ (800ccb4 <McpsIndication+0xc8>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <McpsIndication+0x9a>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	7e1b      	ldrb	r3, [r3, #24]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cc7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb4 <McpsIndication+0xc8>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc84:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	2001      	movs	r0, #1
 800cc8a:	f000 f98f 	bl	800cfac <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800cc8e:	f107 030f 	add.w	r3, r7, #15
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7ff ff10 	bl	800cab8 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	795b      	ldrb	r3, [r3, #5]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d004      	beq.n	800ccaa <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800cca0:	4b05      	ldr	r3, [pc, #20]	@ (800ccb8 <McpsIndication+0xcc>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	701a      	strb	r2, [r3, #0]
 800cca6:	e000      	b.n	800ccaa <McpsIndication+0xbe>
        return;
 800cca8:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800ccaa:	3718      	adds	r7, #24
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	200000a4 	.word	0x200000a4
 800ccb4:	20000620 	.word	0x20000620
 800ccb8:	20000650 	.word	0x20000650

0800ccbc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08c      	sub	sp, #48	@ 0x30
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800ccc4:	4b49      	ldr	r3, [pc, #292]	@ (800cdec <MlmeConfirm+0x130>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	785a      	ldrb	r2, [r3, #1]
 800ccce:	4b47      	ldr	r3, [pc, #284]	@ (800cdec <MlmeConfirm+0x130>)
 800ccd0:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800ccd2:	4b47      	ldr	r3, [pc, #284]	@ (800cdf0 <MlmeConfirm+0x134>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d004      	beq.n	800cce6 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ccdc:	4b44      	ldr	r3, [pc, #272]	@ (800cdf0 <MlmeConfirm+0x134>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce2:	4842      	ldr	r0, [pc, #264]	@ (800cdec <MlmeConfirm+0x130>)
 800cce4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	2002      	movs	r0, #2
 800ccea:	f000 f95f 	bl	800cfac <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	2b0b      	cmp	r3, #11
 800ccf6:	d872      	bhi.n	800cdde <MlmeConfirm+0x122>
 800ccf8:	a201      	add	r2, pc, #4	@ (adr r2, 800cd00 <MlmeConfirm+0x44>)
 800ccfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfe:	bf00      	nop
 800cd00:	0800cd31 	.word	0x0800cd31
 800cd04:	0800cddf 	.word	0x0800cddf
 800cd08:	0800cddf 	.word	0x0800cddf
 800cd0c:	0800cddf 	.word	0x0800cddf
 800cd10:	0800cdad 	.word	0x0800cdad
 800cd14:	0800cddf 	.word	0x0800cddf
 800cd18:	0800cddf 	.word	0x0800cddf
 800cd1c:	0800cddf 	.word	0x0800cddf
 800cd20:	0800cddf 	.word	0x0800cddf
 800cd24:	0800cddf 	.word	0x0800cddf
 800cd28:	0800cdc5 	.word	0x0800cdc5
 800cd2c:	0800cddf 	.word	0x0800cddf
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800cd30:	2306      	movs	r3, #6
 800cd32:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800cd34:	f107 0308 	add.w	r3, r7, #8
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f004 fee7 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800cd3e:	4b2d      	ldr	r3, [pc, #180]	@ (800cdf4 <MlmeConfirm+0x138>)
 800cd40:	79db      	ldrb	r3, [r3, #7]
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	4611      	mov	r1, r2
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff fa74 	bl	800c234 <SecureElementSetDevAddr>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d102      	bne.n	800cd58 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	4a28      	ldr	r2, [pc, #160]	@ (800cdf8 <MlmeConfirm+0x13c>)
 800cd56:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cd58:	4828      	ldr	r0, [pc, #160]	@ (800cdfc <MlmeConfirm+0x140>)
 800cd5a:	f7ff fecd 	bl	800caf8 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800cd5e:	4828      	ldr	r0, [pc, #160]	@ (800ce00 <MlmeConfirm+0x144>)
 800cd60:	f000 fa74 	bl	800d24c <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cd64:	4b21      	ldr	r3, [pc, #132]	@ (800cdec <MlmeConfirm+0x130>)
 800cd66:	785b      	ldrb	r3, [r3, #1]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d108      	bne.n	800cd7e <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cd6c:	4b21      	ldr	r3, [pc, #132]	@ (800cdf4 <MlmeConfirm+0x138>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800cd72:	4b24      	ldr	r3, [pc, #144]	@ (800ce04 <MlmeConfirm+0x148>)
 800cd74:	785b      	ldrb	r3, [r3, #1]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7ff fe16 	bl	800c9a8 <LmHandlerRequestClass>
 800cd7c:	e002      	b.n	800cd84 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cd7e:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf4 <MlmeConfirm+0x138>)
 800cd80:	22ff      	movs	r2, #255	@ 0xff
 800cd82:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800cd84:	4b1a      	ldr	r3, [pc, #104]	@ (800cdf0 <MlmeConfirm+0x134>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d004      	beq.n	800cd98 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cd8e:	4b18      	ldr	r3, [pc, #96]	@ (800cdf0 <MlmeConfirm+0x134>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd94:	4817      	ldr	r0, [pc, #92]	@ (800cdf4 <MlmeConfirm+0x138>)
 800cd96:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cd98:	4b14      	ldr	r3, [pc, #80]	@ (800cdec <MlmeConfirm+0x130>)
 800cd9a:	785b      	ldrb	r3, [r3, #1]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d120      	bne.n	800cde2 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800cda0:	4b14      	ldr	r3, [pc, #80]	@ (800cdf4 <MlmeConfirm+0x138>)
 800cda2:	79db      	ldrb	r3, [r3, #7]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fe ffef 	bl	800bd88 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800cdaa:	e01a      	b.n	800cde2 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800cdac:	4b16      	ldr	r3, [pc, #88]	@ (800ce08 <MlmeConfirm+0x14c>)
 800cdae:	2201      	movs	r2, #1
 800cdb0:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	7a1a      	ldrb	r2, [r3, #8]
 800cdb6:	4b14      	ldr	r3, [pc, #80]	@ (800ce08 <MlmeConfirm+0x14c>)
 800cdb8:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	7a5a      	ldrb	r2, [r3, #9]
 800cdbe:	4b12      	ldr	r3, [pc, #72]	@ (800ce08 <MlmeConfirm+0x14c>)
 800cdc0:	74da      	strb	r2, [r3, #19]
            }
            break;
 800cdc2:	e00f      	b.n	800cde4 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	785b      	ldrb	r3, [r3, #1]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d105      	bne.n	800cdd8 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800cdcc:	4b0d      	ldr	r3, [pc, #52]	@ (800ce04 <MlmeConfirm+0x148>)
 800cdce:	7c1b      	ldrb	r3, [r3, #16]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7ff fddd 	bl	800c990 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800cdd6:	e005      	b.n	800cde4 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800cdd8:	f7ff fdbe 	bl	800c958 <LmHandlerDeviceTimeReq>
            break;
 800cddc:	e002      	b.n	800cde4 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800cdde:	bf00      	nop
 800cde0:	e000      	b.n	800cde4 <MlmeConfirm+0x128>
            break;
 800cde2:	bf00      	nop
    }
}
 800cde4:	bf00      	nop
 800cde6:	3730      	adds	r7, #48	@ 0x30
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20000088 	.word	0x20000088
 800cdf0:	20000620 	.word	0x20000620
 800cdf4:	2000007c 	.word	0x2000007c
 800cdf8:	200005cc 	.word	0x200005cc
 800cdfc:	20000080 	.word	0x20000080
 800ce00:	20000081 	.word	0x20000081
 800ce04:	20000608 	.word	0x20000608
 800ce08:	200000a4 	.word	0x200000a4

0800ce0c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ce16:	4b20      	ldr	r3, [pc, #128]	@ (800ce98 <MlmeIndication+0x8c>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	785a      	ldrb	r2, [r3, #1]
 800ce20:	4b1d      	ldr	r3, [pc, #116]	@ (800ce98 <MlmeIndication+0x8c>)
 800ce22:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	789b      	ldrb	r3, [r3, #2]
 800ce28:	b25a      	sxtb	r2, r3
 800ce2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ce98 <MlmeIndication+0x8c>)
 800ce2c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce34:	b25a      	sxtb	r2, r3
 800ce36:	4b18      	ldr	r3, [pc, #96]	@ (800ce98 <MlmeIndication+0x8c>)
 800ce38:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ce40:	4b15      	ldr	r3, [pc, #84]	@ (800ce98 <MlmeIndication+0x8c>)
 800ce42:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	78da      	ldrb	r2, [r3, #3]
 800ce48:	4b13      	ldr	r3, [pc, #76]	@ (800ce98 <MlmeIndication+0x8c>)
 800ce4a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	4a11      	ldr	r2, [pc, #68]	@ (800ce98 <MlmeIndication+0x8c>)
 800ce52:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800ce54:	4b11      	ldr	r3, [pc, #68]	@ (800ce9c <MlmeIndication+0x90>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00d      	beq.n	800ce7a <MlmeIndication+0x6e>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b0a      	cmp	r3, #10
 800ce64:	d009      	beq.n	800ce7a <MlmeIndication+0x6e>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	2b0e      	cmp	r3, #14
 800ce6c:	d005      	beq.n	800ce7a <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ce6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce9c <MlmeIndication+0x90>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce74:	4908      	ldr	r1, [pc, #32]	@ (800ce98 <MlmeIndication+0x8c>)
 800ce76:	2000      	movs	r0, #0
 800ce78:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ce7a:	6879      	ldr	r1, [r7, #4]
 800ce7c:	2003      	movs	r0, #3
 800ce7e:	f000 f895 	bl	800cfac <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	2b0a      	cmp	r3, #10
 800ce88:	d001      	beq.n	800ce8e <MlmeIndication+0x82>
 800ce8a:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800ce8c:	e000      	b.n	800ce90 <MlmeIndication+0x84>
            break;
 800ce8e:	bf00      	nop
    }
}
 800ce90:	bf00      	nop
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	200000a4 	.word	0x200000a4
 800ce9c:	20000620 	.word	0x20000620

0800cea0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	4603      	mov	r3, r0
 800cea8:	6039      	str	r1, [r7, #0]
 800ceaa:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800ceac:	2300      	movs	r3, #0
 800ceae:	60fb      	str	r3, [r7, #12]
    switch( id )
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d104      	bne.n	800cec0 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800ceb6:	f000 fa8b 	bl	800d3d0 <LmhpCompliancePackageFactory>
 800ceba:	4603      	mov	r3, r0
 800cebc:	60fb      	str	r3, [r7, #12]
                break;
 800cebe:	e00d      	b.n	800cedc <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800cec0:	f107 020c 	add.w	r2, r7, #12
 800cec4:	79fb      	ldrb	r3, [r7, #7]
 800cec6:	4611      	mov	r1, r2
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 ff73 	bl	800ddb4 <LmhpPackagesRegister>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800ced4:	f04f 33ff 	mov.w	r3, #4294967295
 800ced8:	e03b      	b.n	800cf52 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800ceda:	bf00      	nop
            }
    }
    if( package != NULL )
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d035      	beq.n	800cf4e <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	491d      	ldr	r1, [pc, #116]	@ (800cf5c <LmHandlerPackageRegister+0xbc>)
 800cee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	4a1b      	ldr	r2, [pc, #108]	@ (800cf5c <LmHandlerPackageRegister+0xbc>)
 800cef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cef4:	4a1a      	ldr	r2, [pc, #104]	@ (800cf60 <LmHandlerPackageRegister+0xc0>)
 800cef6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800cef8:	4b1a      	ldr	r3, [pc, #104]	@ (800cf64 <LmHandlerPackageRegister+0xc4>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	4917      	ldr	r1, [pc, #92]	@ (800cf5c <LmHandlerPackageRegister+0xbc>)
 800cf00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cf06:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800cf08:	4b16      	ldr	r3, [pc, #88]	@ (800cf64 <LmHandlerPackageRegister+0xc4>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	79fb      	ldrb	r3, [r7, #7]
 800cf0e:	4913      	ldr	r1, [pc, #76]	@ (800cf5c <LmHandlerPackageRegister+0xbc>)
 800cf10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cf16:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cf18:	79fb      	ldrb	r3, [r7, #7]
 800cf1a:	4a10      	ldr	r2, [pc, #64]	@ (800cf5c <LmHandlerPackageRegister+0xbc>)
 800cf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf20:	4a11      	ldr	r2, [pc, #68]	@ (800cf68 <LmHandlerPackageRegister+0xc8>)
 800cf22:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cf24:	4b0f      	ldr	r3, [pc, #60]	@ (800cf64 <LmHandlerPackageRegister+0xc4>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	490c      	ldr	r1, [pc, #48]	@ (800cf5c <LmHandlerPackageRegister+0xbc>)
 800cf2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf30:	6992      	ldr	r2, [r2, #24]
 800cf32:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cf34:	79fb      	ldrb	r3, [r7, #7]
 800cf36:	4a09      	ldr	r2, [pc, #36]	@ (800cf5c <LmHandlerPackageRegister+0xbc>)
 800cf38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	4a0b      	ldr	r2, [pc, #44]	@ (800cf6c <LmHandlerPackageRegister+0xcc>)
 800cf40:	6851      	ldr	r1, [r2, #4]
 800cf42:	4a0a      	ldr	r2, [pc, #40]	@ (800cf6c <LmHandlerPackageRegister+0xcc>)
 800cf44:	7852      	ldrb	r2, [r2, #1]
 800cf46:	6838      	ldr	r0, [r7, #0]
 800cf48:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e001      	b.n	800cf52 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cf4e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	200005f4 	.word	0x200005f4
 800cf60:	0800c641 	.word	0x0800c641
 800cf64:	20000620 	.word	0x20000620
 800cf68:	0800c959 	.word	0x0800c959
 800cf6c:	200000b8 	.word	0x200000b8

0800cf70 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	2b04      	cmp	r3, #4
 800cf7e:	d80e      	bhi.n	800cf9e <LmHandlerPackageIsInitialized+0x2e>
 800cf80:	79fb      	ldrb	r3, [r7, #7]
 800cf82:	4a09      	ldr	r2, [pc, #36]	@ (800cfa8 <LmHandlerPackageIsInitialized+0x38>)
 800cf84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d007      	beq.n	800cf9e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cf8e:	79fb      	ldrb	r3, [r7, #7]
 800cf90:	4a05      	ldr	r2, [pc, #20]	@ (800cfa8 <LmHandlerPackageIsInitialized+0x38>)
 800cf92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	4798      	blx	r3
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	e000      	b.n	800cfa0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cf9e:	2300      	movs	r3, #0
    }
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	200005f4 	.word	0x200005f4

0800cfac <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	6039      	str	r1, [r7, #0]
 800cfb6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cfb8:	2300      	movs	r3, #0
 800cfba:	73fb      	strb	r3, [r7, #15]
 800cfbc:	e067      	b.n	800d08e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfc2:	4a37      	ldr	r2, [pc, #220]	@ (800d0a0 <LmHandlerPackagesNotify+0xf4>)
 800cfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d05a      	beq.n	800d082 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800cfcc:	79fb      	ldrb	r3, [r7, #7]
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d84e      	bhi.n	800d070 <LmHandlerPackagesNotify+0xc4>
 800cfd2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd8 <LmHandlerPackagesNotify+0x2c>)
 800cfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd8:	0800cfe9 	.word	0x0800cfe9
 800cfdc:	0800d00b 	.word	0x0800d00b
 800cfe0:	0800d02d 	.word	0x0800d02d
 800cfe4:	0800d04f 	.word	0x0800d04f
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cfe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfec:	4a2c      	ldr	r2, [pc, #176]	@ (800d0a0 <LmHandlerPackagesNotify+0xf4>)
 800cfee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d03d      	beq.n	800d074 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800cff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cffc:	4a28      	ldr	r2, [pc, #160]	@ (800d0a0 <LmHandlerPackagesNotify+0xf4>)
 800cffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	6838      	ldr	r0, [r7, #0]
 800d006:	4798      	blx	r3
                        }
                        break;
 800d008:	e034      	b.n	800d074 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d00a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d00e:	4a24      	ldr	r2, [pc, #144]	@ (800d0a0 <LmHandlerPackagesNotify+0xf4>)
 800d010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d014:	69db      	ldr	r3, [r3, #28]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d02e      	beq.n	800d078 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800d01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d01e:	4a20      	ldr	r2, [pc, #128]	@ (800d0a0 <LmHandlerPackagesNotify+0xf4>)
 800d020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d024:	69db      	ldr	r3, [r3, #28]
 800d026:	6838      	ldr	r0, [r7, #0]
 800d028:	4798      	blx	r3
                        }
                        break;
 800d02a:	e025      	b.n	800d078 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d02c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d030:	4a1b      	ldr	r2, [pc, #108]	@ (800d0a0 <LmHandlerPackagesNotify+0xf4>)
 800d032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d036:	6a1b      	ldr	r3, [r3, #32]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d01f      	beq.n	800d07c <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800d03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d040:	4a17      	ldr	r2, [pc, #92]	@ (800d0a0 <LmHandlerPackagesNotify+0xf4>)
 800d042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d046:	6a1b      	ldr	r3, [r3, #32]
 800d048:	6838      	ldr	r0, [r7, #0]
 800d04a:	4798      	blx	r3
                        }
                        break;
 800d04c:	e016      	b.n	800d07c <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d052:	4a13      	ldr	r2, [pc, #76]	@ (800d0a0 <LmHandlerPackagesNotify+0xf4>)
 800d054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d010      	beq.n	800d080 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d05e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d062:	4a0f      	ldr	r2, [pc, #60]	@ (800d0a0 <LmHandlerPackagesNotify+0xf4>)
 800d064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d06a:	6838      	ldr	r0, [r7, #0]
 800d06c:	4798      	blx	r3
                        }
                        break;
 800d06e:	e007      	b.n	800d080 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800d070:	bf00      	nop
 800d072:	e006      	b.n	800d082 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d074:	bf00      	nop
 800d076:	e004      	b.n	800d082 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d078:	bf00      	nop
 800d07a:	e002      	b.n	800d082 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d07c:	bf00      	nop
 800d07e:	e000      	b.n	800d082 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d080:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d086:	b2db      	uxtb	r3, r3
 800d088:	3301      	adds	r3, #1
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	73fb      	strb	r3, [r7, #15]
 800d08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d092:	2b04      	cmp	r3, #4
 800d094:	dd93      	ble.n	800cfbe <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	200005f4 	.word	0x200005f4

0800d0a4 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	71fb      	strb	r3, [r7, #7]
 800d0ae:	e018      	b.n	800d0e2 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800d0b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0b4:	4a0f      	ldr	r2, [pc, #60]	@ (800d0f4 <LmHandlerPackageIsTxPending+0x50>)
 800d0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00b      	beq.n	800d0d6 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d0be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0c2:	4a0c      	ldr	r2, [pc, #48]	@ (800d0f4 <LmHandlerPackageIsTxPending+0x50>)
 800d0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	4798      	blx	r3
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d001      	beq.n	800d0d6 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e00a      	b.n	800d0ec <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	3301      	adds	r3, #1
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	71fb      	strb	r3, [r7, #7]
 800d0e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0e6:	2b04      	cmp	r3, #4
 800d0e8:	dde2      	ble.n	800d0b0 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3708      	adds	r7, #8
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	200005f4 	.word	0x200005f4

0800d0f8 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0fe:	2300      	movs	r3, #0
 800d100:	71fb      	strb	r3, [r7, #7]
 800d102:	e022      	b.n	800d14a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d108:	4a14      	ldr	r2, [pc, #80]	@ (800d15c <LmHandlerPackagesProcess+0x64>)
 800d10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d015      	beq.n	800d13e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d116:	4a11      	ldr	r2, [pc, #68]	@ (800d15c <LmHandlerPackagesProcess+0x64>)
 800d118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00d      	beq.n	800d13e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d122:	79fb      	ldrb	r3, [r7, #7]
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff ff23 	bl	800cf70 <LmHandlerPackageIsInitialized>
 800d12a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d006      	beq.n	800d13e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d134:	4a09      	ldr	r2, [pc, #36]	@ (800d15c <LmHandlerPackagesProcess+0x64>)
 800d136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d142:	b2db      	uxtb	r3, r3
 800d144:	3301      	adds	r3, #1
 800d146:	b2db      	uxtb	r3, r3
 800d148:	71fb      	strb	r3, [r7, #7]
 800d14a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d14e:	2b04      	cmp	r3, #4
 800d150:	ddd8      	ble.n	800d104 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d152:	bf00      	nop
 800d154:	bf00      	nop
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	200005f4 	.word	0x200005f4

0800d160 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	4603      	mov	r3, r0
 800d168:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d16a:	4a09      	ldr	r2, [pc, #36]	@ (800d190 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800d16c:	79fb      	ldrb	r3, [r7, #7]
 800d16e:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800d170:	4b08      	ldr	r3, [pc, #32]	@ (800d194 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d176:	2b00      	cmp	r3, #0
 800d178:	d005      	beq.n	800d186 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800d17a:	4b06      	ldr	r3, [pc, #24]	@ (800d194 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d180:	79fa      	ldrb	r2, [r7, #7]
 800d182:	4610      	mov	r0, r2
 800d184:	4798      	blx	r3
    }
}
 800d186:	bf00      	nop
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20000608 	.word	0x20000608
 800d194:	20000620 	.word	0x20000620

0800d198 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	4603      	mov	r3, r0
 800d1a0:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d1a2:	4a09      	ldr	r2, [pc, #36]	@ (800d1c8 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800d1a8:	4b08      	ldr	r3, [pc, #32]	@ (800d1cc <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d005      	beq.n	800d1be <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800d1b2:	4b06      	ldr	r3, [pc, #24]	@ (800d1cc <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1b8:	79fa      	ldrb	r2, [r7, #7]
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	4798      	blx	r3
    }
}
 800d1be:	bf00      	nop
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20000608 	.word	0x20000608
 800d1cc:	20000620 	.word	0x20000620

0800d1d0 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	6039      	str	r1, [r7, #0]
 800d1da:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d102      	bne.n	800d1e8 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e6:	e00e      	b.n	800d206 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800d1e8:	79fb      	ldrb	r3, [r7, #7]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d002      	beq.n	800d1f4 <LmHandlerGetVersion+0x24>
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d004      	beq.n	800d1fc <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800d1f2:	e007      	b.n	800d204 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	4a06      	ldr	r2, [pc, #24]	@ (800d210 <LmHandlerGetVersion+0x40>)
 800d1f8:	601a      	str	r2, [r3, #0]
            break;
 800d1fa:	e003      	b.n	800d204 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	4a05      	ldr	r2, [pc, #20]	@ (800d214 <LmHandlerGetVersion+0x44>)
 800d200:	601a      	str	r2, [r3, #0]
            break;
 800d202:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	370c      	adds	r7, #12
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bc80      	pop	{r7}
 800d20e:	4770      	bx	lr
 800d210:	01000400 	.word	0x01000400
 800d214:	02010003 	.word	0x02010003

0800d218 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800d21c:	f005 fd52 	bl	8012cc4 <LoRaMacDeInitialization>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d101      	bne.n	800d22a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d226:	2300      	movs	r3, #0
 800d228:	e001      	b.n	800d22e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d22a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d22e:	4618      	mov	r0, r3
 800d230:	bd80      	pop	{r7, pc}

0800d232 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800d232:	b580      	push	{r7, lr}
 800d234:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800d236:	f004 fba1 	bl	801197c <LoRaMacHalt>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d101      	bne.n	800d244 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d240:	2300      	movs	r3, #0
 800d242:	e001      	b.n	800d248 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d244:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d248:	4618      	mov	r0, r3
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08c      	sub	sp, #48	@ 0x30
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d102      	bne.n	800d260 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d25a:	f04f 33ff 	mov.w	r3, #4294967295
 800d25e:	e016      	b.n	800d28e <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d260:	2321      	movs	r3, #33	@ 0x21
 800d262:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d264:	f107 0308 	add.w	r3, r7, #8
 800d268:	4618      	mov	r0, r3
 800d26a:	f004 fc4f 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d274:	f04f 33ff 	mov.w	r3, #4294967295
 800d278:	e009      	b.n	800d28e <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800d27a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f993 2000 	ldrsb.w	r2, [r3]
 800d288:	4b03      	ldr	r3, [pc, #12]	@ (800d298 <LmHandlerGetTxPower+0x4c>)
 800d28a:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3730      	adds	r7, #48	@ 0x30
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	20000608 	.word	0x20000608

0800d29c <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b08e      	sub	sp, #56	@ 0x38
 800d2a0:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800d2ac:	f7ff ffc1 	bl	800d232 <LmHandlerHalt>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800d2b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d12f      	bne.n	800d31e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d2be:	f000 f859 	bl	800d374 <NvmDataMgmtStoreBegin>
 800d2c2:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800d2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c6:	f113 0f02 	cmn.w	r3, #2
 800d2ca:	d103      	bne.n	800d2d4 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d2cc:	23f8      	movs	r3, #248	@ 0xf8
 800d2ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d2d2:	e01c      	b.n	800d30e <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d104      	bne.n	800d2e4 <LmHandlerNvmDataStore+0x48>
 800d2da:	4b1b      	ldr	r3, [pc, #108]	@ (800d348 <LmHandlerNvmDataStore+0xac>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d103      	bne.n	800d2ec <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d2e4:	23ff      	movs	r3, #255	@ 0xff
 800d2e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d2ea:	e010      	b.n	800d30e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800d2ec:	2327      	movs	r3, #39	@ 0x27
 800d2ee:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d2f0:	463b      	mov	r3, r7
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f004 fc0a 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800d2fc:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800d300:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800d302:	4b11      	ldr	r3, [pc, #68]	@ (800d348 <LmHandlerNvmDataStore+0xac>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	695b      	ldr	r3, [r3, #20]
 800d308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d30a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d30c:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d30e:	f000 f847 	bl	800d3a0 <NvmDataMgmtStoreEnd>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d002      	beq.n	800d31e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d318:	23ff      	movs	r3, #255	@ 0xff
 800d31a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800d31e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d322:	2b00      	cmp	r3, #0
 800d324:	d109      	bne.n	800d33a <LmHandlerNvmDataStore+0x9e>
 800d326:	4b08      	ldr	r3, [pc, #32]	@ (800d348 <LmHandlerNvmDataStore+0xac>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	69db      	ldr	r3, [r3, #28]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d004      	beq.n	800d33a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d330:	4b05      	ldr	r3, [pc, #20]	@ (800d348 <LmHandlerNvmDataStore+0xac>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	69db      	ldr	r3, [r3, #28]
 800d336:	2001      	movs	r0, #1
 800d338:	4798      	blx	r3
    }

    return lmhStatus;
 800d33a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3738      	adds	r7, #56	@ 0x38
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	20000620 	.word	0x20000620

0800d34c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	4603      	mov	r3, r0
 800d354:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d356:	4b06      	ldr	r3, [pc, #24]	@ (800d370 <NvmDataMgmtEvent+0x24>)
 800d358:	881a      	ldrh	r2, [r3, #0]
 800d35a:	88fb      	ldrh	r3, [r7, #6]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	b29a      	uxth	r2, r3
 800d360:	4b03      	ldr	r3, [pc, #12]	@ (800d370 <NvmDataMgmtEvent+0x24>)
 800d362:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	bc80      	pop	{r7}
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	20000748 	.word	0x20000748

0800d374 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d378:	4b08      	ldr	r3, [pc, #32]	@ (800d39c <NvmDataMgmtStoreBegin+0x28>)
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d102      	bne.n	800d386 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800d380:	f06f 0301 	mvn.w	r3, #1
 800d384:	e008      	b.n	800d398 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d386:	f004 fad1 	bl	801192c <LoRaMacStop>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d390:	f06f 0302 	mvn.w	r3, #2
 800d394:	e000      	b.n	800d398 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d396:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d398:	4618      	mov	r0, r3
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	20000748 	.word	0x20000748

0800d3a0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d3a4:	4b03      	ldr	r3, [pc, #12]	@ (800d3b4 <NvmDataMgmtStoreEnd+0x14>)
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800d3aa:	f004 fab1 	bl	8011910 <LoRaMacStart>
    return NVM_DATA_OK;
 800d3ae:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	20000748 	.word	0x20000748

0800d3b8 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d3bc:	2220      	movs	r2, #32
 800d3be:	2100      	movs	r1, #0
 800d3c0:	4802      	ldr	r0, [pc, #8]	@ (800d3cc <ClassBStatusReset+0x14>)
 800d3c2:	f009 ff5b 	bl	801727c <memset1>
}
 800d3c6:	bf00      	nop
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20000760 	.word	0x20000760

0800d3d0 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d3d4:	4b02      	ldr	r3, [pc, #8]	@ (800d3e0 <LmhpCompliancePackageFactory+0x10>)
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bc80      	pop	{r7}
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	200000c0 	.word	0x200000c0

0800d3e4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d018      	beq.n	800d42a <LmhpComplianceInit+0x46>
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d015      	beq.n	800d42a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800d3fe:	4a19      	ldr	r2, [pc, #100]	@ (800d464 <LmhpComplianceInit+0x80>)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d404:	4a18      	ldr	r2, [pc, #96]	@ (800d468 <LmhpComplianceInit+0x84>)
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d40a:	4a17      	ldr	r2, [pc, #92]	@ (800d468 <LmhpComplianceInit+0x84>)
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d410:	4b15      	ldr	r3, [pc, #84]	@ (800d468 <LmhpComplianceInit+0x84>)
 800d412:	2201      	movs	r2, #1
 800d414:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d416:	2300      	movs	r3, #0
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	4b14      	ldr	r3, [pc, #80]	@ (800d46c <LmhpComplianceInit+0x88>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	f04f 31ff 	mov.w	r1, #4294967295
 800d422:	4813      	ldr	r0, [pc, #76]	@ (800d470 <LmhpComplianceInit+0x8c>)
 800d424:	f00d ff64 	bl	801b2f0 <UTIL_TIMER_Create>
 800d428:	e005      	b.n	800d436 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d42a:	4b0e      	ldr	r3, [pc, #56]	@ (800d464 <LmhpComplianceInit+0x80>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d430:	4b0d      	ldr	r3, [pc, #52]	@ (800d468 <LmhpComplianceInit+0x84>)
 800d432:	2200      	movs	r2, #0
 800d434:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d436:	4b0c      	ldr	r3, [pc, #48]	@ (800d468 <LmhpComplianceInit+0x84>)
 800d438:	2200      	movs	r2, #0
 800d43a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d43c:	f7ff ffbc 	bl	800d3b8 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d440:	4b09      	ldr	r3, [pc, #36]	@ (800d468 <LmhpComplianceInit+0x84>)
 800d442:	2200      	movs	r2, #0
 800d444:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d446:	4b08      	ldr	r3, [pc, #32]	@ (800d468 <LmhpComplianceInit+0x84>)
 800d448:	2200      	movs	r2, #0
 800d44a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d44c:	4b06      	ldr	r3, [pc, #24]	@ (800d468 <LmhpComplianceInit+0x84>)
 800d44e:	2200      	movs	r2, #0
 800d450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d454:	4b04      	ldr	r3, [pc, #16]	@ (800d468 <LmhpComplianceInit+0x84>)
 800d456:	2200      	movs	r2, #0
 800d458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800d45c:	bf00      	nop
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	20000784 	.word	0x20000784
 800d468:	2000074c 	.word	0x2000074c
 800d46c:	0800dd6d 	.word	0x0800dd6d
 800d470:	20000788 	.word	0x20000788

0800d474 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d474:	b480      	push	{r7}
 800d476:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d478:	4b02      	ldr	r3, [pc, #8]	@ (800d484 <LmhpComplianceIsInitialized+0x10>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	46bd      	mov	sp, r7
 800d480:	bc80      	pop	{r7}
 800d482:	4770      	bx	lr
 800d484:	2000074c 	.word	0x2000074c

0800d488 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d488:	b480      	push	{r7}
 800d48a:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d48c:	4b02      	ldr	r3, [pc, #8]	@ (800d498 <LmhpComplianceIsTxPending+0x10>)
 800d48e:	785b      	ldrb	r3, [r3, #1]
}
 800d490:	4618      	mov	r0, r3
 800d492:	46bd      	mov	sp, r7
 800d494:	bc80      	pop	{r7}
 800d496:	4770      	bx	lr
 800d498:	2000074c 	.word	0x2000074c

0800d49c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d49c:	b590      	push	{r4, r7, lr}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d4a2:	4b33      	ldr	r3, [pc, #204]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d4a4:	785b      	ldrb	r3, [r3, #1]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d03e      	beq.n	800d528 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d4aa:	f00e f8df 	bl	801b66c <UTIL_TIMER_GetCurrentTime>
 800d4ae:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d4b0:	4b2f      	ldr	r3, [pc, #188]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d4b2:	685c      	ldr	r4, [r3, #4]
 800d4b4:	f7ff f8ba 	bl	800c62c <LmHandlerGetDutyCycleWaitTime>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	4423      	add	r3, r4
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d941      	bls.n	800d546 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d4c2:	4b2b      	ldr	r3, [pc, #172]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d4c4:	7a9b      	ldrb	r3, [r3, #10]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d03d      	beq.n	800d546 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800d4ca:	23e0      	movs	r3, #224	@ 0xe0
 800d4cc:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d4ce:	4b28      	ldr	r3, [pc, #160]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d4d0:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800d4d2:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d4d4:	4b26      	ldr	r3, [pc, #152]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d4d6:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800d4d8:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d4da:	23ff      	movs	r3, #255	@ 0xff
 800d4dc:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d4de:	4b24      	ldr	r3, [pc, #144]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d4e0:	7a19      	ldrb	r1, [r3, #8]
 800d4e2:	463b      	mov	r3, r7
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7ff f968 	bl	800c7bc <LmHandlerSend>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800d4f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d004      	beq.n	800d502 <LmhpComplianceProcess+0x66>
 800d4f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d4fc:	f113 0f07 	cmn.w	r3, #7
 800d500:	d106      	bne.n	800d510 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800d502:	4b1b      	ldr	r3, [pc, #108]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d504:	2200      	movs	r2, #0
 800d506:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d508:	4b19      	ldr	r3, [pc, #100]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	729a      	strb	r2, [r3, #10]
 800d50e:	e007      	b.n	800d520 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800d510:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800d514:	4817      	ldr	r0, [pc, #92]	@ (800d574 <LmhpComplianceProcess+0xd8>)
 800d516:	f00d ffff 	bl	801b518 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800d51a:	4816      	ldr	r0, [pc, #88]	@ (800d574 <LmhpComplianceProcess+0xd8>)
 800d51c:	f00d ff1e 	bl	801b35c <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800d520:	4a13      	ldr	r2, [pc, #76]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6053      	str	r3, [r2, #4]
 800d526:	e00e      	b.n	800d546 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d528:	4b11      	ldr	r3, [pc, #68]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d52a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d009      	beq.n	800d546 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d532:	4b0f      	ldr	r3, [pc, #60]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d534:	2200      	movs	r2, #0
 800d536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d53a:	4b0d      	ldr	r3, [pc, #52]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d53c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fa31 	bl	800c9a8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d546:	4b0a      	ldr	r3, [pc, #40]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d548:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00a      	beq.n	800d566 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d550:	4b07      	ldr	r3, [pc, #28]	@ (800d570 <LmhpComplianceProcess+0xd4>)
 800d552:	2200      	movs	r2, #0
 800d554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800d558:	4b07      	ldr	r3, [pc, #28]	@ (800d578 <LmhpComplianceProcess+0xdc>)
 800d55a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800d560:	4b05      	ldr	r3, [pc, #20]	@ (800d578 <LmhpComplianceProcess+0xdc>)
 800d562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d564:	4798      	blx	r3
        }
    }
}
 800d566:	bf00      	nop
 800d568:	3714      	adds	r7, #20
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd90      	pop	{r4, r7, pc}
 800d56e:	bf00      	nop
 800d570:	2000074c 	.word	0x2000074c
 800d574:	20000788 	.word	0x20000788
 800d578:	200000c0 	.word	0x200000c0

0800d57c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800d57c:	b5b0      	push	{r4, r5, r7, lr}
 800d57e:	b0a4      	sub	sp, #144	@ 0x90
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d584:	2300      	movs	r3, #0
 800d586:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d58a:	4bd0      	ldr	r3, [pc, #832]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	f083 0301 	eor.w	r3, r3, #1
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b00      	cmp	r3, #0
 800d596:	f040 83bf 	bne.w	800dd18 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	78db      	ldrb	r3, [r3, #3]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d103      	bne.n	800d5aa <LmhpComplianceOnMcpsIndication+0x2e>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	7b9b      	ldrb	r3, [r3, #14]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d005      	beq.n	800d5b6 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d5aa:	4bc8      	ldr	r3, [pc, #800]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d5ac:	8a1b      	ldrh	r3, [r3, #16]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	4bc6      	ldr	r3, [pc, #792]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d5b4:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	7b5b      	ldrb	r3, [r3, #13]
 800d5ba:	f083 0301 	eor.w	r3, r3, #1
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f040 83ab 	bne.w	800dd1c <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	78db      	ldrb	r3, [r3, #3]
 800d5ca:	2be0      	cmp	r3, #224	@ 0xe0
 800d5cc:	f040 83a8 	bne.w	800dd20 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d5d0:	4bbe      	ldr	r3, [pc, #760]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	689a      	ldr	r2, [r3, #8]
 800d5da:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5de:	1c59      	adds	r1, r3, #1
 800d5e0:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d5e4:	4413      	add	r3, r2
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5ea:	f200 8372 	bhi.w	800dcd2 <LmhpComplianceOnMcpsIndication+0x756>
 800d5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d5f4 <LmhpComplianceOnMcpsIndication+0x78>)
 800d5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f4:	0800d7f5 	.word	0x0800d7f5
 800d5f8:	0800d839 	.word	0x0800d839
 800d5fc:	0800d843 	.word	0x0800d843
 800d600:	0800d859 	.word	0x0800d859
 800d604:	0800d87b 	.word	0x0800d87b
 800d608:	0800d8a9 	.word	0x0800d8a9
 800d60c:	0800d8d5 	.word	0x0800d8d5
 800d610:	0800d933 	.word	0x0800d933
 800d614:	0800d98b 	.word	0x0800d98b
 800d618:	0800d9f7 	.word	0x0800d9f7
 800d61c:	0800da47 	.word	0x0800da47
 800d620:	0800dcd3 	.word	0x0800dcd3
 800d624:	0800dcd3 	.word	0x0800dcd3
 800d628:	0800dcd3 	.word	0x0800dcd3
 800d62c:	0800dcd3 	.word	0x0800dcd3
 800d630:	0800dcd3 	.word	0x0800dcd3
 800d634:	0800dcd3 	.word	0x0800dcd3
 800d638:	0800dcd3 	.word	0x0800dcd3
 800d63c:	0800dcd3 	.word	0x0800dcd3
 800d640:	0800dcd3 	.word	0x0800dcd3
 800d644:	0800dcd3 	.word	0x0800dcd3
 800d648:	0800dcd3 	.word	0x0800dcd3
 800d64c:	0800dcd3 	.word	0x0800dcd3
 800d650:	0800dcd3 	.word	0x0800dcd3
 800d654:	0800dcd3 	.word	0x0800dcd3
 800d658:	0800dcd3 	.word	0x0800dcd3
 800d65c:	0800dcd3 	.word	0x0800dcd3
 800d660:	0800dcd3 	.word	0x0800dcd3
 800d664:	0800dcd3 	.word	0x0800dcd3
 800d668:	0800dcd3 	.word	0x0800dcd3
 800d66c:	0800dcd3 	.word	0x0800dcd3
 800d670:	0800dcd3 	.word	0x0800dcd3
 800d674:	0800da4f 	.word	0x0800da4f
 800d678:	0800da61 	.word	0x0800da61
 800d67c:	0800da69 	.word	0x0800da69
 800d680:	0800dcd3 	.word	0x0800dcd3
 800d684:	0800dcd3 	.word	0x0800dcd3
 800d688:	0800dcd3 	.word	0x0800dcd3
 800d68c:	0800dcd3 	.word	0x0800dcd3
 800d690:	0800dcd3 	.word	0x0800dcd3
 800d694:	0800dcd3 	.word	0x0800dcd3
 800d698:	0800dcd3 	.word	0x0800dcd3
 800d69c:	0800dcd3 	.word	0x0800dcd3
 800d6a0:	0800dcd3 	.word	0x0800dcd3
 800d6a4:	0800dcd3 	.word	0x0800dcd3
 800d6a8:	0800dcd3 	.word	0x0800dcd3
 800d6ac:	0800dcd3 	.word	0x0800dcd3
 800d6b0:	0800dcd3 	.word	0x0800dcd3
 800d6b4:	0800dcd3 	.word	0x0800dcd3
 800d6b8:	0800dcd3 	.word	0x0800dcd3
 800d6bc:	0800dcd3 	.word	0x0800dcd3
 800d6c0:	0800dcd3 	.word	0x0800dcd3
 800d6c4:	0800dcd3 	.word	0x0800dcd3
 800d6c8:	0800dcd3 	.word	0x0800dcd3
 800d6cc:	0800dcd3 	.word	0x0800dcd3
 800d6d0:	0800dcd3 	.word	0x0800dcd3
 800d6d4:	0800dcd3 	.word	0x0800dcd3
 800d6d8:	0800dcd3 	.word	0x0800dcd3
 800d6dc:	0800dcd3 	.word	0x0800dcd3
 800d6e0:	0800dcd3 	.word	0x0800dcd3
 800d6e4:	0800dcd3 	.word	0x0800dcd3
 800d6e8:	0800dcd3 	.word	0x0800dcd3
 800d6ec:	0800dcd3 	.word	0x0800dcd3
 800d6f0:	0800dcd3 	.word	0x0800dcd3
 800d6f4:	0800dcd3 	.word	0x0800dcd3
 800d6f8:	0800dcd3 	.word	0x0800dcd3
 800d6fc:	0800dcd3 	.word	0x0800dcd3
 800d700:	0800dcd3 	.word	0x0800dcd3
 800d704:	0800dcd3 	.word	0x0800dcd3
 800d708:	0800dcd3 	.word	0x0800dcd3
 800d70c:	0800dcd3 	.word	0x0800dcd3
 800d710:	0800dcd3 	.word	0x0800dcd3
 800d714:	0800dcd3 	.word	0x0800dcd3
 800d718:	0800dcd3 	.word	0x0800dcd3
 800d71c:	0800dcd3 	.word	0x0800dcd3
 800d720:	0800dcd3 	.word	0x0800dcd3
 800d724:	0800dcd3 	.word	0x0800dcd3
 800d728:	0800dcd3 	.word	0x0800dcd3
 800d72c:	0800dcd3 	.word	0x0800dcd3
 800d730:	0800dcd3 	.word	0x0800dcd3
 800d734:	0800dcd3 	.word	0x0800dcd3
 800d738:	0800dcd3 	.word	0x0800dcd3
 800d73c:	0800dcd3 	.word	0x0800dcd3
 800d740:	0800dcd3 	.word	0x0800dcd3
 800d744:	0800dcd3 	.word	0x0800dcd3
 800d748:	0800dcd3 	.word	0x0800dcd3
 800d74c:	0800dcd3 	.word	0x0800dcd3
 800d750:	0800dcd3 	.word	0x0800dcd3
 800d754:	0800dcd3 	.word	0x0800dcd3
 800d758:	0800dcd3 	.word	0x0800dcd3
 800d75c:	0800dcd3 	.word	0x0800dcd3
 800d760:	0800dcd3 	.word	0x0800dcd3
 800d764:	0800dcd3 	.word	0x0800dcd3
 800d768:	0800dcd3 	.word	0x0800dcd3
 800d76c:	0800dcd3 	.word	0x0800dcd3
 800d770:	0800dcd3 	.word	0x0800dcd3
 800d774:	0800dcd3 	.word	0x0800dcd3
 800d778:	0800dcd3 	.word	0x0800dcd3
 800d77c:	0800dcd3 	.word	0x0800dcd3
 800d780:	0800dcd3 	.word	0x0800dcd3
 800d784:	0800dcd3 	.word	0x0800dcd3
 800d788:	0800dcd3 	.word	0x0800dcd3
 800d78c:	0800dcd3 	.word	0x0800dcd3
 800d790:	0800dcd3 	.word	0x0800dcd3
 800d794:	0800dcd3 	.word	0x0800dcd3
 800d798:	0800dcd3 	.word	0x0800dcd3
 800d79c:	0800dcd3 	.word	0x0800dcd3
 800d7a0:	0800dcd3 	.word	0x0800dcd3
 800d7a4:	0800dcd3 	.word	0x0800dcd3
 800d7a8:	0800dcd3 	.word	0x0800dcd3
 800d7ac:	0800dcd3 	.word	0x0800dcd3
 800d7b0:	0800dcd3 	.word	0x0800dcd3
 800d7b4:	0800dcd3 	.word	0x0800dcd3
 800d7b8:	0800dcd3 	.word	0x0800dcd3
 800d7bc:	0800dcd3 	.word	0x0800dcd3
 800d7c0:	0800dcd3 	.word	0x0800dcd3
 800d7c4:	0800dcd3 	.word	0x0800dcd3
 800d7c8:	0800dcd3 	.word	0x0800dcd3
 800d7cc:	0800dcd3 	.word	0x0800dcd3
 800d7d0:	0800dcd3 	.word	0x0800dcd3
 800d7d4:	0800dcd3 	.word	0x0800dcd3
 800d7d8:	0800dcd3 	.word	0x0800dcd3
 800d7dc:	0800dcd3 	.word	0x0800dcd3
 800d7e0:	0800dcd3 	.word	0x0800dcd3
 800d7e4:	0800dcd3 	.word	0x0800dcd3
 800d7e8:	0800da9b 	.word	0x0800da9b
 800d7ec:	0800db4d 	.word	0x0800db4d
 800d7f0:	0800db7d 	.word	0x0800db7d
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d7f4:	4b35      	ldr	r3, [pc, #212]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d7f6:	68da      	ldr	r2, [r3, #12]
 800d7f8:	4b34      	ldr	r3, [pc, #208]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d7fa:	7a9b      	ldrb	r3, [r3, #10]
 800d7fc:	1c59      	adds	r1, r3, #1
 800d7fe:	b2c8      	uxtb	r0, r1
 800d800:	4932      	ldr	r1, [pc, #200]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d802:	7288      	strb	r0, [r1, #10]
 800d804:	4413      	add	r3, r2
 800d806:	2200      	movs	r2, #0
 800d808:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d80a:	4b30      	ldr	r3, [pc, #192]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d80c:	68da      	ldr	r2, [r3, #12]
 800d80e:	4b2f      	ldr	r3, [pc, #188]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d810:	7a9b      	ldrb	r3, [r3, #10]
 800d812:	1c59      	adds	r1, r3, #1
 800d814:	b2c8      	uxtb	r0, r1
 800d816:	492d      	ldr	r1, [pc, #180]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d818:	7288      	strb	r0, [r1, #10]
 800d81a:	4413      	add	r3, r2
 800d81c:	2206      	movs	r2, #6
 800d81e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d820:	4b2a      	ldr	r3, [pc, #168]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d822:	68da      	ldr	r2, [r3, #12]
 800d824:	4b29      	ldr	r3, [pc, #164]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d826:	7a9b      	ldrb	r3, [r3, #10]
 800d828:	1c59      	adds	r1, r3, #1
 800d82a:	b2c8      	uxtb	r0, r1
 800d82c:	4927      	ldr	r1, [pc, #156]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d82e:	7288      	strb	r0, [r1, #10]
 800d830:	4413      	add	r3, r2
 800d832:	2201      	movs	r2, #1
 800d834:	701a      	strb	r2, [r3, #0]
                break;
 800d836:	e257      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800d838:	4b24      	ldr	r3, [pc, #144]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d83a:	2201      	movs	r2, #1
 800d83c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800d840:	e252      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800d842:	4b23      	ldr	r3, [pc, #140]	@ (800d8d0 <LmhpComplianceOnMcpsIndication+0x354>)
 800d844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d846:	2b00      	cmp	r3, #0
 800d848:	f000 8245 	beq.w	800dcd6 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d84c:	4b20      	ldr	r3, [pc, #128]	@ (800d8d0 <LmhpComplianceOnMcpsIndication+0x354>)
 800d84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d850:	2101      	movs	r1, #1
 800d852:	2002      	movs	r0, #2
 800d854:	4798      	blx	r3
                }
                break;
 800d856:	e23e      	b.n	800dcd6 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	689a      	ldr	r2, [r3, #8]
 800d85c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d860:	1c59      	adds	r1, r3, #1
 800d862:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d866:	4413      	add	r3, r2
 800d868:	781a      	ldrb	r2, [r3, #0]
 800d86a:	4b18      	ldr	r3, [pc, #96]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d86c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800d870:	4b16      	ldr	r3, [pc, #88]	@ (800d8cc <LmhpComplianceOnMcpsIndication+0x350>)
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800d878:	e236      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800d87a:	2304      	movs	r3, #4
 800d87c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	689a      	ldr	r2, [r3, #8]
 800d882:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d886:	1c59      	adds	r1, r3, #1
 800d888:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d88c:	4413      	add	r3, r2
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	bf14      	ite	ne
 800d894:	2301      	movne	r3, #1
 800d896:	2300      	moveq	r3, #0
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800d89c:	f107 0308 	add.w	r3, r7, #8
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f004 fb0b 	bl	8011ebc <LoRaMacMibSetRequestConfirm>
                break;
 800d8a6:	e21f      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	689a      	ldr	r2, [r3, #8]
 800d8ac:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d8b0:	1c59      	adds	r1, r3, #1
 800d8b2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d8b6:	4413      	add	r3, r2
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	bf14      	ite	ne
 800d8be:	2301      	movne	r3, #1
 800d8c0:	2300      	moveq	r3, #0
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f005 f9d7 	bl	8012c78 <LoRaMacTestSetDutyCycleOn>
                break;
 800d8ca:	e20d      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
 800d8cc:	2000074c 	.word	0x2000074c
 800d8d0:	200000c0 	.word	0x200000c0
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d8d4:	4ba5      	ldr	r3, [pc, #660]	@ (800db6c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d8d6:	f107 0408 	add.w	r4, r7, #8
 800d8da:	461d      	mov	r5, r3
 800d8dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d8e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	689a      	ldr	r2, [r3, #8]
 800d8f0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d8f4:	1c59      	adds	r1, r3, #1
 800d8f6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d8fa:	4413      	add	r3, r2
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d902:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d906:	2b0a      	cmp	r3, #10
 800d908:	f200 81e7 	bhi.w	800dcda <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d90c:	4b98      	ldr	r3, [pc, #608]	@ (800db70 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f000 81e1 	beq.w	800dcda <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d918:	4b95      	ldr	r3, [pc, #596]	@ (800db70 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	685a      	ldr	r2, [r3, #4]
 800d91e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	3390      	adds	r3, #144	@ 0x90
 800d926:	443b      	add	r3, r7
 800d928:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800d92c:	4618      	mov	r0, r3
 800d92e:	4790      	blx	r2
                    }
                }
                break;
 800d930:	e1d3      	b.n	800dcda <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	689a      	ldr	r2, [r3, #8]
 800d936:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d93a:	1c59      	adds	r1, r3, #1
 800d93c:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d940:	4413      	add	r3, r2
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d948:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d004      	beq.n	800d95a <LmhpComplianceOnMcpsIndication+0x3de>
 800d950:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d954:	2b02      	cmp	r3, #2
 800d956:	f040 81c2 	bne.w	800dcde <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d95a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d95e:	2b01      	cmp	r3, #1
 800d960:	bf14      	ite	ne
 800d962:	2301      	movne	r3, #1
 800d964:	2300      	moveq	r3, #0
 800d966:	b2db      	uxtb	r3, r3
 800d968:	461a      	mov	r2, r3
 800d96a:	4b82      	ldr	r3, [pc, #520]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d96c:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d96e:	4b80      	ldr	r3, [pc, #512]	@ (800db70 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 81b2 	beq.w	800dcde <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d97a:	4b7d      	ldr	r3, [pc, #500]	@ (800db70 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	4a7c      	ldr	r2, [pc, #496]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d982:	7a12      	ldrb	r2, [r2, #8]
 800d984:	4610      	mov	r0, r2
 800d986:	4798      	blx	r3
                    }
                }
                break;
 800d988:	e1a9      	b.n	800dcde <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d98a:	4b7a      	ldr	r3, [pc, #488]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d98c:	68da      	ldr	r2, [r3, #12]
 800d98e:	4b79      	ldr	r3, [pc, #484]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d990:	7a9b      	ldrb	r3, [r3, #10]
 800d992:	1c59      	adds	r1, r3, #1
 800d994:	b2c8      	uxtb	r0, r1
 800d996:	4977      	ldr	r1, [pc, #476]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d998:	7288      	strb	r0, [r1, #10]
 800d99a:	4413      	add	r3, r2
 800d99c:	2208      	movs	r2, #8
 800d99e:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800d9a6:	e019      	b.n	800d9dc <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	689a      	ldr	r2, [r3, #8]
 800d9ac:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d9b0:	1c59      	adds	r1, r3, #1
 800d9b2:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d9b6:	4413      	add	r3, r2
 800d9b8:	781a      	ldrb	r2, [r3, #0]
 800d9ba:	4b6e      	ldr	r3, [pc, #440]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d9bc:	68d9      	ldr	r1, [r3, #12]
 800d9be:	4b6d      	ldr	r3, [pc, #436]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d9c0:	7a9b      	ldrb	r3, [r3, #10]
 800d9c2:	1c58      	adds	r0, r3, #1
 800d9c4:	b2c4      	uxtb	r4, r0
 800d9c6:	486b      	ldr	r0, [pc, #428]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d9c8:	7284      	strb	r4, [r0, #10]
 800d9ca:	440b      	add	r3, r1
 800d9cc:	3201      	adds	r2, #1
 800d9ce:	b2d2      	uxtb	r2, r2
 800d9d0:	701a      	strb	r2, [r3, #0]
                     i++ )
 800d9d2:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d9dc:	4b65      	ldr	r3, [pc, #404]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d9de:	7a5a      	ldrb	r2, [r3, #9]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7b1b      	ldrb	r3, [r3, #12]
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	bf28      	it	cs
 800d9e8:	4613      	movcs	r3, r2
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d3d9      	bcc.n	800d9a8 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800d9f4:	e178      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d9f6:	4b5f      	ldr	r3, [pc, #380]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d9f8:	68da      	ldr	r2, [r3, #12]
 800d9fa:	4b5e      	ldr	r3, [pc, #376]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d9fc:	7a9b      	ldrb	r3, [r3, #10]
 800d9fe:	1c59      	adds	r1, r3, #1
 800da00:	b2c8      	uxtb	r0, r1
 800da02:	495c      	ldr	r1, [pc, #368]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da04:	7288      	strb	r0, [r1, #10]
 800da06:	4413      	add	r3, r2
 800da08:	2209      	movs	r2, #9
 800da0a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800da0c:	4b59      	ldr	r3, [pc, #356]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da0e:	8a18      	ldrh	r0, [r3, #16]
 800da10:	4b58      	ldr	r3, [pc, #352]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da12:	68da      	ldr	r2, [r3, #12]
 800da14:	4b57      	ldr	r3, [pc, #348]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da16:	7a9b      	ldrb	r3, [r3, #10]
 800da18:	1c59      	adds	r1, r3, #1
 800da1a:	b2cc      	uxtb	r4, r1
 800da1c:	4955      	ldr	r1, [pc, #340]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da1e:	728c      	strb	r4, [r1, #10]
 800da20:	4413      	add	r3, r2
 800da22:	b2c2      	uxtb	r2, r0
 800da24:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800da26:	4b53      	ldr	r3, [pc, #332]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da28:	8a1b      	ldrh	r3, [r3, #16]
 800da2a:	0a1b      	lsrs	r3, r3, #8
 800da2c:	b298      	uxth	r0, r3
 800da2e:	4b51      	ldr	r3, [pc, #324]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da30:	68da      	ldr	r2, [r3, #12]
 800da32:	4b50      	ldr	r3, [pc, #320]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da34:	7a9b      	ldrb	r3, [r3, #10]
 800da36:	1c59      	adds	r1, r3, #1
 800da38:	b2cc      	uxtb	r4, r1
 800da3a:	494e      	ldr	r1, [pc, #312]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da3c:	728c      	strb	r4, [r1, #10]
 800da3e:	4413      	add	r3, r2
 800da40:	b2c2      	uxtb	r2, r0
 800da42:	701a      	strb	r2, [r3, #0]
                break;
 800da44:	e150      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800da46:	4b4b      	ldr	r3, [pc, #300]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da48:	2200      	movs	r2, #0
 800da4a:	821a      	strh	r2, [r3, #16]
                break;
 800da4c:	e14c      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800da4e:	2305      	movs	r3, #5
 800da50:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800da54:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800da58:	4618      	mov	r0, r3
 800da5a:	f004 fe31 	bl	80126c0 <LoRaMacMlmeRequest>
                break;
 800da5e:	e143      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800da60:	4b45      	ldr	r3, [pc, #276]	@ (800db78 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800da62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da64:	4798      	blx	r3
                break;
 800da66:	e13f      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	689a      	ldr	r2, [r3, #8]
 800da6c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da70:	1c59      	adds	r1, r3, #1
 800da72:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800da76:	4413      	add	r3, r2
 800da78:	781a      	ldrb	r2, [r3, #0]
 800da7a:	4b3e      	ldr	r3, [pc, #248]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da7c:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800da7e:	4b3c      	ldr	r3, [pc, #240]	@ (800db70 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	f000 812c 	beq.w	800dce2 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800da8a:	4b39      	ldr	r3, [pc, #228]	@ (800db70 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	4a38      	ldr	r2, [pc, #224]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800da92:	7d52      	ldrb	r2, [r2, #21]
 800da94:	4610      	mov	r0, r2
 800da96:	4798      	blx	r3
                }
                break;
 800da98:	e123      	b.n	800dce2 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	7b1b      	ldrb	r3, [r3, #12]
 800da9e:	2b07      	cmp	r3, #7
 800daa0:	f040 8121 	bne.w	800dce6 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800daa4:	2306      	movs	r3, #6
 800daa6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	689a      	ldr	r2, [r3, #8]
 800daae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dab2:	4413      	add	r3, r2
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	b21a      	sxth	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6899      	ldr	r1, [r3, #8]
 800dabc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dac0:	3301      	adds	r3, #1
 800dac2:	440b      	add	r3, r1
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	b21b      	sxth	r3, r3
 800dac8:	021b      	lsls	r3, r3, #8
 800daca:	b21b      	sxth	r3, r3
 800dacc:	4313      	orrs	r3, r2
 800dace:	b21b      	sxth	r3, r3
 800dad0:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800dad2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800dad6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dada:	3302      	adds	r3, #2
 800dadc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	689a      	ldr	r2, [r3, #8]
 800dae4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dae8:	4413      	add	r3, r2
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	4619      	mov	r1, r3
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	689a      	ldr	r2, [r3, #8]
 800daf2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800daf6:	3301      	adds	r3, #1
 800daf8:	4413      	add	r3, r2
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6899      	ldr	r1, [r3, #8]
 800db06:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db0a:	3302      	adds	r3, #2
 800db0c:	440b      	add	r3, r1
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800db12:	4313      	orrs	r3, r2
 800db14:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800db16:	2364      	movs	r3, #100	@ 0x64
 800db18:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800db1c:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800db1e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db22:	3303      	adds	r3, #3
 800db24:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	689a      	ldr	r2, [r3, #8]
 800db2c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db30:	1c59      	adds	r1, r3, #1
 800db32:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800db36:	4413      	add	r3, r2
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	b25b      	sxtb	r3, r3
 800db3c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800db40:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800db44:	4618      	mov	r0, r3
 800db46:	f004 fdbb 	bl	80126c0 <LoRaMacMlmeRequest>
                }
                break;
 800db4a:	e0cc      	b.n	800dce6 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800db4c:	233b      	movs	r3, #59	@ 0x3b
 800db4e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800db52:	2300      	movs	r3, #0
 800db54:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800db58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800db5c:	4618      	mov	r0, r3
 800db5e:	f004 f9ad 	bl	8011ebc <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800db62:	4b04      	ldr	r3, [pc, #16]	@ (800db74 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800db64:	2201      	movs	r2, #1
 800db66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800db6a:	e0bd      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
 800db6c:	0801bfbc 	.word	0x0801bfbc
 800db70:	20000784 	.word	0x20000784
 800db74:	2000074c 	.word	0x2000074c
 800db78:	200000c0 	.word	0x200000c0
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800db7c:	232a      	movs	r3, #42	@ 0x2a
 800db7e:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800db80:	f107 0308 	add.w	r3, r7, #8
 800db84:	4618      	mov	r0, r3
 800db86:	f003 ffc1 	bl	8011b0c <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800db92:	4b65      	ldr	r3, [pc, #404]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800db94:	68da      	ldr	r2, [r3, #12]
 800db96:	4b64      	ldr	r3, [pc, #400]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800db98:	7a9b      	ldrb	r3, [r3, #10]
 800db9a:	1c59      	adds	r1, r3, #1
 800db9c:	b2c8      	uxtb	r0, r1
 800db9e:	4962      	ldr	r1, [pc, #392]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dba0:	7288      	strb	r0, [r1, #10]
 800dba2:	4413      	add	r3, r2
 800dba4:	227f      	movs	r2, #127	@ 0x7f
 800dba6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800dba8:	4b60      	ldr	r3, [pc, #384]	@ (800dd2c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	4b5e      	ldr	r3, [pc, #376]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbae:	68d9      	ldr	r1, [r3, #12]
 800dbb0:	4b5d      	ldr	r3, [pc, #372]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbb2:	7a9b      	ldrb	r3, [r3, #10]
 800dbb4:	1c58      	adds	r0, r3, #1
 800dbb6:	b2c4      	uxtb	r4, r0
 800dbb8:	485b      	ldr	r0, [pc, #364]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbba:	7284      	strb	r4, [r0, #10]
 800dbbc:	440b      	add	r3, r1
 800dbbe:	78d2      	ldrb	r2, [r2, #3]
 800dbc0:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800dbc2:	4b5a      	ldr	r3, [pc, #360]	@ (800dd2c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	4b58      	ldr	r3, [pc, #352]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbc8:	68d9      	ldr	r1, [r3, #12]
 800dbca:	4b57      	ldr	r3, [pc, #348]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbcc:	7a9b      	ldrb	r3, [r3, #10]
 800dbce:	1c58      	adds	r0, r3, #1
 800dbd0:	b2c4      	uxtb	r4, r0
 800dbd2:	4855      	ldr	r0, [pc, #340]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbd4:	7284      	strb	r4, [r0, #10]
 800dbd6:	440b      	add	r3, r1
 800dbd8:	7892      	ldrb	r2, [r2, #2]
 800dbda:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800dbdc:	4b53      	ldr	r3, [pc, #332]	@ (800dd2c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	4b51      	ldr	r3, [pc, #324]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbe2:	68d9      	ldr	r1, [r3, #12]
 800dbe4:	4b50      	ldr	r3, [pc, #320]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbe6:	7a9b      	ldrb	r3, [r3, #10]
 800dbe8:	1c58      	adds	r0, r3, #1
 800dbea:	b2c4      	uxtb	r4, r0
 800dbec:	484e      	ldr	r0, [pc, #312]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbee:	7284      	strb	r4, [r0, #10]
 800dbf0:	440b      	add	r3, r1
 800dbf2:	7852      	ldrb	r2, [r2, #1]
 800dbf4:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800dbf6:	4b4d      	ldr	r3, [pc, #308]	@ (800dd2c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	4b4b      	ldr	r3, [pc, #300]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dbfc:	68d9      	ldr	r1, [r3, #12]
 800dbfe:	4b4a      	ldr	r3, [pc, #296]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc00:	7a9b      	ldrb	r3, [r3, #10]
 800dc02:	1c58      	adds	r0, r3, #1
 800dc04:	b2c4      	uxtb	r4, r0
 800dc06:	4848      	ldr	r0, [pc, #288]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc08:	7284      	strb	r4, [r0, #10]
 800dc0a:	440b      	add	r3, r1
 800dc0c:	7812      	ldrb	r2, [r2, #0]
 800dc0e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800dc10:	4b45      	ldr	r3, [pc, #276]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc12:	68da      	ldr	r2, [r3, #12]
 800dc14:	4b44      	ldr	r3, [pc, #272]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc16:	7a9b      	ldrb	r3, [r3, #10]
 800dc18:	1c59      	adds	r1, r3, #1
 800dc1a:	b2c8      	uxtb	r0, r1
 800dc1c:	4942      	ldr	r1, [pc, #264]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc1e:	7288      	strb	r0, [r1, #10]
 800dc20:	4413      	add	r3, r2
 800dc22:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800dc26:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800dc28:	4b3f      	ldr	r3, [pc, #252]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc2a:	68da      	ldr	r2, [r3, #12]
 800dc2c:	4b3e      	ldr	r3, [pc, #248]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc2e:	7a9b      	ldrb	r3, [r3, #10]
 800dc30:	1c59      	adds	r1, r3, #1
 800dc32:	b2c8      	uxtb	r0, r1
 800dc34:	493c      	ldr	r1, [pc, #240]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc36:	7288      	strb	r0, [r1, #10]
 800dc38:	4413      	add	r3, r2
 800dc3a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800dc3e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800dc40:	4b39      	ldr	r3, [pc, #228]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc42:	68da      	ldr	r2, [r3, #12]
 800dc44:	4b38      	ldr	r3, [pc, #224]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc46:	7a9b      	ldrb	r3, [r3, #10]
 800dc48:	1c59      	adds	r1, r3, #1
 800dc4a:	b2c8      	uxtb	r0, r1
 800dc4c:	4936      	ldr	r1, [pc, #216]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc4e:	7288      	strb	r0, [r1, #10]
 800dc50:	4413      	add	r3, r2
 800dc52:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800dc56:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800dc58:	4b33      	ldr	r3, [pc, #204]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc5a:	68da      	ldr	r2, [r3, #12]
 800dc5c:	4b32      	ldr	r3, [pc, #200]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc5e:	7a9b      	ldrb	r3, [r3, #10]
 800dc60:	1c59      	adds	r1, r3, #1
 800dc62:	b2c8      	uxtb	r0, r1
 800dc64:	4930      	ldr	r1, [pc, #192]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc66:	7288      	strb	r0, [r1, #10]
 800dc68:	4413      	add	r3, r2
 800dc6a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dc6e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800dc70:	4b2d      	ldr	r3, [pc, #180]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc72:	68da      	ldr	r2, [r3, #12]
 800dc74:	4b2c      	ldr	r3, [pc, #176]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc76:	7a9b      	ldrb	r3, [r3, #10]
 800dc78:	1c59      	adds	r1, r3, #1
 800dc7a:	b2c8      	uxtb	r0, r1
 800dc7c:	492a      	ldr	r1, [pc, #168]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc7e:	7288      	strb	r0, [r1, #10]
 800dc80:	4413      	add	r3, r2
 800dc82:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800dc86:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800dc88:	4b27      	ldr	r3, [pc, #156]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc8a:	68da      	ldr	r2, [r3, #12]
 800dc8c:	4b26      	ldr	r3, [pc, #152]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc8e:	7a9b      	ldrb	r3, [r3, #10]
 800dc90:	1c59      	adds	r1, r3, #1
 800dc92:	b2c8      	uxtb	r0, r1
 800dc94:	4924      	ldr	r1, [pc, #144]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dc96:	7288      	strb	r0, [r1, #10]
 800dc98:	4413      	add	r3, r2
 800dc9a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800dc9e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800dca0:	4b21      	ldr	r3, [pc, #132]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dca2:	68da      	ldr	r2, [r3, #12]
 800dca4:	4b20      	ldr	r3, [pc, #128]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dca6:	7a9b      	ldrb	r3, [r3, #10]
 800dca8:	1c59      	adds	r1, r3, #1
 800dcaa:	b2c8      	uxtb	r0, r1
 800dcac:	491e      	ldr	r1, [pc, #120]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dcae:	7288      	strb	r0, [r1, #10]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800dcb6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800dcb8:	4b1b      	ldr	r3, [pc, #108]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dcba:	68da      	ldr	r2, [r3, #12]
 800dcbc:	4b1a      	ldr	r3, [pc, #104]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dcbe:	7a9b      	ldrb	r3, [r3, #10]
 800dcc0:	1c59      	adds	r1, r3, #1
 800dcc2:	b2c8      	uxtb	r0, r1
 800dcc4:	4918      	ldr	r1, [pc, #96]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dcc6:	7288      	strb	r0, [r1, #10]
 800dcc8:	4413      	add	r3, r2
 800dcca:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800dcce:	701a      	strb	r2, [r3, #0]
                break;
 800dcd0:	e00a      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800dcd2:	bf00      	nop
 800dcd4:	e008      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800dcd6:	bf00      	nop
 800dcd8:	e006      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800dcda:	bf00      	nop
 800dcdc:	e004      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800dcde:	bf00      	nop
 800dce0:	e002      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800dce2:	bf00      	nop
 800dce4:	e000      	b.n	800dce8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800dce6:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800dce8:	4b0f      	ldr	r3, [pc, #60]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dcea:	7a9b      	ldrb	r3, [r3, #10]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00c      	beq.n	800dd0a <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800dcf0:	4b0f      	ldr	r3, [pc, #60]	@ (800dd30 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800dcf2:	7a5b      	ldrb	r3, [r3, #9]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d114      	bne.n	800dd22 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800dcf8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800dcfc:	480c      	ldr	r0, [pc, #48]	@ (800dd30 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800dcfe:	f00d fc0b 	bl	801b518 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800dd02:	480b      	ldr	r0, [pc, #44]	@ (800dd30 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800dd04:	f00d fb2a 	bl	801b35c <UTIL_TIMER_Start>
 800dd08:	e00b      	b.n	800dd22 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800dd0a:	4809      	ldr	r0, [pc, #36]	@ (800dd30 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800dd0c:	f00d fb94 	bl	801b438 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800dd10:	4b05      	ldr	r3, [pc, #20]	@ (800dd28 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	705a      	strb	r2, [r3, #1]
 800dd16:	e004      	b.n	800dd22 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800dd18:	bf00      	nop
 800dd1a:	e002      	b.n	800dd22 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800dd1c:	bf00      	nop
 800dd1e:	e000      	b.n	800dd22 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800dd20:	bf00      	nop
    }
}
 800dd22:	3790      	adds	r7, #144	@ 0x90
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bdb0      	pop	{r4, r5, r7, pc}
 800dd28:	2000074c 	.word	0x2000074c
 800dd2c:	20000784 	.word	0x20000784
 800dd30:	20000788 	.word	0x20000788

0800dd34 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800dd34:	b480      	push	{r7}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800dd3c:	bf00      	nop
    }
}
 800dd3e:	bf00      	nop
 800dd40:	370c      	adds	r7, #12
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bc80      	pop	{r7}
 800dd46:	4770      	bx	lr

0800dd48 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800dd50:	4b05      	ldr	r3, [pc, #20]	@ (800dd68 <LmhpComplianceOnMlmeIndication+0x20>)
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	f083 0301 	eor.w	r3, r3, #1
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b00      	cmp	r3, #0
    {
        return;
 800dd5c:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bc80      	pop	{r7}
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	2000074c 	.word	0x2000074c

0800dd6c <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800dd74:	4b08      	ldr	r3, [pc, #32]	@ (800dd98 <OnProcessTimer+0x2c>)
 800dd76:	7a9b      	ldrb	r3, [r3, #10]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d002      	beq.n	800dd82 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800dd7c:	4b06      	ldr	r3, [pc, #24]	@ (800dd98 <OnProcessTimer+0x2c>)
 800dd7e:	2201      	movs	r2, #1
 800dd80:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800dd82:	4b06      	ldr	r3, [pc, #24]	@ (800dd9c <OnProcessTimer+0x30>)
 800dd84:	695b      	ldr	r3, [r3, #20]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d002      	beq.n	800dd90 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800dd8a:	4b04      	ldr	r3, [pc, #16]	@ (800dd9c <OnProcessTimer+0x30>)
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	4798      	blx	r3
    }
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	2000074c 	.word	0x2000074c
 800dd9c:	200000c0 	.word	0x200000c0

0800dda0 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bc80      	pop	{r7}
 800ddb2:	4770      	bx	lr

0800ddb4 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	6039      	str	r1, [r7, #0]
 800ddbe:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800ddc0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bc80      	pop	{r7}
 800ddcc:	4770      	bx	lr
	...

0800ddd0 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800ddd0:	b590      	push	{r4, r7, lr}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ddd6:	f00d fc49 	bl	801b66c <UTIL_TIMER_GetCurrentTime>
 800ddda:	4603      	mov	r3, r0
 800dddc:	4a0c      	ldr	r2, [pc, #48]	@ (800de10 <OnRadioTxDone+0x40>)
 800ddde:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800dde0:	4c0c      	ldr	r4, [pc, #48]	@ (800de14 <OnRadioTxDone+0x44>)
 800dde2:	463b      	mov	r3, r7
 800dde4:	4618      	mov	r0, r3
 800dde6:	f00c fe27 	bl	801aa38 <SysTimeGet>
 800ddea:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800ddee:	463a      	mov	r2, r7
 800ddf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ddf4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800ddf8:	4a07      	ldr	r2, [pc, #28]	@ (800de18 <OnRadioTxDone+0x48>)
 800ddfa:	7813      	ldrb	r3, [r2, #0]
 800ddfc:	f043 0320 	orr.w	r3, r3, #32
 800de00:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800de02:	f003 fa7f 	bl	8011304 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800de06:	bf00      	nop
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd90      	pop	{r4, r7, pc}
 800de0e:	bf00      	nop
 800de10:	200018e0 	.word	0x200018e0
 800de14:	200007a0 	.word	0x200007a0
 800de18:	200018dc 	.word	0x200018dc

0800de1c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	4608      	mov	r0, r1
 800de26:	4611      	mov	r1, r2
 800de28:	461a      	mov	r2, r3
 800de2a:	4603      	mov	r3, r0
 800de2c:	817b      	strh	r3, [r7, #10]
 800de2e:	460b      	mov	r3, r1
 800de30:	813b      	strh	r3, [r7, #8]
 800de32:	4613      	mov	r3, r2
 800de34:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800de36:	f00d fc19 	bl	801b66c <UTIL_TIMER_GetCurrentTime>
 800de3a:	4603      	mov	r3, r0
 800de3c:	4a0e      	ldr	r2, [pc, #56]	@ (800de78 <OnRadioRxDone+0x5c>)
 800de3e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800de40:	4a0d      	ldr	r2, [pc, #52]	@ (800de78 <OnRadioRxDone+0x5c>)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800de46:	4a0c      	ldr	r2, [pc, #48]	@ (800de78 <OnRadioRxDone+0x5c>)
 800de48:	897b      	ldrh	r3, [r7, #10]
 800de4a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800de4c:	4a0a      	ldr	r2, [pc, #40]	@ (800de78 <OnRadioRxDone+0x5c>)
 800de4e:	893b      	ldrh	r3, [r7, #8]
 800de50:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800de52:	4a09      	ldr	r2, [pc, #36]	@ (800de78 <OnRadioRxDone+0x5c>)
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800de58:	4a08      	ldr	r2, [pc, #32]	@ (800de7c <OnRadioRxDone+0x60>)
 800de5a:	7813      	ldrb	r3, [r2, #0]
 800de5c:	f043 0310 	orr.w	r3, r3, #16
 800de60:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800de62:	4a06      	ldr	r2, [pc, #24]	@ (800de7c <OnRadioRxDone+0x60>)
 800de64:	7813      	ldrb	r3, [r2, #0]
 800de66:	f043 0301 	orr.w	r3, r3, #1
 800de6a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800de6c:	f003 fa4a 	bl	8011304 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800de70:	bf00      	nop
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	200018e4 	.word	0x200018e4
 800de7c:	200018dc 	.word	0x200018dc

0800de80 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800de84:	4a04      	ldr	r2, [pc, #16]	@ (800de98 <OnRadioTxTimeout+0x18>)
 800de86:	7813      	ldrb	r3, [r2, #0]
 800de88:	f043 0308 	orr.w	r3, r3, #8
 800de8c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800de8e:	f003 fa39 	bl	8011304 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800de92:	bf00      	nop
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	200018dc 	.word	0x200018dc

0800de9c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800dea0:	4a04      	ldr	r2, [pc, #16]	@ (800deb4 <OnRadioRxError+0x18>)
 800dea2:	7813      	ldrb	r3, [r2, #0]
 800dea4:	f043 0304 	orr.w	r3, r3, #4
 800dea8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800deaa:	f003 fa2b 	bl	8011304 <OnMacProcessNotify>
}
 800deae:	bf00      	nop
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	200018dc 	.word	0x200018dc

0800deb8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800debc:	4a04      	ldr	r2, [pc, #16]	@ (800ded0 <OnRadioRxTimeout+0x18>)
 800debe:	7813      	ldrb	r3, [r2, #0]
 800dec0:	f043 0302 	orr.w	r3, r3, #2
 800dec4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800dec6:	f003 fa1d 	bl	8011304 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800deca:	bf00      	nop
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	200018dc 	.word	0x200018dc

0800ded4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800ded4:	b480      	push	{r7}
 800ded6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ded8:	4b08      	ldr	r3, [pc, #32]	@ (800defc <UpdateRxSlotIdleState+0x28>)
 800deda:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d004      	beq.n	800deec <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800dee2:	4b07      	ldr	r3, [pc, #28]	@ (800df00 <UpdateRxSlotIdleState+0x2c>)
 800dee4:	2206      	movs	r2, #6
 800dee6:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800deea:	e003      	b.n	800def4 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800deec:	4b04      	ldr	r3, [pc, #16]	@ (800df00 <UpdateRxSlotIdleState+0x2c>)
 800deee:	2202      	movs	r2, #2
 800def0:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800def4:	bf00      	nop
 800def6:	46bd      	mov	sp, r7
 800def8:	bc80      	pop	{r7}
 800defa:	4770      	bx	lr
 800defc:	20000cd4 	.word	0x20000cd4
 800df00:	200007a0 	.word	0x200007a0

0800df04 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b092      	sub	sp, #72	@ 0x48
 800df08:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800df0a:	4b4a      	ldr	r3, [pc, #296]	@ (800e034 <ProcessRadioTxDone+0x130>)
 800df0c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800df10:	2b02      	cmp	r3, #2
 800df12:	d002      	beq.n	800df1a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800df14:	4b48      	ldr	r3, [pc, #288]	@ (800e038 <ProcessRadioTxDone+0x134>)
 800df16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df18:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df1a:	f3ef 8310 	mrs	r3, PRIMASK
 800df1e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800df20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800df22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800df24:	b672      	cpsid	i
}
 800df26:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800df28:	f00d fba0 	bl	801b66c <UTIL_TIMER_GetCurrentTime>
 800df2c:	4602      	mov	r2, r0
 800df2e:	4b43      	ldr	r3, [pc, #268]	@ (800e03c <ProcessRadioTxDone+0x138>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800df36:	4b42      	ldr	r3, [pc, #264]	@ (800e040 <ProcessRadioTxDone+0x13c>)
 800df38:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800df3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	4619      	mov	r1, r3
 800df42:	4840      	ldr	r0, [pc, #256]	@ (800e044 <ProcessRadioTxDone+0x140>)
 800df44:	f00d fae8 	bl	801b518 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800df48:	483e      	ldr	r0, [pc, #248]	@ (800e044 <ProcessRadioTxDone+0x140>)
 800df4a:	f00d fa07 	bl	801b35c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800df4e:	4b3c      	ldr	r3, [pc, #240]	@ (800e040 <ProcessRadioTxDone+0x13c>)
 800df50:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800df54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	4619      	mov	r1, r3
 800df5a:	483b      	ldr	r0, [pc, #236]	@ (800e048 <ProcessRadioTxDone+0x144>)
 800df5c:	f00d fadc 	bl	801b518 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800df60:	4839      	ldr	r0, [pc, #228]	@ (800e048 <ProcessRadioTxDone+0x144>)
 800df62:	f00d f9fb 	bl	801b35c <UTIL_TIMER_Start>
 800df66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df68:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df6c:	f383 8810 	msr	PRIMASK, r3
}
 800df70:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800df72:	4b33      	ldr	r3, [pc, #204]	@ (800e040 <ProcessRadioTxDone+0x13c>)
 800df74:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d01a      	beq.n	800dfb2 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800df7c:	2315      	movs	r3, #21
 800df7e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df82:	4b2c      	ldr	r3, [pc, #176]	@ (800e034 <ProcessRadioTxDone+0x130>)
 800df84:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800df88:	f107 0220 	add.w	r2, r7, #32
 800df8c:	4611      	mov	r1, r2
 800df8e:	4618      	mov	r0, r3
 800df90:	f006 ff40 	bl	8014e14 <RegionGetPhyParam>
 800df94:	4603      	mov	r3, r0
 800df96:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800df98:	4b29      	ldr	r3, [pc, #164]	@ (800e040 <ProcessRadioTxDone+0x13c>)
 800df9a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	4829      	ldr	r0, [pc, #164]	@ (800e04c <ProcessRadioTxDone+0x148>)
 800dfa6:	f00d fab7 	bl	801b518 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800dfaa:	4828      	ldr	r0, [pc, #160]	@ (800e04c <ProcessRadioTxDone+0x148>)
 800dfac:	f00d f9d6 	bl	801b35c <UTIL_TIMER_Start>
 800dfb0:	e003      	b.n	800dfba <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dfb2:	4b23      	ldr	r3, [pc, #140]	@ (800e040 <ProcessRadioTxDone+0x13c>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800dfba:	4b20      	ldr	r3, [pc, #128]	@ (800e03c <ProcessRadioTxDone+0x138>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a1d      	ldr	r2, [pc, #116]	@ (800e034 <ProcessRadioTxDone+0x130>)
 800dfc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800dfc2:	4b1f      	ldr	r3, [pc, #124]	@ (800e040 <ProcessRadioTxDone+0x13c>)
 800dfc4:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800dfc8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800dfca:	4b1c      	ldr	r3, [pc, #112]	@ (800e03c <ProcessRadioTxDone+0x138>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800dfd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f00c fd67 	bl	801aaa8 <SysTimeGetMcuTime>
 800dfda:	4638      	mov	r0, r7
 800dfdc:	4b15      	ldr	r3, [pc, #84]	@ (800e034 <ProcessRadioTxDone+0x130>)
 800dfde:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800dfe2:	9200      	str	r2, [sp, #0]
 800dfe4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dfe8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800dfec:	ca06      	ldmia	r2, {r1, r2}
 800dfee:	f00c fcbc 	bl	801a96a <SysTimeSub>
 800dff2:	f107 0314 	add.w	r3, r7, #20
 800dff6:	463a      	mov	r2, r7
 800dff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dffc:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e000:	4b0f      	ldr	r3, [pc, #60]	@ (800e040 <ProcessRadioTxDone+0x13c>)
 800e002:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800e006:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e008:	2301      	movs	r3, #1
 800e00a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e00c:	4b09      	ldr	r3, [pc, #36]	@ (800e034 <ProcessRadioTxDone+0x130>)
 800e00e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800e012:	2b00      	cmp	r3, #0
 800e014:	d101      	bne.n	800e01a <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800e016:	2300      	movs	r3, #0
 800e018:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e01a:	4b06      	ldr	r3, [pc, #24]	@ (800e034 <ProcessRadioTxDone+0x130>)
 800e01c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e020:	f107 0208 	add.w	r2, r7, #8
 800e024:	4611      	mov	r1, r2
 800e026:	4618      	mov	r0, r3
 800e028:	f006 ff0c 	bl	8014e44 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e02c:	bf00      	nop
 800e02e:	3740      	adds	r7, #64	@ 0x40
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	20000cd4 	.word	0x20000cd4
 800e038:	0801c570 	.word	0x0801c570
 800e03c:	200018e0 	.word	0x200018e0
 800e040:	200007a0 	.word	0x200007a0
 800e044:	20000b20 	.word	0x20000b20
 800e048:	20000b38 	.word	0x20000b38
 800e04c:	20000ba0 	.word	0x20000ba0

0800e050 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e054:	4b10      	ldr	r3, [pc, #64]	@ (800e098 <PrepareRxDoneAbort+0x48>)
 800e056:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e05e:	4a0e      	ldr	r2, [pc, #56]	@ (800e098 <PrepareRxDoneAbort+0x48>)
 800e060:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e064:	4b0c      	ldr	r3, [pc, #48]	@ (800e098 <PrepareRxDoneAbort+0x48>)
 800e066:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e06e:	2000      	movs	r0, #0
 800e070:	f001 fa12 	bl	800f498 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e074:	4a08      	ldr	r2, [pc, #32]	@ (800e098 <PrepareRxDoneAbort+0x48>)
 800e076:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e07a:	f043 0302 	orr.w	r3, r3, #2
 800e07e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e082:	4a05      	ldr	r2, [pc, #20]	@ (800e098 <PrepareRxDoneAbort+0x48>)
 800e084:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e088:	f043 0310 	orr.w	r3, r3, #16
 800e08c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800e090:	f7ff ff20 	bl	800ded4 <UpdateRxSlotIdleState>
}
 800e094:	bf00      	nop
 800e096:	bd80      	pop	{r7, pc}
 800e098:	200007a0 	.word	0x200007a0

0800e09c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e09c:	b590      	push	{r4, r7, lr}
 800e09e:	b0a9      	sub	sp, #164	@ 0xa4
 800e0a0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e0a2:	2312      	movs	r3, #18
 800e0a4:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e0a8:	4ba1      	ldr	r3, [pc, #644]	@ (800e330 <ProcessRadioRxDone+0x294>)
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800e0b0:	4b9f      	ldr	r3, [pc, #636]	@ (800e330 <ProcessRadioRxDone+0x294>)
 800e0b2:	891b      	ldrh	r3, [r3, #8]
 800e0b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800e0b8:	4b9d      	ldr	r3, [pc, #628]	@ (800e330 <ProcessRadioRxDone+0x294>)
 800e0ba:	895b      	ldrh	r3, [r3, #10]
 800e0bc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800e0c0:	4b9b      	ldr	r3, [pc, #620]	@ (800e330 <ProcessRadioRxDone+0x294>)
 800e0c2:	7b1b      	ldrb	r3, [r3, #12]
 800e0c4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e0d2:	4b98      	ldr	r3, [pc, #608]	@ (800e334 <ProcessRadioRxDone+0x298>)
 800e0d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e0d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e0ee:	4a92      	ldr	r2, [pc, #584]	@ (800e338 <ProcessRadioRxDone+0x29c>)
 800e0f0:	7813      	ldrb	r3, [r2, #0]
 800e0f2:	f023 0301 	bic.w	r3, r3, #1
 800e0f6:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e0f8:	4b90      	ldr	r3, [pc, #576]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800e100:	4a8e      	ldr	r2, [pc, #568]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e102:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800e106:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800e10a:	4a8c      	ldr	r2, [pc, #560]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e10c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e110:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e114:	4b89      	ldr	r3, [pc, #548]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e116:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800e11a:	4b88      	ldr	r3, [pc, #544]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e11c:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800e120:	4b86      	ldr	r3, [pc, #536]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e122:	2200      	movs	r2, #0
 800e124:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800e128:	4b84      	ldr	r3, [pc, #528]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800e130:	4b82      	ldr	r3, [pc, #520]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e132:	2200      	movs	r2, #0
 800e134:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800e138:	4b80      	ldr	r3, [pc, #512]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800e140:	4b7e      	ldr	r3, [pc, #504]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e142:	2200      	movs	r2, #0
 800e144:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800e148:	4b7c      	ldr	r3, [pc, #496]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800e150:	4b7a      	ldr	r3, [pc, #488]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e152:	2200      	movs	r2, #0
 800e154:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e158:	4b78      	ldr	r3, [pc, #480]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e160:	4b76      	ldr	r3, [pc, #472]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e162:	2200      	movs	r2, #0
 800e164:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800e168:	4b74      	ldr	r3, [pc, #464]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e170:	4b72      	ldr	r3, [pc, #456]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e172:	2200      	movs	r2, #0
 800e174:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e178:	4b70      	ldr	r3, [pc, #448]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e180:	4b6f      	ldr	r3, [pc, #444]	@ (800e340 <ProcessRadioRxDone+0x2a4>)
 800e182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e184:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e186:	4b6d      	ldr	r3, [pc, #436]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e188:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d102      	bne.n	800e196 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e190:	486c      	ldr	r0, [pc, #432]	@ (800e344 <ProcessRadioRxDone+0x2a8>)
 800e192:	f00d f951 	bl	801b438 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e196:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e19a:	4619      	mov	r1, r3
 800e19c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800e1a0:	f004 feba 	bl	8012f18 <LoRaMacClassBRxBeacon>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00b      	beq.n	800e1c2 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e1aa:	4a64      	ldr	r2, [pc, #400]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e1ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800e1b0:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e1b4:	4a61      	ldr	r2, [pc, #388]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e1b6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e1ba:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800e1be:	f000 bc8d 	b.w	800eadc <ProcessRadioRxDone+0xa40>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e1c2:	4b5c      	ldr	r3, [pc, #368]	@ (800e334 <ProcessRadioRxDone+0x298>)
 800e1c4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d11e      	bne.n	800e20a <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e1cc:	f004 feb7 	bl	8012f3e <LoRaMacClassBIsPingExpected>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00a      	beq.n	800e1ec <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	f004 fe68 	bl	8012eac <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e1dc:	2000      	movs	r0, #0
 800e1de:	f004 fe89 	bl	8012ef4 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e1e2:	4b56      	ldr	r3, [pc, #344]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e1e4:	2204      	movs	r2, #4
 800e1e6:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800e1ea:	e00e      	b.n	800e20a <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e1ec:	f004 feae 	bl	8012f4c <LoRaMacClassBIsMulticastExpected>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d009      	beq.n	800e20a <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	f004 fe62 	bl	8012ec0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	f004 fe82 	bl	8012f06 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e202:	4b4e      	ldr	r3, [pc, #312]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e204:	2205      	movs	r2, #5
 800e206:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800e20a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d107      	bne.n	800e222 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e212:	4b4a      	ldr	r3, [pc, #296]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e214:	2201      	movs	r2, #1
 800e216:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800e21a:	f7ff ff19 	bl	800e050 <PrepareRxDoneAbort>
        return;
 800e21e:	f000 bc5d 	b.w	800eadc <ProcessRadioRxDone+0xa40>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e222:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e226:	1c5a      	adds	r2, r3, #1
 800e228:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800e22c:	461a      	mov	r2, r3
 800e22e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e232:	4413      	add	r3, r2
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800e23a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800e23e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e242:	b2db      	uxtb	r3, r3
 800e244:	3b01      	subs	r3, #1
 800e246:	2b06      	cmp	r3, #6
 800e248:	f200 8419 	bhi.w	800ea7e <ProcessRadioRxDone+0x9e2>
 800e24c:	a201      	add	r2, pc, #4	@ (adr r2, 800e254 <ProcessRadioRxDone+0x1b8>)
 800e24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e252:	bf00      	nop
 800e254:	0800e271 	.word	0x0800e271
 800e258:	0800ea7f 	.word	0x0800ea7f
 800e25c:	0800e48f 	.word	0x0800e48f
 800e260:	0800ea7f 	.word	0x0800ea7f
 800e264:	0800e487 	.word	0x0800e487
 800e268:	0800ea7f 	.word	0x0800ea7f
 800e26c:	0800ea23 	.word	0x0800ea23
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e270:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e274:	2b10      	cmp	r3, #16
 800e276:	d807      	bhi.n	800e288 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e278:	4b30      	ldr	r3, [pc, #192]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e27a:	2201      	movs	r2, #1
 800e27c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800e280:	f7ff fee6 	bl	800e050 <PrepareRxDoneAbort>
                return;
 800e284:	f000 bc2a 	b.w	800eadc <ProcessRadioRxDone+0xa40>
            }
            macMsgJoinAccept.Buffer = payload;
 800e288:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e28c:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800e28e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e292:	b2db      	uxtb	r3, r3
 800e294:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e296:	4b27      	ldr	r3, [pc, #156]	@ (800e334 <ProcessRadioRxDone+0x298>)
 800e298:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d007      	beq.n	800e2b0 <ProcessRadioRxDone+0x214>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e2a0:	4b26      	ldr	r3, [pc, #152]	@ (800e33c <ProcessRadioRxDone+0x2a0>)
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800e2a8:	f7ff fed2 	bl	800e050 <PrepareRxDoneAbort>
                return;
 800e2ac:	f000 bc16 	b.w	800eadc <ProcessRadioRxDone+0xa40>
            }

            SecureElementGetJoinEui( joinEui );
 800e2b0:	1d3b      	adds	r3, r7, #4
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fd ffa6 	bl	800c204 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800e2b8:	f107 0214 	add.w	r2, r7, #20
 800e2bc:	1d3b      	adds	r3, r7, #4
 800e2be:	4619      	mov	r1, r3
 800e2c0:	20ff      	movs	r0, #255	@ 0xff
 800e2c2:	f006 f831 	bl	8014328 <LoRaMacCryptoHandleJoinAccept>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, joinEui, &macMsgJoinAccept );
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800e2cc:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f040 80cc 	bne.w	800e46e <ProcessRadioRxDone+0x3d2>
            {
                VerifyParams_t verifyRxDr;

                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800e2d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e2da:	f003 030f 	and.w	r3, r3, #15
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	2b0f      	cmp	r3, #15
 800e2e2:	d031      	beq.n	800e348 <ProcessRadioRxDone+0x2ac>
                {
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e2e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e2e8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	b25b      	sxtb	r3, r3
 800e2f0:	703b      	strb	r3, [r7, #0]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e2f2:	4b10      	ldr	r3, [pc, #64]	@ (800e334 <ProcessRadioRxDone+0x298>)
 800e2f4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e2f8:	707b      	strb	r3, [r7, #1]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 800e2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e334 <ProcessRadioRxDone+0x298>)
 800e2fc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e300:	4639      	mov	r1, r7
 800e302:	2207      	movs	r2, #7
 800e304:	4618      	mov	r0, r3
 800e306:	f006 fdc0 	bl	8014e8a <RegionVerify>
 800e30a:	4603      	mov	r3, r0
 800e30c:	f083 0301 	eor.w	r3, r3, #1
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d018      	beq.n	800e348 <ProcessRadioRxDone+0x2ac>
                    {
                        // MLME handling
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e316:	2001      	movs	r0, #1
 800e318:	f005 fb14 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	f000 83b4 	beq.w	800ea8c <ProcessRadioRxDone+0x9f0>
                        {
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e324:	2101      	movs	r1, #1
 800e326:	2007      	movs	r0, #7
 800e328:	f005 fa80 	bl	801382c <LoRaMacConfirmQueueSetStatus>
 800e32c:	e3b1      	b.n	800ea92 <ProcessRadioRxDone+0x9f6>
 800e32e:	bf00      	nop
 800e330:	200018e4 	.word	0x200018e4
 800e334:	20000cd4 	.word	0x20000cd4
 800e338:	200018dc 	.word	0x200018dc
 800e33c:	200007a0 	.word	0x200007a0
 800e340:	0801c570 	.word	0x0801c570
 800e344:	20000b38 	.word	0x20000b38
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e348:	7f7b      	ldrb	r3, [r7, #29]
 800e34a:	461a      	mov	r2, r3
 800e34c:	4ba5      	ldr	r3, [pc, #660]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e34e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e352:	4ba4      	ldr	r3, [pc, #656]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e354:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800e358:	7fbb      	ldrb	r3, [r7, #30]
 800e35a:	021b      	lsls	r3, r3, #8
 800e35c:	4313      	orrs	r3, r2
 800e35e:	4aa1      	ldr	r2, [pc, #644]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e364:	4b9f      	ldr	r3, [pc, #636]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e366:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800e36a:	7ffb      	ldrb	r3, [r7, #31]
 800e36c:	041b      	lsls	r3, r3, #16
 800e36e:	4313      	orrs	r3, r2
 800e370:	4a9c      	ldr	r2, [pc, #624]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e376:	6a3b      	ldr	r3, [r7, #32]
 800e378:	4a9a      	ldr	r2, [pc, #616]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e37a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800e37e:	4b99      	ldr	r3, [pc, #612]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e380:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e384:	4619      	mov	r1, r3
 800e386:	2002      	movs	r0, #2
 800e388:	f7fd ff54 	bl	800c234 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e38c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e390:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e394:	b2db      	uxtb	r3, r3
 800e396:	461a      	mov	r2, r3
 800e398:	4b92      	ldr	r3, [pc, #584]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e39a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800e39e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e3a2:	f003 030f 	and.w	r3, r3, #15
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b0f      	cmp	r3, #15
 800e3aa:	d011      	beq.n	800e3d0 <ProcessRadioRxDone+0x334>
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e3ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e3b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	4b8a      	ldr	r3, [pc, #552]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e3ba:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e3be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e3c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	4b86      	ldr	r3, [pc, #536]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e3cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e3d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	4b83      	ldr	r3, [pc, #524]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e3d8:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e3da:	4b82      	ldr	r3, [pc, #520]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e3dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d102      	bne.n	800e3e8 <ProcessRadioRxDone+0x34c>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e3e2:	4b80      	ldr	r3, [pc, #512]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e3e8:	4b7e      	ldr	r3, [pc, #504]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e3ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e3f0:	fb02 f303 	mul.w	r3, r2, r3
 800e3f4:	4a7b      	ldr	r2, [pc, #492]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e3f6:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e3f8:	4b7a      	ldr	r3, [pc, #488]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e3fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3fc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e400:	4a78      	ldr	r2, [pc, #480]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e402:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800e404:	4b77      	ldr	r3, [pc, #476]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e406:	2201      	movs	r2, #1
 800e408:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e40c:	4b75      	ldr	r3, [pc, #468]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e414:	f107 0314 	add.w	r3, r7, #20
 800e418:	3312      	adds	r3, #18
 800e41a:	67fb      	str	r3, [r7, #124]	@ 0x7c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e41c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e420:	b2db      	uxtb	r3, r3
 800e422:	3b11      	subs	r3, #17
 800e424:	b2db      	uxtb	r3, r3
 800e426:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e42a:	4b6f      	ldr	r3, [pc, #444]	@ (800e5e8 <ProcessRadioRxDone+0x54c>)
 800e42c:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800e430:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e434:	4b6b      	ldr	r3, [pc, #428]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e436:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e43a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800e43e:	4611      	mov	r1, r2
 800e440:	4618      	mov	r0, r3
 800e442:	f006 fd39 	bl	8014eb8 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e446:	4b67      	ldr	r3, [pc, #412]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e448:	2202      	movs	r2, #2
 800e44a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e44e:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800e452:	4618      	mov	r0, r3
 800e454:	f005 fa76 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f000 8318 	beq.w	800ea90 <ProcessRadioRxDone+0x9f4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800e460:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800e464:	4619      	mov	r1, r3
 800e466:	2000      	movs	r0, #0
 800e468:	f005 f9e0 	bl	801382c <LoRaMacConfirmQueueSetStatus>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }

            break;
 800e46c:	e310      	b.n	800ea90 <ProcessRadioRxDone+0x9f4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e46e:	2001      	movs	r0, #1
 800e470:	f005 fa68 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	f000 830a 	beq.w	800ea90 <ProcessRadioRxDone+0x9f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e47c:	2101      	movs	r1, #1
 800e47e:	2007      	movs	r0, #7
 800e480:	f005 f9d4 	bl	801382c <LoRaMacConfirmQueueSetStatus>
            break;
 800e484:	e304      	b.n	800ea90 <ProcessRadioRxDone+0x9f4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e486:	4b58      	ldr	r3, [pc, #352]	@ (800e5e8 <ProcessRadioRxDone+0x54c>)
 800e488:	2201      	movs	r2, #1
 800e48a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e48e:	4b55      	ldr	r3, [pc, #340]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e490:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e494:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e498:	4b53      	ldr	r3, [pc, #332]	@ (800e5e8 <ProcessRadioRxDone+0x54c>)
 800e49a:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800e49e:	b25b      	sxtb	r3, r3
 800e4a0:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e4a4:	230d      	movs	r3, #13
 800e4a6:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e4aa:	4b4e      	ldr	r3, [pc, #312]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e4ac:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <ProcessRadioRxDone+0x41e>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e4b4:	230e      	movs	r3, #14
 800e4b6:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4ba:	4b4a      	ldr	r3, [pc, #296]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e4bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e4c0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f006 fca4 	bl	8014e14 <RegionGetPhyParam>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e4d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e4d4:	3b0d      	subs	r3, #13
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	b21b      	sxth	r3, r3
 800e4da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e4de:	b21a      	sxth	r2, r3
 800e4e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4e2:	b21b      	sxth	r3, r3
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	dc03      	bgt.n	800e4f0 <ProcessRadioRxDone+0x454>
 800e4e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e4ec:	2b0b      	cmp	r3, #11
 800e4ee:	d806      	bhi.n	800e4fe <ProcessRadioRxDone+0x462>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e4f0:	4b3d      	ldr	r3, [pc, #244]	@ (800e5e8 <ProcessRadioRxDone+0x54c>)
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800e4f8:	f7ff fdaa 	bl	800e050 <PrepareRxDoneAbort>
                return;
 800e4fc:	e2ee      	b.n	800eadc <ProcessRadioRxDone+0xa40>
            }
            macMsgData.Buffer = payload;
 800e4fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e502:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800e504:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e50e:	4b37      	ldr	r3, [pc, #220]	@ (800e5ec <ProcessRadioRxDone+0x550>)
 800e510:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e512:	23ff      	movs	r3, #255	@ 0xff
 800e514:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e518:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e51c:	4618      	mov	r0, r3
 800e51e:	f006 fa00 	bl	8014922 <LoRaMacParserData>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d006      	beq.n	800e536 <ProcessRadioRxDone+0x49a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e528:	4b2f      	ldr	r3, [pc, #188]	@ (800e5e8 <ProcessRadioRxDone+0x54c>)
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800e530:	f7ff fd8e 	bl	800e050 <PrepareRxDoneAbort>
                return;
 800e534:	e2d2      	b.n	800eadc <ProcessRadioRxDone+0xa40>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e536:	4b2b      	ldr	r3, [pc, #172]	@ (800e5e4 <ProcessRadioRxDone+0x548>)
 800e538:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d132      	bne.n	800e5a6 <ProcessRadioRxDone+0x50a>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e540:	f004 fcfd 	bl	8012f3e <LoRaMacClassBIsPingExpected>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d014      	beq.n	800e574 <ProcessRadioRxDone+0x4d8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e54a:	2000      	movs	r0, #0
 800e54c:	f004 fcae 	bl	8012eac <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e550:	2000      	movs	r0, #0
 800e552:	f004 fccf 	bl	8012ef4 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e556:	4b24      	ldr	r3, [pc, #144]	@ (800e5e8 <ProcessRadioRxDone+0x54c>)
 800e558:	2204      	movs	r2, #4
 800e55a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e55e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e560:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e564:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	4619      	mov	r1, r3
 800e56c:	4610      	mov	r0, r2
 800e56e:	f004 fd6f 	bl	8013050 <LoRaMacClassBSetFPendingBit>
 800e572:	e018      	b.n	800e5a6 <ProcessRadioRxDone+0x50a>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e574:	f004 fcea 	bl	8012f4c <LoRaMacClassBIsMulticastExpected>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d013      	beq.n	800e5a6 <ProcessRadioRxDone+0x50a>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e57e:	2000      	movs	r0, #0
 800e580:	f004 fc9e 	bl	8012ec0 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e584:	2000      	movs	r0, #0
 800e586:	f004 fcbe 	bl	8012f06 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e58a:	4b17      	ldr	r3, [pc, #92]	@ (800e5e8 <ProcessRadioRxDone+0x54c>)
 800e58c:	2205      	movs	r2, #5
 800e58e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e594:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e598:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4610      	mov	r0, r2
 800e5a2:	f004 fd55 	bl	8013050 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e5a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5a8:	4a0f      	ldr	r2, [pc, #60]	@ (800e5e8 <ProcessRadioRxDone+0x54c>)
 800e5aa:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e5ae:	f107 020e 	add.w	r2, r7, #14
 800e5b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e5b6:	4611      	mov	r1, r2
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f002 fd9f 	bl	80110fc <DetermineFrameType>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d006      	beq.n	800e5d2 <ProcessRadioRxDone+0x536>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5c4:	4b08      	ldr	r3, [pc, #32]	@ (800e5e8 <ProcessRadioRxDone+0x54c>)
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800e5cc:	f7ff fd40 	bl	800e050 <PrepareRxDoneAbort>
                return;
 800e5d0:	e284      	b.n	800eadc <ProcessRadioRxDone+0xa40>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800e5e2:	e055      	b.n	800e690 <ProcessRadioRxDone+0x5f4>
 800e5e4:	20000cd4 	.word	0x20000cd4
 800e5e8:	200007a0 	.word	0x200007a0
 800e5ec:	200009d8 	.word	0x200009d8
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e5f0:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e5f4:	499f      	ldr	r1, [pc, #636]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	005b      	lsls	r3, r3, #1
 800e5fa:	4413      	add	r3, r2
 800e5fc:	011b      	lsls	r3, r3, #4
 800e5fe:	440b      	add	r3, r1
 800e600:	33ec      	adds	r3, #236	@ 0xec
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e606:	429a      	cmp	r2, r3
 800e608:	d13d      	bne.n	800e686 <ProcessRadioRxDone+0x5ea>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e60a:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e60e:	4999      	ldr	r1, [pc, #612]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e610:	4613      	mov	r3, r2
 800e612:	005b      	lsls	r3, r3, #1
 800e614:	4413      	add	r3, r2
 800e616:	011b      	lsls	r3, r3, #4
 800e618:	440b      	add	r3, r1
 800e61a:	33e9      	adds	r3, #233	@ 0xe9
 800e61c:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d031      	beq.n	800e686 <ProcessRadioRxDone+0x5ea>
                {
                    multicast = 1;
 800e622:	2301      	movs	r3, #1
 800e624:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e628:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e62c:	4991      	ldr	r1, [pc, #580]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e62e:	4613      	mov	r3, r2
 800e630:	005b      	lsls	r3, r3, #1
 800e632:	4413      	add	r3, r2
 800e634:	011b      	lsls	r3, r3, #4
 800e636:	440b      	add	r3, r1
 800e638:	33ea      	adds	r3, #234	@ 0xea
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e640:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e644:	498b      	ldr	r1, [pc, #556]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e646:	4613      	mov	r3, r2
 800e648:	005b      	lsls	r3, r3, #1
 800e64a:	4413      	add	r3, r2
 800e64c:	011b      	lsls	r3, r3, #4
 800e64e:	440b      	add	r3, r1
 800e650:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e65a:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e65e:	4985      	ldr	r1, [pc, #532]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e660:	4613      	mov	r3, r2
 800e662:	005b      	lsls	r3, r3, #1
 800e664:	4413      	add	r3, r2
 800e666:	011b      	lsls	r3, r3, #4
 800e668:	440b      	add	r3, r1
 800e66a:	33ec      	adds	r3, #236	@ 0xec
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e672:	4b80      	ldr	r3, [pc, #512]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e674:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d10e      	bne.n	800e69a <ProcessRadioRxDone+0x5fe>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e67c:	4b7e      	ldr	r3, [pc, #504]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e67e:	2203      	movs	r2, #3
 800e680:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800e684:	e009      	b.n	800e69a <ProcessRadioRxDone+0x5fe>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e686:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800e68a:	3301      	adds	r3, #1
 800e68c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800e690:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800e694:	2b00      	cmp	r3, #0
 800e696:	d0ab      	beq.n	800e5f0 <ProcessRadioRxDone+0x554>
 800e698:	e000      	b.n	800e69c <ProcessRadioRxDone+0x600>
                    break;
 800e69a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e69c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d117      	bne.n	800e6d4 <ProcessRadioRxDone+0x638>
 800e6a4:	7bbb      	ldrb	r3, [r7, #14]
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	d10d      	bne.n	800e6c6 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e6aa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e6ae:	f003 0320 	and.w	r3, r3, #32
 800e6b2:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d106      	bne.n	800e6c6 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e6b8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e6bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6c0:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d006      	beq.n	800e6d4 <ProcessRadioRxDone+0x638>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e6c6:	4b6c      	ldr	r3, [pc, #432]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800e6ce:	f7ff fcbf 	bl	800e050 <PrepareRxDoneAbort>
                return;
 800e6d2:	e203      	b.n	800eadc <ProcessRadioRxDone+0xa40>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e6d4:	7bb9      	ldrb	r1, [r7, #14]
 800e6d6:	4c67      	ldr	r4, [pc, #412]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e6d8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e6dc:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800e6e0:	f107 0310 	add.w	r3, r7, #16
 800e6e4:	9301      	str	r3, [sp, #4]
 800e6e6:	f107 030f 	add.w	r3, r7, #15
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800e6f0:	f000 feec 	bl	800f4cc <GetFCntDown>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e6fa:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d017      	beq.n	800e732 <ProcessRadioRxDone+0x696>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e702:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e706:	2b07      	cmp	r3, #7
 800e708:	d104      	bne.n	800e714 <ProcessRadioRxDone+0x678>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e70a:	4b5b      	ldr	r3, [pc, #364]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e70c:	2208      	movs	r2, #8
 800e70e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800e712:	e003      	b.n	800e71c <ProcessRadioRxDone+0x680>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e714:	4b58      	ldr	r3, [pc, #352]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	4a56      	ldr	r2, [pc, #344]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e720:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	4a54      	ldr	r2, [pc, #336]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e728:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800e72c:	f7ff fc90 	bl	800e050 <PrepareRxDoneAbort>
                return;
 800e730:	e1d4      	b.n	800eadc <ProcessRadioRxDone+0xa40>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e732:	7bfa      	ldrb	r2, [r7, #15]
 800e734:	6939      	ldr	r1, [r7, #16]
 800e736:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800e73a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	460b      	mov	r3, r1
 800e742:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800e746:	f005 ff4f 	bl	80145e8 <LoRaMacCryptoUnsecureMessage>
 800e74a:	4603      	mov	r3, r0
 800e74c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e750:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00f      	beq.n	800e778 <ProcessRadioRxDone+0x6dc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e758:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	d104      	bne.n	800e76a <ProcessRadioRxDone+0x6ce>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e760:	4b45      	ldr	r3, [pc, #276]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e762:	220a      	movs	r2, #10
 800e764:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800e768:	e003      	b.n	800e772 <ProcessRadioRxDone+0x6d6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e76a:	4b43      	ldr	r3, [pc, #268]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e76c:	220b      	movs	r2, #11
 800e76e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800e772:	f7ff fc6d 	bl	800e050 <PrepareRxDoneAbort>
                return;
 800e776:	e1b1      	b.n	800eadc <ProcessRadioRxDone+0xa40>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e778:	4b3f      	ldr	r3, [pc, #252]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800e780:	4a3d      	ldr	r2, [pc, #244]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e782:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e786:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800e78a:	4b3b      	ldr	r3, [pc, #236]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e78c:	2200      	movs	r2, #0
 800e78e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800e792:	4b39      	ldr	r3, [pc, #228]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e794:	2200      	movs	r2, #0
 800e796:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	4a36      	ldr	r2, [pc, #216]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e79e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	4a34      	ldr	r2, [pc, #208]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e7a6:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e7aa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e7ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	bf14      	ite	ne
 800e7b8:	2301      	movne	r3, #1
 800e7ba:	2300      	moveq	r3, #0
 800e7bc:	b2da      	uxtb	r2, r3
 800e7be:	4b2e      	ldr	r3, [pc, #184]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e7c0:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e7c4:	4b2c      	ldr	r3, [pc, #176]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e7cc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e7d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	bf14      	ite	ne
 800e7da:	2301      	movne	r3, #1
 800e7dc:	2300      	moveq	r3, #0
 800e7de:	b2da      	uxtb	r2, r3
 800e7e0:	4b25      	ldr	r3, [pc, #148]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e7e2:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e7e6:	4b24      	ldr	r3, [pc, #144]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e7e8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d004      	beq.n	800e7fa <ProcessRadioRxDone+0x75e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e7f0:	4b21      	ldr	r3, [pc, #132]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e7f2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d106      	bne.n	800e808 <ProcessRadioRxDone+0x76c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e7fa:	4b1e      	ldr	r3, [pc, #120]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e800:	4b1c      	ldr	r3, [pc, #112]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e802:	2201      	movs	r2, #1
 800e804:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e808:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d104      	bne.n	800e81a <ProcessRadioRxDone+0x77e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e810:	4b19      	ldr	r3, [pc, #100]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e812:	2202      	movs	r2, #2
 800e814:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800e818:	e03a      	b.n	800e890 <ProcessRadioRxDone+0x7f4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e81a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800e81e:	f023 031f 	bic.w	r3, r3, #31
 800e822:	b2db      	uxtb	r3, r3
 800e824:	2ba0      	cmp	r3, #160	@ 0xa0
 800e826:	d12b      	bne.n	800e880 <ProcessRadioRxDone+0x7e4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e828:	4b12      	ldr	r3, [pc, #72]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e830:	4b10      	ldr	r3, [pc, #64]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e832:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800e836:	2b00      	cmp	r3, #0
 800e838:	d102      	bne.n	800e840 <ProcessRadioRxDone+0x7a4>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e83a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e83c:	4a0d      	ldr	r2, [pc, #52]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e83e:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e840:	4b0d      	ldr	r3, [pc, #52]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e842:	2201      	movs	r2, #1
 800e844:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e848:	4b0b      	ldr	r3, [pc, #44]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e84a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d01e      	beq.n	800e890 <ProcessRadioRxDone+0x7f4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e852:	4b09      	ldr	r3, [pc, #36]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e854:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d019      	beq.n	800e890 <ProcessRadioRxDone+0x7f4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e85c:	4b05      	ldr	r3, [pc, #20]	@ (800e874 <ProcessRadioRxDone+0x7d8>)
 800e85e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e862:	4a05      	ldr	r2, [pc, #20]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e864:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e868:	4b04      	ldr	r3, [pc, #16]	@ (800e87c <ProcessRadioRxDone+0x7e0>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a02      	ldr	r2, [pc, #8]	@ (800e878 <ProcessRadioRxDone+0x7dc>)
 800e86e:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800e872:	e00d      	b.n	800e890 <ProcessRadioRxDone+0x7f4>
 800e874:	20000cd4 	.word	0x20000cd4
 800e878:	200007a0 	.word	0x200007a0
 800e87c:	200018e4 	.word	0x200018e4
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e880:	4b98      	ldr	r3, [pc, #608]	@ (800eae4 <ProcessRadioRxDone+0xa48>)
 800e882:	2200      	movs	r2, #0
 800e884:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e888:	4b97      	ldr	r3, [pc, #604]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e88a:	2200      	movs	r2, #0
 800e88c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800e890:	4b94      	ldr	r3, [pc, #592]	@ (800eae4 <ProcessRadioRxDone+0xa48>)
 800e892:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e896:	2b00      	cmp	r3, #0
 800e898:	d106      	bne.n	800e8a8 <ProcessRadioRxDone+0x80c>
 800e89a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e89e:	f003 0310 	and.w	r3, r3, #16
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d004      	beq.n	800e8b2 <ProcessRadioRxDone+0x816>
 800e8a8:	4b8e      	ldr	r3, [pc, #568]	@ (800eae4 <ProcessRadioRxDone+0xa48>)
 800e8aa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d004      	beq.n	800e8bc <ProcessRadioRxDone+0x820>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 800e8b2:	4b8d      	ldr	r3, [pc, #564]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e8b4:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <ProcessRadioRxDone+0x828>
            //if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800e8bc:	4b8a      	ldr	r3, [pc, #552]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e8be:	2201      	movs	r2, #1
 800e8c0:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e8c4:	4b88      	ldr	r3, [pc, #544]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e8c6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e8ca:	4a87      	ldr	r2, [pc, #540]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e8cc:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800e8d0:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f001 ffa5 	bl	8010824 <RemoveMacCommands>

            switch( fType )
 800e8da:	7bbb      	ldrb	r3, [r7, #14]
 800e8dc:	2b03      	cmp	r3, #3
 800e8de:	d874      	bhi.n	800e9ca <ProcessRadioRxDone+0x92e>
 800e8e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e8e8 <ProcessRadioRxDone+0x84c>)
 800e8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e6:	bf00      	nop
 800e8e8:	0800e8f9 	.word	0x0800e8f9
 800e8ec:	0800e949 	.word	0x0800e949
 800e8f0:	0800e97f 	.word	0x0800e97f
 800e8f4:	0800e9a5 	.word	0x0800e9a5
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e8f8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e8fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e900:	b2db      	uxtb	r3, r3
 800e902:	461c      	mov	r4, r3
 800e904:	4b78      	ldr	r3, [pc, #480]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e906:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e90a:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e90e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e912:	f102 0010 	add.w	r0, r2, #16
 800e916:	9300      	str	r3, [sp, #0]
 800e918:	460b      	mov	r3, r1
 800e91a:	4622      	mov	r2, r4
 800e91c:	2100      	movs	r1, #0
 800e91e:	f000 ff51 	bl	800f7c4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e922:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e926:	4b70      	ldr	r3, [pc, #448]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e928:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e92c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e92e:	4a6e      	ldr	r2, [pc, #440]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e930:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e934:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e938:	4b6b      	ldr	r3, [pc, #428]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e93a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800e93e:	4b6a      	ldr	r3, [pc, #424]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e940:	2201      	movs	r2, #1
 800e942:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800e946:	e047      	b.n	800e9d8 <ProcessRadioRxDone+0x93c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e948:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e94c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e950:	b2db      	uxtb	r3, r3
 800e952:	461c      	mov	r4, r3
 800e954:	4b64      	ldr	r3, [pc, #400]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e956:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e95a:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e95e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e962:	f102 0010 	add.w	r0, r2, #16
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	460b      	mov	r3, r1
 800e96a:	4622      	mov	r2, r4
 800e96c:	2100      	movs	r1, #0
 800e96e:	f000 ff29 	bl	800f7c4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e972:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e976:	4b5c      	ldr	r3, [pc, #368]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e978:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800e97c:	e02c      	b.n	800e9d8 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e97e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e980:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e984:	4b58      	ldr	r3, [pc, #352]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e986:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e98a:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	460b      	mov	r3, r1
 800e992:	2100      	movs	r1, #0
 800e994:	f000 ff16 	bl	800f7c4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e998:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e99c:	4b52      	ldr	r3, [pc, #328]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e99e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800e9a2:	e019      	b.n	800e9d8 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e9a4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e9a8:	4b4f      	ldr	r3, [pc, #316]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e9aa:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e9ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9b0:	4a4d      	ldr	r2, [pc, #308]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e9b2:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e9b6:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e9ba:	4b4b      	ldr	r3, [pc, #300]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e9bc:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800e9c0:	4b49      	ldr	r3, [pc, #292]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800e9c8:	e006      	b.n	800e9d8 <ProcessRadioRxDone+0x93c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9ca:	4b47      	ldr	r3, [pc, #284]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800e9d2:	f7ff fb3d 	bl	800e050 <PrepareRxDoneAbort>
                    break;
 800e9d6:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e9d8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800e9dc:	2be0      	cmp	r3, #224	@ 0xe0
 800e9de:	d118      	bne.n	800ea12 <ProcessRadioRxDone+0x976>
 800e9e0:	4b40      	ldr	r3, [pc, #256]	@ (800eae4 <ProcessRadioRxDone+0xa48>)
 800e9e2:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800e9e6:	f083 0301 	eor.w	r3, r3, #1
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d010      	beq.n	800ea12 <ProcessRadioRxDone+0x976>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e9f0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e9f4:	4b3c      	ldr	r3, [pc, #240]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e9f6:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800e9fa:	4b3b      	ldr	r3, [pc, #236]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800ea02:	4b39      	ldr	r3, [pc, #228]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800ea0a:	4b37      	ldr	r3, [pc, #220]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ea12:	4a35      	ldr	r2, [pc, #212]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea14:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ea18:	f043 0302 	orr.w	r3, r3, #2
 800ea1c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800ea20:	e037      	b.n	800ea92 <ProcessRadioRxDone+0x9f6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800ea22:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800ea26:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ea2a:	18d1      	adds	r1, r2, r3
 800ea2c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	482b      	ldr	r0, [pc, #172]	@ (800eaec <ProcessRadioRxDone+0xa50>)
 800ea3e:	f008 fbe2 	bl	8017206 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800ea42:	4b29      	ldr	r3, [pc, #164]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea44:	2203      	movs	r2, #3
 800ea46:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ea4a:	4b27      	ldr	r3, [pc, #156]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800ea52:	4b25      	ldr	r3, [pc, #148]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea54:	4a25      	ldr	r2, [pc, #148]	@ (800eaec <ProcessRadioRxDone+0xa50>)
 800ea56:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800ea5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	b2da      	uxtb	r2, r3
 800ea68:	4b1f      	ldr	r3, [pc, #124]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea6a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ea6e:	4a1e      	ldr	r2, [pc, #120]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea70:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ea74:	f043 0302 	orr.w	r3, r3, #2
 800ea78:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800ea7c:	e009      	b.n	800ea92 <ProcessRadioRxDone+0x9f6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea7e:	4b1a      	ldr	r3, [pc, #104]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800ea86:	f7ff fae3 	bl	800e050 <PrepareRxDoneAbort>
            break;
 800ea8a:	e002      	b.n	800ea92 <ProcessRadioRxDone+0x9f6>
                        break;
 800ea8c:	bf00      	nop
 800ea8e:	e000      	b.n	800ea92 <ProcessRadioRxDone+0x9f6>
            break;
 800ea90:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ea92:	4b15      	ldr	r3, [pc, #84]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea94:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d004      	beq.n	800eaa6 <ProcessRadioRxDone+0xa0a>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ea9c:	4b12      	ldr	r3, [pc, #72]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800ea9e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d10c      	bne.n	800eac0 <ProcessRadioRxDone+0xa24>
    {
        if( MacCtx.NodeAckRequested == true )
 800eaa6:	4b10      	ldr	r3, [pc, #64]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800eaa8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d007      	beq.n	800eac0 <ProcessRadioRxDone+0xa24>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800eab0:	4b0d      	ldr	r3, [pc, #52]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800eab2:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <ProcessRadioRxDone+0xa24>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800eaba:	2000      	movs	r0, #0
 800eabc:	f000 fcec 	bl	800f498 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800eac0:	4b09      	ldr	r3, [pc, #36]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800eac2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d006      	beq.n	800ead8 <ProcessRadioRxDone+0xa3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800eaca:	4a07      	ldr	r2, [pc, #28]	@ (800eae8 <ProcessRadioRxDone+0xa4c>)
 800eacc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ead0:	f043 0310 	orr.w	r3, r3, #16
 800ead4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800ead8:	f7ff f9fc 	bl	800ded4 <UpdateRxSlotIdleState>
}
 800eadc:	379c      	adds	r7, #156	@ 0x9c
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd90      	pop	{r4, r7, pc}
 800eae2:	bf00      	nop
 800eae4:	20000cd4 	.word	0x20000cd4
 800eae8:	200007a0 	.word	0x200007a0
 800eaec:	200009d8 	.word	0x200009d8

0800eaf0 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eaf4:	4b11      	ldr	r3, [pc, #68]	@ (800eb3c <ProcessRadioTxTimeout+0x4c>)
 800eaf6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d002      	beq.n	800eb04 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800eafe:	4b10      	ldr	r3, [pc, #64]	@ (800eb40 <ProcessRadioTxTimeout+0x50>)
 800eb00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb02:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800eb04:	f7ff f9e6 	bl	800ded4 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800eb08:	4b0e      	ldr	r3, [pc, #56]	@ (800eb44 <ProcessRadioTxTimeout+0x54>)
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800eb10:	2002      	movs	r0, #2
 800eb12:	f004 fee3 	bl	80138dc <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800eb16:	4b0b      	ldr	r3, [pc, #44]	@ (800eb44 <ProcessRadioTxTimeout+0x54>)
 800eb18:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d003      	beq.n	800eb28 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800eb20:	4b08      	ldr	r3, [pc, #32]	@ (800eb44 <ProcessRadioTxTimeout+0x54>)
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800eb28:	4a06      	ldr	r2, [pc, #24]	@ (800eb44 <ProcessRadioTxTimeout+0x54>)
 800eb2a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800eb2e:	f043 0310 	orr.w	r3, r3, #16
 800eb32:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800eb36:	bf00      	nop
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	20000cd4 	.word	0x20000cd4
 800eb40:	0801c570 	.word	0x0801c570
 800eb44:	200007a0 	.word	0x200007a0

0800eb48 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	4603      	mov	r3, r0
 800eb50:	460a      	mov	r2, r1
 800eb52:	71fb      	strb	r3, [r7, #7]
 800eb54:	4613      	mov	r3, r2
 800eb56:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eb5c:	4b3d      	ldr	r3, [pc, #244]	@ (800ec54 <HandleRadioRxErrorTimeout+0x10c>)
 800eb5e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d002      	beq.n	800eb6c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800eb66:	4b3c      	ldr	r3, [pc, #240]	@ (800ec58 <HandleRadioRxErrorTimeout+0x110>)
 800eb68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb6a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800eb6c:	f004 f9e0 	bl	8012f30 <LoRaMacClassBIsBeaconExpected>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d007      	beq.n	800eb86 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800eb76:	2002      	movs	r0, #2
 800eb78:	f004 f98e 	bl	8012e98 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	f004 f9b0 	bl	8012ee2 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800eb82:	2301      	movs	r3, #1
 800eb84:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800eb86:	4b33      	ldr	r3, [pc, #204]	@ (800ec54 <HandleRadioRxErrorTimeout+0x10c>)
 800eb88:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d119      	bne.n	800ebc4 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800eb90:	f004 f9d5 	bl	8012f3e <LoRaMacClassBIsPingExpected>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d007      	beq.n	800ebaa <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	f004 f986 	bl	8012eac <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800eba0:	2000      	movs	r0, #0
 800eba2:	f004 f9a7 	bl	8012ef4 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800eba6:	2301      	movs	r3, #1
 800eba8:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ebaa:	f004 f9cf 	bl	8012f4c <LoRaMacClassBIsMulticastExpected>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d007      	beq.n	800ebc4 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ebb4:	2000      	movs	r0, #0
 800ebb6:	f004 f983 	bl	8012ec0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ebba:	2000      	movs	r0, #0
 800ebbc:	f004 f9a3 	bl	8012f06 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800ebc4:	7bfb      	ldrb	r3, [r7, #15]
 800ebc6:	f083 0301 	eor.w	r3, r3, #1
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d03b      	beq.n	800ec48 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ebd0:	4b22      	ldr	r3, [pc, #136]	@ (800ec5c <HandleRadioRxErrorTimeout+0x114>)
 800ebd2:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d122      	bne.n	800ec20 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800ebda:	4b20      	ldr	r3, [pc, #128]	@ (800ec5c <HandleRadioRxErrorTimeout+0x114>)
 800ebdc:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d003      	beq.n	800ebec <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ebe4:	4a1d      	ldr	r2, [pc, #116]	@ (800ec5c <HandleRadioRxErrorTimeout+0x114>)
 800ebe6:	79fb      	ldrb	r3, [r7, #7]
 800ebe8:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ebec:	79fb      	ldrb	r3, [r7, #7]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f004 fe74 	bl	80138dc <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ebf4:	4b17      	ldr	r3, [pc, #92]	@ (800ec54 <HandleRadioRxErrorTimeout+0x10c>)
 800ebf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f00c fd49 	bl	801b690 <UTIL_TIMER_GetElapsedTime>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	4b16      	ldr	r3, [pc, #88]	@ (800ec5c <HandleRadioRxErrorTimeout+0x114>)
 800ec02:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d31e      	bcc.n	800ec48 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ec0a:	4815      	ldr	r0, [pc, #84]	@ (800ec60 <HandleRadioRxErrorTimeout+0x118>)
 800ec0c:	f00c fc14 	bl	801b438 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ec10:	4a12      	ldr	r2, [pc, #72]	@ (800ec5c <HandleRadioRxErrorTimeout+0x114>)
 800ec12:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ec16:	f043 0310 	orr.w	r3, r3, #16
 800ec1a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800ec1e:	e013      	b.n	800ec48 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800ec20:	4b0e      	ldr	r3, [pc, #56]	@ (800ec5c <HandleRadioRxErrorTimeout+0x114>)
 800ec22:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d003      	beq.n	800ec32 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ec2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ec5c <HandleRadioRxErrorTimeout+0x114>)
 800ec2c:	79bb      	ldrb	r3, [r7, #6]
 800ec2e:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ec32:	79bb      	ldrb	r3, [r7, #6]
 800ec34:	4618      	mov	r0, r3
 800ec36:	f004 fe51 	bl	80138dc <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800ec3a:	4a08      	ldr	r2, [pc, #32]	@ (800ec5c <HandleRadioRxErrorTimeout+0x114>)
 800ec3c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ec40:	f043 0310 	orr.w	r3, r3, #16
 800ec44:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800ec48:	f7ff f944 	bl	800ded4 <UpdateRxSlotIdleState>
}
 800ec4c:	bf00      	nop
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	20000cd4 	.word	0x20000cd4
 800ec58:	0801c570 	.word	0x0801c570
 800ec5c:	200007a0 	.word	0x200007a0
 800ec60:	20000b38 	.word	0x20000b38

0800ec64 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800ec68:	2106      	movs	r1, #6
 800ec6a:	2005      	movs	r0, #5
 800ec6c:	f7ff ff6c 	bl	800eb48 <HandleRadioRxErrorTimeout>
}
 800ec70:	bf00      	nop
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800ec78:	2104      	movs	r1, #4
 800ec7a:	2003      	movs	r0, #3
 800ec7c:	f7ff ff64 	bl	800eb48 <HandleRadioRxErrorTimeout>
}
 800ec80:	bf00      	nop
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ec8e:	607b      	str	r3, [r7, #4]
  return(result);
 800ec90:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800ec92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec94:	b672      	cpsid	i
}
 800ec96:	bf00      	nop
    events = LoRaMacRadioEvents;
 800ec98:	4b1d      	ldr	r3, [pc, #116]	@ (800ed10 <LoRaMacHandleIrqEvents+0x8c>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800ec9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ed10 <LoRaMacHandleIrqEvents+0x8c>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	f383 8810 	msr	PRIMASK, r3
}
 800ecae:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d027      	beq.n	800ed06 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800ecb6:	783b      	ldrb	r3, [r7, #0]
 800ecb8:	f003 0320 	and.w	r3, r3, #32
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d001      	beq.n	800ecc6 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800ecc2:	f7ff f91f 	bl	800df04 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800ecc6:	783b      	ldrb	r3, [r7, #0]
 800ecc8:	f003 0310 	and.w	r3, r3, #16
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800ecd2:	f7ff f9e3 	bl	800e09c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800ecd6:	783b      	ldrb	r3, [r7, #0]
 800ecd8:	f003 0308 	and.w	r3, r3, #8
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d001      	beq.n	800ece6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ece2:	f7ff ff05 	bl	800eaf0 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ece6:	783b      	ldrb	r3, [r7, #0]
 800ece8:	f003 0304 	and.w	r3, r3, #4
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d001      	beq.n	800ecf6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ecf2:	f7ff ffb7 	bl	800ec64 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ecf6:	783b      	ldrb	r3, [r7, #0]
 800ecf8:	f003 0302 	and.w	r3, r3, #2
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d001      	beq.n	800ed06 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ed02:	f7ff ffb7 	bl	800ec74 <ProcessRadioRxTimeout>
        }
    }
}
 800ed06:	bf00      	nop
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	200018dc 	.word	0x200018dc

0800ed14 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800ed14:	b480      	push	{r7}
 800ed16:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800ed18:	4b10      	ldr	r3, [pc, #64]	@ (800ed5c <LoRaMacIsBusy+0x48>)
 800ed1a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d101      	bne.n	800ed26 <LoRaMacIsBusy+0x12>
    {
        return false;
 800ed22:	2300      	movs	r3, #0
 800ed24:	e015      	b.n	800ed52 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800ed26:	4b0e      	ldr	r3, [pc, #56]	@ (800ed60 <LoRaMacIsBusy+0x4c>)
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	f003 0301 	and.w	r3, r3, #1
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <LoRaMacIsBusy+0x24>
    {
        return true;
 800ed34:	2301      	movs	r3, #1
 800ed36:	e00c      	b.n	800ed52 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ed38:	4b08      	ldr	r3, [pc, #32]	@ (800ed5c <LoRaMacIsBusy+0x48>)
 800ed3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d106      	bne.n	800ed50 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800ed42:	4b06      	ldr	r3, [pc, #24]	@ (800ed5c <LoRaMacIsBusy+0x48>)
 800ed44:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d101      	bne.n	800ed50 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	e000      	b.n	800ed52 <LoRaMacIsBusy+0x3e>
    }
    return true;
 800ed50:	2301      	movs	r3, #1
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bc80      	pop	{r7}
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	200007a0 	.word	0x200007a0
 800ed60:	200018dc 	.word	0x200018dc

0800ed64 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800ed64:	b480      	push	{r7}
 800ed66:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800ed68:	4b05      	ldr	r3, [pc, #20]	@ (800ed80 <LoRaMacIsStopped+0x1c>)
 800ed6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d101      	bne.n	800ed76 <LoRaMacIsStopped+0x12>
    {
        return true;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e000      	b.n	800ed78 <LoRaMacIsStopped+0x14>
    }
    return false;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bc80      	pop	{r7}
 800ed7e:	4770      	bx	lr
 800ed80:	200007a0 	.word	0x200007a0

0800ed84 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800ed8e:	4a04      	ldr	r2, [pc, #16]	@ (800eda0 <LoRaMacEnableRequests+0x1c>)
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 800ed96:	bf00      	nop
 800ed98:	370c      	adds	r7, #12
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bc80      	pop	{r7}
 800ed9e:	4770      	bx	lr
 800eda0:	200007a0 	.word	0x200007a0

0800eda4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800edaa:	4b2c      	ldr	r3, [pc, #176]	@ (800ee5c <LoRaMacHandleRequestEvents+0xb8>)
 800edac:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800edb0:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800edb2:	4b2a      	ldr	r3, [pc, #168]	@ (800ee5c <LoRaMacHandleRequestEvents+0xb8>)
 800edb4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d14a      	bne.n	800ee52 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800edbc:	4b27      	ldr	r3, [pc, #156]	@ (800ee5c <LoRaMacHandleRequestEvents+0xb8>)
 800edbe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800edc2:	f003 0301 	and.w	r3, r3, #1
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d006      	beq.n	800edda <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800edcc:	4a23      	ldr	r2, [pc, #140]	@ (800ee5c <LoRaMacHandleRequestEvents+0xb8>)
 800edce:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800edd2:	f023 0301 	bic.w	r3, r3, #1
 800edd6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800edda:	4b20      	ldr	r3, [pc, #128]	@ (800ee5c <LoRaMacHandleRequestEvents+0xb8>)
 800eddc:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ede0:	f003 0304 	and.w	r3, r3, #4
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d006      	beq.n	800edf8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800edea:	4a1c      	ldr	r2, [pc, #112]	@ (800ee5c <LoRaMacHandleRequestEvents+0xb8>)
 800edec:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800edf0:	f023 0304 	bic.w	r3, r3, #4
 800edf4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800edf8:	2001      	movs	r0, #1
 800edfa:	f7ff ffc3 	bl	800ed84 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800edfe:	793b      	ldrb	r3, [r7, #4]
 800ee00:	f003 0301 	and.w	r3, r3, #1
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d005      	beq.n	800ee16 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ee0a:	4b14      	ldr	r3, [pc, #80]	@ (800ee5c <LoRaMacHandleRequestEvents+0xb8>)
 800ee0c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4813      	ldr	r0, [pc, #76]	@ (800ee60 <LoRaMacHandleRequestEvents+0xbc>)
 800ee14:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ee16:	793b      	ldrb	r3, [r7, #4]
 800ee18:	f003 0304 	and.w	r3, r3, #4
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00e      	beq.n	800ee40 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ee22:	4810      	ldr	r0, [pc, #64]	@ (800ee64 <LoRaMacHandleRequestEvents+0xc0>)
 800ee24:	f004 fda8 	bl	8013978 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ee28:	f004 fdf8 	bl	8013a1c <LoRaMacConfirmQueueGetCnt>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d006      	beq.n	800ee40 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ee32:	4a0a      	ldr	r2, [pc, #40]	@ (800ee5c <LoRaMacHandleRequestEvents+0xb8>)
 800ee34:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ee38:	f043 0304 	orr.w	r3, r3, #4
 800ee3c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800ee40:	f004 f8a2 	bl	8012f88 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800ee44:	4a05      	ldr	r2, [pc, #20]	@ (800ee5c <LoRaMacHandleRequestEvents+0xb8>)
 800ee46:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ee4a:	f023 0310 	bic.w	r3, r3, #16
 800ee4e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800ee52:	bf00      	nop
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	200007a0 	.word	0x200007a0
 800ee60:	20000be0 	.word	0x20000be0
 800ee64:	20000bf4 	.word	0x20000bf4

0800ee68 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ee6c:	4b16      	ldr	r3, [pc, #88]	@ (800eec8 <LoRaMacHandleIndicationEvents+0x60>)
 800ee6e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ee72:	f003 0308 	and.w	r3, r3, #8
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00d      	beq.n	800ee98 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ee7c:	4a12      	ldr	r2, [pc, #72]	@ (800eec8 <LoRaMacHandleIndicationEvents+0x60>)
 800ee7e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ee82:	f023 0308 	bic.w	r3, r3, #8
 800ee86:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ee8a:	4b0f      	ldr	r3, [pc, #60]	@ (800eec8 <LoRaMacHandleIndicationEvents+0x60>)
 800ee8c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	490e      	ldr	r1, [pc, #56]	@ (800eecc <LoRaMacHandleIndicationEvents+0x64>)
 800ee94:	480e      	ldr	r0, [pc, #56]	@ (800eed0 <LoRaMacHandleIndicationEvents+0x68>)
 800ee96:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ee98:	4b0b      	ldr	r3, [pc, #44]	@ (800eec8 <LoRaMacHandleIndicationEvents+0x60>)
 800ee9a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ee9e:	f003 0302 	and.w	r3, r3, #2
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d00d      	beq.n	800eec4 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800eea8:	4a07      	ldr	r2, [pc, #28]	@ (800eec8 <LoRaMacHandleIndicationEvents+0x60>)
 800eeaa:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800eeae:	f023 0302 	bic.w	r3, r3, #2
 800eeb2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800eeb6:	4b04      	ldr	r3, [pc, #16]	@ (800eec8 <LoRaMacHandleIndicationEvents+0x60>)
 800eeb8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	4903      	ldr	r1, [pc, #12]	@ (800eecc <LoRaMacHandleIndicationEvents+0x64>)
 800eec0:	4804      	ldr	r0, [pc, #16]	@ (800eed4 <LoRaMacHandleIndicationEvents+0x6c>)
 800eec2:	4798      	blx	r3
    }
}
 800eec4:	bf00      	nop
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	200007a0 	.word	0x200007a0
 800eecc:	20000c2c 	.word	0x20000c2c
 800eed0:	20000c08 	.word	0x20000c08
 800eed4:	20000bc0 	.word	0x20000bc0

0800eed8 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800eede:	4b2a      	ldr	r3, [pc, #168]	@ (800ef88 <LoRaMacHandleMcpsRequest+0xb0>)
 800eee0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800eee4:	f003 0301 	and.w	r3, r3, #1
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d048      	beq.n	800ef80 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800eeee:	2300      	movs	r3, #0
 800eef0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800eef2:	2300      	movs	r3, #0
 800eef4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800eef6:	4b24      	ldr	r3, [pc, #144]	@ (800ef88 <LoRaMacHandleMcpsRequest+0xb0>)
 800eef8:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d004      	beq.n	800ef0a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ef00:	4b21      	ldr	r3, [pc, #132]	@ (800ef88 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef02:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	d104      	bne.n	800ef14 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ef0a:	f002 f959 	bl	80111c0 <CheckRetransUnconfirmedUplink>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	71fb      	strb	r3, [r7, #7]
 800ef12:	e010      	b.n	800ef36 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ef14:	4b1c      	ldr	r3, [pc, #112]	@ (800ef88 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef16:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d10b      	bne.n	800ef36 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800ef1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ef88 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef20:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d004      	beq.n	800ef32 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ef28:	f002 f976 	bl	8011218 <CheckRetransConfirmedUplink>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	71fb      	strb	r3, [r7, #7]
 800ef30:	e001      	b.n	800ef36 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800ef32:	2301      	movs	r3, #1
 800ef34:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800ef36:	79fb      	ldrb	r3, [r7, #7]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00d      	beq.n	800ef58 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800ef3c:	4813      	ldr	r0, [pc, #76]	@ (800ef8c <LoRaMacHandleMcpsRequest+0xb4>)
 800ef3e:	f00c fa7b 	bl	801b438 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ef42:	4b11      	ldr	r3, [pc, #68]	@ (800ef88 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef44:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ef48:	f023 0320 	bic.w	r3, r3, #32
 800ef4c:	4a0e      	ldr	r2, [pc, #56]	@ (800ef88 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef4e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800ef52:	f002 f99b 	bl	801128c <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800ef56:	e013      	b.n	800ef80 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800ef58:	79bb      	ldrb	r3, [r7, #6]
 800ef5a:	f083 0301 	eor.w	r3, r3, #1
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00d      	beq.n	800ef80 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ef64:	4a08      	ldr	r2, [pc, #32]	@ (800ef88 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef66:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ef6a:	f023 0310 	bic.w	r3, r3, #16
 800ef6e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800ef72:	4b05      	ldr	r3, [pc, #20]	@ (800ef88 <LoRaMacHandleMcpsRequest+0xb0>)
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	f000 f9c8 	bl	800f310 <OnTxDelayedTimerEvent>
}
 800ef80:	bf00      	nop
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	200007a0 	.word	0x200007a0
 800ef8c:	20000b08 	.word	0x20000b08

0800ef90 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ef94:	4b18      	ldr	r3, [pc, #96]	@ (800eff8 <LoRaMacHandleMlmeRequest+0x68>)
 800ef96:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ef9a:	f003 0304 	and.w	r3, r3, #4
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d026      	beq.n	800eff2 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800efa4:	2001      	movs	r0, #1
 800efa6:	f004 fccd 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d012      	beq.n	800efd6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800efb0:	2001      	movs	r0, #1
 800efb2:	f004 fc69 	bl	8013888 <LoRaMacConfirmQueueGetStatus>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d103      	bne.n	800efc4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800efbc:	4b0e      	ldr	r3, [pc, #56]	@ (800eff8 <LoRaMacHandleMlmeRequest+0x68>)
 800efbe:	2200      	movs	r2, #0
 800efc0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800efc4:	4b0c      	ldr	r3, [pc, #48]	@ (800eff8 <LoRaMacHandleMlmeRequest+0x68>)
 800efc6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800efca:	f023 0302 	bic.w	r3, r3, #2
 800efce:	4a0a      	ldr	r2, [pc, #40]	@ (800eff8 <LoRaMacHandleMlmeRequest+0x68>)
 800efd0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800efd4:	e00d      	b.n	800eff2 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800efd6:	2006      	movs	r0, #6
 800efd8:	f004 fcb4 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d007      	beq.n	800eff2 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800efe2:	4b05      	ldr	r3, [pc, #20]	@ (800eff8 <LoRaMacHandleMlmeRequest+0x68>)
 800efe4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800efe8:	f023 0302 	bic.w	r3, r3, #2
 800efec:	4a02      	ldr	r2, [pc, #8]	@ (800eff8 <LoRaMacHandleMlmeRequest+0x68>)
 800efee:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800eff2:	bf00      	nop
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	200007a0 	.word	0x200007a0

0800effc <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f000:	200b      	movs	r0, #11
 800f002:	f004 fc9f 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d019      	beq.n	800f040 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f00c:	4b0e      	ldr	r3, [pc, #56]	@ (800f048 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f00e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f012:	f003 0301 	and.w	r3, r3, #1
 800f016:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d111      	bne.n	800f040 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f01c:	4b0a      	ldr	r3, [pc, #40]	@ (800f048 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f01e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f022:	f003 0304 	and.w	r3, r3, #4
 800f026:	b2db      	uxtb	r3, r3
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d009      	beq.n	800f040 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f02c:	4b06      	ldr	r3, [pc, #24]	@ (800f048 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f02e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f032:	f023 0302 	bic.w	r3, r3, #2
 800f036:	4a04      	ldr	r2, [pc, #16]	@ (800f048 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f038:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f03c:	2301      	movs	r3, #1
 800f03e:	e000      	b.n	800f042 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	200007a0 	.word	0x200007a0

0800f04c <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f04c:	b480      	push	{r7}
 800f04e:	b083      	sub	sp, #12
 800f050:	af00      	add	r7, sp, #0
 800f052:	4603      	mov	r3, r0
 800f054:	71fb      	strb	r3, [r7, #7]
 800f056:	460b      	mov	r3, r1
 800f058:	71bb      	strb	r3, [r7, #6]
 800f05a:	4613      	mov	r3, r2
 800f05c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f05e:	79fb      	ldrb	r3, [r7, #7]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d00a      	beq.n	800f07a <CheckForMinimumAbpDatarate+0x2e>
 800f064:	79bb      	ldrb	r3, [r7, #6]
 800f066:	2b01      	cmp	r3, #1
 800f068:	d107      	bne.n	800f07a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f06a:	797b      	ldrb	r3, [r7, #5]
 800f06c:	f083 0301 	eor.w	r3, r3, #1
 800f070:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f072:	2b00      	cmp	r3, #0
 800f074:	d001      	beq.n	800f07a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f076:	2301      	movs	r3, #1
 800f078:	e000      	b.n	800f07c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	370c      	adds	r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	bc80      	pop	{r7}
 800f084:	4770      	bx	lr
	...

0800f088 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f088:	b480      	push	{r7}
 800f08a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f08c:	4b0d      	ldr	r3, [pc, #52]	@ (800f0c4 <LoRaMacCheckForRxAbort+0x3c>)
 800f08e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00f      	beq.n	800f0ba <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f09a:	4b0a      	ldr	r3, [pc, #40]	@ (800f0c4 <LoRaMacCheckForRxAbort+0x3c>)
 800f09c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0a4:	4a07      	ldr	r2, [pc, #28]	@ (800f0c4 <LoRaMacCheckForRxAbort+0x3c>)
 800f0a6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f0aa:	4b06      	ldr	r3, [pc, #24]	@ (800f0c4 <LoRaMacCheckForRxAbort+0x3c>)
 800f0ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0b0:	f023 0302 	bic.w	r3, r3, #2
 800f0b4:	4a03      	ldr	r2, [pc, #12]	@ (800f0c4 <LoRaMacCheckForRxAbort+0x3c>)
 800f0b6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800f0ba:	bf00      	nop
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bc80      	pop	{r7}
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	200007a0 	.word	0x200007a0

0800f0c8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f0d8:	4b51      	ldr	r3, [pc, #324]	@ (800f220 <LoRaMacHandleNvm+0x158>)
 800f0da:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	f040 8099 	bne.w	800f216 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2124      	movs	r1, #36	@ 0x24
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f008 f8e1 	bl	80172b0 <Crc32>
 800f0ee:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d006      	beq.n	800f108 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f100:	89fb      	ldrh	r3, [r7, #14]
 800f102:	f043 0301 	orr.w	r3, r3, #1
 800f106:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	3328      	adds	r3, #40	@ 0x28
 800f10c:	211c      	movs	r1, #28
 800f10e:	4618      	mov	r0, r3
 800f110:	f008 f8ce 	bl	80172b0 <Crc32>
 800f114:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f11a:	68ba      	ldr	r2, [r7, #8]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d006      	beq.n	800f12e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f126:	89fb      	ldrh	r3, [r7, #14]
 800f128:	f043 0302 	orr.w	r3, r3, #2
 800f12c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	3348      	adds	r3, #72	@ 0x48
 800f132:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f136:	4618      	mov	r0, r3
 800f138:	f008 f8ba 	bl	80172b0 <Crc32>
 800f13c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800f144:	68ba      	ldr	r2, [r7, #8]
 800f146:	429a      	cmp	r2, r3
 800f148:	d007      	beq.n	800f15a <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f152:	89fb      	ldrh	r3, [r7, #14]
 800f154:	f043 0304 	orr.w	r3, r3, #4
 800f158:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800f160:	21d4      	movs	r1, #212	@ 0xd4
 800f162:	4618      	mov	r0, r3
 800f164:	f008 f8a4 	bl	80172b0 <Crc32>
 800f168:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	429a      	cmp	r2, r3
 800f174:	d007      	beq.n	800f186 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	68ba      	ldr	r2, [r7, #8]
 800f17a:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f17e:	89fb      	ldrh	r3, [r7, #14]
 800f180:	f043 0308 	orr.w	r3, r3, #8
 800f184:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800f18c:	2100      	movs	r1, #0
 800f18e:	4618      	mov	r0, r3
 800f190:	f008 f88e 	bl	80172b0 <Crc32>
 800f194:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d007      	beq.n	800f1b2 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	68ba      	ldr	r2, [r7, #8]
 800f1a6:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f1aa:	89fb      	ldrh	r3, [r7, #14]
 800f1ac:	f043 0310 	orr.w	r3, r3, #16
 800f1b0:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800f1b8:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f008 f877 	bl	80172b0 <Crc32>
 800f1c2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f1ca:	68ba      	ldr	r2, [r7, #8]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d007      	beq.n	800f1e0 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	68ba      	ldr	r2, [r7, #8]
 800f1d4:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f1d8:	89fb      	ldrh	r3, [r7, #14]
 800f1da:	f043 0320 	orr.w	r3, r3, #32
 800f1de:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 800f1e6:	2114      	movs	r1, #20
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f008 f861 	bl	80172b0 <Crc32>
 800f1ee:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 800f1f6:	68ba      	ldr	r2, [r7, #8]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d007      	beq.n	800f20c <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	f8c3 25b8 	str.w	r2, [r3, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f204:	89fb      	ldrh	r3, [r7, #14]
 800f206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f20a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f20c:	89fb      	ldrh	r3, [r7, #14]
 800f20e:	4618      	mov	r0, r3
 800f210:	f002 f88e 	bl	8011330 <CallNvmDataChangeCallback>
 800f214:	e000      	b.n	800f218 <LoRaMacHandleNvm+0x150>
        return;
 800f216:	bf00      	nop
}
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	200007a0 	.word	0x200007a0

0800f224 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00d      	beq.n	800f250 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f234:	6838      	ldr	r0, [r7, #0]
 800f236:	f00c fa2b 	bl	801b690 <UTIL_TIMER_GetElapsedTime>
 800f23a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	429a      	cmp	r2, r3
 800f242:	d905      	bls.n	800f250 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f244:	4b05      	ldr	r3, [pc, #20]	@ (800f25c <LoRaMacHandleResponseTimeout+0x38>)
 800f246:	2200      	movs	r2, #0
 800f248:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800f24c:	2301      	movs	r3, #1
 800f24e:	e000      	b.n	800f252 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f250:	2300      	movs	r3, #0
}
 800f252:	4618      	mov	r0, r3
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	20000cd4 	.word	0x20000cd4

0800f260 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f266:	2300      	movs	r3, #0
 800f268:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f26a:	f7ff fd0b 	bl	800ec84 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f26e:	f003 fefa 	bl	8013066 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f272:	4b25      	ldr	r3, [pc, #148]	@ (800f308 <LoRaMacProcess+0xa8>)
 800f274:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f278:	f003 0310 	and.w	r3, r3, #16
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d023      	beq.n	800f2ca <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f282:	2000      	movs	r0, #0
 800f284:	f7ff fd7e 	bl	800ed84 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f288:	f7ff fefe 	bl	800f088 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f28c:	f002 f86e 	bl	801136c <IsRequestPending>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d006      	beq.n	800f2a4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f296:	f7ff feb1 	bl	800effc <LoRaMacCheckForBeaconAcquisition>
 800f29a:	4603      	mov	r3, r0
 800f29c:	461a      	mov	r2, r3
 800f29e:	79fb      	ldrb	r3, [r7, #7]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d103      	bne.n	800f2b2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f2aa:	f7ff fe71 	bl	800ef90 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f2ae:	f7ff fe13 	bl	800eed8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f2b2:	f7ff fd77 	bl	800eda4 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f2b6:	2001      	movs	r0, #1
 800f2b8:	f7ff fd64 	bl	800ed84 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f2bc:	4a12      	ldr	r2, [pc, #72]	@ (800f308 <LoRaMacProcess+0xa8>)
 800f2be:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f2c2:	f043 0320 	orr.w	r3, r3, #32
 800f2c6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800f2ca:	f7ff fdcd 	bl	800ee68 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f308 <LoRaMacProcess+0xa8>)
 800f2d0:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d101      	bne.n	800f2dc <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800f2d8:	f001 fc32 	bl	8010b40 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f308 <LoRaMacProcess+0xa8>)
 800f2de:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f2e2:	f003 0320 	and.w	r3, r3, #32
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d009      	beq.n	800f300 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f2ec:	4a06      	ldr	r2, [pc, #24]	@ (800f308 <LoRaMacProcess+0xa8>)
 800f2ee:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f2f2:	f023 0320 	bic.w	r3, r3, #32
 800f2f6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800f2fa:	4804      	ldr	r0, [pc, #16]	@ (800f30c <LoRaMacProcess+0xac>)
 800f2fc:	f7ff fee4 	bl	800f0c8 <LoRaMacHandleNvm>
    }
}
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	200007a0 	.word	0x200007a0
 800f30c:	20000cd4 	.word	0x20000cd4

0800f310 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f318:	481e      	ldr	r0, [pc, #120]	@ (800f394 <OnTxDelayedTimerEvent+0x84>)
 800f31a:	f00c f88d 	bl	801b438 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f31e:	4b1e      	ldr	r3, [pc, #120]	@ (800f398 <OnTxDelayedTimerEvent+0x88>)
 800f320:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f324:	f023 0320 	bic.w	r3, r3, #32
 800f328:	4a1b      	ldr	r2, [pc, #108]	@ (800f398 <OnTxDelayedTimerEvent+0x88>)
 800f32a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f32e:	4b1b      	ldr	r3, [pc, #108]	@ (800f39c <OnTxDelayedTimerEvent+0x8c>)
 800f330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f334:	4a18      	ldr	r2, [pc, #96]	@ (800f398 <OnTxDelayedTimerEvent+0x88>)
 800f336:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800f33a:	4611      	mov	r1, r2
 800f33c:	4618      	mov	r0, r3
 800f33e:	f7ff ff71 	bl	800f224 <LoRaMacHandleResponseTimeout>
 800f342:	4603      	mov	r3, r0
 800f344:	2b00      	cmp	r3, #0
 800f346:	d11e      	bne.n	800f386 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f348:	2001      	movs	r0, #1
 800f34a:	f001 f943 	bl	80105d4 <ScheduleTx>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d01a      	beq.n	800f38a <OnTxDelayedTimerEvent+0x7a>
 800f354:	2b0b      	cmp	r3, #11
 800f356:	d018      	beq.n	800f38a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f358:	4b10      	ldr	r3, [pc, #64]	@ (800f39c <OnTxDelayedTimerEvent+0x8c>)
 800f35a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	4b0d      	ldr	r3, [pc, #52]	@ (800f398 <OnTxDelayedTimerEvent+0x88>)
 800f362:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f366:	4b0c      	ldr	r3, [pc, #48]	@ (800f398 <OnTxDelayedTimerEvent+0x88>)
 800f368:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800f36c:	4b0a      	ldr	r3, [pc, #40]	@ (800f398 <OnTxDelayedTimerEvent+0x88>)
 800f36e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f372:	4b09      	ldr	r3, [pc, #36]	@ (800f398 <OnTxDelayedTimerEvent+0x88>)
 800f374:	2209      	movs	r2, #9
 800f376:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f37a:	2009      	movs	r0, #9
 800f37c:	f004 faae 	bl	80138dc <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f380:	f001 ff84 	bl	801128c <StopRetransmission>
            break;
 800f384:	e002      	b.n	800f38c <OnTxDelayedTimerEvent+0x7c>
        return;
 800f386:	bf00      	nop
 800f388:	e000      	b.n	800f38c <OnTxDelayedTimerEvent+0x7c>
            break;
 800f38a:	bf00      	nop
        }
    }
}
 800f38c:	3708      	adds	r7, #8
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	20000b08 	.word	0x20000b08
 800f398:	200007a0 	.word	0x200007a0
 800f39c:	20000cd4 	.word	0x20000cd4

0800f3a0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f3a8:	4b17      	ldr	r3, [pc, #92]	@ (800f408 <OnRxWindow1TimerEvent+0x68>)
 800f3aa:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800f3ae:	4b16      	ldr	r3, [pc, #88]	@ (800f408 <OnRxWindow1TimerEvent+0x68>)
 800f3b0:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f3b4:	4b15      	ldr	r3, [pc, #84]	@ (800f40c <OnRxWindow1TimerEvent+0x6c>)
 800f3b6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f3ba:	b25a      	sxtb	r2, r3
 800f3bc:	4b12      	ldr	r3, [pc, #72]	@ (800f408 <OnRxWindow1TimerEvent+0x68>)
 800f3be:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f3c2:	4b12      	ldr	r3, [pc, #72]	@ (800f40c <OnRxWindow1TimerEvent+0x6c>)
 800f3c4:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800f3c8:	4b0f      	ldr	r3, [pc, #60]	@ (800f408 <OnRxWindow1TimerEvent+0x68>)
 800f3ca:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f3ce:	4b0f      	ldr	r3, [pc, #60]	@ (800f40c <OnRxWindow1TimerEvent+0x6c>)
 800f3d0:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800f408 <OnRxWindow1TimerEvent+0x68>)
 800f3d6:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f3da:	4b0b      	ldr	r3, [pc, #44]	@ (800f408 <OnRxWindow1TimerEvent+0x68>)
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f3e2:	4b09      	ldr	r3, [pc, #36]	@ (800f408 <OnRxWindow1TimerEvent+0x68>)
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f3ea:	4b08      	ldr	r3, [pc, #32]	@ (800f40c <OnRxWindow1TimerEvent+0x6c>)
 800f3ec:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800f3f0:	4b05      	ldr	r3, [pc, #20]	@ (800f408 <OnRxWindow1TimerEvent+0x68>)
 800f3f2:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f3f6:	4906      	ldr	r1, [pc, #24]	@ (800f410 <OnRxWindow1TimerEvent+0x70>)
 800f3f8:	4806      	ldr	r0, [pc, #24]	@ (800f414 <OnRxWindow1TimerEvent+0x74>)
 800f3fa:	f001 fb6d 	bl	8010ad8 <RxWindowSetup>
}
 800f3fe:	bf00      	nop
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	200007a0 	.word	0x200007a0
 800f40c:	20000cd4 	.word	0x20000cd4
 800f410:	20000b58 	.word	0x20000b58
 800f414:	20000b20 	.word	0x20000b20

0800f418 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f420:	4b19      	ldr	r3, [pc, #100]	@ (800f488 <OnRxWindow2TimerEvent+0x70>)
 800f422:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800f426:	2b00      	cmp	r3, #0
 800f428:	d029      	beq.n	800f47e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f42a:	4b17      	ldr	r3, [pc, #92]	@ (800f488 <OnRxWindow2TimerEvent+0x70>)
 800f42c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800f430:	4b15      	ldr	r3, [pc, #84]	@ (800f488 <OnRxWindow2TimerEvent+0x70>)
 800f432:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f436:	4b15      	ldr	r3, [pc, #84]	@ (800f48c <OnRxWindow2TimerEvent+0x74>)
 800f438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f43a:	4a13      	ldr	r2, [pc, #76]	@ (800f488 <OnRxWindow2TimerEvent+0x70>)
 800f43c:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f440:	4b12      	ldr	r3, [pc, #72]	@ (800f48c <OnRxWindow2TimerEvent+0x74>)
 800f442:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800f446:	4b10      	ldr	r3, [pc, #64]	@ (800f488 <OnRxWindow2TimerEvent+0x70>)
 800f448:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f44c:	4b0f      	ldr	r3, [pc, #60]	@ (800f48c <OnRxWindow2TimerEvent+0x74>)
 800f44e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f452:	4b0d      	ldr	r3, [pc, #52]	@ (800f488 <OnRxWindow2TimerEvent+0x70>)
 800f454:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f458:	4b0b      	ldr	r3, [pc, #44]	@ (800f488 <OnRxWindow2TimerEvent+0x70>)
 800f45a:	2200      	movs	r2, #0
 800f45c:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f460:	4b09      	ldr	r3, [pc, #36]	@ (800f488 <OnRxWindow2TimerEvent+0x70>)
 800f462:	2201      	movs	r2, #1
 800f464:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f468:	4b08      	ldr	r3, [pc, #32]	@ (800f48c <OnRxWindow2TimerEvent+0x74>)
 800f46a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800f46e:	4b06      	ldr	r3, [pc, #24]	@ (800f488 <OnRxWindow2TimerEvent+0x70>)
 800f470:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f474:	4906      	ldr	r1, [pc, #24]	@ (800f490 <OnRxWindow2TimerEvent+0x78>)
 800f476:	4807      	ldr	r0, [pc, #28]	@ (800f494 <OnRxWindow2TimerEvent+0x7c>)
 800f478:	f001 fb2e 	bl	8010ad8 <RxWindowSetup>
 800f47c:	e000      	b.n	800f480 <OnRxWindow2TimerEvent+0x68>
        return;
 800f47e:	bf00      	nop
}
 800f480:	3708      	adds	r7, #8
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	200007a0 	.word	0x200007a0
 800f48c:	20000cd4 	.word	0x20000cd4
 800f490:	20000b70 	.word	0x20000b70
 800f494:	20000b38 	.word	0x20000b38

0800f498 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f4a0:	4808      	ldr	r0, [pc, #32]	@ (800f4c4 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800f4a2:	f00b ffc9 	bl	801b438 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f4a6:	4b08      	ldr	r3, [pc, #32]	@ (800f4c8 <OnRetransmitTimeoutTimerEvent+0x30>)
 800f4a8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d003      	beq.n	800f4b8 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f4b0:	4b05      	ldr	r3, [pc, #20]	@ (800f4c8 <OnRetransmitTimeoutTimerEvent+0x30>)
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 800f4b8:	f001 ff24 	bl	8011304 <OnMacProcessNotify>
}
 800f4bc:	bf00      	nop
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	20000ba0 	.word	0x20000ba0
 800f4c8:	200007a0 	.word	0x200007a0

0800f4cc <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	60ba      	str	r2, [r7, #8]
 800f4d4:	607b      	str	r3, [r7, #4]
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	73fb      	strb	r3, [r7, #15]
 800f4da:	460b      	mov	r3, r1
 800f4dc:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d005      	beq.n	800f4f0 <GetFCntDown+0x24>
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d002      	beq.n	800f4f0 <GetFCntDown+0x24>
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d101      	bne.n	800f4f4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f4f0:	2309      	movs	r3, #9
 800f4f2:	e028      	b.n	800f546 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d016      	beq.n	800f528 <GetFCntDown+0x5c>
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d118      	bne.n	800f530 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f4fe:	79bb      	ldrb	r3, [r7, #6]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d10d      	bne.n	800f520 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f504:	7bbb      	ldrb	r3, [r7, #14]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d002      	beq.n	800f510 <GetFCntDown+0x44>
 800f50a:	7bbb      	ldrb	r3, [r7, #14]
 800f50c:	2b03      	cmp	r3, #3
 800f50e:	d103      	bne.n	800f518 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	2202      	movs	r2, #2
 800f514:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f516:	e00d      	b.n	800f534 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	2201      	movs	r2, #1
 800f51c:	701a      	strb	r2, [r3, #0]
            break;
 800f51e:	e009      	b.n	800f534 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	2203      	movs	r2, #3
 800f524:	701a      	strb	r2, [r3, #0]
            break;
 800f526:	e005      	b.n	800f534 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	2204      	movs	r2, #4
 800f52c:	701a      	strb	r2, [r3, #0]
            break;
 800f52e:	e001      	b.n	800f534 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f530:	2305      	movs	r3, #5
 800f532:	e008      	b.n	800f546 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	7818      	ldrb	r0, [r3, #0]
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	89db      	ldrh	r3, [r3, #14]
 800f53c:	69fa      	ldr	r2, [r7, #28]
 800f53e:	4619      	mov	r1, r3
 800f540:	f004 fe06 	bl	8014150 <LoRaMacCryptoGetFCntDown>
 800f544:	4603      	mov	r3, r0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
	...

0800f550 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f550:	b5b0      	push	{r4, r5, r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	4603      	mov	r3, r0
 800f558:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f55a:	2303      	movs	r3, #3
 800f55c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f55e:	4b6e      	ldr	r3, [pc, #440]	@ (800f718 <SwitchClass+0x1c8>)
 800f560:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f564:	2b02      	cmp	r3, #2
 800f566:	f000 80bb 	beq.w	800f6e0 <SwitchClass+0x190>
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	f300 80ce 	bgt.w	800f70c <SwitchClass+0x1bc>
 800f570:	2b00      	cmp	r3, #0
 800f572:	d003      	beq.n	800f57c <SwitchClass+0x2c>
 800f574:	2b01      	cmp	r3, #1
 800f576:	f000 80a5 	beq.w	800f6c4 <SwitchClass+0x174>
 800f57a:	e0c7      	b.n	800f70c <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f57c:	79fb      	ldrb	r3, [r7, #7]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d109      	bne.n	800f596 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f582:	4b65      	ldr	r3, [pc, #404]	@ (800f718 <SwitchClass+0x1c8>)
 800f584:	4a64      	ldr	r2, [pc, #400]	@ (800f718 <SwitchClass+0x1c8>)
 800f586:	3374      	adds	r3, #116	@ 0x74
 800f588:	326c      	adds	r2, #108	@ 0x6c
 800f58a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f58e:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800f592:	2300      	movs	r3, #0
 800f594:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800f596:	79fb      	ldrb	r3, [r7, #7]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d10c      	bne.n	800f5b6 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f59c:	79fb      	ldrb	r3, [r7, #7]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f003 fcf8 	bl	8012f94 <LoRaMacClassBSwitchClass>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d103      	bne.n	800f5b6 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f5ae:	4a5a      	ldr	r2, [pc, #360]	@ (800f718 <SwitchClass+0x1c8>)
 800f5b0:	79fb      	ldrb	r3, [r7, #7]
 800f5b2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800f5b6:	79fb      	ldrb	r3, [r7, #7]
 800f5b8:	2b02      	cmp	r3, #2
 800f5ba:	f040 80a2 	bne.w	800f702 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f5be:	4a56      	ldr	r2, [pc, #344]	@ (800f718 <SwitchClass+0x1c8>)
 800f5c0:	79fb      	ldrb	r3, [r7, #7]
 800f5c2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f5c6:	4a55      	ldr	r2, [pc, #340]	@ (800f71c <SwitchClass+0x1cc>)
 800f5c8:	4b54      	ldr	r3, [pc, #336]	@ (800f71c <SwitchClass+0x1cc>)
 800f5ca:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800f5ce:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800f5d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f5d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f5da:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f5de:	4b4f      	ldr	r3, [pc, #316]	@ (800f71c <SwitchClass+0x1cc>)
 800f5e0:	2202      	movs	r2, #2
 800f5e2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	73bb      	strb	r3, [r7, #14]
 800f5ea:	e05b      	b.n	800f6a4 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800f5ec:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f5f0:	4949      	ldr	r1, [pc, #292]	@ (800f718 <SwitchClass+0x1c8>)
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	005b      	lsls	r3, r3, #1
 800f5f6:	4413      	add	r3, r2
 800f5f8:	011b      	lsls	r3, r3, #4
 800f5fa:	440b      	add	r3, r1
 800f5fc:	33e9      	adds	r3, #233	@ 0xe9
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d049      	beq.n	800f698 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800f604:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f608:	4943      	ldr	r1, [pc, #268]	@ (800f718 <SwitchClass+0x1c8>)
 800f60a:	4613      	mov	r3, r2
 800f60c:	005b      	lsls	r3, r3, #1
 800f60e:	4413      	add	r3, r2
 800f610:	011b      	lsls	r3, r3, #4
 800f612:	440b      	add	r3, r1
 800f614:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f618:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800f61a:	2b02      	cmp	r3, #2
 800f61c:	d13c      	bne.n	800f698 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800f61e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f622:	493d      	ldr	r1, [pc, #244]	@ (800f718 <SwitchClass+0x1c8>)
 800f624:	4613      	mov	r3, r2
 800f626:	005b      	lsls	r3, r3, #1
 800f628:	4413      	add	r3, r2
 800f62a:	011b      	lsls	r3, r3, #4
 800f62c:	440b      	add	r3, r1
 800f62e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4a38      	ldr	r2, [pc, #224]	@ (800f718 <SwitchClass+0x1c8>)
 800f636:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800f638:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f63c:	4936      	ldr	r1, [pc, #216]	@ (800f718 <SwitchClass+0x1c8>)
 800f63e:	4613      	mov	r3, r2
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	4413      	add	r3, r2
 800f644:	011b      	lsls	r3, r3, #4
 800f646:	440b      	add	r3, r1
 800f648:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800f64c:	f993 3000 	ldrsb.w	r3, [r3]
 800f650:	b2da      	uxtb	r2, r3
 800f652:	4b31      	ldr	r3, [pc, #196]	@ (800f718 <SwitchClass+0x1c8>)
 800f654:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f658:	4b30      	ldr	r3, [pc, #192]	@ (800f71c <SwitchClass+0x1cc>)
 800f65a:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800f65e:	4b2f      	ldr	r3, [pc, #188]	@ (800f71c <SwitchClass+0x1cc>)
 800f660:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f664:	4b2c      	ldr	r3, [pc, #176]	@ (800f718 <SwitchClass+0x1c8>)
 800f666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f668:	4a2c      	ldr	r2, [pc, #176]	@ (800f71c <SwitchClass+0x1cc>)
 800f66a:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f66e:	4b2a      	ldr	r3, [pc, #168]	@ (800f718 <SwitchClass+0x1c8>)
 800f670:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800f674:	4b29      	ldr	r3, [pc, #164]	@ (800f71c <SwitchClass+0x1cc>)
 800f676:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f67a:	4b27      	ldr	r3, [pc, #156]	@ (800f718 <SwitchClass+0x1c8>)
 800f67c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f680:	4b26      	ldr	r3, [pc, #152]	@ (800f71c <SwitchClass+0x1cc>)
 800f682:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f686:	4b25      	ldr	r3, [pc, #148]	@ (800f71c <SwitchClass+0x1cc>)
 800f688:	2203      	movs	r2, #3
 800f68a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f68e:	4b23      	ldr	r3, [pc, #140]	@ (800f71c <SwitchClass+0x1cc>)
 800f690:	2201      	movs	r2, #1
 800f692:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800f696:	e009      	b.n	800f6ac <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	3301      	adds	r3, #1
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	73bb      	strb	r3, [r7, #14]
 800f6a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	dd9f      	ble.n	800f5ec <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f6ac:	4b1b      	ldr	r3, [pc, #108]	@ (800f71c <SwitchClass+0x1cc>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f6b4:	4b1a      	ldr	r3, [pc, #104]	@ (800f720 <SwitchClass+0x1d0>)
 800f6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6b8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f6ba:	f001 fa41 	bl	8010b40 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f6c2:	e01e      	b.n	800f702 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f6c4:	79fb      	ldrb	r3, [r7, #7]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f003 fc64 	bl	8012f94 <LoRaMacClassBSwitchClass>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f6d0:	7bfb      	ldrb	r3, [r7, #15]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d117      	bne.n	800f706 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f6d6:	4a10      	ldr	r2, [pc, #64]	@ (800f718 <SwitchClass+0x1c8>)
 800f6d8:	79fb      	ldrb	r3, [r7, #7]
 800f6da:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800f6de:	e012      	b.n	800f706 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f6e0:	79fb      	ldrb	r3, [r7, #7]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d111      	bne.n	800f70a <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800f6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f71c <SwitchClass+0x1cc>)
 800f6e8:	2206      	movs	r2, #6
 800f6ea:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f6ee:	4a0a      	ldr	r2, [pc, #40]	@ (800f718 <SwitchClass+0x1c8>)
 800f6f0:	79fb      	ldrb	r3, [r7, #7]
 800f6f2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800f720 <SwitchClass+0x1d0>)
 800f6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6fa:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800f700:	e003      	b.n	800f70a <SwitchClass+0x1ba>
            break;
 800f702:	bf00      	nop
 800f704:	e002      	b.n	800f70c <SwitchClass+0x1bc>
            break;
 800f706:	bf00      	nop
 800f708:	e000      	b.n	800f70c <SwitchClass+0x1bc>
            break;
 800f70a:	bf00      	nop
        }
    }

    return status;
 800f70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bdb0      	pop	{r4, r5, r7, pc}
 800f716:	bf00      	nop
 800f718:	20000cd4 	.word	0x20000cd4
 800f71c:	200007a0 	.word	0x200007a0
 800f720:	0801c570 	.word	0x0801c570

0800f724 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	4603      	mov	r3, r0
 800f72c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f72e:	4b10      	ldr	r3, [pc, #64]	@ (800f770 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f730:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f734:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f736:	79fb      	ldrb	r3, [r7, #7]
 800f738:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f73a:	230d      	movs	r3, #13
 800f73c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f73e:	4b0c      	ldr	r3, [pc, #48]	@ (800f770 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f740:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800f744:	2b00      	cmp	r3, #0
 800f746:	d001      	beq.n	800f74c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f748:	230e      	movs	r3, #14
 800f74a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f74c:	4b08      	ldr	r3, [pc, #32]	@ (800f770 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f74e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f752:	f107 0210 	add.w	r2, r7, #16
 800f756:	4611      	mov	r1, r2
 800f758:	4618      	mov	r0, r3
 800f75a:	f005 fb5b 	bl	8014e14 <RegionGetPhyParam>
 800f75e:	4603      	mov	r3, r0
 800f760:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	b2db      	uxtb	r3, r3
}
 800f766:	4618      	mov	r0, r3
 800f768:	3718      	adds	r7, #24
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	20000cd4 	.word	0x20000cd4

0800f774 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	4603      	mov	r3, r0
 800f77c:	71fb      	strb	r3, [r7, #7]
 800f77e:	460b      	mov	r3, r1
 800f780:	71bb      	strb	r3, [r7, #6]
 800f782:	4613      	mov	r3, r2
 800f784:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f78a:	2300      	movs	r3, #0
 800f78c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f78e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f792:	4618      	mov	r0, r3
 800f794:	f7ff ffc6 	bl	800f724 <GetMaxAppPayloadWithoutFOptsLength>
 800f798:	4603      	mov	r3, r0
 800f79a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f79c:	79fb      	ldrb	r3, [r7, #7]
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	797b      	ldrb	r3, [r7, #5]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	4413      	add	r3, r2
 800f7a6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f7a8:	89ba      	ldrh	r2, [r7, #12]
 800f7aa:	89fb      	ldrh	r3, [r7, #14]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d804      	bhi.n	800f7ba <ValidatePayloadLength+0x46>
 800f7b0:	89bb      	ldrh	r3, [r7, #12]
 800f7b2:	2bff      	cmp	r3, #255	@ 0xff
 800f7b4:	d801      	bhi.n	800f7ba <ValidatePayloadLength+0x46>
    {
        return true;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e000      	b.n	800f7bc <ValidatePayloadLength+0x48>
    }
    return false;
 800f7ba:	2300      	movs	r3, #0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3710      	adds	r7, #16
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f7c4:	b590      	push	{r4, r7, lr}
 800f7c6:	b0a5      	sub	sp, #148	@ 0x94
 800f7c8:	af02      	add	r7, sp, #8
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	4608      	mov	r0, r1
 800f7ce:	4611      	mov	r1, r2
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	70fb      	strb	r3, [r7, #3]
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	70bb      	strb	r3, [r7, #2]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f7f0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f000 84c3 	beq.w	8010180 <ProcessMacCommands+0x9bc>
 800f7fa:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	f040 84c4 	bne.w	801018c <ProcessMacCommands+0x9c8>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f804:	f000 bcbc 	b.w	8010180 <ProcessMacCommands+0x9bc>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f808:	78fb      	ldrb	r3, [r7, #3]
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	4413      	add	r3, r2
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	4618      	mov	r0, r3
 800f812:	f003 febf 	bl	8013594 <LoRaMacCommandsGetCmdSize>
 800f816:	4603      	mov	r3, r0
 800f818:	461a      	mov	r2, r3
 800f81a:	78fb      	ldrb	r3, [r7, #3]
 800f81c:	441a      	add	r2, r3
 800f81e:	78bb      	ldrb	r3, [r7, #2]
 800f820:	429a      	cmp	r2, r3
 800f822:	f300 84b5 	bgt.w	8010190 <ProcessMacCommands+0x9cc>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f826:	78fb      	ldrb	r3, [r7, #3]
 800f828:	1c5a      	adds	r2, r3, #1
 800f82a:	70fa      	strb	r2, [r7, #3]
 800f82c:	461a      	mov	r2, r3
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4413      	add	r3, r2
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	3b02      	subs	r3, #2
 800f836:	2b11      	cmp	r3, #17
 800f838:	f200 84ac 	bhi.w	8010194 <ProcessMacCommands+0x9d0>
 800f83c:	a201      	add	r2, pc, #4	@ (adr r2, 800f844 <ProcessMacCommands+0x80>)
 800f83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f842:	bf00      	nop
 800f844:	0800f88d 	.word	0x0800f88d
 800f848:	0800f8cf 	.word	0x0800f8cf
 800f84c:	0800fa4b 	.word	0x0800fa4b
 800f850:	0800fa89 	.word	0x0800fa89
 800f854:	0800fb95 	.word	0x0800fb95
 800f858:	0800fbe5 	.word	0x0800fbe5
 800f85c:	0800fca1 	.word	0x0800fca1
 800f860:	0800fcf7 	.word	0x0800fcf7
 800f864:	0800fddd 	.word	0x0800fddd
 800f868:	08010195 	.word	0x08010195
 800f86c:	08010195 	.word	0x08010195
 800f870:	0800fe85 	.word	0x0800fe85
 800f874:	08010195 	.word	0x08010195
 800f878:	08010195 	.word	0x08010195
 800f87c:	0800ffa5 	.word	0x0800ffa5
 800f880:	0800ffd9 	.word	0x0800ffd9
 800f884:	08010069 	.word	0x08010069
 800f888:	080100e1 	.word	0x080100e1
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f88c:	2005      	movs	r0, #5
 800f88e:	f004 f859 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 800f892:	4603      	mov	r3, r0
 800f894:	2b00      	cmp	r3, #0
 800f896:	f000 8466 	beq.w	8010166 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f89a:	2105      	movs	r1, #5
 800f89c:	2000      	movs	r0, #0
 800f89e:	f003 ffc5 	bl	801382c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f8a2:	78fb      	ldrb	r3, [r7, #3]
 800f8a4:	1c5a      	adds	r2, r3, #1
 800f8a6:	70fa      	strb	r2, [r7, #3]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	781a      	ldrb	r2, [r3, #0]
 800f8b0:	4bb5      	ldr	r3, [pc, #724]	@ (800fb88 <ProcessMacCommands+0x3c4>)
 800f8b2:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f8b6:	78fb      	ldrb	r3, [r7, #3]
 800f8b8:	1c5a      	adds	r2, r3, #1
 800f8ba:	70fa      	strb	r2, [r7, #3]
 800f8bc:	461a      	mov	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	781a      	ldrb	r2, [r3, #0]
 800f8c4:	4bb0      	ldr	r3, [pc, #704]	@ (800fb88 <ProcessMacCommands+0x3c4>)
 800f8c6:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 800f8ca:	f000 bc4c 	b.w	8010166 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800f8e6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f8ea:	f083 0301 	eor.w	r3, r3, #1
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f000 80a6 	beq.w	800fa42 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f8fc:	78fb      	ldrb	r3, [r7, #3]
 800f8fe:	3b01      	subs	r3, #1
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	4413      	add	r3, r2
 800f904:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f906:	4ba1      	ldr	r3, [pc, #644]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f908:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f90c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f910:	4b9e      	ldr	r3, [pc, #632]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f912:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f916:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f91a:	4b9c      	ldr	r3, [pc, #624]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f91c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f920:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f924:	4b99      	ldr	r3, [pc, #612]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f926:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f92a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f92e:	4b97      	ldr	r3, [pc, #604]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f930:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f934:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f938:	4b94      	ldr	r3, [pc, #592]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f93a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800f93e:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f940:	4b92      	ldr	r3, [pc, #584]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f942:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f946:	2b00      	cmp	r3, #0
 800f948:	d008      	beq.n	800f95c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f94a:	78ba      	ldrb	r2, [r7, #2]
 800f94c:	78fb      	ldrb	r3, [r7, #3]
 800f94e:	1ad3      	subs	r3, r2, r3
 800f950:	b2db      	uxtb	r3, r3
 800f952:	3301      	adds	r3, #1
 800f954:	b2db      	uxtb	r3, r3
 800f956:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800f95a:	e002      	b.n	800f962 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f95c:	2305      	movs	r3, #5
 800f95e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f962:	4b8a      	ldr	r3, [pc, #552]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f964:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f968:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f96c:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f970:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f974:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f978:	9301      	str	r3, [sp, #4]
 800f97a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	4623      	mov	r3, r4
 800f982:	f005 fb04 	bl	8014f8e <RegionLinkAdrReq>
 800f986:	4603      	mov	r3, r0
 800f988:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f98c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f990:	f003 0307 	and.w	r3, r3, #7
 800f994:	2b07      	cmp	r3, #7
 800f996:	d119      	bne.n	800f9cc <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f998:	4b7c      	ldr	r3, [pc, #496]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f99a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800f99e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	da03      	bge.n	800f9ae <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f9a6:	4b79      	ldr	r3, [pc, #484]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f9ae:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800f9b2:	4b76      	ldr	r3, [pc, #472]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f9b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f9b8:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800f9bc:	4b73      	ldr	r3, [pc, #460]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f9be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f9c2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800f9c6:	4b71      	ldr	r3, [pc, #452]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800f9c8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f9d2:	e00b      	b.n	800f9ec <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f9d4:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800f9d8:	2201      	movs	r2, #1
 800f9da:	4619      	mov	r1, r3
 800f9dc:	2003      	movs	r0, #3
 800f9de:	f003 fc79 	bl	80132d4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f9e2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f9ec:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f9f0:	4a67      	ldr	r2, [pc, #412]	@ (800fb90 <ProcessMacCommands+0x3cc>)
 800f9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9f6:	089b      	lsrs	r3, r3, #2
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d3e8      	bcc.n	800f9d4 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800fa02:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fa06:	78fb      	ldrb	r3, [r7, #3]
 800fa08:	4413      	add	r3, r2
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800fa10:	78fa      	ldrb	r2, [r7, #3]
 800fa12:	78bb      	ldrb	r3, [r7, #2]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d20a      	bcs.n	800fa2e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800fa18:	78fb      	ldrb	r3, [r7, #3]
 800fa1a:	1c5a      	adds	r2, r3, #1
 800fa1c:	70fa      	strb	r2, [r7, #3]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	4413      	add	r3, r2
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	2b03      	cmp	r3, #3
 800fa28:	f43f af68 	beq.w	800f8fc <ProcessMacCommands+0x138>
 800fa2c:	e000      	b.n	800fa30 <ProcessMacCommands+0x26c>
                            break;
 800fa2e:	bf00      	nop

                    if( macIndex < commandsSize )
 800fa30:	78fa      	ldrb	r2, [r7, #3]
 800fa32:	78bb      	ldrb	r3, [r7, #2]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	f080 8398 	bcs.w	801016a <ProcessMacCommands+0x9a6>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800fa3a:	78fb      	ldrb	r3, [r7, #3]
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800fa40:	e393      	b.n	801016a <ProcessMacCommands+0x9a6>
                    macIndex += 4;
 800fa42:	78fb      	ldrb	r3, [r7, #3]
 800fa44:	3304      	adds	r3, #4
 800fa46:	70fb      	strb	r3, [r7, #3]
                break;
 800fa48:	e38f      	b.n	801016a <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800fa4a:	78fb      	ldrb	r3, [r7, #3]
 800fa4c:	1c5a      	adds	r2, r3, #1
 800fa4e:	70fa      	strb	r2, [r7, #3]
 800fa50:	461a      	mov	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4413      	add	r3, r2
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	f003 030f 	and.w	r3, r3, #15
 800fa5c:	b2da      	uxtb	r2, r3
 800fa5e:	4b4b      	ldr	r3, [pc, #300]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800fa60:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800fa64:	4b49      	ldr	r3, [pc, #292]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800fa66:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	4093      	lsls	r3, r2
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	4b46      	ldr	r3, [pc, #280]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800fa74:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800fa78:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	4619      	mov	r1, r3
 800fa80:	2004      	movs	r0, #4
 800fa82:	f003 fc27 	bl	80132d4 <LoRaMacCommandsAddCmd>
                break;
 800fa86:	e37b      	b.n	8010180 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800fa88:	2307      	movs	r3, #7
 800fa8a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800fa8e:	78fb      	ldrb	r3, [r7, #3]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	4413      	add	r3, r2
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	091b      	lsrs	r3, r3, #4
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	b25b      	sxtb	r3, r3
 800fa9c:	f003 0307 	and.w	r3, r3, #7
 800faa0:	b25b      	sxtb	r3, r3
 800faa2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800faa6:	78fb      	ldrb	r3, [r7, #3]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	4413      	add	r3, r2
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	b25b      	sxtb	r3, r3
 800fab0:	f003 030f 	and.w	r3, r3, #15
 800fab4:	b25b      	sxtb	r3, r3
 800fab6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800faba:	78fb      	ldrb	r3, [r7, #3]
 800fabc:	3301      	adds	r3, #1
 800fabe:	70fb      	strb	r3, [r7, #3]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( rxParamSetupReq.Datarate == 0x0F )
 800fac0:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fac4:	2b0f      	cmp	r3, #15
 800fac6:	d105      	bne.n	800fad4 <ProcessMacCommands+0x310>
                {
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 800fac8:	4b30      	ldr	r3, [pc, #192]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800faca:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800face:	b25b      	sxtb	r3, r3
 800fad0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800fad4:	78fb      	ldrb	r3, [r7, #3]
 800fad6:	1c5a      	adds	r2, r3, #1
 800fad8:	70fa      	strb	r2, [r7, #3]
 800fada:	461a      	mov	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	4413      	add	r3, r2
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fae4:	78fb      	ldrb	r3, [r7, #3]
 800fae6:	1c5a      	adds	r2, r3, #1
 800fae8:	70fa      	strb	r2, [r7, #3]
 800faea:	461a      	mov	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	4413      	add	r3, r2
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	021a      	lsls	r2, r3, #8
 800faf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800faf6:	4313      	orrs	r3, r2
 800faf8:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fafa:	78fb      	ldrb	r3, [r7, #3]
 800fafc:	1c5a      	adds	r2, r3, #1
 800fafe:	70fa      	strb	r2, [r7, #3]
 800fb00:	461a      	mov	r2, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4413      	add	r3, r2
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	041a      	lsls	r2, r3, #16
 800fb0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800fb10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb12:	2264      	movs	r2, #100	@ 0x64
 800fb14:	fb02 f303 	mul.w	r3, r2, r3
 800fb18:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800fb1a:	4b1c      	ldr	r3, [pc, #112]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800fb1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fb20:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800fb24:	4611      	mov	r1, r2
 800fb26:	4618      	mov	r0, r3
 800fb28:	f005 fa4b 	bl	8014fc2 <RegionRxParamSetupReq>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800fb32:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fb36:	f003 0307 	and.w	r3, r3, #7
 800fb3a:	2b07      	cmp	r3, #7
 800fb3c:	d117      	bne.n	800fb6e <ProcessMacCommands+0x3aa>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800fb3e:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fb42:	b2da      	uxtb	r2, r3
 800fb44:	4b11      	ldr	r3, [pc, #68]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800fb46:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800fb4a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fb4e:	b2da      	uxtb	r2, r3
 800fb50:	4b0e      	ldr	r3, [pc, #56]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800fb52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800fb56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb58:	4a0c      	ldr	r2, [pc, #48]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800fb5a:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800fb5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb5e:	4a0b      	ldr	r2, [pc, #44]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800fb60:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800fb62:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800fb66:	b2da      	uxtb	r2, r3
 800fb68:	4b08      	ldr	r3, [pc, #32]	@ (800fb8c <ProcessMacCommands+0x3c8>)
 800fb6a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800fb6e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fb72:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800fb76:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	2005      	movs	r0, #5
 800fb80:	f003 fba8 	bl	80132d4 <LoRaMacCommandsAddCmd>
                break;
 800fb84:	e2fc      	b.n	8010180 <ProcessMacCommands+0x9bc>
 800fb86:	bf00      	nop
 800fb88:	200007a0 	.word	0x200007a0
 800fb8c:	20000cd4 	.word	0x20000cd4
 800fb90:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800fb94:	23ff      	movs	r3, #255	@ 0xff
 800fb96:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800fb9a:	4bb7      	ldr	r3, [pc, #732]	@ (800fe78 <ProcessMacCommands+0x6b4>)
 800fb9c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d00d      	beq.n	800fbc0 <ProcessMacCommands+0x3fc>
 800fba4:	4bb4      	ldr	r3, [pc, #720]	@ (800fe78 <ProcessMacCommands+0x6b4>)
 800fba6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d007      	beq.n	800fbc0 <ProcessMacCommands+0x3fc>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800fbb0:	4bb1      	ldr	r3, [pc, #708]	@ (800fe78 <ProcessMacCommands+0x6b4>)
 800fbb2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4798      	blx	r3
 800fbba:	4603      	mov	r3, r0
 800fbbc:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800fbc0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fbc4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800fbc8:	787b      	ldrb	r3, [r7, #1]
 800fbca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800fbd4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fbd8:	2202      	movs	r2, #2
 800fbda:	4619      	mov	r1, r3
 800fbdc:	2006      	movs	r0, #6
 800fbde:	f003 fb79 	bl	80132d4 <LoRaMacCommandsAddCmd>
                break;
 800fbe2:	e2cd      	b.n	8010180 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800fbe4:	2303      	movs	r3, #3
 800fbe6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800fbea:	78fb      	ldrb	r3, [r7, #3]
 800fbec:	1c5a      	adds	r2, r3, #1
 800fbee:	70fa      	strb	r2, [r7, #3]
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	b25b      	sxtb	r3, r3
 800fbfa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800fbfe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fc02:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800fc04:	78fb      	ldrb	r3, [r7, #3]
 800fc06:	1c5a      	adds	r2, r3, #1
 800fc08:	70fa      	strb	r2, [r7, #3]
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4413      	add	r3, r2
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fc14:	78fb      	ldrb	r3, [r7, #3]
 800fc16:	1c5a      	adds	r2, r3, #1
 800fc18:	70fa      	strb	r2, [r7, #3]
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4413      	add	r3, r2
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	021a      	lsls	r2, r3, #8
 800fc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc26:	4313      	orrs	r3, r2
 800fc28:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fc2a:	78fb      	ldrb	r3, [r7, #3]
 800fc2c:	1c5a      	adds	r2, r3, #1
 800fc2e:	70fa      	strb	r2, [r7, #3]
 800fc30:	461a      	mov	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4413      	add	r3, r2
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	041a      	lsls	r2, r3, #16
 800fc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800fc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc42:	2264      	movs	r2, #100	@ 0x64
 800fc44:	fb02 f303 	mul.w	r3, r2, r3
 800fc48:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800fc4e:	78fb      	ldrb	r3, [r7, #3]
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	70fa      	strb	r2, [r7, #3]
 800fc54:	461a      	mov	r2, r3
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4413      	add	r3, r2
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	b25b      	sxtb	r3, r3
 800fc5e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800fc62:	4b86      	ldr	r3, [pc, #536]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fc64:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fc68:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f005 f9ba 	bl	8014fe8 <RegionNewChannelReq>
 800fc74:	4603      	mov	r3, r0
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fc7c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fc80:	b25b      	sxtb	r3, r3
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f2c0 8273 	blt.w	801016e <ProcessMacCommands+0x9aa>
                {
                    macCmdPayload[0] = status;
 800fc88:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fc8c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800fc90:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fc94:	2201      	movs	r2, #1
 800fc96:	4619      	mov	r1, r3
 800fc98:	2007      	movs	r0, #7
 800fc9a:	f003 fb1b 	bl	80132d4 <LoRaMacCommandsAddCmd>
                }
                break;
 800fc9e:	e266      	b.n	801016e <ProcessMacCommands+0x9aa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800fca0:	78fb      	ldrb	r3, [r7, #3]
 800fca2:	1c5a      	adds	r2, r3, #1
 800fca4:	70fa      	strb	r2, [r7, #3]
 800fca6:	461a      	mov	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4413      	add	r3, r2
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	f003 030f 	and.w	r3, r3, #15
 800fcb2:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800fcb6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d104      	bne.n	800fcc8 <ProcessMacCommands+0x504>
                {
                    delay++;
 800fcbe:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800fcc8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fccc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fcd0:	fb02 f303 	mul.w	r3, r2, r3
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	4b69      	ldr	r3, [pc, #420]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fcd8:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fcda:	4b68      	ldr	r3, [pc, #416]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fcdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fcde:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fce2:	4a66      	ldr	r2, [pc, #408]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fce4:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800fce6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fcea:	2200      	movs	r2, #0
 800fcec:	4619      	mov	r1, r3
 800fcee:	2008      	movs	r0, #8
 800fcf0:	f003 faf0 	bl	80132d4 <LoRaMacCommandsAddCmd>
                break;
 800fcf4:	e244      	b.n	8010180 <ProcessMacCommands+0x9bc>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800fcf6:	78fb      	ldrb	r3, [r7, #3]
 800fcf8:	1c5a      	adds	r2, r3, #1
 800fcfa:	70fa      	strb	r2, [r7, #3]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	4413      	add	r3, r2
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800fd14:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fd18:	f003 0320 	and.w	r3, r3, #32
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d002      	beq.n	800fd26 <ProcessMacCommands+0x562>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800fd20:	2301      	movs	r3, #1
 800fd22:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800fd26:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fd2a:	f003 0310 	and.w	r3, r3, #16
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d002      	beq.n	800fd38 <ProcessMacCommands+0x574>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800fd32:	2301      	movs	r3, #1
 800fd34:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800fd38:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fd3c:	f003 030f 	and.w	r3, r3, #15
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800fd46:	4b4d      	ldr	r3, [pc, #308]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fd48:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fd4c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fd50:	4611      	mov	r1, r2
 800fd52:	4618      	mov	r0, r3
 800fd54:	f005 f95b 	bl	801500e <RegionTxParamSetupReq>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd5e:	f000 8208 	beq.w	8010172 <ProcessMacCommands+0x9ae>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800fd62:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800fd66:	4b45      	ldr	r3, [pc, #276]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fd68:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800fd6c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800fd70:	4b42      	ldr	r3, [pc, #264]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fd72:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800fd76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	4b40      	ldr	r3, [pc, #256]	@ (800fe80 <ProcessMacCommands+0x6bc>)
 800fd7e:	5c9b      	ldrb	r3, [r3, r2]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7f0 fd23 	bl	80007cc <__aeabi_ui2f>
 800fd86:	4603      	mov	r3, r0
 800fd88:	4a3c      	ldr	r2, [pc, #240]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fd8a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800fd8e:	2302      	movs	r3, #2
 800fd90:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fd94:	4b39      	ldr	r3, [pc, #228]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fd96:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800fd9a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd9e:	4b37      	ldr	r3, [pc, #220]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fda0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fda4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fda8:	4611      	mov	r1, r2
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f005 f832 	bl	8014e14 <RegionGetPhyParam>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800fdb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb6:	b25a      	sxtb	r2, r3
 800fdb8:	4b30      	ldr	r3, [pc, #192]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fdba:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	bfb8      	it	lt
 800fdc2:	4613      	movlt	r3, r2
 800fdc4:	b25a      	sxtb	r2, r3
 800fdc6:	4b2d      	ldr	r3, [pc, #180]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fdc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800fdcc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	2009      	movs	r0, #9
 800fdd6:	f003 fa7d 	bl	80132d4 <LoRaMacCommandsAddCmd>
                }
                break;
 800fdda:	e1ca      	b.n	8010172 <ProcessMacCommands+0x9ae>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800fddc:	2303      	movs	r3, #3
 800fdde:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800fde2:	78fb      	ldrb	r3, [r7, #3]
 800fde4:	1c5a      	adds	r2, r3, #1
 800fde6:	70fa      	strb	r2, [r7, #3]
 800fde8:	461a      	mov	r2, r3
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4413      	add	r3, r2
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800fdf4:	78fb      	ldrb	r3, [r7, #3]
 800fdf6:	1c5a      	adds	r2, r3, #1
 800fdf8:	70fa      	strb	r2, [r7, #3]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4413      	add	r3, r2
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fe04:	78fb      	ldrb	r3, [r7, #3]
 800fe06:	1c5a      	adds	r2, r3, #1
 800fe08:	70fa      	strb	r2, [r7, #3]
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4413      	add	r3, r2
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	021a      	lsls	r2, r3, #8
 800fe14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe16:	4313      	orrs	r3, r2
 800fe18:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fe1a:	78fb      	ldrb	r3, [r7, #3]
 800fe1c:	1c5a      	adds	r2, r3, #1
 800fe1e:	70fa      	strb	r2, [r7, #3]
 800fe20:	461a      	mov	r2, r3
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4413      	add	r3, r2
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	041a      	lsls	r2, r3, #16
 800fe2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800fe30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe32:	2264      	movs	r2, #100	@ 0x64
 800fe34:	fb02 f303 	mul.w	r3, r2, r3
 800fe38:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800fe3a:	4b10      	ldr	r3, [pc, #64]	@ (800fe7c <ProcessMacCommands+0x6b8>)
 800fe3c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fe40:	f107 0220 	add.w	r2, r7, #32
 800fe44:	4611      	mov	r1, r2
 800fe46:	4618      	mov	r0, r3
 800fe48:	f005 f8f4 	bl	8015034 <RegionDlChannelReq>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fe54:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fe58:	b25b      	sxtb	r3, r3
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	f2c0 818b 	blt.w	8010176 <ProcessMacCommands+0x9b2>
                {
                    macCmdPayload[0] = status;
 800fe60:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fe64:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800fe68:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	4619      	mov	r1, r3
 800fe70:	200a      	movs	r0, #10
 800fe72:	f003 fa2f 	bl	80132d4 <LoRaMacCommandsAddCmd>
                }
                break;
 800fe76:	e17e      	b.n	8010176 <ProcessMacCommands+0x9b2>
 800fe78:	200007a0 	.word	0x200007a0
 800fe7c:	20000cd4 	.word	0x20000cd4
 800fe80:	0801c528 	.word	0x0801c528
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800fe84:	2009      	movs	r0, #9
 800fe86:	f003 fd5d 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f000 8084 	beq.w	800ff9a <ProcessMacCommands+0x7d6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800fe92:	2109      	movs	r1, #9
 800fe94:	2000      	movs	r0, #0
 800fe96:	f003 fcc9 	bl	801382c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800fe9a:	f107 0318 	add.w	r3, r7, #24
 800fe9e:	2200      	movs	r2, #0
 800fea0:	601a      	str	r2, [r3, #0]
 800fea2:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800fea4:	f107 0310 	add.w	r3, r7, #16
 800fea8:	2200      	movs	r2, #0
 800feaa:	601a      	str	r2, [r3, #0]
 800feac:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800feae:	f107 0308 	add.w	r3, r7, #8
 800feb2:	2200      	movs	r2, #0
 800feb4:	601a      	str	r2, [r3, #0]
 800feb6:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800feb8:	78fb      	ldrb	r3, [r7, #3]
 800feba:	1c5a      	adds	r2, r3, #1
 800febc:	70fa      	strb	r2, [r7, #3]
 800febe:	461a      	mov	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	4413      	add	r3, r2
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800fec8:	78fb      	ldrb	r3, [r7, #3]
 800feca:	1c5a      	adds	r2, r3, #1
 800fecc:	70fa      	strb	r2, [r7, #3]
 800fece:	461a      	mov	r2, r3
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	4413      	add	r3, r2
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	021a      	lsls	r2, r3, #8
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	4313      	orrs	r3, r2
 800fedc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800fede:	78fb      	ldrb	r3, [r7, #3]
 800fee0:	1c5a      	adds	r2, r3, #1
 800fee2:	70fa      	strb	r2, [r7, #3]
 800fee4:	461a      	mov	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4413      	add	r3, r2
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	041a      	lsls	r2, r3, #16
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	4313      	orrs	r3, r2
 800fef2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800fef4:	78fb      	ldrb	r3, [r7, #3]
 800fef6:	1c5a      	adds	r2, r3, #1
 800fef8:	70fa      	strb	r2, [r7, #3]
 800fefa:	461a      	mov	r2, r3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	4413      	add	r3, r2
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	061a      	lsls	r2, r3, #24
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	4313      	orrs	r3, r2
 800ff08:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ff0a:	78fb      	ldrb	r3, [r7, #3]
 800ff0c:	1c5a      	adds	r2, r3, #1
 800ff0e:	70fa      	strb	r2, [r7, #3]
 800ff10:	461a      	mov	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4413      	add	r3, r2
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	b21b      	sxth	r3, r3
 800ff1a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ff1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ff20:	461a      	mov	r2, r3
 800ff22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff26:	fb02 f303 	mul.w	r3, r2, r3
 800ff2a:	121b      	asrs	r3, r3, #8
 800ff2c:	b21b      	sxth	r3, r3
 800ff2e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800ff30:	f107 0310 	add.w	r3, r7, #16
 800ff34:	f107 0218 	add.w	r2, r7, #24
 800ff38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff3c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	4b96      	ldr	r3, [pc, #600]	@ (801019c <ProcessMacCommands+0x9d8>)
 800ff44:	4413      	add	r3, r2
 800ff46:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800ff48:	f107 0308 	add.w	r3, r7, #8
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f00a fd73 	bl	801aa38 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800ff52:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800ff56:	4b92      	ldr	r3, [pc, #584]	@ (80101a0 <ProcessMacCommands+0x9dc>)
 800ff58:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800ff5c:	9200      	str	r2, [sp, #0]
 800ff5e:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800ff62:	f107 0210 	add.w	r2, r7, #16
 800ff66:	ca06      	ldmia	r2, {r1, r2}
 800ff68:	f00a fcff 	bl	801a96a <SysTimeSub>
 800ff6c:	f107 0010 	add.w	r0, r7, #16
 800ff70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ff76:	f107 0208 	add.w	r2, r7, #8
 800ff7a:	ca06      	ldmia	r2, {r1, r2}
 800ff7c:	f00a fcbc 	bl	801a8f8 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800ff80:	f107 0310 	add.w	r3, r7, #16
 800ff84:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ff88:	f00a fd28 	bl	801a9dc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800ff8c:	f003 f840 	bl	8013010 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800ff90:	4b83      	ldr	r3, [pc, #524]	@ (80101a0 <ProcessMacCommands+0x9dc>)
 800ff92:	2201      	movs	r2, #1
 800ff94:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800ff98:	e0f2      	b.n	8010180 <ProcessMacCommands+0x9bc>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ff9a:	4b81      	ldr	r3, [pc, #516]	@ (80101a0 <ProcessMacCommands+0x9dc>)
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 800ffa2:	e0ed      	b.n	8010180 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800ffa4:	200c      	movs	r0, #12
 800ffa6:	f003 fccd 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 80e4 	beq.w	801017a <ProcessMacCommands+0x9b6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ffb2:	210c      	movs	r1, #12
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	f003 fc39 	bl	801382c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800ffba:	4b79      	ldr	r3, [pc, #484]	@ (80101a0 <ProcessMacCommands+0x9dc>)
 800ffbc:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800ffc0:	2b04      	cmp	r3, #4
 800ffc2:	f000 80da 	beq.w	801017a <ProcessMacCommands+0x9b6>
 800ffc6:	4b76      	ldr	r3, [pc, #472]	@ (80101a0 <ProcessMacCommands+0x9dc>)
 800ffc8:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800ffcc:	2b05      	cmp	r3, #5
 800ffce:	f000 80d4 	beq.w	801017a <ProcessMacCommands+0x9b6>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800ffd2:	f002 fffe 	bl	8012fd2 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800ffd6:	e0d0      	b.n	801017a <ProcessMacCommands+0x9b6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800ffd8:	2303      	movs	r3, #3
 800ffda:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800ffe2:	78fb      	ldrb	r3, [r7, #3]
 800ffe4:	1c5a      	adds	r2, r3, #1
 800ffe6:	70fa      	strb	r2, [r7, #3]
 800ffe8:	461a      	mov	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4413      	add	r3, r2
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fff2:	78fb      	ldrb	r3, [r7, #3]
 800fff4:	1c5a      	adds	r2, r3, #1
 800fff6:	70fa      	strb	r2, [r7, #3]
 800fff8:	461a      	mov	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4413      	add	r3, r2
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	021b      	lsls	r3, r3, #8
 8010002:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010004:	4313      	orrs	r3, r2
 8010006:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010008:	78fb      	ldrb	r3, [r7, #3]
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	70fa      	strb	r2, [r7, #3]
 801000e:	461a      	mov	r2, r3
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4413      	add	r3, r2
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	041b      	lsls	r3, r3, #16
 8010018:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801001a:	4313      	orrs	r3, r2
 801001c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 801001e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010020:	2264      	movs	r2, #100	@ 0x64
 8010022:	fb02 f303 	mul.w	r3, r2, r3
 8010026:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010028:	78fb      	ldrb	r3, [r7, #3]
 801002a:	1c5a      	adds	r2, r3, #1
 801002c:	70fa      	strb	r2, [r7, #3]
 801002e:	461a      	mov	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4413      	add	r3, r2
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	f003 030f 	and.w	r3, r3, #15
 801003a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801003e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010042:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010044:	4618      	mov	r0, r3
 8010046:	f002 ffca 	bl	8012fde <LoRaMacClassBPingSlotChannelReq>
 801004a:	4603      	mov	r3, r0
 801004c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 8010050:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8010054:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8010058:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801005c:	2201      	movs	r2, #1
 801005e:	4619      	mov	r1, r3
 8010060:	2011      	movs	r0, #17
 8010062:	f003 f937 	bl	80132d4 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8010066:	e08b      	b.n	8010180 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010068:	200d      	movs	r0, #13
 801006a:	f003 fc6b 	bl	8013944 <LoRaMacConfirmQueueIsCmdActive>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	f000 8084 	beq.w	801017e <ProcessMacCommands+0x9ba>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010076:	210d      	movs	r1, #13
 8010078:	2000      	movs	r0, #0
 801007a:	f003 fbd7 	bl	801382c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010084:	2300      	movs	r3, #0
 8010086:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801008a:	78fb      	ldrb	r3, [r7, #3]
 801008c:	1c5a      	adds	r2, r3, #1
 801008e:	70fa      	strb	r2, [r7, #3]
 8010090:	461a      	mov	r2, r3
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4413      	add	r3, r2
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801009c:	78fb      	ldrb	r3, [r7, #3]
 801009e:	1c5a      	adds	r2, r3, #1
 80100a0:	70fa      	strb	r2, [r7, #3]
 80100a2:	461a      	mov	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4413      	add	r3, r2
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	021b      	lsls	r3, r3, #8
 80100ac:	b21a      	sxth	r2, r3
 80100ae:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80100b2:	4313      	orrs	r3, r2
 80100b4:	b21b      	sxth	r3, r3
 80100b6:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80100ba:	78fb      	ldrb	r3, [r7, #3]
 80100bc:	1c5a      	adds	r2, r3, #1
 80100be:	70fa      	strb	r2, [r7, #3]
 80100c0:	461a      	mov	r2, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4413      	add	r3, r2
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80100cc:	4b35      	ldr	r3, [pc, #212]	@ (80101a4 <ProcessMacCommands+0x9e0>)
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 80100d4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80100d8:	4618      	mov	r0, r3
 80100da:	f002 ff8c 	bl	8012ff6 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80100de:	e04e      	b.n	801017e <ProcessMacCommands+0x9ba>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80100e0:	2300      	movs	r3, #0
 80100e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80100e6:	78fb      	ldrb	r3, [r7, #3]
 80100e8:	1c5a      	adds	r2, r3, #1
 80100ea:	70fa      	strb	r2, [r7, #3]
 80100ec:	461a      	mov	r2, r3
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4413      	add	r3, r2
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80100f8:	78fb      	ldrb	r3, [r7, #3]
 80100fa:	1c5a      	adds	r2, r3, #1
 80100fc:	70fa      	strb	r2, [r7, #3]
 80100fe:	461a      	mov	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4413      	add	r3, r2
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	021b      	lsls	r3, r3, #8
 8010108:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801010c:	4313      	orrs	r3, r2
 801010e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010112:	78fb      	ldrb	r3, [r7, #3]
 8010114:	1c5a      	adds	r2, r3, #1
 8010116:	70fa      	strb	r2, [r7, #3]
 8010118:	461a      	mov	r2, r3
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4413      	add	r3, r2
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	041b      	lsls	r3, r3, #16
 8010122:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010126:	4313      	orrs	r3, r2
 8010128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 801012c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010130:	2264      	movs	r2, #100	@ 0x64
 8010132:	fb02 f303 	mul.w	r3, r2, r3
 8010136:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801013a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 801013e:	f002 ff6d 	bl	801301c <LoRaMacClassBBeaconFreqReq>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d003      	beq.n	8010150 <ProcessMacCommands+0x98c>
                    {
                        macCmdPayload[0] = 1;
 8010148:	2301      	movs	r3, #1
 801014a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 801014e:	e002      	b.n	8010156 <ProcessMacCommands+0x992>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010150:	2300      	movs	r3, #0
 8010152:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010156:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801015a:	2201      	movs	r2, #1
 801015c:	4619      	mov	r1, r3
 801015e:	2013      	movs	r0, #19
 8010160:	f003 f8b8 	bl	80132d4 <LoRaMacCommandsAddCmd>
                }
                break;
 8010164:	e00c      	b.n	8010180 <ProcessMacCommands+0x9bc>
                break;
 8010166:	bf00      	nop
 8010168:	e00a      	b.n	8010180 <ProcessMacCommands+0x9bc>
                break;
 801016a:	bf00      	nop
 801016c:	e008      	b.n	8010180 <ProcessMacCommands+0x9bc>
                break;
 801016e:	bf00      	nop
 8010170:	e006      	b.n	8010180 <ProcessMacCommands+0x9bc>
                break;
 8010172:	bf00      	nop
 8010174:	e004      	b.n	8010180 <ProcessMacCommands+0x9bc>
                break;
 8010176:	bf00      	nop
 8010178:	e002      	b.n	8010180 <ProcessMacCommands+0x9bc>
                break;
 801017a:	bf00      	nop
 801017c:	e000      	b.n	8010180 <ProcessMacCommands+0x9bc>
                break;
 801017e:	bf00      	nop
    while( macIndex < commandsSize )
 8010180:	78fa      	ldrb	r2, [r7, #3]
 8010182:	78bb      	ldrb	r3, [r7, #2]
 8010184:	429a      	cmp	r2, r3
 8010186:	f4ff ab3f 	bcc.w	800f808 <ProcessMacCommands+0x44>
 801018a:	e004      	b.n	8010196 <ProcessMacCommands+0x9d2>
        return;
 801018c:	bf00      	nop
 801018e:	e002      	b.n	8010196 <ProcessMacCommands+0x9d2>
            return;
 8010190:	bf00      	nop
 8010192:	e000      	b.n	8010196 <ProcessMacCommands+0x9d2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010194:	bf00      	nop
        }
    }
}
 8010196:	378c      	adds	r7, #140	@ 0x8c
 8010198:	46bd      	mov	sp, r7
 801019a:	bd90      	pop	{r4, r7, pc}
 801019c:	12d53d80 	.word	0x12d53d80
 80101a0:	200007a0 	.word	0x200007a0
 80101a4:	200018e4 	.word	0x200018e4

080101a8 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b08e      	sub	sp, #56	@ 0x38
 80101ac:	af02      	add	r7, sp, #8
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	607a      	str	r2, [r7, #4]
 80101b2:	461a      	mov	r2, r3
 80101b4:	460b      	mov	r3, r1
 80101b6:	72fb      	strb	r3, [r7, #11]
 80101b8:	4613      	mov	r3, r2
 80101ba:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80101bc:	2303      	movs	r3, #3
 80101be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80101c2:	4b66      	ldr	r3, [pc, #408]	@ (801035c <Send+0x1b4>)
 80101c4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80101c8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80101cc:	4b63      	ldr	r3, [pc, #396]	@ (801035c <Send+0x1b4>)
 80101ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80101d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80101d6:	4b61      	ldr	r3, [pc, #388]	@ (801035c <Send+0x1b4>)
 80101d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101da:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80101dc:	4b5f      	ldr	r3, [pc, #380]	@ (801035c <Send+0x1b4>)
 80101de:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d101      	bne.n	80101ea <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80101e6:	2307      	movs	r3, #7
 80101e8:	e0b4      	b.n	8010354 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80101ea:	4b5c      	ldr	r3, [pc, #368]	@ (801035c <Send+0x1b4>)
 80101ec:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d102      	bne.n	80101fa <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80101f4:	4b59      	ldr	r3, [pc, #356]	@ (801035c <Send+0x1b4>)
 80101f6:	2200      	movs	r2, #0
 80101f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010200:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010204:	f023 030f 	bic.w	r3, r3, #15
 8010208:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 801020c:	4b53      	ldr	r3, [pc, #332]	@ (801035c <Send+0x1b4>)
 801020e:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8010212:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010216:	f362 13c7 	bfi	r3, r2, #7, #1
 801021a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801021e:	4b4f      	ldr	r3, [pc, #316]	@ (801035c <Send+0x1b4>)
 8010220:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010224:	2b01      	cmp	r3, #1
 8010226:	d106      	bne.n	8010236 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010228:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801022c:	f043 0310 	orr.w	r3, r3, #16
 8010230:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8010234:	e005      	b.n	8010242 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010236:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801023a:	f023 0310 	bic.w	r3, r3, #16
 801023e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010242:	4b46      	ldr	r3, [pc, #280]	@ (801035c <Send+0x1b4>)
 8010244:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010248:	2b00      	cmp	r3, #0
 801024a:	d005      	beq.n	8010258 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 801024c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010250:	f043 0320 	orr.w	r3, r3, #32
 8010254:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8010258:	2301      	movs	r3, #1
 801025a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 801025c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010260:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010264:	b2db      	uxtb	r3, r3
 8010266:	2b00      	cmp	r3, #0
 8010268:	bf14      	ite	ne
 801026a:	2301      	movne	r3, #1
 801026c:	2300      	moveq	r3, #0
 801026e:	b2db      	uxtb	r3, r3
 8010270:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010272:	4b3a      	ldr	r3, [pc, #232]	@ (801035c <Send+0x1b4>)
 8010274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010276:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010278:	4b38      	ldr	r3, [pc, #224]	@ (801035c <Send+0x1b4>)
 801027a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801027e:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010280:	4b36      	ldr	r3, [pc, #216]	@ (801035c <Send+0x1b4>)
 8010282:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8010286:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010288:	4b34      	ldr	r3, [pc, #208]	@ (801035c <Send+0x1b4>)
 801028a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801028e:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010292:	4b32      	ldr	r3, [pc, #200]	@ (801035c <Send+0x1b4>)
 8010294:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010298:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801029c:	4b2f      	ldr	r3, [pc, #188]	@ (801035c <Send+0x1b4>)
 801029e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80102a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80102a6:	4b2d      	ldr	r3, [pc, #180]	@ (801035c <Send+0x1b4>)
 80102a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80102b0:	4b2a      	ldr	r3, [pc, #168]	@ (801035c <Send+0x1b4>)
 80102b2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80102b6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80102ba:	f107 0014 	add.w	r0, r7, #20
 80102be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	4b26      	ldr	r3, [pc, #152]	@ (8010360 <Send+0x1b8>)
 80102c6:	4a27      	ldr	r2, [pc, #156]	@ (8010364 <Send+0x1bc>)
 80102c8:	4927      	ldr	r1, [pc, #156]	@ (8010368 <Send+0x1c0>)
 80102ca:	f002 fd21 	bl	8012d10 <LoRaMacAdrCalcNext>
 80102ce:	4603      	mov	r3, r0
 80102d0:	461a      	mov	r2, r3
 80102d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80102d6:	f362 1386 	bfi	r3, r2, #6, #1
 80102da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80102de:	7afa      	ldrb	r2, [r7, #11]
 80102e0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80102e4:	893b      	ldrh	r3, [r7, #8]
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f000 fc72 	bl	8010bd4 <PrepareFrame>
 80102f0:	4603      	mov	r3, r0
 80102f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80102f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d003      	beq.n	8010306 <Send+0x15e>
 80102fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010302:	2b0a      	cmp	r3, #10
 8010304:	d107      	bne.n	8010316 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8010306:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801030a:	4618      	mov	r0, r3
 801030c:	f000 f962 	bl	80105d4 <ScheduleTx>
 8010310:	4603      	mov	r3, r0
 8010312:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010316:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00a      	beq.n	8010334 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801031e:	4a0f      	ldr	r2, [pc, #60]	@ (801035c <Send+0x1b4>)
 8010320:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010324:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010328:	4a0c      	ldr	r2, [pc, #48]	@ (801035c <Send+0x1b4>)
 801032a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801032e:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8010332:	e00d      	b.n	8010350 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010334:	4b09      	ldr	r3, [pc, #36]	@ (801035c <Send+0x1b4>)
 8010336:	2200      	movs	r2, #0
 8010338:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801033c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801033e:	4a07      	ldr	r2, [pc, #28]	@ (801035c <Send+0x1b4>)
 8010340:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010342:	f003 f86d 	bl	8013420 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010346:	4603      	mov	r3, r0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d001      	beq.n	8010350 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801034c:	2313      	movs	r3, #19
 801034e:	e001      	b.n	8010354 <Send+0x1ac>
        }
    }
    return status;
 8010350:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010354:	4618      	mov	r0, r3
 8010356:	3730      	adds	r7, #48	@ 0x30
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	20000cd4 	.word	0x20000cd4
 8010360:	20000d3c 	.word	0x20000d3c
 8010364:	20000d0c 	.word	0x20000d0c
 8010368:	20000d0d 	.word	0x20000d0d

0801036c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	4603      	mov	r3, r0
 8010374:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010376:	2300      	movs	r3, #0
 8010378:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801037a:	2300      	movs	r3, #0
 801037c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801037e:	2301      	movs	r3, #1
 8010380:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	2bff      	cmp	r3, #255	@ 0xff
 8010386:	d11f      	bne.n	80103c8 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010388:	2000      	movs	r0, #0
 801038a:	f7ff f8e1 	bl	800f550 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801038e:	4b15      	ldr	r3, [pc, #84]	@ (80103e4 <SendReJoinReq+0x78>)
 8010390:	2200      	movs	r2, #0
 8010392:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010396:	4b13      	ldr	r3, [pc, #76]	@ (80103e4 <SendReJoinReq+0x78>)
 8010398:	4a13      	ldr	r2, [pc, #76]	@ (80103e8 <SendReJoinReq+0x7c>)
 801039a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801039e:	4b11      	ldr	r3, [pc, #68]	@ (80103e4 <SendReJoinReq+0x78>)
 80103a0:	22ff      	movs	r2, #255	@ 0xff
 80103a2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80103a6:	7b3b      	ldrb	r3, [r7, #12]
 80103a8:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80103ac:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80103ae:	7b3a      	ldrb	r2, [r7, #12]
 80103b0:	4b0c      	ldr	r3, [pc, #48]	@ (80103e4 <SendReJoinReq+0x78>)
 80103b2:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80103b6:	480d      	ldr	r0, [pc, #52]	@ (80103ec <SendReJoinReq+0x80>)
 80103b8:	f7fb ff24 	bl	800c204 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80103bc:	480c      	ldr	r0, [pc, #48]	@ (80103f0 <SendReJoinReq+0x84>)
 80103be:	f7fb fef1 	bl	800c1a4 <SecureElementGetDevEui>

            allowDelayedTx = false;
 80103c2:	2300      	movs	r3, #0
 80103c4:	73fb      	strb	r3, [r7, #15]

            break;
 80103c6:	e002      	b.n	80103ce <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80103c8:	2302      	movs	r3, #2
 80103ca:	73bb      	strb	r3, [r7, #14]
            break;
 80103cc:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80103ce:	7bfb      	ldrb	r3, [r7, #15]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f000 f8ff 	bl	80105d4 <ScheduleTx>
 80103d6:	4603      	mov	r3, r0
 80103d8:	73bb      	strb	r3, [r7, #14]
    return status;
 80103da:	7bbb      	ldrb	r3, [r7, #14]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	200007a0 	.word	0x200007a0
 80103e8:	200007a2 	.word	0x200007a2
 80103ec:	200008ae 	.word	0x200008ae
 80103f0:	200008b6 	.word	0x200008b6

080103f4 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80103f8:	f002 fd9a 	bl	8012f30 <LoRaMacClassBIsBeaconExpected>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d001      	beq.n	8010406 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010402:	230e      	movs	r3, #14
 8010404:	e013      	b.n	801042e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010406:	4b0b      	ldr	r3, [pc, #44]	@ (8010434 <CheckForClassBCollision+0x40>)
 8010408:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801040c:	2b01      	cmp	r3, #1
 801040e:	d10d      	bne.n	801042c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010410:	f002 fd95 	bl	8012f3e <LoRaMacClassBIsPingExpected>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801041a:	230f      	movs	r3, #15
 801041c:	e007      	b.n	801042e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801041e:	f002 fd95 	bl	8012f4c <LoRaMacClassBIsMulticastExpected>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d001      	beq.n	801042c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010428:	230f      	movs	r3, #15
 801042a:	e000      	b.n	801042e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 801042c:	2300      	movs	r3, #0
}
 801042e:	4618      	mov	r0, r3
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	20000cd4 	.word	0x20000cd4

08010438 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010438:	b590      	push	{r4, r7, lr}
 801043a:	b083      	sub	sp, #12
 801043c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801043e:	4b2d      	ldr	r3, [pc, #180]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 8010440:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010444:	4b2b      	ldr	r3, [pc, #172]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 8010446:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801044a:	4b2a      	ldr	r3, [pc, #168]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 801044c:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 8010450:	4b28      	ldr	r3, [pc, #160]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 8010452:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010456:	4b27      	ldr	r3, [pc, #156]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 8010458:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801045c:	b25b      	sxtb	r3, r3
 801045e:	f004 fe2e 	bl	80150be <RegionApplyDrOffset>
 8010462:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010464:	b259      	sxtb	r1, r3
 8010466:	4b23      	ldr	r3, [pc, #140]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 8010468:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 801046c:	4b21      	ldr	r3, [pc, #132]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 801046e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010470:	4821      	ldr	r0, [pc, #132]	@ (80104f8 <ComputeRxWindowParameters+0xc0>)
 8010472:	9000      	str	r0, [sp, #0]
 8010474:	4620      	mov	r0, r4
 8010476:	f004 fd44 	bl	8014f02 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801047a:	4b1e      	ldr	r3, [pc, #120]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 801047c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010480:	4b1c      	ldr	r3, [pc, #112]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 8010482:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010486:	b259      	sxtb	r1, r3
 8010488:	4b1a      	ldr	r3, [pc, #104]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 801048a:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 801048e:	4b19      	ldr	r3, [pc, #100]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 8010490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010492:	4c1a      	ldr	r4, [pc, #104]	@ (80104fc <ComputeRxWindowParameters+0xc4>)
 8010494:	9400      	str	r4, [sp, #0]
 8010496:	f004 fd34 	bl	8014f02 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801049a:	4b16      	ldr	r3, [pc, #88]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 801049c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801049e:	4a18      	ldr	r2, [pc, #96]	@ (8010500 <ComputeRxWindowParameters+0xc8>)
 80104a0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80104a4:	4413      	add	r3, r2
 80104a6:	4a16      	ldr	r2, [pc, #88]	@ (8010500 <ComputeRxWindowParameters+0xc8>)
 80104a8:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80104ac:	4b11      	ldr	r3, [pc, #68]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 80104ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80104b0:	4a13      	ldr	r2, [pc, #76]	@ (8010500 <ComputeRxWindowParameters+0xc8>)
 80104b2:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 80104b6:	4413      	add	r3, r2
 80104b8:	4a11      	ldr	r2, [pc, #68]	@ (8010500 <ComputeRxWindowParameters+0xc8>)
 80104ba:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80104be:	4b10      	ldr	r3, [pc, #64]	@ (8010500 <ComputeRxWindowParameters+0xc8>)
 80104c0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80104c4:	2b04      	cmp	r3, #4
 80104c6:	d011      	beq.n	80104ec <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80104c8:	4b0a      	ldr	r3, [pc, #40]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 80104ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80104cc:	4a0c      	ldr	r2, [pc, #48]	@ (8010500 <ComputeRxWindowParameters+0xc8>)
 80104ce:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80104d2:	4413      	add	r3, r2
 80104d4:	4a0a      	ldr	r2, [pc, #40]	@ (8010500 <ComputeRxWindowParameters+0xc8>)
 80104d6:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80104da:	4b06      	ldr	r3, [pc, #24]	@ (80104f4 <ComputeRxWindowParameters+0xbc>)
 80104dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104de:	4a08      	ldr	r2, [pc, #32]	@ (8010500 <ComputeRxWindowParameters+0xc8>)
 80104e0:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 80104e4:	4413      	add	r3, r2
 80104e6:	4a06      	ldr	r2, [pc, #24]	@ (8010500 <ComputeRxWindowParameters+0xc8>)
 80104e8:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 80104ec:	bf00      	nop
 80104ee:	3704      	adds	r7, #4
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd90      	pop	{r4, r7, pc}
 80104f4:	20000cd4 	.word	0x20000cd4
 80104f8:	20000b58 	.word	0x20000b58
 80104fc:	20000b70 	.word	0x20000b70
 8010500:	200007a0 	.word	0x200007a0

08010504 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801050a:	2300      	movs	r3, #0
 801050c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801050e:	4b13      	ldr	r3, [pc, #76]	@ (801055c <VerifyTxFrame+0x58>)
 8010510:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8010514:	2b00      	cmp	r3, #0
 8010516:	d01b      	beq.n	8010550 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010518:	1d3b      	adds	r3, r7, #4
 801051a:	4618      	mov	r0, r3
 801051c:	f002 ffd0 	bl	80134c0 <LoRaMacCommandsGetSizeSerializedCmds>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d001      	beq.n	801052a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010526:	2313      	movs	r3, #19
 8010528:	e013      	b.n	8010552 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801052a:	4b0d      	ldr	r3, [pc, #52]	@ (8010560 <VerifyTxFrame+0x5c>)
 801052c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010530:	4a0a      	ldr	r2, [pc, #40]	@ (801055c <VerifyTxFrame+0x58>)
 8010532:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	b2d2      	uxtb	r2, r2
 801053a:	4618      	mov	r0, r3
 801053c:	f7ff f91a 	bl	800f774 <ValidatePayloadLength>
 8010540:	4603      	mov	r3, r0
 8010542:	f083 0301 	eor.w	r3, r3, #1
 8010546:	b2db      	uxtb	r3, r3
 8010548:	2b00      	cmp	r3, #0
 801054a:	d001      	beq.n	8010550 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 801054c:	2308      	movs	r3, #8
 801054e:	e000      	b.n	8010552 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010550:	2300      	movs	r3, #0
}
 8010552:	4618      	mov	r0, r3
 8010554:	3708      	adds	r7, #8
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	20000cd4 	.word	0x20000cd4
 8010560:	200007a0 	.word	0x200007a0

08010564 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801056a:	4b18      	ldr	r3, [pc, #96]	@ (80105cc <SerializeTxFrame+0x68>)
 801056c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010570:	2b00      	cmp	r3, #0
 8010572:	d002      	beq.n	801057a <SerializeTxFrame+0x16>
 8010574:	2b04      	cmp	r3, #4
 8010576:	d011      	beq.n	801059c <SerializeTxFrame+0x38>
 8010578:	e021      	b.n	80105be <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801057a:	4815      	ldr	r0, [pc, #84]	@ (80105d0 <SerializeTxFrame+0x6c>)
 801057c:	f004 fac3 	bl	8014b06 <LoRaMacSerializerJoinRequest>
 8010580:	4603      	mov	r3, r0
 8010582:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010584:	79fb      	ldrb	r3, [r7, #7]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d001      	beq.n	801058e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801058a:	2311      	movs	r3, #17
 801058c:	e01a      	b.n	80105c4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801058e:	4b0f      	ldr	r3, [pc, #60]	@ (80105cc <SerializeTxFrame+0x68>)
 8010590:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010594:	461a      	mov	r2, r3
 8010596:	4b0d      	ldr	r3, [pc, #52]	@ (80105cc <SerializeTxFrame+0x68>)
 8010598:	801a      	strh	r2, [r3, #0]
            break;
 801059a:	e012      	b.n	80105c2 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 801059c:	480c      	ldr	r0, [pc, #48]	@ (80105d0 <SerializeTxFrame+0x6c>)
 801059e:	f004 fb34 	bl	8014c0a <LoRaMacSerializerData>
 80105a2:	4603      	mov	r3, r0
 80105a4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80105a6:	79fb      	ldrb	r3, [r7, #7]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d001      	beq.n	80105b0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80105ac:	2311      	movs	r3, #17
 80105ae:	e009      	b.n	80105c4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80105b0:	4b06      	ldr	r3, [pc, #24]	@ (80105cc <SerializeTxFrame+0x68>)
 80105b2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80105b6:	461a      	mov	r2, r3
 80105b8:	4b04      	ldr	r3, [pc, #16]	@ (80105cc <SerializeTxFrame+0x68>)
 80105ba:	801a      	strh	r2, [r3, #0]
            break;
 80105bc:	e001      	b.n	80105c2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80105be:	2303      	movs	r3, #3
 80105c0:	e000      	b.n	80105c4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80105c2:	2300      	movs	r3, #0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	200007a0 	.word	0x200007a0
 80105d0:	200008a8 	.word	0x200008a8

080105d4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b090      	sub	sp, #64	@ 0x40
 80105d8:	af02      	add	r7, sp, #8
 80105da:	4603      	mov	r3, r0
 80105dc:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80105de:	2303      	movs	r3, #3
 80105e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80105e4:	f7ff ff06 	bl	80103f4 <CheckForClassBCollision>
 80105e8:	4603      	mov	r3, r0
 80105ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 80105ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d002      	beq.n	80105fc <ScheduleTx+0x28>
    {
        return status;
 80105f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105fa:	e092      	b.n	8010722 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 80105fc:	f000 f8f8 	bl	80107f0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010600:	f7ff ffb0 	bl	8010564 <SerializeTxFrame>
 8010604:	4603      	mov	r3, r0
 8010606:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801060a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801060e:	2b00      	cmp	r3, #0
 8010610:	d002      	beq.n	8010618 <ScheduleTx+0x44>
    {
        return status;
 8010612:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010616:	e084      	b.n	8010722 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010618:	4b44      	ldr	r3, [pc, #272]	@ (801072c <ScheduleTx+0x158>)
 801061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801061c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801061e:	4b43      	ldr	r3, [pc, #268]	@ (801072c <ScheduleTx+0x158>)
 8010620:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010624:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010626:	4b41      	ldr	r3, [pc, #260]	@ (801072c <ScheduleTx+0x158>)
 8010628:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801062c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801062e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010632:	4618      	mov	r0, r3
 8010634:	f00a fa38 	bl	801aaa8 <SysTimeGetMcuTime>
 8010638:	4638      	mov	r0, r7
 801063a:	4b3c      	ldr	r3, [pc, #240]	@ (801072c <ScheduleTx+0x158>)
 801063c:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8010640:	9200      	str	r2, [sp, #0]
 8010642:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8010646:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801064a:	ca06      	ldmia	r2, {r1, r2}
 801064c:	f00a f98d 	bl	801a96a <SysTimeSub>
 8010650:	f107 0320 	add.w	r3, r7, #32
 8010654:	463a      	mov	r2, r7
 8010656:	e892 0003 	ldmia.w	r2, {r0, r1}
 801065a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801065e:	4b33      	ldr	r3, [pc, #204]	@ (801072c <ScheduleTx+0x158>)
 8010660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010662:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010664:	2300      	movs	r3, #0
 8010666:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 801066a:	2301      	movs	r3, #1
 801066c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801066e:	4b30      	ldr	r3, [pc, #192]	@ (8010730 <ScheduleTx+0x15c>)
 8010670:	881b      	ldrh	r3, [r3, #0]
 8010672:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010674:	4b2d      	ldr	r3, [pc, #180]	@ (801072c <ScheduleTx+0x158>)
 8010676:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801067a:	2b00      	cmp	r3, #0
 801067c:	d104      	bne.n	8010688 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 801067e:	2301      	movs	r3, #1
 8010680:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8010684:	2300      	movs	r3, #0
 8010686:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010688:	4b28      	ldr	r3, [pc, #160]	@ (801072c <ScheduleTx+0x158>)
 801068a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801068e:	f107 0114 	add.w	r1, r7, #20
 8010692:	4b28      	ldr	r3, [pc, #160]	@ (8010734 <ScheduleTx+0x160>)
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	4b28      	ldr	r3, [pc, #160]	@ (8010738 <ScheduleTx+0x164>)
 8010698:	4a28      	ldr	r2, [pc, #160]	@ (801073c <ScheduleTx+0x168>)
 801069a:	f004 fcf8 	bl	801508e <RegionNextChannel>
 801069e:	4603      	mov	r3, r0
 80106a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80106a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d025      	beq.n	80106f8 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80106ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80106b0:	2b0b      	cmp	r3, #11
 80106b2:	d11e      	bne.n	80106f2 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80106b4:	4b1e      	ldr	r3, [pc, #120]	@ (8010730 <ScheduleTx+0x15c>)
 80106b6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d01c      	beq.n	80106f8 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 80106be:	7bfb      	ldrb	r3, [r7, #15]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d013      	beq.n	80106ec <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80106c4:	4b1a      	ldr	r3, [pc, #104]	@ (8010730 <ScheduleTx+0x15c>)
 80106c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80106ca:	f043 0320 	orr.w	r3, r3, #32
 80106ce:	4a18      	ldr	r2, [pc, #96]	@ (8010730 <ScheduleTx+0x15c>)
 80106d0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80106d4:	4b16      	ldr	r3, [pc, #88]	@ (8010730 <ScheduleTx+0x15c>)
 80106d6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 80106da:	4619      	mov	r1, r3
 80106dc:	4818      	ldr	r0, [pc, #96]	@ (8010740 <ScheduleTx+0x16c>)
 80106de:	f00a ff1b 	bl	801b518 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80106e2:	4817      	ldr	r0, [pc, #92]	@ (8010740 <ScheduleTx+0x16c>)
 80106e4:	f00a fe3a 	bl	801b35c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80106e8:	2300      	movs	r3, #0
 80106ea:	e01a      	b.n	8010722 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 80106ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80106f0:	e017      	b.n	8010722 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80106f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80106f6:	e014      	b.n	8010722 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80106f8:	f7ff fe9e 	bl	8010438 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80106fc:	f7ff ff02 	bl	8010504 <VerifyTxFrame>
 8010700:	4603      	mov	r3, r0
 8010702:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010706:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801070a:	2b00      	cmp	r3, #0
 801070c:	d002      	beq.n	8010714 <ScheduleTx+0x140>
    {
        return status;
 801070e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010712:	e006      	b.n	8010722 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010714:	4b06      	ldr	r3, [pc, #24]	@ (8010730 <ScheduleTx+0x15c>)
 8010716:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 801071a:	4618      	mov	r0, r3
 801071c:	f000 fb74 	bl	8010e08 <SendFrameOnChannel>
 8010720:	4603      	mov	r3, r0
}
 8010722:	4618      	mov	r0, r3
 8010724:	3738      	adds	r7, #56	@ 0x38
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	20000cd4 	.word	0x20000cd4
 8010730:	200007a0 	.word	0x200007a0
 8010734:	20000d04 	.word	0x20000d04
 8010738:	20000c34 	.word	0x20000c34
 801073c:	20000bbb 	.word	0x20000bbb
 8010740:	20000b08 	.word	0x20000b08

08010744 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	4603      	mov	r3, r0
 801074c:	460a      	mov	r2, r1
 801074e:	71fb      	strb	r3, [r7, #7]
 8010750:	4613      	mov	r3, r2
 8010752:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010754:	2312      	movs	r3, #18
 8010756:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010758:	2300      	movs	r3, #0
 801075a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 801075c:	4b22      	ldr	r3, [pc, #136]	@ (80107e8 <SecureFrame+0xa4>)
 801075e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010762:	2b00      	cmp	r3, #0
 8010764:	d002      	beq.n	801076c <SecureFrame+0x28>
 8010766:	2b04      	cmp	r3, #4
 8010768:	d011      	beq.n	801078e <SecureFrame+0x4a>
 801076a:	e036      	b.n	80107da <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801076c:	481f      	ldr	r0, [pc, #124]	@ (80107ec <SecureFrame+0xa8>)
 801076e:	f003 fd9d 	bl	80142ac <LoRaMacCryptoPrepareJoinRequest>
 8010772:	4603      	mov	r3, r0
 8010774:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010776:	7bfb      	ldrb	r3, [r7, #15]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d001      	beq.n	8010780 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801077c:	2311      	movs	r3, #17
 801077e:	e02f      	b.n	80107e0 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010780:	4b19      	ldr	r3, [pc, #100]	@ (80107e8 <SecureFrame+0xa4>)
 8010782:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010786:	461a      	mov	r2, r3
 8010788:	4b17      	ldr	r3, [pc, #92]	@ (80107e8 <SecureFrame+0xa4>)
 801078a:	801a      	strh	r2, [r3, #0]
            break;
 801078c:	e027      	b.n	80107de <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801078e:	f107 0308 	add.w	r3, r7, #8
 8010792:	4618      	mov	r0, r3
 8010794:	f003 fcc4 	bl	8014120 <LoRaMacCryptoGetFCntUp>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d001      	beq.n	80107a2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801079e:	2312      	movs	r3, #18
 80107a0:	e01e      	b.n	80107e0 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80107a2:	4b11      	ldr	r3, [pc, #68]	@ (80107e8 <SecureFrame+0xa4>)
 80107a4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d002      	beq.n	80107b2 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	3b01      	subs	r3, #1
 80107b0:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80107b2:	68b8      	ldr	r0, [r7, #8]
 80107b4:	79ba      	ldrb	r2, [r7, #6]
 80107b6:	79f9      	ldrb	r1, [r7, #7]
 80107b8:	4b0c      	ldr	r3, [pc, #48]	@ (80107ec <SecureFrame+0xa8>)
 80107ba:	f003 fe9d 	bl	80144f8 <LoRaMacCryptoSecureMessage>
 80107be:	4603      	mov	r3, r0
 80107c0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80107c2:	7bfb      	ldrb	r3, [r7, #15]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d001      	beq.n	80107cc <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80107c8:	2311      	movs	r3, #17
 80107ca:	e009      	b.n	80107e0 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80107cc:	4b06      	ldr	r3, [pc, #24]	@ (80107e8 <SecureFrame+0xa4>)
 80107ce:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80107d2:	461a      	mov	r2, r3
 80107d4:	4b04      	ldr	r3, [pc, #16]	@ (80107e8 <SecureFrame+0xa4>)
 80107d6:	801a      	strh	r2, [r3, #0]
            break;
 80107d8:	e001      	b.n	80107de <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80107da:	2303      	movs	r3, #3
 80107dc:	e000      	b.n	80107e0 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80107de:	2300      	movs	r3, #0
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3710      	adds	r7, #16
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}
 80107e8:	200007a0 	.word	0x200007a0
 80107ec:	200008a8 	.word	0x200008a8

080107f0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80107f0:	b480      	push	{r7}
 80107f2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80107f4:	4b09      	ldr	r3, [pc, #36]	@ (801081c <CalculateBackOff+0x2c>)
 80107f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d10a      	bne.n	8010812 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80107fc:	4b07      	ldr	r3, [pc, #28]	@ (801081c <CalculateBackOff+0x2c>)
 80107fe:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8010802:	3b01      	subs	r3, #1
 8010804:	4a06      	ldr	r2, [pc, #24]	@ (8010820 <CalculateBackOff+0x30>)
 8010806:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 801080a:	fb02 f303 	mul.w	r3, r2, r3
 801080e:	4a03      	ldr	r2, [pc, #12]	@ (801081c <CalculateBackOff+0x2c>)
 8010810:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8010812:	bf00      	nop
 8010814:	46bd      	mov	sp, r7
 8010816:	bc80      	pop	{r7}
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	20000cd4 	.word	0x20000cd4
 8010820:	200007a0 	.word	0x200007a0

08010824 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	4603      	mov	r3, r0
 801082c:	7139      	strb	r1, [r7, #4]
 801082e:	71fb      	strb	r3, [r7, #7]
 8010830:	4613      	mov	r3, r2
 8010832:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010834:	79fb      	ldrb	r3, [r7, #7]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d002      	beq.n	8010840 <RemoveMacCommands+0x1c>
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	2b01      	cmp	r3, #1
 801083e:	d10d      	bne.n	801085c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010840:	79bb      	ldrb	r3, [r7, #6]
 8010842:	2b01      	cmp	r3, #1
 8010844:	d108      	bne.n	8010858 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010846:	793b      	ldrb	r3, [r7, #4]
 8010848:	f003 0320 	and.w	r3, r3, #32
 801084c:	b2db      	uxtb	r3, r3
 801084e:	2b00      	cmp	r3, #0
 8010850:	d004      	beq.n	801085c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010852:	f002 fe09 	bl	8013468 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010856:	e001      	b.n	801085c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010858:	f002 fe06 	bl	8013468 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801085c:	bf00      	nop
 801085e:	3708      	adds	r7, #8
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8010864:	b5b0      	push	{r4, r5, r7, lr}
 8010866:	b092      	sub	sp, #72	@ 0x48
 8010868:	af00      	add	r7, sp, #0
 801086a:	4603      	mov	r3, r0
 801086c:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 801086e:	79fb      	ldrb	r3, [r7, #7]
 8010870:	f083 0301 	eor.w	r3, r3, #1
 8010874:	b2db      	uxtb	r3, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	d003      	beq.n	8010882 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801087a:	4b88      	ldr	r3, [pc, #544]	@ (8010a9c <ResetMacParameters+0x238>)
 801087c:	2200      	movs	r2, #0
 801087e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010882:	4b86      	ldr	r3, [pc, #536]	@ (8010a9c <ResetMacParameters+0x238>)
 8010884:	2200      	movs	r2, #0
 8010886:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010888:	4b85      	ldr	r3, [pc, #532]	@ (8010aa0 <ResetMacParameters+0x23c>)
 801088a:	2200      	movs	r2, #0
 801088c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8010890:	4b83      	ldr	r3, [pc, #524]	@ (8010aa0 <ResetMacParameters+0x23c>)
 8010892:	2200      	movs	r2, #0
 8010894:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8010898:	4b81      	ldr	r3, [pc, #516]	@ (8010aa0 <ResetMacParameters+0x23c>)
 801089a:	2200      	movs	r2, #0
 801089c:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80108a0:	4b7e      	ldr	r3, [pc, #504]	@ (8010a9c <ResetMacParameters+0x238>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80108a8:	4b7c      	ldr	r3, [pc, #496]	@ (8010a9c <ResetMacParameters+0x238>)
 80108aa:	2201      	movs	r2, #1
 80108ac:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80108b0:	4b7a      	ldr	r3, [pc, #488]	@ (8010a9c <ResetMacParameters+0x238>)
 80108b2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 80108b6:	4b79      	ldr	r3, [pc, #484]	@ (8010a9c <ResetMacParameters+0x238>)
 80108b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80108bc:	4b77      	ldr	r3, [pc, #476]	@ (8010a9c <ResetMacParameters+0x238>)
 80108be:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 80108c2:	4b76      	ldr	r3, [pc, #472]	@ (8010a9c <ResetMacParameters+0x238>)
 80108c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80108c8:	4b74      	ldr	r3, [pc, #464]	@ (8010a9c <ResetMacParameters+0x238>)
 80108ca:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 80108ce:	4b73      	ldr	r3, [pc, #460]	@ (8010a9c <ResetMacParameters+0x238>)
 80108d0:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80108d4:	4b71      	ldr	r3, [pc, #452]	@ (8010a9c <ResetMacParameters+0x238>)
 80108d6:	4a71      	ldr	r2, [pc, #452]	@ (8010a9c <ResetMacParameters+0x238>)
 80108d8:	336c      	adds	r3, #108	@ 0x6c
 80108da:	32b4      	adds	r2, #180	@ 0xb4
 80108dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108e0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80108e4:	4b6d      	ldr	r3, [pc, #436]	@ (8010a9c <ResetMacParameters+0x238>)
 80108e6:	4a6d      	ldr	r2, [pc, #436]	@ (8010a9c <ResetMacParameters+0x238>)
 80108e8:	3374      	adds	r3, #116	@ 0x74
 80108ea:	32bc      	adds	r2, #188	@ 0xbc
 80108ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108f0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80108f4:	4b69      	ldr	r3, [pc, #420]	@ (8010a9c <ResetMacParameters+0x238>)
 80108f6:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 80108fa:	4b68      	ldr	r3, [pc, #416]	@ (8010a9c <ResetMacParameters+0x238>)
 80108fc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010900:	4b66      	ldr	r3, [pc, #408]	@ (8010a9c <ResetMacParameters+0x238>)
 8010902:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 8010906:	4b65      	ldr	r3, [pc, #404]	@ (8010a9c <ResetMacParameters+0x238>)
 8010908:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801090c:	4b63      	ldr	r3, [pc, #396]	@ (8010a9c <ResetMacParameters+0x238>)
 801090e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010912:	4a62      	ldr	r2, [pc, #392]	@ (8010a9c <ResetMacParameters+0x238>)
 8010914:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010918:	4b60      	ldr	r3, [pc, #384]	@ (8010a9c <ResetMacParameters+0x238>)
 801091a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801091e:	4a5f      	ldr	r2, [pc, #380]	@ (8010a9c <ResetMacParameters+0x238>)
 8010920:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010924:	4b5d      	ldr	r3, [pc, #372]	@ (8010a9c <ResetMacParameters+0x238>)
 8010926:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 801092a:	4b5c      	ldr	r3, [pc, #368]	@ (8010a9c <ResetMacParameters+0x238>)
 801092c:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010930:	4b5a      	ldr	r3, [pc, #360]	@ (8010a9c <ResetMacParameters+0x238>)
 8010932:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8010936:	4b59      	ldr	r3, [pc, #356]	@ (8010a9c <ResetMacParameters+0x238>)
 8010938:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 801093c:	4b58      	ldr	r3, [pc, #352]	@ (8010aa0 <ResetMacParameters+0x23c>)
 801093e:	2200      	movs	r2, #0
 8010940:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8010944:	4b55      	ldr	r3, [pc, #340]	@ (8010a9c <ResetMacParameters+0x238>)
 8010946:	2200      	movs	r2, #0
 8010948:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801094c:	4b53      	ldr	r3, [pc, #332]	@ (8010a9c <ResetMacParameters+0x238>)
 801094e:	2200      	movs	r2, #0
 8010950:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8010954:	4b51      	ldr	r3, [pc, #324]	@ (8010a9c <ResetMacParameters+0x238>)
 8010956:	2200      	movs	r2, #0
 8010958:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 801095c:	4b4f      	ldr	r3, [pc, #316]	@ (8010a9c <ResetMacParameters+0x238>)
 801095e:	2200      	movs	r2, #0
 8010960:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8010964:	4b4d      	ldr	r3, [pc, #308]	@ (8010a9c <ResetMacParameters+0x238>)
 8010966:	2200      	movs	r2, #0
 8010968:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 801096c:	4b4b      	ldr	r3, [pc, #300]	@ (8010a9c <ResetMacParameters+0x238>)
 801096e:	2200      	movs	r2, #0
 8010970:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8010974:	4b49      	ldr	r3, [pc, #292]	@ (8010a9c <ResetMacParameters+0x238>)
 8010976:	2200      	movs	r2, #0
 8010978:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 801097c:	4b47      	ldr	r3, [pc, #284]	@ (8010a9c <ResetMacParameters+0x238>)
 801097e:	2200      	movs	r2, #0
 8010980:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8010984:	4b45      	ldr	r3, [pc, #276]	@ (8010a9c <ResetMacParameters+0x238>)
 8010986:	2200      	movs	r2, #0
 8010988:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 801098c:	4b43      	ldr	r3, [pc, #268]	@ (8010a9c <ResetMacParameters+0x238>)
 801098e:	2200      	movs	r2, #0
 8010990:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8010994:	4b41      	ldr	r3, [pc, #260]	@ (8010a9c <ResetMacParameters+0x238>)
 8010996:	2200      	movs	r2, #0
 8010998:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801099c:	2301      	movs	r3, #1
 801099e:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80109a0:	4b40      	ldr	r3, [pc, #256]	@ (8010aa4 <ResetMacParameters+0x240>)
 80109a2:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80109a4:	4b40      	ldr	r3, [pc, #256]	@ (8010aa8 <ResetMacParameters+0x244>)
 80109a6:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 80109a8:	4b40      	ldr	r3, [pc, #256]	@ (8010aac <ResetMacParameters+0x248>)
 80109aa:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80109ac:	4b3b      	ldr	r3, [pc, #236]	@ (8010a9c <ResetMacParameters+0x238>)
 80109ae:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80109b2:	f107 020c 	add.w	r2, r7, #12
 80109b6:	4611      	mov	r1, r2
 80109b8:	4618      	mov	r0, r3
 80109ba:	f004 fa54 	bl	8014e66 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80109be:	4b38      	ldr	r3, [pc, #224]	@ (8010aa0 <ResetMacParameters+0x23c>)
 80109c0:	2200      	movs	r2, #0
 80109c2:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80109c6:	4b36      	ldr	r3, [pc, #216]	@ (8010aa0 <ResetMacParameters+0x23c>)
 80109c8:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 80109cc:	4b34      	ldr	r3, [pc, #208]	@ (8010aa0 <ResetMacParameters+0x23c>)
 80109ce:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80109d2:	4b32      	ldr	r3, [pc, #200]	@ (8010a9c <ResetMacParameters+0x238>)
 80109d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109d6:	4a32      	ldr	r2, [pc, #200]	@ (8010aa0 <ResetMacParameters+0x23c>)
 80109d8:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80109dc:	4b2f      	ldr	r3, [pc, #188]	@ (8010a9c <ResetMacParameters+0x238>)
 80109de:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80109e2:	4b2f      	ldr	r3, [pc, #188]	@ (8010aa0 <ResetMacParameters+0x23c>)
 80109e4:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80109e8:	4b2c      	ldr	r3, [pc, #176]	@ (8010a9c <ResetMacParameters+0x238>)
 80109ea:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80109ee:	4b2c      	ldr	r3, [pc, #176]	@ (8010aa0 <ResetMacParameters+0x23c>)
 80109f0:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80109f4:	4b2a      	ldr	r3, [pc, #168]	@ (8010aa0 <ResetMacParameters+0x23c>)
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80109fc:	4b28      	ldr	r3, [pc, #160]	@ (8010aa0 <ResetMacParameters+0x23c>)
 80109fe:	2201      	movs	r2, #1
 8010a00:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010a04:	4b25      	ldr	r3, [pc, #148]	@ (8010a9c <ResetMacParameters+0x238>)
 8010a06:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010a0a:	4b25      	ldr	r3, [pc, #148]	@ (8010aa0 <ResetMacParameters+0x23c>)
 8010a0c:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010a10:	4a23      	ldr	r2, [pc, #140]	@ (8010aa0 <ResetMacParameters+0x23c>)
 8010a12:	4b23      	ldr	r3, [pc, #140]	@ (8010aa0 <ResetMacParameters+0x23c>)
 8010a14:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010a18:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a24:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010a28:	4b1d      	ldr	r3, [pc, #116]	@ (8010aa0 <ResetMacParameters+0x23c>)
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a30:	4b1b      	ldr	r3, [pc, #108]	@ (8010aa0 <ResetMacParameters+0x23c>)
 8010a32:	2202      	movs	r2, #2
 8010a34:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 8010a40:	4b17      	ldr	r3, [pc, #92]	@ (8010aa0 <ResetMacParameters+0x23c>)
 8010a42:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d009      	beq.n	8010a5e <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010a4a:	4b15      	ldr	r3, [pc, #84]	@ (8010aa0 <ResetMacParameters+0x23c>)
 8010a4c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010a54:	4b12      	ldr	r3, [pc, #72]	@ (8010aa0 <ResetMacParameters+0x23c>)
 8010a56:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010a5a:	695b      	ldr	r3, [r3, #20]
 8010a5c:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010a5e:	4b14      	ldr	r3, [pc, #80]	@ (8010ab0 <ResetMacParameters+0x24c>)
 8010a60:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010a62:	4b14      	ldr	r3, [pc, #80]	@ (8010ab4 <ResetMacParameters+0x250>)
 8010a64:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010a66:	4b14      	ldr	r3, [pc, #80]	@ (8010ab8 <ResetMacParameters+0x254>)
 8010a68:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010a6a:	4b14      	ldr	r3, [pc, #80]	@ (8010abc <ResetMacParameters+0x258>)
 8010a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010a6e:	4b14      	ldr	r3, [pc, #80]	@ (8010ac0 <ResetMacParameters+0x25c>)
 8010a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010a72:	4b14      	ldr	r3, [pc, #80]	@ (8010ac4 <ResetMacParameters+0x260>)
 8010a74:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010a76:	4b14      	ldr	r3, [pc, #80]	@ (8010ac8 <ResetMacParameters+0x264>)
 8010a78:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010a7a:	4b14      	ldr	r3, [pc, #80]	@ (8010acc <ResetMacParameters+0x268>)
 8010a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010a7e:	4b14      	ldr	r3, [pc, #80]	@ (8010ad0 <ResetMacParameters+0x26c>)
 8010a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010a82:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8010a86:	f107 031c 	add.w	r3, r7, #28
 8010a8a:	4a12      	ldr	r2, [pc, #72]	@ (8010ad4 <ResetMacParameters+0x270>)
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f002 f9f8 	bl	8012e82 <LoRaMacClassBInit>
}
 8010a92:	bf00      	nop
 8010a94:	3748      	adds	r7, #72	@ 0x48
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bdb0      	pop	{r4, r5, r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20000cd4 	.word	0x20000cd4
 8010aa0:	200007a0 	.word	0x200007a0
 8010aa4:	20000ef8 	.word	0x20000ef8
 8010aa8:	20000efc 	.word	0x20000efc
 8010aac:	2000184c 	.word	0x2000184c
 8010ab0:	20000c08 	.word	0x20000c08
 8010ab4:	20000bc0 	.word	0x20000bc0
 8010ab8:	20000bf4 	.word	0x20000bf4
 8010abc:	20000c31 	.word	0x20000c31
 8010ac0:	20000db8 	.word	0x20000db8
 8010ac4:	20000d1c 	.word	0x20000d1c
 8010ac8:	20000d20 	.word	0x20000d20
 8010acc:	20000dbc 	.word	0x20000dbc
 8010ad0:	20000e04 	.word	0x20000e04
 8010ad4:	20001278 	.word	0x20001278

08010ad8 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f00a fca8 	bl	801b438 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010ae8:	4b11      	ldr	r3, [pc, #68]	@ (8010b30 <RxWindowSetup+0x58>)
 8010aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aec:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010aee:	4b11      	ldr	r3, [pc, #68]	@ (8010b34 <RxWindowSetup+0x5c>)
 8010af0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010af4:	4a10      	ldr	r2, [pc, #64]	@ (8010b38 <RxWindowSetup+0x60>)
 8010af6:	6839      	ldr	r1, [r7, #0]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f004 fa1c 	bl	8014f36 <RegionRxConfig>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d010      	beq.n	8010b26 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010b04:	4b0d      	ldr	r3, [pc, #52]	@ (8010b3c <RxWindowSetup+0x64>)
 8010b06:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8010b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8010b3c <RxWindowSetup+0x64>)
 8010b0c:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010b10:	4b07      	ldr	r3, [pc, #28]	@ (8010b30 <RxWindowSetup+0x58>)
 8010b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b14:	4a07      	ldr	r2, [pc, #28]	@ (8010b34 <RxWindowSetup+0x5c>)
 8010b16:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8010b18:	4610      	mov	r0, r2
 8010b1a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	7cda      	ldrb	r2, [r3, #19]
 8010b20:	4b06      	ldr	r3, [pc, #24]	@ (8010b3c <RxWindowSetup+0x64>)
 8010b22:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8010b26:	bf00      	nop
 8010b28:	3708      	adds	r7, #8
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	0801c570 	.word	0x0801c570
 8010b34:	20000cd4 	.word	0x20000cd4
 8010b38:	20000bc4 	.word	0x20000bc4
 8010b3c:	200007a0 	.word	0x200007a0

08010b40 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010b40:	b590      	push	{r4, r7, lr}
 8010b42:	b083      	sub	sp, #12
 8010b44:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010b46:	4b1e      	ldr	r3, [pc, #120]	@ (8010bc0 <OpenContinuousRxCWindow+0x80>)
 8010b48:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8010bc0 <OpenContinuousRxCWindow+0x80>)
 8010b4e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010b52:	b259      	sxtb	r1, r3
 8010b54:	4b1a      	ldr	r3, [pc, #104]	@ (8010bc0 <OpenContinuousRxCWindow+0x80>)
 8010b56:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8010b5a:	4b19      	ldr	r3, [pc, #100]	@ (8010bc0 <OpenContinuousRxCWindow+0x80>)
 8010b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b5e:	4c19      	ldr	r4, [pc, #100]	@ (8010bc4 <OpenContinuousRxCWindow+0x84>)
 8010b60:	9400      	str	r4, [sp, #0]
 8010b62:	f004 f9ce 	bl	8014f02 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010b66:	4b18      	ldr	r3, [pc, #96]	@ (8010bc8 <OpenContinuousRxCWindow+0x88>)
 8010b68:	2202      	movs	r2, #2
 8010b6a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010b6e:	4b14      	ldr	r3, [pc, #80]	@ (8010bc0 <OpenContinuousRxCWindow+0x80>)
 8010b70:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010b74:	4b14      	ldr	r3, [pc, #80]	@ (8010bc8 <OpenContinuousRxCWindow+0x88>)
 8010b76:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010b7a:	4b13      	ldr	r3, [pc, #76]	@ (8010bc8 <OpenContinuousRxCWindow+0x88>)
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010b82:	4b0f      	ldr	r3, [pc, #60]	@ (8010bc0 <OpenContinuousRxCWindow+0x80>)
 8010b84:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010b88:	4a10      	ldr	r2, [pc, #64]	@ (8010bcc <OpenContinuousRxCWindow+0x8c>)
 8010b8a:	490e      	ldr	r1, [pc, #56]	@ (8010bc4 <OpenContinuousRxCWindow+0x84>)
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f004 f9d2 	bl	8014f36 <RegionRxConfig>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d00f      	beq.n	8010bb8 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010b98:	4b0b      	ldr	r3, [pc, #44]	@ (8010bc8 <OpenContinuousRxCWindow+0x88>)
 8010b9a:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8010b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8010bc8 <OpenContinuousRxCWindow+0x88>)
 8010ba0:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8010ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8010bd0 <OpenContinuousRxCWindow+0x90>)
 8010ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ba8:	2000      	movs	r0, #0
 8010baa:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010bac:	4b06      	ldr	r3, [pc, #24]	@ (8010bc8 <OpenContinuousRxCWindow+0x88>)
 8010bae:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8010bb2:	4b05      	ldr	r3, [pc, #20]	@ (8010bc8 <OpenContinuousRxCWindow+0x88>)
 8010bb4:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8010bb8:	bf00      	nop
 8010bba:	3704      	adds	r7, #4
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd90      	pop	{r4, r7, pc}
 8010bc0:	20000cd4 	.word	0x20000cd4
 8010bc4:	20000b88 	.word	0x20000b88
 8010bc8:	200007a0 	.word	0x200007a0
 8010bcc:	20000bc4 	.word	0x20000bc4
 8010bd0:	0801c570 	.word	0x0801c570

08010bd4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b088      	sub	sp, #32
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	603b      	str	r3, [r7, #0]
 8010be0:	4613      	mov	r3, r2
 8010be2:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010be4:	4b81      	ldr	r3, [pc, #516]	@ (8010dec <PrepareFrame+0x218>)
 8010be6:	2200      	movs	r2, #0
 8010be8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010bea:	4b80      	ldr	r3, [pc, #512]	@ (8010dec <PrepareFrame+0x218>)
 8010bec:	2200      	movs	r2, #0
 8010bee:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d101      	bne.n	8010c08 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010c04:	2300      	movs	r3, #0
 8010c06:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010c08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	6839      	ldr	r1, [r7, #0]
 8010c0e:	4878      	ldr	r0, [pc, #480]	@ (8010df0 <PrepareFrame+0x21c>)
 8010c10:	f006 faf9 	bl	8017206 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010c14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c16:	b2da      	uxtb	r2, r3
 8010c18:	4b74      	ldr	r3, [pc, #464]	@ (8010dec <PrepareFrame+0x218>)
 8010c1a:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	781a      	ldrb	r2, [r3, #0]
 8010c22:	4b72      	ldr	r3, [pc, #456]	@ (8010dec <PrepareFrame+0x218>)
 8010c24:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	2b07      	cmp	r3, #7
 8010c32:	f000 80b9 	beq.w	8010da8 <PrepareFrame+0x1d4>
 8010c36:	2b07      	cmp	r3, #7
 8010c38:	f300 80ce 	bgt.w	8010dd8 <PrepareFrame+0x204>
 8010c3c:	2b02      	cmp	r3, #2
 8010c3e:	d006      	beq.n	8010c4e <PrepareFrame+0x7a>
 8010c40:	2b04      	cmp	r3, #4
 8010c42:	f040 80c9 	bne.w	8010dd8 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010c46:	4b69      	ldr	r3, [pc, #420]	@ (8010dec <PrepareFrame+0x218>)
 8010c48:	2201      	movs	r2, #1
 8010c4a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010c4e:	4b67      	ldr	r3, [pc, #412]	@ (8010dec <PrepareFrame+0x218>)
 8010c50:	2204      	movs	r2, #4
 8010c52:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010c56:	4b65      	ldr	r3, [pc, #404]	@ (8010dec <PrepareFrame+0x218>)
 8010c58:	4a66      	ldr	r2, [pc, #408]	@ (8010df4 <PrepareFrame+0x220>)
 8010c5a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010c5e:	4b63      	ldr	r3, [pc, #396]	@ (8010dec <PrepareFrame+0x218>)
 8010c60:	22ff      	movs	r2, #255	@ 0xff
 8010c62:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	781a      	ldrb	r2, [r3, #0]
 8010c6a:	4b60      	ldr	r3, [pc, #384]	@ (8010dec <PrepareFrame+0x218>)
 8010c6c:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010c70:	4a5e      	ldr	r2, [pc, #376]	@ (8010dec <PrepareFrame+0x218>)
 8010c72:	79fb      	ldrb	r3, [r7, #7]
 8010c74:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010c78:	4b5f      	ldr	r3, [pc, #380]	@ (8010df8 <PrepareFrame+0x224>)
 8010c7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8010dec <PrepareFrame+0x218>)
 8010c80:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	781a      	ldrb	r2, [r3, #0]
 8010c88:	4b58      	ldr	r3, [pc, #352]	@ (8010dec <PrepareFrame+0x218>)
 8010c8a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010c8e:	4b57      	ldr	r3, [pc, #348]	@ (8010dec <PrepareFrame+0x218>)
 8010c90:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010c94:	4b55      	ldr	r3, [pc, #340]	@ (8010dec <PrepareFrame+0x218>)
 8010c96:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010c9a:	4b54      	ldr	r3, [pc, #336]	@ (8010dec <PrepareFrame+0x218>)
 8010c9c:	4a54      	ldr	r2, [pc, #336]	@ (8010df0 <PrepareFrame+0x21c>)
 8010c9e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010ca2:	f107 0318 	add.w	r3, r7, #24
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f003 fa3a 	bl	8014120 <LoRaMacCryptoGetFCntUp>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d001      	beq.n	8010cb6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010cb2:	2312      	movs	r3, #18
 8010cb4:	e096      	b.n	8010de4 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010cb6:	69bb      	ldr	r3, [r7, #24]
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	4b4c      	ldr	r3, [pc, #304]	@ (8010dec <PrepareFrame+0x218>)
 8010cbc:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8010cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8010dec <PrepareFrame+0x218>)
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010cc8:	4b48      	ldr	r3, [pc, #288]	@ (8010dec <PrepareFrame+0x218>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010cd0:	69bb      	ldr	r3, [r7, #24]
 8010cd2:	4a46      	ldr	r2, [pc, #280]	@ (8010dec <PrepareFrame+0x218>)
 8010cd4:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010cd8:	f107 0314 	add.w	r3, r7, #20
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f002 fbef 	bl	80134c0 <LoRaMacCommandsGetSizeSerializedCmds>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d001      	beq.n	8010cec <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010ce8:	2313      	movs	r3, #19
 8010cea:	e07b      	b.n	8010de4 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d074      	beq.n	8010ddc <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010cf2:	4b41      	ldr	r3, [pc, #260]	@ (8010df8 <PrepareFrame+0x224>)
 8010cf4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7fe fd13 	bl	800f724 <GetMaxAppPayloadWithoutFOptsLength>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010d02:	4b3a      	ldr	r3, [pc, #232]	@ (8010dec <PrepareFrame+0x218>)
 8010d04:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d01d      	beq.n	8010d48 <PrepareFrame+0x174>
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	2b0f      	cmp	r3, #15
 8010d10:	d81a      	bhi.n	8010d48 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010d12:	f107 0314 	add.w	r3, r7, #20
 8010d16:	4a39      	ldr	r2, [pc, #228]	@ (8010dfc <PrepareFrame+0x228>)
 8010d18:	4619      	mov	r1, r3
 8010d1a:	200f      	movs	r0, #15
 8010d1c:	f002 fbe6 	bl	80134ec <LoRaMacCommandsSerializeCmds>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d001      	beq.n	8010d2a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d26:	2313      	movs	r3, #19
 8010d28:	e05c      	b.n	8010de4 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	f003 030f 	and.w	r3, r3, #15
 8010d30:	b2d9      	uxtb	r1, r3
 8010d32:	68ba      	ldr	r2, [r7, #8]
 8010d34:	7813      	ldrb	r3, [r2, #0]
 8010d36:	f361 0303 	bfi	r3, r1, #0, #4
 8010d3a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	781a      	ldrb	r2, [r3, #0]
 8010d40:	4b2a      	ldr	r3, [pc, #168]	@ (8010dec <PrepareFrame+0x218>)
 8010d42:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010d46:	e049      	b.n	8010ddc <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010d48:	4b28      	ldr	r3, [pc, #160]	@ (8010dec <PrepareFrame+0x218>)
 8010d4a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d010      	beq.n	8010d74 <PrepareFrame+0x1a0>
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	2b0f      	cmp	r3, #15
 8010d56:	d90d      	bls.n	8010d74 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010d58:	7ffb      	ldrb	r3, [r7, #31]
 8010d5a:	f107 0114 	add.w	r1, r7, #20
 8010d5e:	4a28      	ldr	r2, [pc, #160]	@ (8010e00 <PrepareFrame+0x22c>)
 8010d60:	4618      	mov	r0, r3
 8010d62:	f002 fbc3 	bl	80134ec <LoRaMacCommandsSerializeCmds>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d001      	beq.n	8010d70 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d6c:	2313      	movs	r3, #19
 8010d6e:	e039      	b.n	8010de4 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010d70:	230a      	movs	r3, #10
 8010d72:	e037      	b.n	8010de4 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010d74:	7ffb      	ldrb	r3, [r7, #31]
 8010d76:	f107 0114 	add.w	r1, r7, #20
 8010d7a:	4a21      	ldr	r2, [pc, #132]	@ (8010e00 <PrepareFrame+0x22c>)
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f002 fbb5 	bl	80134ec <LoRaMacCommandsSerializeCmds>
 8010d82:	4603      	mov	r3, r0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d001      	beq.n	8010d8c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d88:	2313      	movs	r3, #19
 8010d8a:	e02b      	b.n	8010de4 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010d8c:	4b17      	ldr	r3, [pc, #92]	@ (8010dec <PrepareFrame+0x218>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010d94:	4b15      	ldr	r3, [pc, #84]	@ (8010dec <PrepareFrame+0x218>)
 8010d96:	4a1a      	ldr	r2, [pc, #104]	@ (8010e00 <PrepareFrame+0x22c>)
 8010d98:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	b2da      	uxtb	r2, r3
 8010da0:	4b12      	ldr	r3, [pc, #72]	@ (8010dec <PrepareFrame+0x218>)
 8010da2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8010da6:	e019      	b.n	8010ddc <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d018      	beq.n	8010de0 <PrepareFrame+0x20c>
 8010dae:	4b0f      	ldr	r3, [pc, #60]	@ (8010dec <PrepareFrame+0x218>)
 8010db0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d013      	beq.n	8010de0 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010db8:	4812      	ldr	r0, [pc, #72]	@ (8010e04 <PrepareFrame+0x230>)
 8010dba:	4b0c      	ldr	r3, [pc, #48]	@ (8010dec <PrepareFrame+0x218>)
 8010dbc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	6839      	ldr	r1, [r7, #0]
 8010dc4:	f006 fa1f 	bl	8017206 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010dc8:	4b08      	ldr	r3, [pc, #32]	@ (8010dec <PrepareFrame+0x218>)
 8010dca:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010dce:	3301      	adds	r3, #1
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	4b06      	ldr	r3, [pc, #24]	@ (8010dec <PrepareFrame+0x218>)
 8010dd4:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010dd6:	e003      	b.n	8010de0 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010dd8:	2302      	movs	r3, #2
 8010dda:	e003      	b.n	8010de4 <PrepareFrame+0x210>
            break;
 8010ddc:	bf00      	nop
 8010dde:	e000      	b.n	8010de2 <PrepareFrame+0x20e>
            break;
 8010de0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3720      	adds	r7, #32
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	200007a0 	.word	0x200007a0
 8010df0:	200008d8 	.word	0x200008d8
 8010df4:	200007a2 	.word	0x200007a2
 8010df8:	20000cd4 	.word	0x20000cd4
 8010dfc:	200008b8 	.word	0x200008b8
 8010e00:	20000c54 	.word	0x20000c54
 8010e04:	200007a3 	.word	0x200007a3

08010e08 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08a      	sub	sp, #40	@ 0x28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	4603      	mov	r3, r0
 8010e10:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e12:	2303      	movs	r3, #3
 8010e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010e1c:	79fb      	ldrb	r3, [r7, #7]
 8010e1e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010e20:	4b4b      	ldr	r3, [pc, #300]	@ (8010f50 <SendFrameOnChannel+0x148>)
 8010e22:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010e26:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010e28:	4b49      	ldr	r3, [pc, #292]	@ (8010f50 <SendFrameOnChannel+0x148>)
 8010e2a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010e2e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010e30:	4b47      	ldr	r3, [pc, #284]	@ (8010f50 <SendFrameOnChannel+0x148>)
 8010e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e36:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010e38:	4b45      	ldr	r3, [pc, #276]	@ (8010f50 <SendFrameOnChannel+0x148>)
 8010e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e3e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010e40:	4b44      	ldr	r3, [pc, #272]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010e42:	881b      	ldrh	r3, [r3, #0]
 8010e44:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010e46:	4b42      	ldr	r3, [pc, #264]	@ (8010f50 <SendFrameOnChannel+0x148>)
 8010e48:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8010e4c:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010e4e:	4b40      	ldr	r3, [pc, #256]	@ (8010f50 <SendFrameOnChannel+0x148>)
 8010e50:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8010e54:	f107 020f 	add.w	r2, r7, #15
 8010e58:	f107 0110 	add.w	r1, r7, #16
 8010e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8010f58 <SendFrameOnChannel+0x150>)
 8010e5e:	f004 f87f 	bl	8014f60 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e62:	4b3c      	ldr	r3, [pc, #240]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010e64:	2201      	movs	r2, #1
 8010e66:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010e6a:	4b39      	ldr	r3, [pc, #228]	@ (8010f50 <SendFrameOnChannel+0x148>)
 8010e6c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	4b38      	ldr	r3, [pc, #224]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010e74:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8010e78:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010e7c:	4b35      	ldr	r3, [pc, #212]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010e7e:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	4a33      	ldr	r2, [pc, #204]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010e86:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010e8a:	4b32      	ldr	r3, [pc, #200]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010e8c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8010e90:	4a30      	ldr	r2, [pc, #192]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010e92:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010e96:	4b2f      	ldr	r3, [pc, #188]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010e98:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8010e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010e9e:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010ea2:	f002 f85a 	bl	8012f5a <LoRaMacClassBIsBeaconModeActive>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d00b      	beq.n	8010ec4 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010eac:	4b29      	ldr	r3, [pc, #164]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010eae:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f002 f8bc 	bl	8013030 <LoRaMacClassBIsUplinkCollision>
 8010eb8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010eba:	6a3b      	ldr	r3, [r7, #32]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010ec0:	2310      	movs	r3, #16
 8010ec2:	e040      	b.n	8010f46 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010ec4:	4b22      	ldr	r3, [pc, #136]	@ (8010f50 <SendFrameOnChannel+0x148>)
 8010ec6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010eca:	2b01      	cmp	r3, #1
 8010ecc:	d101      	bne.n	8010ed2 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010ece:	f002 f8b9 	bl	8013044 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010ed2:	f002 f853 	bl	8012f7c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8010f50 <SendFrameOnChannel+0x148>)
 8010ed8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	4a1d      	ldr	r2, [pc, #116]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010ee0:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8010ee4:	4611      	mov	r1, r2
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7ff fc2c 	bl	8010744 <SecureFrame>
 8010eec:	4603      	mov	r3, r0
 8010eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8010ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d002      	beq.n	8010f00 <SendFrameOnChannel+0xf8>
    {
        return status;
 8010efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010efe:	e022      	b.n	8010f46 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010f00:	4b14      	ldr	r3, [pc, #80]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010f02:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f06:	f043 0302 	orr.w	r3, r3, #2
 8010f0a:	4a12      	ldr	r2, [pc, #72]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010f0c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8010f10:	4b10      	ldr	r3, [pc, #64]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010f12:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010f16:	3301      	adds	r3, #1
 8010f18:	b2da      	uxtb	r2, r3
 8010f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010f1c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010f20:	4b0c      	ldr	r3, [pc, #48]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010f22:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010f26:	4b0b      	ldr	r3, [pc, #44]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010f28:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8010f2c:	4b09      	ldr	r3, [pc, #36]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010f34:	4b09      	ldr	r3, [pc, #36]	@ (8010f5c <SendFrameOnChannel+0x154>)
 8010f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f38:	4a06      	ldr	r2, [pc, #24]	@ (8010f54 <SendFrameOnChannel+0x14c>)
 8010f3a:	8812      	ldrh	r2, [r2, #0]
 8010f3c:	b2d2      	uxtb	r2, r2
 8010f3e:	4611      	mov	r1, r2
 8010f40:	4807      	ldr	r0, [pc, #28]	@ (8010f60 <SendFrameOnChannel+0x158>)
 8010f42:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3728      	adds	r7, #40	@ 0x28
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	20000cd4 	.word	0x20000cd4
 8010f54:	200007a0 	.word	0x200007a0
 8010f58:	20000bbc 	.word	0x20000bbc
 8010f5c:	0801c570 	.word	0x0801c570
 8010f60:	200007a2 	.word	0x200007a2

08010f64 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	6039      	str	r1, [r7, #0]
 8010f6e:	80fb      	strh	r3, [r7, #6]
 8010f70:	4613      	mov	r3, r2
 8010f72:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010f74:	4b09      	ldr	r3, [pc, #36]	@ (8010f9c <SetTxContinuousWave+0x38>)
 8010f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f78:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010f7c:	88fa      	ldrh	r2, [r7, #6]
 8010f7e:	6838      	ldr	r0, [r7, #0]
 8010f80:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010f82:	4b07      	ldr	r3, [pc, #28]	@ (8010fa0 <SetTxContinuousWave+0x3c>)
 8010f84:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f88:	f043 0302 	orr.w	r3, r3, #2
 8010f8c:	4a04      	ldr	r2, [pc, #16]	@ (8010fa0 <SetTxContinuousWave+0x3c>)
 8010f8e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010f92:	2300      	movs	r3, #0
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	0801c570 	.word	0x0801c570
 8010fa0:	200007a0 	.word	0x200007a0

08010fa4 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010fae:	4b49      	ldr	r3, [pc, #292]	@ (80110d4 <RestoreNvmData+0x130>)
 8010fb0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d001      	beq.n	8010fbc <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	e087      	b.n	80110cc <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010fbc:	2124      	movs	r1, #36	@ 0x24
 8010fbe:	4846      	ldr	r0, [pc, #280]	@ (80110d8 <RestoreNvmData+0x134>)
 8010fc0:	f006 f976 	bl	80172b0 <Crc32>
 8010fc4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010fc6:	4b44      	ldr	r3, [pc, #272]	@ (80110d8 <RestoreNvmData+0x134>)
 8010fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d001      	beq.n	8010fd4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010fd0:	2317      	movs	r3, #23
 8010fd2:	e07b      	b.n	80110cc <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010fd4:	211c      	movs	r1, #28
 8010fd6:	4841      	ldr	r0, [pc, #260]	@ (80110dc <RestoreNvmData+0x138>)
 8010fd8:	f006 f96a 	bl	80172b0 <Crc32>
 8010fdc:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010fde:	4b3e      	ldr	r3, [pc, #248]	@ (80110d8 <RestoreNvmData+0x134>)
 8010fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d001      	beq.n	8010fec <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010fe8:	2317      	movs	r3, #23
 8010fea:	e06f      	b.n	80110cc <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010fec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010ff0:	483b      	ldr	r0, [pc, #236]	@ (80110e0 <RestoreNvmData+0x13c>)
 8010ff2:	f006 f95d 	bl	80172b0 <Crc32>
 8010ff6:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010ff8:	4b37      	ldr	r3, [pc, #220]	@ (80110d8 <RestoreNvmData+0x134>)
 8010ffa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	429a      	cmp	r2, r3
 8011002:	d001      	beq.n	8011008 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011004:	2317      	movs	r3, #23
 8011006:	e061      	b.n	80110cc <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8011008:	21d4      	movs	r1, #212	@ 0xd4
 801100a:	4836      	ldr	r0, [pc, #216]	@ (80110e4 <RestoreNvmData+0x140>)
 801100c:	f006 f950 	bl	80172b0 <Crc32>
 8011010:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011012:	4b31      	ldr	r3, [pc, #196]	@ (80110d8 <RestoreNvmData+0x134>)
 8011014:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	429a      	cmp	r2, r3
 801101c:	d001      	beq.n	8011022 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801101e:	2317      	movs	r3, #23
 8011020:	e054      	b.n	80110cc <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8011022:	2100      	movs	r1, #0
 8011024:	4830      	ldr	r0, [pc, #192]	@ (80110e8 <RestoreNvmData+0x144>)
 8011026:	f006 f943 	bl	80172b0 <Crc32>
 801102a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801102c:	4b2a      	ldr	r3, [pc, #168]	@ (80110d8 <RestoreNvmData+0x134>)
 801102e:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	429a      	cmp	r2, r3
 8011036:	d001      	beq.n	801103c <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011038:	2317      	movs	r3, #23
 801103a:	e047      	b.n	80110cc <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 801103c:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8011040:	482a      	ldr	r0, [pc, #168]	@ (80110ec <RestoreNvmData+0x148>)
 8011042:	f006 f935 	bl	80172b0 <Crc32>
 8011046:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8011048:	4b23      	ldr	r3, [pc, #140]	@ (80110d8 <RestoreNvmData+0x134>)
 801104a:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	429a      	cmp	r2, r3
 8011052:	d001      	beq.n	8011058 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011054:	2317      	movs	r3, #23
 8011056:	e039      	b.n	80110cc <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8011058:	2114      	movs	r1, #20
 801105a:	4825      	ldr	r0, [pc, #148]	@ (80110f0 <RestoreNvmData+0x14c>)
 801105c:	f006 f928 	bl	80172b0 <Crc32>
 8011060:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8011062:	4b1d      	ldr	r3, [pc, #116]	@ (80110d8 <RestoreNvmData+0x134>)
 8011064:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	429a      	cmp	r2, r3
 801106c:	d001      	beq.n	8011072 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801106e:	2317      	movs	r3, #23
 8011070:	e02c      	b.n	80110cc <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8011072:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8011076:	4918      	ldr	r1, [pc, #96]	@ (80110d8 <RestoreNvmData+0x134>)
 8011078:	481e      	ldr	r0, [pc, #120]	@ (80110f4 <RestoreNvmData+0x150>)
 801107a:	f006 f8c4 	bl	8017206 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 801107e:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8011082:	2100      	movs	r1, #0
 8011084:	4814      	ldr	r0, [pc, #80]	@ (80110d8 <RestoreNvmData+0x134>)
 8011086:	f006 f8f9 	bl	801727c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801108a:	4b12      	ldr	r3, [pc, #72]	@ (80110d4 <RestoreNvmData+0x130>)
 801108c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8011090:	4b10      	ldr	r3, [pc, #64]	@ (80110d4 <RestoreNvmData+0x130>)
 8011092:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011096:	4b17      	ldr	r3, [pc, #92]	@ (80110f4 <RestoreNvmData+0x150>)
 8011098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801109a:	4a0e      	ldr	r2, [pc, #56]	@ (80110d4 <RestoreNvmData+0x130>)
 801109c:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80110a0:	4b14      	ldr	r3, [pc, #80]	@ (80110f4 <RestoreNvmData+0x150>)
 80110a2:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80110a6:	4b0b      	ldr	r3, [pc, #44]	@ (80110d4 <RestoreNvmData+0x130>)
 80110a8:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80110ac:	4b09      	ldr	r3, [pc, #36]	@ (80110d4 <RestoreNvmData+0x130>)
 80110ae:	2201      	movs	r2, #1
 80110b0:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80110b4:	4b07      	ldr	r3, [pc, #28]	@ (80110d4 <RestoreNvmData+0x130>)
 80110b6:	2202      	movs	r2, #2
 80110b8:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80110bc:	4b0e      	ldr	r3, [pc, #56]	@ (80110f8 <RestoreNvmData+0x154>)
 80110be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110c0:	4a0c      	ldr	r2, [pc, #48]	@ (80110f4 <RestoreNvmData+0x150>)
 80110c2:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80110c6:	4610      	mov	r0, r2
 80110c8:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80110ca:	2300      	movs	r3, #0
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	200007a0 	.word	0x200007a0
 80110d8:	20001290 	.word	0x20001290
 80110dc:	200012b8 	.word	0x200012b8
 80110e0:	200012d8 	.word	0x200012d8
 80110e4:	200013dc 	.word	0x200013dc
 80110e8:	200014b4 	.word	0x200014b4
 80110ec:	200014b8 	.word	0x200014b8
 80110f0:	20001834 	.word	0x20001834
 80110f4:	20000cd4 	.word	0x20000cd4
 80110f8:	0801c570 	.word	0x0801c570

080110fc <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d002      	beq.n	8011112 <DetermineFrameType+0x16>
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d101      	bne.n	8011116 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011112:	2303      	movs	r3, #3
 8011114:	e03b      	b.n	801118e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	7b1b      	ldrb	r3, [r3, #12]
 801111a:	f003 030f 	and.w	r3, r3, #15
 801111e:	b2db      	uxtb	r3, r3
 8011120:	2b00      	cmp	r3, #0
 8011122:	d008      	beq.n	8011136 <DetermineFrameType+0x3a>
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f893 3020 	ldrb.w	r3, [r3, #32]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d003      	beq.n	8011136 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	2200      	movs	r2, #0
 8011132:	701a      	strb	r2, [r3, #0]
 8011134:	e02a      	b.n	801118c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801113c:	2b00      	cmp	r3, #0
 801113e:	d103      	bne.n	8011148 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	2201      	movs	r2, #1
 8011144:	701a      	strb	r2, [r3, #0]
 8011146:	e021      	b.n	801118c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	7b1b      	ldrb	r3, [r3, #12]
 801114c:	f003 030f 	and.w	r3, r3, #15
 8011150:	b2db      	uxtb	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	d108      	bne.n	8011168 <DetermineFrameType+0x6c>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f893 3020 	ldrb.w	r3, [r3, #32]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d103      	bne.n	8011168 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	2202      	movs	r2, #2
 8011164:	701a      	strb	r2, [r3, #0]
 8011166:	e011      	b.n	801118c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	7b1b      	ldrb	r3, [r3, #12]
 801116c:	f003 030f 	and.w	r3, r3, #15
 8011170:	b2db      	uxtb	r3, r3
 8011172:	2b00      	cmp	r3, #0
 8011174:	d108      	bne.n	8011188 <DetermineFrameType+0x8c>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f893 3020 	ldrb.w	r3, [r3, #32]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d003      	beq.n	8011188 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	2203      	movs	r2, #3
 8011184:	701a      	strb	r2, [r3, #0]
 8011186:	e001      	b.n	801118c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011188:	2318      	movs	r3, #24
 801118a:	e000      	b.n	801118e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	370c      	adds	r7, #12
 8011192:	46bd      	mov	sp, r7
 8011194:	bc80      	pop	{r7}
 8011196:	4770      	bx	lr

08011198 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	4603      	mov	r3, r0
 80111a0:	460a      	mov	r2, r1
 80111a2:	71fb      	strb	r3, [r7, #7]
 80111a4:	4613      	mov	r3, r2
 80111a6:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 80111a8:	79fa      	ldrb	r2, [r7, #7]
 80111aa:	79bb      	ldrb	r3, [r7, #6]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d301      	bcc.n	80111b4 <CheckRetrans+0x1c>
    {
        return true;
 80111b0:	2301      	movs	r3, #1
 80111b2:	e000      	b.n	80111b6 <CheckRetrans+0x1e>
    }
    return false;
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	370c      	adds	r7, #12
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bc80      	pop	{r7}
 80111be:	4770      	bx	lr

080111c0 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80111c4:	4b12      	ldr	r3, [pc, #72]	@ (8011210 <CheckRetransUnconfirmedUplink+0x50>)
 80111c6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80111ca:	4a12      	ldr	r2, [pc, #72]	@ (8011214 <CheckRetransUnconfirmedUplink+0x54>)
 80111cc:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80111d0:	4611      	mov	r1, r2
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ff ffe0 	bl	8011198 <CheckRetrans>
 80111d8:	4603      	mov	r3, r0
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d001      	beq.n	80111e2 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80111de:	2301      	movs	r3, #1
 80111e0:	e014      	b.n	801120c <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80111e2:	4b0b      	ldr	r3, [pc, #44]	@ (8011210 <CheckRetransUnconfirmedUplink+0x50>)
 80111e4:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80111e8:	f003 0302 	and.w	r3, r3, #2
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00b      	beq.n	801120a <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80111f2:	4b07      	ldr	r3, [pc, #28]	@ (8011210 <CheckRetransUnconfirmedUplink+0x50>)
 80111f4:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d004      	beq.n	8011206 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80111fc:	4b04      	ldr	r3, [pc, #16]	@ (8011210 <CheckRetransUnconfirmedUplink+0x50>)
 80111fe:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011202:	2b01      	cmp	r3, #1
 8011204:	d101      	bne.n	801120a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8011206:	2301      	movs	r3, #1
 8011208:	e000      	b.n	801120c <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801120a:	2300      	movs	r3, #0
}
 801120c:	4618      	mov	r0, r3
 801120e:	bd80      	pop	{r7, pc}
 8011210:	200007a0 	.word	0x200007a0
 8011214:	20000cd4 	.word	0x20000cd4

08011218 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801121c:	4b10      	ldr	r3, [pc, #64]	@ (8011260 <CheckRetransConfirmedUplink+0x48>)
 801121e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8011222:	4a10      	ldr	r2, [pc, #64]	@ (8011264 <CheckRetransConfirmedUplink+0x4c>)
 8011224:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8011228:	4611      	mov	r1, r2
 801122a:	4618      	mov	r0, r3
 801122c:	f7ff ffb4 	bl	8011198 <CheckRetrans>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d001      	beq.n	801123a <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011236:	2301      	movs	r3, #1
 8011238:	e00f      	b.n	801125a <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801123a:	4b09      	ldr	r3, [pc, #36]	@ (8011260 <CheckRetransConfirmedUplink+0x48>)
 801123c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8011240:	f003 0302 	and.w	r3, r3, #2
 8011244:	b2db      	uxtb	r3, r3
 8011246:	2b00      	cmp	r3, #0
 8011248:	d006      	beq.n	8011258 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801124a:	4b05      	ldr	r3, [pc, #20]	@ (8011260 <CheckRetransConfirmedUplink+0x48>)
 801124c:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8011254:	2301      	movs	r3, #1
 8011256:	e000      	b.n	801125a <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011258:	2300      	movs	r3, #0
}
 801125a:	4618      	mov	r0, r3
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	200007a0 	.word	0x200007a0
 8011264:	20000cd4 	.word	0x20000cd4

08011268 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011276:	d002      	beq.n	801127e <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	3301      	adds	r3, #1
 801127c:	607b      	str	r3, [r7, #4]
    }
    return counter;
 801127e:	687b      	ldr	r3, [r7, #4]
}
 8011280:	4618      	mov	r0, r3
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	bc80      	pop	{r7}
 8011288:	4770      	bx	lr
	...

0801128c <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 801128c:	b580      	push	{r7, lr}
 801128e:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011290:	4b1a      	ldr	r3, [pc, #104]	@ (80112fc <StopRetransmission+0x70>)
 8011292:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8011296:	f003 0302 	and.w	r3, r3, #2
 801129a:	b2db      	uxtb	r3, r3
 801129c:	2b00      	cmp	r3, #0
 801129e:	d009      	beq.n	80112b4 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80112a0:	4b16      	ldr	r3, [pc, #88]	@ (80112fc <StopRetransmission+0x70>)
 80112a2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d011      	beq.n	80112ce <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80112aa:	4b14      	ldr	r3, [pc, #80]	@ (80112fc <StopRetransmission+0x70>)
 80112ac:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d00c      	beq.n	80112ce <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80112b4:	4b12      	ldr	r3, [pc, #72]	@ (8011300 <StopRetransmission+0x74>)
 80112b6:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d007      	beq.n	80112ce <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80112be:	4b10      	ldr	r3, [pc, #64]	@ (8011300 <StopRetransmission+0x74>)
 80112c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7ff ffd0 	bl	8011268 <IncreaseAdrAckCounter>
 80112c8:	4603      	mov	r3, r0
 80112ca:	4a0d      	ldr	r2, [pc, #52]	@ (8011300 <StopRetransmission+0x74>)
 80112cc:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80112ce:	4b0b      	ldr	r3, [pc, #44]	@ (80112fc <StopRetransmission+0x70>)
 80112d0:	2200      	movs	r2, #0
 80112d2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 80112d6:	4b09      	ldr	r3, [pc, #36]	@ (80112fc <StopRetransmission+0x70>)
 80112d8:	2200      	movs	r2, #0
 80112da:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80112de:	4b07      	ldr	r3, [pc, #28]	@ (80112fc <StopRetransmission+0x70>)
 80112e0:	2200      	movs	r2, #0
 80112e2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80112e6:	4b05      	ldr	r3, [pc, #20]	@ (80112fc <StopRetransmission+0x70>)
 80112e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80112ec:	f023 0302 	bic.w	r3, r3, #2
 80112f0:	4a02      	ldr	r2, [pc, #8]	@ (80112fc <StopRetransmission+0x70>)
 80112f2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 80112f6:	2301      	movs	r3, #1
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	200007a0 	.word	0x200007a0
 8011300:	20000cd4 	.word	0x20000cd4

08011304 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8011308:	4b08      	ldr	r3, [pc, #32]	@ (801132c <OnMacProcessNotify+0x28>)
 801130a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801130e:	2b00      	cmp	r3, #0
 8011310:	d00a      	beq.n	8011328 <OnMacProcessNotify+0x24>
 8011312:	4b06      	ldr	r3, [pc, #24]	@ (801132c <OnMacProcessNotify+0x28>)
 8011314:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011318:	695b      	ldr	r3, [r3, #20]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d004      	beq.n	8011328 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801131e:	4b03      	ldr	r3, [pc, #12]	@ (801132c <OnMacProcessNotify+0x28>)
 8011320:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011324:	695b      	ldr	r3, [r3, #20]
 8011326:	4798      	blx	r3
    }
}
 8011328:	bf00      	nop
 801132a:	bd80      	pop	{r7, pc}
 801132c:	200007a0 	.word	0x200007a0

08011330 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	4603      	mov	r3, r0
 8011338:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801133a:	4b0b      	ldr	r3, [pc, #44]	@ (8011368 <CallNvmDataChangeCallback+0x38>)
 801133c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011340:	2b00      	cmp	r3, #0
 8011342:	d00c      	beq.n	801135e <CallNvmDataChangeCallback+0x2e>
 8011344:	4b08      	ldr	r3, [pc, #32]	@ (8011368 <CallNvmDataChangeCallback+0x38>)
 8011346:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801134a:	691b      	ldr	r3, [r3, #16]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d006      	beq.n	801135e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011350:	4b05      	ldr	r3, [pc, #20]	@ (8011368 <CallNvmDataChangeCallback+0x38>)
 8011352:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011356:	691b      	ldr	r3, [r3, #16]
 8011358:	88fa      	ldrh	r2, [r7, #6]
 801135a:	4610      	mov	r0, r2
 801135c:	4798      	blx	r3
    }
}
 801135e:	bf00      	nop
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	200007a0 	.word	0x200007a0

0801136c <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 801136c:	b480      	push	{r7}
 801136e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011370:	4b0b      	ldr	r3, [pc, #44]	@ (80113a0 <IsRequestPending+0x34>)
 8011372:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8011376:	f003 0304 	and.w	r3, r3, #4
 801137a:	b2db      	uxtb	r3, r3
 801137c:	2b00      	cmp	r3, #0
 801137e:	d107      	bne.n	8011390 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011380:	4b07      	ldr	r3, [pc, #28]	@ (80113a0 <IsRequestPending+0x34>)
 8011382:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8011386:	f003 0301 	and.w	r3, r3, #1
 801138a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801138c:	2b00      	cmp	r3, #0
 801138e:	d001      	beq.n	8011394 <IsRequestPending+0x28>
    {
        return 1;
 8011390:	2301      	movs	r3, #1
 8011392:	e000      	b.n	8011396 <IsRequestPending+0x2a>
    }
    return 0;
 8011394:	2300      	movs	r3, #0
}
 8011396:	4618      	mov	r0, r3
 8011398:	46bd      	mov	sp, r7
 801139a:	bc80      	pop	{r7}
 801139c:	4770      	bx	lr
 801139e:	bf00      	nop
 80113a0:	200007a0 	.word	0x200007a0

080113a4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80113a4:	b590      	push	{r4, r7, lr}
 80113a6:	b091      	sub	sp, #68	@ 0x44
 80113a8:	af02      	add	r7, sp, #8
 80113aa:	6178      	str	r0, [r7, #20]
 80113ac:	6139      	str	r1, [r7, #16]
 80113ae:	4613      	mov	r3, r2
 80113b0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d002      	beq.n	80113be <LoRaMacInitialization+0x1a>
 80113b8:	693b      	ldr	r3, [r7, #16]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d101      	bne.n	80113c2 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80113be:	2303      	movs	r3, #3
 80113c0:	e27a      	b.n	80118b8 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d00b      	beq.n	80113e2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d007      	beq.n	80113e2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d003      	beq.n	80113e2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d101      	bne.n	80113e6 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80113e2:	2303      	movs	r3, #3
 80113e4:	e268      	b.n	80118b8 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80113e6:	7bfb      	ldrb	r3, [r7, #15]
 80113e8:	4618      	mov	r0, r3
 80113ea:	f003 fd03 	bl	8014df4 <RegionIsActive>
 80113ee:	4603      	mov	r3, r0
 80113f0:	f083 0301 	eor.w	r3, r3, #1
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d001      	beq.n	80113fe <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80113fa:	2309      	movs	r3, #9
 80113fc:	e25c      	b.n	80118b8 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80113fe:	6978      	ldr	r0, [r7, #20]
 8011400:	f002 f996 	bl	8013730 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011404:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8011408:	2100      	movs	r1, #0
 801140a:	48c7      	ldr	r0, [pc, #796]	@ (8011728 <LoRaMacInitialization+0x384>)
 801140c:	f005 ff36 	bl	801727c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011410:	f240 5234 	movw	r2, #1332	@ 0x534
 8011414:	2100      	movs	r1, #0
 8011416:	48c5      	ldr	r0, [pc, #788]	@ (801172c <LoRaMacInitialization+0x388>)
 8011418:	f005 ff30 	bl	801727c <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 801141c:	4ac2      	ldr	r2, [pc, #776]	@ (8011728 <LoRaMacInitialization+0x384>)
 801141e:	7bfb      	ldrb	r3, [r7, #15]
 8011420:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011424:	4bc0      	ldr	r3, [pc, #768]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011426:	2200      	movs	r2, #0
 8011428:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 801142c:	4bbe      	ldr	r3, [pc, #760]	@ (8011728 <LoRaMacInitialization+0x384>)
 801142e:	2200      	movs	r2, #0
 8011430:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011434:	4bbc      	ldr	r3, [pc, #752]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011436:	4abe      	ldr	r2, [pc, #760]	@ (8011730 <LoRaMacInitialization+0x38c>)
 8011438:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 801143c:	2300      	movs	r3, #0
 801143e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011442:	4bbc      	ldr	r3, [pc, #752]	@ (8011734 <LoRaMacInitialization+0x390>)
 8011444:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011446:	4bbc      	ldr	r3, [pc, #752]	@ (8011738 <LoRaMacInitialization+0x394>)
 8011448:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 801144a:	4bbc      	ldr	r3, [pc, #752]	@ (801173c <LoRaMacInitialization+0x398>)
 801144c:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801144e:	4bb6      	ldr	r3, [pc, #728]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011450:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011454:	f107 021c 	add.w	r2, r7, #28
 8011458:	4611      	mov	r1, r2
 801145a:	4618      	mov	r0, r3
 801145c:	f003 fd03 	bl	8014e66 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011460:	230f      	movs	r3, #15
 8011462:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011466:	4bb0      	ldr	r3, [pc, #704]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011468:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801146c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011470:	4611      	mov	r1, r2
 8011472:	4618      	mov	r0, r3
 8011474:	f003 fcce 	bl	8014e14 <RegionGetPhyParam>
 8011478:	4603      	mov	r3, r0
 801147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 801147c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147e:	2b00      	cmp	r3, #0
 8011480:	bf14      	ite	ne
 8011482:	2301      	movne	r3, #1
 8011484:	2300      	moveq	r3, #0
 8011486:	b2da      	uxtb	r2, r3
 8011488:	4ba7      	ldr	r3, [pc, #668]	@ (8011728 <LoRaMacInitialization+0x384>)
 801148a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801148e:	230a      	movs	r3, #10
 8011490:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011494:	4ba4      	ldr	r3, [pc, #656]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011496:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801149a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801149e:	4611      	mov	r1, r2
 80114a0:	4618      	mov	r0, r3
 80114a2:	f003 fcb7 	bl	8014e14 <RegionGetPhyParam>
 80114a6:	4603      	mov	r3, r0
 80114a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80114aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ac:	b25a      	sxtb	r2, r3
 80114ae:	4b9e      	ldr	r3, [pc, #632]	@ (8011728 <LoRaMacInitialization+0x384>)
 80114b0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80114b4:	2306      	movs	r3, #6
 80114b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114ba:	4b9b      	ldr	r3, [pc, #620]	@ (8011728 <LoRaMacInitialization+0x384>)
 80114bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80114c0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114c4:	4611      	mov	r1, r2
 80114c6:	4618      	mov	r0, r3
 80114c8:	f003 fca4 	bl	8014e14 <RegionGetPhyParam>
 80114cc:	4603      	mov	r3, r0
 80114ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80114d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114d2:	b25a      	sxtb	r2, r3
 80114d4:	4b94      	ldr	r3, [pc, #592]	@ (8011728 <LoRaMacInitialization+0x384>)
 80114d6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80114da:	2310      	movs	r3, #16
 80114dc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114e0:	4b91      	ldr	r3, [pc, #580]	@ (8011728 <LoRaMacInitialization+0x384>)
 80114e2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80114e6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80114ea:	4611      	mov	r1, r2
 80114ec:	4618      	mov	r0, r3
 80114ee:	f003 fc91 	bl	8014e14 <RegionGetPhyParam>
 80114f2:	4603      	mov	r3, r0
 80114f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80114f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f8:	4a8b      	ldr	r2, [pc, #556]	@ (8011728 <LoRaMacInitialization+0x384>)
 80114fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80114fe:	2311      	movs	r3, #17
 8011500:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011504:	4b88      	ldr	r3, [pc, #544]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011506:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801150a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801150e:	4611      	mov	r1, r2
 8011510:	4618      	mov	r0, r3
 8011512:	f003 fc7f 	bl	8014e14 <RegionGetPhyParam>
 8011516:	4603      	mov	r3, r0
 8011518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801151a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801151c:	4a82      	ldr	r2, [pc, #520]	@ (8011728 <LoRaMacInitialization+0x384>)
 801151e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011522:	2312      	movs	r3, #18
 8011524:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011528:	4b7f      	ldr	r3, [pc, #508]	@ (8011728 <LoRaMacInitialization+0x384>)
 801152a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801152e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011532:	4611      	mov	r1, r2
 8011534:	4618      	mov	r0, r3
 8011536:	f003 fc6d 	bl	8014e14 <RegionGetPhyParam>
 801153a:	4603      	mov	r3, r0
 801153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801153e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011540:	4a79      	ldr	r2, [pc, #484]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011542:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011546:	2313      	movs	r3, #19
 8011548:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801154c:	4b76      	ldr	r3, [pc, #472]	@ (8011728 <LoRaMacInitialization+0x384>)
 801154e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011552:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011556:	4611      	mov	r1, r2
 8011558:	4618      	mov	r0, r3
 801155a:	f003 fc5b 	bl	8014e14 <RegionGetPhyParam>
 801155e:	4603      	mov	r3, r0
 8011560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011564:	4a70      	ldr	r2, [pc, #448]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011566:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801156a:	2314      	movs	r3, #20
 801156c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011570:	4b6d      	ldr	r3, [pc, #436]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011572:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011576:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801157a:	4611      	mov	r1, r2
 801157c:	4618      	mov	r0, r3
 801157e:	f003 fc49 	bl	8014e14 <RegionGetPhyParam>
 8011582:	4603      	mov	r3, r0
 8011584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011588:	4a67      	ldr	r2, [pc, #412]	@ (8011728 <LoRaMacInitialization+0x384>)
 801158a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801158e:	2316      	movs	r3, #22
 8011590:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011594:	4b64      	ldr	r3, [pc, #400]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011596:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801159a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801159e:	4611      	mov	r1, r2
 80115a0:	4618      	mov	r0, r3
 80115a2:	f003 fc37 	bl	8014e14 <RegionGetPhyParam>
 80115a6:	4603      	mov	r3, r0
 80115a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80115aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ac:	b2da      	uxtb	r2, r3
 80115ae:	4b5e      	ldr	r3, [pc, #376]	@ (8011728 <LoRaMacInitialization+0x384>)
 80115b0:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80115b4:	2317      	movs	r3, #23
 80115b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115ba:	4b5b      	ldr	r3, [pc, #364]	@ (8011728 <LoRaMacInitialization+0x384>)
 80115bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115c0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80115c4:	4611      	mov	r1, r2
 80115c6:	4618      	mov	r0, r3
 80115c8:	f003 fc24 	bl	8014e14 <RegionGetPhyParam>
 80115cc:	4603      	mov	r3, r0
 80115ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80115d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d2:	4a55      	ldr	r2, [pc, #340]	@ (8011728 <LoRaMacInitialization+0x384>)
 80115d4:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80115d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115da:	4a53      	ldr	r2, [pc, #332]	@ (8011728 <LoRaMacInitialization+0x384>)
 80115dc:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80115e0:	2318      	movs	r3, #24
 80115e2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115e6:	4b50      	ldr	r3, [pc, #320]	@ (8011728 <LoRaMacInitialization+0x384>)
 80115e8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115ec:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80115f0:	4611      	mov	r1, r2
 80115f2:	4618      	mov	r0, r3
 80115f4:	f003 fc0e 	bl	8014e14 <RegionGetPhyParam>
 80115f8:	4603      	mov	r3, r0
 80115fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80115fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115fe:	b2da      	uxtb	r2, r3
 8011600:	4b49      	ldr	r3, [pc, #292]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011602:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011608:	b2da      	uxtb	r2, r3
 801160a:	4b47      	ldr	r3, [pc, #284]	@ (8011728 <LoRaMacInitialization+0x384>)
 801160c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011610:	231d      	movs	r3, #29
 8011612:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011616:	4b44      	ldr	r3, [pc, #272]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011618:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801161c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011620:	4611      	mov	r1, r2
 8011622:	4618      	mov	r0, r3
 8011624:	f003 fbf6 	bl	8014e14 <RegionGetPhyParam>
 8011628:	4603      	mov	r3, r0
 801162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 801162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801162e:	b2da      	uxtb	r2, r3
 8011630:	4b3d      	ldr	r3, [pc, #244]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011632:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011636:	231e      	movs	r3, #30
 8011638:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801163c:	4b3a      	ldr	r3, [pc, #232]	@ (8011728 <LoRaMacInitialization+0x384>)
 801163e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011642:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011646:	4611      	mov	r1, r2
 8011648:	4618      	mov	r0, r3
 801164a:	f003 fbe3 	bl	8014e14 <RegionGetPhyParam>
 801164e:	4603      	mov	r3, r0
 8011650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011654:	b2da      	uxtb	r2, r3
 8011656:	4b34      	ldr	r3, [pc, #208]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011658:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 801165c:	231f      	movs	r3, #31
 801165e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011662:	4b31      	ldr	r3, [pc, #196]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011664:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011668:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801166c:	4611      	mov	r1, r2
 801166e:	4618      	mov	r0, r3
 8011670:	f003 fbd0 	bl	8014e14 <RegionGetPhyParam>
 8011674:	4603      	mov	r3, r0
 8011676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801167a:	4a2b      	ldr	r2, [pc, #172]	@ (8011728 <LoRaMacInitialization+0x384>)
 801167c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011680:	2320      	movs	r3, #32
 8011682:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011686:	4b28      	ldr	r3, [pc, #160]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011688:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801168c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011690:	4611      	mov	r1, r2
 8011692:	4618      	mov	r0, r3
 8011694:	f003 fbbe 	bl	8014e14 <RegionGetPhyParam>
 8011698:	4603      	mov	r3, r0
 801169a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 801169c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801169e:	4a22      	ldr	r2, [pc, #136]	@ (8011728 <LoRaMacInitialization+0x384>)
 80116a0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80116a4:	230b      	movs	r3, #11
 80116a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116aa:	4b1f      	ldr	r3, [pc, #124]	@ (8011728 <LoRaMacInitialization+0x384>)
 80116ac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116b0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80116b4:	4611      	mov	r1, r2
 80116b6:	4618      	mov	r0, r3
 80116b8:	f003 fbac 	bl	8014e14 <RegionGetPhyParam>
 80116bc:	4603      	mov	r3, r0
 80116be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 80116c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c2:	b29a      	uxth	r2, r3
 80116c4:	4b18      	ldr	r3, [pc, #96]	@ (8011728 <LoRaMacInitialization+0x384>)
 80116c6:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80116ca:	230c      	movs	r3, #12
 80116cc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116d0:	4b15      	ldr	r3, [pc, #84]	@ (8011728 <LoRaMacInitialization+0x384>)
 80116d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116d6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80116da:	4611      	mov	r1, r2
 80116dc:	4618      	mov	r0, r3
 80116de:	f003 fb99 	bl	8014e14 <RegionGetPhyParam>
 80116e2:	4603      	mov	r3, r0
 80116e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80116e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	4b0f      	ldr	r3, [pc, #60]	@ (8011728 <LoRaMacInitialization+0x384>)
 80116ec:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80116f0:	4b0d      	ldr	r3, [pc, #52]	@ (8011728 <LoRaMacInitialization+0x384>)
 80116f2:	2201      	movs	r2, #1
 80116f4:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80116f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011728 <LoRaMacInitialization+0x384>)
 80116fa:	220a      	movs	r2, #10
 80116fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011700:	4b09      	ldr	r3, [pc, #36]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011702:	2206      	movs	r2, #6
 8011704:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011708:	4b07      	ldr	r3, [pc, #28]	@ (8011728 <LoRaMacInitialization+0x384>)
 801170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801170e:	4a06      	ldr	r2, [pc, #24]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011710:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011712:	4b05      	ldr	r3, [pc, #20]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011714:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8011718:	4b03      	ldr	r3, [pc, #12]	@ (8011728 <LoRaMacInitialization+0x384>)
 801171a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801171e:	4b02      	ldr	r3, [pc, #8]	@ (8011728 <LoRaMacInitialization+0x384>)
 8011720:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011724:	e00c      	b.n	8011740 <LoRaMacInitialization+0x39c>
 8011726:	bf00      	nop
 8011728:	20000cd4 	.word	0x20000cd4
 801172c:	200007a0 	.word	0x200007a0
 8011730:	01000400 	.word	0x01000400
 8011734:	20000ef8 	.word	0x20000ef8
 8011738:	20000efc 	.word	0x20000efc
 801173c:	2000184c 	.word	0x2000184c
 8011740:	4a5f      	ldr	r2, [pc, #380]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011742:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011744:	4b5e      	ldr	r3, [pc, #376]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011746:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801174a:	4a5d      	ldr	r2, [pc, #372]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 801174c:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801174e:	4b5c      	ldr	r3, [pc, #368]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011754:	4a5a      	ldr	r2, [pc, #360]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011756:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011758:	4b59      	ldr	r3, [pc, #356]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 801175a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801175e:	4a58      	ldr	r2, [pc, #352]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011760:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011762:	4b57      	ldr	r3, [pc, #348]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011764:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011768:	4a55      	ldr	r2, [pc, #340]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 801176a:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 801176c:	4b54      	ldr	r3, [pc, #336]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 801176e:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8011772:	4b53      	ldr	r3, [pc, #332]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011774:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011778:	4b51      	ldr	r3, [pc, #324]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 801177a:	2201      	movs	r2, #1
 801177c:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011780:	4a50      	ldr	r2, [pc, #320]	@ (80118c4 <LoRaMacInitialization+0x520>)
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8011788:	2000      	movs	r0, #0
 801178a:	f7ff f86b 	bl	8010864 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801178e:	4b4c      	ldr	r3, [pc, #304]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011790:	2201      	movs	r2, #1
 8011792:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8011796:	4a4b      	ldr	r2, [pc, #300]	@ (80118c4 <LoRaMacInitialization+0x520>)
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 801179e:	4b49      	ldr	r3, [pc, #292]	@ (80118c4 <LoRaMacInitialization+0x520>)
 80117a0:	2200      	movs	r2, #0
 80117a2:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 80117a6:	4b47      	ldr	r3, [pc, #284]	@ (80118c4 <LoRaMacInitialization+0x520>)
 80117a8:	2201      	movs	r2, #1
 80117aa:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80117ae:	4b44      	ldr	r3, [pc, #272]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80117b4:	4b42      	ldr	r3, [pc, #264]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 80117b6:	2200      	movs	r2, #0
 80117b8:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80117ba:	2300      	movs	r3, #0
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	4b42      	ldr	r3, [pc, #264]	@ (80118c8 <LoRaMacInitialization+0x524>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	f04f 31ff 	mov.w	r1, #4294967295
 80117c6:	4841      	ldr	r0, [pc, #260]	@ (80118cc <LoRaMacInitialization+0x528>)
 80117c8:	f009 fd92 	bl	801b2f0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80117cc:	2300      	movs	r3, #0
 80117ce:	9300      	str	r3, [sp, #0]
 80117d0:	4b3f      	ldr	r3, [pc, #252]	@ (80118d0 <LoRaMacInitialization+0x52c>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	f04f 31ff 	mov.w	r1, #4294967295
 80117d8:	483e      	ldr	r0, [pc, #248]	@ (80118d4 <LoRaMacInitialization+0x530>)
 80117da:	f009 fd89 	bl	801b2f0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80117de:	2300      	movs	r3, #0
 80117e0:	9300      	str	r3, [sp, #0]
 80117e2:	4b3d      	ldr	r3, [pc, #244]	@ (80118d8 <LoRaMacInitialization+0x534>)
 80117e4:	2200      	movs	r2, #0
 80117e6:	f04f 31ff 	mov.w	r1, #4294967295
 80117ea:	483c      	ldr	r0, [pc, #240]	@ (80118dc <LoRaMacInitialization+0x538>)
 80117ec:	f009 fd80 	bl	801b2f0 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80117f0:	2300      	movs	r3, #0
 80117f2:	9300      	str	r3, [sp, #0]
 80117f4:	4b3a      	ldr	r3, [pc, #232]	@ (80118e0 <LoRaMacInitialization+0x53c>)
 80117f6:	2200      	movs	r2, #0
 80117f8:	f04f 31ff 	mov.w	r1, #4294967295
 80117fc:	4839      	ldr	r0, [pc, #228]	@ (80118e4 <LoRaMacInitialization+0x540>)
 80117fe:	f009 fd77 	bl	801b2f0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011802:	4c2f      	ldr	r4, [pc, #188]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011804:	463b      	mov	r3, r7
 8011806:	4618      	mov	r0, r3
 8011808:	f009 f94e 	bl	801aaa8 <SysTimeGetMcuTime>
 801180c:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8011810:	463a      	mov	r2, r7
 8011812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011816:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 801181a:	4b33      	ldr	r3, [pc, #204]	@ (80118e8 <LoRaMacInitialization+0x544>)
 801181c:	2200      	movs	r2, #0
 801181e:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011820:	4b28      	ldr	r3, [pc, #160]	@ (80118c4 <LoRaMacInitialization+0x520>)
 8011822:	4a32      	ldr	r2, [pc, #200]	@ (80118ec <LoRaMacInitialization+0x548>)
 8011824:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011828:	4b26      	ldr	r3, [pc, #152]	@ (80118c4 <LoRaMacInitialization+0x520>)
 801182a:	4a31      	ldr	r2, [pc, #196]	@ (80118f0 <LoRaMacInitialization+0x54c>)
 801182c:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011830:	4b24      	ldr	r3, [pc, #144]	@ (80118c4 <LoRaMacInitialization+0x520>)
 8011832:	4a30      	ldr	r2, [pc, #192]	@ (80118f4 <LoRaMacInitialization+0x550>)
 8011834:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011838:	4b22      	ldr	r3, [pc, #136]	@ (80118c4 <LoRaMacInitialization+0x520>)
 801183a:	4a2f      	ldr	r2, [pc, #188]	@ (80118f8 <LoRaMacInitialization+0x554>)
 801183c:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011840:	4b20      	ldr	r3, [pc, #128]	@ (80118c4 <LoRaMacInitialization+0x520>)
 8011842:	4a2e      	ldr	r2, [pc, #184]	@ (80118fc <LoRaMacInitialization+0x558>)
 8011844:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011848:	4b2d      	ldr	r3, [pc, #180]	@ (8011900 <LoRaMacInitialization+0x55c>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	482d      	ldr	r0, [pc, #180]	@ (8011904 <LoRaMacInitialization+0x560>)
 801184e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8011850:	482d      	ldr	r0, [pc, #180]	@ (8011908 <LoRaMacInitialization+0x564>)
 8011852:	f7fa f9e9 	bl	800bc28 <SecureElementInit>
 8011856:	4603      	mov	r3, r0
 8011858:	2b00      	cmp	r3, #0
 801185a:	d001      	beq.n	8011860 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801185c:	2311      	movs	r3, #17
 801185e:	e02b      	b.n	80118b8 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011860:	4817      	ldr	r0, [pc, #92]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 8011862:	f002 fc21 	bl	80140a8 <LoRaMacCryptoInit>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d001      	beq.n	8011870 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801186c:	2311      	movs	r3, #17
 801186e:	e023      	b.n	80118b8 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011870:	f001 fd20 	bl	80132b4 <LoRaMacCommandsInit>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d001      	beq.n	801187e <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801187a:	2313      	movs	r3, #19
 801187c:	e01c      	b.n	80118b8 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801187e:	4823      	ldr	r0, [pc, #140]	@ (801190c <LoRaMacInitialization+0x568>)
 8011880:	f002 fcb2 	bl	80141e8 <LoRaMacCryptoSetMulticastReference>
 8011884:	4603      	mov	r3, r0
 8011886:	2b00      	cmp	r3, #0
 8011888:	d001      	beq.n	801188e <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801188a:	2311      	movs	r3, #17
 801188c:	e014      	b.n	80118b8 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801188e:	4b1c      	ldr	r3, [pc, #112]	@ (8011900 <LoRaMacInitialization+0x55c>)
 8011890:	695b      	ldr	r3, [r3, #20]
 8011892:	4798      	blx	r3
 8011894:	4603      	mov	r3, r0
 8011896:	4618      	mov	r0, r3
 8011898:	f005 fc90 	bl	80171bc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801189c:	4b18      	ldr	r3, [pc, #96]	@ (8011900 <LoRaMacInitialization+0x55c>)
 801189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118a0:	4a07      	ldr	r2, [pc, #28]	@ (80118c0 <LoRaMacInitialization+0x51c>)
 80118a2:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80118a6:	4610      	mov	r0, r2
 80118a8:	4798      	blx	r3
    Radio.Sleep( );
 80118aa:	4b15      	ldr	r3, [pc, #84]	@ (8011900 <LoRaMacInitialization+0x55c>)
 80118ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ae:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80118b0:	2001      	movs	r0, #1
 80118b2:	f7fd fa67 	bl	800ed84 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80118b6:	2300      	movs	r3, #0
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	373c      	adds	r7, #60	@ 0x3c
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd90      	pop	{r4, r7, pc}
 80118c0:	20000cd4 	.word	0x20000cd4
 80118c4:	200007a0 	.word	0x200007a0
 80118c8:	0800f311 	.word	0x0800f311
 80118cc:	20000b08 	.word	0x20000b08
 80118d0:	0800f3a1 	.word	0x0800f3a1
 80118d4:	20000b20 	.word	0x20000b20
 80118d8:	0800f419 	.word	0x0800f419
 80118dc:	20000b38 	.word	0x20000b38
 80118e0:	0800f499 	.word	0x0800f499
 80118e4:	20000ba0 	.word	0x20000ba0
 80118e8:	200018dc 	.word	0x200018dc
 80118ec:	0800ddd1 	.word	0x0800ddd1
 80118f0:	0800de1d 	.word	0x0800de1d
 80118f4:	0800de9d 	.word	0x0800de9d
 80118f8:	0800de81 	.word	0x0800de81
 80118fc:	0800deb9 	.word	0x0800deb9
 8011900:	0801c570 	.word	0x0801c570
 8011904:	20000aec 	.word	0x20000aec
 8011908:	20000e20 	.word	0x20000e20
 801190c:	20000dbc 	.word	0x20000dbc

08011910 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011914:	4b04      	ldr	r3, [pc, #16]	@ (8011928 <LoRaMacStart+0x18>)
 8011916:	2200      	movs	r2, #0
 8011918:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 801191c:	f7fc fada 	bl	800ded4 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011920:	2300      	movs	r3, #0
}
 8011922:	4618      	mov	r0, r3
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	200007a0 	.word	0x200007a0

0801192c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801192c:	b580      	push	{r7, lr}
 801192e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011930:	f7fd f9f0 	bl	800ed14 <LoRaMacIsBusy>
 8011934:	4603      	mov	r3, r0
 8011936:	f083 0301 	eor.w	r3, r3, #1
 801193a:	b2db      	uxtb	r3, r3
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00d      	beq.n	801195c <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011940:	4b0b      	ldr	r3, [pc, #44]	@ (8011970 <LoRaMacStop+0x44>)
 8011942:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011946:	2b02      	cmp	r3, #2
 8011948:	d102      	bne.n	8011950 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801194a:	4b0a      	ldr	r3, [pc, #40]	@ (8011974 <LoRaMacStop+0x48>)
 801194c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801194e:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8011950:	4b09      	ldr	r3, [pc, #36]	@ (8011978 <LoRaMacStop+0x4c>)
 8011952:	2201      	movs	r2, #1
 8011954:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8011958:	2300      	movs	r3, #0
 801195a:	e007      	b.n	801196c <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 801195c:	4b06      	ldr	r3, [pc, #24]	@ (8011978 <LoRaMacStop+0x4c>)
 801195e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011962:	2b01      	cmp	r3, #1
 8011964:	d101      	bne.n	801196a <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8011966:	2300      	movs	r3, #0
 8011968:	e000      	b.n	801196c <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801196a:	2301      	movs	r3, #1
}
 801196c:	4618      	mov	r0, r3
 801196e:	bd80      	pop	{r7, pc}
 8011970:	20000cd4 	.word	0x20000cd4
 8011974:	0801c570 	.word	0x0801c570
 8011978:	200007a0 	.word	0x200007a0

0801197c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 801197c:	b580      	push	{r7, lr}
 801197e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011980:	4812      	ldr	r0, [pc, #72]	@ (80119cc <LoRaMacHalt+0x50>)
 8011982:	f009 fd59 	bl	801b438 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011986:	4812      	ldr	r0, [pc, #72]	@ (80119d0 <LoRaMacHalt+0x54>)
 8011988:	f009 fd56 	bl	801b438 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 801198c:	4811      	ldr	r0, [pc, #68]	@ (80119d4 <LoRaMacHalt+0x58>)
 801198e:	f009 fd53 	bl	801b438 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011992:	4811      	ldr	r0, [pc, #68]	@ (80119d8 <LoRaMacHalt+0x5c>)
 8011994:	f009 fd50 	bl	801b438 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011998:	f001 faf0 	bl	8012f7c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 801199c:	4b0f      	ldr	r3, [pc, #60]	@ (80119dc <LoRaMacHalt+0x60>)
 801199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119a0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80119a2:	4b0f      	ldr	r3, [pc, #60]	@ (80119e0 <LoRaMacHalt+0x64>)
 80119a4:	2200      	movs	r2, #0
 80119a6:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 80119aa:	480e      	ldr	r0, [pc, #56]	@ (80119e4 <LoRaMacHalt+0x68>)
 80119ac:	f7fd fb8c 	bl	800f0c8 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80119b0:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 80119b4:	490b      	ldr	r1, [pc, #44]	@ (80119e4 <LoRaMacHalt+0x68>)
 80119b6:	480c      	ldr	r0, [pc, #48]	@ (80119e8 <LoRaMacHalt+0x6c>)
 80119b8:	f005 fc25 	bl	8017206 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80119bc:	4b08      	ldr	r3, [pc, #32]	@ (80119e0 <LoRaMacHalt+0x64>)
 80119be:	2201      	movs	r2, #1
 80119c0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	20000b08 	.word	0x20000b08
 80119d0:	20000b20 	.word	0x20000b20
 80119d4:	20000b38 	.word	0x20000b38
 80119d8:	20000ba0 	.word	0x20000ba0
 80119dc:	0801c570 	.word	0x0801c570
 80119e0:	200007a0 	.word	0x200007a0
 80119e4:	20000cd4 	.word	0x20000cd4
 80119e8:	20001290 	.word	0x20001290

080119ec <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80119ec:	b590      	push	{r4, r7, lr}
 80119ee:	b08d      	sub	sp, #52	@ 0x34
 80119f0:	af02      	add	r7, sp, #8
 80119f2:	4603      	mov	r3, r0
 80119f4:	6039      	str	r1, [r7, #0]
 80119f6:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80119f8:	4b42      	ldr	r3, [pc, #264]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 80119fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119fc:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80119fe:	4b41      	ldr	r3, [pc, #260]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a00:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8011a04:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011a06:	4b3f      	ldr	r3, [pc, #252]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a08:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8011a0c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8011b08 <LoRaMacQueryTxPossible+0x11c>)
 8011a10:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8011a14:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011a16:	2300      	movs	r3, #0
 8011a18:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d101      	bne.n	8011a24 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a20:	2303      	movs	r3, #3
 8011a22:	e06b      	b.n	8011afc <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011a24:	2300      	movs	r3, #0
 8011a26:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011a28:	4b36      	ldr	r3, [pc, #216]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a2a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011a2e:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011a30:	4b34      	ldr	r3, [pc, #208]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a34:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011a36:	4b33      	ldr	r3, [pc, #204]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a38:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8011a3c:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011a3e:	4b31      	ldr	r3, [pc, #196]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a40:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8011a44:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011a46:	4b2f      	ldr	r3, [pc, #188]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a48:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011a4c:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011a50:	4b2c      	ldr	r3, [pc, #176]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a52:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011a56:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8011b08 <LoRaMacQueryTxPossible+0x11c>)
 8011a5c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8011a60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011a64:	4b27      	ldr	r3, [pc, #156]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a66:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011a6e:	4b25      	ldr	r3, [pc, #148]	@ (8011b04 <LoRaMacQueryTxPossible+0x118>)
 8011a70:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011a74:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011a78:	f107 040d 	add.w	r4, r7, #13
 8011a7c:	f107 020e 	add.w	r2, r7, #14
 8011a80:	f107 010f 	add.w	r1, r7, #15
 8011a84:	f107 0014 	add.w	r0, r7, #20
 8011a88:	f107 0310 	add.w	r3, r7, #16
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	4623      	mov	r3, r4
 8011a90:	f001 f93e 	bl	8012d10 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fd fe43 	bl	800f724 <GetMaxAppPayloadWithoutFOptsLength>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011aa6:	f107 0308 	add.w	r3, r7, #8
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f001 fd08 	bl	80134c0 <LoRaMacCommandsGetSizeSerializedCmds>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d001      	beq.n	8011aba <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ab6:	2313      	movs	r3, #19
 8011ab8:	e020      	b.n	8011afc <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	2b0f      	cmp	r3, #15
 8011abe:	d819      	bhi.n	8011af4 <LoRaMacQueryTxPossible+0x108>
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	785b      	ldrb	r3, [r3, #1]
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d313      	bcc.n	8011af4 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	785a      	ldrb	r2, [r3, #1]
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	b2da      	uxtb	r2, r3
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	785b      	ldrb	r3, [r3, #1]
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	79fa      	ldrb	r2, [r7, #7]
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	4299      	cmp	r1, r3
 8011aea:	d301      	bcc.n	8011af0 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011aec:	2300      	movs	r3, #0
 8011aee:	e005      	b.n	8011afc <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011af0:	2308      	movs	r3, #8
 8011af2:	e003      	b.n	8011afc <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	2200      	movs	r2, #0
 8011af8:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011afa:	2308      	movs	r3, #8
    }
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	372c      	adds	r7, #44	@ 0x2c
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd90      	pop	{r4, r7, pc}
 8011b04:	20000cd4 	.word	0x20000cd4
 8011b08:	200007a0 	.word	0x200007a0

08011b0c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011b0c:	b590      	push	{r4, r7, lr}
 8011b0e:	b087      	sub	sp, #28
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011b14:	2300      	movs	r3, #0
 8011b16:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d101      	bne.n	8011b22 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b1e:	2303      	movs	r3, #3
 8011b20:	e1c4      	b.n	8011eac <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	2b41      	cmp	r3, #65	@ 0x41
 8011b28:	f200 81b9 	bhi.w	8011e9e <LoRaMacMibGetRequestConfirm+0x392>
 8011b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8011b34 <LoRaMacMibGetRequestConfirm+0x28>)
 8011b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b32:	bf00      	nop
 8011b34:	08011c3d 	.word	0x08011c3d
 8011b38:	08011c49 	.word	0x08011c49
 8011b3c:	08011c55 	.word	0x08011c55
 8011b40:	08011c61 	.word	0x08011c61
 8011b44:	08011c6d 	.word	0x08011c6d
 8011b48:	08011c79 	.word	0x08011c79
 8011b4c:	08011c85 	.word	0x08011c85
 8011b50:	08011e9f 	.word	0x08011e9f
 8011b54:	08011e9f 	.word	0x08011e9f
 8011b58:	08011e9f 	.word	0x08011e9f
 8011b5c:	08011e9f 	.word	0x08011e9f
 8011b60:	08011e9f 	.word	0x08011e9f
 8011b64:	08011e9f 	.word	0x08011e9f
 8011b68:	08011e9f 	.word	0x08011e9f
 8011b6c:	08011e9f 	.word	0x08011e9f
 8011b70:	08011c99 	.word	0x08011c99
 8011b74:	08011ca5 	.word	0x08011ca5
 8011b78:	08011cb1 	.word	0x08011cb1
 8011b7c:	08011cd3 	.word	0x08011cd3
 8011b80:	08011ce5 	.word	0x08011ce5
 8011b84:	08011cf7 	.word	0x08011cf7
 8011b88:	08011d09 	.word	0x08011d09
 8011b8c:	08011d3d 	.word	0x08011d3d
 8011b90:	08011d1b 	.word	0x08011d1b
 8011b94:	08011d5f 	.word	0x08011d5f
 8011b98:	08011d6b 	.word	0x08011d6b
 8011b9c:	08011d75 	.word	0x08011d75
 8011ba0:	08011d7f 	.word	0x08011d7f
 8011ba4:	08011d89 	.word	0x08011d89
 8011ba8:	08011d93 	.word	0x08011d93
 8011bac:	08011d9d 	.word	0x08011d9d
 8011bb0:	08011dc9 	.word	0x08011dc9
 8011bb4:	08011dd5 	.word	0x08011dd5
 8011bb8:	08011ded 	.word	0x08011ded
 8011bbc:	08011de1 	.word	0x08011de1
 8011bc0:	08011df9 	.word	0x08011df9
 8011bc4:	08011e03 	.word	0x08011e03
 8011bc8:	08011e0f 	.word	0x08011e0f
 8011bcc:	08011e2b 	.word	0x08011e2b
 8011bd0:	08011e1b 	.word	0x08011e1b
 8011bd4:	08011e23 	.word	0x08011e23
 8011bd8:	08011e9f 	.word	0x08011e9f
 8011bdc:	08011e37 	.word	0x08011e37
 8011be0:	08011e9f 	.word	0x08011e9f
 8011be4:	08011e9f 	.word	0x08011e9f
 8011be8:	08011e9f 	.word	0x08011e9f
 8011bec:	08011e9f 	.word	0x08011e9f
 8011bf0:	08011e9f 	.word	0x08011e9f
 8011bf4:	08011e9f 	.word	0x08011e9f
 8011bf8:	08011e9f 	.word	0x08011e9f
 8011bfc:	08011e9f 	.word	0x08011e9f
 8011c00:	08011e9f 	.word	0x08011e9f
 8011c04:	08011e9f 	.word	0x08011e9f
 8011c08:	08011e9f 	.word	0x08011e9f
 8011c0c:	08011e9f 	.word	0x08011e9f
 8011c10:	08011e9f 	.word	0x08011e9f
 8011c14:	08011e9f 	.word	0x08011e9f
 8011c18:	08011e9f 	.word	0x08011e9f
 8011c1c:	08011e4b 	.word	0x08011e4b
 8011c20:	08011e57 	.word	0x08011e57
 8011c24:	08011e63 	.word	0x08011e63
 8011c28:	08011e6f 	.word	0x08011e6f
 8011c2c:	08011e7b 	.word	0x08011e7b
 8011c30:	08011e87 	.word	0x08011e87
 8011c34:	08011e93 	.word	0x08011e93
 8011c38:	08011e99 	.word	0x08011e99
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011c3c:	4b9d      	ldr	r3, [pc, #628]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011c3e:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	711a      	strb	r2, [r3, #4]
            break;
 8011c46:	e130      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011c48:	4b9a      	ldr	r3, [pc, #616]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011c4a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	711a      	strb	r2, [r3, #4]
            break;
 8011c52:	e12a      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7fa faa3 	bl	800c1a4 <SecureElementGetDevEui>
            break;
 8011c5e:	e124      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7fa facd 	bl	800c204 <SecureElementGetJoinEui>
            break;
 8011c6a:	e11e      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011c6c:	4b91      	ldr	r3, [pc, #580]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011c6e:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	711a      	strb	r2, [r3, #4]
            break;
 8011c76:	e118      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011c78:	4b8e      	ldr	r3, [pc, #568]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011c7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	605a      	str	r2, [r3, #4]
            break;
 8011c82:	e112      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8011c84:	4b8b      	ldr	r3, [pc, #556]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011c86:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	3304      	adds	r3, #4
 8011c8e:	4619      	mov	r1, r3
 8011c90:	4610      	mov	r0, r2
 8011c92:	f7fa fae9 	bl	800c268 <SecureElementGetDevAddr>
            break;
 8011c96:	e108      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011c98:	4b86      	ldr	r3, [pc, #536]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011c9a:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	711a      	strb	r2, [r3, #4]
            break;
 8011ca2:	e102      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011ca4:	4b83      	ldr	r3, [pc, #524]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011ca6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	711a      	strb	r2, [r3, #4]
            break;
 8011cae:	e0fc      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011cb0:	231c      	movs	r3, #28
 8011cb2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cb4:	4b7f      	ldr	r3, [pc, #508]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011cb6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011cba:	f107 0210 	add.w	r2, r7, #16
 8011cbe:	4611      	mov	r1, r2
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f003 f8a7 	bl	8014e14 <RegionGetPhyParam>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011cca:	68fa      	ldr	r2, [r7, #12]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	605a      	str	r2, [r3, #4]
            break;
 8011cd0:	e0eb      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	4a77      	ldr	r2, [pc, #476]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011cd6:	3304      	adds	r3, #4
 8011cd8:	326c      	adds	r2, #108	@ 0x6c
 8011cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cde:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011ce2:	e0e2      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	4a73      	ldr	r2, [pc, #460]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011ce8:	3304      	adds	r3, #4
 8011cea:	32b4      	adds	r2, #180	@ 0xb4
 8011cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cf0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011cf4:	e0d9      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011cfa:	3304      	adds	r3, #4
 8011cfc:	3274      	adds	r2, #116	@ 0x74
 8011cfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d02:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011d06:	e0d0      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	4a6a      	ldr	r2, [pc, #424]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011d0c:	3304      	adds	r3, #4
 8011d0e:	32bc      	adds	r2, #188	@ 0xbc
 8011d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d14:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011d18:	e0c7      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011d1a:	231a      	movs	r3, #26
 8011d1c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d1e:	4b65      	ldr	r3, [pc, #404]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011d20:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d24:	f107 0210 	add.w	r2, r7, #16
 8011d28:	4611      	mov	r1, r2
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f003 f872 	bl	8014e14 <RegionGetPhyParam>
 8011d30:	4603      	mov	r3, r0
 8011d32:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011d34:	68fa      	ldr	r2, [r7, #12]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	605a      	str	r2, [r3, #4]
            break;
 8011d3a:	e0b6      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011d3c:	2319      	movs	r3, #25
 8011d3e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d40:	4b5c      	ldr	r3, [pc, #368]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011d42:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d46:	f107 0210 	add.w	r2, r7, #16
 8011d4a:	4611      	mov	r1, r2
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f003 f861 	bl	8014e14 <RegionGetPhyParam>
 8011d52:	4603      	mov	r3, r0
 8011d54:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011d56:	68fa      	ldr	r2, [r7, #12]
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	605a      	str	r2, [r3, #4]
            break;
 8011d5c:	e0a5      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011d5e:	4b55      	ldr	r3, [pc, #340]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011d60:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	711a      	strb	r2, [r3, #4]
            break;
 8011d68:	e09f      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011d6a:	4b52      	ldr	r3, [pc, #328]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011d6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	605a      	str	r2, [r3, #4]
            break;
 8011d72:	e09a      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011d74:	4b4f      	ldr	r3, [pc, #316]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011d76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	605a      	str	r2, [r3, #4]
            break;
 8011d7c:	e095      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011d80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	605a      	str	r2, [r3, #4]
            break;
 8011d86:	e090      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011d88:	4b4a      	ldr	r3, [pc, #296]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011d8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	605a      	str	r2, [r3, #4]
            break;
 8011d90:	e08b      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011d92:	4b48      	ldr	r3, [pc, #288]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011d94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	605a      	str	r2, [r3, #4]
            break;
 8011d9a:	e086      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8011d9c:	2302      	movs	r3, #2
 8011d9e:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011da0:	4b44      	ldr	r3, [pc, #272]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011da2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011da6:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011da8:	4b42      	ldr	r3, [pc, #264]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011daa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011dae:	f107 0210 	add.w	r2, r7, #16
 8011db2:	4611      	mov	r1, r2
 8011db4:	4618      	mov	r0, r3
 8011db6:	f003 f82d 	bl	8014e14 <RegionGetPhyParam>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	b25a      	sxtb	r2, r3
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	711a      	strb	r2, [r3, #4]
            break;
 8011dc6:	e070      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011dca:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	711a      	strb	r2, [r3, #4]
            break;
 8011dd2:	e06a      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011dd4:	4b37      	ldr	r3, [pc, #220]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011dd6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	711a      	strb	r2, [r3, #4]
            break;
 8011dde:	e064      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011de0:	4b34      	ldr	r3, [pc, #208]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011de2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	711a      	strb	r2, [r3, #4]
            break;
 8011dea:	e05e      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011dec:	4b31      	ldr	r3, [pc, #196]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011dee:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	711a      	strb	r2, [r3, #4]
            break;
 8011df6:	e058      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011df8:	4b2e      	ldr	r3, [pc, #184]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011dfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	605a      	str	r2, [r3, #4]
            break;
 8011e00:	e053      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011e02:	4b2c      	ldr	r3, [pc, #176]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e04:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	711a      	strb	r2, [r3, #4]
            break;
 8011e0c:	e04d      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011e0e:	4b29      	ldr	r3, [pc, #164]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e10:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	605a      	str	r2, [r3, #4]
            break;
 8011e18:	e047      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4a25      	ldr	r2, [pc, #148]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e1e:	605a      	str	r2, [r3, #4]
            break;
 8011e20:	e043      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4a24      	ldr	r2, [pc, #144]	@ (8011eb8 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8011e26:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8011e28:	e03f      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011e2a:	4b22      	ldr	r3, [pc, #136]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e2c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	605a      	str	r2, [r3, #4]
            break;
 8011e34:	e039      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	4a1e      	ldr	r2, [pc, #120]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e3a:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8011e3e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011e40:	687c      	ldr	r4, [r7, #4]
 8011e42:	f003 f95d 	bl	8015100 <RegionGetVersion>
 8011e46:	60a0      	str	r0, [r4, #8]
            break;
 8011e48:	e02f      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e4c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	605a      	str	r2, [r3, #4]
            break;
 8011e54:	e029      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011e56:	4b17      	ldr	r3, [pc, #92]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e58:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	711a      	strb	r2, [r3, #4]
            break;
 8011e60:	e023      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011e62:	4b14      	ldr	r3, [pc, #80]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e64:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	809a      	strh	r2, [r3, #4]
            break;
 8011e6c:	e01d      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011e6e:	4b11      	ldr	r3, [pc, #68]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e70:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	809a      	strh	r2, [r3, #4]
            break;
 8011e78:	e017      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8011e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e7c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	809a      	strh	r2, [r3, #4]
            break;
 8011e84:	e011      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8011e86:	4b0b      	ldr	r3, [pc, #44]	@ (8011eb4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011e88:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	809a      	strh	r2, [r3, #4]
            break;
 8011e90:	e00b      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011e92:	2318      	movs	r3, #24
 8011e94:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011e96:	e008      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011e98:	2318      	movs	r3, #24
 8011e9a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011e9c:	e005      	b.n	8011eaa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f001 f883 	bl	8012faa <LoRaMacClassBMibGetRequestConfirm>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	75fb      	strb	r3, [r7, #23]
            break;
 8011ea8:	bf00      	nop
        }
    }
    return status;
 8011eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	371c      	adds	r7, #28
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd90      	pop	{r4, r7, pc}
 8011eb4:	20000cd4 	.word	0x20000cd4
 8011eb8:	20001290 	.word	0x20001290

08011ebc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b086      	sub	sp, #24
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d101      	bne.n	8011ed2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ece:	2303      	movs	r3, #3
 8011ed0:	e39e      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011ed2:	4bbd      	ldr	r3, [pc, #756]	@ (80121c8 <LoRaMacMibSetRequestConfirm+0x30c>)
 8011ed4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011ed8:	f003 0302 	and.w	r3, r3, #2
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d001      	beq.n	8011ee4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e395      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
    }

    switch( mibSet->Type )
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	2b41      	cmp	r3, #65	@ 0x41
 8011eea:	f200 8365 	bhi.w	80125b8 <LoRaMacMibSetRequestConfirm+0x6fc>
 8011eee:	a201      	add	r2, pc, #4	@ (adr r2, 8011ef4 <LoRaMacMibSetRequestConfirm+0x38>)
 8011ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ef4:	08011ffd 	.word	0x08011ffd
 8011ef8:	0801200d 	.word	0x0801200d
 8011efc:	08012027 	.word	0x08012027
 8011f00:	0801203f 	.word	0x0801203f
 8011f04:	08012057 	.word	0x08012057
 8011f08:	08012063 	.word	0x08012063
 8011f0c:	0801206f 	.word	0x0801206f
 8011f10:	08012099 	.word	0x08012099
 8011f14:	080120bf 	.word	0x080120bf
 8011f18:	080120e5 	.word	0x080120e5
 8011f1c:	0801210b 	.word	0x0801210b
 8011f20:	08012131 	.word	0x08012131
 8011f24:	08012157 	.word	0x08012157
 8011f28:	0801217d 	.word	0x0801217d
 8011f2c:	080121a3 	.word	0x080121a3
 8011f30:	080121d1 	.word	0x080121d1
 8011f34:	080121f1 	.word	0x080121f1
 8011f38:	080125b9 	.word	0x080125b9
 8011f3c:	080121fd 	.word	0x080121fd
 8011f40:	0801226d 	.word	0x0801226d
 8011f44:	080122ad 	.word	0x080122ad
 8011f48:	0801230f 	.word	0x0801230f
 8011f4c:	0801237f 	.word	0x0801237f
 8011f50:	0801234f 	.word	0x0801234f
 8011f54:	080123af 	.word	0x080123af
 8011f58:	080123d1 	.word	0x080123d1
 8011f5c:	080123db 	.word	0x080123db
 8011f60:	080123e5 	.word	0x080123e5
 8011f64:	080123ef 	.word	0x080123ef
 8011f68:	080123f9 	.word	0x080123f9
 8011f6c:	080125b9 	.word	0x080125b9
 8011f70:	08012403 	.word	0x08012403
 8011f74:	08012435 	.word	0x08012435
 8011f78:	080124a9 	.word	0x080124a9
 8011f7c:	0801246f 	.word	0x0801246f
 8011f80:	080124db 	.word	0x080124db
 8011f84:	08012501 	.word	0x08012501
 8011f88:	08012519 	.word	0x08012519
 8011f8c:	08012525 	.word	0x08012525
 8011f90:	08012531 	.word	0x08012531
 8011f94:	080125b9 	.word	0x080125b9
 8011f98:	0801253b 	.word	0x0801253b
 8011f9c:	080125b9 	.word	0x080125b9
 8011fa0:	080125b9 	.word	0x080125b9
 8011fa4:	080125b9 	.word	0x080125b9
 8011fa8:	080125b9 	.word	0x080125b9
 8011fac:	080125b9 	.word	0x080125b9
 8011fb0:	080125b9 	.word	0x080125b9
 8011fb4:	080125b9 	.word	0x080125b9
 8011fb8:	080125b9 	.word	0x080125b9
 8011fbc:	080125b9 	.word	0x080125b9
 8011fc0:	080125b9 	.word	0x080125b9
 8011fc4:	080125b9 	.word	0x080125b9
 8011fc8:	080125b9 	.word	0x080125b9
 8011fcc:	080125b9 	.word	0x080125b9
 8011fd0:	080125b9 	.word	0x080125b9
 8011fd4:	080125b9 	.word	0x080125b9
 8011fd8:	080125b9 	.word	0x080125b9
 8011fdc:	08012565 	.word	0x08012565
 8011fe0:	08012571 	.word	0x08012571
 8011fe4:	0801257d 	.word	0x0801257d
 8011fe8:	08012589 	.word	0x08012589
 8011fec:	08012595 	.word	0x08012595
 8011ff0:	080125a1 	.word	0x080125a1
 8011ff4:	080125ad 	.word	0x080125ad
 8011ff8:	080125b3 	.word	0x080125b3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	791b      	ldrb	r3, [r3, #4]
 8012000:	4618      	mov	r0, r3
 8012002:	f7fd faa5 	bl	800f550 <SwitchClass>
 8012006:	4603      	mov	r3, r0
 8012008:	75fb      	strb	r3, [r7, #23]
            break;
 801200a:	e2f6      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	791b      	ldrb	r3, [r3, #4]
 8012010:	2b02      	cmp	r3, #2
 8012012:	d005      	beq.n	8012020 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	791a      	ldrb	r2, [r3, #4]
 8012018:	4b6c      	ldr	r3, [pc, #432]	@ (80121cc <LoRaMacMibSetRequestConfirm+0x310>)
 801201a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801201e:	e2ec      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012020:	2303      	movs	r3, #3
 8012022:	75fb      	strb	r3, [r7, #23]
            break;
 8012024:	e2e9      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	4618      	mov	r0, r3
 801202c:	f7fa f8a2 	bl	800c174 <SecureElementSetDevEui>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	f000 82c6 	beq.w	80125c4 <LoRaMacMibSetRequestConfirm+0x708>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012038:	2303      	movs	r3, #3
 801203a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801203c:	e2c2      	b.n	80125c4 <LoRaMacMibSetRequestConfirm+0x708>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	4618      	mov	r0, r3
 8012044:	f7fa f8c6 	bl	800c1d4 <SecureElementSetJoinEui>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	f000 82bc 	beq.w	80125c8 <LoRaMacMibSetRequestConfirm+0x70c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012050:	2303      	movs	r3, #3
 8012052:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012054:	e2b8      	b.n	80125c8 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	791a      	ldrb	r2, [r3, #4]
 801205a:	4b5c      	ldr	r3, [pc, #368]	@ (80121cc <LoRaMacMibSetRequestConfirm+0x310>)
 801205c:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8012060:	e2cb      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	4a59      	ldr	r2, [pc, #356]	@ (80121cc <LoRaMacMibSetRequestConfirm+0x310>)
 8012068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 801206c:	e2c5      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 801206e:	4b57      	ldr	r3, [pc, #348]	@ (80121cc <LoRaMacMibSetRequestConfirm+0x310>)
 8012070:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	4619      	mov	r1, r3
 801207a:	4610      	mov	r0, r2
 801207c:	f7fa f8da 	bl	800c234 <SecureElementSetDevAddr>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	d002      	beq.n	801208c <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012086:	2303      	movs	r3, #3
 8012088:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801208a:	e2b6      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	4a4e      	ldr	r2, [pc, #312]	@ (80121cc <LoRaMacMibSetRequestConfirm+0x310>)
 8012092:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8012096:	e2b0      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d00b      	beq.n	80120b8 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	4619      	mov	r1, r3
 80120a6:	2000      	movs	r0, #0
 80120a8:	f002 f8c8 	bl	801423c <LoRaMacCryptoSetKey>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f000 828c 	beq.w	80125cc <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120b4:	2311      	movs	r3, #17
 80120b6:	e2ab      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120b8:	2303      	movs	r3, #3
 80120ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120bc:	e286      	b.n	80125cc <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d00b      	beq.n	80120de <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	4619      	mov	r1, r3
 80120cc:	2001      	movs	r0, #1
 80120ce:	f002 f8b5 	bl	801423c <LoRaMacCryptoSetKey>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	f000 827b 	beq.w	80125d0 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120da:	2311      	movs	r3, #17
 80120dc:	e298      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120de:	2303      	movs	r3, #3
 80120e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120e2:	e275      	b.n	80125d0 <LoRaMacMibSetRequestConfirm+0x714>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d00b      	beq.n	8012104 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	4619      	mov	r1, r3
 80120f2:	2008      	movs	r0, #8
 80120f4:	f002 f8a2 	bl	801423c <LoRaMacCryptoSetKey>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f000 826a 	beq.w	80125d4 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012100:	2311      	movs	r3, #17
 8012102:	e285      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012104:	2303      	movs	r3, #3
 8012106:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012108:	e264      	b.n	80125d4 <LoRaMacMibSetRequestConfirm+0x718>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00b      	beq.n	801212a <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	685b      	ldr	r3, [r3, #4]
 8012116:	4619      	mov	r1, r3
 8012118:	2009      	movs	r0, #9
 801211a:	f002 f88f 	bl	801423c <LoRaMacCryptoSetKey>
 801211e:	4603      	mov	r3, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 8259 	beq.w	80125d8 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012126:	2311      	movs	r3, #17
 8012128:	e272      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801212a:	2303      	movs	r3, #3
 801212c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801212e:	e253      	b.n	80125d8 <LoRaMacMibSetRequestConfirm+0x71c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d00b      	beq.n	8012150 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	4619      	mov	r1, r3
 801213e:	200c      	movs	r0, #12
 8012140:	f002 f87c 	bl	801423c <LoRaMacCryptoSetKey>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	f000 8248 	beq.w	80125dc <LoRaMacMibSetRequestConfirm+0x720>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801214c:	2311      	movs	r3, #17
 801214e:	e25f      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012150:	2303      	movs	r3, #3
 8012152:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012154:	e242      	b.n	80125dc <LoRaMacMibSetRequestConfirm+0x720>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d00b      	beq.n	8012176 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	4619      	mov	r1, r3
 8012164:	200d      	movs	r0, #13
 8012166:	f002 f869 	bl	801423c <LoRaMacCryptoSetKey>
 801216a:	4603      	mov	r3, r0
 801216c:	2b00      	cmp	r3, #0
 801216e:	f000 8237 	beq.w	80125e0 <LoRaMacMibSetRequestConfirm+0x724>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012172:	2311      	movs	r3, #17
 8012174:	e24c      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012176:	2303      	movs	r3, #3
 8012178:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801217a:	e231      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d00b      	beq.n	801219c <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	4619      	mov	r1, r3
 801218a:	200e      	movs	r0, #14
 801218c:	f002 f856 	bl	801423c <LoRaMacCryptoSetKey>
 8012190:	4603      	mov	r3, r0
 8012192:	2b00      	cmp	r3, #0
 8012194:	f000 8226 	beq.w	80125e4 <LoRaMacMibSetRequestConfirm+0x728>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012198:	2311      	movs	r3, #17
 801219a:	e239      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801219c:	2303      	movs	r3, #3
 801219e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80121a0:	e220      	b.n	80125e4 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d00b      	beq.n	80121c2 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	4619      	mov	r1, r3
 80121b0:	200f      	movs	r0, #15
 80121b2:	f002 f843 	bl	801423c <LoRaMacCryptoSetKey>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	f000 8215 	beq.w	80125e8 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80121be:	2311      	movs	r3, #17
 80121c0:	e226      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121c2:	2303      	movs	r3, #3
 80121c4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80121c6:	e20f      	b.n	80125e8 <LoRaMacMibSetRequestConfirm+0x72c>
 80121c8:	200007a0 	.word	0x200007a0
 80121cc:	20000cd4 	.word	0x20000cd4
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	791a      	ldrb	r2, [r3, #4]
 80121d4:	4bb2      	ldr	r3, [pc, #712]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80121d6:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80121da:	4bb2      	ldr	r3, [pc, #712]	@ (80124a4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 80121dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121de:	4ab0      	ldr	r2, [pc, #704]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80121e0:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80121e4:	4610      	mov	r0, r2
 80121e6:	4798      	blx	r3
            Radio.Sleep( );
 80121e8:	4bae      	ldr	r3, [pc, #696]	@ (80124a4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 80121ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121ec:	4798      	blx	r3
            break;
 80121ee:	e204      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	791a      	ldrb	r2, [r3, #4]
 80121f4:	4baa      	ldr	r3, [pc, #680]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80121f6:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 80121fa:	e1fe      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	7a1b      	ldrb	r3, [r3, #8]
 8012200:	b25b      	sxtb	r3, r3
 8012202:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012204:	4ba6      	ldr	r3, [pc, #664]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012206:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801220a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801220c:	4ba4      	ldr	r3, [pc, #656]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801220e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012212:	f107 0108 	add.w	r1, r7, #8
 8012216:	2207      	movs	r2, #7
 8012218:	4618      	mov	r0, r3
 801221a:	f002 fe36 	bl	8014e8a <RegionVerify>
 801221e:	4603      	mov	r3, r0
 8012220:	f083 0301 	eor.w	r3, r3, #1
 8012224:	b2db      	uxtb	r3, r3
 8012226:	2b00      	cmp	r3, #0
 8012228:	d002      	beq.n	8012230 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801222a:	2303      	movs	r3, #3
 801222c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801222e:	e1e4      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8012236:	4b9a      	ldr	r3, [pc, #616]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012238:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801223c:	f107 0108 	add.w	r1, r7, #8
 8012240:	2200      	movs	r2, #0
 8012242:	4618      	mov	r0, r3
 8012244:	f002 fe21 	bl	8014e8a <RegionVerify>
 8012248:	4603      	mov	r3, r0
 801224a:	f083 0301 	eor.w	r3, r3, #1
 801224e:	b2db      	uxtb	r3, r3
 8012250:	2b00      	cmp	r3, #0
 8012252:	d002      	beq.n	801225a <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012254:	2303      	movs	r3, #3
 8012256:	75fb      	strb	r3, [r7, #23]
            break;
 8012258:	e1cf      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801225a:	4b91      	ldr	r3, [pc, #580]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801225c:	687a      	ldr	r2, [r7, #4]
 801225e:	336c      	adds	r3, #108	@ 0x6c
 8012260:	3204      	adds	r2, #4
 8012262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012266:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801226a:	e1c6      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	7a1b      	ldrb	r3, [r3, #8]
 8012270:	b25b      	sxtb	r3, r3
 8012272:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012274:	4b8a      	ldr	r3, [pc, #552]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012276:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801227a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801227c:	4b88      	ldr	r3, [pc, #544]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801227e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012282:	f107 0108 	add.w	r1, r7, #8
 8012286:	2207      	movs	r2, #7
 8012288:	4618      	mov	r0, r3
 801228a:	f002 fdfe 	bl	8014e8a <RegionVerify>
 801228e:	4603      	mov	r3, r0
 8012290:	2b00      	cmp	r3, #0
 8012292:	d008      	beq.n	80122a6 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012294:	4b82      	ldr	r3, [pc, #520]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	33b4      	adds	r3, #180	@ 0xb4
 801229a:	3204      	adds	r2, #4
 801229c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122a0:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80122a4:	e1a9      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122a6:	2303      	movs	r3, #3
 80122a8:	75fb      	strb	r3, [r7, #23]
            break;
 80122aa:	e1a6      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	7a1b      	ldrb	r3, [r3, #8]
 80122b0:	b25b      	sxtb	r3, r3
 80122b2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80122b4:	4b7a      	ldr	r3, [pc, #488]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80122b6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80122ba:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80122bc:	4b78      	ldr	r3, [pc, #480]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80122be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80122c2:	f107 0108 	add.w	r1, r7, #8
 80122c6:	2207      	movs	r2, #7
 80122c8:	4618      	mov	r0, r3
 80122ca:	f002 fdde 	bl	8014e8a <RegionVerify>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d019      	beq.n	8012308 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80122d4:	4b72      	ldr	r3, [pc, #456]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	3374      	adds	r3, #116	@ 0x74
 80122da:	3204      	adds	r2, #4
 80122dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122e0:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80122e4:	4b6e      	ldr	r3, [pc, #440]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80122e6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80122ea:	2b02      	cmp	r3, #2
 80122ec:	f040 817e 	bne.w	80125ec <LoRaMacMibSetRequestConfirm+0x730>
 80122f0:	4b6b      	ldr	r3, [pc, #428]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80122f2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f000 8178 	beq.w	80125ec <LoRaMacMibSetRequestConfirm+0x730>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80122fc:	4b69      	ldr	r3, [pc, #420]	@ (80124a4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 80122fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012300:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012302:	f7fe fc1d 	bl	8010b40 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012306:	e171      	b.n	80125ec <LoRaMacMibSetRequestConfirm+0x730>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012308:	2303      	movs	r3, #3
 801230a:	75fb      	strb	r3, [r7, #23]
            break;
 801230c:	e16e      	b.n	80125ec <LoRaMacMibSetRequestConfirm+0x730>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	7a1b      	ldrb	r3, [r3, #8]
 8012312:	b25b      	sxtb	r3, r3
 8012314:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012316:	4b62      	ldr	r3, [pc, #392]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012318:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801231c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801231e:	4b60      	ldr	r3, [pc, #384]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012320:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012324:	f107 0108 	add.w	r1, r7, #8
 8012328:	2207      	movs	r2, #7
 801232a:	4618      	mov	r0, r3
 801232c:	f002 fdad 	bl	8014e8a <RegionVerify>
 8012330:	4603      	mov	r3, r0
 8012332:	2b00      	cmp	r3, #0
 8012334:	d008      	beq.n	8012348 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012336:	4b5a      	ldr	r3, [pc, #360]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012338:	687a      	ldr	r2, [r7, #4]
 801233a:	33bc      	adds	r3, #188	@ 0xbc
 801233c:	3204      	adds	r2, #4
 801233e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012342:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012346:	e158      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012348:	2303      	movs	r3, #3
 801234a:	75fb      	strb	r3, [r7, #23]
            break;
 801234c:	e155      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012354:	2301      	movs	r3, #1
 8012356:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012358:	4b51      	ldr	r3, [pc, #324]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801235a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801235e:	f107 020c 	add.w	r2, r7, #12
 8012362:	4611      	mov	r1, r2
 8012364:	4618      	mov	r0, r3
 8012366:	f002 fdb9 	bl	8014edc <RegionChanMaskSet>
 801236a:	4603      	mov	r3, r0
 801236c:	f083 0301 	eor.w	r3, r3, #1
 8012370:	b2db      	uxtb	r3, r3
 8012372:	2b00      	cmp	r3, #0
 8012374:	f000 813c 	beq.w	80125f0 <LoRaMacMibSetRequestConfirm+0x734>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012378:	2303      	movs	r3, #3
 801237a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801237c:	e138      	b.n	80125f0 <LoRaMacMibSetRequestConfirm+0x734>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012384:	2300      	movs	r3, #0
 8012386:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012388:	4b45      	ldr	r3, [pc, #276]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801238a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801238e:	f107 020c 	add.w	r2, r7, #12
 8012392:	4611      	mov	r1, r2
 8012394:	4618      	mov	r0, r3
 8012396:	f002 fda1 	bl	8014edc <RegionChanMaskSet>
 801239a:	4603      	mov	r3, r0
 801239c:	f083 0301 	eor.w	r3, r3, #1
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	f000 8126 	beq.w	80125f4 <LoRaMacMibSetRequestConfirm+0x738>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123a8:	2303      	movs	r3, #3
 80123aa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80123ac:	e122      	b.n	80125f4 <LoRaMacMibSetRequestConfirm+0x738>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	791b      	ldrb	r3, [r3, #4]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d009      	beq.n	80123ca <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80123ba:	2b0f      	cmp	r3, #15
 80123bc:	d805      	bhi.n	80123ca <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	791a      	ldrb	r2, [r3, #4]
 80123c2:	4b37      	ldr	r3, [pc, #220]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80123c4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80123c8:	e117      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123ca:	2303      	movs	r3, #3
 80123cc:	75fb      	strb	r3, [r7, #23]
            break;
 80123ce:	e114      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	4a32      	ldr	r2, [pc, #200]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80123d6:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 80123d8:	e10f      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	4a30      	ldr	r2, [pc, #192]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80123e0:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 80123e2:	e10a      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	4a2d      	ldr	r2, [pc, #180]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80123ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80123ec:	e105      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	685b      	ldr	r3, [r3, #4]
 80123f2:	4a2b      	ldr	r2, [pc, #172]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80123f4:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 80123f6:	e100      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	4a28      	ldr	r2, [pc, #160]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80123fe:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8012400:	e0fb      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012408:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801240a:	4b25      	ldr	r3, [pc, #148]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801240c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012410:	f107 0108 	add.w	r1, r7, #8
 8012414:	2206      	movs	r2, #6
 8012416:	4618      	mov	r0, r3
 8012418:	f002 fd37 	bl	8014e8a <RegionVerify>
 801241c:	4603      	mov	r3, r0
 801241e:	2b00      	cmp	r3, #0
 8012420:	d005      	beq.n	801242e <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012422:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012426:	4b1e      	ldr	r3, [pc, #120]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012428:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801242c:	e0e5      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801242e:	2303      	movs	r3, #3
 8012430:	75fb      	strb	r3, [r7, #23]
            break;
 8012432:	e0e2      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801243a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801243c:	4b18      	ldr	r3, [pc, #96]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801243e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012442:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012444:	4b16      	ldr	r3, [pc, #88]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012446:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801244a:	f107 0108 	add.w	r1, r7, #8
 801244e:	2205      	movs	r2, #5
 8012450:	4618      	mov	r0, r3
 8012452:	f002 fd1a 	bl	8014e8a <RegionVerify>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d005      	beq.n	8012468 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801245c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012460:	4b0f      	ldr	r3, [pc, #60]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012462:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012466:	e0c8      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012468:	2303      	movs	r3, #3
 801246a:	75fb      	strb	r3, [r7, #23]
            break;
 801246c:	e0c5      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012474:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012476:	4b0a      	ldr	r3, [pc, #40]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012478:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801247c:	f107 0108 	add.w	r1, r7, #8
 8012480:	220a      	movs	r2, #10
 8012482:	4618      	mov	r0, r3
 8012484:	f002 fd01 	bl	8014e8a <RegionVerify>
 8012488:	4603      	mov	r3, r0
 801248a:	2b00      	cmp	r3, #0
 801248c:	d005      	beq.n	801249a <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801248e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012492:	4b03      	ldr	r3, [pc, #12]	@ (80124a0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012494:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012498:	e0af      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801249a:	2303      	movs	r3, #3
 801249c:	75fb      	strb	r3, [r7, #23]
            break;
 801249e:	e0ac      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
 80124a0:	20000cd4 	.word	0x20000cd4
 80124a4:	0801c570 	.word	0x0801c570
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80124ae:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80124b0:	4b59      	ldr	r3, [pc, #356]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 80124b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80124b6:	f107 0108 	add.w	r1, r7, #8
 80124ba:	2209      	movs	r2, #9
 80124bc:	4618      	mov	r0, r3
 80124be:	f002 fce4 	bl	8014e8a <RegionVerify>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d005      	beq.n	80124d4 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80124c8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80124cc:	4b52      	ldr	r3, [pc, #328]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 80124ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80124d2:	e092      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124d4:	2303      	movs	r3, #3
 80124d6:	75fb      	strb	r3, [r7, #23]
            break;
 80124d8:	e08f      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mibSet->Param.SystemMaxRxError <= 500 )
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80124e2:	d80a      	bhi.n	80124fa <LoRaMacMibSetRequestConfirm+0x63e>
            { // Only apply the new value if in range 0..500 ms else keep current value.
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	4a4b      	ldr	r2, [pc, #300]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 80124ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80124ee:	4b4a      	ldr	r3, [pc, #296]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 80124f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80124f4:	4a48      	ldr	r2, [pc, #288]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 80124f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
#endif
            break;
 80124f8:	e07f      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124fa:	2303      	movs	r3, #3
 80124fc:	75fb      	strb	r3, [r7, #23]
            break;
 80124fe:	e07c      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	791a      	ldrb	r2, [r3, #4]
 8012504:	4b44      	ldr	r3, [pc, #272]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012506:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 801250a:	4b43      	ldr	r3, [pc, #268]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 801250c:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8012510:	4b41      	ldr	r3, [pc, #260]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8012516:	e070      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	685b      	ldr	r3, [r3, #4]
 801251c:	4a3e      	ldr	r2, [pc, #248]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 801251e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8012522:	e06a      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	4a3b      	ldr	r2, [pc, #236]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 801252a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 801252e:	e064      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012530:	f7fe fd38 	bl	8010fa4 <RestoreNvmData>
 8012534:	4603      	mov	r3, r0
 8012536:	75fb      	strb	r3, [r7, #23]
            break;
 8012538:	e05f      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	799b      	ldrb	r3, [r3, #6]
 801253e:	2b01      	cmp	r3, #1
 8012540:	d80d      	bhi.n	801255e <LoRaMacMibSetRequestConfirm+0x6a2>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012542:	4a35      	ldr	r2, [pc, #212]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6858      	ldr	r0, [r3, #4]
 8012550:	f001 fdd6 	bl	8014100 <LoRaMacCryptoSetLrWanVersion>
 8012554:	4603      	mov	r3, r0
 8012556:	2b00      	cmp	r3, #0
 8012558:	d04e      	beq.n	80125f8 <LoRaMacMibSetRequestConfirm+0x73c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801255a:	2311      	movs	r3, #17
 801255c:	e058      	b.n	8012610 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801255e:	2303      	movs	r3, #3
 8012560:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012562:	e049      	b.n	80125f8 <LoRaMacMibSetRequestConfirm+0x73c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	4a2b      	ldr	r2, [pc, #172]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 801256a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 801256e:	e044      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	791a      	ldrb	r2, [r3, #4]
 8012574:	4b28      	ldr	r3, [pc, #160]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012576:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 801257a:	e03e      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	889a      	ldrh	r2, [r3, #4]
 8012580:	4b25      	ldr	r3, [pc, #148]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012582:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8012586:	e038      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	889a      	ldrh	r2, [r3, #4]
 801258c:	4b22      	ldr	r3, [pc, #136]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 801258e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8012592:	e032      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	889a      	ldrh	r2, [r3, #4]
 8012598:	4b1f      	ldr	r3, [pc, #124]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 801259a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 801259e:	e02c      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	889a      	ldrh	r2, [r3, #4]
 80125a4:	4b1c      	ldr	r3, [pc, #112]	@ (8012618 <LoRaMacMibSetRequestConfirm+0x75c>)
 80125a6:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 80125aa:	e026      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80125ac:	2318      	movs	r3, #24
 80125ae:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80125b0:	e023      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80125b2:	2318      	movs	r3, #24
 80125b4:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80125b6:	e020      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 fd00 	bl	8012fbe <LoRaMacMibClassBSetRequestConfirm>
 80125be:	4603      	mov	r3, r0
 80125c0:	75fb      	strb	r3, [r7, #23]
            break;
 80125c2:	e01a      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125c4:	bf00      	nop
 80125c6:	e018      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125c8:	bf00      	nop
 80125ca:	e016      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125cc:	bf00      	nop
 80125ce:	e014      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125d0:	bf00      	nop
 80125d2:	e012      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125d4:	bf00      	nop
 80125d6:	e010      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125d8:	bf00      	nop
 80125da:	e00e      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125dc:	bf00      	nop
 80125de:	e00c      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125e0:	bf00      	nop
 80125e2:	e00a      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125e4:	bf00      	nop
 80125e6:	e008      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125e8:	bf00      	nop
 80125ea:	e006      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125ec:	bf00      	nop
 80125ee:	e004      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125f0:	bf00      	nop
 80125f2:	e002      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125f4:	bf00      	nop
 80125f6:	e000      	b.n	80125fa <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80125f8:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 80125fa:	7dfb      	ldrb	r3, [r7, #23]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d106      	bne.n	801260e <LoRaMacMibSetRequestConfirm+0x752>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012600:	4a06      	ldr	r2, [pc, #24]	@ (801261c <LoRaMacMibSetRequestConfirm+0x760>)
 8012602:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012606:	f043 0320 	orr.w	r3, r3, #32
 801260a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 801260e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3718      	adds	r7, #24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	20000cd4 	.word	0x20000cd4
 801261c:	200007a0 	.word	0x200007a0

08012620 <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 8012628:	4b0a      	ldr	r3, [pc, #40]	@ (8012654 <OnAbpJoinPendingTimerEvent+0x34>)
 801262a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801262e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012632:	4a08      	ldr	r2, [pc, #32]	@ (8012654 <OnAbpJoinPendingTimerEvent+0x34>)
 8012634:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 8012638:	4a06      	ldr	r2, [pc, #24]	@ (8012654 <OnAbpJoinPendingTimerEvent+0x34>)
 801263a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801263e:	f043 0310 	orr.w	r3, r3, #16
 8012642:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    OnMacProcessNotify( );
 8012646:	f7fe fe5d 	bl	8011304 <OnMacProcessNotify>
}
 801264a:	bf00      	nop
 801264c:	3708      	adds	r7, #8
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	200007a0 	.word	0x200007a0

08012658 <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af02      	add	r7, sp, #8
    static bool initialized = false;

    if( initialized == false )
 801265e:	4b14      	ldr	r3, [pc, #80]	@ (80126b0 <AbpJoinPendingStart+0x58>)
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	f083 0301 	eor.w	r3, r3, #1
 8012666:	b2db      	uxtb	r3, r3
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00b      	beq.n	8012684 <AbpJoinPendingStart+0x2c>
    {
        initialized = true;
 801266c:	4b10      	ldr	r3, [pc, #64]	@ (80126b0 <AbpJoinPendingStart+0x58>)
 801266e:	2201      	movs	r2, #1
 8012670:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 8012672:	2300      	movs	r3, #0
 8012674:	9300      	str	r3, [sp, #0]
 8012676:	4b0f      	ldr	r3, [pc, #60]	@ (80126b4 <AbpJoinPendingStart+0x5c>)
 8012678:	2200      	movs	r2, #0
 801267a:	f04f 31ff 	mov.w	r1, #4294967295
 801267e:	480e      	ldr	r0, [pc, #56]	@ (80126b8 <AbpJoinPendingStart+0x60>)
 8012680:	f008 fe36 	bl	801b2f0 <UTIL_TIMER_Create>
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 8012684:	4b0d      	ldr	r3, [pc, #52]	@ (80126bc <AbpJoinPendingStart+0x64>)
 8012686:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801268a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801268e:	4a0b      	ldr	r2, [pc, #44]	@ (80126bc <AbpJoinPendingStart+0x64>)
 8012690:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 8012694:	4808      	ldr	r0, [pc, #32]	@ (80126b8 <AbpJoinPendingStart+0x60>)
 8012696:	f008 fecf 	bl	801b438 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 801269a:	210a      	movs	r1, #10
 801269c:	4806      	ldr	r0, [pc, #24]	@ (80126b8 <AbpJoinPendingStart+0x60>)
 801269e:	f008 ff3b 	bl	801b518 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 80126a2:	4805      	ldr	r0, [pc, #20]	@ (80126b8 <AbpJoinPendingStart+0x60>)
 80126a4:	f008 fe5a 	bl	801b35c <UTIL_TIMER_Start>
}
 80126a8:	bf00      	nop
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	200018f4 	.word	0x200018f4
 80126b4:	08012621 	.word	0x08012621
 80126b8:	20000c3c 	.word	0x20000c3c
 80126bc:	200007a0 	.word	0x200007a0

080126c0 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b08a      	sub	sp, #40	@ 0x28
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80126c8:	2302      	movs	r3, #2
 80126ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
 80126ce:	2300      	movs	r3, #0
 80126d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80126d4:	2300      	movs	r3, #0
 80126d6:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d101      	bne.n	80126e2 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80126de:	2303      	movs	r3, #3
 80126e0:	e188      	b.n	80129f4 <LoRaMacMlmeRequest+0x334>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2200      	movs	r2, #0
 80126e6:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80126e8:	f7fc fb14 	bl	800ed14 <LoRaMacIsBusy>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d001      	beq.n	80126f6 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80126f2:	2301      	movs	r3, #1
 80126f4:	e17e      	b.n	80129f4 <LoRaMacMlmeRequest+0x334>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80126f6:	f001 f99d 	bl	8013a34 <LoRaMacConfirmQueueIsFull>
 80126fa:	4603      	mov	r3, r0
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d001      	beq.n	8012704 <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8012700:	2301      	movs	r3, #1
 8012702:	e177      	b.n	80129f4 <LoRaMacMlmeRequest+0x334>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012704:	f001 f98a 	bl	8013a1c <LoRaMacConfirmQueueGetCnt>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	d104      	bne.n	8012718 <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801270e:	2214      	movs	r2, #20
 8012710:	2100      	movs	r1, #0
 8012712:	48ba      	ldr	r0, [pc, #744]	@ (80129fc <LoRaMacMlmeRequest+0x33c>)
 8012714:	f004 fdb2 	bl	801727c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012718:	4bb9      	ldr	r3, [pc, #740]	@ (8012a00 <LoRaMacMlmeRequest+0x340>)
 801271a:	2201      	movs	r2, #1
 801271c:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012720:	4ab7      	ldr	r2, [pc, #732]	@ (8012a00 <LoRaMacMlmeRequest+0x340>)
 8012722:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012726:	f043 0304 	orr.w	r3, r3, #4
 801272a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012736:	2301      	movs	r3, #1
 8012738:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 801273c:	2300      	movs	r3, #0
 801273e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8012742:	2300      	movs	r3, #0
 8012744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	3b01      	subs	r3, #1
 801274e:	2b0c      	cmp	r3, #12
 8012750:	f200 811e 	bhi.w	8012990 <LoRaMacMlmeRequest+0x2d0>
 8012754:	a201      	add	r2, pc, #4	@ (adr r2, 801275c <LoRaMacMlmeRequest+0x9c>)
 8012756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801275a:	bf00      	nop
 801275c:	08012791 	.word	0x08012791
 8012760:	08012991 	.word	0x08012991
 8012764:	08012991 	.word	0x08012991
 8012768:	08012991 	.word	0x08012991
 801276c:	08012875 	.word	0x08012875
 8012770:	08012899 	.word	0x08012899
 8012774:	08012991 	.word	0x08012991
 8012778:	08012991 	.word	0x08012991
 801277c:	080128b7 	.word	0x080128b7
 8012780:	08012991 	.word	0x08012991
 8012784:	0801295f 	.word	0x0801295f
 8012788:	080128f3 	.word	0x080128f3
 801278c:	0801293d 	.word	0x0801293d
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012790:	4b9b      	ldr	r3, [pc, #620]	@ (8012a00 <LoRaMacMlmeRequest+0x340>)
 8012792:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012796:	f003 0320 	and.w	r3, r3, #32
 801279a:	2b00      	cmp	r3, #0
 801279c:	d001      	beq.n	80127a2 <LoRaMacMlmeRequest+0xe2>
            {
                return LORAMAC_STATUS_BUSY;
 801279e:	2301      	movs	r3, #1
 80127a0:	e128      	b.n	80129f4 <LoRaMacMlmeRequest+0x334>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	791b      	ldrb	r3, [r3, #4]
 80127a6:	2b02      	cmp	r3, #2
 80127a8:	d135      	bne.n	8012816 <LoRaMacMlmeRequest+0x156>
            {
                ResetMacParameters( false );
 80127aa:	2000      	movs	r0, #0
 80127ac:	f7fe f85a 	bl	8010864 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80127b0:	4b94      	ldr	r3, [pc, #592]	@ (8012a04 <LoRaMacMlmeRequest+0x344>)
 80127b2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	795b      	ldrb	r3, [r3, #5]
 80127ba:	b25b      	sxtb	r3, r3
 80127bc:	2200      	movs	r2, #0
 80127be:	4619      	mov	r1, r3
 80127c0:	f002 fc4b 	bl	801505a <RegionAlternateDr>
 80127c4:	4603      	mov	r3, r0
 80127c6:	461a      	mov	r2, r3
 80127c8:	4b8e      	ldr	r3, [pc, #568]	@ (8012a04 <LoRaMacMlmeRequest+0x344>)
 80127ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80127d4:	4b8b      	ldr	r3, [pc, #556]	@ (8012a04 <LoRaMacMlmeRequest+0x344>)
 80127d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80127da:	2307      	movs	r3, #7
 80127dc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 80127e0:	20ff      	movs	r0, #255	@ 0xff
 80127e2:	f7fd fdc3 	bl	801036c <SendReJoinReq>
 80127e6:	4603      	mov	r3, r0
 80127e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 80127ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	f000 80cf 	beq.w	8012994 <LoRaMacMlmeRequest+0x2d4>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80127f6:	4b83      	ldr	r3, [pc, #524]	@ (8012a04 <LoRaMacMlmeRequest+0x344>)
 80127f8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	795b      	ldrb	r3, [r3, #5]
 8012800:	b25b      	sxtb	r3, r3
 8012802:	2201      	movs	r2, #1
 8012804:	4619      	mov	r1, r3
 8012806:	f002 fc28 	bl	801505a <RegionAlternateDr>
 801280a:	4603      	mov	r3, r0
 801280c:	461a      	mov	r2, r3
 801280e:	4b7d      	ldr	r3, [pc, #500]	@ (8012a04 <LoRaMacMlmeRequest+0x344>)
 8012810:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012814:	e0be      	b.n	8012994 <LoRaMacMlmeRequest+0x2d4>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	791b      	ldrb	r3, [r3, #4]
 801281a:	2b01      	cmp	r3, #1
 801281c:	f040 80ba 	bne.w	8012994 <LoRaMacMlmeRequest+0x2d4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012820:	4b78      	ldr	r3, [pc, #480]	@ (8012a04 <LoRaMacMlmeRequest+0x344>)
 8012822:	2200      	movs	r2, #0
 8012824:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012828:	2302      	movs	r3, #2
 801282a:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801282c:	4b75      	ldr	r3, [pc, #468]	@ (8012a04 <LoRaMacMlmeRequest+0x344>)
 801282e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012832:	f107 020c 	add.w	r2, r7, #12
 8012836:	4611      	mov	r1, r2
 8012838:	4618      	mov	r0, r3
 801283a:	f002 fb14 	bl	8014e66 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	791a      	ldrb	r2, [r3, #4]
 8012842:	4b70      	ldr	r3, [pc, #448]	@ (8012a04 <LoRaMacMlmeRequest+0x344>)
 8012844:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012848:	2300      	movs	r3, #0
 801284a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 801284e:	2301      	movs	r3, #1
 8012850:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 8012854:	f7fe fd56 	bl	8011304 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012858:	4a69      	ldr	r2, [pc, #420]	@ (8012a00 <LoRaMacMlmeRequest+0x340>)
 801285a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801285e:	f043 0310 	orr.w	r3, r3, #16
 8012862:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                isAbpJoinPending = true;
 8012866:	2301      	movs	r3, #1
 8012868:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                status = LORAMAC_STATUS_OK;
 801286c:	2300      	movs	r3, #0
 801286e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012872:	e08f      	b.n	8012994 <LoRaMacMlmeRequest+0x2d4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012874:	2300      	movs	r3, #0
 8012876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801287a:	f107 031c 	add.w	r3, r7, #28
 801287e:	2200      	movs	r2, #0
 8012880:	4619      	mov	r1, r3
 8012882:	2002      	movs	r0, #2
 8012884:	f000 fd26 	bl	80132d4 <LoRaMacCommandsAddCmd>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	f000 8084 	beq.w	8012998 <LoRaMacMlmeRequest+0x2d8>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012890:	2313      	movs	r3, #19
 8012892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012896:	e07f      	b.n	8012998 <LoRaMacMlmeRequest+0x2d8>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	8898      	ldrh	r0, [r3, #4]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6899      	ldr	r1, [r3, #8]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	461a      	mov	r2, r3
 80128aa:	f7fe fb5b 	bl	8010f64 <SetTxContinuousWave>
 80128ae:	4603      	mov	r3, r0
 80128b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80128b4:	e077      	b.n	80129a6 <LoRaMacMlmeRequest+0x2e6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80128b6:	2300      	movs	r3, #0
 80128b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80128bc:	f107 0308 	add.w	r3, r7, #8
 80128c0:	4619      	mov	r1, r3
 80128c2:	200d      	movs	r0, #13
 80128c4:	f000 fd86 	bl	80133d4 <LoRaMacCommandsGetCmd>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d103      	bne.n	80128d6 <LoRaMacMlmeRequest+0x216>
            {
                status = LORAMAC_STATUS_OK;
 80128ce:	2300      	movs	r3, #0
 80128d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80128d4:	e062      	b.n	801299c <LoRaMacMlmeRequest+0x2dc>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80128d6:	f107 031c 	add.w	r3, r7, #28
 80128da:	2200      	movs	r2, #0
 80128dc:	4619      	mov	r1, r3
 80128de:	200d      	movs	r0, #13
 80128e0:	f000 fcf8 	bl	80132d4 <LoRaMacCommandsAddCmd>
 80128e4:	4603      	mov	r3, r0
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d058      	beq.n	801299c <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80128ea:	2313      	movs	r3, #19
 80128ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80128f0:	e054      	b.n	801299c <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80128f2:	4b44      	ldr	r3, [pc, #272]	@ (8012a04 <LoRaMacMlmeRequest+0x344>)
 80128f4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d151      	bne.n	80129a0 <LoRaMacMlmeRequest+0x2e0>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	791b      	ldrb	r3, [r3, #4]
 8012900:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	791b      	ldrb	r3, [r3, #4]
 8012908:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801290c:	b2db      	uxtb	r3, r3
 801290e:	4618      	mov	r0, r3
 8012910:	f000 fb2a 	bl	8012f68 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012914:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8012918:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 801291a:	2300      	movs	r3, #0
 801291c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012920:	f107 031c 	add.w	r3, r7, #28
 8012924:	2201      	movs	r2, #1
 8012926:	4619      	mov	r1, r3
 8012928:	2010      	movs	r0, #16
 801292a:	f000 fcd3 	bl	80132d4 <LoRaMacCommandsAddCmd>
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d035      	beq.n	80129a0 <LoRaMacMlmeRequest+0x2e0>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012934:	2313      	movs	r3, #19
 8012936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 801293a:	e031      	b.n	80129a0 <LoRaMacMlmeRequest+0x2e0>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801293c:	2300      	movs	r3, #0
 801293e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012942:	f107 031c 	add.w	r3, r7, #28
 8012946:	2200      	movs	r2, #0
 8012948:	4619      	mov	r1, r3
 801294a:	2012      	movs	r0, #18
 801294c:	f000 fcc2 	bl	80132d4 <LoRaMacCommandsAddCmd>
 8012950:	4603      	mov	r3, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	d026      	beq.n	80129a4 <LoRaMacMlmeRequest+0x2e4>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012956:	2313      	movs	r3, #19
 8012958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801295c:	e022      	b.n	80129a4 <LoRaMacMlmeRequest+0x2e4>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 801295e:	2301      	movs	r3, #1
 8012960:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012964:	f000 fab6 	bl	8012ed4 <LoRaMacClassBIsAcquisitionInProgress>
 8012968:	4603      	mov	r3, r0
 801296a:	f083 0301 	eor.w	r3, r3, #1
 801296e:	b2db      	uxtb	r3, r3
 8012970:	2b00      	cmp	r3, #0
 8012972:	d009      	beq.n	8012988 <LoRaMacMlmeRequest+0x2c8>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012974:	2000      	movs	r0, #0
 8012976:	f000 fa8f 	bl	8012e98 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801297a:	2000      	movs	r0, #0
 801297c:	f000 fab1 	bl	8012ee2 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012980:	2300      	movs	r3, #0
 8012982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012986:	e00e      	b.n	80129a6 <LoRaMacMlmeRequest+0x2e6>
                status = LORAMAC_STATUS_BUSY;
 8012988:	2301      	movs	r3, #1
 801298a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801298e:	e00a      	b.n	80129a6 <LoRaMacMlmeRequest+0x2e6>
        }
        default:
            break;
 8012990:	bf00      	nop
 8012992:	e008      	b.n	80129a6 <LoRaMacMlmeRequest+0x2e6>
            break;
 8012994:	bf00      	nop
 8012996:	e006      	b.n	80129a6 <LoRaMacMlmeRequest+0x2e6>
            break;
 8012998:	bf00      	nop
 801299a:	e004      	b.n	80129a6 <LoRaMacMlmeRequest+0x2e6>
            break;
 801299c:	bf00      	nop
 801299e:	e002      	b.n	80129a6 <LoRaMacMlmeRequest+0x2e6>
            break;
 80129a0:	bf00      	nop
 80129a2:	e000      	b.n	80129a6 <LoRaMacMlmeRequest+0x2e6>
            break;
 80129a4:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80129a6:	4b16      	ldr	r3, [pc, #88]	@ (8012a00 <LoRaMacMlmeRequest+0x340>)
 80129a8:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80129b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d010      	beq.n	80129da <LoRaMacMlmeRequest+0x31a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80129b8:	f001 f830 	bl	8013a1c <LoRaMacConfirmQueueGetCnt>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d116      	bne.n	80129f0 <LoRaMacMlmeRequest+0x330>
        {
            MacCtx.NodeAckRequested = false;
 80129c2:	4b0f      	ldr	r3, [pc, #60]	@ (8012a00 <LoRaMacMlmeRequest+0x340>)
 80129c4:	2200      	movs	r2, #0
 80129c6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80129ca:	4a0d      	ldr	r2, [pc, #52]	@ (8012a00 <LoRaMacMlmeRequest+0x340>)
 80129cc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80129d0:	f023 0304 	bic.w	r3, r3, #4
 80129d4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80129d8:	e00a      	b.n	80129f0 <LoRaMacMlmeRequest+0x330>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80129da:	f107 0320 	add.w	r3, r7, #32
 80129de:	4618      	mov	r0, r3
 80129e0:	f000 fec8 	bl	8013774 <LoRaMacConfirmQueueAdd>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        if( isAbpJoinPending == true )
 80129e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d001      	beq.n	80129f0 <LoRaMacMlmeRequest+0x330>
        {
            AbpJoinPendingStart( );
 80129ec:	f7ff fe34 	bl	8012658 <AbpJoinPendingStart>
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 80129f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	3728      	adds	r7, #40	@ 0x28
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	20000bf4 	.word	0x20000bf4
 8012a00:	200007a0 	.word	0x200007a0
 8012a04:	20000cd4 	.word	0x20000cd4

08012a08 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012a08:	b5b0      	push	{r4, r5, r7, lr}
 8012a0a:	b092      	sub	sp, #72	@ 0x48
 8012a0c:	af02      	add	r7, sp, #8
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	460b      	mov	r3, r1
 8012a12:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012a14:	2302      	movs	r3, #2
 8012a16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 8012a20:	2300      	movs	r3, #0
 8012a22:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012a24:	2300      	movs	r3, #0
 8012a26:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d101      	bne.n	8012a3a <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a36:	2303      	movs	r3, #3
 8012a38:	e113      	b.n	8012c62 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012a40:	f7fc f968 	bl	800ed14 <LoRaMacIsBusy>
 8012a44:	4603      	mov	r3, r0
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d001      	beq.n	8012a4e <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	e109      	b.n	8012c62 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f107 040c 	add.w	r4, r7, #12
 8012a54:	461d      	mov	r5, r3
 8012a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a5a:	682b      	ldr	r3, [r5, #0]
 8012a5c:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012a64:	2214      	movs	r2, #20
 8012a66:	2100      	movs	r1, #0
 8012a68:	4880      	ldr	r0, [pc, #512]	@ (8012c6c <LoRaMacMcpsRequest+0x264>)
 8012a6a:	f004 fc07 	bl	801727c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a6e:	4b80      	ldr	r3, [pc, #512]	@ (8012c70 <LoRaMacMcpsRequest+0x268>)
 8012a70:	2201      	movs	r2, #1
 8012a72:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012a76:	4b7f      	ldr	r3, [pc, #508]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012a78:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012a7c:	2b02      	cmp	r3, #2
 8012a7e:	d111      	bne.n	8012aa4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012a80:	4b7c      	ldr	r3, [pc, #496]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012a82:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012a86:	2b02      	cmp	r3, #2
 8012a88:	d10c      	bne.n	8012aa4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012a8a:	4b7a      	ldr	r3, [pc, #488]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012a8c:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8012a90:	f083 0301 	eor.w	r3, r3, #1
 8012a94:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d004      	beq.n	8012aa4 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012a9a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d101      	bne.n	8012aa4 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012aa4:	7b3b      	ldrb	r3, [r7, #12]
 8012aa6:	2b03      	cmp	r3, #3
 8012aa8:	d030      	beq.n	8012b0c <LoRaMacMcpsRequest+0x104>
 8012aaa:	2b03      	cmp	r3, #3
 8012aac:	dc3f      	bgt.n	8012b2e <LoRaMacMcpsRequest+0x126>
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d002      	beq.n	8012ab8 <LoRaMacMcpsRequest+0xb0>
 8012ab2:	2b01      	cmp	r3, #1
 8012ab4:	d015      	beq.n	8012ae2 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012ab6:	e03a      	b.n	8012b2e <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012ab8:	2301      	movs	r3, #1
 8012aba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012abe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012ac2:	2202      	movs	r2, #2
 8012ac4:	f362 1347 	bfi	r3, r2, #5, #3
 8012ac8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012acc:	7c3b      	ldrb	r3, [r7, #16]
 8012ace:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012ad6:	8b3b      	ldrh	r3, [r7, #24]
 8012ad8:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8012ada:	7ebb      	ldrb	r3, [r7, #26]
 8012adc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012ae0:	e026      	b.n	8012b30 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012ae8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012aec:	2204      	movs	r2, #4
 8012aee:	f362 1347 	bfi	r3, r2, #5, #3
 8012af2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8012af6:	7c3b      	ldrb	r3, [r7, #16]
 8012af8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012b00:	8b3b      	ldrh	r3, [r7, #24]
 8012b02:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012b04:	7ebb      	ldrb	r3, [r7, #26]
 8012b06:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012b0a:	e011      	b.n	8012b30 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012b12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012b16:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8012b1a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012b22:	8abb      	ldrh	r3, [r7, #20]
 8012b24:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8012b26:	7dbb      	ldrb	r3, [r7, #22]
 8012b28:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012b2c:	e000      	b.n	8012b30 <LoRaMacMcpsRequest+0x128>
            break;
 8012b2e:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012b30:	2302      	movs	r3, #2
 8012b32:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012b36:	4b4f      	ldr	r3, [pc, #316]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012b38:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012b3c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b40:	4b4c      	ldr	r3, [pc, #304]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012b42:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012b46:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012b4a:	4611      	mov	r1, r2
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f002 f961 	bl	8014e14 <RegionGetPhyParam>
 8012b52:	4603      	mov	r3, r0
 8012b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b58:	b25b      	sxtb	r3, r3
 8012b5a:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	bfb8      	it	lt
 8012b62:	4613      	movlt	r3, r2
 8012b64:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012b68:	4b42      	ldr	r3, [pc, #264]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012b6a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012b6e:	4a41      	ldr	r2, [pc, #260]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012b70:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8012b74:	4a3f      	ldr	r2, [pc, #252]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012b76:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7fc fa66 	bl	800f04c <CheckForMinimumAbpDatarate>
 8012b80:	4603      	mov	r3, r0
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d002      	beq.n	8012b8c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8012b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b88:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8012b8c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d05f      	beq.n	8012c54 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012b94:	4b37      	ldr	r3, [pc, #220]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012b96:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012b9a:	f083 0301 	eor.w	r3, r3, #1
 8012b9e:	b2db      	uxtb	r3, r3
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d10e      	bne.n	8012bc2 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012ba4:	4b33      	ldr	r3, [pc, #204]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012ba6:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012baa:	4a32      	ldr	r2, [pc, #200]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012bac:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8012bb0:	4a30      	ldr	r2, [pc, #192]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012bb2:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fc fa48 	bl	800f04c <CheckForMinimumAbpDatarate>
 8012bbc:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d01c      	beq.n	8012bfc <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8012bc2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012bc6:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012bca:	4b2a      	ldr	r3, [pc, #168]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012bcc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012bd4:	4b27      	ldr	r3, [pc, #156]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012bd6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012bda:	f107 0120 	add.w	r1, r7, #32
 8012bde:	2205      	movs	r2, #5
 8012be0:	4618      	mov	r0, r3
 8012be2:	f002 f952 	bl	8014e8a <RegionVerify>
 8012be6:	4603      	mov	r3, r0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d005      	beq.n	8012bf8 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012bec:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8012bf0:	4b20      	ldr	r3, [pc, #128]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012bf2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8012bf6:	e001      	b.n	8012bfc <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012bf8:	2303      	movs	r3, #3
 8012bfa:	e032      	b.n	8012c62 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8012bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8012c74 <LoRaMacMcpsRequest+0x26c>)
 8012bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c02:	4a1b      	ldr	r2, [pc, #108]	@ (8012c70 <LoRaMacMcpsRequest+0x268>)
 8012c04:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8012c08:	4611      	mov	r1, r2
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fc fb0a 	bl	800f224 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8012c10:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012c12:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8012c16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012c1a:	78fb      	ldrb	r3, [r7, #3]
 8012c1c:	9300      	str	r3, [sp, #0]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012c22:	f7fd fac1 	bl	80101a8 <Send>
 8012c26:	4603      	mov	r3, r0
 8012c28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8012c2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d10b      	bne.n	8012c4c <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8012c34:	7b3a      	ldrb	r2, [r7, #12]
 8012c36:	4b0e      	ldr	r3, [pc, #56]	@ (8012c70 <LoRaMacMcpsRequest+0x268>)
 8012c38:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8012c70 <LoRaMacMcpsRequest+0x268>)
 8012c3e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012c42:	f043 0301 	orr.w	r3, r3, #1
 8012c46:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8012c4a:	e003      	b.n	8012c54 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012c4c:	4b08      	ldr	r3, [pc, #32]	@ (8012c70 <LoRaMacMcpsRequest+0x268>)
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012c54:	4b06      	ldr	r3, [pc, #24]	@ (8012c70 <LoRaMacMcpsRequest+0x268>)
 8012c56:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	611a      	str	r2, [r3, #16]

    return status;
 8012c5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3740      	adds	r7, #64	@ 0x40
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bdb0      	pop	{r4, r5, r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	20000be0 	.word	0x20000be0
 8012c70:	200007a0 	.word	0x200007a0
 8012c74:	20000cd4 	.word	0x20000cd4

08012c78 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	4603      	mov	r3, r0
 8012c80:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012c82:	79fb      	ldrb	r3, [r7, #7]
 8012c84:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012c86:	4b0d      	ldr	r3, [pc, #52]	@ (8012cbc <LoRaMacTestSetDutyCycleOn+0x44>)
 8012c88:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012c8c:	f107 010c 	add.w	r1, r7, #12
 8012c90:	220f      	movs	r2, #15
 8012c92:	4618      	mov	r0, r3
 8012c94:	f002 f8f9 	bl	8014e8a <RegionVerify>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d00a      	beq.n	8012cb4 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012c9e:	4a07      	ldr	r2, [pc, #28]	@ (8012cbc <LoRaMacTestSetDutyCycleOn+0x44>)
 8012ca0:	79fb      	ldrb	r3, [r7, #7]
 8012ca2:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012ca6:	4a06      	ldr	r2, [pc, #24]	@ (8012cc0 <LoRaMacTestSetDutyCycleOn+0x48>)
 8012ca8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012cac:	f043 0320 	orr.w	r3, r3, #32
 8012cb0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8012cb4:	bf00      	nop
 8012cb6:	3710      	adds	r7, #16
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	20000cd4 	.word	0x20000cd4
 8012cc0:	200007a0 	.word	0x200007a0

08012cc4 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012cc8:	f7fe fe30 	bl	801192c <LoRaMacStop>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d112      	bne.n	8012cf8 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012cd2:	480b      	ldr	r0, [pc, #44]	@ (8012d00 <LoRaMacDeInitialization+0x3c>)
 8012cd4:	f008 fbb0 	bl	801b438 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012cd8:	480a      	ldr	r0, [pc, #40]	@ (8012d04 <LoRaMacDeInitialization+0x40>)
 8012cda:	f008 fbad 	bl	801b438 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012cde:	480a      	ldr	r0, [pc, #40]	@ (8012d08 <LoRaMacDeInitialization+0x44>)
 8012ce0:	f008 fbaa 	bl	801b438 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012ce4:	f000 f94a 	bl	8012f7c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8012ce8:	2000      	movs	r0, #0
 8012cea:	f7fd fdbb 	bl	8010864 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012cee:	4b07      	ldr	r3, [pc, #28]	@ (8012d0c <LoRaMacDeInitialization+0x48>)
 8012cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cf2:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	e000      	b.n	8012cfa <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012cf8:	2301      	movs	r3, #1
    }
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	20000b08 	.word	0x20000b08
 8012d04:	20000b20 	.word	0x20000b20
 8012d08:	20000b38 	.word	0x20000b38
 8012d0c:	0801c570 	.word	0x0801c570

08012d10 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b08c      	sub	sp, #48	@ 0x30
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
 8012d1c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	7b1b      	ldrb	r3, [r3, #12]
 8012d28:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	7b5b      	ldrb	r3, [r3, #13]
 8012d30:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	7b9b      	ldrb	r3, [r3, #14]
 8012d38:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	685a      	ldr	r2, [r3, #4]
 8012d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d42:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	785b      	ldrb	r3, [r3, #1]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	f000 8088 	beq.w	8012e5e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012d4e:	2302      	movs	r3, #2
 8012d50:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	7bdb      	ldrb	r3, [r3, #15]
 8012d58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	7c1b      	ldrb	r3, [r3, #16]
 8012d60:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012d64:	4611      	mov	r1, r2
 8012d66:	4618      	mov	r0, r3
 8012d68:	f002 f854 	bl	8014e14 <RegionGetPhyParam>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012d70:	6a3b      	ldr	r3, [r7, #32]
 8012d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8012d76:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8012d7a:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	bfb8      	it	lt
 8012d82:	4613      	movlt	r3, r2
 8012d84:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	685b      	ldr	r3, [r3, #4]
 8012d8c:	68fa      	ldr	r2, [r7, #12]
 8012d8e:	8912      	ldrh	r2, [r2, #8]
 8012d90:	4293      	cmp	r3, r2
 8012d92:	d302      	bcc.n	8012d9a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012d94:	2301      	movs	r3, #1
 8012d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	8912      	ldrh	r2, [r2, #8]
 8012da2:	4611      	mov	r1, r2
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	8952      	ldrh	r2, [r2, #10]
 8012da8:	440a      	add	r2, r1
 8012daa:	4293      	cmp	r3, r2
 8012dac:	d30f      	bcc.n	8012dce <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8012dae:	230a      	movs	r3, #10
 8012db0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	7c1b      	ldrb	r3, [r3, #16]
 8012db8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012dbc:	4611      	mov	r1, r2
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f002 f828 	bl	8014e14 <RegionGetPhyParam>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8012dc8:	6a3b      	ldr	r3, [r7, #32]
 8012dca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	685b      	ldr	r3, [r3, #4]
 8012dd2:	68fa      	ldr	r2, [r7, #12]
 8012dd4:	8912      	ldrh	r2, [r2, #8]
 8012dd6:	4611      	mov	r1, r2
 8012dd8:	68fa      	ldr	r2, [r7, #12]
 8012dda:	8952      	ldrh	r2, [r2, #10]
 8012ddc:	0052      	lsls	r2, r2, #1
 8012dde:	440a      	add	r2, r1
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d33c      	bcc.n	8012e5e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	685b      	ldr	r3, [r3, #4]
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	8912      	ldrh	r2, [r2, #8]
 8012dec:	1a9b      	subs	r3, r3, r2
 8012dee:	68fa      	ldr	r2, [r7, #12]
 8012df0:	8952      	ldrh	r2, [r2, #10]
 8012df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012df6:	fb01 f202 	mul.w	r2, r1, r2
 8012dfa:	1a9b      	subs	r3, r3, r2
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d12e      	bne.n	8012e5e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8012e00:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012e04:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d110      	bne.n	8012e2e <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d009      	beq.n	8012e28 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012e14:	2302      	movs	r3, #2
 8012e16:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	7c1b      	ldrb	r3, [r3, #16]
 8012e1c:	f107 0210 	add.w	r2, r7, #16
 8012e20:	4611      	mov	r1, r2
 8012e22:	4618      	mov	r0, r3
 8012e24:	f002 f81f 	bl	8014e66 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012e2e:	2321      	movs	r3, #33	@ 0x21
 8012e30:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8012e34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012e38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	7bdb      	ldrb	r3, [r3, #15]
 8012e40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	7c1b      	ldrb	r3, [r3, #16]
 8012e48:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012e4c:	4611      	mov	r1, r2
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f001 ffe0 	bl	8014e14 <RegionGetPhyParam>
 8012e54:	4603      	mov	r3, r0
 8012e56:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8012e58:	6a3b      	ldr	r3, [r7, #32]
 8012e5a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012e64:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8012e6c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012e74:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012e76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3730      	adds	r7, #48	@ 0x30
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}

08012e82 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012e82:	b480      	push	{r7}
 8012e84:	b085      	sub	sp, #20
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	60f8      	str	r0, [r7, #12]
 8012e8a:	60b9      	str	r1, [r7, #8]
 8012e8c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e8e:	bf00      	nop
 8012e90:	3714      	adds	r7, #20
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bc80      	pop	{r7}
 8012e96:	4770      	bx	lr

08012e98 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b083      	sub	sp, #12
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ea2:	bf00      	nop
 8012ea4:	370c      	adds	r7, #12
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bc80      	pop	{r7}
 8012eaa:	4770      	bx	lr

08012eac <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012eb6:	bf00      	nop
 8012eb8:	370c      	adds	r7, #12
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bc80      	pop	{r7}
 8012ebe:	4770      	bx	lr

08012ec0 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012eca:	bf00      	nop
 8012ecc:	370c      	adds	r7, #12
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bc80      	pop	{r7}
 8012ed2:	4770      	bx	lr

08012ed4 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012ed8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bc80      	pop	{r7}
 8012ee0:	4770      	bx	lr

08012ee2 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012ee2:	b480      	push	{r7}
 8012ee4:	b083      	sub	sp, #12
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012eea:	bf00      	nop
 8012eec:	370c      	adds	r7, #12
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bc80      	pop	{r7}
 8012ef2:	4770      	bx	lr

08012ef4 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b083      	sub	sp, #12
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012efc:	bf00      	nop
 8012efe:	370c      	adds	r7, #12
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bc80      	pop	{r7}
 8012f04:	4770      	bx	lr

08012f06 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012f06:	b480      	push	{r7}
 8012f08:	b083      	sub	sp, #12
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012f0e:	bf00      	nop
 8012f10:	370c      	adds	r7, #12
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bc80      	pop	{r7}
 8012f16:	4770      	bx	lr

08012f18 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b083      	sub	sp, #12
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	460b      	mov	r3, r1
 8012f22:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012f24:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	370c      	adds	r7, #12
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bc80      	pop	{r7}
 8012f2e:	4770      	bx	lr

08012f30 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012f30:	b480      	push	{r7}
 8012f32:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012f34:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bc80      	pop	{r7}
 8012f3c:	4770      	bx	lr

08012f3e <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012f3e:	b480      	push	{r7}
 8012f40:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012f42:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bc80      	pop	{r7}
 8012f4a:	4770      	bx	lr

08012f4c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012f50:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bc80      	pop	{r7}
 8012f58:	4770      	bx	lr

08012f5a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012f5a:	b480      	push	{r7}
 8012f5c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012f5e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bc80      	pop	{r7}
 8012f66:	4770      	bx	lr

08012f68 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012f72:	bf00      	nop
 8012f74:	370c      	adds	r7, #12
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bc80      	pop	{r7}
 8012f7a:	4770      	bx	lr

08012f7c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012f80:	bf00      	nop
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bc80      	pop	{r7}
 8012f86:	4770      	bx	lr

08012f88 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012f88:	b480      	push	{r7}
 8012f8a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012f8c:	bf00      	nop
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bc80      	pop	{r7}
 8012f92:	4770      	bx	lr

08012f94 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012f9e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bc80      	pop	{r7}
 8012fa8:	4770      	bx	lr

08012faa <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012faa:	b480      	push	{r7}
 8012fac:	b083      	sub	sp, #12
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012fb2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	370c      	adds	r7, #12
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bc80      	pop	{r7}
 8012fbc:	4770      	bx	lr

08012fbe <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012fbe:	b480      	push	{r7}
 8012fc0:	b083      	sub	sp, #12
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012fc6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	370c      	adds	r7, #12
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bc80      	pop	{r7}
 8012fd0:	4770      	bx	lr

08012fd2 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012fd2:	b480      	push	{r7}
 8012fd4:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012fd6:	bf00      	nop
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bc80      	pop	{r7}
 8012fdc:	4770      	bx	lr

08012fde <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012fde:	b480      	push	{r7}
 8012fe0:	b083      	sub	sp, #12
 8012fe2:	af00      	add	r7, sp, #0
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	6039      	str	r1, [r7, #0]
 8012fe8:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012fea:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	370c      	adds	r7, #12
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bc80      	pop	{r7}
 8012ff4:	4770      	bx	lr

08012ff6 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012ff6:	b480      	push	{r7}
 8012ff8:	b083      	sub	sp, #12
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	603a      	str	r2, [r7, #0]
 8013000:	80fb      	strh	r3, [r7, #6]
 8013002:	460b      	mov	r3, r1
 8013004:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013006:	bf00      	nop
 8013008:	370c      	adds	r7, #12
 801300a:	46bd      	mov	sp, r7
 801300c:	bc80      	pop	{r7}
 801300e:	4770      	bx	lr

08013010 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013010:	b480      	push	{r7}
 8013012:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013014:	bf00      	nop
 8013016:	46bd      	mov	sp, r7
 8013018:	bc80      	pop	{r7}
 801301a:	4770      	bx	lr

0801301c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013024:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013026:	4618      	mov	r0, r3
 8013028:	370c      	adds	r7, #12
 801302a:	46bd      	mov	sp, r7
 801302c:	bc80      	pop	{r7}
 801302e:	4770      	bx	lr

08013030 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013030:	b480      	push	{r7}
 8013032:	b083      	sub	sp, #12
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013038:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801303a:	4618      	mov	r0, r3
 801303c:	370c      	adds	r7, #12
 801303e:	46bd      	mov	sp, r7
 8013040:	bc80      	pop	{r7}
 8013042:	4770      	bx	lr

08013044 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013044:	b480      	push	{r7}
 8013046:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013048:	bf00      	nop
 801304a:	46bd      	mov	sp, r7
 801304c:	bc80      	pop	{r7}
 801304e:	4770      	bx	lr

08013050 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8013050:	b480      	push	{r7}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	460b      	mov	r3, r1
 801305a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801305c:	bf00      	nop
 801305e:	370c      	adds	r7, #12
 8013060:	46bd      	mov	sp, r7
 8013062:	bc80      	pop	{r7}
 8013064:	4770      	bx	lr

08013066 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8013066:	b480      	push	{r7}
 8013068:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801306a:	bf00      	nop
 801306c:	46bd      	mov	sp, r7
 801306e:	bc80      	pop	{r7}
 8013070:	4770      	bx	lr

08013072 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013072:	b480      	push	{r7}
 8013074:	b085      	sub	sp, #20
 8013076:	af00      	add	r7, sp, #0
 8013078:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801307e:	2300      	movs	r3, #0
 8013080:	81fb      	strh	r3, [r7, #14]
 8013082:	e00a      	b.n	801309a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013084:	89fb      	ldrh	r3, [r7, #14]
 8013086:	68ba      	ldr	r2, [r7, #8]
 8013088:	4413      	add	r3, r2
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d001      	beq.n	8013094 <IsSlotFree+0x22>
        {
            return false;
 8013090:	2300      	movs	r3, #0
 8013092:	e006      	b.n	80130a2 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013094:	89fb      	ldrh	r3, [r7, #14]
 8013096:	3301      	adds	r3, #1
 8013098:	81fb      	strh	r3, [r7, #14]
 801309a:	89fb      	ldrh	r3, [r7, #14]
 801309c:	2b0f      	cmp	r3, #15
 801309e:	d9f1      	bls.n	8013084 <IsSlotFree+0x12>
        }
    }
    return true;
 80130a0:	2301      	movs	r3, #1
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3714      	adds	r7, #20
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bc80      	pop	{r7}
 80130aa:	4770      	bx	lr

080130ac <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80130b2:	2300      	movs	r3, #0
 80130b4:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80130b6:	e007      	b.n	80130c8 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80130b8:	79fb      	ldrb	r3, [r7, #7]
 80130ba:	3301      	adds	r3, #1
 80130bc:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80130be:	79fb      	ldrb	r3, [r7, #7]
 80130c0:	2b20      	cmp	r3, #32
 80130c2:	d101      	bne.n	80130c8 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80130c4:	2300      	movs	r3, #0
 80130c6:	e012      	b.n	80130ee <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80130c8:	79fb      	ldrb	r3, [r7, #7]
 80130ca:	011b      	lsls	r3, r3, #4
 80130cc:	3308      	adds	r3, #8
 80130ce:	4a0a      	ldr	r2, [pc, #40]	@ (80130f8 <MallocNewMacCommandSlot+0x4c>)
 80130d0:	4413      	add	r3, r2
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7ff ffcd 	bl	8013072 <IsSlotFree>
 80130d8:	4603      	mov	r3, r0
 80130da:	f083 0301 	eor.w	r3, r3, #1
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d1e9      	bne.n	80130b8 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80130e4:	79fb      	ldrb	r3, [r7, #7]
 80130e6:	011b      	lsls	r3, r3, #4
 80130e8:	3308      	adds	r3, #8
 80130ea:	4a03      	ldr	r2, [pc, #12]	@ (80130f8 <MallocNewMacCommandSlot+0x4c>)
 80130ec:	4413      	add	r3, r2
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3708      	adds	r7, #8
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
 80130f6:	bf00      	nop
 80130f8:	200018f8 	.word	0x200018f8

080130fc <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d101      	bne.n	801310e <FreeMacCommandSlot+0x12>
    {
        return false;
 801310a:	2300      	movs	r3, #0
 801310c:	e005      	b.n	801311a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801310e:	2210      	movs	r2, #16
 8013110:	2100      	movs	r1, #0
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f004 f8b2 	bl	801727c <memset1>

    return true;
 8013118:	2301      	movs	r3, #1
}
 801311a:	4618      	mov	r0, r3
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}

08013122 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013122:	b480      	push	{r7}
 8013124:	b083      	sub	sp, #12
 8013126:	af00      	add	r7, sp, #0
 8013128:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d101      	bne.n	8013134 <LinkedListInit+0x12>
    {
        return false;
 8013130:	2300      	movs	r3, #0
 8013132:	e006      	b.n	8013142 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2200      	movs	r2, #0
 8013138:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2200      	movs	r2, #0
 801313e:	605a      	str	r2, [r3, #4]

    return true;
 8013140:	2301      	movs	r3, #1
}
 8013142:	4618      	mov	r0, r3
 8013144:	370c      	adds	r7, #12
 8013146:	46bd      	mov	sp, r7
 8013148:	bc80      	pop	{r7}
 801314a:	4770      	bx	lr

0801314c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d002      	beq.n	8013162 <LinkedListAdd+0x16>
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d101      	bne.n	8013166 <LinkedListAdd+0x1a>
    {
        return false;
 8013162:	2300      	movs	r3, #0
 8013164:	e015      	b.n	8013192 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d102      	bne.n	8013174 <LinkedListAdd+0x28>
    {
        list->First = element;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	683a      	ldr	r2, [r7, #0]
 8013172:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	685b      	ldr	r3, [r3, #4]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d003      	beq.n	8013184 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	683a      	ldr	r2, [r7, #0]
 8013182:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	2200      	movs	r2, #0
 8013188:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	683a      	ldr	r2, [r7, #0]
 801318e:	605a      	str	r2, [r3, #4]

    return true;
 8013190:	2301      	movs	r3, #1
}
 8013192:	4618      	mov	r0, r3
 8013194:	370c      	adds	r7, #12
 8013196:	46bd      	mov	sp, r7
 8013198:	bc80      	pop	{r7}
 801319a:	4770      	bx	lr

0801319c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801319c:	b480      	push	{r7}
 801319e:	b085      	sub	sp, #20
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d002      	beq.n	80131b2 <LinkedListGetPrevious+0x16>
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d101      	bne.n	80131b6 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80131b2:	2300      	movs	r3, #0
 80131b4:	e016      	b.n	80131e4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80131bc:	683a      	ldr	r2, [r7, #0]
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d00c      	beq.n	80131de <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80131c4:	e002      	b.n	80131cc <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d007      	beq.n	80131e2 <LinkedListGetPrevious+0x46>
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	683a      	ldr	r2, [r7, #0]
 80131d8:	429a      	cmp	r2, r3
 80131da:	d1f4      	bne.n	80131c6 <LinkedListGetPrevious+0x2a>
 80131dc:	e001      	b.n	80131e2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80131de:	2300      	movs	r3, #0
 80131e0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80131e2:	68fb      	ldr	r3, [r7, #12]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3714      	adds	r7, #20
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bc80      	pop	{r7}
 80131ec:	4770      	bx	lr

080131ee <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80131ee:	b580      	push	{r7, lr}
 80131f0:	b084      	sub	sp, #16
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	6078      	str	r0, [r7, #4]
 80131f6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d002      	beq.n	8013204 <LinkedListRemove+0x16>
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d101      	bne.n	8013208 <LinkedListRemove+0x1a>
    {
        return false;
 8013204:	2300      	movs	r3, #0
 8013206:	e020      	b.n	801324a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013208:	6839      	ldr	r1, [r7, #0]
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f7ff ffc6 	bl	801319c <LinkedListGetPrevious>
 8013210:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	683a      	ldr	r2, [r7, #0]
 8013218:	429a      	cmp	r2, r3
 801321a:	d103      	bne.n	8013224 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	681a      	ldr	r2, [r3, #0]
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	685b      	ldr	r3, [r3, #4]
 8013228:	683a      	ldr	r2, [r7, #0]
 801322a:	429a      	cmp	r2, r3
 801322c:	d102      	bne.n	8013234 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	68fa      	ldr	r2, [r7, #12]
 8013232:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d003      	beq.n	8013242 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	681a      	ldr	r2, [r3, #0]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	2200      	movs	r2, #0
 8013246:	601a      	str	r2, [r3, #0]

    return true;
 8013248:	2301      	movs	r3, #1
}
 801324a:	4618      	mov	r0, r3
 801324c:	3710      	adds	r7, #16
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
	...

08013254 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8013254:	b480      	push	{r7}
 8013256:	b083      	sub	sp, #12
 8013258:	af00      	add	r7, sp, #0
 801325a:	4603      	mov	r3, r0
 801325c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801325e:	79fb      	ldrb	r3, [r7, #7]
 8013260:	2b11      	cmp	r3, #17
 8013262:	bf8c      	ite	hi
 8013264:	2201      	movhi	r2, #1
 8013266:	2200      	movls	r2, #0
 8013268:	b2d2      	uxtb	r2, r2
 801326a:	2a00      	cmp	r2, #0
 801326c:	d10d      	bne.n	801328a <IsSticky+0x36>
 801326e:	4a0a      	ldr	r2, [pc, #40]	@ (8013298 <IsSticky+0x44>)
 8013270:	fa22 f303 	lsr.w	r3, r2, r3
 8013274:	f003 0301 	and.w	r3, r3, #1
 8013278:	2b00      	cmp	r3, #0
 801327a:	bf14      	ite	ne
 801327c:	2301      	movne	r3, #1
 801327e:	2300      	moveq	r3, #0
 8013280:	b2db      	uxtb	r3, r3
 8013282:	2b00      	cmp	r3, #0
 8013284:	d001      	beq.n	801328a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8013286:	2301      	movs	r3, #1
 8013288:	e000      	b.n	801328c <IsSticky+0x38>
        default:
            return false;
 801328a:	2300      	movs	r3, #0
    }
}
 801328c:	4618      	mov	r0, r3
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	bc80      	pop	{r7}
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop
 8013298:	00020720 	.word	0x00020720

0801329c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	4603      	mov	r3, r0
 80132a4:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 80132a6:	2300      	movs	r3, #0
    }
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	370c      	adds	r7, #12
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bc80      	pop	{r7}
 80132b0:	4770      	bx	lr
	...

080132b4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80132b8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80132bc:	2100      	movs	r1, #0
 80132be:	4804      	ldr	r0, [pc, #16]	@ (80132d0 <LoRaMacCommandsInit+0x1c>)
 80132c0:	f003 ffdc 	bl	801727c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80132c4:	4802      	ldr	r0, [pc, #8]	@ (80132d0 <LoRaMacCommandsInit+0x1c>)
 80132c6:	f7ff ff2c 	bl	8013122 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80132ca:	2300      	movs	r3, #0
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	bd80      	pop	{r7, pc}
 80132d0:	200018f8 	.word	0x200018f8

080132d4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b086      	sub	sp, #24
 80132d8:	af00      	add	r7, sp, #0
 80132da:	4603      	mov	r3, r0
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	607a      	str	r2, [r7, #4]
 80132e0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d101      	bne.n	80132ec <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80132e8:	2301      	movs	r3, #1
 80132ea:	e03b      	b.n	8013364 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80132ec:	f7ff fede 	bl	80130ac <MallocNewMacCommandSlot>
 80132f0:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d101      	bne.n	80132fc <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80132f8:	2302      	movs	r3, #2
 80132fa:	e033      	b.n	8013364 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80132fc:	6979      	ldr	r1, [r7, #20]
 80132fe:	481b      	ldr	r0, [pc, #108]	@ (801336c <LoRaMacCommandsAddCmd+0x98>)
 8013300:	f7ff ff24 	bl	801314c <LinkedListAdd>
 8013304:	4603      	mov	r3, r0
 8013306:	f083 0301 	eor.w	r3, r3, #1
 801330a:	b2db      	uxtb	r3, r3
 801330c:	2b00      	cmp	r3, #0
 801330e:	d001      	beq.n	8013314 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013310:	2305      	movs	r3, #5
 8013312:	e027      	b.n	8013364 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	7bfa      	ldrb	r2, [r7, #15]
 8013318:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	687a      	ldr	r2, [r7, #4]
 801331e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	3305      	adds	r3, #5
 8013324:	687a      	ldr	r2, [r7, #4]
 8013326:	b292      	uxth	r2, r2
 8013328:	68b9      	ldr	r1, [r7, #8]
 801332a:	4618      	mov	r0, r3
 801332c:	f003 ff6b 	bl	8017206 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013330:	7bfb      	ldrb	r3, [r7, #15]
 8013332:	4618      	mov	r0, r3
 8013334:	f7ff ff8e 	bl	8013254 <IsSticky>
 8013338:	4603      	mov	r3, r0
 801333a:	461a      	mov	r2, r3
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8013340:	7bfb      	ldrb	r3, [r7, #15]
 8013342:	4618      	mov	r0, r3
 8013344:	f7ff ffaa 	bl	801329c <IsConfirmationRequired>
 8013348:	4603      	mov	r3, r0
 801334a:	461a      	mov	r2, r3
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013350:	4b06      	ldr	r3, [pc, #24]	@ (801336c <LoRaMacCommandsAddCmd+0x98>)
 8013352:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	4413      	add	r3, r2
 801335a:	3301      	adds	r3, #1
 801335c:	4a03      	ldr	r2, [pc, #12]	@ (801336c <LoRaMacCommandsAddCmd+0x98>)
 801335e:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8013362:	2300      	movs	r3, #0
}
 8013364:	4618      	mov	r0, r3
 8013366:	3718      	adds	r7, #24
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}
 801336c:	200018f8 	.word	0x200018f8

08013370 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b082      	sub	sp, #8
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d101      	bne.n	8013382 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801337e:	2301      	movs	r3, #1
 8013380:	e021      	b.n	80133c6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013382:	6879      	ldr	r1, [r7, #4]
 8013384:	4812      	ldr	r0, [pc, #72]	@ (80133d0 <LoRaMacCommandsRemoveCmd+0x60>)
 8013386:	f7ff ff32 	bl	80131ee <LinkedListRemove>
 801338a:	4603      	mov	r3, r0
 801338c:	f083 0301 	eor.w	r3, r3, #1
 8013390:	b2db      	uxtb	r3, r3
 8013392:	2b00      	cmp	r3, #0
 8013394:	d001      	beq.n	801339a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013396:	2303      	movs	r3, #3
 8013398:	e015      	b.n	80133c6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801339a:	4b0d      	ldr	r3, [pc, #52]	@ (80133d0 <LoRaMacCommandsRemoveCmd+0x60>)
 801339c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	689b      	ldr	r3, [r3, #8]
 80133a4:	1ad3      	subs	r3, r2, r3
 80133a6:	3b01      	subs	r3, #1
 80133a8:	4a09      	ldr	r2, [pc, #36]	@ (80133d0 <LoRaMacCommandsRemoveCmd+0x60>)
 80133aa:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7ff fea4 	bl	80130fc <FreeMacCommandSlot>
 80133b4:	4603      	mov	r3, r0
 80133b6:	f083 0301 	eor.w	r3, r3, #1
 80133ba:	b2db      	uxtb	r3, r3
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d001      	beq.n	80133c4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80133c0:	2305      	movs	r3, #5
 80133c2:	e000      	b.n	80133c6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80133c4:	2300      	movs	r3, #0
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3708      	adds	r7, #8
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	200018f8 	.word	0x200018f8

080133d4 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 80133d4:	b480      	push	{r7}
 80133d6:	b085      	sub	sp, #20
 80133d8:	af00      	add	r7, sp, #0
 80133da:	4603      	mov	r3, r0
 80133dc:	6039      	str	r1, [r7, #0]
 80133de:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80133e0:	4b0e      	ldr	r3, [pc, #56]	@ (801341c <LoRaMacCommandsGetCmd+0x48>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80133e6:	e002      	b.n	80133ee <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d004      	beq.n	80133fe <LoRaMacCommandsGetCmd+0x2a>
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	791b      	ldrb	r3, [r3, #4]
 80133f8:	79fa      	ldrb	r2, [r7, #7]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d1f4      	bne.n	80133e8 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d101      	bne.n	801340e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801340a:	2303      	movs	r3, #3
 801340c:	e000      	b.n	8013410 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801340e:	2300      	movs	r3, #0
}
 8013410:	4618      	mov	r0, r3
 8013412:	3714      	adds	r7, #20
 8013414:	46bd      	mov	sp, r7
 8013416:	bc80      	pop	{r7}
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop
 801341c:	200018f8 	.word	0x200018f8

08013420 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013426:	4b0f      	ldr	r3, [pc, #60]	@ (8013464 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801342c:	e012      	b.n	8013454 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	7b1b      	ldrb	r3, [r3, #12]
 8013432:	f083 0301 	eor.w	r3, r3, #1
 8013436:	b2db      	uxtb	r3, r3
 8013438:	2b00      	cmp	r3, #0
 801343a:	d008      	beq.n	801344e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f7ff ff94 	bl	8013370 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	607b      	str	r3, [r7, #4]
 801344c:	e002      	b.n	8013454 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d1e9      	bne.n	801342e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801345a:	2300      	movs	r3, #0
}
 801345c:	4618      	mov	r0, r3
 801345e:	3708      	adds	r7, #8
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}
 8013464:	200018f8 	.word	0x200018f8

08013468 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b082      	sub	sp, #8
 801346c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801346e:	4b13      	ldr	r3, [pc, #76]	@ (80134bc <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013474:	e01a      	b.n	80134ac <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	791b      	ldrb	r3, [r3, #4]
 8013480:	4618      	mov	r0, r3
 8013482:	f7ff fee7 	bl	8013254 <IsSticky>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d00d      	beq.n	80134a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	791b      	ldrb	r3, [r3, #4]
 8013490:	4618      	mov	r0, r3
 8013492:	f7ff ff03 	bl	801329c <IsConfirmationRequired>
 8013496:	4603      	mov	r3, r0
 8013498:	f083 0301 	eor.w	r3, r3, #1
 801349c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d002      	beq.n	80134a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f7ff ff64 	bl	8013370 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d1e1      	bne.n	8013476 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80134b2:	2300      	movs	r3, #0
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3708      	adds	r7, #8
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}
 80134bc:	200018f8 	.word	0x200018f8

080134c0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d101      	bne.n	80134d2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80134ce:	2301      	movs	r3, #1
 80134d0:	e005      	b.n	80134de <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80134d2:	4b05      	ldr	r3, [pc, #20]	@ (80134e8 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80134d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80134dc:	2300      	movs	r3, #0
}
 80134de:	4618      	mov	r0, r3
 80134e0:	370c      	adds	r7, #12
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bc80      	pop	{r7}
 80134e6:	4770      	bx	lr
 80134e8:	200018f8 	.word	0x200018f8

080134ec <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b088      	sub	sp, #32
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	60f8      	str	r0, [r7, #12]
 80134f4:	60b9      	str	r1, [r7, #8]
 80134f6:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80134f8:	4b25      	ldr	r3, [pc, #148]	@ (8013590 <LoRaMacCommandsSerializeCmds+0xa4>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d002      	beq.n	801350e <LoRaMacCommandsSerializeCmds+0x22>
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d126      	bne.n	801355c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801350e:	2301      	movs	r3, #1
 8013510:	e039      	b.n	8013586 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013512:	7efb      	ldrb	r3, [r7, #27]
 8013514:	68fa      	ldr	r2, [r7, #12]
 8013516:	1ad2      	subs	r2, r2, r3
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	689b      	ldr	r3, [r3, #8]
 801351c:	3301      	adds	r3, #1
 801351e:	429a      	cmp	r2, r3
 8013520:	d320      	bcc.n	8013564 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013522:	7efb      	ldrb	r3, [r7, #27]
 8013524:	1c5a      	adds	r2, r3, #1
 8013526:	76fa      	strb	r2, [r7, #27]
 8013528:	461a      	mov	r2, r3
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	4413      	add	r3, r2
 801352e:	69fa      	ldr	r2, [r7, #28]
 8013530:	7912      	ldrb	r2, [r2, #4]
 8013532:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013534:	7efb      	ldrb	r3, [r7, #27]
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	18d0      	adds	r0, r2, r3
 801353a:	69fb      	ldr	r3, [r7, #28]
 801353c:	1d59      	adds	r1, r3, #5
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	689b      	ldr	r3, [r3, #8]
 8013542:	b29b      	uxth	r3, r3
 8013544:	461a      	mov	r2, r3
 8013546:	f003 fe5e 	bl	8017206 <memcpy1>
            itr += curElement->PayloadSize;
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	689b      	ldr	r3, [r3, #8]
 801354e:	b2da      	uxtb	r2, r3
 8013550:	7efb      	ldrb	r3, [r7, #27]
 8013552:	4413      	add	r3, r2
 8013554:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d1d7      	bne.n	8013512 <LoRaMacCommandsSerializeCmds+0x26>
 8013562:	e009      	b.n	8013578 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013564:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013566:	e007      	b.n	8013578 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801356e:	69f8      	ldr	r0, [r7, #28]
 8013570:	f7ff fefe 	bl	8013370 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013578:	69fb      	ldr	r3, [r7, #28]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d1f4      	bne.n	8013568 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801357e:	68b8      	ldr	r0, [r7, #8]
 8013580:	f7ff ff9e 	bl	80134c0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013584:	2300      	movs	r3, #0
}
 8013586:	4618      	mov	r0, r3
 8013588:	3720      	adds	r7, #32
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	200018f8 	.word	0x200018f8

08013594 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013594:	b480      	push	{r7}
 8013596:	b085      	sub	sp, #20
 8013598:	af00      	add	r7, sp, #0
 801359a:	4603      	mov	r3, r0
 801359c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801359e:	2300      	movs	r3, #0
 80135a0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80135a2:	79fb      	ldrb	r3, [r7, #7]
 80135a4:	3b02      	subs	r3, #2
 80135a6:	2b11      	cmp	r3, #17
 80135a8:	d850      	bhi.n	801364c <LoRaMacCommandsGetCmdSize+0xb8>
 80135aa:	a201      	add	r2, pc, #4	@ (adr r2, 80135b0 <LoRaMacCommandsGetCmdSize+0x1c>)
 80135ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135b0:	080135f9 	.word	0x080135f9
 80135b4:	080135ff 	.word	0x080135ff
 80135b8:	08013605 	.word	0x08013605
 80135bc:	0801360b 	.word	0x0801360b
 80135c0:	08013611 	.word	0x08013611
 80135c4:	08013617 	.word	0x08013617
 80135c8:	0801361d 	.word	0x0801361d
 80135cc:	08013623 	.word	0x08013623
 80135d0:	08013629 	.word	0x08013629
 80135d4:	0801364d 	.word	0x0801364d
 80135d8:	0801364d 	.word	0x0801364d
 80135dc:	0801362f 	.word	0x0801362f
 80135e0:	0801364d 	.word	0x0801364d
 80135e4:	0801364d 	.word	0x0801364d
 80135e8:	08013635 	.word	0x08013635
 80135ec:	0801363b 	.word	0x0801363b
 80135f0:	08013641 	.word	0x08013641
 80135f4:	08013647 	.word	0x08013647
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80135f8:	2303      	movs	r3, #3
 80135fa:	73fb      	strb	r3, [r7, #15]
            break;
 80135fc:	e027      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80135fe:	2305      	movs	r3, #5
 8013600:	73fb      	strb	r3, [r7, #15]
            break;
 8013602:	e024      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013604:	2302      	movs	r3, #2
 8013606:	73fb      	strb	r3, [r7, #15]
            break;
 8013608:	e021      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801360a:	2305      	movs	r3, #5
 801360c:	73fb      	strb	r3, [r7, #15]
            break;
 801360e:	e01e      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013610:	2301      	movs	r3, #1
 8013612:	73fb      	strb	r3, [r7, #15]
            break;
 8013614:	e01b      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013616:	2306      	movs	r3, #6
 8013618:	73fb      	strb	r3, [r7, #15]
            break;
 801361a:	e018      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801361c:	2302      	movs	r3, #2
 801361e:	73fb      	strb	r3, [r7, #15]
            break;
 8013620:	e015      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013622:	2302      	movs	r3, #2
 8013624:	73fb      	strb	r3, [r7, #15]
            break;
 8013626:	e012      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013628:	2305      	movs	r3, #5
 801362a:	73fb      	strb	r3, [r7, #15]
            break;
 801362c:	e00f      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801362e:	2306      	movs	r3, #6
 8013630:	73fb      	strb	r3, [r7, #15]
            break;
 8013632:	e00c      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013634:	2301      	movs	r3, #1
 8013636:	73fb      	strb	r3, [r7, #15]
            break;
 8013638:	e009      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801363a:	2305      	movs	r3, #5
 801363c:	73fb      	strb	r3, [r7, #15]
            break;
 801363e:	e006      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013640:	2304      	movs	r3, #4
 8013642:	73fb      	strb	r3, [r7, #15]
            break;
 8013644:	e003      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013646:	2304      	movs	r3, #4
 8013648:	73fb      	strb	r3, [r7, #15]
            break;
 801364a:	e000      	b.n	801364e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801364c:	bf00      	nop
        }
    }
    return cidSize;
 801364e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013650:	4618      	mov	r0, r3
 8013652:	3714      	adds	r7, #20
 8013654:	46bd      	mov	sp, r7
 8013656:	bc80      	pop	{r7}
 8013658:	4770      	bx	lr
 801365a:	bf00      	nop

0801365c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801365c:	b480      	push	{r7}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	4a07      	ldr	r2, [pc, #28]	@ (8013684 <IncreaseBufferPointer+0x28>)
 8013668:	4293      	cmp	r3, r2
 801366a:	d102      	bne.n	8013672 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801366c:	4b06      	ldr	r3, [pc, #24]	@ (8013688 <IncreaseBufferPointer+0x2c>)
 801366e:	607b      	str	r3, [r7, #4]
 8013670:	e002      	b.n	8013678 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	3304      	adds	r3, #4
 8013676:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013678:	687b      	ldr	r3, [r7, #4]
}
 801367a:	4618      	mov	r0, r3
 801367c:	370c      	adds	r7, #12
 801367e:	46bd      	mov	sp, r7
 8013680:	bc80      	pop	{r7}
 8013682:	4770      	bx	lr
 8013684:	20001b20 	.word	0x20001b20
 8013688:	20001b10 	.word	0x20001b10

0801368c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	4603      	mov	r3, r0
 8013694:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013696:	79fb      	ldrb	r3, [r7, #7]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d101      	bne.n	80136a0 <IsListEmpty+0x14>
    {
        return true;
 801369c:	2301      	movs	r3, #1
 801369e:	e000      	b.n	80136a2 <IsListEmpty+0x16>
    }
    return false;
 80136a0:	2300      	movs	r3, #0
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	370c      	adds	r7, #12
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bc80      	pop	{r7}
 80136aa:	4770      	bx	lr

080136ac <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	4603      	mov	r3, r0
 80136b4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80136b6:	79fb      	ldrb	r3, [r7, #7]
 80136b8:	2b04      	cmp	r3, #4
 80136ba:	d901      	bls.n	80136c0 <IsListFull+0x14>
    {
        return true;
 80136bc:	2301      	movs	r3, #1
 80136be:	e000      	b.n	80136c2 <IsListFull+0x16>
    }
    return false;
 80136c0:	2300      	movs	r3, #0
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	370c      	adds	r7, #12
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bc80      	pop	{r7}
 80136ca:	4770      	bx	lr

080136cc <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b086      	sub	sp, #24
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	4603      	mov	r3, r0
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	607a      	str	r2, [r7, #4]
 80136d8:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80136de:	4b13      	ldr	r3, [pc, #76]	@ (801372c <GetElement+0x60>)
 80136e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7ff ffd1 	bl	801368c <IsListEmpty>
 80136ea:	4603      	mov	r3, r0
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d001      	beq.n	80136f4 <GetElement+0x28>
    {
        return NULL;
 80136f0:	2300      	movs	r3, #0
 80136f2:	e017      	b.n	8013724 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80136f4:	2300      	movs	r3, #0
 80136f6:	74fb      	strb	r3, [r7, #19]
 80136f8:	e00d      	b.n	8013716 <GetElement+0x4a>
    {
        if( element->Request == request )
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	7bfa      	ldrb	r2, [r7, #15]
 8013700:	429a      	cmp	r2, r3
 8013702:	d101      	bne.n	8013708 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	e00d      	b.n	8013724 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013708:	6978      	ldr	r0, [r7, #20]
 801370a:	f7ff ffa7 	bl	801365c <IncreaseBufferPointer>
 801370e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013710:	7cfb      	ldrb	r3, [r7, #19]
 8013712:	3301      	adds	r3, #1
 8013714:	74fb      	strb	r3, [r7, #19]
 8013716:	4b05      	ldr	r3, [pc, #20]	@ (801372c <GetElement+0x60>)
 8013718:	f893 3020 	ldrb.w	r3, [r3, #32]
 801371c:	7cfa      	ldrb	r2, [r7, #19]
 801371e:	429a      	cmp	r2, r3
 8013720:	d3eb      	bcc.n	80136fa <GetElement+0x2e>
    }

    return NULL;
 8013722:	2300      	movs	r3, #0
}
 8013724:	4618      	mov	r0, r3
 8013726:	3718      	adds	r7, #24
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}
 801372c:	20001b04 	.word	0x20001b04

08013730 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b082      	sub	sp, #8
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013738:	4a0c      	ldr	r2, [pc, #48]	@ (801376c <LoRaMacConfirmQueueInit+0x3c>)
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801373e:	4b0b      	ldr	r3, [pc, #44]	@ (801376c <LoRaMacConfirmQueueInit+0x3c>)
 8013740:	2200      	movs	r2, #0
 8013742:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013746:	4b09      	ldr	r3, [pc, #36]	@ (801376c <LoRaMacConfirmQueueInit+0x3c>)
 8013748:	4a09      	ldr	r2, [pc, #36]	@ (8013770 <LoRaMacConfirmQueueInit+0x40>)
 801374a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801374c:	4b07      	ldr	r3, [pc, #28]	@ (801376c <LoRaMacConfirmQueueInit+0x3c>)
 801374e:	4a08      	ldr	r2, [pc, #32]	@ (8013770 <LoRaMacConfirmQueueInit+0x40>)
 8013750:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013752:	2214      	movs	r2, #20
 8013754:	21ff      	movs	r1, #255	@ 0xff
 8013756:	4806      	ldr	r0, [pc, #24]	@ (8013770 <LoRaMacConfirmQueueInit+0x40>)
 8013758:	f003 fd90 	bl	801727c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801375c:	4b03      	ldr	r3, [pc, #12]	@ (801376c <LoRaMacConfirmQueueInit+0x3c>)
 801375e:	2201      	movs	r2, #1
 8013760:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8013764:	bf00      	nop
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	20001b04 	.word	0x20001b04
 8013770:	20001b10 	.word	0x20001b10

08013774 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b082      	sub	sp, #8
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801377c:	4b19      	ldr	r3, [pc, #100]	@ (80137e4 <LoRaMacConfirmQueueAdd+0x70>)
 801377e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013782:	4618      	mov	r0, r3
 8013784:	f7ff ff92 	bl	80136ac <IsListFull>
 8013788:	4603      	mov	r3, r0
 801378a:	2b00      	cmp	r3, #0
 801378c:	d001      	beq.n	8013792 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801378e:	2300      	movs	r3, #0
 8013790:	e024      	b.n	80137dc <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013792:	4b14      	ldr	r3, [pc, #80]	@ (80137e4 <LoRaMacConfirmQueueAdd+0x70>)
 8013794:	689b      	ldr	r3, [r3, #8]
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	7812      	ldrb	r2, [r2, #0]
 801379a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801379c:	4b11      	ldr	r3, [pc, #68]	@ (80137e4 <LoRaMacConfirmQueueAdd+0x70>)
 801379e:	689b      	ldr	r3, [r3, #8]
 80137a0:	687a      	ldr	r2, [r7, #4]
 80137a2:	7852      	ldrb	r2, [r2, #1]
 80137a4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80137a6:	4b0f      	ldr	r3, [pc, #60]	@ (80137e4 <LoRaMacConfirmQueueAdd+0x70>)
 80137a8:	689b      	ldr	r3, [r3, #8]
 80137aa:	687a      	ldr	r2, [r7, #4]
 80137ac:	78d2      	ldrb	r2, [r2, #3]
 80137ae:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80137b0:	4b0c      	ldr	r3, [pc, #48]	@ (80137e4 <LoRaMacConfirmQueueAdd+0x70>)
 80137b2:	689b      	ldr	r3, [r3, #8]
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	7892      	ldrb	r2, [r2, #2]
 80137b8:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80137ba:	4b0a      	ldr	r3, [pc, #40]	@ (80137e4 <LoRaMacConfirmQueueAdd+0x70>)
 80137bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137c0:	3301      	adds	r3, #1
 80137c2:	b2da      	uxtb	r2, r3
 80137c4:	4b07      	ldr	r3, [pc, #28]	@ (80137e4 <LoRaMacConfirmQueueAdd+0x70>)
 80137c6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80137ca:	4b06      	ldr	r3, [pc, #24]	@ (80137e4 <LoRaMacConfirmQueueAdd+0x70>)
 80137cc:	689b      	ldr	r3, [r3, #8]
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7ff ff44 	bl	801365c <IncreaseBufferPointer>
 80137d4:	4603      	mov	r3, r0
 80137d6:	4a03      	ldr	r2, [pc, #12]	@ (80137e4 <LoRaMacConfirmQueueAdd+0x70>)
 80137d8:	6093      	str	r3, [r2, #8]

    return true;
 80137da:	2301      	movs	r3, #1
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3708      	adds	r7, #8
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	20001b04 	.word	0x20001b04

080137e8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80137ec:	4b0e      	ldr	r3, [pc, #56]	@ (8013828 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80137ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7ff ff4a 	bl	801368c <IsListEmpty>
 80137f8:	4603      	mov	r3, r0
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d001      	beq.n	8013802 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80137fe:	2300      	movs	r3, #0
 8013800:	e010      	b.n	8013824 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013802:	4b09      	ldr	r3, [pc, #36]	@ (8013828 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013808:	3b01      	subs	r3, #1
 801380a:	b2da      	uxtb	r2, r3
 801380c:	4b06      	ldr	r3, [pc, #24]	@ (8013828 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801380e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013812:	4b05      	ldr	r3, [pc, #20]	@ (8013828 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013814:	685b      	ldr	r3, [r3, #4]
 8013816:	4618      	mov	r0, r3
 8013818:	f7ff ff20 	bl	801365c <IncreaseBufferPointer>
 801381c:	4603      	mov	r3, r0
 801381e:	4a02      	ldr	r2, [pc, #8]	@ (8013828 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013820:	6053      	str	r3, [r2, #4]

    return true;
 8013822:	2301      	movs	r3, #1
}
 8013824:	4618      	mov	r0, r3
 8013826:	bd80      	pop	{r7, pc}
 8013828:	20001b04 	.word	0x20001b04

0801382c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b084      	sub	sp, #16
 8013830:	af00      	add	r7, sp, #0
 8013832:	4603      	mov	r3, r0
 8013834:	460a      	mov	r2, r1
 8013836:	71fb      	strb	r3, [r7, #7]
 8013838:	4613      	mov	r3, r2
 801383a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801383c:	2300      	movs	r3, #0
 801383e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013840:	4b10      	ldr	r3, [pc, #64]	@ (8013884 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff ff20 	bl	801368c <IsListEmpty>
 801384c:	4603      	mov	r3, r0
 801384e:	f083 0301 	eor.w	r3, r3, #1
 8013852:	b2db      	uxtb	r3, r3
 8013854:	2b00      	cmp	r3, #0
 8013856:	d011      	beq.n	801387c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013858:	4b0a      	ldr	r3, [pc, #40]	@ (8013884 <LoRaMacConfirmQueueSetStatus+0x58>)
 801385a:	6859      	ldr	r1, [r3, #4]
 801385c:	4b09      	ldr	r3, [pc, #36]	@ (8013884 <LoRaMacConfirmQueueSetStatus+0x58>)
 801385e:	689a      	ldr	r2, [r3, #8]
 8013860:	79bb      	ldrb	r3, [r7, #6]
 8013862:	4618      	mov	r0, r3
 8013864:	f7ff ff32 	bl	80136cc <GetElement>
 8013868:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d005      	beq.n	801387c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	79fa      	ldrb	r2, [r7, #7]
 8013874:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2201      	movs	r2, #1
 801387a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801387c:	bf00      	nop
 801387e:	3710      	adds	r7, #16
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}
 8013884:	20001b04 	.word	0x20001b04

08013888 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af00      	add	r7, sp, #0
 801388e:	4603      	mov	r3, r0
 8013890:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013892:	2300      	movs	r3, #0
 8013894:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013896:	4b10      	ldr	r3, [pc, #64]	@ (80138d8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013898:	f893 3020 	ldrb.w	r3, [r3, #32]
 801389c:	4618      	mov	r0, r3
 801389e:	f7ff fef5 	bl	801368c <IsListEmpty>
 80138a2:	4603      	mov	r3, r0
 80138a4:	f083 0301 	eor.w	r3, r3, #1
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d00e      	beq.n	80138cc <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80138ae:	4b0a      	ldr	r3, [pc, #40]	@ (80138d8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80138b0:	6859      	ldr	r1, [r3, #4]
 80138b2:	4b09      	ldr	r3, [pc, #36]	@ (80138d8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80138b4:	689a      	ldr	r2, [r3, #8]
 80138b6:	79fb      	ldrb	r3, [r7, #7]
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7ff ff07 	bl	80136cc <GetElement>
 80138be:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d002      	beq.n	80138cc <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	785b      	ldrb	r3, [r3, #1]
 80138ca:	e000      	b.n	80138ce <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80138cc:	2301      	movs	r3, #1
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3710      	adds	r7, #16
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	20001b04 	.word	0x20001b04

080138dc <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b084      	sub	sp, #16
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	4603      	mov	r3, r0
 80138e4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80138e6:	4b16      	ldr	r3, [pc, #88]	@ (8013940 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80138ec:	4a14      	ldr	r2, [pc, #80]	@ (8013940 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80138ee:	79fb      	ldrb	r3, [r7, #7]
 80138f0:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80138f4:	4b12      	ldr	r3, [pc, #72]	@ (8013940 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80138f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7ff fec6 	bl	801368c <IsListEmpty>
 8013900:	4603      	mov	r3, r0
 8013902:	f083 0301 	eor.w	r3, r3, #1
 8013906:	b2db      	uxtb	r3, r3
 8013908:	2b00      	cmp	r3, #0
 801390a:	d015      	beq.n	8013938 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	79fa      	ldrb	r2, [r7, #7]
 8013910:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	78db      	ldrb	r3, [r3, #3]
 8013916:	f083 0301 	eor.w	r3, r3, #1
 801391a:	b2db      	uxtb	r3, r3
 801391c:	2b00      	cmp	r3, #0
 801391e:	d002      	beq.n	8013926 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	2201      	movs	r2, #1
 8013924:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013926:	68f8      	ldr	r0, [r7, #12]
 8013928:	f7ff fe98 	bl	801365c <IncreaseBufferPointer>
 801392c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801392e:	4b04      	ldr	r3, [pc, #16]	@ (8013940 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013930:	689b      	ldr	r3, [r3, #8]
 8013932:	68fa      	ldr	r2, [r7, #12]
 8013934:	429a      	cmp	r2, r3
 8013936:	d1e9      	bne.n	801390c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013938:	bf00      	nop
 801393a:	3710      	adds	r7, #16
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}
 8013940:	20001b04 	.word	0x20001b04

08013944 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
 801394a:	4603      	mov	r3, r0
 801394c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801394e:	4b09      	ldr	r3, [pc, #36]	@ (8013974 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013950:	6859      	ldr	r1, [r3, #4]
 8013952:	4b08      	ldr	r3, [pc, #32]	@ (8013974 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013954:	689a      	ldr	r2, [r3, #8]
 8013956:	79fb      	ldrb	r3, [r7, #7]
 8013958:	4618      	mov	r0, r3
 801395a:	f7ff feb7 	bl	80136cc <GetElement>
 801395e:	4603      	mov	r3, r0
 8013960:	2b00      	cmp	r3, #0
 8013962:	d001      	beq.n	8013968 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013964:	2301      	movs	r3, #1
 8013966:	e000      	b.n	801396a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013968:	2300      	movs	r3, #0
}
 801396a:	4618      	mov	r0, r3
 801396c:	3708      	adds	r7, #8
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	20001b04 	.word	0x20001b04

08013978 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013980:	4b25      	ldr	r3, [pc, #148]	@ (8013a18 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013986:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013988:	2300      	movs	r3, #0
 801398a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 801398c:	f107 0308 	add.w	r3, r7, #8
 8013990:	2204      	movs	r2, #4
 8013992:	2100      	movs	r1, #0
 8013994:	4618      	mov	r0, r3
 8013996:	f003 fc71 	bl	801727c <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801399a:	2300      	movs	r3, #0
 801399c:	73fb      	strb	r3, [r7, #15]
 801399e:	e032      	b.n	8013a06 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80139a0:	4b1d      	ldr	r3, [pc, #116]	@ (8013a18 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	781a      	ldrb	r2, [r3, #0]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80139aa:	4b1b      	ldr	r3, [pc, #108]	@ (8013a18 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80139ac:	685b      	ldr	r3, [r3, #4]
 80139ae:	785a      	ldrb	r2, [r3, #1]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80139b4:	4b18      	ldr	r3, [pc, #96]	@ (8013a18 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	789b      	ldrb	r3, [r3, #2]
 80139ba:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80139bc:	7b7b      	ldrb	r3, [r7, #13]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d005      	beq.n	80139ce <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80139c2:	4b15      	ldr	r3, [pc, #84]	@ (8013a18 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	689b      	ldr	r3, [r3, #8]
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	4798      	blx	r3
 80139cc:	e00b      	b.n	80139e6 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80139ce:	4b12      	ldr	r3, [pc, #72]	@ (8013a18 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80139d0:	685b      	ldr	r3, [r3, #4]
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80139d6:	4b10      	ldr	r3, [pc, #64]	@ (8013a18 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80139d8:	685b      	ldr	r3, [r3, #4]
 80139da:	785b      	ldrb	r3, [r3, #1]
 80139dc:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80139de:	4b0e      	ldr	r3, [pc, #56]	@ (8013a18 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	78db      	ldrb	r3, [r3, #3]
 80139e4:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80139e6:	f7ff feff 	bl	80137e8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80139ea:	7b7b      	ldrb	r3, [r7, #13]
 80139ec:	f083 0301 	eor.w	r3, r3, #1
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d004      	beq.n	8013a00 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80139f6:	f107 0308 	add.w	r3, r7, #8
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7ff feba 	bl	8013774 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013a00:	7bfb      	ldrb	r3, [r7, #15]
 8013a02:	3301      	adds	r3, #1
 8013a04:	73fb      	strb	r3, [r7, #15]
 8013a06:	7bfa      	ldrb	r2, [r7, #15]
 8013a08:	7bbb      	ldrb	r3, [r7, #14]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d3c8      	bcc.n	80139a0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8013a0e:	bf00      	nop
 8013a10:	bf00      	nop
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	20001b04 	.word	0x20001b04

08013a1c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013a1c:	b480      	push	{r7}
 8013a1e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013a20:	4b03      	ldr	r3, [pc, #12]	@ (8013a30 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013a22:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bc80      	pop	{r7}
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop
 8013a30:	20001b04 	.word	0x20001b04

08013a34 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013a38:	4b06      	ldr	r3, [pc, #24]	@ (8013a54 <LoRaMacConfirmQueueIsFull+0x20>)
 8013a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7ff fe34 	bl	80136ac <IsListFull>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d001      	beq.n	8013a4e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	e000      	b.n	8013a50 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013a4e:	2300      	movs	r3, #0
    }
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	20001b04 	.word	0x20001b04

08013a58 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b08e      	sub	sp, #56	@ 0x38
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	60f8      	str	r0, [r7, #12]
 8013a60:	607b      	str	r3, [r7, #4]
 8013a62:	460b      	mov	r3, r1
 8013a64:	817b      	strh	r3, [r7, #10]
 8013a66:	4613      	mov	r3, r2
 8013a68:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d101      	bne.n	8013a74 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a70:	2309      	movs	r3, #9
 8013a72:	e084      	b.n	8013b7e <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 8013a74:	2300      	movs	r3, #0
 8013a76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8013a7e:	f107 0320 	add.w	r3, r7, #32
 8013a82:	2200      	movs	r2, #0
 8013a84:	601a      	str	r2, [r3, #0]
 8013a86:	605a      	str	r2, [r3, #4]
 8013a88:	609a      	str	r2, [r3, #8]
 8013a8a:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8013a8c:	f107 0310 	add.w	r3, r7, #16
 8013a90:	2200      	movs	r2, #0
 8013a92:	601a      	str	r2, [r3, #0]
 8013a94:	605a      	str	r2, [r3, #4]
 8013a96:	609a      	str	r2, [r3, #8]
 8013a98:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013a9e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013aa2:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	0a1b      	lsrs	r3, r3, #8
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	0c1b      	lsrs	r3, r3, #16
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	0e1b      	lsrs	r3, r3, #24
 8013abe:	b2db      	uxtb	r3, r3
 8013ac0:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ac4:	b2db      	uxtb	r3, r3
 8013ac6:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013aca:	0a1b      	lsrs	r3, r3, #8
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ad2:	0c1b      	lsrs	r3, r3, #16
 8013ad4:	b2db      	uxtb	r3, r3
 8013ad6:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ada:	0e1b      	lsrs	r3, r3, #24
 8013adc:	b2db      	uxtb	r3, r3
 8013ade:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013ae0:	e048      	b.n	8013b74 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 8013ae2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013ae8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013aea:	3301      	adds	r3, #1
 8013aec:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013aee:	f107 0320 	add.w	r3, r7, #32
 8013af2:	7a7a      	ldrb	r2, [r7, #9]
 8013af4:	f107 0010 	add.w	r0, r7, #16
 8013af8:	2110      	movs	r1, #16
 8013afa:	f7f8 fa07 	bl	800bf0c <SecureElementAesEncrypt>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d001      	beq.n	8013b08 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b04:	230e      	movs	r3, #14
 8013b06:	e03a      	b.n	8013b7e <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013b08:	2300      	movs	r3, #0
 8013b0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013b0e:	e01e      	b.n	8013b4e <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013b10:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013b14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013b18:	4413      	add	r3, r2
 8013b1a:	461a      	mov	r2, r3
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	4413      	add	r3, r2
 8013b20:	7819      	ldrb	r1, [r3, #0]
 8013b22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013b26:	3338      	adds	r3, #56	@ 0x38
 8013b28:	443b      	add	r3, r7
 8013b2a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013b2e:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8013b32:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013b36:	4403      	add	r3, r0
 8013b38:	4618      	mov	r0, r3
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	4403      	add	r3, r0
 8013b3e:	404a      	eors	r2, r1
 8013b40:	b2d2      	uxtb	r2, r2
 8013b42:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013b44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013b48:	3301      	adds	r3, #1
 8013b4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013b4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013b52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013b56:	2a10      	cmp	r2, #16
 8013b58:	bfa8      	it	ge
 8013b5a:	2210      	movge	r2, #16
 8013b5c:	b212      	sxth	r2, r2
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	dbd6      	blt.n	8013b10 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 8013b62:	897b      	ldrh	r3, [r7, #10]
 8013b64:	3b10      	subs	r3, #16
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013b6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013b6e:	3310      	adds	r3, #16
 8013b70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8013b74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	dcb2      	bgt.n	8013ae2 <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013b7c:	2300      	movs	r3, #0
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3738      	adds	r7, #56	@ 0x38
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}

08013b86 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013b86:	b490      	push	{r4, r7}
 8013b88:	b082      	sub	sp, #8
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	4608      	mov	r0, r1
 8013b90:	4611      	mov	r1, r2
 8013b92:	461a      	mov	r2, r3
 8013b94:	4623      	mov	r3, r4
 8013b96:	80fb      	strh	r3, [r7, #6]
 8013b98:	4603      	mov	r3, r0
 8013b9a:	717b      	strb	r3, [r7, #5]
 8013b9c:	460b      	mov	r3, r1
 8013b9e:	713b      	strb	r3, [r7, #4]
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d101      	bne.n	8013bae <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013baa:	2309      	movs	r3, #9
 8013bac:	e04e      	b.n	8013c4c <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013bae:	69bb      	ldr	r3, [r7, #24]
 8013bb0:	2249      	movs	r2, #73	@ 0x49
 8013bb2:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8013bb4:	69bb      	ldr	r3, [r7, #24]
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	2200      	movs	r2, #0
 8013bba:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	3302      	adds	r3, #2
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013bc4:	69bb      	ldr	r3, [r7, #24]
 8013bc6:	3303      	adds	r3, #3
 8013bc8:	2200      	movs	r2, #0
 8013bca:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013bcc:	69bb      	ldr	r3, [r7, #24]
 8013bce:	3304      	adds	r3, #4
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	3305      	adds	r3, #5
 8013bd8:	78fa      	ldrb	r2, [r7, #3]
 8013bda:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013bdc:	69bb      	ldr	r3, [r7, #24]
 8013bde:	3306      	adds	r3, #6
 8013be0:	693a      	ldr	r2, [r7, #16]
 8013be2:	b2d2      	uxtb	r2, r2
 8013be4:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	0a1a      	lsrs	r2, r3, #8
 8013bea:	69bb      	ldr	r3, [r7, #24]
 8013bec:	3307      	adds	r3, #7
 8013bee:	b2d2      	uxtb	r2, r2
 8013bf0:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	0c1a      	lsrs	r2, r3, #16
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	3308      	adds	r3, #8
 8013bfa:	b2d2      	uxtb	r2, r2
 8013bfc:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	0e1a      	lsrs	r2, r3, #24
 8013c02:	69bb      	ldr	r3, [r7, #24]
 8013c04:	3309      	adds	r3, #9
 8013c06:	b2d2      	uxtb	r2, r2
 8013c08:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013c0a:	69bb      	ldr	r3, [r7, #24]
 8013c0c:	330a      	adds	r3, #10
 8013c0e:	697a      	ldr	r2, [r7, #20]
 8013c10:	b2d2      	uxtb	r2, r2
 8013c12:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	0a1a      	lsrs	r2, r3, #8
 8013c18:	69bb      	ldr	r3, [r7, #24]
 8013c1a:	330b      	adds	r3, #11
 8013c1c:	b2d2      	uxtb	r2, r2
 8013c1e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	0c1a      	lsrs	r2, r3, #16
 8013c24:	69bb      	ldr	r3, [r7, #24]
 8013c26:	330c      	adds	r3, #12
 8013c28:	b2d2      	uxtb	r2, r2
 8013c2a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	0e1a      	lsrs	r2, r3, #24
 8013c30:	69bb      	ldr	r3, [r7, #24]
 8013c32:	330d      	adds	r3, #13
 8013c34:	b2d2      	uxtb	r2, r2
 8013c36:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013c38:	69bb      	ldr	r3, [r7, #24]
 8013c3a:	330e      	adds	r3, #14
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013c40:	69bb      	ldr	r3, [r7, #24]
 8013c42:	330f      	adds	r3, #15
 8013c44:	88fa      	ldrh	r2, [r7, #6]
 8013c46:	b2d2      	uxtb	r2, r2
 8013c48:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013c4a:	2300      	movs	r3, #0
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3708      	adds	r7, #8
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bc90      	pop	{r4, r7}
 8013c54:	4770      	bx	lr

08013c56 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013c56:	b590      	push	{r4, r7, lr}
 8013c58:	b08b      	sub	sp, #44	@ 0x2c
 8013c5a:	af04      	add	r7, sp, #16
 8013c5c:	6078      	str	r0, [r7, #4]
 8013c5e:	4608      	mov	r0, r1
 8013c60:	4611      	mov	r1, r2
 8013c62:	461a      	mov	r2, r3
 8013c64:	4603      	mov	r3, r0
 8013c66:	807b      	strh	r3, [r7, #2]
 8013c68:	460b      	mov	r3, r1
 8013c6a:	707b      	strb	r3, [r7, #1]
 8013c6c:	4613      	mov	r3, r2
 8013c6e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d002      	beq.n	8013c7c <ComputeCmacB0+0x26>
 8013c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d101      	bne.n	8013c80 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013c7c:	2309      	movs	r3, #9
 8013c7e:	e024      	b.n	8013cca <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013c80:	887b      	ldrh	r3, [r7, #2]
 8013c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c86:	d901      	bls.n	8013c8c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013c88:	230d      	movs	r3, #13
 8013c8a:	e01e      	b.n	8013cca <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013c8c:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8013c90:	783a      	ldrb	r2, [r7, #0]
 8013c92:	7879      	ldrb	r1, [r7, #1]
 8013c94:	8878      	ldrh	r0, [r7, #2]
 8013c96:	f107 0308 	add.w	r3, r7, #8
 8013c9a:	9302      	str	r3, [sp, #8]
 8013c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c9e:	9301      	str	r3, [sp, #4]
 8013ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca2:	9300      	str	r3, [sp, #0]
 8013ca4:	4623      	mov	r3, r4
 8013ca6:	f7ff ff6e 	bl	8013b86 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013caa:	887a      	ldrh	r2, [r7, #2]
 8013cac:	7879      	ldrb	r1, [r7, #1]
 8013cae:	f107 0008 	add.w	r0, r7, #8
 8013cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cb4:	9300      	str	r3, [sp, #0]
 8013cb6:	460b      	mov	r3, r1
 8013cb8:	6879      	ldr	r1, [r7, #4]
 8013cba:	f7f8 f8e1 	bl	800be80 <SecureElementComputeAesCmac>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d001      	beq.n	8013cc8 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013cc4:	230e      	movs	r3, #14
 8013cc6:	e000      	b.n	8013cca <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013cc8:	2300      	movs	r3, #0
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	371c      	adds	r7, #28
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd90      	pop	{r4, r7, pc}

08013cd2 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013cd2:	b590      	push	{r4, r7, lr}
 8013cd4:	b0cd      	sub	sp, #308	@ 0x134
 8013cd6:	af04      	add	r7, sp, #16
 8013cd8:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8013cdc:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8013ce0:	6020      	str	r0, [r4, #0]
 8013ce2:	460c      	mov	r4, r1
 8013ce4:	4610      	mov	r0, r2
 8013ce6:	4619      	mov	r1, r3
 8013ce8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013cec:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013cf0:	4622      	mov	r2, r4
 8013cf2:	801a      	strh	r2, [r3, #0]
 8013cf4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013cf8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	701a      	strb	r2, [r3, #0]
 8013d00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013d04:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013d08:	460a      	mov	r2, r1
 8013d0a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013d0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013d10:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d101      	bne.n	8013d1e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013d1a:	2309      	movs	r3, #9
 8013d1c:	e063      	b.n	8013de6 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013d1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013d22:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013d26:	881b      	ldrh	r3, [r3, #0]
 8013d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013d2c:	d901      	bls.n	8013d32 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013d2e:	230d      	movs	r3, #13
 8013d30:	e059      	b.n	8013de6 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013d32:	f107 030c 	add.w	r3, r7, #12
 8013d36:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8013d3a:	2100      	movs	r1, #0
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f003 fa9d 	bl	801727c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013d42:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8013d46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013d4a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013d4e:	781a      	ldrb	r2, [r3, #0]
 8013d50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013d54:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013d58:	7819      	ldrb	r1, [r3, #0]
 8013d5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013d5e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013d62:	8818      	ldrh	r0, [r3, #0]
 8013d64:	f107 030c 	add.w	r3, r7, #12
 8013d68:	9302      	str	r3, [sp, #8]
 8013d6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013d6e:	9301      	str	r3, [sp, #4]
 8013d70:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013d74:	9300      	str	r3, [sp, #0]
 8013d76:	4623      	mov	r3, r4
 8013d78:	f7ff ff05 	bl	8013b86 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013d7c:	f107 030c 	add.w	r3, r7, #12
 8013d80:	3310      	adds	r3, #16
 8013d82:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8013d86:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8013d8a:	8812      	ldrh	r2, [r2, #0]
 8013d8c:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8013d90:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013d94:	6809      	ldr	r1, [r1, #0]
 8013d96:	4618      	mov	r0, r3
 8013d98:	f003 fa35 	bl	8017206 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013d9c:	2306      	movs	r3, #6
 8013d9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013da2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013da6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013daa:	881b      	ldrh	r3, [r3, #0]
 8013dac:	3310      	adds	r3, #16
 8013dae:	4619      	mov	r1, r3
 8013db0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013db4:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	f107 000c 	add.w	r0, r7, #12
 8013dbe:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8013dc2:	f7f8 f877 	bl	800beb4 <SecureElementVerifyAesCmac>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013dcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d101      	bne.n	8013dd8 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	e006      	b.n	8013de6 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	d101      	bne.n	8013de4 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013de0:	2301      	movs	r3, #1
 8013de2:	e000      	b.n	8013de6 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013de4:	230e      	movs	r3, #14
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd90      	pop	{r4, r7, pc}

08013df0 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013df0:	b480      	push	{r7}
 8013df2:	b085      	sub	sp, #20
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	4603      	mov	r3, r0
 8013df8:	6039      	str	r1, [r7, #0]
 8013dfa:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	73fb      	strb	r3, [r7, #15]
 8013e00:	e011      	b.n	8013e26 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013e02:	7bfb      	ldrb	r3, [r7, #15]
 8013e04:	4a0c      	ldr	r2, [pc, #48]	@ (8013e38 <GetKeyAddrItem+0x48>)
 8013e06:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013e0a:	79fa      	ldrb	r2, [r7, #7]
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d107      	bne.n	8013e20 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013e10:	7bfb      	ldrb	r3, [r7, #15]
 8013e12:	009b      	lsls	r3, r3, #2
 8013e14:	4a08      	ldr	r2, [pc, #32]	@ (8013e38 <GetKeyAddrItem+0x48>)
 8013e16:	441a      	add	r2, r3
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	e006      	b.n	8013e2e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013e20:	7bfb      	ldrb	r3, [r7, #15]
 8013e22:	3301      	adds	r3, #1
 8013e24:	73fb      	strb	r3, [r7, #15]
 8013e26:	7bfb      	ldrb	r3, [r7, #15]
 8013e28:	2b01      	cmp	r3, #1
 8013e2a:	d9ea      	bls.n	8013e02 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013e2c:	230b      	movs	r3, #11
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3714      	adds	r7, #20
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bc80      	pop	{r7}
 8013e36:	4770      	bx	lr
 8013e38:	200000f8 	.word	0x200000f8

08013e3c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b088      	sub	sp, #32
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	60b9      	str	r1, [r7, #8]
 8013e44:	607a      	str	r2, [r7, #4]
 8013e46:	461a      	mov	r2, r3
 8013e48:	4603      	mov	r3, r0
 8013e4a:	73fb      	strb	r3, [r7, #15]
 8013e4c:	4613      	mov	r3, r2
 8013e4e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013e50:	f107 0310 	add.w	r3, r7, #16
 8013e54:	2200      	movs	r2, #0
 8013e56:	601a      	str	r2, [r3, #0]
 8013e58:	605a      	str	r2, [r3, #4]
 8013e5a:	609a      	str	r2, [r3, #8]
 8013e5c:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8013e5e:	7bfb      	ldrb	r3, [r7, #15]
 8013e60:	2b08      	cmp	r3, #8
 8013e62:	d002      	beq.n	8013e6a <DeriveSessionKey10x+0x2e>
 8013e64:	2b09      	cmp	r3, #9
 8013e66:	d003      	beq.n	8013e70 <DeriveSessionKey10x+0x34>
 8013e68:	e005      	b.n	8013e76 <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	743b      	strb	r3, [r7, #16]
            break;
 8013e6e:	e004      	b.n	8013e7a <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013e70:	2302      	movs	r3, #2
 8013e72:	743b      	strb	r3, [r7, #16]
            break;
 8013e74:	e001      	b.n	8013e7a <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013e76:	230a      	movs	r3, #10
 8013e78:	e02a      	b.n	8013ed0 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	0a1b      	lsrs	r3, r3, #8
 8013e84:	b2db      	uxtb	r3, r3
 8013e86:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	0c1b      	lsrs	r3, r3, #16
 8013e8c:	b2db      	uxtb	r3, r3
 8013e8e:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	0a1b      	lsrs	r3, r3, #8
 8013e9a:	b2db      	uxtb	r3, r3
 8013e9c:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	0c1b      	lsrs	r3, r3, #16
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013ea6:	89bb      	ldrh	r3, [r7, #12]
 8013ea8:	b2db      	uxtb	r3, r3
 8013eaa:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013eac:	89bb      	ldrh	r3, [r7, #12]
 8013eae:	0a1b      	lsrs	r3, r3, #8
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013eb6:	7bfa      	ldrb	r2, [r7, #15]
 8013eb8:	f107 0310 	add.w	r3, r7, #16
 8013ebc:	2101      	movs	r1, #1
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7f8 f8a4 	bl	800c00c <SecureElementDeriveAndStoreKey>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d001      	beq.n	8013ece <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013eca:	230e      	movs	r3, #14
 8013ecc:	e000      	b.n	8013ed0 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013ece:	2300      	movs	r3, #0
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3720      	adds	r7, #32
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b083      	sub	sp, #12
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	4603      	mov	r3, r0
 8013ee0:	6039      	str	r1, [r7, #0]
 8013ee2:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d101      	bne.n	8013eee <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013eea:	2309      	movs	r3, #9
 8013eec:	e029      	b.n	8013f42 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8013eee:	79fb      	ldrb	r3, [r7, #7]
 8013ef0:	3b01      	subs	r3, #1
 8013ef2:	2b03      	cmp	r3, #3
 8013ef4:	d822      	bhi.n	8013f3c <GetLastFcntDown+0x64>
 8013ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8013efc <GetLastFcntDown+0x24>)
 8013ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013efc:	08013f0d 	.word	0x08013f0d
 8013f00:	08013f19 	.word	0x08013f19
 8013f04:	08013f25 	.word	0x08013f25
 8013f08:	08013f31 	.word	0x08013f31
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8013f4c <GetLastFcntDown+0x74>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	691a      	ldr	r2, [r3, #16]
 8013f12:	683b      	ldr	r3, [r7, #0]
 8013f14:	601a      	str	r2, [r3, #0]
            break;
 8013f16:	e013      	b.n	8013f40 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013f18:	4b0c      	ldr	r3, [pc, #48]	@ (8013f4c <GetLastFcntDown+0x74>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	695a      	ldr	r2, [r3, #20]
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	601a      	str	r2, [r3, #0]
            break;
 8013f22:	e00d      	b.n	8013f40 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013f24:	4b09      	ldr	r3, [pc, #36]	@ (8013f4c <GetLastFcntDown+0x74>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	699a      	ldr	r2, [r3, #24]
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	601a      	str	r2, [r3, #0]
            break;
 8013f2e:	e007      	b.n	8013f40 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013f30:	4b06      	ldr	r3, [pc, #24]	@ (8013f4c <GetLastFcntDown+0x74>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	69da      	ldr	r2, [r3, #28]
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	601a      	str	r2, [r3, #0]
            break;
 8013f3a:	e001      	b.n	8013f40 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013f3c:	2305      	movs	r3, #5
 8013f3e:	e000      	b.n	8013f42 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013f40:	2300      	movs	r3, #0
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	370c      	adds	r7, #12
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bc80      	pop	{r7}
 8013f4a:	4770      	bx	lr
 8013f4c:	20001b28 	.word	0x20001b28

08013f50 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b084      	sub	sp, #16
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	4603      	mov	r3, r0
 8013f58:	6039      	str	r1, [r7, #0]
 8013f5a:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013f60:	f107 020c 	add.w	r2, r7, #12
 8013f64:	79fb      	ldrb	r3, [r7, #7]
 8013f66:	4611      	mov	r1, r2
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7ff ffb5 	bl	8013ed8 <GetLastFcntDown>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d001      	beq.n	8013f78 <CheckFCntDown+0x28>
    {
        return false;
 8013f74:	2300      	movs	r3, #0
 8013f76:	e00a      	b.n	8013f8e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d803      	bhi.n	8013f88 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8013f80:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f86:	d101      	bne.n	8013f8c <CheckFCntDown+0x3c>
    {
        return true;
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e000      	b.n	8013f8e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013f8c:	2300      	movs	r3, #0
    }
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3710      	adds	r7, #16
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
	...

08013f98 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	6039      	str	r1, [r7, #0]
 8013fa2:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013fa4:	79fb      	ldrb	r3, [r7, #7]
 8013fa6:	3b01      	subs	r3, #1
 8013fa8:	2b03      	cmp	r3, #3
 8013faa:	d82b      	bhi.n	8014004 <UpdateFCntDown+0x6c>
 8013fac:	a201      	add	r2, pc, #4	@ (adr r2, 8013fb4 <UpdateFCntDown+0x1c>)
 8013fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb2:	bf00      	nop
 8013fb4:	08013fc5 	.word	0x08013fc5
 8013fb8:	08013fd7 	.word	0x08013fd7
 8013fbc:	08013fe9 	.word	0x08013fe9
 8013fc0:	08013ffb 	.word	0x08013ffb
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013fc4:	4b12      	ldr	r3, [pc, #72]	@ (8014010 <UpdateFCntDown+0x78>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	683a      	ldr	r2, [r7, #0]
 8013fca:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8013fcc:	4b10      	ldr	r3, [pc, #64]	@ (8014010 <UpdateFCntDown+0x78>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	683a      	ldr	r2, [r7, #0]
 8013fd2:	621a      	str	r2, [r3, #32]
            break;
 8013fd4:	e017      	b.n	8014006 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8014010 <UpdateFCntDown+0x78>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	683a      	ldr	r2, [r7, #0]
 8013fdc:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8013fde:	4b0c      	ldr	r3, [pc, #48]	@ (8014010 <UpdateFCntDown+0x78>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	683a      	ldr	r2, [r7, #0]
 8013fe4:	621a      	str	r2, [r3, #32]
            break;
 8013fe6:	e00e      	b.n	8014006 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013fe8:	4b09      	ldr	r3, [pc, #36]	@ (8014010 <UpdateFCntDown+0x78>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	683a      	ldr	r2, [r7, #0]
 8013fee:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8013ff0:	4b07      	ldr	r3, [pc, #28]	@ (8014010 <UpdateFCntDown+0x78>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	683a      	ldr	r2, [r7, #0]
 8013ff6:	621a      	str	r2, [r3, #32]
            break;
 8013ff8:	e005      	b.n	8014006 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013ffa:	4b05      	ldr	r3, [pc, #20]	@ (8014010 <UpdateFCntDown+0x78>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	683a      	ldr	r2, [r7, #0]
 8014000:	61da      	str	r2, [r3, #28]
            break;
 8014002:	e000      	b.n	8014006 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014004:	bf00      	nop
    }
}
 8014006:	bf00      	nop
 8014008:	370c      	adds	r7, #12
 801400a:	46bd      	mov	sp, r7
 801400c:	bc80      	pop	{r7}
 801400e:	4770      	bx	lr
 8014010:	20001b28 	.word	0x20001b28

08014014 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801401a:	4b18      	ldr	r3, [pc, #96]	@ (801407c <ResetFCnts+0x68>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2200      	movs	r2, #0
 8014020:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014022:	4b16      	ldr	r3, [pc, #88]	@ (801407c <ResetFCnts+0x68>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	f04f 32ff 	mov.w	r2, #4294967295
 801402a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801402c:	4b13      	ldr	r3, [pc, #76]	@ (801407c <ResetFCnts+0x68>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f04f 32ff 	mov.w	r2, #4294967295
 8014034:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014036:	4b11      	ldr	r3, [pc, #68]	@ (801407c <ResetFCnts+0x68>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	f04f 32ff 	mov.w	r2, #4294967295
 801403e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014040:	4b0e      	ldr	r3, [pc, #56]	@ (801407c <ResetFCnts+0x68>)
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	4b0d      	ldr	r3, [pc, #52]	@ (801407c <ResetFCnts+0x68>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	6992      	ldr	r2, [r2, #24]
 801404a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801404c:	2300      	movs	r3, #0
 801404e:	607b      	str	r3, [r7, #4]
 8014050:	e00b      	b.n	801406a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8014052:	4b0a      	ldr	r3, [pc, #40]	@ (801407c <ResetFCnts+0x68>)
 8014054:	681a      	ldr	r2, [r3, #0]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	3306      	adds	r3, #6
 801405a:	009b      	lsls	r3, r3, #2
 801405c:	4413      	add	r3, r2
 801405e:	f04f 32ff 	mov.w	r2, #4294967295
 8014062:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	3301      	adds	r3, #1
 8014068:	607b      	str	r3, [r7, #4]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2b00      	cmp	r3, #0
 801406e:	ddf0      	ble.n	8014052 <ResetFCnts+0x3e>
    }
}
 8014070:	bf00      	nop
 8014072:	bf00      	nop
 8014074:	370c      	adds	r7, #12
 8014076:	46bd      	mov	sp, r7
 8014078:	bc80      	pop	{r7}
 801407a:	4770      	bx	lr
 801407c:	20001b28 	.word	0x20001b28

08014080 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8014080:	b480      	push	{r7}
 8014082:	b083      	sub	sp, #12
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8014088:	4b06      	ldr	r3, [pc, #24]	@ (80140a4 <IsJoinNonce10xOk+0x24>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	689b      	ldr	r3, [r3, #8]
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	429a      	cmp	r2, r3
 8014092:	bf8c      	ite	hi
 8014094:	2301      	movhi	r3, #1
 8014096:	2300      	movls	r3, #0
 8014098:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801409a:	4618      	mov	r0, r3
 801409c:	370c      	adds	r7, #12
 801409e:	46bd      	mov	sp, r7
 80140a0:	bc80      	pop	{r7}
 80140a2:	4770      	bx	lr
 80140a4:	20001b28 	.word	0x20001b28

080140a8 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b082      	sub	sp, #8
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d101      	bne.n	80140ba <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80140b6:	2308      	movs	r3, #8
 80140b8:	e01c      	b.n	80140f4 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80140ba:	4a10      	ldr	r2, [pc, #64]	@ (80140fc <LoRaMacCryptoInit+0x54>)
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80140c0:	4b0e      	ldr	r3, [pc, #56]	@ (80140fc <LoRaMacCryptoInit+0x54>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	2228      	movs	r2, #40	@ 0x28
 80140c6:	2100      	movs	r1, #0
 80140c8:	4618      	mov	r0, r3
 80140ca:	f003 f8d7 	bl	801727c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80140ce:	4b0b      	ldr	r3, [pc, #44]	@ (80140fc <LoRaMacCryptoInit+0x54>)
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	2201      	movs	r2, #1
 80140d4:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80140d6:	4b09      	ldr	r3, [pc, #36]	@ (80140fc <LoRaMacCryptoInit+0x54>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	2201      	movs	r2, #1
 80140dc:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80140de:	4b07      	ldr	r3, [pc, #28]	@ (80140fc <LoRaMacCryptoInit+0x54>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2201      	movs	r2, #1
 80140e4:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80140e6:	4b05      	ldr	r3, [pc, #20]	@ (80140fc <LoRaMacCryptoInit+0x54>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	2200      	movs	r2, #0
 80140ec:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80140ee:	f7ff ff91 	bl	8014014 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80140f2:	2300      	movs	r3, #0
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3708      	adds	r7, #8
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	20001b28 	.word	0x20001b28

08014100 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014100:	b480      	push	{r7}
 8014102:	b083      	sub	sp, #12
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014108:	4b04      	ldr	r3, [pc, #16]	@ (801411c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014110:	2300      	movs	r3, #0
}
 8014112:	4618      	mov	r0, r3
 8014114:	370c      	adds	r7, #12
 8014116:	46bd      	mov	sp, r7
 8014118:	bc80      	pop	{r7}
 801411a:	4770      	bx	lr
 801411c:	20001b28 	.word	0x20001b28

08014120 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014120:	b480      	push	{r7}
 8014122:	b083      	sub	sp, #12
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d101      	bne.n	8014132 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801412e:	2309      	movs	r3, #9
 8014130:	e006      	b.n	8014140 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014132:	4b06      	ldr	r3, [pc, #24]	@ (801414c <LoRaMacCryptoGetFCntUp+0x2c>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	68db      	ldr	r3, [r3, #12]
 8014138:	1c5a      	adds	r2, r3, #1
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801413e:	2300      	movs	r3, #0
}
 8014140:	4618      	mov	r0, r3
 8014142:	370c      	adds	r7, #12
 8014144:	46bd      	mov	sp, r7
 8014146:	bc80      	pop	{r7}
 8014148:	4770      	bx	lr
 801414a:	bf00      	nop
 801414c:	20001b28 	.word	0x20001b28

08014150 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b088      	sub	sp, #32
 8014154:	af00      	add	r7, sp, #0
 8014156:	4603      	mov	r3, r0
 8014158:	60b9      	str	r1, [r7, #8]
 801415a:	607a      	str	r2, [r7, #4]
 801415c:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 801415e:	2300      	movs	r3, #0
 8014160:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8014162:	2300      	movs	r3, #0
 8014164:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014166:	2312      	movs	r3, #18
 8014168:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d101      	bne.n	8014174 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014170:	2309      	movs	r3, #9
 8014172:	e035      	b.n	80141e0 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8014174:	f107 0214 	add.w	r2, r7, #20
 8014178:	7bfb      	ldrb	r3, [r7, #15]
 801417a:	4611      	mov	r1, r2
 801417c:	4618      	mov	r0, r3
 801417e:	f7ff feab 	bl	8013ed8 <GetLastFcntDown>
 8014182:	4603      	mov	r3, r0
 8014184:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014186:	7efb      	ldrb	r3, [r7, #27]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d001      	beq.n	8014190 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 801418c:	7efb      	ldrb	r3, [r7, #27]
 801418e:	e027      	b.n	80141e0 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014196:	d103      	bne.n	80141a0 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	601a      	str	r2, [r3, #0]
 801419e:	e01e      	b.n	80141de <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	68ba      	ldr	r2, [r7, #8]
 80141a6:	1ad3      	subs	r3, r2, r3
 80141a8:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80141aa:	69fb      	ldr	r3, [r7, #28]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	dd05      	ble.n	80141bc <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80141b0:	697a      	ldr	r2, [r7, #20]
 80141b2:	69fb      	ldr	r3, [r7, #28]
 80141b4:	441a      	add	r2, r3
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	601a      	str	r2, [r3, #0]
 80141ba:	e010      	b.n	80141de <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80141bc:	69fb      	ldr	r3, [r7, #28]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d104      	bne.n	80141cc <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80141c2:	697a      	ldr	r2, [r7, #20]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80141c8:	2307      	movs	r3, #7
 80141ca:	e009      	b.n	80141e0 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	0c1b      	lsrs	r3, r3, #16
 80141d0:	041b      	lsls	r3, r3, #16
 80141d2:	68ba      	ldr	r2, [r7, #8]
 80141d4:	4413      	add	r3, r2
 80141d6:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80141de:	2300      	movs	r3, #0
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3720      	adds	r7, #32
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}

080141e8 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80141e8:	b480      	push	{r7}
 80141ea:	b085      	sub	sp, #20
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d101      	bne.n	80141fa <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80141f6:	2309      	movs	r3, #9
 80141f8:	e019      	b.n	801422e <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80141fa:	2300      	movs	r3, #0
 80141fc:	60fb      	str	r3, [r7, #12]
 80141fe:	e012      	b.n	8014226 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014200:	4b0d      	ldr	r3, [pc, #52]	@ (8014238 <LoRaMacCryptoSetMulticastReference+0x50>)
 8014202:	6819      	ldr	r1, [r3, #0]
 8014204:	68fa      	ldr	r2, [r7, #12]
 8014206:	4613      	mov	r3, r2
 8014208:	005b      	lsls	r3, r3, #1
 801420a:	4413      	add	r3, r2
 801420c:	011b      	lsls	r3, r3, #4
 801420e:	461a      	mov	r2, r3
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	4413      	add	r3, r2
 8014214:	68fa      	ldr	r2, [r7, #12]
 8014216:	3206      	adds	r2, #6
 8014218:	0092      	lsls	r2, r2, #2
 801421a:	440a      	add	r2, r1
 801421c:	3204      	adds	r2, #4
 801421e:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	3301      	adds	r3, #1
 8014224:	60fb      	str	r3, [r7, #12]
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	2b00      	cmp	r3, #0
 801422a:	dde9      	ble.n	8014200 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801422c:	2300      	movs	r3, #0
}
 801422e:	4618      	mov	r0, r3
 8014230:	3714      	adds	r7, #20
 8014232:	46bd      	mov	sp, r7
 8014234:	bc80      	pop	{r7}
 8014236:	4770      	bx	lr
 8014238:	20001b28 	.word	0x20001b28

0801423c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	4603      	mov	r3, r0
 8014244:	6039      	str	r1, [r7, #0]
 8014246:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014248:	79fb      	ldrb	r3, [r7, #7]
 801424a:	6839      	ldr	r1, [r7, #0]
 801424c:	4618      	mov	r0, r3
 801424e:	f7f7 fdb9 	bl	800bdc4 <SecureElementSetKey>
 8014252:	4603      	mov	r3, r0
 8014254:	2b00      	cmp	r3, #0
 8014256:	d001      	beq.n	801425c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014258:	230e      	movs	r3, #14
 801425a:	e021      	b.n	80142a0 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 801425c:	79fb      	ldrb	r3, [r7, #7]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d11d      	bne.n	801429e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014262:	4b11      	ldr	r3, [pc, #68]	@ (80142a8 <LoRaMacCryptoSetKey+0x6c>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	789b      	ldrb	r3, [r3, #2]
 8014268:	210b      	movs	r1, #11
 801426a:	4618      	mov	r0, r3
 801426c:	f000 fa54 	bl	8014718 <LoRaMacCryptoDeriveLifeTimeKey>
 8014270:	4603      	mov	r3, r0
 8014272:	2b00      	cmp	r3, #0
 8014274:	d001      	beq.n	801427a <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014276:	230e      	movs	r3, #14
 8014278:	e012      	b.n	80142a0 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801427a:	210c      	movs	r1, #12
 801427c:	2000      	movs	r0, #0
 801427e:	f000 fa4b 	bl	8014718 <LoRaMacCryptoDeriveLifeTimeKey>
 8014282:	4603      	mov	r3, r0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d001      	beq.n	801428c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014288:	230e      	movs	r3, #14
 801428a:	e009      	b.n	80142a0 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801428c:	210a      	movs	r1, #10
 801428e:	2000      	movs	r0, #0
 8014290:	f000 fa42 	bl	8014718 <LoRaMacCryptoDeriveLifeTimeKey>
 8014294:	4603      	mov	r3, r0
 8014296:	2b00      	cmp	r3, #0
 8014298:	d001      	beq.n	801429e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801429a:	230e      	movs	r3, #14
 801429c:	e000      	b.n	80142a0 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801429e:	2300      	movs	r3, #0
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3708      	adds	r7, #8
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	20001b28 	.word	0x20001b28

080142ac <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b086      	sub	sp, #24
 80142b0:	af02      	add	r7, sp, #8
 80142b2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d101      	bne.n	80142be <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80142ba:	2309      	movs	r3, #9
 80142bc:	e02d      	b.n	801431a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80142be:	2301      	movs	r3, #1
 80142c0:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80142c2:	4b18      	ldr	r3, [pc, #96]	@ (8014324 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	889a      	ldrh	r2, [r3, #4]
 80142c8:	3201      	adds	r2, #1
 80142ca:	b292      	uxth	r2, r2
 80142cc:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80142ce:	4b15      	ldr	r3, [pc, #84]	@ (8014324 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	889a      	ldrh	r2, [r3, #4]
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f000 fc14 	bl	8014b06 <LoRaMacSerializerJoinRequest>
 80142de:	4603      	mov	r3, r0
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d001      	beq.n	80142e8 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80142e4:	2310      	movs	r3, #16
 80142e6:	e018      	b.n	801431a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6819      	ldr	r1, [r3, #0]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	3318      	adds	r3, #24
 80142f0:	7bfa      	ldrb	r2, [r7, #15]
 80142f2:	9300      	str	r3, [sp, #0]
 80142f4:	4613      	mov	r3, r2
 80142f6:	2213      	movs	r2, #19
 80142f8:	2000      	movs	r0, #0
 80142fa:	f7f7 fdc1 	bl	800be80 <SecureElementComputeAesCmac>
 80142fe:	4603      	mov	r3, r0
 8014300:	2b00      	cmp	r3, #0
 8014302:	d001      	beq.n	8014308 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014304:	230e      	movs	r3, #14
 8014306:	e008      	b.n	801431a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f000 fbfc 	bl	8014b06 <LoRaMacSerializerJoinRequest>
 801430e:	4603      	mov	r3, r0
 8014310:	2b00      	cmp	r3, #0
 8014312:	d001      	beq.n	8014318 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014314:	2310      	movs	r3, #16
 8014316:	e000      	b.n	801431a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014318:	2300      	movs	r3, #0
}
 801431a:	4618      	mov	r0, r3
 801431c:	3710      	adds	r7, #16
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop
 8014324:	20001b28 	.word	0x20001b28

08014328 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014328:	b590      	push	{r4, r7, lr}
 801432a:	b097      	sub	sp, #92	@ 0x5c
 801432c:	af04      	add	r7, sp, #16
 801432e:	4603      	mov	r3, r0
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	607a      	str	r2, [r7, #4]
 8014334:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d002      	beq.n	8014342 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d101      	bne.n	8014346 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014342:	2309      	movs	r3, #9
 8014344:	e0d1      	b.n	80144ea <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014346:	2312      	movs	r3, #18
 8014348:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801434c:	f107 0314 	add.w	r3, r7, #20
 8014350:	2221      	movs	r2, #33	@ 0x21
 8014352:	2100      	movs	r1, #0
 8014354:	4618      	mov	r0, r3
 8014356:	f007 fcf1 	bl	801bd3c <memset>
    uint8_t versionMinor         = 0;
 801435a:	2300      	movs	r3, #0
 801435c:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801435e:	4b65      	ldr	r3, [pc, #404]	@ (80144f4 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	889b      	ldrh	r3, [r3, #4]
 8014364:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681c      	ldr	r4, [r3, #0]
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	791b      	ldrb	r3, [r3, #4]
 8014370:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8014374:	7bf8      	ldrb	r0, [r7, #15]
 8014376:	f107 0213 	add.w	r2, r7, #19
 801437a:	9202      	str	r2, [sp, #8]
 801437c:	f107 0214 	add.w	r2, r7, #20
 8014380:	9201      	str	r2, [sp, #4]
 8014382:	9300      	str	r3, [sp, #0]
 8014384:	4623      	mov	r3, r4
 8014386:	460a      	mov	r2, r1
 8014388:	68b9      	ldr	r1, [r7, #8]
 801438a:	f7f7 fe7e 	bl	800c08a <SecureElementProcessJoinAccept>
 801438e:	4603      	mov	r3, r0
 8014390:	2b00      	cmp	r3, #0
 8014392:	d001      	beq.n	8014398 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014394:	230e      	movs	r3, #14
 8014396:	e0a8      	b.n	80144ea <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	6818      	ldr	r0, [r3, #0]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	791b      	ldrb	r3, [r3, #4]
 80143a0:	461a      	mov	r2, r3
 80143a2:	f107 0314 	add.w	r3, r7, #20
 80143a6:	4619      	mov	r1, r3
 80143a8:	f002 ff2d 	bl	8017206 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f000 f9ed 	bl	801478c <LoRaMacParserJoinAccept>
 80143b2:	4603      	mov	r3, r0
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d001      	beq.n	80143bc <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80143b8:	230f      	movs	r3, #15
 80143ba:	e096      	b.n	80144ea <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80143bc:	2300      	movs	r3, #0
 80143be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	799b      	ldrb	r3, [r3, #6]
 80143c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	79db      	ldrb	r3, [r3, #7]
 80143cc:	021b      	lsls	r3, r3, #8
 80143ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80143d0:	4313      	orrs	r3, r2
 80143d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	7a1b      	ldrb	r3, [r3, #8]
 80143d8:	041b      	lsls	r3, r3, #16
 80143da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80143dc:	4313      	orrs	r3, r2
 80143de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80143e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80143e2:	f7ff fe4d 	bl	8014080 <IsJoinNonce10xOk>
 80143e6:	4603      	mov	r3, r0
 80143e8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 80143ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d010      	beq.n	8014416 <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80143f4:	4b3f      	ldr	r3, [pc, #252]	@ (80144f4 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80143fa:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80143fc:	7cfb      	ldrb	r3, [r7, #19]
 80143fe:	210b      	movs	r1, #11
 8014400:	4618      	mov	r0, r3
 8014402:	f000 f989 	bl	8014718 <LoRaMacCryptoDeriveLifeTimeKey>
 8014406:	4603      	mov	r3, r0
 8014408:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801440c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014410:	2b00      	cmp	r3, #0
 8014412:	d005      	beq.n	8014420 <LoRaMacCryptoHandleJoinAccept+0xf8>
 8014414:	e001      	b.n	801441a <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014416:	2303      	movs	r3, #3
 8014418:	e067      	b.n	80144ea <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 801441a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801441e:	e064      	b.n	80144ea <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8014420:	210c      	movs	r1, #12
 8014422:	2000      	movs	r0, #0
 8014424:	f000 f978 	bl	8014718 <LoRaMacCryptoDeriveLifeTimeKey>
 8014428:	4603      	mov	r3, r0
 801442a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801442e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014432:	2b00      	cmp	r3, #0
 8014434:	d002      	beq.n	801443c <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 8014436:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801443a:	e056      	b.n	80144ea <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 801443c:	210a      	movs	r1, #10
 801443e:	2000      	movs	r0, #0
 8014440:	f000 f96a 	bl	8014718 <LoRaMacCryptoDeriveLifeTimeKey>
 8014444:	4603      	mov	r3, r0
 8014446:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801444a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801444e:	2b00      	cmp	r3, #0
 8014450:	d002      	beq.n	8014458 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 8014452:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014456:	e048      	b.n	80144ea <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	7a5b      	ldrb	r3, [r3, #9]
 801445c:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	7a9b      	ldrb	r3, [r3, #10]
 8014462:	021b      	lsls	r3, r3, #8
 8014464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014466:	4313      	orrs	r3, r2
 8014468:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	7adb      	ldrb	r3, [r3, #11]
 801446e:	041b      	lsls	r3, r3, #16
 8014470:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014472:	4313      	orrs	r3, r2
 8014474:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014476:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801447a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801447c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801447e:	2009      	movs	r0, #9
 8014480:	f7ff fcdc 	bl	8013e3c <DeriveSessionKey10x>
 8014484:	4603      	mov	r3, r0
 8014486:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801448a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801448e:	2b00      	cmp	r3, #0
 8014490:	d002      	beq.n	8014498 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 8014492:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014496:	e028      	b.n	80144ea <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014498:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801449c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801449e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80144a0:	2008      	movs	r0, #8
 80144a2:	f7ff fccb 	bl	8013e3c <DeriveSessionKey10x>
 80144a6:	4603      	mov	r3, r0
 80144a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80144ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d002      	beq.n	80144ba <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 80144b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80144b8:	e017      	b.n	80144ea <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80144ba:	4b0e      	ldr	r3, [pc, #56]	@ (80144f4 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	7cfa      	ldrb	r2, [r7, #19]
 80144c0:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80144c2:	4b0c      	ldr	r3, [pc, #48]	@ (80144f4 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	2200      	movs	r2, #0
 80144c8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80144ca:	4b0a      	ldr	r3, [pc, #40]	@ (80144f4 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	f04f 32ff 	mov.w	r2, #4294967295
 80144d2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80144d4:	4b07      	ldr	r3, [pc, #28]	@ (80144f4 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	f04f 32ff 	mov.w	r2, #4294967295
 80144dc:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80144de:	4b05      	ldr	r3, [pc, #20]	@ (80144f4 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	f04f 32ff 	mov.w	r2, #4294967295
 80144e6:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80144e8:	2300      	movs	r3, #0
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	374c      	adds	r7, #76	@ 0x4c
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd90      	pop	{r4, r7, pc}
 80144f2:	bf00      	nop
 80144f4:	20001b28 	.word	0x20001b28

080144f8 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80144f8:	b590      	push	{r4, r7, lr}
 80144fa:	b08b      	sub	sp, #44	@ 0x2c
 80144fc:	af04      	add	r7, sp, #16
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	607b      	str	r3, [r7, #4]
 8014502:	460b      	mov	r3, r1
 8014504:	72fb      	strb	r3, [r7, #11]
 8014506:	4613      	mov	r3, r2
 8014508:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801450a:	2312      	movs	r3, #18
 801450c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801450e:	2309      	movs	r3, #9
 8014510:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d101      	bne.n	801451c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014518:	2309      	movs	r3, #9
 801451a:	e05e      	b.n	80145da <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 801451c:	4b31      	ldr	r3, [pc, #196]	@ (80145e4 <LoRaMacCryptoSecureMessage+0xec>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	68db      	ldr	r3, [r3, #12]
 8014522:	68fa      	ldr	r2, [r7, #12]
 8014524:	429a      	cmp	r2, r3
 8014526:	d201      	bcs.n	801452c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014528:	2306      	movs	r3, #6
 801452a:	e056      	b.n	80145da <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d101      	bne.n	801453a <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014536:	2308      	movs	r3, #8
 8014538:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801453a:	4b2a      	ldr	r3, [pc, #168]	@ (80145e4 <LoRaMacCryptoSecureMessage+0xec>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	68db      	ldr	r3, [r3, #12]
 8014540:	68fa      	ldr	r2, [r7, #12]
 8014542:	429a      	cmp	r2, r3
 8014544:	d916      	bls.n	8014574 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014550:	b219      	sxth	r1, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	689c      	ldr	r4, [r3, #8]
 8014556:	7dfa      	ldrb	r2, [r7, #23]
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	9301      	str	r3, [sp, #4]
 801455c:	2300      	movs	r3, #0
 801455e:	9300      	str	r3, [sp, #0]
 8014560:	4623      	mov	r3, r4
 8014562:	f7ff fa79 	bl	8013a58 <PayloadEncrypt>
 8014566:	4603      	mov	r3, r0
 8014568:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801456a:	7dbb      	ldrb	r3, [r7, #22]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d001      	beq.n	8014574 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014570:	7dbb      	ldrb	r3, [r7, #22]
 8014572:	e032      	b.n	80145da <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 fb48 	bl	8014c0a <LoRaMacSerializerData>
 801457a:	4603      	mov	r3, r0
 801457c:	2b00      	cmp	r3, #0
 801457e:	d001      	beq.n	8014584 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014580:	2310      	movs	r3, #16
 8014582:	e02a      	b.n	80145da <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014584:	2308      	movs	r3, #8
 8014586:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6818      	ldr	r0, [r3, #0]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	791b      	ldrb	r3, [r3, #4]
 8014590:	3b04      	subs	r3, #4
 8014592:	b299      	uxth	r1, r3
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	689b      	ldr	r3, [r3, #8]
 8014598:	687a      	ldr	r2, [r7, #4]
 801459a:	322c      	adds	r2, #44	@ 0x2c
 801459c:	7dfc      	ldrb	r4, [r7, #23]
 801459e:	9203      	str	r2, [sp, #12]
 80145a0:	68fa      	ldr	r2, [r7, #12]
 80145a2:	9202      	str	r2, [sp, #8]
 80145a4:	9301      	str	r3, [sp, #4]
 80145a6:	2300      	movs	r3, #0
 80145a8:	9300      	str	r3, [sp, #0]
 80145aa:	2300      	movs	r3, #0
 80145ac:	4622      	mov	r2, r4
 80145ae:	f7ff fb52 	bl	8013c56 <ComputeCmacB0>
 80145b2:	4603      	mov	r3, r0
 80145b4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80145b6:	7dbb      	ldrb	r3, [r7, #22]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d001      	beq.n	80145c0 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 80145bc:	7dbb      	ldrb	r3, [r7, #22]
 80145be:	e00c      	b.n	80145da <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f000 fb22 	bl	8014c0a <LoRaMacSerializerData>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d001      	beq.n	80145d0 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80145cc:	2310      	movs	r3, #16
 80145ce:	e004      	b.n	80145da <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80145d0:	4b04      	ldr	r3, [pc, #16]	@ (80145e4 <LoRaMacCryptoSecureMessage+0xec>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	68fa      	ldr	r2, [r7, #12]
 80145d6:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80145d8:	2300      	movs	r3, #0
}
 80145da:	4618      	mov	r0, r3
 80145dc:	371c      	adds	r7, #28
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd90      	pop	{r4, r7, pc}
 80145e2:	bf00      	nop
 80145e4:	20001b28 	.word	0x20001b28

080145e8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80145e8:	b590      	push	{r4, r7, lr}
 80145ea:	b08b      	sub	sp, #44	@ 0x2c
 80145ec:	af04      	add	r7, sp, #16
 80145ee:	60b9      	str	r1, [r7, #8]
 80145f0:	607b      	str	r3, [r7, #4]
 80145f2:	4603      	mov	r3, r0
 80145f4:	73fb      	strb	r3, [r7, #15]
 80145f6:	4613      	mov	r3, r2
 80145f8:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80145fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d101      	bne.n	8014604 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014600:	2309      	movs	r3, #9
 8014602:	e083      	b.n	801470c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014604:	7bbb      	ldrb	r3, [r7, #14]
 8014606:	6879      	ldr	r1, [r7, #4]
 8014608:	4618      	mov	r0, r3
 801460a:	f7ff fca1 	bl	8013f50 <CheckFCntDown>
 801460e:	4603      	mov	r3, r0
 8014610:	f083 0301 	eor.w	r3, r3, #1
 8014614:	b2db      	uxtb	r3, r3
 8014616:	2b00      	cmp	r3, #0
 8014618:	d001      	beq.n	801461e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801461a:	2306      	movs	r3, #6
 801461c:	e076      	b.n	801470c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801461e:	2312      	movs	r3, #18
 8014620:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014622:	2309      	movs	r3, #9
 8014624:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014626:	2308      	movs	r3, #8
 8014628:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801462a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801462c:	f000 f979 	bl	8014922 <LoRaMacParserData>
 8014630:	4603      	mov	r3, r0
 8014632:	2b00      	cmp	r3, #0
 8014634:	d001      	beq.n	801463a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014636:	230f      	movs	r3, #15
 8014638:	e068      	b.n	801470c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801463a:	f107 0210 	add.w	r2, r7, #16
 801463e:	7bfb      	ldrb	r3, [r7, #15]
 8014640:	4611      	mov	r1, r2
 8014642:	4618      	mov	r0, r3
 8014644:	f7ff fbd4 	bl	8013df0 <GetKeyAddrItem>
 8014648:	4603      	mov	r3, r0
 801464a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801464c:	7d7b      	ldrb	r3, [r7, #21]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d001      	beq.n	8014656 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014652:	7d7b      	ldrb	r3, [r7, #21]
 8014654:	e05a      	b.n	801470c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	785b      	ldrb	r3, [r3, #1]
 801465a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	789b      	ldrb	r3, [r3, #2]
 8014660:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014664:	689b      	ldr	r3, [r3, #8]
 8014666:	68ba      	ldr	r2, [r7, #8]
 8014668:	429a      	cmp	r2, r3
 801466a:	d001      	beq.n	8014670 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 801466c:	2302      	movs	r3, #2
 801466e:	e04d      	b.n	801470c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014672:	7b1b      	ldrb	r3, [r3, #12]
 8014674:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014678:	b2db      	uxtb	r3, r3
 801467a:	2b00      	cmp	r3, #0
 801467c:	bf14      	ite	ne
 801467e:	2301      	movne	r3, #1
 8014680:	2300      	moveq	r3, #0
 8014682:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014684:	4b23      	ldr	r3, [pc, #140]	@ (8014714 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	789b      	ldrb	r3, [r3, #2]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d101      	bne.n	8014692 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801468e:	2300      	movs	r3, #0
 8014690:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014694:	6818      	ldr	r0, [r3, #0]
 8014696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014698:	791b      	ldrb	r3, [r3, #4]
 801469a:	3b04      	subs	r3, #4
 801469c:	b299      	uxth	r1, r3
 801469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146a2:	7dbc      	ldrb	r4, [r7, #22]
 80146a4:	7d3a      	ldrb	r2, [r7, #20]
 80146a6:	9303      	str	r3, [sp, #12]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	9302      	str	r3, [sp, #8]
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	9301      	str	r3, [sp, #4]
 80146b0:	2301      	movs	r3, #1
 80146b2:	9300      	str	r3, [sp, #0]
 80146b4:	4623      	mov	r3, r4
 80146b6:	f7ff fb0c 	bl	8013cd2 <VerifyCmacB0>
 80146ba:	4603      	mov	r3, r0
 80146bc:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80146be:	7d7b      	ldrb	r3, [r7, #21]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d001      	beq.n	80146c8 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 80146c4:	7d7b      	ldrb	r3, [r7, #21]
 80146c6:	e021      	b.n	801470c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80146c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d101      	bne.n	80146d6 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80146d2:	2308      	movs	r3, #8
 80146d4:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80146d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146d8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80146da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80146e0:	b219      	sxth	r1, r3
 80146e2:	7dfa      	ldrb	r2, [r7, #23]
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	9301      	str	r3, [sp, #4]
 80146e8:	2301      	movs	r3, #1
 80146ea:	9300      	str	r3, [sp, #0]
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	f7ff f9b3 	bl	8013a58 <PayloadEncrypt>
 80146f2:	4603      	mov	r3, r0
 80146f4:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80146f6:	7d7b      	ldrb	r3, [r7, #21]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d001      	beq.n	8014700 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80146fc:	7d7b      	ldrb	r3, [r7, #21]
 80146fe:	e005      	b.n	801470c <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8014700:	7bbb      	ldrb	r3, [r7, #14]
 8014702:	6879      	ldr	r1, [r7, #4]
 8014704:	4618      	mov	r0, r3
 8014706:	f7ff fc47 	bl	8013f98 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801470a:	2300      	movs	r3, #0
}
 801470c:	4618      	mov	r0, r3
 801470e:	371c      	adds	r7, #28
 8014710:	46bd      	mov	sp, r7
 8014712:	bd90      	pop	{r4, r7, pc}
 8014714:	20001b28 	.word	0x20001b28

08014718 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b088      	sub	sp, #32
 801471c:	af00      	add	r7, sp, #0
 801471e:	4603      	mov	r3, r0
 8014720:	460a      	mov	r2, r1
 8014722:	71fb      	strb	r3, [r7, #7]
 8014724:	4613      	mov	r3, r2
 8014726:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8014728:	f107 030c 	add.w	r3, r7, #12
 801472c:	2200      	movs	r2, #0
 801472e:	601a      	str	r2, [r3, #0]
 8014730:	605a      	str	r2, [r3, #4]
 8014732:	609a      	str	r2, [r3, #8]
 8014734:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8014736:	2300      	movs	r3, #0
 8014738:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 801473a:	79bb      	ldrb	r3, [r7, #6]
 801473c:	2b0c      	cmp	r3, #12
 801473e:	d00b      	beq.n	8014758 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8014740:	2b0c      	cmp	r3, #12
 8014742:	dc0f      	bgt.n	8014764 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 8014744:	2b0a      	cmp	r3, #10
 8014746:	d00a      	beq.n	801475e <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8014748:	2b0b      	cmp	r3, #11
 801474a:	d10b      	bne.n	8014764 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801474c:	79fb      	ldrb	r3, [r7, #7]
 801474e:	2b01      	cmp	r3, #1
 8014750:	d10a      	bne.n	8014768 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 8014752:	2320      	movs	r3, #32
 8014754:	733b      	strb	r3, [r7, #12]
            }
            break;
 8014756:	e007      	b.n	8014768 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8014758:	230b      	movs	r3, #11
 801475a:	77fb      	strb	r3, [r7, #31]
            break;
 801475c:	e005      	b.n	801476a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 801475e:	2330      	movs	r3, #48	@ 0x30
 8014760:	733b      	strb	r3, [r7, #12]
            break;
 8014762:	e002      	b.n	801476a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014764:	230a      	movs	r3, #10
 8014766:	e00d      	b.n	8014784 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8014768:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801476a:	79ba      	ldrb	r2, [r7, #6]
 801476c:	7ff9      	ldrb	r1, [r7, #31]
 801476e:	f107 030c 	add.w	r3, r7, #12
 8014772:	4618      	mov	r0, r3
 8014774:	f7f7 fc4a 	bl	800c00c <SecureElementDeriveAndStoreKey>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d001      	beq.n	8014782 <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801477e:	230e      	movs	r3, #14
 8014780:	e000      	b.n	8014784 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014782:	2300      	movs	r3, #0
}
 8014784:	4618      	mov	r0, r3
 8014786:	3720      	adds	r7, #32
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}

0801478c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d003      	beq.n	80147a2 <LoRaMacParserJoinAccept+0x16>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d101      	bne.n	80147a6 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80147a2:	2302      	movs	r3, #2
 80147a4:	e0b9      	b.n	801491a <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80147a6:	2300      	movs	r3, #0
 80147a8:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	89fb      	ldrh	r3, [r7, #14]
 80147b0:	1c59      	adds	r1, r3, #1
 80147b2:	81f9      	strh	r1, [r7, #14]
 80147b4:	4413      	add	r3, r2
 80147b6:	781a      	ldrb	r2, [r3, #0]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	1d98      	adds	r0, r3, #6
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681a      	ldr	r2, [r3, #0]
 80147c4:	89fb      	ldrh	r3, [r7, #14]
 80147c6:	4413      	add	r3, r2
 80147c8:	2203      	movs	r2, #3
 80147ca:	4619      	mov	r1, r3
 80147cc:	f002 fd1b 	bl	8017206 <memcpy1>
    bufItr = bufItr + 3;
 80147d0:	89fb      	ldrh	r3, [r7, #14]
 80147d2:	3303      	adds	r3, #3
 80147d4:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f103 0009 	add.w	r0, r3, #9
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	89fb      	ldrh	r3, [r7, #14]
 80147e2:	4413      	add	r3, r2
 80147e4:	2203      	movs	r2, #3
 80147e6:	4619      	mov	r1, r3
 80147e8:	f002 fd0d 	bl	8017206 <memcpy1>
    bufItr = bufItr + 3;
 80147ec:	89fb      	ldrh	r3, [r7, #14]
 80147ee:	3303      	adds	r3, #3
 80147f0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	681a      	ldr	r2, [r3, #0]
 80147f6:	89fb      	ldrh	r3, [r7, #14]
 80147f8:	1c59      	adds	r1, r3, #1
 80147fa:	81f9      	strh	r1, [r7, #14]
 80147fc:	4413      	add	r3, r2
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	461a      	mov	r2, r3
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681a      	ldr	r2, [r3, #0]
 801480a:	89fb      	ldrh	r3, [r7, #14]
 801480c:	1c59      	adds	r1, r3, #1
 801480e:	81f9      	strh	r1, [r7, #14]
 8014810:	4413      	add	r3, r2
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	021a      	lsls	r2, r3, #8
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	68db      	ldr	r3, [r3, #12]
 801481a:	431a      	orrs	r2, r3
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681a      	ldr	r2, [r3, #0]
 8014824:	89fb      	ldrh	r3, [r7, #14]
 8014826:	1c59      	adds	r1, r3, #1
 8014828:	81f9      	strh	r1, [r7, #14]
 801482a:	4413      	add	r3, r2
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	041a      	lsls	r2, r3, #16
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	431a      	orrs	r2, r3
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	89fb      	ldrh	r3, [r7, #14]
 8014840:	1c59      	adds	r1, r3, #1
 8014842:	81f9      	strh	r1, [r7, #14]
 8014844:	4413      	add	r3, r2
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	061a      	lsls	r2, r3, #24
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	68db      	ldr	r3, [r3, #12]
 801484e:	431a      	orrs	r2, r3
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	681a      	ldr	r2, [r3, #0]
 8014858:	89fb      	ldrh	r3, [r7, #14]
 801485a:	1c59      	adds	r1, r3, #1
 801485c:	81f9      	strh	r1, [r7, #14]
 801485e:	4413      	add	r3, r2
 8014860:	781a      	ldrb	r2, [r3, #0]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	681a      	ldr	r2, [r3, #0]
 801486a:	89fb      	ldrh	r3, [r7, #14]
 801486c:	1c59      	adds	r1, r3, #1
 801486e:	81f9      	strh	r1, [r7, #14]
 8014870:	4413      	add	r3, r2
 8014872:	781a      	ldrb	r2, [r3, #0]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	791b      	ldrb	r3, [r3, #4]
 801487c:	1f1a      	subs	r2, r3, #4
 801487e:	89fb      	ldrh	r3, [r7, #14]
 8014880:	1ad3      	subs	r3, r2, r3
 8014882:	2b10      	cmp	r3, #16
 8014884:	d10e      	bne.n	80148a4 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f103 0012 	add.w	r0, r3, #18
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	89fb      	ldrh	r3, [r7, #14]
 8014892:	4413      	add	r3, r2
 8014894:	2210      	movs	r2, #16
 8014896:	4619      	mov	r1, r3
 8014898:	f002 fcb5 	bl	8017206 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801489c:	89fb      	ldrh	r3, [r7, #14]
 801489e:	3310      	adds	r3, #16
 80148a0:	81fb      	strh	r3, [r7, #14]
 80148a2:	e008      	b.n	80148b6 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	791b      	ldrb	r3, [r3, #4]
 80148a8:	1f1a      	subs	r2, r3, #4
 80148aa:	89fb      	ldrh	r3, [r7, #14]
 80148ac:	1ad3      	subs	r3, r2, r3
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	dd01      	ble.n	80148b6 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80148b2:	2301      	movs	r3, #1
 80148b4:	e031      	b.n	801491a <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681a      	ldr	r2, [r3, #0]
 80148ba:	89fb      	ldrh	r3, [r7, #14]
 80148bc:	1c59      	adds	r1, r3, #1
 80148be:	81f9      	strh	r1, [r7, #14]
 80148c0:	4413      	add	r3, r2
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	461a      	mov	r2, r3
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	89fb      	ldrh	r3, [r7, #14]
 80148d0:	1c59      	adds	r1, r3, #1
 80148d2:	81f9      	strh	r1, [r7, #14]
 80148d4:	4413      	add	r3, r2
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	021a      	lsls	r2, r3, #8
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148de:	431a      	orrs	r2, r3
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	89fb      	ldrh	r3, [r7, #14]
 80148ea:	1c59      	adds	r1, r3, #1
 80148ec:	81f9      	strh	r1, [r7, #14]
 80148ee:	4413      	add	r3, r2
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	041a      	lsls	r2, r3, #16
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148f8:	431a      	orrs	r2, r3
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	89fb      	ldrh	r3, [r7, #14]
 8014904:	1c59      	adds	r1, r3, #1
 8014906:	81f9      	strh	r1, [r7, #14]
 8014908:	4413      	add	r3, r2
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	061a      	lsls	r2, r3, #24
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014912:	431a      	orrs	r2, r3
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014918:	2300      	movs	r3, #0
}
 801491a:	4618      	mov	r0, r3
 801491c:	3710      	adds	r7, #16
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}

08014922 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014922:	b580      	push	{r7, lr}
 8014924:	b084      	sub	sp, #16
 8014926:	af00      	add	r7, sp, #0
 8014928:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d003      	beq.n	8014938 <LoRaMacParserData+0x16>
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d101      	bne.n	801493c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014938:	2302      	movs	r3, #2
 801493a:	e0e0      	b.n	8014afe <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 801493c:	2300      	movs	r3, #0
 801493e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	89fb      	ldrh	r3, [r7, #14]
 8014946:	1c59      	adds	r1, r3, #1
 8014948:	81f9      	strh	r1, [r7, #14]
 801494a:	4413      	add	r3, r2
 801494c:	781a      	ldrb	r2, [r3, #0]
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	89fb      	ldrh	r3, [r7, #14]
 8014958:	1c59      	adds	r1, r3, #1
 801495a:	81f9      	strh	r1, [r7, #14]
 801495c:	4413      	add	r3, r2
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	461a      	mov	r2, r3
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	89fb      	ldrh	r3, [r7, #14]
 801496c:	1c59      	adds	r1, r3, #1
 801496e:	81f9      	strh	r1, [r7, #14]
 8014970:	4413      	add	r3, r2
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	021a      	lsls	r2, r3, #8
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	689b      	ldr	r3, [r3, #8]
 801497a:	431a      	orrs	r2, r3
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	681a      	ldr	r2, [r3, #0]
 8014984:	89fb      	ldrh	r3, [r7, #14]
 8014986:	1c59      	adds	r1, r3, #1
 8014988:	81f9      	strh	r1, [r7, #14]
 801498a:	4413      	add	r3, r2
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	041a      	lsls	r2, r3, #16
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	689b      	ldr	r3, [r3, #8]
 8014994:	431a      	orrs	r2, r3
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681a      	ldr	r2, [r3, #0]
 801499e:	89fb      	ldrh	r3, [r7, #14]
 80149a0:	1c59      	adds	r1, r3, #1
 80149a2:	81f9      	strh	r1, [r7, #14]
 80149a4:	4413      	add	r3, r2
 80149a6:	781b      	ldrb	r3, [r3, #0]
 80149a8:	061a      	lsls	r2, r3, #24
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	689b      	ldr	r3, [r3, #8]
 80149ae:	431a      	orrs	r2, r3
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	89fb      	ldrh	r3, [r7, #14]
 80149ba:	1c59      	adds	r1, r3, #1
 80149bc:	81f9      	strh	r1, [r7, #14]
 80149be:	4413      	add	r3, r2
 80149c0:	781a      	ldrb	r2, [r3, #0]
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	89fb      	ldrh	r3, [r7, #14]
 80149cc:	1c59      	adds	r1, r3, #1
 80149ce:	81f9      	strh	r1, [r7, #14]
 80149d0:	4413      	add	r3, r2
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	461a      	mov	r2, r3
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681a      	ldr	r2, [r3, #0]
 80149de:	89fb      	ldrh	r3, [r7, #14]
 80149e0:	1c59      	adds	r1, r3, #1
 80149e2:	81f9      	strh	r1, [r7, #14]
 80149e4:	4413      	add	r3, r2
 80149e6:	781b      	ldrb	r3, [r3, #0]
 80149e8:	0219      	lsls	r1, r3, #8
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	89db      	ldrh	r3, [r3, #14]
 80149ee:	b21a      	sxth	r2, r3
 80149f0:	b20b      	sxth	r3, r1
 80149f2:	4313      	orrs	r3, r2
 80149f4:	b21b      	sxth	r3, r3
 80149f6:	b29a      	uxth	r2, r3
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	f103 0010 	add.w	r0, r3, #16
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	681a      	ldr	r2, [r3, #0]
 8014a06:	89fb      	ldrh	r3, [r7, #14]
 8014a08:	18d1      	adds	r1, r2, r3
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	7b1b      	ldrb	r3, [r3, #12]
 8014a0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014a12:	b2db      	uxtb	r3, r3
 8014a14:	461a      	mov	r2, r3
 8014a16:	f002 fbf6 	bl	8017206 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	7b1b      	ldrb	r3, [r3, #12]
 8014a1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014a22:	b2db      	uxtb	r3, r3
 8014a24:	461a      	mov	r2, r3
 8014a26:	89fb      	ldrh	r3, [r7, #14]
 8014a28:	4413      	add	r3, r2
 8014a2a:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2200      	movs	r2, #0
 8014a30:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2200      	movs	r2, #0
 8014a38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	791b      	ldrb	r3, [r3, #4]
 8014a40:	461a      	mov	r2, r3
 8014a42:	89fb      	ldrh	r3, [r7, #14]
 8014a44:	1ad3      	subs	r3, r2, r3
 8014a46:	2b04      	cmp	r3, #4
 8014a48:	dd27      	ble.n	8014a9a <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	681a      	ldr	r2, [r3, #0]
 8014a4e:	89fb      	ldrh	r3, [r7, #14]
 8014a50:	1c59      	adds	r1, r3, #1
 8014a52:	81f9      	strh	r1, [r7, #14]
 8014a54:	4413      	add	r3, r2
 8014a56:	781a      	ldrb	r2, [r3, #0]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	791a      	ldrb	r2, [r3, #4]
 8014a62:	89fb      	ldrh	r3, [r7, #14]
 8014a64:	b2db      	uxtb	r3, r3
 8014a66:	1ad3      	subs	r3, r2, r3
 8014a68:	b2db      	uxtb	r3, r3
 8014a6a:	3b04      	subs	r3, #4
 8014a6c:	b2da      	uxtb	r2, r3
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	89fb      	ldrh	r3, [r7, #14]
 8014a7e:	18d1      	adds	r1, r2, r3
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a86:	461a      	mov	r2, r3
 8014a88:	f002 fbbd 	bl	8017206 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a92:	461a      	mov	r2, r3
 8014a94:	89fb      	ldrh	r3, [r7, #14]
 8014a96:	4413      	add	r3, r2
 8014a98:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	791b      	ldrb	r3, [r3, #4]
 8014aa2:	3b04      	subs	r3, #4
 8014aa4:	4413      	add	r3, r2
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	6819      	ldr	r1, [r3, #0]
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	791b      	ldrb	r3, [r3, #4]
 8014aba:	3b03      	subs	r3, #3
 8014abc:	440b      	add	r3, r1
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	021b      	lsls	r3, r3, #8
 8014ac2:	431a      	orrs	r2, r3
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6819      	ldr	r1, [r3, #0]
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	791b      	ldrb	r3, [r3, #4]
 8014ad4:	3b02      	subs	r3, #2
 8014ad6:	440b      	add	r3, r1
 8014ad8:	781b      	ldrb	r3, [r3, #0]
 8014ada:	041b      	lsls	r3, r3, #16
 8014adc:	431a      	orrs	r2, r3
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6819      	ldr	r1, [r3, #0]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	791b      	ldrb	r3, [r3, #4]
 8014aee:	3b01      	subs	r3, #1
 8014af0:	440b      	add	r3, r1
 8014af2:	781b      	ldrb	r3, [r3, #0]
 8014af4:	061b      	lsls	r3, r3, #24
 8014af6:	431a      	orrs	r2, r3
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014afc:	2300      	movs	r3, #0
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3710      	adds	r7, #16
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}

08014b06 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014b06:	b580      	push	{r7, lr}
 8014b08:	b084      	sub	sp, #16
 8014b0a:	af00      	add	r7, sp, #0
 8014b0c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d003      	beq.n	8014b1c <LoRaMacSerializerJoinRequest+0x16>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d101      	bne.n	8014b20 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	e070      	b.n	8014c02 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014b20:	2300      	movs	r3, #0
 8014b22:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	791b      	ldrb	r3, [r3, #4]
 8014b28:	2b16      	cmp	r3, #22
 8014b2a:	d801      	bhi.n	8014b30 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014b2c:	2302      	movs	r3, #2
 8014b2e:	e068      	b.n	8014c02 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681a      	ldr	r2, [r3, #0]
 8014b34:	89fb      	ldrh	r3, [r7, #14]
 8014b36:	1c59      	adds	r1, r3, #1
 8014b38:	81f9      	strh	r1, [r7, #14]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	7952      	ldrb	r2, [r2, #5]
 8014b40:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	681a      	ldr	r2, [r3, #0]
 8014b46:	89fb      	ldrh	r3, [r7, #14]
 8014b48:	18d0      	adds	r0, r2, r3
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	3306      	adds	r3, #6
 8014b4e:	2208      	movs	r2, #8
 8014b50:	4619      	mov	r1, r3
 8014b52:	f002 fb73 	bl	801723c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014b56:	89fb      	ldrh	r3, [r7, #14]
 8014b58:	3308      	adds	r3, #8
 8014b5a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	89fb      	ldrh	r3, [r7, #14]
 8014b62:	18d0      	adds	r0, r2, r3
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	330e      	adds	r3, #14
 8014b68:	2208      	movs	r2, #8
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	f002 fb66 	bl	801723c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014b70:	89fb      	ldrh	r3, [r7, #14]
 8014b72:	3308      	adds	r3, #8
 8014b74:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	8ad9      	ldrh	r1, [r3, #22]
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681a      	ldr	r2, [r3, #0]
 8014b7e:	89fb      	ldrh	r3, [r7, #14]
 8014b80:	1c58      	adds	r0, r3, #1
 8014b82:	81f8      	strh	r0, [r7, #14]
 8014b84:	4413      	add	r3, r2
 8014b86:	b2ca      	uxtb	r2, r1
 8014b88:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	8adb      	ldrh	r3, [r3, #22]
 8014b8e:	0a1b      	lsrs	r3, r3, #8
 8014b90:	b299      	uxth	r1, r3
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681a      	ldr	r2, [r3, #0]
 8014b96:	89fb      	ldrh	r3, [r7, #14]
 8014b98:	1c58      	adds	r0, r3, #1
 8014b9a:	81f8      	strh	r0, [r7, #14]
 8014b9c:	4413      	add	r3, r2
 8014b9e:	b2ca      	uxtb	r2, r1
 8014ba0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6999      	ldr	r1, [r3, #24]
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681a      	ldr	r2, [r3, #0]
 8014baa:	89fb      	ldrh	r3, [r7, #14]
 8014bac:	1c58      	adds	r0, r3, #1
 8014bae:	81f8      	strh	r0, [r7, #14]
 8014bb0:	4413      	add	r3, r2
 8014bb2:	b2ca      	uxtb	r2, r1
 8014bb4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	699b      	ldr	r3, [r3, #24]
 8014bba:	0a19      	lsrs	r1, r3, #8
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681a      	ldr	r2, [r3, #0]
 8014bc0:	89fb      	ldrh	r3, [r7, #14]
 8014bc2:	1c58      	adds	r0, r3, #1
 8014bc4:	81f8      	strh	r0, [r7, #14]
 8014bc6:	4413      	add	r3, r2
 8014bc8:	b2ca      	uxtb	r2, r1
 8014bca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	699b      	ldr	r3, [r3, #24]
 8014bd0:	0c19      	lsrs	r1, r3, #16
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681a      	ldr	r2, [r3, #0]
 8014bd6:	89fb      	ldrh	r3, [r7, #14]
 8014bd8:	1c58      	adds	r0, r3, #1
 8014bda:	81f8      	strh	r0, [r7, #14]
 8014bdc:	4413      	add	r3, r2
 8014bde:	b2ca      	uxtb	r2, r1
 8014be0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	699b      	ldr	r3, [r3, #24]
 8014be6:	0e19      	lsrs	r1, r3, #24
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	681a      	ldr	r2, [r3, #0]
 8014bec:	89fb      	ldrh	r3, [r7, #14]
 8014bee:	1c58      	adds	r0, r3, #1
 8014bf0:	81f8      	strh	r0, [r7, #14]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	b2ca      	uxtb	r2, r1
 8014bf6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014bf8:	89fb      	ldrh	r3, [r7, #14]
 8014bfa:	b2da      	uxtb	r2, r3
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014c00:	2300      	movs	r3, #0
}
 8014c02:	4618      	mov	r0, r3
 8014c04:	3710      	adds	r7, #16
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}

08014c0a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014c0a:	b580      	push	{r7, lr}
 8014c0c:	b084      	sub	sp, #16
 8014c0e:	af00      	add	r7, sp, #0
 8014c10:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d003      	beq.n	8014c20 <LoRaMacSerializerData+0x16>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d101      	bne.n	8014c24 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014c20:	2301      	movs	r3, #1
 8014c22:	e0e3      	b.n	8014dec <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8014c24:	2300      	movs	r3, #0
 8014c26:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014c28:	2308      	movs	r3, #8
 8014c2a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	7b1b      	ldrb	r3, [r3, #12]
 8014c30:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014c34:	b2db      	uxtb	r3, r3
 8014c36:	461a      	mov	r2, r3
 8014c38:	89bb      	ldrh	r3, [r7, #12]
 8014c3a:	4413      	add	r3, r2
 8014c3c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d002      	beq.n	8014c4e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014c48:	89bb      	ldrh	r3, [r7, #12]
 8014c4a:	3301      	adds	r3, #1
 8014c4c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014c54:	461a      	mov	r2, r3
 8014c56:	89bb      	ldrh	r3, [r7, #12]
 8014c58:	4413      	add	r3, r2
 8014c5a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014c5c:	89bb      	ldrh	r3, [r7, #12]
 8014c5e:	3304      	adds	r3, #4
 8014c60:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	791b      	ldrb	r3, [r3, #4]
 8014c66:	461a      	mov	r2, r3
 8014c68:	89bb      	ldrh	r3, [r7, #12]
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	d901      	bls.n	8014c72 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014c6e:	2302      	movs	r3, #2
 8014c70:	e0bc      	b.n	8014dec <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681a      	ldr	r2, [r3, #0]
 8014c76:	89fb      	ldrh	r3, [r7, #14]
 8014c78:	1c59      	adds	r1, r3, #1
 8014c7a:	81f9      	strh	r1, [r7, #14]
 8014c7c:	4413      	add	r3, r2
 8014c7e:	687a      	ldr	r2, [r7, #4]
 8014c80:	7952      	ldrb	r2, [r2, #5]
 8014c82:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	6899      	ldr	r1, [r3, #8]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681a      	ldr	r2, [r3, #0]
 8014c8c:	89fb      	ldrh	r3, [r7, #14]
 8014c8e:	1c58      	adds	r0, r3, #1
 8014c90:	81f8      	strh	r0, [r7, #14]
 8014c92:	4413      	add	r3, r2
 8014c94:	b2ca      	uxtb	r2, r1
 8014c96:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	689b      	ldr	r3, [r3, #8]
 8014c9c:	0a19      	lsrs	r1, r3, #8
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	89fb      	ldrh	r3, [r7, #14]
 8014ca4:	1c58      	adds	r0, r3, #1
 8014ca6:	81f8      	strh	r0, [r7, #14]
 8014ca8:	4413      	add	r3, r2
 8014caa:	b2ca      	uxtb	r2, r1
 8014cac:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	689b      	ldr	r3, [r3, #8]
 8014cb2:	0c19      	lsrs	r1, r3, #16
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681a      	ldr	r2, [r3, #0]
 8014cb8:	89fb      	ldrh	r3, [r7, #14]
 8014cba:	1c58      	adds	r0, r3, #1
 8014cbc:	81f8      	strh	r0, [r7, #14]
 8014cbe:	4413      	add	r3, r2
 8014cc0:	b2ca      	uxtb	r2, r1
 8014cc2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	689b      	ldr	r3, [r3, #8]
 8014cc8:	0e19      	lsrs	r1, r3, #24
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	89fb      	ldrh	r3, [r7, #14]
 8014cd0:	1c58      	adds	r0, r3, #1
 8014cd2:	81f8      	strh	r0, [r7, #14]
 8014cd4:	4413      	add	r3, r2
 8014cd6:	b2ca      	uxtb	r2, r1
 8014cd8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	89fb      	ldrh	r3, [r7, #14]
 8014ce0:	1c59      	adds	r1, r3, #1
 8014ce2:	81f9      	strh	r1, [r7, #14]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	687a      	ldr	r2, [r7, #4]
 8014ce8:	7b12      	ldrb	r2, [r2, #12]
 8014cea:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	89d9      	ldrh	r1, [r3, #14]
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681a      	ldr	r2, [r3, #0]
 8014cf4:	89fb      	ldrh	r3, [r7, #14]
 8014cf6:	1c58      	adds	r0, r3, #1
 8014cf8:	81f8      	strh	r0, [r7, #14]
 8014cfa:	4413      	add	r3, r2
 8014cfc:	b2ca      	uxtb	r2, r1
 8014cfe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	89db      	ldrh	r3, [r3, #14]
 8014d04:	0a1b      	lsrs	r3, r3, #8
 8014d06:	b299      	uxth	r1, r3
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	89fb      	ldrh	r3, [r7, #14]
 8014d0e:	1c58      	adds	r0, r3, #1
 8014d10:	81f8      	strh	r0, [r7, #14]
 8014d12:	4413      	add	r3, r2
 8014d14:	b2ca      	uxtb	r2, r1
 8014d16:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	681a      	ldr	r2, [r3, #0]
 8014d1c:	89fb      	ldrh	r3, [r7, #14]
 8014d1e:	18d0      	adds	r0, r2, r3
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f103 0110 	add.w	r1, r3, #16
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	7b1b      	ldrb	r3, [r3, #12]
 8014d2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014d2e:	b2db      	uxtb	r3, r3
 8014d30:	461a      	mov	r2, r3
 8014d32:	f002 fa68 	bl	8017206 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	7b1b      	ldrb	r3, [r3, #12]
 8014d3a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014d3e:	b2db      	uxtb	r3, r3
 8014d40:	461a      	mov	r2, r3
 8014d42:	89fb      	ldrh	r3, [r7, #14]
 8014d44:	4413      	add	r3, r2
 8014d46:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d009      	beq.n	8014d66 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681a      	ldr	r2, [r3, #0]
 8014d56:	89fb      	ldrh	r3, [r7, #14]
 8014d58:	1c59      	adds	r1, r3, #1
 8014d5a:	81f9      	strh	r1, [r7, #14]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014d64:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	89fb      	ldrh	r3, [r7, #14]
 8014d6c:	18d0      	adds	r0, r2, r3
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d78:	461a      	mov	r2, r3
 8014d7a:	f002 fa44 	bl	8017206 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d84:	461a      	mov	r2, r3
 8014d86:	89fb      	ldrh	r3, [r7, #14]
 8014d88:	4413      	add	r3, r2
 8014d8a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681a      	ldr	r2, [r3, #0]
 8014d94:	89fb      	ldrh	r3, [r7, #14]
 8014d96:	1c58      	adds	r0, r3, #1
 8014d98:	81f8      	strh	r0, [r7, #14]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	b2ca      	uxtb	r2, r1
 8014d9e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014da4:	0a19      	lsrs	r1, r3, #8
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	681a      	ldr	r2, [r3, #0]
 8014daa:	89fb      	ldrh	r3, [r7, #14]
 8014dac:	1c58      	adds	r0, r3, #1
 8014dae:	81f8      	strh	r0, [r7, #14]
 8014db0:	4413      	add	r3, r2
 8014db2:	b2ca      	uxtb	r2, r1
 8014db4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dba:	0c19      	lsrs	r1, r3, #16
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	89fb      	ldrh	r3, [r7, #14]
 8014dc2:	1c58      	adds	r0, r3, #1
 8014dc4:	81f8      	strh	r0, [r7, #14]
 8014dc6:	4413      	add	r3, r2
 8014dc8:	b2ca      	uxtb	r2, r1
 8014dca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dd0:	0e19      	lsrs	r1, r3, #24
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681a      	ldr	r2, [r3, #0]
 8014dd6:	89fb      	ldrh	r3, [r7, #14]
 8014dd8:	1c58      	adds	r0, r3, #1
 8014dda:	81f8      	strh	r0, [r7, #14]
 8014ddc:	4413      	add	r3, r2
 8014dde:	b2ca      	uxtb	r2, r1
 8014de0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014de2:	89fb      	ldrh	r3, [r7, #14]
 8014de4:	b2da      	uxtb	r2, r3
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014dea:	2300      	movs	r3, #0
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3710      	adds	r7, #16
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014df4:	b480      	push	{r7}
 8014df6:	b083      	sub	sp, #12
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014dfe:	79fb      	ldrb	r3, [r7, #7]
 8014e00:	2b05      	cmp	r3, #5
 8014e02:	d101      	bne.n	8014e08 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8014e04:	2301      	movs	r3, #1
 8014e06:	e000      	b.n	8014e0a <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014e08:	2300      	movs	r3, #0
        }
    }
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	370c      	adds	r7, #12
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bc80      	pop	{r7}
 8014e12:	4770      	bx	lr

08014e14 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b084      	sub	sp, #16
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	6039      	str	r1, [r7, #0]
 8014e1e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014e20:	2300      	movs	r3, #0
 8014e22:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014e24:	79fb      	ldrb	r3, [r7, #7]
 8014e26:	2b05      	cmp	r3, #5
 8014e28:	d105      	bne.n	8014e36 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8014e2a:	6838      	ldr	r0, [r7, #0]
 8014e2c:	f001 f8c8 	bl	8015fc0 <RegionEU868GetPhyParam>
 8014e30:	4603      	mov	r3, r0
 8014e32:	60fb      	str	r3, [r7, #12]
 8014e34:	e001      	b.n	8014e3a <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3710      	adds	r7, #16
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}

08014e44 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b082      	sub	sp, #8
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	6039      	str	r1, [r7, #0]
 8014e4e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014e50:	79fb      	ldrb	r3, [r7, #7]
 8014e52:	2b05      	cmp	r3, #5
 8014e54:	d103      	bne.n	8014e5e <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8014e56:	6838      	ldr	r0, [r7, #0]
 8014e58:	f001 f9f8 	bl	801624c <RegionEU868SetBandTxDone>
 8014e5c:	e000      	b.n	8014e60 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014e5e:	bf00      	nop
        }
    }
}
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b082      	sub	sp, #8
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	6039      	str	r1, [r7, #0]
 8014e70:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014e72:	79fb      	ldrb	r3, [r7, #7]
 8014e74:	2b05      	cmp	r3, #5
 8014e76:	d103      	bne.n	8014e80 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8014e78:	6838      	ldr	r0, [r7, #0]
 8014e7a:	f001 fa13 	bl	80162a4 <RegionEU868InitDefaults>
 8014e7e:	e000      	b.n	8014e82 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014e80:	bf00      	nop
        }
    }
}
 8014e82:	bf00      	nop
 8014e84:	3708      	adds	r7, #8
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}

08014e8a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014e8a:	b580      	push	{r7, lr}
 8014e8c:	b082      	sub	sp, #8
 8014e8e:	af00      	add	r7, sp, #0
 8014e90:	4603      	mov	r3, r0
 8014e92:	6039      	str	r1, [r7, #0]
 8014e94:	71fb      	strb	r3, [r7, #7]
 8014e96:	4613      	mov	r3, r2
 8014e98:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014e9a:	79fb      	ldrb	r3, [r7, #7]
 8014e9c:	2b05      	cmp	r3, #5
 8014e9e:	d106      	bne.n	8014eae <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8014ea0:	79bb      	ldrb	r3, [r7, #6]
 8014ea2:	4619      	mov	r1, r3
 8014ea4:	6838      	ldr	r0, [r7, #0]
 8014ea6:	f001 fa9b 	bl	80163e0 <RegionEU868Verify>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	e000      	b.n	8014eb0 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014eae:	2300      	movs	r3, #0
        }
    }
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3708      	adds	r7, #8
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	6039      	str	r1, [r7, #0]
 8014ec2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014ec4:	79fb      	ldrb	r3, [r7, #7]
 8014ec6:	2b05      	cmp	r3, #5
 8014ec8:	d103      	bne.n	8014ed2 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8014eca:	6838      	ldr	r0, [r7, #0]
 8014ecc:	f001 fb04 	bl	80164d8 <RegionEU868ApplyCFList>
 8014ed0:	e000      	b.n	8014ed4 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014ed2:	bf00      	nop
        }
    }
}
 8014ed4:	bf00      	nop
 8014ed6:	3708      	adds	r7, #8
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}

08014edc <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b082      	sub	sp, #8
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	6039      	str	r1, [r7, #0]
 8014ee6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014ee8:	79fb      	ldrb	r3, [r7, #7]
 8014eea:	2b05      	cmp	r3, #5
 8014eec:	d104      	bne.n	8014ef8 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8014eee:	6838      	ldr	r0, [r7, #0]
 8014ef0:	f001 fb66 	bl	80165c0 <RegionEU868ChanMaskSet>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	e000      	b.n	8014efa <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014ef8:	2300      	movs	r3, #0
        }
    }
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}

08014f02 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014f02:	b580      	push	{r7, lr}
 8014f04:	b082      	sub	sp, #8
 8014f06:	af00      	add	r7, sp, #0
 8014f08:	603b      	str	r3, [r7, #0]
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	71fb      	strb	r3, [r7, #7]
 8014f0e:	460b      	mov	r3, r1
 8014f10:	71bb      	strb	r3, [r7, #6]
 8014f12:	4613      	mov	r3, r2
 8014f14:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014f16:	79fb      	ldrb	r3, [r7, #7]
 8014f18:	2b05      	cmp	r3, #5
 8014f1a:	d107      	bne.n	8014f2c <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014f1c:	7979      	ldrb	r1, [r7, #5]
 8014f1e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	683a      	ldr	r2, [r7, #0]
 8014f26:	f001 fb75 	bl	8016614 <RegionEU868ComputeRxWindowParameters>
 8014f2a:	e000      	b.n	8014f2e <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014f2c:	bf00      	nop
        }
    }
}
 8014f2e:	bf00      	nop
 8014f30:	3708      	adds	r7, #8
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}

08014f36 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014f36:	b580      	push	{r7, lr}
 8014f38:	b084      	sub	sp, #16
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	60b9      	str	r1, [r7, #8]
 8014f40:	607a      	str	r2, [r7, #4]
 8014f42:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014f44:	7bfb      	ldrb	r3, [r7, #15]
 8014f46:	2b05      	cmp	r3, #5
 8014f48:	d105      	bne.n	8014f56 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8014f4a:	6879      	ldr	r1, [r7, #4]
 8014f4c:	68b8      	ldr	r0, [r7, #8]
 8014f4e:	f001 fbbb 	bl	80166c8 <RegionEU868RxConfig>
 8014f52:	4603      	mov	r3, r0
 8014f54:	e000      	b.n	8014f58 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014f56:	2300      	movs	r3, #0
        }
    }
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3710      	adds	r7, #16
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b084      	sub	sp, #16
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	60b9      	str	r1, [r7, #8]
 8014f68:	607a      	str	r2, [r7, #4]
 8014f6a:	603b      	str	r3, [r7, #0]
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014f70:	7bfb      	ldrb	r3, [r7, #15]
 8014f72:	2b05      	cmp	r3, #5
 8014f74:	d106      	bne.n	8014f84 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8014f76:	683a      	ldr	r2, [r7, #0]
 8014f78:	6879      	ldr	r1, [r7, #4]
 8014f7a:	68b8      	ldr	r0, [r7, #8]
 8014f7c:	f001 fc74 	bl	8016868 <RegionEU868TxConfig>
 8014f80:	4603      	mov	r3, r0
 8014f82:	e000      	b.n	8014f86 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014f84:	2300      	movs	r3, #0
        }
    }
}
 8014f86:	4618      	mov	r0, r3
 8014f88:	3710      	adds	r7, #16
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}

08014f8e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014f8e:	b580      	push	{r7, lr}
 8014f90:	b086      	sub	sp, #24
 8014f92:	af02      	add	r7, sp, #8
 8014f94:	60b9      	str	r1, [r7, #8]
 8014f96:	607a      	str	r2, [r7, #4]
 8014f98:	603b      	str	r3, [r7, #0]
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014f9e:	7bfb      	ldrb	r3, [r7, #15]
 8014fa0:	2b05      	cmp	r3, #5
 8014fa2:	d109      	bne.n	8014fb8 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8014fa4:	69fb      	ldr	r3, [r7, #28]
 8014fa6:	9300      	str	r3, [sp, #0]
 8014fa8:	69bb      	ldr	r3, [r7, #24]
 8014faa:	683a      	ldr	r2, [r7, #0]
 8014fac:	6879      	ldr	r1, [r7, #4]
 8014fae:	68b8      	ldr	r0, [r7, #8]
 8014fb0:	f001 fd2a 	bl	8016a08 <RegionEU868LinkAdrReq>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	e000      	b.n	8014fba <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014fb8:	2300      	movs	r3, #0
        }
    }
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}

08014fc2 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014fc2:	b580      	push	{r7, lr}
 8014fc4:	b082      	sub	sp, #8
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	4603      	mov	r3, r0
 8014fca:	6039      	str	r1, [r7, #0]
 8014fcc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014fce:	79fb      	ldrb	r3, [r7, #7]
 8014fd0:	2b05      	cmp	r3, #5
 8014fd2:	d104      	bne.n	8014fde <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8014fd4:	6838      	ldr	r0, [r7, #0]
 8014fd6:	f001 fe39 	bl	8016c4c <RegionEU868RxParamSetupReq>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	e000      	b.n	8014fe0 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014fde:	2300      	movs	r3, #0
        }
    }
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3708      	adds	r7, #8
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b082      	sub	sp, #8
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	4603      	mov	r3, r0
 8014ff0:	6039      	str	r1, [r7, #0]
 8014ff2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014ff4:	79fb      	ldrb	r3, [r7, #7]
 8014ff6:	2b05      	cmp	r3, #5
 8014ff8:	d104      	bne.n	8015004 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8014ffa:	6838      	ldr	r0, [r7, #0]
 8014ffc:	f001 fe64 	bl	8016cc8 <RegionEU868NewChannelReq>
 8015000:	4603      	mov	r3, r0
 8015002:	e000      	b.n	8015006 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015004:	2300      	movs	r3, #0
        }
    }
}
 8015006:	4618      	mov	r0, r3
 8015008:	3708      	adds	r7, #8
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}

0801500e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801500e:	b580      	push	{r7, lr}
 8015010:	b082      	sub	sp, #8
 8015012:	af00      	add	r7, sp, #0
 8015014:	4603      	mov	r3, r0
 8015016:	6039      	str	r1, [r7, #0]
 8015018:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801501a:	79fb      	ldrb	r3, [r7, #7]
 801501c:	2b05      	cmp	r3, #5
 801501e:	d104      	bne.n	801502a <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8015020:	6838      	ldr	r0, [r7, #0]
 8015022:	f001 feaf 	bl	8016d84 <RegionEU868TxParamSetupReq>
 8015026:	4603      	mov	r3, r0
 8015028:	e000      	b.n	801502c <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801502a:	2300      	movs	r3, #0
        }
    }
}
 801502c:	4618      	mov	r0, r3
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	4603      	mov	r3, r0
 801503c:	6039      	str	r1, [r7, #0]
 801503e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015040:	79fb      	ldrb	r3, [r7, #7]
 8015042:	2b05      	cmp	r3, #5
 8015044:	d104      	bne.n	8015050 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8015046:	6838      	ldr	r0, [r7, #0]
 8015048:	f001 fea8 	bl	8016d9c <RegionEU868DlChannelReq>
 801504c:	4603      	mov	r3, r0
 801504e:	e000      	b.n	8015052 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015050:	2300      	movs	r3, #0
        }
    }
}
 8015052:	4618      	mov	r0, r3
 8015054:	3708      	adds	r7, #8
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}

0801505a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801505a:	b580      	push	{r7, lr}
 801505c:	b082      	sub	sp, #8
 801505e:	af00      	add	r7, sp, #0
 8015060:	4603      	mov	r3, r0
 8015062:	71fb      	strb	r3, [r7, #7]
 8015064:	460b      	mov	r3, r1
 8015066:	71bb      	strb	r3, [r7, #6]
 8015068:	4613      	mov	r3, r2
 801506a:	717b      	strb	r3, [r7, #5]
    switch( region )
 801506c:	79fb      	ldrb	r3, [r7, #7]
 801506e:	2b05      	cmp	r3, #5
 8015070:	d108      	bne.n	8015084 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8015072:	797a      	ldrb	r2, [r7, #5]
 8015074:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015078:	4611      	mov	r1, r2
 801507a:	4618      	mov	r0, r3
 801507c:	f001 fed8 	bl	8016e30 <RegionEU868AlternateDr>
 8015080:	4603      	mov	r3, r0
 8015082:	e000      	b.n	8015086 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015084:	2300      	movs	r3, #0
        }
    }
}
 8015086:	4618      	mov	r0, r3
 8015088:	3708      	adds	r7, #8
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}

0801508e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801508e:	b580      	push	{r7, lr}
 8015090:	b084      	sub	sp, #16
 8015092:	af00      	add	r7, sp, #0
 8015094:	60b9      	str	r1, [r7, #8]
 8015096:	607a      	str	r2, [r7, #4]
 8015098:	603b      	str	r3, [r7, #0]
 801509a:	4603      	mov	r3, r0
 801509c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801509e:	7bfb      	ldrb	r3, [r7, #15]
 80150a0:	2b05      	cmp	r3, #5
 80150a2:	d107      	bne.n	80150b4 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80150a4:	69bb      	ldr	r3, [r7, #24]
 80150a6:	683a      	ldr	r2, [r7, #0]
 80150a8:	6879      	ldr	r1, [r7, #4]
 80150aa:	68b8      	ldr	r0, [r7, #8]
 80150ac:	f001 fed0 	bl	8016e50 <RegionEU868NextChannel>
 80150b0:	4603      	mov	r3, r0
 80150b2:	e000      	b.n	80150b6 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80150b4:	2309      	movs	r3, #9
        }
    }
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3710      	adds	r7, #16
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}

080150be <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80150be:	b590      	push	{r4, r7, lr}
 80150c0:	b083      	sub	sp, #12
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	4604      	mov	r4, r0
 80150c6:	4608      	mov	r0, r1
 80150c8:	4611      	mov	r1, r2
 80150ca:	461a      	mov	r2, r3
 80150cc:	4623      	mov	r3, r4
 80150ce:	71fb      	strb	r3, [r7, #7]
 80150d0:	4603      	mov	r3, r0
 80150d2:	71bb      	strb	r3, [r7, #6]
 80150d4:	460b      	mov	r3, r1
 80150d6:	717b      	strb	r3, [r7, #5]
 80150d8:	4613      	mov	r3, r2
 80150da:	713b      	strb	r3, [r7, #4]
    switch( region )
 80150dc:	79fb      	ldrb	r3, [r7, #7]
 80150de:	2b05      	cmp	r3, #5
 80150e0:	d109      	bne.n	80150f6 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80150e2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80150e6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80150ea:	79bb      	ldrb	r3, [r7, #6]
 80150ec:	4618      	mov	r0, r3
 80150ee:	f002 f829 	bl	8017144 <RegionEU868ApplyDrOffset>
 80150f2:	4603      	mov	r3, r0
 80150f4:	e000      	b.n	80150f8 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80150f6:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	370c      	adds	r7, #12
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd90      	pop	{r4, r7, pc}

08015100 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015100:	b480      	push	{r7}
 8015102:	b083      	sub	sp, #12
 8015104:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8015106:	4b04      	ldr	r3, [pc, #16]	@ (8015118 <RegionGetVersion+0x18>)
 8015108:	607b      	str	r3, [r7, #4]

    return version;
 801510a:	687b      	ldr	r3, [r7, #4]
}
 801510c:	4618      	mov	r0, r3
 801510e:	370c      	adds	r7, #12
 8015110:	46bd      	mov	sp, r7
 8015112:	bc80      	pop	{r7}
 8015114:	4770      	bx	lr
 8015116:	bf00      	nop
 8015118:	02010003 	.word	0x02010003

0801511c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801511c:	b480      	push	{r7}
 801511e:	b087      	sub	sp, #28
 8015120:	af00      	add	r7, sp, #0
 8015122:	60f8      	str	r0, [r7, #12]
 8015124:	4608      	mov	r0, r1
 8015126:	4639      	mov	r1, r7
 8015128:	e881 000c 	stmia.w	r1, {r2, r3}
 801512c:	4603      	mov	r3, r0
 801512e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	881b      	ldrh	r3, [r3, #0]
 8015134:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8015136:	7afb      	ldrb	r3, [r7, #11]
 8015138:	f083 0301 	eor.w	r3, r3, #1
 801513c:	b2db      	uxtb	r3, r3
 801513e:	2b00      	cmp	r3, #0
 8015140:	d007      	beq.n	8015152 <GetDutyCycle+0x36>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015142:	2364      	movs	r3, #100	@ 0x64
 8015144:	82bb      	strh	r3, [r7, #20]
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015146:	8aba      	ldrh	r2, [r7, #20]
 8015148:	8afb      	ldrh	r3, [r7, #22]
 801514a:	4293      	cmp	r3, r2
 801514c:	bf38      	it	cc
 801514e:	4613      	movcc	r3, r2
 8015150:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8015152:	8afb      	ldrh	r3, [r7, #22]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d101      	bne.n	801515c <GetDutyCycle+0x40>
    {
        dutyCycle = 1;
 8015158:	2301      	movs	r3, #1
 801515a:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801515c:	8afb      	ldrh	r3, [r7, #22]
}
 801515e:	4618      	mov	r0, r3
 8015160:	371c      	adds	r7, #28
 8015162:	46bd      	mov	sp, r7
 8015164:	bc80      	pop	{r7}
 8015166:	4770      	bx	lr

08015168 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b086      	sub	sp, #24
 801516c:	af00      	add	r7, sp, #0
 801516e:	60f8      	str	r0, [r7, #12]
 8015170:	4608      	mov	r0, r1
 8015172:	4639      	mov	r1, r7
 8015174:	e881 000c 	stmia.w	r1, {r2, r3}
 8015178:	4603      	mov	r3, r0
 801517a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	881b      	ldrh	r3, [r3, #0]
 8015180:	827b      	strh	r3, [r7, #18]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015182:	4b1a      	ldr	r3, [pc, #104]	@ (80151ec <SetMaxTimeCredits+0x84>)
 8015184:	617b      	str	r3, [r7, #20]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015186:	7af9      	ldrb	r1, [r7, #11]
 8015188:	463b      	mov	r3, r7
 801518a:	cb0c      	ldmia	r3, {r2, r3}
 801518c:	68f8      	ldr	r0, [r7, #12]
 801518e:	f7ff ffc5 	bl	801511c <GetDutyCycle>
 8015192:	4603      	mov	r3, r0
 8015194:	827b      	strh	r3, [r7, #18]

    if( joined == false )
 8015196:	7afb      	ldrb	r3, [r7, #11]
 8015198:	f083 0301 	eor.w	r3, r3, #1
 801519c:	b2db      	uxtb	r3, r3
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d011      	beq.n	80151c6 <SetMaxTimeCredits+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80151a8:	d202      	bcs.n	80151b0 <SetMaxTimeCredits+0x48>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80151aa:	4b10      	ldr	r3, [pc, #64]	@ (80151ec <SetMaxTimeCredits+0x84>)
 80151ac:	617b      	str	r3, [r7, #20]
 80151ae:	e014      	b.n	80151da <SetMaxTimeCredits+0x72>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80151b6:	4293      	cmp	r3, r2
 80151b8:	d802      	bhi.n	80151c0 <SetMaxTimeCredits+0x58>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80151ba:	4b0c      	ldr	r3, [pc, #48]	@ (80151ec <SetMaxTimeCredits+0x84>)
 80151bc:	617b      	str	r3, [r7, #20]
 80151be:	e00c      	b.n	80151da <SetMaxTimeCredits+0x72>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 80151c0:	4b0b      	ldr	r3, [pc, #44]	@ (80151f0 <SetMaxTimeCredits+0x88>)
 80151c2:	617b      	str	r3, [r7, #20]
 80151c4:	e009      	b.n	80151da <SetMaxTimeCredits+0x72>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 80151c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80151ca:	f083 0301 	eor.w	r3, r3, #1
 80151ce:	b2db      	uxtb	r3, r3
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d002      	beq.n	80151da <SetMaxTimeCredits+0x72>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	697a      	ldr	r2, [r7, #20]
 80151d8:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	697a      	ldr	r2, [r7, #20]
 80151de:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80151e0:	8a7b      	ldrh	r3, [r7, #18]
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3718      	adds	r7, #24
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	0036ee80 	.word	0x0036ee80
 80151f0:	000d4670 	.word	0x000d4670

080151f4 <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b086      	sub	sp, #24
 80151f8:	af02      	add	r7, sp, #8
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	4608      	mov	r0, r1
 80151fe:	4611      	mov	r1, r2
 8015200:	461a      	mov	r2, r3
 8015202:	4603      	mov	r3, r0
 8015204:	70fb      	strb	r3, [r7, #3]
 8015206:	460b      	mov	r3, r1
 8015208:	70bb      	strb	r3, [r7, #2]
 801520a:	4613      	mov	r3, r2
 801520c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801520e:	78f9      	ldrb	r1, [r7, #3]
 8015210:	787b      	ldrb	r3, [r7, #1]
 8015212:	9301      	str	r3, [sp, #4]
 8015214:	78bb      	ldrb	r3, [r7, #2]
 8015216:	9300      	str	r3, [sp, #0]
 8015218:	f107 0318 	add.w	r3, r7, #24
 801521c:	cb0c      	ldmia	r3, {r2, r3}
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f7ff ffa2 	bl	8015168 <SetMaxTimeCredits>
 8015224:	4603      	mov	r3, r0
 8015226:	817b      	strh	r3, [r7, #10]
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 8015228:	4b1a      	ldr	r3, [pc, #104]	@ (8015294 <UpdateTimeCredits+0xa0>)
 801522a:	60fb      	str	r3, [r7, #12]

    if( joined == false )
 801522c:	78fb      	ldrb	r3, [r7, #3]
 801522e:	f083 0301 	eor.w	r3, r3, #1
 8015232:	b2db      	uxtb	r3, r3
 8015234:	2b00      	cmp	r3, #0
 8015236:	d010      	beq.n	801525a <UpdateTimeCredits+0x66>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8015238:	69bb      	ldr	r3, [r7, #24]
 801523a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801523e:	d202      	bcs.n	8015246 <UpdateTimeCredits+0x52>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 8015240:	4b14      	ldr	r3, [pc, #80]	@ (8015294 <UpdateTimeCredits+0xa0>)
 8015242:	60fb      	str	r3, [r7, #12]
 8015244:	e009      	b.n	801525a <UpdateTimeCredits+0x66>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801524c:	4293      	cmp	r3, r2
 801524e:	d802      	bhi.n	8015256 <UpdateTimeCredits+0x62>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 8015250:	4b11      	ldr	r3, [pc, #68]	@ (8015298 <UpdateTimeCredits+0xa4>)
 8015252:	60fb      	str	r3, [r7, #12]
 8015254:	e001      	b.n	801525a <UpdateTimeCredits+0x66>
        }
        else
        {
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 8015256:	4b11      	ldr	r3, [pc, #68]	@ (801529c <UpdateTimeCredits+0xa8>)
 8015258:	60fb      	str	r3, [r7, #12]
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 801525a:	68fa      	ldr	r2, [r7, #12]
 801525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801525e:	429a      	cmp	r2, r3
 8015260:	d908      	bls.n	8015274 <UpdateTimeCredits+0x80>
        ( band->LastMaxCreditAssignTime != observation ) ||
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	689b      	ldr	r3, [r3, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 8015266:	68fa      	ldr	r2, [r7, #12]
 8015268:	429a      	cmp	r2, r3
 801526a:	d103      	bne.n	8015274 <UpdateTimeCredits+0x80>
        ( band->LastBandUpdateTime == 0 ) )
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	685b      	ldr	r3, [r3, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 8015270:	2b00      	cmp	r3, #0
 8015272:	d109      	bne.n	8015288 <UpdateTimeCredits+0x94>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	691a      	ldr	r2, [r3, #16]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	60da      	str	r2, [r3, #12]
        band->LastBandUpdateTime = currentTime;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6a3a      	ldr	r2, [r7, #32]
 8015280:	605a      	str	r2, [r3, #4]
        band->LastMaxCreditAssignTime = observation;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	68fa      	ldr	r2, [r7, #12]
 8015286:	609a      	str	r2, [r3, #8]
    }
    return dutyCycle;
 8015288:	897b      	ldrh	r3, [r7, #10]
}
 801528a:	4618      	mov	r0, r3
 801528c:	3710      	adds	r7, #16
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}
 8015292:	bf00      	nop
 8015294:	0036ee80 	.word	0x0036ee80
 8015298:	025c3f80 	.word	0x025c3f80
 801529c:	07829b80 	.word	0x07829b80

080152a0 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80152a0:	b480      	push	{r7}
 80152a2:	b085      	sub	sp, #20
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	4603      	mov	r3, r0
 80152a8:	460a      	mov	r2, r1
 80152aa:	80fb      	strh	r3, [r7, #6]
 80152ac:	4613      	mov	r3, r2
 80152ae:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80152b0:	2300      	movs	r3, #0
 80152b2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80152b4:	2300      	movs	r3, #0
 80152b6:	73bb      	strb	r3, [r7, #14]
 80152b8:	e011      	b.n	80152de <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80152ba:	88fa      	ldrh	r2, [r7, #6]
 80152bc:	7bbb      	ldrb	r3, [r7, #14]
 80152be:	2101      	movs	r1, #1
 80152c0:	fa01 f303 	lsl.w	r3, r1, r3
 80152c4:	401a      	ands	r2, r3
 80152c6:	7bbb      	ldrb	r3, [r7, #14]
 80152c8:	2101      	movs	r1, #1
 80152ca:	fa01 f303 	lsl.w	r3, r1, r3
 80152ce:	429a      	cmp	r2, r3
 80152d0:	d102      	bne.n	80152d8 <CountChannels+0x38>
        {
            nbActiveBits++;
 80152d2:	7bfb      	ldrb	r3, [r7, #15]
 80152d4:	3301      	adds	r3, #1
 80152d6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80152d8:	7bbb      	ldrb	r3, [r7, #14]
 80152da:	3301      	adds	r3, #1
 80152dc:	73bb      	strb	r3, [r7, #14]
 80152de:	7bba      	ldrb	r2, [r7, #14]
 80152e0:	797b      	ldrb	r3, [r7, #5]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d3e9      	bcc.n	80152ba <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80152e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3714      	adds	r7, #20
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bc80      	pop	{r7}
 80152f0:	4770      	bx	lr

080152f2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b084      	sub	sp, #16
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6039      	str	r1, [r7, #0]
 80152fa:	4611      	mov	r1, r2
 80152fc:	461a      	mov	r2, r3
 80152fe:	4603      	mov	r3, r0
 8015300:	71fb      	strb	r3, [r7, #7]
 8015302:	460b      	mov	r3, r1
 8015304:	71bb      	strb	r3, [r7, #6]
 8015306:	4613      	mov	r3, r2
 8015308:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801530a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801530e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015312:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015316:	4618      	mov	r0, r3
 8015318:	f000 f85d 	bl	80153d6 <RegionCommonValueInRange>
 801531c:	4603      	mov	r3, r0
 801531e:	2b00      	cmp	r3, #0
 8015320:	d101      	bne.n	8015326 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015322:	2300      	movs	r3, #0
 8015324:	e053      	b.n	80153ce <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015326:	2300      	movs	r3, #0
 8015328:	73fb      	strb	r3, [r7, #15]
 801532a:	2300      	movs	r3, #0
 801532c:	73bb      	strb	r3, [r7, #14]
 801532e:	e049      	b.n	80153c4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015330:	2300      	movs	r3, #0
 8015332:	737b      	strb	r3, [r7, #13]
 8015334:	e03d      	b.n	80153b2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015336:	7bbb      	ldrb	r3, [r7, #14]
 8015338:	005b      	lsls	r3, r3, #1
 801533a:	683a      	ldr	r2, [r7, #0]
 801533c:	4413      	add	r3, r2
 801533e:	881b      	ldrh	r3, [r3, #0]
 8015340:	461a      	mov	r2, r3
 8015342:	7b7b      	ldrb	r3, [r7, #13]
 8015344:	fa42 f303 	asr.w	r3, r2, r3
 8015348:	f003 0301 	and.w	r3, r3, #1
 801534c:	2b00      	cmp	r3, #0
 801534e:	d02d      	beq.n	80153ac <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015350:	7bfa      	ldrb	r2, [r7, #15]
 8015352:	7b7b      	ldrb	r3, [r7, #13]
 8015354:	4413      	add	r3, r2
 8015356:	461a      	mov	r2, r3
 8015358:	4613      	mov	r3, r2
 801535a:	005b      	lsls	r3, r3, #1
 801535c:	4413      	add	r3, r2
 801535e:	009b      	lsls	r3, r3, #2
 8015360:	461a      	mov	r2, r3
 8015362:	69fb      	ldr	r3, [r7, #28]
 8015364:	4413      	add	r3, r2
 8015366:	7a1b      	ldrb	r3, [r3, #8]
 8015368:	f343 0303 	sbfx	r3, r3, #0, #4
 801536c:	b25b      	sxtb	r3, r3
 801536e:	f003 030f 	and.w	r3, r3, #15
 8015372:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015374:	7bfa      	ldrb	r2, [r7, #15]
 8015376:	7b7b      	ldrb	r3, [r7, #13]
 8015378:	4413      	add	r3, r2
 801537a:	461a      	mov	r2, r3
 801537c:	4613      	mov	r3, r2
 801537e:	005b      	lsls	r3, r3, #1
 8015380:	4413      	add	r3, r2
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	461a      	mov	r2, r3
 8015386:	69fb      	ldr	r3, [r7, #28]
 8015388:	4413      	add	r3, r2
 801538a:	7a1b      	ldrb	r3, [r3, #8]
 801538c:	f343 1303 	sbfx	r3, r3, #4, #4
 8015390:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015392:	f003 030f 	and.w	r3, r3, #15
 8015396:	b25a      	sxtb	r2, r3
 8015398:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801539c:	4618      	mov	r0, r3
 801539e:	f000 f81a 	bl	80153d6 <RegionCommonValueInRange>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b01      	cmp	r3, #1
 80153a6:	d101      	bne.n	80153ac <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80153a8:	2301      	movs	r3, #1
 80153aa:	e010      	b.n	80153ce <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80153ac:	7b7b      	ldrb	r3, [r7, #13]
 80153ae:	3301      	adds	r3, #1
 80153b0:	737b      	strb	r3, [r7, #13]
 80153b2:	7b7b      	ldrb	r3, [r7, #13]
 80153b4:	2b0f      	cmp	r3, #15
 80153b6:	d9be      	bls.n	8015336 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80153b8:	7bfb      	ldrb	r3, [r7, #15]
 80153ba:	3310      	adds	r3, #16
 80153bc:	73fb      	strb	r3, [r7, #15]
 80153be:	7bbb      	ldrb	r3, [r7, #14]
 80153c0:	3301      	adds	r3, #1
 80153c2:	73bb      	strb	r3, [r7, #14]
 80153c4:	7bfa      	ldrb	r2, [r7, #15]
 80153c6:	79fb      	ldrb	r3, [r7, #7]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d3b1      	bcc.n	8015330 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80153cc:	2300      	movs	r3, #0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3710      	adds	r7, #16
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80153d6:	b480      	push	{r7}
 80153d8:	b083      	sub	sp, #12
 80153da:	af00      	add	r7, sp, #0
 80153dc:	4603      	mov	r3, r0
 80153de:	71fb      	strb	r3, [r7, #7]
 80153e0:	460b      	mov	r3, r1
 80153e2:	71bb      	strb	r3, [r7, #6]
 80153e4:	4613      	mov	r3, r2
 80153e6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80153e8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80153ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80153f0:	429a      	cmp	r2, r3
 80153f2:	db07      	blt.n	8015404 <RegionCommonValueInRange+0x2e>
 80153f4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80153f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80153fc:	429a      	cmp	r2, r3
 80153fe:	dc01      	bgt.n	8015404 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015400:	2301      	movs	r3, #1
 8015402:	e000      	b.n	8015406 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015404:	2300      	movs	r3, #0
}
 8015406:	4618      	mov	r0, r3
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	bc80      	pop	{r7}
 801540e:	4770      	bx	lr

08015410 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015410:	b480      	push	{r7}
 8015412:	b085      	sub	sp, #20
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	460b      	mov	r3, r1
 801541a:	70fb      	strb	r3, [r7, #3]
 801541c:	4613      	mov	r3, r2
 801541e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015420:	78fb      	ldrb	r3, [r7, #3]
 8015422:	091b      	lsrs	r3, r3, #4
 8015424:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015426:	78bb      	ldrb	r3, [r7, #2]
 8015428:	091b      	lsrs	r3, r3, #4
 801542a:	b2db      	uxtb	r3, r3
 801542c:	7bfa      	ldrb	r2, [r7, #15]
 801542e:	429a      	cmp	r2, r3
 8015430:	d803      	bhi.n	801543a <RegionCommonChanDisable+0x2a>
 8015432:	78fa      	ldrb	r2, [r7, #3]
 8015434:	78bb      	ldrb	r3, [r7, #2]
 8015436:	429a      	cmp	r2, r3
 8015438:	d301      	bcc.n	801543e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801543a:	2300      	movs	r3, #0
 801543c:	e017      	b.n	801546e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801543e:	7bfb      	ldrb	r3, [r7, #15]
 8015440:	005b      	lsls	r3, r3, #1
 8015442:	687a      	ldr	r2, [r7, #4]
 8015444:	4413      	add	r3, r2
 8015446:	881b      	ldrh	r3, [r3, #0]
 8015448:	b21a      	sxth	r2, r3
 801544a:	78fb      	ldrb	r3, [r7, #3]
 801544c:	f003 030f 	and.w	r3, r3, #15
 8015450:	2101      	movs	r1, #1
 8015452:	fa01 f303 	lsl.w	r3, r1, r3
 8015456:	b21b      	sxth	r3, r3
 8015458:	43db      	mvns	r3, r3
 801545a:	b21b      	sxth	r3, r3
 801545c:	4013      	ands	r3, r2
 801545e:	b219      	sxth	r1, r3
 8015460:	7bfb      	ldrb	r3, [r7, #15]
 8015462:	005b      	lsls	r3, r3, #1
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	4413      	add	r3, r2
 8015468:	b28a      	uxth	r2, r1
 801546a:	801a      	strh	r2, [r3, #0]

    return true;
 801546c:	2301      	movs	r3, #1
}
 801546e:	4618      	mov	r0, r3
 8015470:	3714      	adds	r7, #20
 8015472:	46bd      	mov	sp, r7
 8015474:	bc80      	pop	{r7}
 8015476:	4770      	bx	lr

08015478 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	460b      	mov	r3, r1
 8015482:	70fb      	strb	r3, [r7, #3]
 8015484:	4613      	mov	r3, r2
 8015486:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015488:	2300      	movs	r3, #0
 801548a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d101      	bne.n	8015496 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015492:	2300      	movs	r3, #0
 8015494:	e018      	b.n	80154c8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015496:	78fb      	ldrb	r3, [r7, #3]
 8015498:	73bb      	strb	r3, [r7, #14]
 801549a:	e010      	b.n	80154be <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801549c:	7bbb      	ldrb	r3, [r7, #14]
 801549e:	005b      	lsls	r3, r3, #1
 80154a0:	687a      	ldr	r2, [r7, #4]
 80154a2:	4413      	add	r3, r2
 80154a4:	881b      	ldrh	r3, [r3, #0]
 80154a6:	2110      	movs	r1, #16
 80154a8:	4618      	mov	r0, r3
 80154aa:	f7ff fef9 	bl	80152a0 <CountChannels>
 80154ae:	4603      	mov	r3, r0
 80154b0:	461a      	mov	r2, r3
 80154b2:	7bfb      	ldrb	r3, [r7, #15]
 80154b4:	4413      	add	r3, r2
 80154b6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80154b8:	7bbb      	ldrb	r3, [r7, #14]
 80154ba:	3301      	adds	r3, #1
 80154bc:	73bb      	strb	r3, [r7, #14]
 80154be:	7bba      	ldrb	r2, [r7, #14]
 80154c0:	78bb      	ldrb	r3, [r7, #2]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d3ea      	bcc.n	801549c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80154c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3710      	adds	r7, #16
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}

080154d0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80154d0:	b480      	push	{r7}
 80154d2:	b087      	sub	sp, #28
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	4613      	mov	r3, r2
 80154dc:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d016      	beq.n	8015512 <RegionCommonChanMaskCopy+0x42>
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d013      	beq.n	8015512 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80154ea:	2300      	movs	r3, #0
 80154ec:	75fb      	strb	r3, [r7, #23]
 80154ee:	e00c      	b.n	801550a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80154f0:	7dfb      	ldrb	r3, [r7, #23]
 80154f2:	005b      	lsls	r3, r3, #1
 80154f4:	68ba      	ldr	r2, [r7, #8]
 80154f6:	441a      	add	r2, r3
 80154f8:	7dfb      	ldrb	r3, [r7, #23]
 80154fa:	005b      	lsls	r3, r3, #1
 80154fc:	68f9      	ldr	r1, [r7, #12]
 80154fe:	440b      	add	r3, r1
 8015500:	8812      	ldrh	r2, [r2, #0]
 8015502:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015504:	7dfb      	ldrb	r3, [r7, #23]
 8015506:	3301      	adds	r3, #1
 8015508:	75fb      	strb	r3, [r7, #23]
 801550a:	7dfa      	ldrb	r2, [r7, #23]
 801550c:	79fb      	ldrb	r3, [r7, #7]
 801550e:	429a      	cmp	r2, r3
 8015510:	d3ee      	bcc.n	80154f0 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015512:	bf00      	nop
 8015514:	371c      	adds	r7, #28
 8015516:	46bd      	mov	sp, r7
 8015518:	bc80      	pop	{r7}
 801551a:	4770      	bx	lr

0801551c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801551c:	b082      	sub	sp, #8
 801551e:	b580      	push	{r7, lr}
 8015520:	b086      	sub	sp, #24
 8015522:	af00      	add	r7, sp, #0
 8015524:	60f8      	str	r0, [r7, #12]
 8015526:	60b9      	str	r1, [r7, #8]
 8015528:	627b      	str	r3, [r7, #36]	@ 0x24
 801552a:	4613      	mov	r3, r2
 801552c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801552e:	79f9      	ldrb	r1, [r7, #7]
 8015530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015534:	cb0c      	ldmia	r3, {r2, r3}
 8015536:	68f8      	ldr	r0, [r7, #12]
 8015538:	f7ff fdf0 	bl	801511c <GetDutyCycle>
 801553c:	4603      	mov	r3, r0
 801553e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	68da      	ldr	r2, [r3, #12]
 8015544:	8afb      	ldrh	r3, [r7, #22]
 8015546:	68b9      	ldr	r1, [r7, #8]
 8015548:	fb01 f303 	mul.w	r3, r1, r3
 801554c:	429a      	cmp	r2, r3
 801554e:	d909      	bls.n	8015564 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	68da      	ldr	r2, [r3, #12]
 8015554:	8afb      	ldrh	r3, [r7, #22]
 8015556:	68b9      	ldr	r1, [r7, #8]
 8015558:	fb01 f303 	mul.w	r3, r1, r3
 801555c:	1ad2      	subs	r2, r2, r3
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015562:	e002      	b.n	801556a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	2200      	movs	r2, #0
 8015568:	60da      	str	r2, [r3, #12]
}
 801556a:	bf00      	nop
 801556c:	3718      	adds	r7, #24
 801556e:	46bd      	mov	sp, r7
 8015570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015574:	b002      	add	sp, #8
 8015576:	4770      	bx	lr

08015578 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801557a:	b08f      	sub	sp, #60	@ 0x3c
 801557c:	af04      	add	r7, sp, #16
 801557e:	6039      	str	r1, [r7, #0]
 8015580:	4611      	mov	r1, r2
 8015582:	461a      	mov	r2, r3
 8015584:	4603      	mov	r3, r0
 8015586:	71fb      	strb	r3, [r7, #7]
 8015588:	460b      	mov	r3, r1
 801558a:	71bb      	strb	r3, [r7, #6]
 801558c:	4613      	mov	r3, r2
 801558e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015590:	f04f 33ff 	mov.w	r3, #4294967295
 8015594:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015596:	f006 f869 	bl	801b66c <UTIL_TIMER_GetCurrentTime>
 801559a:	61b8      	str	r0, [r7, #24]
    TimerTime_t creditCosts = 0;
 801559c:	2300      	movs	r3, #0
 801559e:	617b      	str	r3, [r7, #20]
    uint16_t dutyCycle = 1;
 80155a0:	2301      	movs	r3, #1
 80155a2:	827b      	strh	r3, [r7, #18]
    uint8_t validBands = 0;
 80155a4:	2300      	movs	r3, #0
 80155a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80155aa:	2300      	movs	r3, #0
 80155ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80155b0:	e09c      	b.n	80156ec <RegionCommonUpdateBandTimeOff+0x174>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 80155b2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80155b6:	4613      	mov	r3, r2
 80155b8:	005b      	lsls	r3, r3, #1
 80155ba:	4413      	add	r3, r2
 80155bc:	00db      	lsls	r3, r3, #3
 80155be:	461a      	mov	r2, r3
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	4413      	add	r3, r2
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	4618      	mov	r0, r3
 80155c8:	f006 f862 	bl	801b690 <UTIL_TIMER_GetElapsedTime>
 80155cc:	60f8      	str	r0, [r7, #12]

        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80155ce:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80155d2:	4613      	mov	r3, r2
 80155d4:	005b      	lsls	r3, r3, #1
 80155d6:	4413      	add	r3, r2
 80155d8:	00db      	lsls	r3, r3, #3
 80155da:	461a      	mov	r2, r3
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	189c      	adds	r4, r3, r2
 80155e0:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 80155e4:	797a      	ldrb	r2, [r7, #5]
 80155e6:	79fd      	ldrb	r5, [r7, #7]
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	9303      	str	r3, [sp, #12]
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	9302      	str	r3, [sp, #8]
 80155f0:	46ec      	mov	ip, sp
 80155f2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80155f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80155fa:	e88c 0003 	stmia.w	ip, {r0, r1}
 80155fe:	4633      	mov	r3, r6
 8015600:	4629      	mov	r1, r5
 8015602:	4620      	mov	r0, r4
 8015604:	f7ff fdf6 	bl	80151f4 <UpdateTimeCredits>
 8015608:	4603      	mov	r3, r0
 801560a:	827b      	strh	r3, [r7, #18]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801560c:	8a7a      	ldrh	r2, [r7, #18]
 801560e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015610:	fb02 f303 	mul.w	r3, r2, r3
 8015614:	617b      	str	r3, [r7, #20]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015616:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801561a:	4613      	mov	r3, r2
 801561c:	005b      	lsls	r3, r3, #1
 801561e:	4413      	add	r3, r2
 8015620:	00db      	lsls	r3, r3, #3
 8015622:	461a      	mov	r2, r3
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	4413      	add	r3, r2
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	697a      	ldr	r2, [r7, #20]
 801562c:	429a      	cmp	r2, r3
 801562e:	d308      	bcc.n	8015642 <RegionCommonUpdateBandTimeOff+0xca>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015630:	797b      	ldrb	r3, [r7, #5]
 8015632:	f083 0301 	eor.w	r3, r3, #1
 8015636:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015638:	2b00      	cmp	r3, #0
 801563a:	d013      	beq.n	8015664 <RegionCommonUpdateBandTimeOff+0xec>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801563c:	79fb      	ldrb	r3, [r7, #7]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d010      	beq.n	8015664 <RegionCommonUpdateBandTimeOff+0xec>
        {
            bands[i].ReadyForTransmission = true;
 8015642:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015646:	4613      	mov	r3, r2
 8015648:	005b      	lsls	r3, r3, #1
 801564a:	4413      	add	r3, r2
 801564c:	00db      	lsls	r3, r3, #3
 801564e:	461a      	mov	r2, r3
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	4413      	add	r3, r2
 8015654:	2201      	movs	r2, #1
 8015656:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015658:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801565c:	3301      	adds	r3, #1
 801565e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015662:	e03e      	b.n	80156e2 <RegionCommonUpdateBandTimeOff+0x16a>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015664:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015668:	4613      	mov	r3, r2
 801566a:	005b      	lsls	r3, r3, #1
 801566c:	4413      	add	r3, r2
 801566e:	00db      	lsls	r3, r3, #3
 8015670:	461a      	mov	r2, r3
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	4413      	add	r3, r2
 8015676:	2200      	movs	r2, #0
 8015678:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801567a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801567e:	4613      	mov	r3, r2
 8015680:	005b      	lsls	r3, r3, #1
 8015682:	4413      	add	r3, r2
 8015684:	00db      	lsls	r3, r3, #3
 8015686:	461a      	mov	r2, r3
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	4413      	add	r3, r2
 801568c:	691b      	ldr	r3, [r3, #16]
 801568e:	697a      	ldr	r2, [r7, #20]
 8015690:	429a      	cmp	r2, r3
 8015692:	d226      	bcs.n	80156e2 <RegionCommonUpdateBandTimeOff+0x16a>
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
 8015694:	2300      	movs	r3, #0
 8015696:	61fb      	str	r3, [r7, #28]
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 8015698:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801569c:	4613      	mov	r3, r2
 801569e:	005b      	lsls	r3, r3, #1
 80156a0:	4413      	add	r3, r2
 80156a2:	00db      	lsls	r3, r3, #3
 80156a4:	461a      	mov	r2, r3
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	4413      	add	r3, r2
 80156aa:	689b      	ldr	r3, [r3, #8]
 80156ac:	68fa      	ldr	r2, [r7, #12]
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d80c      	bhi.n	80156cc <RegionCommonUpdateBandTimeOff+0x154>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 80156b2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80156b6:	4613      	mov	r3, r2
 80156b8:	005b      	lsls	r3, r3, #1
 80156ba:	4413      	add	r3, r2
 80156bc:	00db      	lsls	r3, r3, #3
 80156be:	461a      	mov	r2, r3
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	4413      	add	r3, r2
 80156c4:	689a      	ldr	r2, [r3, #8]
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	1ad3      	subs	r3, r2, r3
 80156ca:	61fb      	str	r3, [r7, #28]
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 80156cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	4293      	cmp	r3, r2
 80156d2:	bf28      	it	cs
 80156d4:	4613      	movcs	r3, r2
 80156d6:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80156d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80156dc:	3301      	adds	r3, #1
 80156de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for( uint8_t i = 0; i < nbBands; i++ )
 80156e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80156e6:	3301      	adds	r3, #1
 80156e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80156ec:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80156f0:	79bb      	ldrb	r3, [r7, #6]
 80156f2:	429a      	cmp	r2, r3
 80156f4:	f4ff af5d 	bcc.w	80155b2 <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 80156f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d102      	bne.n	8015706 <RegionCommonUpdateBandTimeOff+0x18e>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015700:	f04f 33ff 	mov.w	r3, #4294967295
 8015704:	e000      	b.n	8015708 <RegionCommonUpdateBandTimeOff+0x190>
    }
    return minTimeToWait;
 8015706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015708:	4618      	mov	r0, r3
 801570a:	372c      	adds	r7, #44	@ 0x2c
 801570c:	46bd      	mov	sp, r7
 801570e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015710 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015710:	b480      	push	{r7}
 8015712:	b085      	sub	sp, #20
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
 8015718:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801571a:	2300      	movs	r3, #0
 801571c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	2b03      	cmp	r3, #3
 8015724:	d140      	bne.n	80157a8 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	3301      	adds	r3, #1
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	b25a      	sxtb	r2, r3
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015738:	f003 030f 	and.w	r3, r3, #15
 801573c:	b25a      	sxtb	r2, r3
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015748:	b2db      	uxtb	r3, r3
 801574a:	091b      	lsrs	r3, r3, #4
 801574c:	b2db      	uxtb	r3, r3
 801574e:	b25a      	sxtb	r2, r3
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	3302      	adds	r3, #2
 8015758:	781b      	ldrb	r3, [r3, #0]
 801575a:	461a      	mov	r2, r3
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	889b      	ldrh	r3, [r3, #4]
 8015764:	b21a      	sxth	r2, r3
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	3303      	adds	r3, #3
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	b21b      	sxth	r3, r3
 801576e:	021b      	lsls	r3, r3, #8
 8015770:	b21b      	sxth	r3, r3
 8015772:	4313      	orrs	r3, r2
 8015774:	b21b      	sxth	r3, r3
 8015776:	b29a      	uxth	r2, r3
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	791a      	ldrb	r2, [r3, #4]
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	091b      	lsrs	r3, r3, #4
 801578a:	b2db      	uxtb	r3, r3
 801578c:	f003 0307 	and.w	r3, r3, #7
 8015790:	b2da      	uxtb	r2, r3
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	f003 030f 	and.w	r3, r3, #15
 801579e:	b2da      	uxtb	r2, r3
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80157a4:	2305      	movs	r3, #5
 80157a6:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80157a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3714      	adds	r7, #20
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bc80      	pop	{r7}
 80157b2:	4770      	bx	lr

080157b4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80157b4:	b5b0      	push	{r4, r5, r7, lr}
 80157b6:	b088      	sub	sp, #32
 80157b8:	af02      	add	r7, sp, #8
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	607a      	str	r2, [r7, #4]
 80157c0:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	791b      	ldrb	r3, [r3, #4]
 80157c6:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	799b      	ldrb	r3, [r3, #6]
 80157cc:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	79db      	ldrb	r3, [r3, #7]
 80157d2:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	7a1b      	ldrb	r3, [r3, #8]
 80157d8:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	795b      	ldrb	r3, [r3, #5]
 80157de:	f083 0301 	eor.w	r3, r3, #1
 80157e2:	b2db      	uxtb	r3, r3
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d008      	beq.n	80157fa <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	7adb      	ldrb	r3, [r3, #11]
 80157ec:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	7a5b      	ldrb	r3, [r3, #9]
 80157f2:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	7a9b      	ldrb	r3, [r3, #10]
 80157f8:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80157fa:	7dfb      	ldrb	r3, [r7, #23]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d04a      	beq.n	8015896 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8015800:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015804:	2b0f      	cmp	r3, #15
 8015806:	d103      	bne.n	8015810 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	7a5b      	ldrb	r3, [r3, #9]
 801580c:	75bb      	strb	r3, [r7, #22]
 801580e:	e01d      	b.n	801584c <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	7b18      	ldrb	r0, [r3, #12]
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	6919      	ldr	r1, [r3, #16]
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015824:	68fa      	ldr	r2, [r7, #12]
 8015826:	6992      	ldr	r2, [r2, #24]
 8015828:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801582c:	9201      	str	r2, [sp, #4]
 801582e:	9300      	str	r3, [sp, #0]
 8015830:	462b      	mov	r3, r5
 8015832:	4622      	mov	r2, r4
 8015834:	f7ff fd5d 	bl	80152f2 <RegionCommonChanVerifyDr>
 8015838:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801583a:	f083 0301 	eor.w	r3, r3, #1
 801583e:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015840:	2b00      	cmp	r3, #0
 8015842:	d003      	beq.n	801584c <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015844:	7dfb      	ldrb	r3, [r7, #23]
 8015846:	f023 0302 	bic.w	r3, r3, #2
 801584a:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801584c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015850:	2b0f      	cmp	r3, #15
 8015852:	d103      	bne.n	801585c <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	7a9b      	ldrb	r3, [r3, #10]
 8015858:	757b      	strb	r3, [r7, #21]
 801585a:	e01c      	b.n	8015896 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015868:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801586c:	4618      	mov	r0, r3
 801586e:	f7ff fdb2 	bl	80153d6 <RegionCommonValueInRange>
 8015872:	4603      	mov	r3, r0
 8015874:	2b00      	cmp	r3, #0
 8015876:	d10e      	bne.n	8015896 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801587e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015882:	429a      	cmp	r2, r3
 8015884:	da03      	bge.n	801588e <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	7f5b      	ldrb	r3, [r3, #29]
 801588a:	757b      	strb	r3, [r7, #21]
 801588c:	e003      	b.n	8015896 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801588e:	7dfb      	ldrb	r3, [r7, #23]
 8015890:	f023 0304 	bic.w	r3, r3, #4
 8015894:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015896:	7dfb      	ldrb	r3, [r7, #23]
 8015898:	2b07      	cmp	r3, #7
 801589a:	d105      	bne.n	80158a8 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801589c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d101      	bne.n	80158a8 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80158a4:	2301      	movs	r3, #1
 80158a6:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	7dba      	ldrb	r2, [r7, #22]
 80158ac:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	7d7a      	ldrb	r2, [r7, #21]
 80158b2:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80158b4:	7d3a      	ldrb	r2, [r7, #20]
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	701a      	strb	r2, [r3, #0]

    return status;
 80158ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3718      	adds	r7, #24
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bdb0      	pop	{r4, r5, r7, pc}

080158c4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	4603      	mov	r3, r0
 80158cc:	6039      	str	r1, [r7, #0]
 80158ce:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80158d0:	79fb      	ldrb	r3, [r7, #7]
 80158d2:	4a06      	ldr	r2, [pc, #24]	@ (80158ec <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80158d4:	fa02 f303 	lsl.w	r3, r2, r3
 80158d8:	461a      	mov	r2, r3
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	370c      	adds	r7, #12
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bc80      	pop	{r7}
 80158e8:	4770      	bx	lr
 80158ea:	bf00      	nop
 80158ec:	000f4240 	.word	0x000f4240

080158f0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80158f0:	b480      	push	{r7}
 80158f2:	b083      	sub	sp, #12
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	4603      	mov	r3, r0
 80158f8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80158fa:	79fb      	ldrb	r3, [r7, #7]
 80158fc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8015900:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015904:	4618      	mov	r0, r3
 8015906:	370c      	adds	r7, #12
 8015908:	46bd      	mov	sp, r7
 801590a:	bc80      	pop	{r7}
 801590c:	4770      	bx	lr
	...

08015910 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8015910:	b480      	push	{r7}
 8015912:	b085      	sub	sp, #20
 8015914:	af00      	add	r7, sp, #0
 8015916:	60f8      	str	r0, [r7, #12]
 8015918:	607a      	str	r2, [r7, #4]
 801591a:	603b      	str	r3, [r7, #0]
 801591c:	460b      	mov	r3, r1
 801591e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015920:	7afa      	ldrb	r2, [r7, #11]
 8015922:	7afb      	ldrb	r3, [r7, #11]
 8015924:	3b04      	subs	r3, #4
 8015926:	4619      	mov	r1, r3
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	fb03 f101 	mul.w	r1, r3, r1
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015934:	fb00 f303 	mul.w	r3, r0, r3
 8015938:	440b      	add	r3, r1
 801593a:	005b      	lsls	r3, r3, #1
 801593c:	2b00      	cmp	r3, #0
 801593e:	d013      	beq.n	8015968 <RegionCommonComputeRxWindowParameters+0x58>
 8015940:	7afb      	ldrb	r3, [r7, #11]
 8015942:	3b04      	subs	r3, #4
 8015944:	4619      	mov	r1, r3
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	fb03 f101 	mul.w	r1, r3, r1
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015952:	fb00 f303 	mul.w	r3, r0, r3
 8015956:	440b      	add	r3, r1
 8015958:	0059      	lsls	r1, r3, #1
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	440b      	add	r3, r1
 801595e:	1e59      	subs	r1, r3, #1
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	fbb1 f3f3 	udiv	r3, r1, r3
 8015966:	e00f      	b.n	8015988 <RegionCommonComputeRxWindowParameters+0x78>
 8015968:	7afb      	ldrb	r3, [r7, #11]
 801596a:	3b04      	subs	r3, #4
 801596c:	4619      	mov	r1, r3
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	fb03 f101 	mul.w	r1, r3, r1
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801597a:	fb00 f303 	mul.w	r3, r0, r3
 801597e:	440b      	add	r3, r1
 8015980:	0059      	lsls	r1, r3, #1
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	fbb1 f3f3 	udiv	r3, r1, r3
 8015988:	429a      	cmp	r2, r3
 801598a:	bf38      	it	cc
 801598c:	461a      	movcc	r2, r3
 801598e:	69bb      	ldr	r3, [r7, #24]
 8015990:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	009b      	lsls	r3, r3, #2
 8015996:	4619      	mov	r1, r3
 8015998:	69bb      	ldr	r3, [r7, #24]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	68fa      	ldr	r2, [r7, #12]
 801599e:	fb02 f303 	mul.w	r3, r2, r3
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d007      	beq.n	80159b6 <RegionCommonComputeRxWindowParameters+0xa6>
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	68fa      	ldr	r2, [r7, #12]
 80159ac:	fb02 f303 	mul.w	r3, r2, r3
 80159b0:	3301      	adds	r3, #1
 80159b2:	085b      	lsrs	r3, r3, #1
 80159b4:	e005      	b.n	80159c2 <RegionCommonComputeRxWindowParameters+0xb2>
 80159b6:	69bb      	ldr	r3, [r7, #24]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	68fa      	ldr	r2, [r7, #12]
 80159bc:	fb02 f303 	mul.w	r3, r2, r3
 80159c0:	085b      	lsrs	r3, r3, #1
 80159c2:	1acb      	subs	r3, r1, r3
 80159c4:	683a      	ldr	r2, [r7, #0]
 80159c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80159ca:	fb01 f202 	mul.w	r2, r1, r2
 80159ce:	1a9b      	subs	r3, r3, r2
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	dd27      	ble.n	8015a24 <RegionCommonComputeRxWindowParameters+0x114>
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	009b      	lsls	r3, r3, #2
 80159d8:	4619      	mov	r1, r3
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	68fa      	ldr	r2, [r7, #12]
 80159e0:	fb02 f303 	mul.w	r3, r2, r3
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d007      	beq.n	80159f8 <RegionCommonComputeRxWindowParameters+0xe8>
 80159e8:	69bb      	ldr	r3, [r7, #24]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	68fa      	ldr	r2, [r7, #12]
 80159ee:	fb02 f303 	mul.w	r3, r2, r3
 80159f2:	3301      	adds	r3, #1
 80159f4:	085b      	lsrs	r3, r3, #1
 80159f6:	e005      	b.n	8015a04 <RegionCommonComputeRxWindowParameters+0xf4>
 80159f8:	69bb      	ldr	r3, [r7, #24]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	68fa      	ldr	r2, [r7, #12]
 80159fe:	fb02 f303 	mul.w	r3, r2, r3
 8015a02:	085b      	lsrs	r3, r3, #1
 8015a04:	1acb      	subs	r3, r1, r3
 8015a06:	683a      	ldr	r2, [r7, #0]
 8015a08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015a0c:	fb01 f202 	mul.w	r2, r1, r2
 8015a10:	1a9b      	subs	r3, r3, r2
 8015a12:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8015a16:	4a19      	ldr	r2, [pc, #100]	@ (8015a7c <RegionCommonComputeRxWindowParameters+0x16c>)
 8015a18:	fb82 1203 	smull	r1, r2, r2, r3
 8015a1c:	1192      	asrs	r2, r2, #6
 8015a1e:	17db      	asrs	r3, r3, #31
 8015a20:	1ad3      	subs	r3, r2, r3
 8015a22:	e024      	b.n	8015a6e <RegionCommonComputeRxWindowParameters+0x15e>
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	4619      	mov	r1, r3
 8015a2a:	69bb      	ldr	r3, [r7, #24]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	68fa      	ldr	r2, [r7, #12]
 8015a30:	fb02 f303 	mul.w	r3, r2, r3
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d007      	beq.n	8015a48 <RegionCommonComputeRxWindowParameters+0x138>
 8015a38:	69bb      	ldr	r3, [r7, #24]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	68fa      	ldr	r2, [r7, #12]
 8015a3e:	fb02 f303 	mul.w	r3, r2, r3
 8015a42:	3301      	adds	r3, #1
 8015a44:	085b      	lsrs	r3, r3, #1
 8015a46:	e005      	b.n	8015a54 <RegionCommonComputeRxWindowParameters+0x144>
 8015a48:	69bb      	ldr	r3, [r7, #24]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	68fa      	ldr	r2, [r7, #12]
 8015a4e:	fb02 f303 	mul.w	r3, r2, r3
 8015a52:	085b      	lsrs	r3, r3, #1
 8015a54:	1acb      	subs	r3, r1, r3
 8015a56:	683a      	ldr	r2, [r7, #0]
 8015a58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015a5c:	fb01 f202 	mul.w	r2, r1, r2
 8015a60:	1a9b      	subs	r3, r3, r2
 8015a62:	4a06      	ldr	r2, [pc, #24]	@ (8015a7c <RegionCommonComputeRxWindowParameters+0x16c>)
 8015a64:	fb82 1203 	smull	r1, r2, r2, r3
 8015a68:	1192      	asrs	r2, r2, #6
 8015a6a:	17db      	asrs	r3, r3, #31
 8015a6c:	1ad3      	subs	r3, r2, r3
 8015a6e:	69fa      	ldr	r2, [r7, #28]
 8015a70:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8015a72:	bf00      	nop
 8015a74:	3714      	adds	r7, #20
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bc80      	pop	{r7}
 8015a7a:	4770      	bx	lr
 8015a7c:	10624dd3 	.word	0x10624dd3

08015a80 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b086      	sub	sp, #24
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	4603      	mov	r3, r0
 8015a88:	60b9      	str	r1, [r7, #8]
 8015a8a:	607a      	str	r2, [r7, #4]
 8015a8c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8015a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a96:	005b      	lsls	r3, r3, #1
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7ea fe97 	bl	80007cc <__aeabi_ui2f>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	68b8      	ldr	r0, [r7, #8]
 8015aa4:	f7ea fde0 	bl	8000668 <__aeabi_fsub>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	6879      	ldr	r1, [r7, #4]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7ea fddb 	bl	8000668 <__aeabi_fsub>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7ea fccb 	bl	8000450 <__aeabi_f2d>
 8015aba:	4602      	mov	r2, r0
 8015abc:	460b      	mov	r3, r1
 8015abe:	4610      	mov	r0, r2
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	f006 f969 	bl	801bd98 <floor>
 8015ac6:	4602      	mov	r2, r0
 8015ac8:	460b      	mov	r3, r1
 8015aca:	4610      	mov	r0, r2
 8015acc:	4619      	mov	r1, r3
 8015ace:	f7ea fd9f 	bl	8000610 <__aeabi_d2iz>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8015ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3718      	adds	r7, #24
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}

08015ae2 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8015ae2:	b590      	push	{r4, r7, lr}
 8015ae4:	b087      	sub	sp, #28
 8015ae6:	af00      	add	r7, sp, #0
 8015ae8:	60f8      	str	r0, [r7, #12]
 8015aea:	60b9      	str	r1, [r7, #8]
 8015aec:	607a      	str	r2, [r7, #4]
 8015aee:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8015af0:	2300      	movs	r3, #0
 8015af2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8015af4:	2300      	movs	r3, #0
 8015af6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015af8:	2300      	movs	r3, #0
 8015afa:	757b      	strb	r3, [r7, #21]
 8015afc:	2300      	movs	r3, #0
 8015afe:	753b      	strb	r3, [r7, #20]
 8015b00:	e09c      	b.n	8015c3c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015b02:	2300      	movs	r3, #0
 8015b04:	74fb      	strb	r3, [r7, #19]
 8015b06:	e08f      	b.n	8015c28 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	685a      	ldr	r2, [r3, #4]
 8015b0c:	7d3b      	ldrb	r3, [r7, #20]
 8015b0e:	005b      	lsls	r3, r3, #1
 8015b10:	4413      	add	r3, r2
 8015b12:	881b      	ldrh	r3, [r3, #0]
 8015b14:	461a      	mov	r2, r3
 8015b16:	7cfb      	ldrb	r3, [r7, #19]
 8015b18:	fa42 f303 	asr.w	r3, r2, r3
 8015b1c:	f003 0301 	and.w	r3, r3, #1
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d07e      	beq.n	8015c22 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	689a      	ldr	r2, [r3, #8]
 8015b28:	7d79      	ldrb	r1, [r7, #21]
 8015b2a:	7cfb      	ldrb	r3, [r7, #19]
 8015b2c:	440b      	add	r3, r1
 8015b2e:	4619      	mov	r1, r3
 8015b30:	460b      	mov	r3, r1
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	440b      	add	r3, r1
 8015b36:	009b      	lsls	r3, r3, #2
 8015b38:	4413      	add	r3, r2
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d06b      	beq.n	8015c18 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	f083 0301 	eor.w	r3, r3, #1
 8015b48:	b2db      	uxtb	r3, r3
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d011      	beq.n	8015b72 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d00d      	beq.n	8015b72 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	695a      	ldr	r2, [r3, #20]
 8015b5a:	7d3b      	ldrb	r3, [r7, #20]
 8015b5c:	005b      	lsls	r3, r3, #1
 8015b5e:	4413      	add	r3, r2
 8015b60:	881b      	ldrh	r3, [r3, #0]
 8015b62:	461a      	mov	r2, r3
 8015b64:	7cfb      	ldrb	r3, [r7, #19]
 8015b66:	fa42 f303 	asr.w	r3, r2, r3
 8015b6a:	f003 0301 	and.w	r3, r3, #1
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d054      	beq.n	8015c1c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	785b      	ldrb	r3, [r3, #1]
 8015b76:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	689a      	ldr	r2, [r3, #8]
 8015b7c:	7d79      	ldrb	r1, [r7, #21]
 8015b7e:	7cfb      	ldrb	r3, [r7, #19]
 8015b80:	440b      	add	r3, r1
 8015b82:	4619      	mov	r1, r3
 8015b84:	460b      	mov	r3, r1
 8015b86:	005b      	lsls	r3, r3, #1
 8015b88:	440b      	add	r3, r1
 8015b8a:	009b      	lsls	r3, r3, #2
 8015b8c:	4413      	add	r3, r2
 8015b8e:	7a1b      	ldrb	r3, [r3, #8]
 8015b90:	f343 0303 	sbfx	r3, r3, #0, #4
 8015b94:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015b96:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	689a      	ldr	r2, [r3, #8]
 8015b9c:	7d79      	ldrb	r1, [r7, #21]
 8015b9e:	7cfb      	ldrb	r3, [r7, #19]
 8015ba0:	440b      	add	r3, r1
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	440b      	add	r3, r1
 8015baa:	009b      	lsls	r3, r3, #2
 8015bac:	4413      	add	r3, r2
 8015bae:	7a1b      	ldrb	r3, [r3, #8]
 8015bb0:	f343 1303 	sbfx	r3, r3, #4, #4
 8015bb4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	4621      	mov	r1, r4
 8015bba:	f7ff fc0c 	bl	80153d6 <RegionCommonValueInRange>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d02d      	beq.n	8015c20 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	68da      	ldr	r2, [r3, #12]
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	6899      	ldr	r1, [r3, #8]
 8015bcc:	7d78      	ldrb	r0, [r7, #21]
 8015bce:	7cfb      	ldrb	r3, [r7, #19]
 8015bd0:	4403      	add	r3, r0
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	005b      	lsls	r3, r3, #1
 8015bd8:	4403      	add	r3, r0
 8015bda:	009b      	lsls	r3, r3, #2
 8015bdc:	440b      	add	r3, r1
 8015bde:	7a5b      	ldrb	r3, [r3, #9]
 8015be0:	4619      	mov	r1, r3
 8015be2:	460b      	mov	r3, r1
 8015be4:	005b      	lsls	r3, r3, #1
 8015be6:	440b      	add	r3, r1
 8015be8:	00db      	lsls	r3, r3, #3
 8015bea:	4413      	add	r3, r2
 8015bec:	7d1b      	ldrb	r3, [r3, #20]
 8015bee:	f083 0301 	eor.w	r3, r3, #1
 8015bf2:	b2db      	uxtb	r3, r3
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d003      	beq.n	8015c00 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8015bf8:	7dbb      	ldrb	r3, [r7, #22]
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	75bb      	strb	r3, [r7, #22]
                    continue;
 8015bfe:	e010      	b.n	8015c22 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8015c00:	7dfb      	ldrb	r3, [r7, #23]
 8015c02:	1c5a      	adds	r2, r3, #1
 8015c04:	75fa      	strb	r2, [r7, #23]
 8015c06:	461a      	mov	r2, r3
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	4413      	add	r3, r2
 8015c0c:	7d79      	ldrb	r1, [r7, #21]
 8015c0e:	7cfa      	ldrb	r2, [r7, #19]
 8015c10:	440a      	add	r2, r1
 8015c12:	b2d2      	uxtb	r2, r2
 8015c14:	701a      	strb	r2, [r3, #0]
 8015c16:	e004      	b.n	8015c22 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015c18:	bf00      	nop
 8015c1a:	e002      	b.n	8015c22 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8015c1c:	bf00      	nop
 8015c1e:	e000      	b.n	8015c22 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015c20:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8015c22:	7cfb      	ldrb	r3, [r7, #19]
 8015c24:	3301      	adds	r3, #1
 8015c26:	74fb      	strb	r3, [r7, #19]
 8015c28:	7cfb      	ldrb	r3, [r7, #19]
 8015c2a:	2b0f      	cmp	r3, #15
 8015c2c:	f67f af6c 	bls.w	8015b08 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015c30:	7d7b      	ldrb	r3, [r7, #21]
 8015c32:	3310      	adds	r3, #16
 8015c34:	757b      	strb	r3, [r7, #21]
 8015c36:	7d3b      	ldrb	r3, [r7, #20]
 8015c38:	3301      	adds	r3, #1
 8015c3a:	753b      	strb	r3, [r7, #20]
 8015c3c:	7d7b      	ldrb	r3, [r7, #21]
 8015c3e:	b29a      	uxth	r2, r3
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	8a1b      	ldrh	r3, [r3, #16]
 8015c44:	429a      	cmp	r2, r3
 8015c46:	f4ff af5c 	bcc.w	8015b02 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	7dfa      	ldrb	r2, [r7, #23]
 8015c4e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	7dba      	ldrb	r2, [r7, #22]
 8015c54:	701a      	strb	r2, [r3, #0]
}
 8015c56:	bf00      	nop
 8015c58:	371c      	adds	r7, #28
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd90      	pop	{r4, r7, pc}

08015c5e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8015c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c60:	b08b      	sub	sp, #44	@ 0x2c
 8015c62:	af04      	add	r7, sp, #16
 8015c64:	60f8      	str	r0, [r7, #12]
 8015c66:	60b9      	str	r1, [r7, #8]
 8015c68:	607a      	str	r2, [r7, #4]
 8015c6a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	4618      	mov	r0, r3
 8015c72:	f005 fd0d 	bl	801b690 <UTIL_TIMER_GetElapsedTime>
 8015c76:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	681a      	ldr	r2, [r3, #0]
 8015c7c:	697b      	ldr	r3, [r7, #20]
 8015c7e:	1ad2      	subs	r2, r2, r3
 8015c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c82:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c86:	2201      	movs	r2, #1
 8015c88:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8015c8a:	683b      	ldr	r3, [r7, #0]
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d004      	beq.n	8015ca2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015c9c:	697a      	ldr	r2, [r7, #20]
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	d32b      	bcc.n	8015cfa <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	69db      	ldr	r3, [r3, #28]
 8015cac:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015cb2:	68dd      	ldr	r5, [r3, #12]
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	7a5e      	ldrb	r6, [r3, #9]
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	f893 c008 	ldrb.w	ip, [r3, #8]
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	7d1b      	ldrb	r3, [r3, #20]
 8015cc2:	68fa      	ldr	r2, [r7, #12]
 8015cc4:	6992      	ldr	r2, [r2, #24]
 8015cc6:	9203      	str	r2, [sp, #12]
 8015cc8:	68fa      	ldr	r2, [r7, #12]
 8015cca:	f10d 0e04 	add.w	lr, sp, #4
 8015cce:	320c      	adds	r2, #12
 8015cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015cd4:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015cd8:	9300      	str	r3, [sp, #0]
 8015cda:	4663      	mov	r3, ip
 8015cdc:	4632      	mov	r2, r6
 8015cde:	4629      	mov	r1, r5
 8015ce0:	4620      	mov	r0, r4
 8015ce2:	f7ff fc49 	bl	8015578 <RegionCommonUpdateBandTimeOff>
 8015ce6:	4602      	mov	r2, r0
 8015ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cea:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	69d8      	ldr	r0, [r3, #28]
 8015cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cf2:	683a      	ldr	r2, [r7, #0]
 8015cf4:	6879      	ldr	r1, [r7, #4]
 8015cf6:	f7ff fef4 	bl	8015ae2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	781b      	ldrb	r3, [r3, #0]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d004      	beq.n	8015d0c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8015d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d04:	2200      	movs	r2, #0
 8015d06:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	e006      	b.n	8015d1a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8015d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d0e:	781b      	ldrb	r3, [r3, #0]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d001      	beq.n	8015d18 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015d14:	230b      	movs	r3, #11
 8015d16:	e000      	b.n	8015d1a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015d18:	230c      	movs	r3, #12
    }
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	371c      	adds	r7, #28
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d22 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8015d22:	b5b0      	push	{r4, r5, r7, lr}
 8015d24:	b086      	sub	sp, #24
 8015d26:	af02      	add	r7, sp, #8
 8015d28:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	781b      	ldrb	r3, [r3, #0]
 8015d2e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f993 2000 	ldrsb.w	r2, [r3]
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d103      	bne.n	8015d48 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015d46:	e026      	b.n	8015d96 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015d48:	7bfb      	ldrb	r3, [r7, #15]
 8015d4a:	3b01      	subs	r3, #1
 8015d4c:	b2db      	uxtb	r3, r3
 8015d4e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015d56:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d019      	beq.n	8015d92 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	78d8      	ldrb	r0, [r3, #3]
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	6859      	ldr	r1, [r3, #4]
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d72:	687a      	ldr	r2, [r7, #4]
 8015d74:	6892      	ldr	r2, [r2, #8]
 8015d76:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8015d7a:	9201      	str	r2, [sp, #4]
 8015d7c:	9300      	str	r3, [sp, #0]
 8015d7e:	462b      	mov	r3, r5
 8015d80:	4622      	mov	r2, r4
 8015d82:	f7ff fab6 	bl	80152f2 <RegionCommonChanVerifyDr>
 8015d86:	4603      	mov	r3, r0
 8015d88:	f083 0301 	eor.w	r3, r3, #1
 8015d8c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d1da      	bne.n	8015d48 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3710      	adds	r7, #16
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bdb0      	pop	{r4, r5, r7, pc}

08015d9e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8015d9e:	b480      	push	{r7}
 8015da0:	b083      	sub	sp, #12
 8015da2:	af00      	add	r7, sp, #0
 8015da4:	4603      	mov	r3, r0
 8015da6:	460a      	mov	r2, r1
 8015da8:	71fb      	strb	r3, [r7, #7]
 8015daa:	4613      	mov	r3, r2
 8015dac:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8015dae:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015db6:	4293      	cmp	r3, r2
 8015db8:	bfb8      	it	lt
 8015dba:	4613      	movlt	r3, r2
 8015dbc:	b25b      	sxtb	r3, r3
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	370c      	adds	r7, #12
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bc80      	pop	{r7}
 8015dc6:	4770      	bx	lr

08015dc8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8015dc8:	b480      	push	{r7}
 8015dca:	b083      	sub	sp, #12
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	009b      	lsls	r3, r3, #2
 8015dd6:	683a      	ldr	r2, [r7, #0]
 8015dd8:	4413      	add	r3, r2
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	4a07      	ldr	r2, [pc, #28]	@ (8015dfc <RegionCommonGetBandwidth+0x34>)
 8015dde:	4293      	cmp	r3, r2
 8015de0:	d004      	beq.n	8015dec <RegionCommonGetBandwidth+0x24>
 8015de2:	4a07      	ldr	r2, [pc, #28]	@ (8015e00 <RegionCommonGetBandwidth+0x38>)
 8015de4:	4293      	cmp	r3, r2
 8015de6:	d003      	beq.n	8015df0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8015de8:	2300      	movs	r3, #0
 8015dea:	e002      	b.n	8015df2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8015dec:	2301      	movs	r3, #1
 8015dee:	e000      	b.n	8015df2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8015df0:	2302      	movs	r3, #2
    }
}
 8015df2:	4618      	mov	r0, r3
 8015df4:	370c      	adds	r7, #12
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bc80      	pop	{r7}
 8015dfa:	4770      	bx	lr
 8015dfc:	0003d090 	.word	0x0003d090
 8015e00:	0007a120 	.word	0x0007a120

08015e04 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8015e04:	b480      	push	{r7}
 8015e06:	b083      	sub	sp, #12
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	6039      	str	r1, [r7, #0]
 8015e0e:	71fb      	strb	r3, [r7, #7]
 8015e10:	4613      	mov	r3, r2
 8015e12:	71bb      	strb	r3, [r7, #6]
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015e14:	bf00      	nop
 8015e16:	370c      	adds	r7, #12
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bc80      	pop	{r7}
 8015e1c:	4770      	bx	lr

08015e1e <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015e1e:	b480      	push	{r7}
 8015e20:	b083      	sub	sp, #12
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	6078      	str	r0, [r7, #4]
 8015e26:	460b      	mov	r3, r1
 8015e28:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 8015e2a:	bf00      	nop
 8015e2c:	370c      	adds	r7, #12
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bc80      	pop	{r7}
 8015e32:	4770      	bx	lr

08015e34 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
 8015e3c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8015ef4 <VerifyRfFreq+0xc0>)
 8015e40:	6a1b      	ldr	r3, [r3, #32]
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	4798      	blx	r3
 8015e46:	4603      	mov	r3, r0
 8015e48:	f083 0301 	eor.w	r3, r3, #1
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d001      	beq.n	8015e56 <VerifyRfFreq+0x22>
    {
        return false;
 8015e52:	2300      	movs	r3, #0
 8015e54:	e04a      	b.n	8015eec <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	4a27      	ldr	r2, [pc, #156]	@ (8015ef8 <VerifyRfFreq+0xc4>)
 8015e5a:	4293      	cmp	r3, r2
 8015e5c:	d307      	bcc.n	8015e6e <VerifyRfFreq+0x3a>
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	4a26      	ldr	r2, [pc, #152]	@ (8015efc <VerifyRfFreq+0xc8>)
 8015e62:	4293      	cmp	r3, r2
 8015e64:	d803      	bhi.n	8015e6e <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	2202      	movs	r2, #2
 8015e6a:	701a      	strb	r2, [r3, #0]
 8015e6c:	e03d      	b.n	8015eea <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	4a22      	ldr	r2, [pc, #136]	@ (8015efc <VerifyRfFreq+0xc8>)
 8015e72:	4293      	cmp	r3, r2
 8015e74:	d907      	bls.n	8015e86 <VerifyRfFreq+0x52>
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	4a21      	ldr	r2, [pc, #132]	@ (8015f00 <VerifyRfFreq+0xcc>)
 8015e7a:	4293      	cmp	r3, r2
 8015e7c:	d803      	bhi.n	8015e86 <VerifyRfFreq+0x52>
    {
        *band = 0;
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	2200      	movs	r2, #0
 8015e82:	701a      	strb	r2, [r3, #0]
 8015e84:	e031      	b.n	8015eea <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	4a1d      	ldr	r2, [pc, #116]	@ (8015f00 <VerifyRfFreq+0xcc>)
 8015e8a:	4293      	cmp	r3, r2
 8015e8c:	d907      	bls.n	8015e9e <VerifyRfFreq+0x6a>
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	4a1c      	ldr	r2, [pc, #112]	@ (8015f04 <VerifyRfFreq+0xd0>)
 8015e92:	4293      	cmp	r3, r2
 8015e94:	d803      	bhi.n	8015e9e <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	2201      	movs	r2, #1
 8015e9a:	701a      	strb	r2, [r3, #0]
 8015e9c:	e025      	b.n	8015eea <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	4a19      	ldr	r2, [pc, #100]	@ (8015f08 <VerifyRfFreq+0xd4>)
 8015ea2:	4293      	cmp	r3, r2
 8015ea4:	d907      	bls.n	8015eb6 <VerifyRfFreq+0x82>
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	4a18      	ldr	r2, [pc, #96]	@ (8015f0c <VerifyRfFreq+0xd8>)
 8015eaa:	4293      	cmp	r3, r2
 8015eac:	d803      	bhi.n	8015eb6 <VerifyRfFreq+0x82>
    {
        *band = 5;
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	2205      	movs	r2, #5
 8015eb2:	701a      	strb	r2, [r3, #0]
 8015eb4:	e019      	b.n	8015eea <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	4a15      	ldr	r2, [pc, #84]	@ (8015f10 <VerifyRfFreq+0xdc>)
 8015eba:	4293      	cmp	r3, r2
 8015ebc:	d907      	bls.n	8015ece <VerifyRfFreq+0x9a>
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	4a14      	ldr	r2, [pc, #80]	@ (8015f14 <VerifyRfFreq+0xe0>)
 8015ec2:	4293      	cmp	r3, r2
 8015ec4:	d803      	bhi.n	8015ece <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	2203      	movs	r2, #3
 8015eca:	701a      	strb	r2, [r3, #0]
 8015ecc:	e00d      	b.n	8015eea <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	4a11      	ldr	r2, [pc, #68]	@ (8015f18 <VerifyRfFreq+0xe4>)
 8015ed2:	4293      	cmp	r3, r2
 8015ed4:	d307      	bcc.n	8015ee6 <VerifyRfFreq+0xb2>
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	4a10      	ldr	r2, [pc, #64]	@ (8015f1c <VerifyRfFreq+0xe8>)
 8015eda:	4293      	cmp	r3, r2
 8015edc:	d803      	bhi.n	8015ee6 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	2204      	movs	r2, #4
 8015ee2:	701a      	strb	r2, [r3, #0]
 8015ee4:	e001      	b.n	8015eea <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	e000      	b.n	8015eec <VerifyRfFreq+0xb8>
    }
    return true;
 8015eea:	2301      	movs	r3, #1
}
 8015eec:	4618      	mov	r0, r3
 8015eee:	3708      	adds	r7, #8
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}
 8015ef4:	0801c570 	.word	0x0801c570
 8015ef8:	337055c0 	.word	0x337055c0
 8015efc:	338eda3f 	.word	0x338eda3f
 8015f00:	33bca100 	.word	0x33bca100
 8015f04:	33c5c8c0 	.word	0x33c5c8c0
 8015f08:	33c74f5f 	.word	0x33c74f5f
 8015f0c:	33cef080 	.word	0x33cef080
 8015f10:	33d1fdbf 	.word	0x33d1fdbf
 8015f14:	33d5ce50 	.word	0x33d5ce50
 8015f18:	33d691a0 	.word	0x33d691a0
 8015f1c:	33db2580 	.word	0x33db2580

08015f20 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015f20:	b590      	push	{r4, r7, lr}
 8015f22:	b08b      	sub	sp, #44	@ 0x2c
 8015f24:	af04      	add	r7, sp, #16
 8015f26:	4603      	mov	r3, r0
 8015f28:	460a      	mov	r2, r1
 8015f2a:	71fb      	strb	r3, [r7, #7]
 8015f2c:	4613      	mov	r3, r2
 8015f2e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f34:	4a1f      	ldr	r2, [pc, #124]	@ (8015fb4 <GetTimeOnAir+0x94>)
 8015f36:	5cd3      	ldrb	r3, [r2, r3]
 8015f38:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f3e:	491e      	ldr	r1, [pc, #120]	@ (8015fb8 <GetTimeOnAir+0x98>)
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7ff ff41 	bl	8015dc8 <RegionCommonGetBandwidth>
 8015f46:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f50:	2b07      	cmp	r3, #7
 8015f52:	d118      	bne.n	8015f86 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015f54:	4b19      	ldr	r3, [pc, #100]	@ (8015fbc <GetTimeOnAir+0x9c>)
 8015f56:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015f58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015f5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015f60:	fb02 f303 	mul.w	r3, r2, r3
 8015f64:	4619      	mov	r1, r3
 8015f66:	88bb      	ldrh	r3, [r7, #4]
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	2201      	movs	r2, #1
 8015f6c:	9203      	str	r2, [sp, #12]
 8015f6e:	9302      	str	r3, [sp, #8]
 8015f70:	2300      	movs	r3, #0
 8015f72:	9301      	str	r3, [sp, #4]
 8015f74:	2305      	movs	r3, #5
 8015f76:	9300      	str	r3, [sp, #0]
 8015f78:	2300      	movs	r3, #0
 8015f7a:	460a      	mov	r2, r1
 8015f7c:	68f9      	ldr	r1, [r7, #12]
 8015f7e:	2000      	movs	r0, #0
 8015f80:	47a0      	blx	r4
 8015f82:	6178      	str	r0, [r7, #20]
 8015f84:	e011      	b.n	8015faa <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015f86:	4b0d      	ldr	r3, [pc, #52]	@ (8015fbc <GetTimeOnAir+0x9c>)
 8015f88:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015f8a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015f8e:	88bb      	ldrh	r3, [r7, #4]
 8015f90:	b2db      	uxtb	r3, r3
 8015f92:	2101      	movs	r1, #1
 8015f94:	9103      	str	r1, [sp, #12]
 8015f96:	9302      	str	r3, [sp, #8]
 8015f98:	2300      	movs	r3, #0
 8015f9a:	9301      	str	r3, [sp, #4]
 8015f9c:	2308      	movs	r3, #8
 8015f9e:	9300      	str	r3, [sp, #0]
 8015fa0:	2301      	movs	r3, #1
 8015fa2:	68f9      	ldr	r1, [r7, #12]
 8015fa4:	2001      	movs	r0, #1
 8015fa6:	47a0      	blx	r4
 8015fa8:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015faa:	697b      	ldr	r3, [r7, #20]
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	371c      	adds	r7, #28
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd90      	pop	{r4, r7, pc}
 8015fb4:	0801c538 	.word	0x0801c538
 8015fb8:	0801c540 	.word	0x0801c540
 8015fbc:	0801c570 	.word	0x0801c570

08015fc0 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b088      	sub	sp, #32
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015fc8:	2300      	movs	r3, #0
 8015fca:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	781b      	ldrb	r3, [r3, #0]
 8015fd0:	3b01      	subs	r3, #1
 8015fd2:	2b37      	cmp	r3, #55	@ 0x37
 8015fd4:	f200 8122 	bhi.w	801621c <RegionEU868GetPhyParam+0x25c>
 8015fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8015fe0 <RegionEU868GetPhyParam+0x20>)
 8015fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fde:	bf00      	nop
 8015fe0:	080160c1 	.word	0x080160c1
 8015fe4:	080160c7 	.word	0x080160c7
 8015fe8:	0801621d 	.word	0x0801621d
 8015fec:	0801621d 	.word	0x0801621d
 8015ff0:	0801621d 	.word	0x0801621d
 8015ff4:	080160cd 	.word	0x080160cd
 8015ff8:	0801621d 	.word	0x0801621d
 8015ffc:	08016107 	.word	0x08016107
 8016000:	0801621d 	.word	0x0801621d
 8016004:	0801610d 	.word	0x0801610d
 8016008:	08016113 	.word	0x08016113
 801600c:	08016119 	.word	0x08016119
 8016010:	0801611f 	.word	0x0801611f
 8016014:	0801612f 	.word	0x0801612f
 8016018:	0801613f 	.word	0x0801613f
 801601c:	08016145 	.word	0x08016145
 8016020:	0801614d 	.word	0x0801614d
 8016024:	08016155 	.word	0x08016155
 8016028:	0801615d 	.word	0x0801615d
 801602c:	08016165 	.word	0x08016165
 8016030:	0801616d 	.word	0x0801616d
 8016034:	08016181 	.word	0x08016181
 8016038:	08016187 	.word	0x08016187
 801603c:	0801618d 	.word	0x0801618d
 8016040:	08016193 	.word	0x08016193
 8016044:	0801619f 	.word	0x0801619f
 8016048:	080161ab 	.word	0x080161ab
 801604c:	080161b1 	.word	0x080161b1
 8016050:	080161b9 	.word	0x080161b9
 8016054:	080161bf 	.word	0x080161bf
 8016058:	080161c5 	.word	0x080161c5
 801605c:	080161cd 	.word	0x080161cd
 8016060:	080160d3 	.word	0x080160d3
 8016064:	0801621d 	.word	0x0801621d
 8016068:	0801621d 	.word	0x0801621d
 801606c:	0801621d 	.word	0x0801621d
 8016070:	0801621d 	.word	0x0801621d
 8016074:	0801621d 	.word	0x0801621d
 8016078:	0801621d 	.word	0x0801621d
 801607c:	0801621d 	.word	0x0801621d
 8016080:	0801621d 	.word	0x0801621d
 8016084:	0801621d 	.word	0x0801621d
 8016088:	0801621d 	.word	0x0801621d
 801608c:	0801621d 	.word	0x0801621d
 8016090:	0801621d 	.word	0x0801621d
 8016094:	0801621d 	.word	0x0801621d
 8016098:	080161d3 	.word	0x080161d3
 801609c:	080161d9 	.word	0x080161d9
 80160a0:	080161e7 	.word	0x080161e7
 80160a4:	0801621d 	.word	0x0801621d
 80160a8:	0801621d 	.word	0x0801621d
 80160ac:	080161ed 	.word	0x080161ed
 80160b0:	080161f3 	.word	0x080161f3
 80160b4:	0801621d 	.word	0x0801621d
 80160b8:	080161f9 	.word	0x080161f9
 80160bc:	08016209 	.word	0x08016209
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80160c0:	2300      	movs	r3, #0
 80160c2:	61bb      	str	r3, [r7, #24]
            break;
 80160c4:	e0ab      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80160c6:	2300      	movs	r3, #0
 80160c8:	61bb      	str	r3, [r7, #24]
            break;
 80160ca:	e0a8      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80160cc:	2300      	movs	r3, #0
 80160ce:	61bb      	str	r3, [r7, #24]
            break;
 80160d0:	e0a5      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80160d8:	733b      	strb	r3, [r7, #12]
 80160da:	2307      	movs	r3, #7
 80160dc:	737b      	strb	r3, [r7, #13]
 80160de:	2300      	movs	r3, #0
 80160e0:	73bb      	strb	r3, [r7, #14]
 80160e2:	2310      	movs	r3, #16
 80160e4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80160e6:	4b51      	ldr	r3, [pc, #324]	@ (801622c <RegionEU868GetPhyParam+0x26c>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80160ee:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80160f0:	4b4e      	ldr	r3, [pc, #312]	@ (801622c <RegionEU868GetPhyParam+0x26c>)
 80160f2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80160f4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80160f6:	f107 030c 	add.w	r3, r7, #12
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7ff fe11 	bl	8015d22 <RegionCommonGetNextLowerTxDr>
 8016100:	4603      	mov	r3, r0
 8016102:	61bb      	str	r3, [r7, #24]
            break;
 8016104:	e08b      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8016106:	2300      	movs	r3, #0
 8016108:	61bb      	str	r3, [r7, #24]
            break;
 801610a:	e088      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801610c:	2300      	movs	r3, #0
 801610e:	61bb      	str	r3, [r7, #24]
            break;
 8016110:	e085      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016112:	2340      	movs	r3, #64	@ 0x40
 8016114:	61bb      	str	r3, [r7, #24]
            break;
 8016116:	e082      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016118:	2320      	movs	r3, #32
 801611a:	61bb      	str	r3, [r7, #24]
            break;
 801611c:	e07f      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016124:	461a      	mov	r2, r3
 8016126:	4b42      	ldr	r3, [pc, #264]	@ (8016230 <RegionEU868GetPhyParam+0x270>)
 8016128:	5c9b      	ldrb	r3, [r3, r2]
 801612a:	61bb      	str	r3, [r7, #24]
            break;
 801612c:	e077      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016134:	461a      	mov	r2, r3
 8016136:	4b3f      	ldr	r3, [pc, #252]	@ (8016234 <RegionEU868GetPhyParam+0x274>)
 8016138:	5c9b      	ldrb	r3, [r3, r2]
 801613a:	61bb      	str	r3, [r7, #24]
            break;
 801613c:	e06f      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801613e:	2301      	movs	r3, #1
 8016140:	61bb      	str	r3, [r7, #24]
            break;
 8016142:	e06c      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8016144:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8016148:	61bb      	str	r3, [r7, #24]
            break;
 801614a:	e068      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801614c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016150:	61bb      	str	r3, [r7, #24]
            break;
 8016152:	e064      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016154:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8016158:	61bb      	str	r3, [r7, #24]
            break;
 801615a:	e060      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801615c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016160:	61bb      	str	r3, [r7, #24]
            break;
 8016162:	e05c      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016164:	f241 7370 	movw	r3, #6000	@ 0x1770
 8016168:	61bb      	str	r3, [r7, #24]
            break;
 801616a:	e058      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801616c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016170:	4831      	ldr	r0, [pc, #196]	@ (8016238 <RegionEU868GetPhyParam+0x278>)
 8016172:	f001 f831 	bl	80171d8 <randr>
 8016176:	4603      	mov	r3, r0
 8016178:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801617c:	61bb      	str	r3, [r7, #24]
            break;
 801617e:	e04e      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016180:	2300      	movs	r3, #0
 8016182:	61bb      	str	r3, [r7, #24]
            break;
 8016184:	e04b      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016186:	4b2d      	ldr	r3, [pc, #180]	@ (801623c <RegionEU868GetPhyParam+0x27c>)
 8016188:	61bb      	str	r3, [r7, #24]
            break;
 801618a:	e048      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801618c:	2300      	movs	r3, #0
 801618e:	61bb      	str	r3, [r7, #24]
            break;
 8016190:	e045      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016192:	4b26      	ldr	r3, [pc, #152]	@ (801622c <RegionEU868GetPhyParam+0x26c>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801619a:	61bb      	str	r3, [r7, #24]
            break;
 801619c:	e03f      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801619e:	4b23      	ldr	r3, [pc, #140]	@ (801622c <RegionEU868GetPhyParam+0x26c>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80161a6:	61bb      	str	r3, [r7, #24]
            break;
 80161a8:	e039      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80161aa:	2310      	movs	r3, #16
 80161ac:	61bb      	str	r3, [r7, #24]
            break;
 80161ae:	e036      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80161b0:	4b1e      	ldr	r3, [pc, #120]	@ (801622c <RegionEU868GetPhyParam+0x26c>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	61bb      	str	r3, [r7, #24]
            break;
 80161b6:	e032      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80161b8:	2300      	movs	r3, #0
 80161ba:	61bb      	str	r3, [r7, #24]
            break;
 80161bc:	e02f      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80161be:	2300      	movs	r3, #0
 80161c0:	61bb      	str	r3, [r7, #24]
            break;
 80161c2:	e02c      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80161c4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80161c8:	61bb      	str	r3, [r7, #24]
            break;
 80161ca:	e028      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80161cc:	4b1c      	ldr	r3, [pc, #112]	@ (8016240 <RegionEU868GetPhyParam+0x280>)
 80161ce:	61bb      	str	r3, [r7, #24]
            break;
 80161d0:	e025      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80161d2:	4b1a      	ldr	r3, [pc, #104]	@ (801623c <RegionEU868GetPhyParam+0x27c>)
 80161d4:	61bb      	str	r3, [r7, #24]
            break;
 80161d6:	e022      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80161d8:	2311      	movs	r3, #17
 80161da:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80161dc:	2301      	movs	r3, #1
 80161de:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80161e0:	2300      	movs	r3, #0
 80161e2:	76bb      	strb	r3, [r7, #26]
            break;
 80161e4:	e01b      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80161e6:	2303      	movs	r3, #3
 80161e8:	61bb      	str	r3, [r7, #24]
            break;
 80161ea:	e018      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80161ec:	4b13      	ldr	r3, [pc, #76]	@ (801623c <RegionEU868GetPhyParam+0x27c>)
 80161ee:	61bb      	str	r3, [r7, #24]
            break;
 80161f0:	e015      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80161f2:	2303      	movs	r3, #3
 80161f4:	61bb      	str	r3, [r7, #24]
            break;
 80161f6:	e012      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161fe:	461a      	mov	r2, r3
 8016200:	4b10      	ldr	r3, [pc, #64]	@ (8016244 <RegionEU868GetPhyParam+0x284>)
 8016202:	5c9b      	ldrb	r3, [r3, r2]
 8016204:	61bb      	str	r3, [r7, #24]
            break;
 8016206:	e00a      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801620e:	490e      	ldr	r1, [pc, #56]	@ (8016248 <RegionEU868GetPhyParam+0x288>)
 8016210:	4618      	mov	r0, r3
 8016212:	f7ff fdd9 	bl	8015dc8 <RegionCommonGetBandwidth>
 8016216:	4603      	mov	r3, r0
 8016218:	61bb      	str	r3, [r7, #24]
            break;
 801621a:	e000      	b.n	801621e <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 801621c:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801621e:	69bb      	ldr	r3, [r7, #24]
 8016220:	61fb      	str	r3, [r7, #28]
 8016222:	69fb      	ldr	r3, [r7, #28]
}
 8016224:	4618      	mov	r0, r3
 8016226:	3720      	adds	r7, #32
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}
 801622c:	20001b2c 	.word	0x20001b2c
 8016230:	0801c560 	.word	0x0801c560
 8016234:	0801c568 	.word	0x0801c568
 8016238:	fffffc18 	.word	0xfffffc18
 801623c:	33d3e608 	.word	0x33d3e608
 8016240:	4009999a 	.word	0x4009999a
 8016244:	0801c538 	.word	0x0801c538
 8016248:	0801c540 	.word	0x0801c540

0801624c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801624c:	b590      	push	{r4, r7, lr}
 801624e:	b085      	sub	sp, #20
 8016250:	af02      	add	r7, sp, #8
 8016252:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016254:	4b11      	ldr	r3, [pc, #68]	@ (801629c <RegionEU868SetBandTxDone+0x50>)
 8016256:	681a      	ldr	r2, [r3, #0]
 8016258:	4b11      	ldr	r3, [pc, #68]	@ (80162a0 <RegionEU868SetBandTxDone+0x54>)
 801625a:	6819      	ldr	r1, [r3, #0]
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	781b      	ldrb	r3, [r3, #0]
 8016260:	4618      	mov	r0, r3
 8016262:	4603      	mov	r3, r0
 8016264:	005b      	lsls	r3, r3, #1
 8016266:	4403      	add	r3, r0
 8016268:	009b      	lsls	r3, r3, #2
 801626a:	440b      	add	r3, r1
 801626c:	3309      	adds	r3, #9
 801626e:	781b      	ldrb	r3, [r3, #0]
 8016270:	4619      	mov	r1, r3
 8016272:	460b      	mov	r3, r1
 8016274:	005b      	lsls	r3, r3, #1
 8016276:	440b      	add	r3, r1
 8016278:	00db      	lsls	r3, r3, #3
 801627a:	18d0      	adds	r0, r2, r3
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	6899      	ldr	r1, [r3, #8]
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	785c      	ldrb	r4, [r3, #1]
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	691a      	ldr	r2, [r3, #16]
 8016288:	9200      	str	r2, [sp, #0]
 801628a:	68db      	ldr	r3, [r3, #12]
 801628c:	4622      	mov	r2, r4
 801628e:	f7ff f945 	bl	801551c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8016292:	bf00      	nop
 8016294:	370c      	adds	r7, #12
 8016296:	46bd      	mov	sp, r7
 8016298:	bd90      	pop	{r4, r7, pc}
 801629a:	bf00      	nop
 801629c:	20001b30 	.word	0x20001b30
 80162a0:	20001b2c 	.word	0x20001b2c

080162a4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b0b0      	sub	sp, #192	@ 0xc0
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80162ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80162b0:	2290      	movs	r2, #144	@ 0x90
 80162b2:	2100      	movs	r1, #0
 80162b4:	4618      	mov	r0, r3
 80162b6:	f005 fd41 	bl	801bd3c <memset>
 80162ba:	2364      	movs	r3, #100	@ 0x64
 80162bc:	863b      	strh	r3, [r7, #48]	@ 0x30
 80162be:	2364      	movs	r3, #100	@ 0x64
 80162c0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80162c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80162c8:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80162cc:	230a      	movs	r3, #10
 80162ce:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 80162d2:	2364      	movs	r3, #100	@ 0x64
 80162d4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80162d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80162dc:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	7b1b      	ldrb	r3, [r3, #12]
 80162e4:	2b02      	cmp	r3, #2
 80162e6:	d05d      	beq.n	80163a4 <RegionEU868InitDefaults+0x100>
 80162e8:	2b02      	cmp	r3, #2
 80162ea:	dc6a      	bgt.n	80163c2 <RegionEU868InitDefaults+0x11e>
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d002      	beq.n	80162f6 <RegionEU868InitDefaults+0x52>
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	d03e      	beq.n	8016372 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80162f4:	e065      	b.n	80163c2 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d062      	beq.n	80163c4 <RegionEU868InitDefaults+0x120>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	685b      	ldr	r3, [r3, #4]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d05e      	beq.n	80163c4 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	685b      	ldr	r3, [r3, #4]
 801630a:	4a30      	ldr	r2, [pc, #192]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 801630c:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	689b      	ldr	r3, [r3, #8]
 8016312:	4a2f      	ldr	r2, [pc, #188]	@ (80163d0 <RegionEU868InitDefaults+0x12c>)
 8016314:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016316:	4b2e      	ldr	r3, [pc, #184]	@ (80163d0 <RegionEU868InitDefaults+0x12c>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801631e:	2290      	movs	r2, #144	@ 0x90
 8016320:	4618      	mov	r0, r3
 8016322:	f000 ff70 	bl	8017206 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016326:	4b29      	ldr	r3, [pc, #164]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	4a2a      	ldr	r2, [pc, #168]	@ (80163d4 <RegionEU868InitDefaults+0x130>)
 801632c:	ca07      	ldmia	r2, {r0, r1, r2}
 801632e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016332:	4b26      	ldr	r3, [pc, #152]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	4a28      	ldr	r2, [pc, #160]	@ (80163d8 <RegionEU868InitDefaults+0x134>)
 8016338:	330c      	adds	r3, #12
 801633a:	ca07      	ldmia	r2, {r0, r1, r2}
 801633c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016340:	4b22      	ldr	r3, [pc, #136]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	4a25      	ldr	r2, [pc, #148]	@ (80163dc <RegionEU868InitDefaults+0x138>)
 8016346:	3318      	adds	r3, #24
 8016348:	ca07      	ldmia	r2, {r0, r1, r2}
 801634a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801634e:	4b1f      	ldr	r3, [pc, #124]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2207      	movs	r2, #7
 8016354:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016358:	4b1c      	ldr	r3, [pc, #112]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8016360:	4b1a      	ldr	r3, [pc, #104]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8016368:	2201      	movs	r2, #1
 801636a:	4619      	mov	r1, r3
 801636c:	f7ff f8b0 	bl	80154d0 <RegionCommonChanMaskCopy>
 8016370:	e028      	b.n	80163c4 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016372:	4b16      	ldr	r3, [pc, #88]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	2200      	movs	r2, #0
 8016378:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801637a:	4b14      	ldr	r3, [pc, #80]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	2200      	movs	r2, #0
 8016380:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016382:	4b12      	ldr	r3, [pc, #72]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2200      	movs	r2, #0
 8016388:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801638a:	4b10      	ldr	r3, [pc, #64]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8016392:	4b0e      	ldr	r3, [pc, #56]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801639a:	2201      	movs	r2, #1
 801639c:	4619      	mov	r1, r3
 801639e:	f7ff f897 	bl	80154d0 <RegionCommonChanMaskCopy>
            break;
 80163a2:	e00f      	b.n	80163c4 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80163a4:	4b09      	ldr	r3, [pc, #36]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 80163ac:	4b07      	ldr	r3, [pc, #28]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 80163b4:	4b05      	ldr	r3, [pc, #20]	@ (80163cc <RegionEU868InitDefaults+0x128>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	430a      	orrs	r2, r1
 80163ba:	b292      	uxth	r2, r2
 80163bc:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 80163c0:	e000      	b.n	80163c4 <RegionEU868InitDefaults+0x120>
            break;
 80163c2:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80163c4:	37c0      	adds	r7, #192	@ 0xc0
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}
 80163ca:	bf00      	nop
 80163cc:	20001b2c 	.word	0x20001b2c
 80163d0:	20001b30 	.word	0x20001b30
 80163d4:	0801bfe8 	.word	0x0801bfe8
 80163d8:	0801bff4 	.word	0x0801bff4
 80163dc:	0801c000 	.word	0x0801c000

080163e0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b084      	sub	sp, #16
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	460b      	mov	r3, r1
 80163ea:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80163ec:	78fb      	ldrb	r3, [r7, #3]
 80163ee:	2b0f      	cmp	r3, #15
 80163f0:	d86c      	bhi.n	80164cc <RegionEU868Verify+0xec>
 80163f2:	a201      	add	r2, pc, #4	@ (adr r2, 80163f8 <RegionEU868Verify+0x18>)
 80163f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163f8:	08016439 	.word	0x08016439
 80163fc:	080164cd 	.word	0x080164cd
 8016400:	080164cd 	.word	0x080164cd
 8016404:	080164cd 	.word	0x080164cd
 8016408:	080164cd 	.word	0x080164cd
 801640c:	08016451 	.word	0x08016451
 8016410:	0801646f 	.word	0x0801646f
 8016414:	0801648d 	.word	0x0801648d
 8016418:	080164cd 	.word	0x080164cd
 801641c:	080164ab 	.word	0x080164ab
 8016420:	080164ab 	.word	0x080164ab
 8016424:	080164cd 	.word	0x080164cd
 8016428:	080164cd 	.word	0x080164cd
 801642c:	080164cd 	.word	0x080164cd
 8016430:	080164cd 	.word	0x080164cd
 8016434:	080164c9 	.word	0x080164c9
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016438:	2300      	movs	r3, #0
 801643a:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	f107 020f 	add.w	r2, r7, #15
 8016444:	4611      	mov	r1, r2
 8016446:	4618      	mov	r0, r3
 8016448:	f7ff fcf4 	bl	8015e34 <VerifyRfFreq>
 801644c:	4603      	mov	r3, r0
 801644e:	e03e      	b.n	80164ce <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f993 3000 	ldrsb.w	r3, [r3]
 8016456:	2207      	movs	r2, #7
 8016458:	2100      	movs	r1, #0
 801645a:	4618      	mov	r0, r3
 801645c:	f7fe ffbb 	bl	80153d6 <RegionCommonValueInRange>
 8016460:	4603      	mov	r3, r0
 8016462:	2b00      	cmp	r3, #0
 8016464:	bf14      	ite	ne
 8016466:	2301      	movne	r3, #1
 8016468:	2300      	moveq	r3, #0
 801646a:	b2db      	uxtb	r3, r3
 801646c:	e02f      	b.n	80164ce <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	f993 3000 	ldrsb.w	r3, [r3]
 8016474:	2205      	movs	r2, #5
 8016476:	2100      	movs	r1, #0
 8016478:	4618      	mov	r0, r3
 801647a:	f7fe ffac 	bl	80153d6 <RegionCommonValueInRange>
 801647e:	4603      	mov	r3, r0
 8016480:	2b00      	cmp	r3, #0
 8016482:	bf14      	ite	ne
 8016484:	2301      	movne	r3, #1
 8016486:	2300      	moveq	r3, #0
 8016488:	b2db      	uxtb	r3, r3
 801648a:	e020      	b.n	80164ce <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f993 3000 	ldrsb.w	r3, [r3]
 8016492:	2207      	movs	r2, #7
 8016494:	2100      	movs	r1, #0
 8016496:	4618      	mov	r0, r3
 8016498:	f7fe ff9d 	bl	80153d6 <RegionCommonValueInRange>
 801649c:	4603      	mov	r3, r0
 801649e:	2b00      	cmp	r3, #0
 80164a0:	bf14      	ite	ne
 80164a2:	2301      	movne	r3, #1
 80164a4:	2300      	moveq	r3, #0
 80164a6:	b2db      	uxtb	r3, r3
 80164a8:	e011      	b.n	80164ce <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	f993 3000 	ldrsb.w	r3, [r3]
 80164b0:	2207      	movs	r2, #7
 80164b2:	2100      	movs	r1, #0
 80164b4:	4618      	mov	r0, r3
 80164b6:	f7fe ff8e 	bl	80153d6 <RegionCommonValueInRange>
 80164ba:	4603      	mov	r3, r0
 80164bc:	2b00      	cmp	r3, #0
 80164be:	bf14      	ite	ne
 80164c0:	2301      	movne	r3, #1
 80164c2:	2300      	moveq	r3, #0
 80164c4:	b2db      	uxtb	r3, r3
 80164c6:	e002      	b.n	80164ce <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80164c8:	2301      	movs	r3, #1
 80164ca:	e000      	b.n	80164ce <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80164cc:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	3710      	adds	r7, #16
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
 80164d6:	bf00      	nop

080164d8 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b08a      	sub	sp, #40	@ 0x28
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80164e0:	2350      	movs	r3, #80	@ 0x50
 80164e2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	7a1b      	ldrb	r3, [r3, #8]
 80164ea:	2b10      	cmp	r3, #16
 80164ec:	d162      	bne.n	80165b4 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	685b      	ldr	r3, [r3, #4]
 80164f2:	330f      	adds	r3, #15
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d15e      	bne.n	80165b8 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80164fa:	2300      	movs	r3, #0
 80164fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016500:	2303      	movs	r3, #3
 8016502:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016506:	e050      	b.n	80165aa <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016508:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801650c:	2b07      	cmp	r3, #7
 801650e:	d824      	bhi.n	801655a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	685a      	ldr	r2, [r3, #4]
 8016514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016518:	4413      	add	r3, r2
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801651e:	69ba      	ldr	r2, [r7, #24]
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	6859      	ldr	r1, [r3, #4]
 8016524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016528:	3301      	adds	r3, #1
 801652a:	440b      	add	r3, r1
 801652c:	781b      	ldrb	r3, [r3, #0]
 801652e:	021b      	lsls	r3, r3, #8
 8016530:	4313      	orrs	r3, r2
 8016532:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016534:	69ba      	ldr	r2, [r7, #24]
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	6859      	ldr	r1, [r3, #4]
 801653a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801653e:	3302      	adds	r3, #2
 8016540:	440b      	add	r3, r1
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	041b      	lsls	r3, r3, #16
 8016546:	4313      	orrs	r3, r2
 8016548:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801654a:	69bb      	ldr	r3, [r7, #24]
 801654c:	2264      	movs	r2, #100	@ 0x64
 801654e:	fb02 f303 	mul.w	r3, r2, r3
 8016552:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016554:	2300      	movs	r3, #0
 8016556:	61fb      	str	r3, [r7, #28]
 8016558:	e006      	b.n	8016568 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801655a:	2300      	movs	r3, #0
 801655c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801655e:	2300      	movs	r3, #0
 8016560:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016564:	2300      	movs	r3, #0
 8016566:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016568:	69bb      	ldr	r3, [r7, #24]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d00b      	beq.n	8016586 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801656e:	f107 0318 	add.w	r3, r7, #24
 8016572:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016574:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016578:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801657a:	f107 0310 	add.w	r3, r7, #16
 801657e:	4618      	mov	r0, r3
 8016580:	f000 fd14 	bl	8016fac <RegionEU868ChannelAdd>
 8016584:	e007      	b.n	8016596 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016586:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801658a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801658c:	f107 030c 	add.w	r3, r7, #12
 8016590:	4618      	mov	r0, r3
 8016592:	f000 fdad 	bl	80170f0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801659a:	3303      	adds	r3, #3
 801659c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80165a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80165a4:	3301      	adds	r3, #1
 80165a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80165aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80165ae:	2b0f      	cmp	r3, #15
 80165b0:	d9aa      	bls.n	8016508 <RegionEU868ApplyCFList+0x30>
 80165b2:	e002      	b.n	80165ba <RegionEU868ApplyCFList+0xe2>
        return;
 80165b4:	bf00      	nop
 80165b6:	e000      	b.n	80165ba <RegionEU868ApplyCFList+0xe2>
        return;
 80165b8:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80165ba:	3728      	adds	r7, #40	@ 0x28
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}

080165c0 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b082      	sub	sp, #8
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	791b      	ldrb	r3, [r3, #4]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d002      	beq.n	80165d6 <RegionEU868ChanMaskSet+0x16>
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	d00b      	beq.n	80165ec <RegionEU868ChanMaskSet+0x2c>
 80165d4:	e015      	b.n	8016602 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80165d6:	4b0e      	ldr	r3, [pc, #56]	@ (8016610 <RegionEU868ChanMaskSet+0x50>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	2201      	movs	r2, #1
 80165e4:	4619      	mov	r1, r3
 80165e6:	f7fe ff73 	bl	80154d0 <RegionCommonChanMaskCopy>
            break;
 80165ea:	e00c      	b.n	8016606 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80165ec:	4b08      	ldr	r3, [pc, #32]	@ (8016610 <RegionEU868ChanMaskSet+0x50>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2201      	movs	r2, #1
 80165fa:	4619      	mov	r1, r3
 80165fc:	f7fe ff68 	bl	80154d0 <RegionCommonChanMaskCopy>
            break;
 8016600:	e001      	b.n	8016606 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016602:	2300      	movs	r3, #0
 8016604:	e000      	b.n	8016608 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016606:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016608:	4618      	mov	r0, r3
 801660a:	3708      	adds	r7, #8
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}
 8016610:	20001b2c 	.word	0x20001b2c

08016614 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b088      	sub	sp, #32
 8016618:	af02      	add	r7, sp, #8
 801661a:	60ba      	str	r2, [r7, #8]
 801661c:	607b      	str	r3, [r7, #4]
 801661e:	4603      	mov	r3, r0
 8016620:	73fb      	strb	r3, [r7, #15]
 8016622:	460b      	mov	r3, r1
 8016624:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016626:	2300      	movs	r3, #0
 8016628:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801662a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801662e:	2b07      	cmp	r3, #7
 8016630:	bfa8      	it	ge
 8016632:	2307      	movge	r3, #7
 8016634:	b25a      	sxtb	r2, r3
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016640:	491e      	ldr	r1, [pc, #120]	@ (80166bc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016642:	4618      	mov	r0, r3
 8016644:	f7ff fbc0 	bl	8015dc8 <RegionCommonGetBandwidth>
 8016648:	4603      	mov	r3, r0
 801664a:	b2da      	uxtb	r2, r3
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016656:	2b07      	cmp	r3, #7
 8016658:	d10a      	bne.n	8016670 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016660:	461a      	mov	r2, r3
 8016662:	4b17      	ldr	r3, [pc, #92]	@ (80166c0 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016664:	5c9b      	ldrb	r3, [r3, r2]
 8016666:	4618      	mov	r0, r3
 8016668:	f7ff f942 	bl	80158f0 <RegionCommonComputeSymbolTimeFsk>
 801666c:	6178      	str	r0, [r7, #20]
 801666e:	e011      	b.n	8016694 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016676:	461a      	mov	r2, r3
 8016678:	4b11      	ldr	r3, [pc, #68]	@ (80166c0 <RegionEU868ComputeRxWindowParameters+0xac>)
 801667a:	5c9a      	ldrb	r2, [r3, r2]
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016682:	4619      	mov	r1, r3
 8016684:	4b0d      	ldr	r3, [pc, #52]	@ (80166bc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016686:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801668a:	4619      	mov	r1, r3
 801668c:	4610      	mov	r0, r2
 801668e:	f7ff f919 	bl	80158c4 <RegionCommonComputeSymbolTimeLoRa>
 8016692:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016694:	4b0b      	ldr	r3, [pc, #44]	@ (80166c4 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016698:	4798      	blx	r3
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	3308      	adds	r3, #8
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	320c      	adds	r2, #12
 80166a2:	7bb9      	ldrb	r1, [r7, #14]
 80166a4:	9201      	str	r2, [sp, #4]
 80166a6:	9300      	str	r3, [sp, #0]
 80166a8:	4603      	mov	r3, r0
 80166aa:	68ba      	ldr	r2, [r7, #8]
 80166ac:	6978      	ldr	r0, [r7, #20]
 80166ae:	f7ff f92f 	bl	8015910 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80166b2:	bf00      	nop
 80166b4:	3718      	adds	r7, #24
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	0801c540 	.word	0x0801c540
 80166c0:	0801c538 	.word	0x0801c538
 80166c4:	0801c570 	.word	0x0801c570

080166c8 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80166c8:	b5b0      	push	{r4, r5, r7, lr}
 80166ca:	b090      	sub	sp, #64	@ 0x40
 80166cc:	af0a      	add	r7, sp, #40	@ 0x28
 80166ce:	6078      	str	r0, [r7, #4]
 80166d0:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	785b      	ldrb	r3, [r3, #1]
 80166d6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80166d8:	2300      	movs	r3, #0
 80166da:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80166dc:	2300      	movs	r3, #0
 80166de:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	685b      	ldr	r3, [r3, #4]
 80166e4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80166e6:	4b5a      	ldr	r3, [pc, #360]	@ (8016850 <RegionEU868RxConfig+0x188>)
 80166e8:	685b      	ldr	r3, [r3, #4]
 80166ea:	4798      	blx	r3
 80166ec:	4603      	mov	r3, r0
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d001      	beq.n	80166f6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80166f2:	2300      	movs	r3, #0
 80166f4:	e0a8      	b.n	8016848 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	7cdb      	ldrb	r3, [r3, #19]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d126      	bne.n	801674c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80166fe:	4b55      	ldr	r3, [pc, #340]	@ (8016854 <RegionEU868RxConfig+0x18c>)
 8016700:	681a      	ldr	r2, [r3, #0]
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	781b      	ldrb	r3, [r3, #0]
 8016706:	4619      	mov	r1, r3
 8016708:	460b      	mov	r3, r1
 801670a:	005b      	lsls	r3, r3, #1
 801670c:	440b      	add	r3, r1
 801670e:	009b      	lsls	r3, r3, #2
 8016710:	4413      	add	r3, r2
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016716:	4b4f      	ldr	r3, [pc, #316]	@ (8016854 <RegionEU868RxConfig+0x18c>)
 8016718:	681a      	ldr	r2, [r3, #0]
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	781b      	ldrb	r3, [r3, #0]
 801671e:	4619      	mov	r1, r3
 8016720:	460b      	mov	r3, r1
 8016722:	005b      	lsls	r3, r3, #1
 8016724:	440b      	add	r3, r1
 8016726:	009b      	lsls	r3, r3, #2
 8016728:	4413      	add	r3, r2
 801672a:	3304      	adds	r3, #4
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d00c      	beq.n	801674c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8016732:	4b48      	ldr	r3, [pc, #288]	@ (8016854 <RegionEU868RxConfig+0x18c>)
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	4619      	mov	r1, r3
 801673c:	460b      	mov	r3, r1
 801673e:	005b      	lsls	r3, r3, #1
 8016740:	440b      	add	r3, r1
 8016742:	009b      	lsls	r3, r3, #2
 8016744:	4413      	add	r3, r2
 8016746:	3304      	adds	r3, #4
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801674c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016750:	4a41      	ldr	r2, [pc, #260]	@ (8016858 <RegionEU868RxConfig+0x190>)
 8016752:	5cd3      	ldrb	r3, [r2, r3]
 8016754:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016756:	4b3e      	ldr	r3, [pc, #248]	@ (8016850 <RegionEU868RxConfig+0x188>)
 8016758:	68db      	ldr	r3, [r3, #12]
 801675a:	6938      	ldr	r0, [r7, #16]
 801675c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801675e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016762:	2b07      	cmp	r3, #7
 8016764:	d128      	bne.n	80167b8 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016766:	2300      	movs	r3, #0
 8016768:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801676a:	4b39      	ldr	r3, [pc, #228]	@ (8016850 <RegionEU868RxConfig+0x188>)
 801676c:	699c      	ldr	r4, [r3, #24]
 801676e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016772:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016776:	fb02 f303 	mul.w	r3, r2, r3
 801677a:	4619      	mov	r1, r3
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	689b      	ldr	r3, [r3, #8]
 8016780:	b29b      	uxth	r3, r3
 8016782:	687a      	ldr	r2, [r7, #4]
 8016784:	7c92      	ldrb	r2, [r2, #18]
 8016786:	7df8      	ldrb	r0, [r7, #23]
 8016788:	9209      	str	r2, [sp, #36]	@ 0x24
 801678a:	2200      	movs	r2, #0
 801678c:	9208      	str	r2, [sp, #32]
 801678e:	2200      	movs	r2, #0
 8016790:	9207      	str	r2, [sp, #28]
 8016792:	2200      	movs	r2, #0
 8016794:	9206      	str	r2, [sp, #24]
 8016796:	2201      	movs	r2, #1
 8016798:	9205      	str	r2, [sp, #20]
 801679a:	2200      	movs	r2, #0
 801679c:	9204      	str	r2, [sp, #16]
 801679e:	2200      	movs	r2, #0
 80167a0:	9203      	str	r2, [sp, #12]
 80167a2:	9302      	str	r3, [sp, #8]
 80167a4:	2305      	movs	r3, #5
 80167a6:	9301      	str	r3, [sp, #4]
 80167a8:	4b2c      	ldr	r3, [pc, #176]	@ (801685c <RegionEU868RxConfig+0x194>)
 80167aa:	9300      	str	r3, [sp, #0]
 80167ac:	2300      	movs	r3, #0
 80167ae:	460a      	mov	r2, r1
 80167b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80167b4:	47a0      	blx	r4
 80167b6:	e024      	b.n	8016802 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80167b8:	2301      	movs	r3, #1
 80167ba:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80167bc:	4b24      	ldr	r3, [pc, #144]	@ (8016850 <RegionEU868RxConfig+0x188>)
 80167be:	699c      	ldr	r4, [r3, #24]
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	789b      	ldrb	r3, [r3, #2]
 80167c4:	461d      	mov	r5, r3
 80167c6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	689b      	ldr	r3, [r3, #8]
 80167ce:	b29b      	uxth	r3, r3
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	7c92      	ldrb	r2, [r2, #18]
 80167d4:	7df8      	ldrb	r0, [r7, #23]
 80167d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80167d8:	2201      	movs	r2, #1
 80167da:	9208      	str	r2, [sp, #32]
 80167dc:	2200      	movs	r2, #0
 80167de:	9207      	str	r2, [sp, #28]
 80167e0:	2200      	movs	r2, #0
 80167e2:	9206      	str	r2, [sp, #24]
 80167e4:	2200      	movs	r2, #0
 80167e6:	9205      	str	r2, [sp, #20]
 80167e8:	2200      	movs	r2, #0
 80167ea:	9204      	str	r2, [sp, #16]
 80167ec:	2200      	movs	r2, #0
 80167ee:	9203      	str	r2, [sp, #12]
 80167f0:	9302      	str	r3, [sp, #8]
 80167f2:	2308      	movs	r3, #8
 80167f4:	9301      	str	r3, [sp, #4]
 80167f6:	2300      	movs	r3, #0
 80167f8:	9300      	str	r3, [sp, #0]
 80167fa:	2301      	movs	r3, #1
 80167fc:	460a      	mov	r2, r1
 80167fe:	4629      	mov	r1, r5
 8016800:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	7c5b      	ldrb	r3, [r3, #17]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d005      	beq.n	8016816 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801680a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801680e:	4a14      	ldr	r2, [pc, #80]	@ (8016860 <RegionEU868RxConfig+0x198>)
 8016810:	5cd3      	ldrb	r3, [r2, r3]
 8016812:	75bb      	strb	r3, [r7, #22]
 8016814:	e004      	b.n	8016820 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801681a:	4a12      	ldr	r2, [pc, #72]	@ (8016864 <RegionEU868RxConfig+0x19c>)
 801681c:	5cd3      	ldrb	r3, [r2, r3]
 801681e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016820:	4b0b      	ldr	r3, [pc, #44]	@ (8016850 <RegionEU868RxConfig+0x188>)
 8016822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016824:	7dba      	ldrb	r2, [r7, #22]
 8016826:	320d      	adds	r2, #13
 8016828:	b2d1      	uxtb	r1, r2
 801682a:	7dfa      	ldrb	r2, [r7, #23]
 801682c:	4610      	mov	r0, r2
 801682e:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	7cdb      	ldrb	r3, [r3, #19]
 8016834:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016838:	6939      	ldr	r1, [r7, #16]
 801683a:	4618      	mov	r0, r3
 801683c:	f7ff fae2 	bl	8015e04 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8016840:	683b      	ldr	r3, [r7, #0]
 8016842:	7bfa      	ldrb	r2, [r7, #15]
 8016844:	701a      	strb	r2, [r3, #0]
    return true;
 8016846:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016848:	4618      	mov	r0, r3
 801684a:	3718      	adds	r7, #24
 801684c:	46bd      	mov	sp, r7
 801684e:	bdb0      	pop	{r4, r5, r7, pc}
 8016850:	0801c570 	.word	0x0801c570
 8016854:	20001b2c 	.word	0x20001b2c
 8016858:	0801c538 	.word	0x0801c538
 801685c:	00014585 	.word	0x00014585
 8016860:	0801c568 	.word	0x0801c568
 8016864:	0801c560 	.word	0x0801c560

08016868 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016868:	b590      	push	{r4, r7, lr}
 801686a:	b093      	sub	sp, #76	@ 0x4c
 801686c:	af0a      	add	r7, sp, #40	@ 0x28
 801686e:	60f8      	str	r0, [r7, #12]
 8016870:	60b9      	str	r1, [r7, #8]
 8016872:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801687a:	461a      	mov	r2, r3
 801687c:	4b5d      	ldr	r3, [pc, #372]	@ (80169f4 <RegionEU868TxConfig+0x18c>)
 801687e:	5c9b      	ldrb	r3, [r3, r2]
 8016880:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016888:	4b5b      	ldr	r3, [pc, #364]	@ (80169f8 <RegionEU868TxConfig+0x190>)
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	4b5b      	ldr	r3, [pc, #364]	@ (80169fc <RegionEU868TxConfig+0x194>)
 801688e:	6819      	ldr	r1, [r3, #0]
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	781b      	ldrb	r3, [r3, #0]
 8016894:	461c      	mov	r4, r3
 8016896:	4623      	mov	r3, r4
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	4423      	add	r3, r4
 801689c:	009b      	lsls	r3, r3, #2
 801689e:	440b      	add	r3, r1
 80168a0:	3309      	adds	r3, #9
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	4619      	mov	r1, r3
 80168a6:	460b      	mov	r3, r1
 80168a8:	005b      	lsls	r3, r3, #1
 80168aa:	440b      	add	r3, r1
 80168ac:	00db      	lsls	r3, r3, #3
 80168ae:	4413      	add	r3, r2
 80168b0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80168b4:	4619      	mov	r1, r3
 80168b6:	f7ff fa72 	bl	8015d9e <RegionCommonLimitTxPower>
 80168ba:	4603      	mov	r3, r0
 80168bc:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168c4:	494e      	ldr	r1, [pc, #312]	@ (8016a00 <RegionEU868TxConfig+0x198>)
 80168c6:	4618      	mov	r0, r3
 80168c8:	f7ff fa7e 	bl	8015dc8 <RegionCommonGetBandwidth>
 80168cc:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80168ce:	2300      	movs	r3, #0
 80168d0:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	6859      	ldr	r1, [r3, #4]
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	689a      	ldr	r2, [r3, #8]
 80168da:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80168de:	4618      	mov	r0, r3
 80168e0:	f7ff f8ce 	bl	8015a80 <RegionCommonComputeTxPower>
 80168e4:	4603      	mov	r3, r0
 80168e6:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80168e8:	4b46      	ldr	r3, [pc, #280]	@ (8016a04 <RegionEU868TxConfig+0x19c>)
 80168ea:	68da      	ldr	r2, [r3, #12]
 80168ec:	4b43      	ldr	r3, [pc, #268]	@ (80169fc <RegionEU868TxConfig+0x194>)
 80168ee:	6819      	ldr	r1, [r3, #0]
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	781b      	ldrb	r3, [r3, #0]
 80168f4:	4618      	mov	r0, r3
 80168f6:	4603      	mov	r3, r0
 80168f8:	005b      	lsls	r3, r3, #1
 80168fa:	4403      	add	r3, r0
 80168fc:	009b      	lsls	r3, r3, #2
 80168fe:	440b      	add	r3, r1
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	4618      	mov	r0, r3
 8016904:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801690c:	2b07      	cmp	r3, #7
 801690e:	d124      	bne.n	801695a <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016910:	2300      	movs	r3, #0
 8016912:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8016914:	4b3b      	ldr	r3, [pc, #236]	@ (8016a04 <RegionEU868TxConfig+0x19c>)
 8016916:	69dc      	ldr	r4, [r3, #28]
 8016918:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801691c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016920:	fb02 f303 	mul.w	r3, r2, r3
 8016924:	461a      	mov	r2, r3
 8016926:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801692a:	7ff8      	ldrb	r0, [r7, #31]
 801692c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8016930:	9308      	str	r3, [sp, #32]
 8016932:	2300      	movs	r3, #0
 8016934:	9307      	str	r3, [sp, #28]
 8016936:	2300      	movs	r3, #0
 8016938:	9306      	str	r3, [sp, #24]
 801693a:	2300      	movs	r3, #0
 801693c:	9305      	str	r3, [sp, #20]
 801693e:	2301      	movs	r3, #1
 8016940:	9304      	str	r3, [sp, #16]
 8016942:	2300      	movs	r3, #0
 8016944:	9303      	str	r3, [sp, #12]
 8016946:	2305      	movs	r3, #5
 8016948:	9302      	str	r3, [sp, #8]
 801694a:	2300      	movs	r3, #0
 801694c:	9301      	str	r3, [sp, #4]
 801694e:	9200      	str	r2, [sp, #0]
 8016950:	69bb      	ldr	r3, [r7, #24]
 8016952:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8016956:	47a0      	blx	r4
 8016958:	e01d      	b.n	8016996 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801695a:	2301      	movs	r3, #1
 801695c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801695e:	4b29      	ldr	r3, [pc, #164]	@ (8016a04 <RegionEU868TxConfig+0x19c>)
 8016960:	69dc      	ldr	r4, [r3, #28]
 8016962:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016966:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801696a:	7ff8      	ldrb	r0, [r7, #31]
 801696c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016970:	9208      	str	r2, [sp, #32]
 8016972:	2200      	movs	r2, #0
 8016974:	9207      	str	r2, [sp, #28]
 8016976:	2200      	movs	r2, #0
 8016978:	9206      	str	r2, [sp, #24]
 801697a:	2200      	movs	r2, #0
 801697c:	9205      	str	r2, [sp, #20]
 801697e:	2201      	movs	r2, #1
 8016980:	9204      	str	r2, [sp, #16]
 8016982:	2200      	movs	r2, #0
 8016984:	9203      	str	r2, [sp, #12]
 8016986:	2208      	movs	r2, #8
 8016988:	9202      	str	r2, [sp, #8]
 801698a:	2201      	movs	r2, #1
 801698c:	9201      	str	r2, [sp, #4]
 801698e:	9300      	str	r3, [sp, #0]
 8016990:	69bb      	ldr	r3, [r7, #24]
 8016992:	2200      	movs	r2, #0
 8016994:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016996:	4b19      	ldr	r3, [pc, #100]	@ (80169fc <RegionEU868TxConfig+0x194>)
 8016998:	681a      	ldr	r2, [r3, #0]
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	781b      	ldrb	r3, [r3, #0]
 801699e:	4619      	mov	r1, r3
 80169a0:	460b      	mov	r3, r1
 80169a2:	005b      	lsls	r3, r3, #1
 80169a4:	440b      	add	r3, r1
 80169a6:	009b      	lsls	r3, r3, #2
 80169a8:	4413      	add	r3, r2
 80169aa:	681a      	ldr	r2, [r3, #0]
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80169b2:	4619      	mov	r1, r3
 80169b4:	4610      	mov	r0, r2
 80169b6:	f7ff fa32 	bl	8015e1e <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	899b      	ldrh	r3, [r3, #12]
 80169c4:	4619      	mov	r1, r3
 80169c6:	4610      	mov	r0, r2
 80169c8:	f7ff faaa 	bl	8015f20 <GetTimeOnAir>
 80169cc:	4602      	mov	r2, r0
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80169d2:	4b0c      	ldr	r3, [pc, #48]	@ (8016a04 <RegionEU868TxConfig+0x19c>)
 80169d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80169d6:	68fa      	ldr	r2, [r7, #12]
 80169d8:	8992      	ldrh	r2, [r2, #12]
 80169da:	b2d1      	uxtb	r1, r2
 80169dc:	7ffa      	ldrb	r2, [r7, #31]
 80169de:	4610      	mov	r0, r2
 80169e0:	4798      	blx	r3

    *txPower = txPowerLimited;
 80169e2:	68bb      	ldr	r3, [r7, #8]
 80169e4:	7f7a      	ldrb	r2, [r7, #29]
 80169e6:	701a      	strb	r2, [r3, #0]
    return true;
 80169e8:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3724      	adds	r7, #36	@ 0x24
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd90      	pop	{r4, r7, pc}
 80169f2:	bf00      	nop
 80169f4:	0801c538 	.word	0x0801c538
 80169f8:	20001b30 	.word	0x20001b30
 80169fc:	20001b2c 	.word	0x20001b2c
 8016a00:	0801c540 	.word	0x0801c540
 8016a04:	0801c570 	.word	0x0801c570

08016a08 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016a08:	b590      	push	{r4, r7, lr}
 8016a0a:	b093      	sub	sp, #76	@ 0x4c
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	60f8      	str	r0, [r7, #12]
 8016a10:	60b9      	str	r1, [r7, #8]
 8016a12:	607a      	str	r2, [r7, #4]
 8016a14:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016a16:	2307      	movs	r3, #7
 8016a18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016a1c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016a20:	2200      	movs	r2, #0
 8016a22:	601a      	str	r2, [r3, #0]
 8016a24:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016a26:	2300      	movs	r3, #0
 8016a28:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8016a32:	2300      	movs	r3, #0
 8016a34:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016a36:	e085      	b.n	8016b44 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	685a      	ldr	r2, [r3, #4]
 8016a3c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8016a40:	4413      	add	r3, r2
 8016a42:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8016a46:	4611      	mov	r1, r2
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7fe fe61 	bl	8015710 <RegionCommonParseLinkAdrReq>
 8016a4e:	4603      	mov	r3, r0
 8016a50:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8016a54:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d07b      	beq.n	8016b54 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016a5c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016a60:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016a64:	4413      	add	r3, r2
 8016a66:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016a6a:	2307      	movs	r3, #7
 8016a6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016a70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016a74:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8016a76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d109      	bne.n	8016a92 <RegionEU868LinkAdrReq+0x8a>
 8016a7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d106      	bne.n	8016a92 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8016a84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016a88:	f023 0301 	bic.w	r3, r3, #1
 8016a8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016a90:	e058      	b.n	8016b44 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016a92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d003      	beq.n	8016aa2 <RegionEU868LinkAdrReq+0x9a>
 8016a9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016a9e:	2b05      	cmp	r3, #5
 8016aa0:	d903      	bls.n	8016aaa <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8016aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016aa6:	2b06      	cmp	r3, #6
 8016aa8:	d906      	bls.n	8016ab8 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016aae:	f023 0301 	bic.w	r3, r3, #1
 8016ab2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016ab6:	e045      	b.n	8016b44 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016ab8:	2300      	movs	r3, #0
 8016aba:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016abe:	e03d      	b.n	8016b3c <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016ac0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016ac4:	2b06      	cmp	r3, #6
 8016ac6:	d118      	bne.n	8016afa <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8016ac8:	4b5f      	ldr	r3, [pc, #380]	@ (8016c48 <RegionEU868LinkAdrReq+0x240>)
 8016aca:	6819      	ldr	r1, [r3, #0]
 8016acc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	005b      	lsls	r3, r3, #1
 8016ad4:	4413      	add	r3, r2
 8016ad6:	009b      	lsls	r3, r3, #2
 8016ad8:	440b      	add	r3, r1
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d028      	beq.n	8016b32 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8016ae0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016ae4:	2201      	movs	r2, #1
 8016ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8016aea:	b21a      	sxth	r2, r3
 8016aec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016aee:	b21b      	sxth	r3, r3
 8016af0:	4313      	orrs	r3, r2
 8016af2:	b21b      	sxth	r3, r3
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8016af8:	e01b      	b.n	8016b32 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016afa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016afc:	461a      	mov	r2, r3
 8016afe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016b02:	fa42 f303 	asr.w	r3, r2, r3
 8016b06:	f003 0301 	and.w	r3, r3, #1
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d011      	beq.n	8016b32 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8016b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8016c48 <RegionEU868LinkAdrReq+0x240>)
 8016b10:	6819      	ldr	r1, [r3, #0]
 8016b12:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016b16:	4613      	mov	r3, r2
 8016b18:	005b      	lsls	r3, r3, #1
 8016b1a:	4413      	add	r3, r2
 8016b1c:	009b      	lsls	r3, r3, #2
 8016b1e:	440b      	add	r3, r1
 8016b20:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d105      	bne.n	8016b32 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016b26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016b2a:	f023 0301 	bic.w	r3, r3, #1
 8016b2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016b32:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016b36:	3301      	adds	r3, #1
 8016b38:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016b3c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016b40:	2b0f      	cmp	r3, #15
 8016b42:	d9bd      	bls.n	8016ac0 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	7a1b      	ldrb	r3, [r3, #8]
 8016b48:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	f4ff af73 	bcc.w	8016a38 <RegionEU868LinkAdrReq+0x30>
 8016b52:	e000      	b.n	8016b56 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8016b54:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016b56:	2302      	movs	r3, #2
 8016b58:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	7a5b      	ldrb	r3, [r3, #9]
 8016b60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8016b64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7ff fa29 	bl	8015fc0 <RegionEU868GetPhyParam>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8016b72:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016b76:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	7a9b      	ldrb	r3, [r3, #10]
 8016b7c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016b7e:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8016b82:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016b84:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8016b88:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016b8a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016b8e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8016b96:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016b9e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	7b5b      	ldrb	r3, [r3, #13]
 8016ba4:	b25b      	sxtb	r3, r3
 8016ba6:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8016ba8:	2310      	movs	r3, #16
 8016baa:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016bac:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8016bb0:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bb4:	b25b      	sxtb	r3, r3
 8016bb6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016bba:	2307      	movs	r3, #7
 8016bbc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016bc0:	4b21      	ldr	r3, [pc, #132]	@ (8016c48 <RegionEU868LinkAdrReq+0x240>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016bc6:	2307      	movs	r3, #7
 8016bc8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016bd8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8016bdc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016be0:	1c9a      	adds	r2, r3, #2
 8016be2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016be6:	1c59      	adds	r1, r3, #1
 8016be8:	f107 0010 	add.w	r0, r7, #16
 8016bec:	4623      	mov	r3, r4
 8016bee:	f7fe fde1 	bl	80157b4 <RegionCommonLinkAdrReqVerifyParams>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016bf8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016bfc:	2b07      	cmp	r3, #7
 8016bfe:	d10d      	bne.n	8016c1c <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016c00:	4b11      	ldr	r3, [pc, #68]	@ (8016c48 <RegionEU868LinkAdrReq+0x240>)
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016c08:	220c      	movs	r2, #12
 8016c0a:	2100      	movs	r1, #0
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f000 fb35 	bl	801727c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8016c12:	4b0d      	ldr	r3, [pc, #52]	@ (8016c48 <RegionEU868LinkAdrReq+0x240>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016c18:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016c1c:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016c24:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016c2c:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016c34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016c36:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016c3a:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8016c3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8016c40:	4618      	mov	r0, r3
 8016c42:	374c      	adds	r7, #76	@ 0x4c
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd90      	pop	{r4, r7, pc}
 8016c48:	20001b2c 	.word	0x20001b2c

08016c4c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b084      	sub	sp, #16
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016c54:	2307      	movs	r3, #7
 8016c56:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	685b      	ldr	r3, [r3, #4]
 8016c60:	f107 020e 	add.w	r2, r7, #14
 8016c64:	4611      	mov	r1, r2
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7ff f8e4 	bl	8015e34 <VerifyRfFreq>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	f083 0301 	eor.w	r3, r3, #1
 8016c72:	b2db      	uxtb	r3, r3
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d003      	beq.n	8016c80 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8016c78:	7bfb      	ldrb	r3, [r7, #15]
 8016c7a:	f023 0301 	bic.w	r3, r3, #1
 8016c7e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f993 3000 	ldrsb.w	r3, [r3]
 8016c86:	2207      	movs	r2, #7
 8016c88:	2100      	movs	r1, #0
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7fe fba3 	bl	80153d6 <RegionCommonValueInRange>
 8016c90:	4603      	mov	r3, r0
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d103      	bne.n	8016c9e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8016c96:	7bfb      	ldrb	r3, [r7, #15]
 8016c98:	f023 0302 	bic.w	r3, r3, #2
 8016c9c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016ca4:	2205      	movs	r2, #5
 8016ca6:	2100      	movs	r1, #0
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7fe fb94 	bl	80153d6 <RegionCommonValueInRange>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d103      	bne.n	8016cbc <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016cb4:	7bfb      	ldrb	r3, [r7, #15]
 8016cb6:	f023 0304 	bic.w	r3, r3, #4
 8016cba:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8016cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3710      	adds	r7, #16
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}
	...

08016cc8 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b086      	sub	sp, #24
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016cd0:	2303      	movs	r3, #3
 8016cd2:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d114      	bne.n	8016d08 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016ce4:	b2db      	uxtb	r3, r3
 8016ce6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016ce8:	f107 0308 	add.w	r3, r7, #8
 8016cec:	4618      	mov	r0, r3
 8016cee:	f000 f9ff 	bl	80170f0 <RegionEU868ChannelsRemove>
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	f083 0301 	eor.w	r3, r3, #1
 8016cf8:	b2db      	uxtb	r3, r3
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d03b      	beq.n	8016d76 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016cfe:	7dfb      	ldrb	r3, [r7, #23]
 8016d00:	f023 0303 	bic.w	r3, r3, #3
 8016d04:	75fb      	strb	r3, [r7, #23]
 8016d06:	e036      	b.n	8016d76 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016d14:	b2db      	uxtb	r3, r3
 8016d16:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016d18:	f107 030c 	add.w	r3, r7, #12
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f000 f945 	bl	8016fac <RegionEU868ChannelAdd>
 8016d22:	4603      	mov	r3, r0
 8016d24:	2b06      	cmp	r3, #6
 8016d26:	d820      	bhi.n	8016d6a <RegionEU868NewChannelReq+0xa2>
 8016d28:	a201      	add	r2, pc, #4	@ (adr r2, 8016d30 <RegionEU868NewChannelReq+0x68>)
 8016d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d2e:	bf00      	nop
 8016d30:	08016d75 	.word	0x08016d75
 8016d34:	08016d6b 	.word	0x08016d6b
 8016d38:	08016d6b 	.word	0x08016d6b
 8016d3c:	08016d6b 	.word	0x08016d6b
 8016d40:	08016d4d 	.word	0x08016d4d
 8016d44:	08016d57 	.word	0x08016d57
 8016d48:	08016d61 	.word	0x08016d61
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016d4c:	7dfb      	ldrb	r3, [r7, #23]
 8016d4e:	f023 0301 	bic.w	r3, r3, #1
 8016d52:	75fb      	strb	r3, [r7, #23]
                break;
 8016d54:	e00f      	b.n	8016d76 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016d56:	7dfb      	ldrb	r3, [r7, #23]
 8016d58:	f023 0302 	bic.w	r3, r3, #2
 8016d5c:	75fb      	strb	r3, [r7, #23]
                break;
 8016d5e:	e00a      	b.n	8016d76 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016d60:	7dfb      	ldrb	r3, [r7, #23]
 8016d62:	f023 0303 	bic.w	r3, r3, #3
 8016d66:	75fb      	strb	r3, [r7, #23]
                break;
 8016d68:	e005      	b.n	8016d76 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8016d6a:	7dfb      	ldrb	r3, [r7, #23]
 8016d6c:	f023 0303 	bic.w	r3, r3, #3
 8016d70:	75fb      	strb	r3, [r7, #23]
                break;
 8016d72:	e000      	b.n	8016d76 <RegionEU868NewChannelReq+0xae>
                break;
 8016d74:	bf00      	nop
            }
        }
    }

    return status;
 8016d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	3718      	adds	r7, #24
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	bd80      	pop	{r7, pc}
 8016d82:	bf00      	nop

08016d84 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8016d84:	b480      	push	{r7}
 8016d86:	b083      	sub	sp, #12
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8016d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016d90:	4618      	mov	r0, r3
 8016d92:	370c      	adds	r7, #12
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bc80      	pop	{r7}
 8016d98:	4770      	bx	lr
	...

08016d9c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b084      	sub	sp, #16
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016da4:	2303      	movs	r3, #3
 8016da6:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016da8:	2300      	movs	r3, #0
 8016daa:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	781b      	ldrb	r3, [r3, #0]
 8016db0:	2b0f      	cmp	r3, #15
 8016db2:	d901      	bls.n	8016db8 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8016db4:	2300      	movs	r3, #0
 8016db6:	e035      	b.n	8016e24 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	685b      	ldr	r3, [r3, #4]
 8016dbc:	f107 020e 	add.w	r2, r7, #14
 8016dc0:	4611      	mov	r1, r2
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7ff f836 	bl	8015e34 <VerifyRfFreq>
 8016dc8:	4603      	mov	r3, r0
 8016dca:	f083 0301 	eor.w	r3, r3, #1
 8016dce:	b2db      	uxtb	r3, r3
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d003      	beq.n	8016ddc <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8016dd4:	7bfb      	ldrb	r3, [r7, #15]
 8016dd6:	f023 0301 	bic.w	r3, r3, #1
 8016dda:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016ddc:	4b13      	ldr	r3, [pc, #76]	@ (8016e2c <RegionEU868DlChannelReq+0x90>)
 8016dde:	681a      	ldr	r2, [r3, #0]
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	781b      	ldrb	r3, [r3, #0]
 8016de4:	4619      	mov	r1, r3
 8016de6:	460b      	mov	r3, r1
 8016de8:	005b      	lsls	r3, r3, #1
 8016dea:	440b      	add	r3, r1
 8016dec:	009b      	lsls	r3, r3, #2
 8016dee:	4413      	add	r3, r2
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d103      	bne.n	8016dfe <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8016df6:	7bfb      	ldrb	r3, [r7, #15]
 8016df8:	f023 0302 	bic.w	r3, r3, #2
 8016dfc:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016dfe:	7bfb      	ldrb	r3, [r7, #15]
 8016e00:	2b03      	cmp	r3, #3
 8016e02:	d10d      	bne.n	8016e20 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016e04:	4b09      	ldr	r3, [pc, #36]	@ (8016e2c <RegionEU868DlChannelReq+0x90>)
 8016e06:	6819      	ldr	r1, [r3, #0]
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	685a      	ldr	r2, [r3, #4]
 8016e12:	4603      	mov	r3, r0
 8016e14:	005b      	lsls	r3, r3, #1
 8016e16:	4403      	add	r3, r0
 8016e18:	009b      	lsls	r3, r3, #2
 8016e1a:	440b      	add	r3, r1
 8016e1c:	3304      	adds	r3, #4
 8016e1e:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3710      	adds	r7, #16
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}
 8016e2c:	20001b2c 	.word	0x20001b2c

08016e30 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016e30:	b480      	push	{r7}
 8016e32:	b083      	sub	sp, #12
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	4603      	mov	r3, r0
 8016e38:	460a      	mov	r2, r1
 8016e3a:	71fb      	strb	r3, [r7, #7]
 8016e3c:	4613      	mov	r3, r2
 8016e3e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016e44:	4618      	mov	r0, r3
 8016e46:	370c      	adds	r7, #12
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bc80      	pop	{r7}
 8016e4c:	4770      	bx	lr
	...

08016e50 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b09a      	sub	sp, #104	@ 0x68
 8016e54:	af02      	add	r7, sp, #8
 8016e56:	60f8      	str	r0, [r7, #12]
 8016e58:	60b9      	str	r1, [r7, #8]
 8016e5a:	607a      	str	r2, [r7, #4]
 8016e5c:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016e64:	2300      	movs	r3, #0
 8016e66:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8016e6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016e6e:	2200      	movs	r2, #0
 8016e70:	601a      	str	r2, [r3, #0]
 8016e72:	605a      	str	r2, [r3, #4]
 8016e74:	609a      	str	r2, [r3, #8]
 8016e76:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016e78:	230c      	movs	r3, #12
 8016e7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8016e7e:	2307      	movs	r3, #7
 8016e80:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016e82:	4b48      	ldr	r3, [pc, #288]	@ (8016fa4 <RegionEU868NextChannel+0x154>)
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016e8a:	2201      	movs	r2, #1
 8016e8c:	2100      	movs	r1, #0
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7fe faf2 	bl	8015478 <RegionCommonCountChannels>
 8016e94:	4603      	mov	r3, r0
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d10a      	bne.n	8016eb0 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016e9a:	4b42      	ldr	r3, [pc, #264]	@ (8016fa4 <RegionEU868NextChannel+0x154>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8016ea2:	4b40      	ldr	r3, [pc, #256]	@ (8016fa4 <RegionEU868NextChannel+0x154>)
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	f042 0207 	orr.w	r2, r2, #7
 8016eaa:	b292      	uxth	r2, r2
 8016eac:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	7a5b      	ldrb	r3, [r3, #9]
 8016eb4:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016ec0:	4b38      	ldr	r3, [pc, #224]	@ (8016fa4 <RegionEU868NextChannel+0x154>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016ec8:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016eca:	4b36      	ldr	r3, [pc, #216]	@ (8016fa4 <RegionEU868NextChannel+0x154>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 8016ed0:	4b35      	ldr	r3, [pc, #212]	@ (8016fa8 <RegionEU868NextChannel+0x158>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016ed6:	2310      	movs	r3, #16
 8016ed8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016eda:	f107 0312 	add.w	r3, r7, #18
 8016ede:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	7a9b      	ldrb	r3, [r3, #10]
 8016ef0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016ef4:	2306      	movs	r3, #6
 8016ef6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016efa:	68fa      	ldr	r2, [r7, #12]
 8016efc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016f00:	320c      	adds	r2, #12
 8016f02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f06:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	7d1b      	ldrb	r3, [r3, #20]
 8016f0e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	8adb      	ldrh	r3, [r3, #22]
 8016f1c:	4619      	mov	r1, r3
 8016f1e:	4610      	mov	r0, r2
 8016f20:	f7fe fffe 	bl	8015f20 <GetTimeOnAir>
 8016f24:	4603      	mov	r3, r0
 8016f26:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016f28:	f107 0314 	add.w	r3, r7, #20
 8016f2c:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016f2e:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8016f32:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8016f36:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	9301      	str	r3, [sp, #4]
 8016f3e:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8016f42:	9300      	str	r3, [sp, #0]
 8016f44:	460b      	mov	r3, r1
 8016f46:	6839      	ldr	r1, [r7, #0]
 8016f48:	f7fe fe89 	bl	8015c5e <RegionCommonIdentifyChannels>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d10e      	bne.n	8016f78 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016f5a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8016f5e:	3b01      	subs	r3, #1
 8016f60:	4619      	mov	r1, r3
 8016f62:	2000      	movs	r0, #0
 8016f64:	f000 f938 	bl	80171d8 <randr>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	3360      	adds	r3, #96	@ 0x60
 8016f6c:	443b      	add	r3, r7
 8016f6e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016f72:	68bb      	ldr	r3, [r7, #8]
 8016f74:	701a      	strb	r2, [r3, #0]
 8016f76:	e00e      	b.n	8016f96 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016f78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016f7c:	2b0c      	cmp	r3, #12
 8016f7e:	d10a      	bne.n	8016f96 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016f80:	4b08      	ldr	r3, [pc, #32]	@ (8016fa4 <RegionEU868NextChannel+0x154>)
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8016f88:	4b06      	ldr	r3, [pc, #24]	@ (8016fa4 <RegionEU868NextChannel+0x154>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	f042 0207 	orr.w	r2, r2, #7
 8016f90:	b292      	uxth	r2, r2
 8016f92:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8016f96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3760      	adds	r7, #96	@ 0x60
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}
 8016fa2:	bf00      	nop
 8016fa4:	20001b2c 	.word	0x20001b2c
 8016fa8:	20001b30 	.word	0x20001b30

08016fac <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b084      	sub	sp, #16
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016fb8:	2300      	movs	r3, #0
 8016fba:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	791b      	ldrb	r3, [r3, #4]
 8016fc4:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016fc6:	7b7b      	ldrb	r3, [r7, #13]
 8016fc8:	2b02      	cmp	r3, #2
 8016fca:	d801      	bhi.n	8016fd0 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016fcc:	2306      	movs	r3, #6
 8016fce:	e089      	b.n	80170e4 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016fd0:	7b7b      	ldrb	r3, [r7, #13]
 8016fd2:	2b0f      	cmp	r3, #15
 8016fd4:	d901      	bls.n	8016fda <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016fd6:	2303      	movs	r3, #3
 8016fd8:	e084      	b.n	80170e4 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	7a1b      	ldrb	r3, [r3, #8]
 8016fe0:	f343 0303 	sbfx	r3, r3, #0, #4
 8016fe4:	b25b      	sxtb	r3, r3
 8016fe6:	2207      	movs	r2, #7
 8016fe8:	2100      	movs	r1, #0
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7fe f9f3 	bl	80153d6 <RegionCommonValueInRange>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d101      	bne.n	8016ffa <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	7a1b      	ldrb	r3, [r3, #8]
 8017000:	f343 1303 	sbfx	r3, r3, #4, #4
 8017004:	b25b      	sxtb	r3, r3
 8017006:	2207      	movs	r2, #7
 8017008:	2100      	movs	r1, #0
 801700a:	4618      	mov	r0, r3
 801700c:	f7fe f9e3 	bl	80153d6 <RegionCommonValueInRange>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d101      	bne.n	801701a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8017016:	2301      	movs	r3, #1
 8017018:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	7a1b      	ldrb	r3, [r3, #8]
 8017020:	f343 0303 	sbfx	r3, r3, #0, #4
 8017024:	b25a      	sxtb	r2, r3
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	7a1b      	ldrb	r3, [r3, #8]
 801702c:	f343 1303 	sbfx	r3, r3, #4, #4
 8017030:	b25b      	sxtb	r3, r3
 8017032:	429a      	cmp	r2, r3
 8017034:	dd01      	ble.n	801703a <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8017036:	2301      	movs	r3, #1
 8017038:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801703a:	7bbb      	ldrb	r3, [r7, #14]
 801703c:	f083 0301 	eor.w	r3, r3, #1
 8017040:	b2db      	uxtb	r3, r3
 8017042:	2b00      	cmp	r3, #0
 8017044:	d010      	beq.n	8017068 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	f107 020c 	add.w	r2, r7, #12
 8017050:	4611      	mov	r1, r2
 8017052:	4618      	mov	r0, r3
 8017054:	f7fe feee 	bl	8015e34 <VerifyRfFreq>
 8017058:	4603      	mov	r3, r0
 801705a:	f083 0301 	eor.w	r3, r3, #1
 801705e:	b2db      	uxtb	r3, r3
 8017060:	2b00      	cmp	r3, #0
 8017062:	d001      	beq.n	8017068 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8017064:	2301      	movs	r3, #1
 8017066:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017068:	7bfb      	ldrb	r3, [r7, #15]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d004      	beq.n	8017078 <RegionEU868ChannelAdd+0xcc>
 801706e:	7bbb      	ldrb	r3, [r7, #14]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d001      	beq.n	8017078 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017074:	2306      	movs	r3, #6
 8017076:	e035      	b.n	80170e4 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8017078:	7bfb      	ldrb	r3, [r7, #15]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d001      	beq.n	8017082 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801707e:	2305      	movs	r3, #5
 8017080:	e030      	b.n	80170e4 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8017082:	7bbb      	ldrb	r3, [r7, #14]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d001      	beq.n	801708c <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017088:	2304      	movs	r3, #4
 801708a:	e02b      	b.n	80170e4 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801708c:	4b17      	ldr	r3, [pc, #92]	@ (80170ec <RegionEU868ChannelAdd+0x140>)
 801708e:	6819      	ldr	r1, [r3, #0]
 8017090:	7b7a      	ldrb	r2, [r7, #13]
 8017092:	4613      	mov	r3, r2
 8017094:	005b      	lsls	r3, r3, #1
 8017096:	4413      	add	r3, r2
 8017098:	009b      	lsls	r3, r3, #2
 801709a:	18c8      	adds	r0, r1, r3
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	220c      	movs	r2, #12
 80170a2:	4619      	mov	r1, r3
 80170a4:	f000 f8af 	bl	8017206 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80170a8:	4b10      	ldr	r3, [pc, #64]	@ (80170ec <RegionEU868ChannelAdd+0x140>)
 80170aa:	6819      	ldr	r1, [r3, #0]
 80170ac:	7b7a      	ldrb	r2, [r7, #13]
 80170ae:	7b38      	ldrb	r0, [r7, #12]
 80170b0:	4613      	mov	r3, r2
 80170b2:	005b      	lsls	r3, r3, #1
 80170b4:	4413      	add	r3, r2
 80170b6:	009b      	lsls	r3, r3, #2
 80170b8:	440b      	add	r3, r1
 80170ba:	3309      	adds	r3, #9
 80170bc:	4602      	mov	r2, r0
 80170be:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80170c0:	4b0a      	ldr	r3, [pc, #40]	@ (80170ec <RegionEU868ChannelAdd+0x140>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80170c8:	b21a      	sxth	r2, r3
 80170ca:	7b7b      	ldrb	r3, [r7, #13]
 80170cc:	2101      	movs	r1, #1
 80170ce:	fa01 f303 	lsl.w	r3, r1, r3
 80170d2:	b21b      	sxth	r3, r3
 80170d4:	4313      	orrs	r3, r2
 80170d6:	b21a      	sxth	r2, r3
 80170d8:	4b04      	ldr	r3, [pc, #16]	@ (80170ec <RegionEU868ChannelAdd+0x140>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	b292      	uxth	r2, r2
 80170de:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80170e2:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80170e4:	4618      	mov	r0, r3
 80170e6:	3710      	adds	r7, #16
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}
 80170ec:	20001b2c 	.word	0x20001b2c

080170f0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b086      	sub	sp, #24
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80170fe:	7dfb      	ldrb	r3, [r7, #23]
 8017100:	2b02      	cmp	r3, #2
 8017102:	d801      	bhi.n	8017108 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8017104:	2300      	movs	r3, #0
 8017106:	e016      	b.n	8017136 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017108:	4b0d      	ldr	r3, [pc, #52]	@ (8017140 <RegionEU868ChannelsRemove+0x50>)
 801710a:	6819      	ldr	r1, [r3, #0]
 801710c:	7dfa      	ldrb	r2, [r7, #23]
 801710e:	4613      	mov	r3, r2
 8017110:	005b      	lsls	r3, r3, #1
 8017112:	4413      	add	r3, r2
 8017114:	009b      	lsls	r3, r3, #2
 8017116:	440b      	add	r3, r1
 8017118:	461a      	mov	r2, r3
 801711a:	2300      	movs	r3, #0
 801711c:	6013      	str	r3, [r2, #0]
 801711e:	6053      	str	r3, [r2, #4]
 8017120:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8017122:	4b07      	ldr	r3, [pc, #28]	@ (8017140 <RegionEU868ChannelsRemove+0x50>)
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801712a:	7df9      	ldrb	r1, [r7, #23]
 801712c:	2210      	movs	r2, #16
 801712e:	4618      	mov	r0, r3
 8017130:	f7fe f96e 	bl	8015410 <RegionCommonChanDisable>
 8017134:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8017136:	4618      	mov	r0, r3
 8017138:	3718      	adds	r7, #24
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}
 801713e:	bf00      	nop
 8017140:	20001b2c 	.word	0x20001b2c

08017144 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017144:	b480      	push	{r7}
 8017146:	b085      	sub	sp, #20
 8017148:	af00      	add	r7, sp, #0
 801714a:	4603      	mov	r3, r0
 801714c:	71fb      	strb	r3, [r7, #7]
 801714e:	460b      	mov	r3, r1
 8017150:	71bb      	strb	r3, [r7, #6]
 8017152:	4613      	mov	r3, r2
 8017154:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8017156:	79ba      	ldrb	r2, [r7, #6]
 8017158:	797b      	ldrb	r3, [r7, #5]
 801715a:	1ad3      	subs	r3, r2, r3
 801715c:	b2db      	uxtb	r3, r3
 801715e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017164:	2b00      	cmp	r3, #0
 8017166:	da01      	bge.n	801716c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8017168:	2300      	movs	r3, #0
 801716a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801716c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801716e:	4618      	mov	r0, r3
 8017170:	3714      	adds	r7, #20
 8017172:	46bd      	mov	sp, r7
 8017174:	bc80      	pop	{r7}
 8017176:	4770      	bx	lr

08017178 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017178:	b480      	push	{r7}
 801717a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801717c:	4b0d      	ldr	r3, [pc, #52]	@ (80171b4 <rand1+0x3c>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	4a0d      	ldr	r2, [pc, #52]	@ (80171b8 <rand1+0x40>)
 8017182:	fb02 f303 	mul.w	r3, r2, r3
 8017186:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801718a:	3339      	adds	r3, #57	@ 0x39
 801718c:	4a09      	ldr	r2, [pc, #36]	@ (80171b4 <rand1+0x3c>)
 801718e:	6013      	str	r3, [r2, #0]
 8017190:	4b08      	ldr	r3, [pc, #32]	@ (80171b4 <rand1+0x3c>)
 8017192:	681a      	ldr	r2, [r3, #0]
 8017194:	2303      	movs	r3, #3
 8017196:	fba3 1302 	umull	r1, r3, r3, r2
 801719a:	1ad1      	subs	r1, r2, r3
 801719c:	0849      	lsrs	r1, r1, #1
 801719e:	440b      	add	r3, r1
 80171a0:	0f99      	lsrs	r1, r3, #30
 80171a2:	460b      	mov	r3, r1
 80171a4:	07db      	lsls	r3, r3, #31
 80171a6:	1a5b      	subs	r3, r3, r1
 80171a8:	1ad1      	subs	r1, r2, r3
 80171aa:	460b      	mov	r3, r1
}
 80171ac:	4618      	mov	r0, r3
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bc80      	pop	{r7}
 80171b2:	4770      	bx	lr
 80171b4:	20000100 	.word	0x20000100
 80171b8:	41c64e6d 	.word	0x41c64e6d

080171bc <srand1>:

void srand1( uint32_t seed )
{
 80171bc:	b480      	push	{r7}
 80171be:	b083      	sub	sp, #12
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
    next = seed;
 80171c4:	4a03      	ldr	r2, [pc, #12]	@ (80171d4 <srand1+0x18>)
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	6013      	str	r3, [r2, #0]
}
 80171ca:	bf00      	nop
 80171cc:	370c      	adds	r7, #12
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bc80      	pop	{r7}
 80171d2:	4770      	bx	lr
 80171d4:	20000100 	.word	0x20000100

080171d8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b082      	sub	sp, #8
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
 80171e0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80171e2:	f7ff ffc9 	bl	8017178 <rand1>
 80171e6:	4602      	mov	r2, r0
 80171e8:	6839      	ldr	r1, [r7, #0]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	1acb      	subs	r3, r1, r3
 80171ee:	3301      	adds	r3, #1
 80171f0:	fb92 f1f3 	sdiv	r1, r2, r3
 80171f4:	fb01 f303 	mul.w	r3, r1, r3
 80171f8:	1ad2      	subs	r2, r2, r3
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	4413      	add	r3, r2
}
 80171fe:	4618      	mov	r0, r3
 8017200:	3708      	adds	r7, #8
 8017202:	46bd      	mov	sp, r7
 8017204:	bd80      	pop	{r7, pc}

08017206 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017206:	b480      	push	{r7}
 8017208:	b085      	sub	sp, #20
 801720a:	af00      	add	r7, sp, #0
 801720c:	60f8      	str	r0, [r7, #12]
 801720e:	60b9      	str	r1, [r7, #8]
 8017210:	4613      	mov	r3, r2
 8017212:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8017214:	e007      	b.n	8017226 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8017216:	68ba      	ldr	r2, [r7, #8]
 8017218:	1c53      	adds	r3, r2, #1
 801721a:	60bb      	str	r3, [r7, #8]
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	1c59      	adds	r1, r3, #1
 8017220:	60f9      	str	r1, [r7, #12]
 8017222:	7812      	ldrb	r2, [r2, #0]
 8017224:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017226:	88fb      	ldrh	r3, [r7, #6]
 8017228:	1e5a      	subs	r2, r3, #1
 801722a:	80fa      	strh	r2, [r7, #6]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d1f2      	bne.n	8017216 <memcpy1+0x10>
    }
}
 8017230:	bf00      	nop
 8017232:	bf00      	nop
 8017234:	3714      	adds	r7, #20
 8017236:	46bd      	mov	sp, r7
 8017238:	bc80      	pop	{r7}
 801723a:	4770      	bx	lr

0801723c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801723c:	b480      	push	{r7}
 801723e:	b085      	sub	sp, #20
 8017240:	af00      	add	r7, sp, #0
 8017242:	60f8      	str	r0, [r7, #12]
 8017244:	60b9      	str	r1, [r7, #8]
 8017246:	4613      	mov	r3, r2
 8017248:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801724a:	88fb      	ldrh	r3, [r7, #6]
 801724c:	3b01      	subs	r3, #1
 801724e:	68fa      	ldr	r2, [r7, #12]
 8017250:	4413      	add	r3, r2
 8017252:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8017254:	e007      	b.n	8017266 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8017256:	68ba      	ldr	r2, [r7, #8]
 8017258:	1c53      	adds	r3, r2, #1
 801725a:	60bb      	str	r3, [r7, #8]
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	1e59      	subs	r1, r3, #1
 8017260:	60f9      	str	r1, [r7, #12]
 8017262:	7812      	ldrb	r2, [r2, #0]
 8017264:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017266:	88fb      	ldrh	r3, [r7, #6]
 8017268:	1e5a      	subs	r2, r3, #1
 801726a:	80fa      	strh	r2, [r7, #6]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d1f2      	bne.n	8017256 <memcpyr+0x1a>
    }
}
 8017270:	bf00      	nop
 8017272:	bf00      	nop
 8017274:	3714      	adds	r7, #20
 8017276:	46bd      	mov	sp, r7
 8017278:	bc80      	pop	{r7}
 801727a:	4770      	bx	lr

0801727c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801727c:	b480      	push	{r7}
 801727e:	b083      	sub	sp, #12
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
 8017284:	460b      	mov	r3, r1
 8017286:	70fb      	strb	r3, [r7, #3]
 8017288:	4613      	mov	r3, r2
 801728a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801728c:	e004      	b.n	8017298 <memset1+0x1c>
    {
        *dst++ = value;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	1c5a      	adds	r2, r3, #1
 8017292:	607a      	str	r2, [r7, #4]
 8017294:	78fa      	ldrb	r2, [r7, #3]
 8017296:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017298:	883b      	ldrh	r3, [r7, #0]
 801729a:	1e5a      	subs	r2, r3, #1
 801729c:	803a      	strh	r2, [r7, #0]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d1f5      	bne.n	801728e <memset1+0x12>
    }
}
 80172a2:	bf00      	nop
 80172a4:	bf00      	nop
 80172a6:	370c      	adds	r7, #12
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bc80      	pop	{r7}
 80172ac:	4770      	bx	lr
	...

080172b0 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80172b0:	b480      	push	{r7}
 80172b2:	b085      	sub	sp, #20
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
 80172b8:	460b      	mov	r3, r1
 80172ba:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80172bc:	f04f 33ff 	mov.w	r3, #4294967295
 80172c0:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d101      	bne.n	80172cc <Crc32+0x1c>
    {
        return 0;
 80172c8:	2300      	movs	r3, #0
 80172ca:	e026      	b.n	801731a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80172cc:	2300      	movs	r3, #0
 80172ce:	817b      	strh	r3, [r7, #10]
 80172d0:	e01d      	b.n	801730e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80172d2:	897b      	ldrh	r3, [r7, #10]
 80172d4:	687a      	ldr	r2, [r7, #4]
 80172d6:	4413      	add	r3, r2
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	461a      	mov	r2, r3
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	4053      	eors	r3, r2
 80172e0:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80172e2:	2300      	movs	r3, #0
 80172e4:	813b      	strh	r3, [r7, #8]
 80172e6:	e00c      	b.n	8017302 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	085a      	lsrs	r2, r3, #1
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	f003 0301 	and.w	r3, r3, #1
 80172f2:	425b      	negs	r3, r3
 80172f4:	490b      	ldr	r1, [pc, #44]	@ (8017324 <Crc32+0x74>)
 80172f6:	400b      	ands	r3, r1
 80172f8:	4053      	eors	r3, r2
 80172fa:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80172fc:	893b      	ldrh	r3, [r7, #8]
 80172fe:	3301      	adds	r3, #1
 8017300:	813b      	strh	r3, [r7, #8]
 8017302:	893b      	ldrh	r3, [r7, #8]
 8017304:	2b07      	cmp	r3, #7
 8017306:	d9ef      	bls.n	80172e8 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017308:	897b      	ldrh	r3, [r7, #10]
 801730a:	3301      	adds	r3, #1
 801730c:	817b      	strh	r3, [r7, #10]
 801730e:	897a      	ldrh	r2, [r7, #10]
 8017310:	887b      	ldrh	r3, [r7, #2]
 8017312:	429a      	cmp	r2, r3
 8017314:	d3dd      	bcc.n	80172d2 <Crc32+0x22>
        }
    }

    return ~crc;
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	43db      	mvns	r3, r3
}
 801731a:	4618      	mov	r0, r3
 801731c:	3714      	adds	r7, #20
 801731e:	46bd      	mov	sp, r7
 8017320:	bc80      	pop	{r7}
 8017322:	4770      	bx	lr
 8017324:	edb88320 	.word	0xedb88320

08017328 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b084      	sub	sp, #16
 801732c:	af02      	add	r7, sp, #8
 801732e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017330:	4a24      	ldr	r2, [pc, #144]	@ (80173c4 <RadioInit+0x9c>)
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8017336:	4b24      	ldr	r3, [pc, #144]	@ (80173c8 <RadioInit+0xa0>)
 8017338:	2200      	movs	r2, #0
 801733a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801733c:	4b22      	ldr	r3, [pc, #136]	@ (80173c8 <RadioInit+0xa0>)
 801733e:	2200      	movs	r2, #0
 8017340:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8017342:	4b21      	ldr	r3, [pc, #132]	@ (80173c8 <RadioInit+0xa0>)
 8017344:	2200      	movs	r2, #0
 8017346:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017348:	4b1f      	ldr	r3, [pc, #124]	@ (80173c8 <RadioInit+0xa0>)
 801734a:	2200      	movs	r2, #0
 801734c:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801734e:	481f      	ldr	r0, [pc, #124]	@ (80173cc <RadioInit+0xa4>)
 8017350:	f001 ff8c 	bl	801926c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017354:	4b1c      	ldr	r3, [pc, #112]	@ (80173c8 <RadioInit+0xa0>)
 8017356:	2200      	movs	r2, #0
 8017358:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801735a:	4b1b      	ldr	r3, [pc, #108]	@ (80173c8 <RadioInit+0xa0>)
 801735c:	2200      	movs	r2, #0
 801735e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017360:	f002 fa22 	bl	80197a8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017364:	2100      	movs	r1, #0
 8017366:	2000      	movs	r0, #0
 8017368:	f002 fdee 	bl	8019f48 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801736c:	2204      	movs	r2, #4
 801736e:	2100      	movs	r1, #0
 8017370:	2001      	movs	r0, #1
 8017372:	f002 fbb1 	bl	8019ad8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017376:	2300      	movs	r3, #0
 8017378:	2200      	movs	r2, #0
 801737a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801737e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017382:	f002 fae1 	bl	8019948 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8017386:	f000 fe91 	bl	80180ac <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801738a:	2300      	movs	r3, #0
 801738c:	9300      	str	r3, [sp, #0]
 801738e:	4b10      	ldr	r3, [pc, #64]	@ (80173d0 <RadioInit+0xa8>)
 8017390:	2200      	movs	r2, #0
 8017392:	f04f 31ff 	mov.w	r1, #4294967295
 8017396:	480f      	ldr	r0, [pc, #60]	@ (80173d4 <RadioInit+0xac>)
 8017398:	f003 ffaa 	bl	801b2f0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801739c:	2300      	movs	r3, #0
 801739e:	9300      	str	r3, [sp, #0]
 80173a0:	4b0d      	ldr	r3, [pc, #52]	@ (80173d8 <RadioInit+0xb0>)
 80173a2:	2200      	movs	r2, #0
 80173a4:	f04f 31ff 	mov.w	r1, #4294967295
 80173a8:	480c      	ldr	r0, [pc, #48]	@ (80173dc <RadioInit+0xb4>)
 80173aa:	f003 ffa1 	bl	801b2f0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80173ae:	4809      	ldr	r0, [pc, #36]	@ (80173d4 <RadioInit+0xac>)
 80173b0:	f004 f842 	bl	801b438 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80173b4:	4809      	ldr	r0, [pc, #36]	@ (80173dc <RadioInit+0xb4>)
 80173b6:	f004 f83f 	bl	801b438 <UTIL_TIMER_Stop>
}
 80173ba:	bf00      	nop
 80173bc:	3708      	adds	r7, #8
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}
 80173c2:	bf00      	nop
 80173c4:	20001c34 	.word	0x20001c34
 80173c8:	20001c38 	.word	0x20001c38
 80173cc:	080184a1 	.word	0x080184a1
 80173d0:	08018429 	.word	0x08018429
 80173d4:	20001c94 	.word	0x20001c94
 80173d8:	0801843d 	.word	0x0801843d
 80173dc:	20001cac 	.word	0x20001cac

080173e0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80173e4:	f001 ff8a 	bl	80192fc <SUBGRF_GetOperatingMode>
 80173e8:	4603      	mov	r3, r0
 80173ea:	2b07      	cmp	r3, #7
 80173ec:	d00a      	beq.n	8017404 <RadioGetStatus+0x24>
 80173ee:	2b07      	cmp	r3, #7
 80173f0:	dc0a      	bgt.n	8017408 <RadioGetStatus+0x28>
 80173f2:	2b04      	cmp	r3, #4
 80173f4:	d002      	beq.n	80173fc <RadioGetStatus+0x1c>
 80173f6:	2b05      	cmp	r3, #5
 80173f8:	d002      	beq.n	8017400 <RadioGetStatus+0x20>
 80173fa:	e005      	b.n	8017408 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80173fc:	2302      	movs	r3, #2
 80173fe:	e004      	b.n	801740a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017400:	2301      	movs	r3, #1
 8017402:	e002      	b.n	801740a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017404:	2303      	movs	r3, #3
 8017406:	e000      	b.n	801740a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017408:	2300      	movs	r3, #0
    }
}
 801740a:	4618      	mov	r0, r3
 801740c:	bd80      	pop	{r7, pc}
	...

08017410 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b082      	sub	sp, #8
 8017414:	af00      	add	r7, sp, #0
 8017416:	4603      	mov	r3, r0
 8017418:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801741a:	4a2a      	ldr	r2, [pc, #168]	@ (80174c4 <RadioSetModem+0xb4>)
 801741c:	79fb      	ldrb	r3, [r7, #7]
 801741e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017420:	79fb      	ldrb	r3, [r7, #7]
 8017422:	4618      	mov	r0, r3
 8017424:	f003 f97d 	bl	801a722 <RFW_SetRadioModem>
    switch( modem )
 8017428:	79fb      	ldrb	r3, [r7, #7]
 801742a:	2b05      	cmp	r3, #5
 801742c:	d80e      	bhi.n	801744c <RadioSetModem+0x3c>
 801742e:	a201      	add	r2, pc, #4	@ (adr r2, 8017434 <RadioSetModem+0x24>)
 8017430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017434:	0801745b 	.word	0x0801745b
 8017438:	08017469 	.word	0x08017469
 801743c:	0801744d 	.word	0x0801744d
 8017440:	0801748f 	.word	0x0801748f
 8017444:	0801749d 	.word	0x0801749d
 8017448:	080174ab 	.word	0x080174ab
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801744c:	2003      	movs	r0, #3
 801744e:	f002 fb1d 	bl	8019a8c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017452:	4b1c      	ldr	r3, [pc, #112]	@ (80174c4 <RadioSetModem+0xb4>)
 8017454:	2200      	movs	r2, #0
 8017456:	735a      	strb	r2, [r3, #13]
        break;
 8017458:	e02f      	b.n	80174ba <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801745a:	2000      	movs	r0, #0
 801745c:	f002 fb16 	bl	8019a8c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017460:	4b18      	ldr	r3, [pc, #96]	@ (80174c4 <RadioSetModem+0xb4>)
 8017462:	2200      	movs	r2, #0
 8017464:	735a      	strb	r2, [r3, #13]
        break;
 8017466:	e028      	b.n	80174ba <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017468:	2001      	movs	r0, #1
 801746a:	f002 fb0f 	bl	8019a8c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801746e:	4b15      	ldr	r3, [pc, #84]	@ (80174c4 <RadioSetModem+0xb4>)
 8017470:	7b5a      	ldrb	r2, [r3, #13]
 8017472:	4b14      	ldr	r3, [pc, #80]	@ (80174c4 <RadioSetModem+0xb4>)
 8017474:	7b1b      	ldrb	r3, [r3, #12]
 8017476:	429a      	cmp	r2, r3
 8017478:	d01e      	beq.n	80174b8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801747a:	4b12      	ldr	r3, [pc, #72]	@ (80174c4 <RadioSetModem+0xb4>)
 801747c:	7b1a      	ldrb	r2, [r3, #12]
 801747e:	4b11      	ldr	r3, [pc, #68]	@ (80174c4 <RadioSetModem+0xb4>)
 8017480:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017482:	4b10      	ldr	r3, [pc, #64]	@ (80174c4 <RadioSetModem+0xb4>)
 8017484:	7b5b      	ldrb	r3, [r3, #13]
 8017486:	4618      	mov	r0, r3
 8017488:	f000 ff98 	bl	80183bc <RadioSetPublicNetwork>
        }
        break;
 801748c:	e014      	b.n	80174b8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801748e:	2002      	movs	r0, #2
 8017490:	f002 fafc 	bl	8019a8c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017494:	4b0b      	ldr	r3, [pc, #44]	@ (80174c4 <RadioSetModem+0xb4>)
 8017496:	2200      	movs	r2, #0
 8017498:	735a      	strb	r2, [r3, #13]
        break;
 801749a:	e00e      	b.n	80174ba <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801749c:	2002      	movs	r0, #2
 801749e:	f002 faf5 	bl	8019a8c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80174a2:	4b08      	ldr	r3, [pc, #32]	@ (80174c4 <RadioSetModem+0xb4>)
 80174a4:	2200      	movs	r2, #0
 80174a6:	735a      	strb	r2, [r3, #13]
        break;
 80174a8:	e007      	b.n	80174ba <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80174aa:	2000      	movs	r0, #0
 80174ac:	f002 faee 	bl	8019a8c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80174b0:	4b04      	ldr	r3, [pc, #16]	@ (80174c4 <RadioSetModem+0xb4>)
 80174b2:	2200      	movs	r2, #0
 80174b4:	735a      	strb	r2, [r3, #13]
        break;
 80174b6:	e000      	b.n	80174ba <RadioSetModem+0xaa>
        break;
 80174b8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80174ba:	bf00      	nop
 80174bc:	3708      	adds	r7, #8
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}
 80174c2:	bf00      	nop
 80174c4:	20001c38 	.word	0x20001c38

080174c8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b082      	sub	sp, #8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f002 fa95 	bl	8019a00 <SUBGRF_SetRfFrequency>
}
 80174d6:	bf00      	nop
 80174d8:	3708      	adds	r7, #8
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}

080174de <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80174de:	b580      	push	{r7, lr}
 80174e0:	b090      	sub	sp, #64	@ 0x40
 80174e2:	af0a      	add	r7, sp, #40	@ 0x28
 80174e4:	60f8      	str	r0, [r7, #12]
 80174e6:	60b9      	str	r1, [r7, #8]
 80174e8:	603b      	str	r3, [r7, #0]
 80174ea:	4613      	mov	r3, r2
 80174ec:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80174ee:	2301      	movs	r3, #1
 80174f0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80174f2:	2300      	movs	r3, #0
 80174f4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80174f6:	2300      	movs	r3, #0
 80174f8:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80174fa:	f000 fdea 	bl	80180d2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80174fe:	2000      	movs	r0, #0
 8017500:	f7ff ff86 	bl	8017410 <RadioSetModem>

    RadioSetChannel( freq );
 8017504:	68f8      	ldr	r0, [r7, #12]
 8017506:	f7ff ffdf 	bl	80174c8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801750a:	2301      	movs	r3, #1
 801750c:	9309      	str	r3, [sp, #36]	@ 0x24
 801750e:	2300      	movs	r3, #0
 8017510:	9308      	str	r3, [sp, #32]
 8017512:	2300      	movs	r3, #0
 8017514:	9307      	str	r3, [sp, #28]
 8017516:	2300      	movs	r3, #0
 8017518:	9306      	str	r3, [sp, #24]
 801751a:	2300      	movs	r3, #0
 801751c:	9305      	str	r3, [sp, #20]
 801751e:	2300      	movs	r3, #0
 8017520:	9304      	str	r3, [sp, #16]
 8017522:	2300      	movs	r3, #0
 8017524:	9303      	str	r3, [sp, #12]
 8017526:	2300      	movs	r3, #0
 8017528:	9302      	str	r3, [sp, #8]
 801752a:	2303      	movs	r3, #3
 801752c:	9301      	str	r3, [sp, #4]
 801752e:	68bb      	ldr	r3, [r7, #8]
 8017530:	9300      	str	r3, [sp, #0]
 8017532:	2300      	movs	r3, #0
 8017534:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017538:	68b9      	ldr	r1, [r7, #8]
 801753a:	2000      	movs	r0, #0
 801753c:	f000 f83c 	bl	80175b8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017540:	2000      	movs	r0, #0
 8017542:	f000 fdcd 	bl	80180e0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017546:	f000 ff67 	bl	8018418 <RadioGetWakeupTime>
 801754a:	4603      	mov	r3, r0
 801754c:	4618      	mov	r0, r3
 801754e:	f7ea fe77 	bl	8002240 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017552:	f004 f88b 	bl	801b66c <UTIL_TIMER_GetCurrentTime>
 8017556:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017558:	e00d      	b.n	8017576 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801755a:	2000      	movs	r0, #0
 801755c:	f000 feae 	bl	80182bc <RadioRssi>
 8017560:	4603      	mov	r3, r0
 8017562:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017564:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801756c:	429a      	cmp	r2, r3
 801756e:	dd02      	ble.n	8017576 <RadioIsChannelFree+0x98>
        {
            status = false;
 8017570:	2300      	movs	r3, #0
 8017572:	75fb      	strb	r3, [r7, #23]
            break;
 8017574:	e006      	b.n	8017584 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017576:	6938      	ldr	r0, [r7, #16]
 8017578:	f004 f88a 	bl	801b690 <UTIL_TIMER_GetElapsedTime>
 801757c:	4602      	mov	r2, r0
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	4293      	cmp	r3, r2
 8017582:	d8ea      	bhi.n	801755a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8017584:	f000 fda5 	bl	80180d2 <RadioStandby>

    return status;
 8017588:	7dfb      	ldrb	r3, [r7, #23]
}
 801758a:	4618      	mov	r0, r3
 801758c:	3718      	adds	r7, #24
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017592:	b580      	push	{r7, lr}
 8017594:	b082      	sub	sp, #8
 8017596:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017598:	2300      	movs	r3, #0
 801759a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801759c:	2300      	movs	r3, #0
 801759e:	2200      	movs	r2, #0
 80175a0:	2100      	movs	r1, #0
 80175a2:	2000      	movs	r0, #0
 80175a4:	f002 f9d0 	bl	8019948 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80175a8:	f001 ff79 	bl	801949e <SUBGRF_GetRandom>
 80175ac:	6078      	str	r0, [r7, #4]

    return rnd;
 80175ae:	687b      	ldr	r3, [r7, #4]
}
 80175b0:	4618      	mov	r0, r3
 80175b2:	3708      	adds	r7, #8
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b08a      	sub	sp, #40	@ 0x28
 80175bc:	af00      	add	r7, sp, #0
 80175be:	60b9      	str	r1, [r7, #8]
 80175c0:	607a      	str	r2, [r7, #4]
 80175c2:	461a      	mov	r2, r3
 80175c4:	4603      	mov	r3, r0
 80175c6:	73fb      	strb	r3, [r7, #15]
 80175c8:	4613      	mov	r3, r2
 80175ca:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80175cc:	4ab9      	ldr	r2, [pc, #740]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80175ce:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80175d2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80175d4:	f003 f863 	bl	801a69e <RFW_DeInit>
    if( rxContinuous == true )
 80175d8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d001      	beq.n	80175e4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80175e0:	2300      	movs	r3, #0
 80175e2:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 80175e4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d004      	beq.n	80175f6 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80175ec:	4ab2      	ldr	r2, [pc, #712]	@ (80178b8 <RadioSetRxConfig+0x300>)
 80175ee:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80175f2:	7013      	strb	r3, [r2, #0]
 80175f4:	e002      	b.n	80175fc <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80175f6:	4bb0      	ldr	r3, [pc, #704]	@ (80178b8 <RadioSetRxConfig+0x300>)
 80175f8:	22ff      	movs	r2, #255	@ 0xff
 80175fa:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80175fc:	7bfb      	ldrb	r3, [r7, #15]
 80175fe:	2b05      	cmp	r3, #5
 8017600:	d009      	beq.n	8017616 <RadioSetRxConfig+0x5e>
 8017602:	2b05      	cmp	r3, #5
 8017604:	f300 81d7 	bgt.w	80179b6 <RadioSetRxConfig+0x3fe>
 8017608:	2b00      	cmp	r3, #0
 801760a:	f000 80bf 	beq.w	801778c <RadioSetRxConfig+0x1d4>
 801760e:	2b01      	cmp	r3, #1
 8017610:	f000 8124 	beq.w	801785c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017614:	e1cf      	b.n	80179b6 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017616:	2001      	movs	r0, #1
 8017618:	f002 f888 	bl	801972c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801761c:	4ba5      	ldr	r3, [pc, #660]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 801761e:	2200      	movs	r2, #0
 8017620:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017624:	4aa3      	ldr	r2, [pc, #652]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801762a:	4ba2      	ldr	r3, [pc, #648]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 801762c:	2209      	movs	r2, #9
 801762e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017632:	4ba0      	ldr	r3, [pc, #640]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017634:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017638:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801763a:	68b8      	ldr	r0, [r7, #8]
 801763c:	f002 ff62 	bl	801a504 <SUBGRF_GetFskBandwidthRegValue>
 8017640:	4603      	mov	r3, r0
 8017642:	461a      	mov	r2, r3
 8017644:	4b9b      	ldr	r3, [pc, #620]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801764a:	4b9a      	ldr	r3, [pc, #616]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 801764c:	2200      	movs	r2, #0
 801764e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017650:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017652:	00db      	lsls	r3, r3, #3
 8017654:	b29a      	uxth	r2, r3
 8017656:	4b97      	ldr	r3, [pc, #604]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017658:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801765a:	4b96      	ldr	r3, [pc, #600]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 801765c:	2200      	movs	r2, #0
 801765e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017660:	4b94      	ldr	r3, [pc, #592]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017662:	2210      	movs	r2, #16
 8017664:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017666:	4b93      	ldr	r3, [pc, #588]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017668:	2200      	movs	r2, #0
 801766a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801766c:	4b91      	ldr	r3, [pc, #580]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 801766e:	2200      	movs	r2, #0
 8017670:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017672:	4b91      	ldr	r3, [pc, #580]	@ (80178b8 <RadioSetRxConfig+0x300>)
 8017674:	781a      	ldrb	r2, [r3, #0]
 8017676:	4b8f      	ldr	r3, [pc, #572]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017678:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801767a:	4b8e      	ldr	r3, [pc, #568]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 801767c:	2201      	movs	r2, #1
 801767e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017680:	4b8c      	ldr	r3, [pc, #560]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017682:	2200      	movs	r2, #0
 8017684:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8017686:	2005      	movs	r0, #5
 8017688:	f7ff fec2 	bl	8017410 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801768c:	488b      	ldr	r0, [pc, #556]	@ (80178bc <RadioSetRxConfig+0x304>)
 801768e:	f002 faf1 	bl	8019c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017692:	488b      	ldr	r0, [pc, #556]	@ (80178c0 <RadioSetRxConfig+0x308>)
 8017694:	f002 fbbc 	bl	8019e10 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017698:	4a8a      	ldr	r2, [pc, #552]	@ (80178c4 <RadioSetRxConfig+0x30c>)
 801769a:	f107 031c 	add.w	r3, r7, #28
 801769e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80176a6:	f107 031c 	add.w	r3, r7, #28
 80176aa:	4618      	mov	r0, r3
 80176ac:	f001 fe75 	bl	801939a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80176b0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80176b4:	f001 fec0 	bl	8019438 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80176b8:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80176bc:	f000 fe1c 	bl	80182f8 <RadioRead>
 80176c0:	4603      	mov	r3, r0
 80176c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80176c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80176ca:	f023 0310 	bic.w	r3, r3, #16
 80176ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80176d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80176d6:	4619      	mov	r1, r3
 80176d8:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80176dc:	f000 fdfa 	bl	80182d4 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80176e0:	2104      	movs	r1, #4
 80176e2:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80176e6:	f000 fdf5 	bl	80182d4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80176ea:	f640 009b 	movw	r0, #2203	@ 0x89b
 80176ee:	f000 fe03 	bl	80182f8 <RadioRead>
 80176f2:	4603      	mov	r3, r0
 80176f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80176f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80176fc:	f023 031c 	bic.w	r3, r3, #28
 8017700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017708:	f043 0308 	orr.w	r3, r3, #8
 801770c:	b2db      	uxtb	r3, r3
 801770e:	4619      	mov	r1, r3
 8017710:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017714:	f000 fdde 	bl	80182d4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017718:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801771c:	f000 fdec 	bl	80182f8 <RadioRead>
 8017720:	4603      	mov	r3, r0
 8017722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801772a:	f023 0318 	bic.w	r3, r3, #24
 801772e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8017732:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017736:	f043 0318 	orr.w	r3, r3, #24
 801773a:	b2db      	uxtb	r3, r3
 801773c:	4619      	mov	r1, r3
 801773e:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017742:	f000 fdc7 	bl	80182d4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017746:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801774a:	f000 fdd5 	bl	80182f8 <RadioRead>
 801774e:	4603      	mov	r3, r0
 8017750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801775c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017764:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8017768:	b2db      	uxtb	r3, r3
 801776a:	4619      	mov	r1, r3
 801776c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017770:	f000 fdb0 	bl	80182d4 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017774:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017776:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801777a:	fb02 f303 	mul.w	r3, r2, r3
 801777e:	461a      	mov	r2, r3
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	fbb2 f3f3 	udiv	r3, r2, r3
 8017786:	4a4b      	ldr	r2, [pc, #300]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017788:	6093      	str	r3, [r2, #8]
            break;
 801778a:	e115      	b.n	80179b8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801778c:	2000      	movs	r0, #0
 801778e:	f001 ffcd 	bl	801972c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017792:	4b48      	ldr	r3, [pc, #288]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017794:	2200      	movs	r2, #0
 8017796:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801779a:	4a46      	ldr	r2, [pc, #280]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80177a0:	4b44      	ldr	r3, [pc, #272]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177a2:	220b      	movs	r2, #11
 80177a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80177a8:	68b8      	ldr	r0, [r7, #8]
 80177aa:	f002 feab 	bl	801a504 <SUBGRF_GetFskBandwidthRegValue>
 80177ae:	4603      	mov	r3, r0
 80177b0:	461a      	mov	r2, r3
 80177b2:	4b40      	ldr	r3, [pc, #256]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80177b8:	4b3e      	ldr	r3, [pc, #248]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177ba:	2200      	movs	r2, #0
 80177bc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80177be:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80177c0:	00db      	lsls	r3, r3, #3
 80177c2:	b29a      	uxth	r2, r3
 80177c4:	4b3b      	ldr	r3, [pc, #236]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177c6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80177c8:	4b3a      	ldr	r3, [pc, #232]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177ca:	2204      	movs	r2, #4
 80177cc:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80177ce:	4b39      	ldr	r3, [pc, #228]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177d0:	2218      	movs	r2, #24
 80177d2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80177d4:	4b37      	ldr	r3, [pc, #220]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177d6:	2200      	movs	r2, #0
 80177d8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80177da:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80177de:	f083 0301 	eor.w	r3, r3, #1
 80177e2:	b2db      	uxtb	r3, r3
 80177e4:	461a      	mov	r2, r3
 80177e6:	4b33      	ldr	r3, [pc, #204]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177e8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80177ea:	4b33      	ldr	r3, [pc, #204]	@ (80178b8 <RadioSetRxConfig+0x300>)
 80177ec:	781a      	ldrb	r2, [r3, #0]
 80177ee:	4b31      	ldr	r3, [pc, #196]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177f0:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80177f2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d003      	beq.n	8017802 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80177fa:	4b2e      	ldr	r3, [pc, #184]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80177fc:	22f2      	movs	r2, #242	@ 0xf2
 80177fe:	75da      	strb	r2, [r3, #23]
 8017800:	e002      	b.n	8017808 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017802:	4b2c      	ldr	r3, [pc, #176]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017804:	2201      	movs	r2, #1
 8017806:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017808:	4b2a      	ldr	r3, [pc, #168]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 801780a:	2201      	movs	r2, #1
 801780c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801780e:	f000 fc60 	bl	80180d2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017812:	2000      	movs	r0, #0
 8017814:	f7ff fdfc 	bl	8017410 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017818:	4828      	ldr	r0, [pc, #160]	@ (80178bc <RadioSetRxConfig+0x304>)
 801781a:	f002 fa2b 	bl	8019c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801781e:	4828      	ldr	r0, [pc, #160]	@ (80178c0 <RadioSetRxConfig+0x308>)
 8017820:	f002 faf6 	bl	8019e10 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017824:	4a28      	ldr	r2, [pc, #160]	@ (80178c8 <RadioSetRxConfig+0x310>)
 8017826:	f107 0314 	add.w	r3, r7, #20
 801782a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801782e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017832:	f107 0314 	add.w	r3, r7, #20
 8017836:	4618      	mov	r0, r3
 8017838:	f001 fdaf 	bl	801939a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801783c:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017840:	f001 fdfa 	bl	8019438 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017844:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017846:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801784a:	fb02 f303 	mul.w	r3, r2, r3
 801784e:	461a      	mov	r2, r3
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	fbb2 f3f3 	udiv	r3, r2, r3
 8017856:	4a17      	ldr	r2, [pc, #92]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017858:	6093      	str	r3, [r2, #8]
            break;
 801785a:	e0ad      	b.n	80179b8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801785c:	2000      	movs	r0, #0
 801785e:	f001 ff65 	bl	801972c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017862:	4b14      	ldr	r3, [pc, #80]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017864:	2201      	movs	r2, #1
 8017866:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	b2da      	uxtb	r2, r3
 801786e:	4b11      	ldr	r3, [pc, #68]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017874:	4a15      	ldr	r2, [pc, #84]	@ (80178cc <RadioSetRxConfig+0x314>)
 8017876:	68bb      	ldr	r3, [r7, #8]
 8017878:	4413      	add	r3, r2
 801787a:	781a      	ldrb	r2, [r3, #0]
 801787c:	4b0d      	ldr	r3, [pc, #52]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 801787e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8017882:	4a0c      	ldr	r2, [pc, #48]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 8017884:	7bbb      	ldrb	r3, [r7, #14]
 8017886:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801788a:	68bb      	ldr	r3, [r7, #8]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d105      	bne.n	801789c <RadioSetRxConfig+0x2e4>
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	2b0b      	cmp	r3, #11
 8017894:	d008      	beq.n	80178a8 <RadioSetRxConfig+0x2f0>
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	2b0c      	cmp	r3, #12
 801789a:	d005      	beq.n	80178a8 <RadioSetRxConfig+0x2f0>
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	2b01      	cmp	r3, #1
 80178a0:	d116      	bne.n	80178d0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2b0c      	cmp	r3, #12
 80178a6:	d113      	bne.n	80178d0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80178a8:	4b02      	ldr	r3, [pc, #8]	@ (80178b4 <RadioSetRxConfig+0x2fc>)
 80178aa:	2201      	movs	r2, #1
 80178ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80178b0:	e012      	b.n	80178d8 <RadioSetRxConfig+0x320>
 80178b2:	bf00      	nop
 80178b4:	20001c38 	.word	0x20001c38
 80178b8:	20000104 	.word	0x20000104
 80178bc:	20001c70 	.word	0x20001c70
 80178c0:	20001c46 	.word	0x20001c46
 80178c4:	0801c00c 	.word	0x0801c00c
 80178c8:	0801c014 	.word	0x0801c014
 80178cc:	0801c5fc 	.word	0x0801c5fc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80178d0:	4b3b      	ldr	r3, [pc, #236]	@ (80179c0 <RadioSetRxConfig+0x408>)
 80178d2:	2200      	movs	r2, #0
 80178d4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80178d8:	4b39      	ldr	r3, [pc, #228]	@ (80179c0 <RadioSetRxConfig+0x408>)
 80178da:	2201      	movs	r2, #1
 80178dc:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80178de:	4b38      	ldr	r3, [pc, #224]	@ (80179c0 <RadioSetRxConfig+0x408>)
 80178e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80178e4:	2b05      	cmp	r3, #5
 80178e6:	d004      	beq.n	80178f2 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80178e8:	4b35      	ldr	r3, [pc, #212]	@ (80179c0 <RadioSetRxConfig+0x408>)
 80178ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80178ee:	2b06      	cmp	r3, #6
 80178f0:	d10a      	bne.n	8017908 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80178f2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80178f4:	2b0b      	cmp	r3, #11
 80178f6:	d803      	bhi.n	8017900 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80178f8:	4b31      	ldr	r3, [pc, #196]	@ (80179c0 <RadioSetRxConfig+0x408>)
 80178fa:	220c      	movs	r2, #12
 80178fc:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80178fe:	e006      	b.n	801790e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017900:	4a2f      	ldr	r2, [pc, #188]	@ (80179c0 <RadioSetRxConfig+0x408>)
 8017902:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017904:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017906:	e002      	b.n	801790e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017908:	4a2d      	ldr	r2, [pc, #180]	@ (80179c0 <RadioSetRxConfig+0x408>)
 801790a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801790c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801790e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017912:	4b2b      	ldr	r3, [pc, #172]	@ (80179c0 <RadioSetRxConfig+0x408>)
 8017914:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017916:	4b2b      	ldr	r3, [pc, #172]	@ (80179c4 <RadioSetRxConfig+0x40c>)
 8017918:	781a      	ldrb	r2, [r3, #0]
 801791a:	4b29      	ldr	r3, [pc, #164]	@ (80179c0 <RadioSetRxConfig+0x408>)
 801791c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801791e:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8017922:	4b27      	ldr	r3, [pc, #156]	@ (80179c0 <RadioSetRxConfig+0x408>)
 8017924:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017928:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 801792c:	4b24      	ldr	r3, [pc, #144]	@ (80179c0 <RadioSetRxConfig+0x408>)
 801792e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017932:	f000 fbce 	bl	80180d2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017936:	2001      	movs	r0, #1
 8017938:	f7ff fd6a 	bl	8017410 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801793c:	4822      	ldr	r0, [pc, #136]	@ (80179c8 <RadioSetRxConfig+0x410>)
 801793e:	f002 f999 	bl	8019c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017942:	4822      	ldr	r0, [pc, #136]	@ (80179cc <RadioSetRxConfig+0x414>)
 8017944:	f002 fa64 	bl	8019e10 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017948:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801794a:	b2db      	uxtb	r3, r3
 801794c:	4618      	mov	r0, r3
 801794e:	f001 fefc 	bl	801974a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8017952:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017956:	f002 fbc3 	bl	801a0e0 <SUBGRF_ReadRegister>
 801795a:	4603      	mov	r3, r0
 801795c:	f003 0301 	and.w	r3, r3, #1
 8017960:	b2db      	uxtb	r3, r3
 8017962:	4619      	mov	r1, r3
 8017964:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017968:	f002 fb98 	bl	801a09c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801796c:	4b14      	ldr	r3, [pc, #80]	@ (80179c0 <RadioSetRxConfig+0x408>)
 801796e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017972:	2b01      	cmp	r3, #1
 8017974:	d10d      	bne.n	8017992 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017976:	f240 7036 	movw	r0, #1846	@ 0x736
 801797a:	f002 fbb1 	bl	801a0e0 <SUBGRF_ReadRegister>
 801797e:	4603      	mov	r3, r0
 8017980:	f023 0304 	bic.w	r3, r3, #4
 8017984:	b2db      	uxtb	r3, r3
 8017986:	4619      	mov	r1, r3
 8017988:	f240 7036 	movw	r0, #1846	@ 0x736
 801798c:	f002 fb86 	bl	801a09c <SUBGRF_WriteRegister>
 8017990:	e00c      	b.n	80179ac <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017992:	f240 7036 	movw	r0, #1846	@ 0x736
 8017996:	f002 fba3 	bl	801a0e0 <SUBGRF_ReadRegister>
 801799a:	4603      	mov	r3, r0
 801799c:	f043 0304 	orr.w	r3, r3, #4
 80179a0:	b2db      	uxtb	r3, r3
 80179a2:	4619      	mov	r1, r3
 80179a4:	f240 7036 	movw	r0, #1846	@ 0x736
 80179a8:	f002 fb78 	bl	801a09c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80179ac:	4b04      	ldr	r3, [pc, #16]	@ (80179c0 <RadioSetRxConfig+0x408>)
 80179ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179b2:	609a      	str	r2, [r3, #8]
            break;
 80179b4:	e000      	b.n	80179b8 <RadioSetRxConfig+0x400>
            break;
 80179b6:	bf00      	nop
    }
}
 80179b8:	bf00      	nop
 80179ba:	3728      	adds	r7, #40	@ 0x28
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd80      	pop	{r7, pc}
 80179c0:	20001c38 	.word	0x20001c38
 80179c4:	20000104 	.word	0x20000104
 80179c8:	20001c70 	.word	0x20001c70
 80179cc:	20001c46 	.word	0x20001c46

080179d0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b086      	sub	sp, #24
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	60ba      	str	r2, [r7, #8]
 80179d8:	607b      	str	r3, [r7, #4]
 80179da:	4603      	mov	r3, r0
 80179dc:	73fb      	strb	r3, [r7, #15]
 80179de:	460b      	mov	r3, r1
 80179e0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80179e2:	f002 fe5c 	bl	801a69e <RFW_DeInit>
    switch( modem )
 80179e6:	7bfb      	ldrb	r3, [r7, #15]
 80179e8:	2b04      	cmp	r3, #4
 80179ea:	f000 80c7 	beq.w	8017b7c <RadioSetTxConfig+0x1ac>
 80179ee:	2b04      	cmp	r3, #4
 80179f0:	f300 80d6 	bgt.w	8017ba0 <RadioSetTxConfig+0x1d0>
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d002      	beq.n	80179fe <RadioSetTxConfig+0x2e>
 80179f8:	2b01      	cmp	r3, #1
 80179fa:	d059      	beq.n	8017ab0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80179fc:	e0d0      	b.n	8017ba0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80179fe:	4b77      	ldr	r3, [pc, #476]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a00:	2200      	movs	r2, #0
 8017a02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017a06:	4a75      	ldr	r2, [pc, #468]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a08:	6a3b      	ldr	r3, [r7, #32]
 8017a0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017a0c:	4b73      	ldr	r3, [pc, #460]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a0e:	220b      	movs	r2, #11
 8017a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	f002 fd75 	bl	801a504 <SUBGRF_GetFskBandwidthRegValue>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	461a      	mov	r2, r3
 8017a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017a24:	4a6d      	ldr	r2, [pc, #436]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a26:	68bb      	ldr	r3, [r7, #8]
 8017a28:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017a2a:	4b6c      	ldr	r3, [pc, #432]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017a30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017a32:	00db      	lsls	r3, r3, #3
 8017a34:	b29a      	uxth	r2, r3
 8017a36:	4b69      	ldr	r3, [pc, #420]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a38:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017a3a:	4b68      	ldr	r3, [pc, #416]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a3c:	2204      	movs	r2, #4
 8017a3e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017a40:	4b66      	ldr	r3, [pc, #408]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a42:	2218      	movs	r2, #24
 8017a44:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017a46:	4b65      	ldr	r3, [pc, #404]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a48:	2200      	movs	r2, #0
 8017a4a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017a4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017a50:	f083 0301 	eor.w	r3, r3, #1
 8017a54:	b2db      	uxtb	r3, r3
 8017a56:	461a      	mov	r2, r3
 8017a58:	4b60      	ldr	r3, [pc, #384]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a5a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017a5c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d003      	beq.n	8017a6c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017a64:	4b5d      	ldr	r3, [pc, #372]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a66:	22f2      	movs	r2, #242	@ 0xf2
 8017a68:	75da      	strb	r2, [r3, #23]
 8017a6a:	e002      	b.n	8017a72 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a6e:	2201      	movs	r2, #1
 8017a70:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017a72:	4b5a      	ldr	r3, [pc, #360]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017a74:	2201      	movs	r2, #1
 8017a76:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017a78:	f000 fb2b 	bl	80180d2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017a7c:	2000      	movs	r0, #0
 8017a7e:	f7ff fcc7 	bl	8017410 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017a82:	4857      	ldr	r0, [pc, #348]	@ (8017be0 <RadioSetTxConfig+0x210>)
 8017a84:	f002 f8f6 	bl	8019c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017a88:	4856      	ldr	r0, [pc, #344]	@ (8017be4 <RadioSetTxConfig+0x214>)
 8017a8a:	f002 f9c1 	bl	8019e10 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017a8e:	4a56      	ldr	r2, [pc, #344]	@ (8017be8 <RadioSetTxConfig+0x218>)
 8017a90:	f107 0310 	add.w	r3, r7, #16
 8017a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017a98:	e883 0003 	stmia.w	r3, {r0, r1}
 8017a9c:	f107 0310 	add.w	r3, r7, #16
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f001 fc7a 	bl	801939a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017aa6:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017aaa:	f001 fcc5 	bl	8019438 <SUBGRF_SetWhiteningSeed>
            break;
 8017aae:	e078      	b.n	8017ba2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017ab2:	2201      	movs	r2, #1
 8017ab4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017ab8:	6a3b      	ldr	r3, [r7, #32]
 8017aba:	b2da      	uxtb	r2, r3
 8017abc:	4b47      	ldr	r3, [pc, #284]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8017bec <RadioSetTxConfig+0x21c>)
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	4413      	add	r3, r2
 8017ac8:	781a      	ldrb	r2, [r3, #0]
 8017aca:	4b44      	ldr	r3, [pc, #272]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017ad0:	4a42      	ldr	r2, [pc, #264]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017ad2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017ad6:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d105      	bne.n	8017aec <RadioSetTxConfig+0x11c>
 8017ae0:	6a3b      	ldr	r3, [r7, #32]
 8017ae2:	2b0b      	cmp	r3, #11
 8017ae4:	d008      	beq.n	8017af8 <RadioSetTxConfig+0x128>
 8017ae6:	6a3b      	ldr	r3, [r7, #32]
 8017ae8:	2b0c      	cmp	r3, #12
 8017aea:	d005      	beq.n	8017af8 <RadioSetTxConfig+0x128>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	2b01      	cmp	r3, #1
 8017af0:	d107      	bne.n	8017b02 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017af2:	6a3b      	ldr	r3, [r7, #32]
 8017af4:	2b0c      	cmp	r3, #12
 8017af6:	d104      	bne.n	8017b02 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017af8:	4b38      	ldr	r3, [pc, #224]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017afa:	2201      	movs	r2, #1
 8017afc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017b00:	e003      	b.n	8017b0a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017b02:	4b36      	ldr	r3, [pc, #216]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b04:	2200      	movs	r2, #0
 8017b06:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017b0a:	4b34      	ldr	r3, [pc, #208]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b0c:	2201      	movs	r2, #1
 8017b0e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017b10:	4b32      	ldr	r3, [pc, #200]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017b16:	2b05      	cmp	r3, #5
 8017b18:	d004      	beq.n	8017b24 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017b1a:	4b30      	ldr	r3, [pc, #192]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017b20:	2b06      	cmp	r3, #6
 8017b22:	d10a      	bne.n	8017b3a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017b24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017b26:	2b0b      	cmp	r3, #11
 8017b28:	d803      	bhi.n	8017b32 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b2c:	220c      	movs	r2, #12
 8017b2e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017b30:	e006      	b.n	8017b40 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017b32:	4a2a      	ldr	r2, [pc, #168]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017b36:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017b38:	e002      	b.n	8017b40 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017b3a:	4a28      	ldr	r2, [pc, #160]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017b3e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017b40:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017b44:	4b25      	ldr	r3, [pc, #148]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b46:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017b48:	4b29      	ldr	r3, [pc, #164]	@ (8017bf0 <RadioSetTxConfig+0x220>)
 8017b4a:	781a      	ldrb	r2, [r3, #0]
 8017b4c:	4b23      	ldr	r3, [pc, #140]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b4e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017b50:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017b54:	4b21      	ldr	r3, [pc, #132]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b56:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017b5a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017b64:	f000 fab5 	bl	80180d2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017b68:	2001      	movs	r0, #1
 8017b6a:	f7ff fc51 	bl	8017410 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017b6e:	481c      	ldr	r0, [pc, #112]	@ (8017be0 <RadioSetTxConfig+0x210>)
 8017b70:	f002 f880 	bl	8019c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017b74:	481b      	ldr	r0, [pc, #108]	@ (8017be4 <RadioSetTxConfig+0x214>)
 8017b76:	f002 f94b 	bl	8019e10 <SUBGRF_SetPacketParams>
            break;
 8017b7a:	e012      	b.n	8017ba2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8017b7c:	2004      	movs	r0, #4
 8017b7e:	f7ff fc47 	bl	8017410 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017b82:	4b16      	ldr	r3, [pc, #88]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b84:	2202      	movs	r2, #2
 8017b86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8017b8a:	4a14      	ldr	r2, [pc, #80]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b8c:	6a3b      	ldr	r3, [r7, #32]
 8017b8e:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017b90:	4b12      	ldr	r3, [pc, #72]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017b92:	2216      	movs	r2, #22
 8017b94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017b98:	4811      	ldr	r0, [pc, #68]	@ (8017be0 <RadioSetTxConfig+0x210>)
 8017b9a:	f002 f86b 	bl	8019c74 <SUBGRF_SetModulationParams>
            break;
 8017b9e:	e000      	b.n	8017ba2 <RadioSetTxConfig+0x1d2>
            break;
 8017ba0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017ba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f002 fbae 	bl	801a308 <SUBGRF_SetRfTxPower>
 8017bac:	4603      	mov	r3, r0
 8017bae:	461a      	mov	r2, r3
 8017bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017bb2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017bb6:	210e      	movs	r1, #14
 8017bb8:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017bbc:	f002 fa6e 	bl	801a09c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8017bc0:	4b06      	ldr	r3, [pc, #24]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017bc2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f002 fd7d 	bl	801a6c6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017bcc:	4a03      	ldr	r2, [pc, #12]	@ (8017bdc <RadioSetTxConfig+0x20c>)
 8017bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017bd0:	6053      	str	r3, [r2, #4]
}
 8017bd2:	bf00      	nop
 8017bd4:	3718      	adds	r7, #24
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	bd80      	pop	{r7, pc}
 8017bda:	bf00      	nop
 8017bdc:	20001c38 	.word	0x20001c38
 8017be0:	20001c70 	.word	0x20001c70
 8017be4:	20001c46 	.word	0x20001c46
 8017be8:	0801c014 	.word	0x0801c014
 8017bec:	0801c5fc 	.word	0x0801c5fc
 8017bf0:	20000104 	.word	0x20000104

08017bf4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b083      	sub	sp, #12
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
    return true;
 8017bfc:	2301      	movs	r3, #1
}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	370c      	adds	r7, #12
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bc80      	pop	{r7}
 8017c06:	4770      	bx	lr

08017c08 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017c08:	b480      	push	{r7}
 8017c0a:	b085      	sub	sp, #20
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	4603      	mov	r3, r0
 8017c10:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017c12:	2300      	movs	r3, #0
 8017c14:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017c16:	79fb      	ldrb	r3, [r7, #7]
 8017c18:	2b0a      	cmp	r3, #10
 8017c1a:	d83e      	bhi.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
 8017c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8017c24 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c22:	bf00      	nop
 8017c24:	08017c51 	.word	0x08017c51
 8017c28:	08017c61 	.word	0x08017c61
 8017c2c:	08017c71 	.word	0x08017c71
 8017c30:	08017c81 	.word	0x08017c81
 8017c34:	08017c89 	.word	0x08017c89
 8017c38:	08017c8f 	.word	0x08017c8f
 8017c3c:	08017c95 	.word	0x08017c95
 8017c40:	08017c9b 	.word	0x08017c9b
 8017c44:	08017c59 	.word	0x08017c59
 8017c48:	08017c69 	.word	0x08017c69
 8017c4c:	08017c79 	.word	0x08017c79
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017c50:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8017c54:	60fb      	str	r3, [r7, #12]
        break;
 8017c56:	e020      	b.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017c58:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017c5c:	60fb      	str	r3, [r7, #12]
        break;
 8017c5e:	e01c      	b.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017c60:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8017c64:	60fb      	str	r3, [r7, #12]
        break;
 8017c66:	e018      	b.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017c68:	f245 1361 	movw	r3, #20833	@ 0x5161
 8017c6c:	60fb      	str	r3, [r7, #12]
        break;
 8017c6e:	e014      	b.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017c70:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8017c74:	60fb      	str	r3, [r7, #12]
        break;
 8017c76:	e010      	b.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017c78:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8017c7c:	60fb      	str	r3, [r7, #12]
        break;
 8017c7e:	e00c      	b.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017c80:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8017c84:	60fb      	str	r3, [r7, #12]
        break;
 8017c86:	e008      	b.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017c88:	4b07      	ldr	r3, [pc, #28]	@ (8017ca8 <RadioGetLoRaBandwidthInHz+0xa0>)
 8017c8a:	60fb      	str	r3, [r7, #12]
        break;
 8017c8c:	e005      	b.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017c8e:	4b07      	ldr	r3, [pc, #28]	@ (8017cac <RadioGetLoRaBandwidthInHz+0xa4>)
 8017c90:	60fb      	str	r3, [r7, #12]
        break;
 8017c92:	e002      	b.n	8017c9a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8017c94:	4b06      	ldr	r3, [pc, #24]	@ (8017cb0 <RadioGetLoRaBandwidthInHz+0xa8>)
 8017c96:	60fb      	str	r3, [r7, #12]
        break;
 8017c98:	bf00      	nop
    }

    return bandwidthInHz;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
}
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	3714      	adds	r7, #20
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bc80      	pop	{r7}
 8017ca4:	4770      	bx	lr
 8017ca6:	bf00      	nop
 8017ca8:	0001e848 	.word	0x0001e848
 8017cac:	0003d090 	.word	0x0003d090
 8017cb0:	0007a120 	.word	0x0007a120

08017cb4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017cb4:	b480      	push	{r7}
 8017cb6:	b083      	sub	sp, #12
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
 8017cbc:	4608      	mov	r0, r1
 8017cbe:	4611      	mov	r1, r2
 8017cc0:	461a      	mov	r2, r3
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	70fb      	strb	r3, [r7, #3]
 8017cc6:	460b      	mov	r3, r1
 8017cc8:	803b      	strh	r3, [r7, #0]
 8017cca:	4613      	mov	r3, r2
 8017ccc:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8017cce:	883b      	ldrh	r3, [r7, #0]
 8017cd0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017cd2:	78ba      	ldrb	r2, [r7, #2]
 8017cd4:	f082 0201 	eor.w	r2, r2, #1
 8017cd8:	b2d2      	uxtb	r2, r2
 8017cda:	2a00      	cmp	r2, #0
 8017cdc:	d001      	beq.n	8017ce2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017cde:	2208      	movs	r2, #8
 8017ce0:	e000      	b.n	8017ce4 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017ce2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017ce4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017ce6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8017cea:	7c3b      	ldrb	r3, [r7, #16]
 8017cec:	7d39      	ldrb	r1, [r7, #20]
 8017cee:	2900      	cmp	r1, #0
 8017cf0:	d001      	beq.n	8017cf6 <RadioGetGfskTimeOnAirNumerator+0x42>
 8017cf2:	2102      	movs	r1, #2
 8017cf4:	e000      	b.n	8017cf8 <RadioGetGfskTimeOnAirNumerator+0x44>
 8017cf6:	2100      	movs	r1, #0
 8017cf8:	440b      	add	r3, r1
 8017cfa:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017cfc:	4413      	add	r3, r2
}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	370c      	adds	r7, #12
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bc80      	pop	{r7}
 8017d06:	4770      	bx	lr

08017d08 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017d08:	b480      	push	{r7}
 8017d0a:	b08b      	sub	sp, #44	@ 0x2c
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	60f8      	str	r0, [r7, #12]
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	4611      	mov	r1, r2
 8017d14:	461a      	mov	r2, r3
 8017d16:	460b      	mov	r3, r1
 8017d18:	71fb      	strb	r3, [r7, #7]
 8017d1a:	4613      	mov	r3, r2
 8017d1c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017d1e:	79fb      	ldrb	r3, [r7, #7]
 8017d20:	3304      	adds	r3, #4
 8017d22:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017d24:	2300      	movs	r3, #0
 8017d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	2b05      	cmp	r3, #5
 8017d2e:	d002      	beq.n	8017d36 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	2b06      	cmp	r3, #6
 8017d34:	d104      	bne.n	8017d40 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8017d36:	88bb      	ldrh	r3, [r7, #4]
 8017d38:	2b0b      	cmp	r3, #11
 8017d3a:	d801      	bhi.n	8017d40 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017d3c:	230c      	movs	r3, #12
 8017d3e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d105      	bne.n	8017d52 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	2b0b      	cmp	r3, #11
 8017d4a:	d008      	beq.n	8017d5e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017d4c:	68bb      	ldr	r3, [r7, #8]
 8017d4e:	2b0c      	cmp	r3, #12
 8017d50:	d005      	beq.n	8017d5e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	2b01      	cmp	r3, #1
 8017d56:	d105      	bne.n	8017d64 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017d58:	68bb      	ldr	r3, [r7, #8]
 8017d5a:	2b0c      	cmp	r3, #12
 8017d5c:	d102      	bne.n	8017d64 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017d5e:	2301      	movs	r3, #1
 8017d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017d64:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017d68:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017d6a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8017d6e:	2a00      	cmp	r2, #0
 8017d70:	d001      	beq.n	8017d76 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017d72:	2210      	movs	r2, #16
 8017d74:	e000      	b.n	8017d78 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8017d76:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017d78:	4413      	add	r3, r2
 8017d7a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017d80:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8017d82:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017d86:	2a00      	cmp	r2, #0
 8017d88:	d001      	beq.n	8017d8e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	e000      	b.n	8017d90 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017d8e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017d90:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017d92:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	2b06      	cmp	r3, #6
 8017d98:	d803      	bhi.n	8017da2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017d9a:	68bb      	ldr	r3, [r7, #8]
 8017d9c:	009b      	lsls	r3, r3, #2
 8017d9e:	623b      	str	r3, [r7, #32]
 8017da0:	e00e      	b.n	8017dc0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017da2:	69fb      	ldr	r3, [r7, #28]
 8017da4:	3308      	adds	r3, #8
 8017da6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d004      	beq.n	8017dba <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017db0:	68bb      	ldr	r3, [r7, #8]
 8017db2:	3b02      	subs	r3, #2
 8017db4:	009b      	lsls	r3, r3, #2
 8017db6:	623b      	str	r3, [r7, #32]
 8017db8:	e002      	b.n	8017dc0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017dba:	68bb      	ldr	r3, [r7, #8]
 8017dbc:	009b      	lsls	r3, r3, #2
 8017dbe:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017dc0:	69fb      	ldr	r3, [r7, #28]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	da01      	bge.n	8017dca <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017dca:	69fa      	ldr	r2, [r7, #28]
 8017dcc:	6a3b      	ldr	r3, [r7, #32]
 8017dce:	4413      	add	r3, r2
 8017dd0:	1e5a      	subs	r2, r3, #1
 8017dd2:	6a3b      	ldr	r3, [r7, #32]
 8017dd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8017dd8:	697a      	ldr	r2, [r7, #20]
 8017dda:	fb03 f202 	mul.w	r2, r3, r2
 8017dde:	88bb      	ldrh	r3, [r7, #4]
 8017de0:	4413      	add	r3, r2
    int32_t intermediate =
 8017de2:	330c      	adds	r3, #12
 8017de4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	2b06      	cmp	r3, #6
 8017dea:	d802      	bhi.n	8017df2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017dec:	69bb      	ldr	r3, [r7, #24]
 8017dee:	3302      	adds	r3, #2
 8017df0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017df2:	69bb      	ldr	r3, [r7, #24]
 8017df4:	009b      	lsls	r3, r3, #2
 8017df6:	1c5a      	adds	r2, r3, #1
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	3b02      	subs	r3, #2
 8017dfc:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	372c      	adds	r7, #44	@ 0x2c
 8017e04:	46bd      	mov	sp, r7
 8017e06:	bc80      	pop	{r7}
 8017e08:	4770      	bx	lr
	...

08017e0c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b08a      	sub	sp, #40	@ 0x28
 8017e10:	af04      	add	r7, sp, #16
 8017e12:	60b9      	str	r1, [r7, #8]
 8017e14:	607a      	str	r2, [r7, #4]
 8017e16:	461a      	mov	r2, r3
 8017e18:	4603      	mov	r3, r0
 8017e1a:	73fb      	strb	r3, [r7, #15]
 8017e1c:	4613      	mov	r3, r2
 8017e1e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017e20:	2300      	movs	r3, #0
 8017e22:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017e24:	2301      	movs	r3, #1
 8017e26:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017e28:	7bfb      	ldrb	r3, [r7, #15]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d002      	beq.n	8017e34 <RadioTimeOnAir+0x28>
 8017e2e:	2b01      	cmp	r3, #1
 8017e30:	d017      	beq.n	8017e62 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017e32:	e035      	b.n	8017ea0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017e34:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8017e38:	8c3a      	ldrh	r2, [r7, #32]
 8017e3a:	7bb9      	ldrb	r1, [r7, #14]
 8017e3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017e40:	9301      	str	r3, [sp, #4]
 8017e42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017e46:	9300      	str	r3, [sp, #0]
 8017e48:	4603      	mov	r3, r0
 8017e4a:	6878      	ldr	r0, [r7, #4]
 8017e4c:	f7ff ff32 	bl	8017cb4 <RadioGetGfskTimeOnAirNumerator>
 8017e50:	4603      	mov	r3, r0
 8017e52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017e56:	fb02 f303 	mul.w	r3, r2, r3
 8017e5a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	613b      	str	r3, [r7, #16]
        break;
 8017e60:	e01e      	b.n	8017ea0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017e62:	8c39      	ldrh	r1, [r7, #32]
 8017e64:	7bba      	ldrb	r2, [r7, #14]
 8017e66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017e6a:	9302      	str	r3, [sp, #8]
 8017e6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017e70:	9301      	str	r3, [sp, #4]
 8017e72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017e76:	9300      	str	r3, [sp, #0]
 8017e78:	460b      	mov	r3, r1
 8017e7a:	6879      	ldr	r1, [r7, #4]
 8017e7c:	68b8      	ldr	r0, [r7, #8]
 8017e7e:	f7ff ff43 	bl	8017d08 <RadioGetLoRaTimeOnAirNumerator>
 8017e82:	4603      	mov	r3, r0
 8017e84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017e88:	fb02 f303 	mul.w	r3, r2, r3
 8017e8c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8017eb8 <RadioTimeOnAir+0xac>)
 8017e90:	68bb      	ldr	r3, [r7, #8]
 8017e92:	4413      	add	r3, r2
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7ff feb6 	bl	8017c08 <RadioGetLoRaBandwidthInHz>
 8017e9c:	6138      	str	r0, [r7, #16]
        break;
 8017e9e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8017ea0:	697a      	ldr	r2, [r7, #20]
 8017ea2:	693b      	ldr	r3, [r7, #16]
 8017ea4:	4413      	add	r3, r2
 8017ea6:	1e5a      	subs	r2, r3, #1
 8017ea8:	693b      	ldr	r3, [r7, #16]
 8017eaa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017eae:	4618      	mov	r0, r3
 8017eb0:	3718      	adds	r7, #24
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	bd80      	pop	{r7, pc}
 8017eb6:	bf00      	nop
 8017eb8:	0801c5fc 	.word	0x0801c5fc

08017ebc <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b084      	sub	sp, #16
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
 8017ec4:	460b      	mov	r3, r1
 8017ec6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017ec8:	2300      	movs	r3, #0
 8017eca:	2200      	movs	r2, #0
 8017ecc:	f240 2101 	movw	r1, #513	@ 0x201
 8017ed0:	f240 2001 	movw	r0, #513	@ 0x201
 8017ed4:	f001 fd38 	bl	8019948 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017ed8:	4b70      	ldr	r3, [pc, #448]	@ (801809c <RadioSend+0x1e0>)
 8017eda:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017ede:	2101      	movs	r1, #1
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f002 f9e9 	bl	801a2b8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017ee6:	4b6d      	ldr	r3, [pc, #436]	@ (801809c <RadioSend+0x1e0>)
 8017ee8:	781b      	ldrb	r3, [r3, #0]
 8017eea:	2b01      	cmp	r3, #1
 8017eec:	d112      	bne.n	8017f14 <RadioSend+0x58>
 8017eee:	4b6b      	ldr	r3, [pc, #428]	@ (801809c <RadioSend+0x1e0>)
 8017ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017ef4:	2b06      	cmp	r3, #6
 8017ef6:	d10d      	bne.n	8017f14 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017ef8:	f640 0089 	movw	r0, #2185	@ 0x889
 8017efc:	f002 f8f0 	bl	801a0e0 <SUBGRF_ReadRegister>
 8017f00:	4603      	mov	r3, r0
 8017f02:	f023 0304 	bic.w	r3, r3, #4
 8017f06:	b2db      	uxtb	r3, r3
 8017f08:	4619      	mov	r1, r3
 8017f0a:	f640 0089 	movw	r0, #2185	@ 0x889
 8017f0e:	f002 f8c5 	bl	801a09c <SUBGRF_WriteRegister>
 8017f12:	e00c      	b.n	8017f2e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017f14:	f640 0089 	movw	r0, #2185	@ 0x889
 8017f18:	f002 f8e2 	bl	801a0e0 <SUBGRF_ReadRegister>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	f043 0304 	orr.w	r3, r3, #4
 8017f22:	b2db      	uxtb	r3, r3
 8017f24:	4619      	mov	r1, r3
 8017f26:	f640 0089 	movw	r0, #2185	@ 0x889
 8017f2a:	f002 f8b7 	bl	801a09c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8017f2e:	4b5b      	ldr	r3, [pc, #364]	@ (801809c <RadioSend+0x1e0>)
 8017f30:	781b      	ldrb	r3, [r3, #0]
 8017f32:	2b04      	cmp	r3, #4
 8017f34:	f200 80a2 	bhi.w	801807c <RadioSend+0x1c0>
 8017f38:	a201      	add	r2, pc, #4	@ (adr r2, 8017f40 <RadioSend+0x84>)
 8017f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f3e:	bf00      	nop
 8017f40:	08017f6f 	.word	0x08017f6f
 8017f44:	08017f55 	.word	0x08017f55
 8017f48:	08017f6f 	.word	0x08017f6f
 8017f4c:	08017fc5 	.word	0x08017fc5
 8017f50:	08017fe5 	.word	0x08017fe5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017f54:	4a51      	ldr	r2, [pc, #324]	@ (801809c <RadioSend+0x1e0>)
 8017f56:	78fb      	ldrb	r3, [r7, #3]
 8017f58:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f5a:	4851      	ldr	r0, [pc, #324]	@ (80180a0 <RadioSend+0x1e4>)
 8017f5c:	f001 ff58 	bl	8019e10 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017f60:	78fb      	ldrb	r3, [r7, #3]
 8017f62:	2200      	movs	r2, #0
 8017f64:	4619      	mov	r1, r3
 8017f66:	6878      	ldr	r0, [r7, #4]
 8017f68:	f001 fa04 	bl	8019374 <SUBGRF_SendPayload>
            break;
 8017f6c:	e087      	b.n	801807e <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017f6e:	f002 fb9c 	bl	801a6aa <RFW_Is_Init>
 8017f72:	4603      	mov	r3, r0
 8017f74:	2b01      	cmp	r3, #1
 8017f76:	d118      	bne.n	8017faa <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017f78:	f107 020d 	add.w	r2, r7, #13
 8017f7c:	78fb      	ldrb	r3, [r7, #3]
 8017f7e:	4619      	mov	r1, r3
 8017f80:	6878      	ldr	r0, [r7, #4]
 8017f82:	f002 fbaa 	bl	801a6da <RFW_TransmitInit>
 8017f86:	4603      	mov	r3, r0
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d10c      	bne.n	8017fa6 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017f8c:	7b7a      	ldrb	r2, [r7, #13]
 8017f8e:	4b43      	ldr	r3, [pc, #268]	@ (801809c <RadioSend+0x1e0>)
 8017f90:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f92:	4843      	ldr	r0, [pc, #268]	@ (80180a0 <RadioSend+0x1e4>)
 8017f94:	f001 ff3c 	bl	8019e10 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8017f98:	7b7b      	ldrb	r3, [r7, #13]
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	6878      	ldr	r0, [r7, #4]
 8017fa0:	f001 f9e8 	bl	8019374 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017fa4:	e06b      	b.n	801807e <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8017fa6:	2303      	movs	r3, #3
 8017fa8:	e073      	b.n	8018092 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017faa:	4a3c      	ldr	r2, [pc, #240]	@ (801809c <RadioSend+0x1e0>)
 8017fac:	78fb      	ldrb	r3, [r7, #3]
 8017fae:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017fb0:	483b      	ldr	r0, [pc, #236]	@ (80180a0 <RadioSend+0x1e4>)
 8017fb2:	f001 ff2d 	bl	8019e10 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8017fb6:	78fb      	ldrb	r3, [r7, #3]
 8017fb8:	2200      	movs	r2, #0
 8017fba:	4619      	mov	r1, r3
 8017fbc:	6878      	ldr	r0, [r7, #4]
 8017fbe:	f001 f9d9 	bl	8019374 <SUBGRF_SendPayload>
            break;
 8017fc2:	e05c      	b.n	801807e <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017fc4:	4b35      	ldr	r3, [pc, #212]	@ (801809c <RadioSend+0x1e0>)
 8017fc6:	2202      	movs	r2, #2
 8017fc8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017fca:	4a34      	ldr	r2, [pc, #208]	@ (801809c <RadioSend+0x1e0>)
 8017fcc:	78fb      	ldrb	r3, [r7, #3]
 8017fce:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017fd0:	4833      	ldr	r0, [pc, #204]	@ (80180a0 <RadioSend+0x1e4>)
 8017fd2:	f001 ff1d 	bl	8019e10 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017fd6:	78fb      	ldrb	r3, [r7, #3]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	4619      	mov	r1, r3
 8017fdc:	6878      	ldr	r0, [r7, #4]
 8017fde:	f001 f9c9 	bl	8019374 <SUBGRF_SendPayload>
            break;
 8017fe2:	e04c      	b.n	801807e <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017fe4:	78fb      	ldrb	r3, [r7, #3]
 8017fe6:	461a      	mov	r2, r3
 8017fe8:	6879      	ldr	r1, [r7, #4]
 8017fea:	482e      	ldr	r0, [pc, #184]	@ (80180a4 <RadioSend+0x1e8>)
 8017fec:	f000 fc96 	bl	801891c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017ff0:	4b2a      	ldr	r3, [pc, #168]	@ (801809c <RadioSend+0x1e0>)
 8017ff2:	2202      	movs	r2, #2
 8017ff4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017ff6:	78fb      	ldrb	r3, [r7, #3]
 8017ff8:	3301      	adds	r3, #1
 8017ffa:	b2da      	uxtb	r2, r3
 8017ffc:	4b27      	ldr	r3, [pc, #156]	@ (801809c <RadioSend+0x1e0>)
 8017ffe:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018000:	4827      	ldr	r0, [pc, #156]	@ (80180a0 <RadioSend+0x1e4>)
 8018002:	f001 ff05 	bl	8019e10 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8018006:	2100      	movs	r1, #0
 8018008:	20f1      	movs	r0, #241	@ 0xf1
 801800a:	f000 f963 	bl	80182d4 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801800e:	2100      	movs	r1, #0
 8018010:	20f0      	movs	r0, #240	@ 0xf0
 8018012:	f000 f95f 	bl	80182d4 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8018016:	4b21      	ldr	r3, [pc, #132]	@ (801809c <RadioSend+0x1e0>)
 8018018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801801a:	2b64      	cmp	r3, #100	@ 0x64
 801801c:	d108      	bne.n	8018030 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801801e:	2170      	movs	r1, #112	@ 0x70
 8018020:	20f3      	movs	r0, #243	@ 0xf3
 8018022:	f000 f957 	bl	80182d4 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8018026:	211d      	movs	r1, #29
 8018028:	20f2      	movs	r0, #242	@ 0xf2
 801802a:	f000 f953 	bl	80182d4 <RadioWrite>
 801802e:	e007      	b.n	8018040 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8018030:	21e1      	movs	r1, #225	@ 0xe1
 8018032:	20f3      	movs	r0, #243	@ 0xf3
 8018034:	f000 f94e 	bl	80182d4 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8018038:	2104      	movs	r1, #4
 801803a:	20f2      	movs	r0, #242	@ 0xf2
 801803c:	f000 f94a 	bl	80182d4 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8018040:	78fb      	ldrb	r3, [r7, #3]
 8018042:	b29b      	uxth	r3, r3
 8018044:	00db      	lsls	r3, r3, #3
 8018046:	b29b      	uxth	r3, r3
 8018048:	3302      	adds	r3, #2
 801804a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801804c:	89fb      	ldrh	r3, [r7, #14]
 801804e:	0a1b      	lsrs	r3, r3, #8
 8018050:	b29b      	uxth	r3, r3
 8018052:	b2db      	uxtb	r3, r3
 8018054:	4619      	mov	r1, r3
 8018056:	20f4      	movs	r0, #244	@ 0xf4
 8018058:	f000 f93c 	bl	80182d4 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801805c:	89fb      	ldrh	r3, [r7, #14]
 801805e:	b2db      	uxtb	r3, r3
 8018060:	4619      	mov	r1, r3
 8018062:	20f5      	movs	r0, #245	@ 0xf5
 8018064:	f000 f936 	bl	80182d4 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8018068:	78fb      	ldrb	r3, [r7, #3]
 801806a:	3301      	adds	r3, #1
 801806c:	b2db      	uxtb	r3, r3
 801806e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8018072:	4619      	mov	r1, r3
 8018074:	480b      	ldr	r0, [pc, #44]	@ (80180a4 <RadioSend+0x1e8>)
 8018076:	f001 f97d 	bl	8019374 <SUBGRF_SendPayload>
            break;
 801807a:	e000      	b.n	801807e <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801807c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801807e:	4b07      	ldr	r3, [pc, #28]	@ (801809c <RadioSend+0x1e0>)
 8018080:	685b      	ldr	r3, [r3, #4]
 8018082:	4619      	mov	r1, r3
 8018084:	4808      	ldr	r0, [pc, #32]	@ (80180a8 <RadioSend+0x1ec>)
 8018086:	f003 fa47 	bl	801b518 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801808a:	4807      	ldr	r0, [pc, #28]	@ (80180a8 <RadioSend+0x1ec>)
 801808c:	f003 f966 	bl	801b35c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8018090:	2300      	movs	r3, #0
}
 8018092:	4618      	mov	r0, r3
 8018094:	3710      	adds	r7, #16
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
 801809a:	bf00      	nop
 801809c:	20001c38 	.word	0x20001c38
 80180a0:	20001c46 	.word	0x20001c46
 80180a4:	20001b34 	.word	0x20001b34
 80180a8:	20001c94 	.word	0x20001c94

080180ac <RadioSleep>:

static void RadioSleep( void )
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b082      	sub	sp, #8
 80180b0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80180b2:	2300      	movs	r3, #0
 80180b4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80180b6:	793b      	ldrb	r3, [r7, #4]
 80180b8:	f043 0304 	orr.w	r3, r3, #4
 80180bc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80180be:	7938      	ldrb	r0, [r7, #4]
 80180c0:	f001 fa34 	bl	801952c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80180c4:	2002      	movs	r0, #2
 80180c6:	f7ea f8bb 	bl	8002240 <HAL_Delay>
}
 80180ca:	bf00      	nop
 80180cc:	3708      	adds	r7, #8
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd80      	pop	{r7, pc}

080180d2 <RadioStandby>:

static void RadioStandby( void )
{
 80180d2:	b580      	push	{r7, lr}
 80180d4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80180d6:	2000      	movs	r0, #0
 80180d8:	f001 fa5c 	bl	8019594 <SUBGRF_SetStandby>
}
 80180dc:	bf00      	nop
 80180de:	bd80      	pop	{r7, pc}

080180e0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b082      	sub	sp, #8
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80180e8:	f002 fadf 	bl	801a6aa <RFW_Is_Init>
 80180ec:	4603      	mov	r3, r0
 80180ee:	2b01      	cmp	r3, #1
 80180f0:	d102      	bne.n	80180f8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80180f2:	f002 fb02 	bl	801a6fa <RFW_ReceiveInit>
 80180f6:	e007      	b.n	8018108 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80180f8:	2300      	movs	r3, #0
 80180fa:	2200      	movs	r2, #0
 80180fc:	f240 2162 	movw	r1, #610	@ 0x262
 8018100:	f240 2062 	movw	r0, #610	@ 0x262
 8018104:	f001 fc20 	bl	8019948 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d006      	beq.n	801811c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801810e:	6879      	ldr	r1, [r7, #4]
 8018110:	4811      	ldr	r0, [pc, #68]	@ (8018158 <RadioRx+0x78>)
 8018112:	f003 fa01 	bl	801b518 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018116:	4810      	ldr	r0, [pc, #64]	@ (8018158 <RadioRx+0x78>)
 8018118:	f003 f920 	bl	801b35c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801811c:	4b0f      	ldr	r3, [pc, #60]	@ (801815c <RadioRx+0x7c>)
 801811e:	2200      	movs	r2, #0
 8018120:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018122:	4b0e      	ldr	r3, [pc, #56]	@ (801815c <RadioRx+0x7c>)
 8018124:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018128:	2100      	movs	r1, #0
 801812a:	4618      	mov	r0, r3
 801812c:	f002 f8c4 	bl	801a2b8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8018130:	4b0a      	ldr	r3, [pc, #40]	@ (801815c <RadioRx+0x7c>)
 8018132:	785b      	ldrb	r3, [r3, #1]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d004      	beq.n	8018142 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018138:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801813c:	f001 fa66 	bl	801960c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018140:	e005      	b.n	801814e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8018142:	4b06      	ldr	r3, [pc, #24]	@ (801815c <RadioRx+0x7c>)
 8018144:	689b      	ldr	r3, [r3, #8]
 8018146:	019b      	lsls	r3, r3, #6
 8018148:	4618      	mov	r0, r3
 801814a:	f001 fa5f 	bl	801960c <SUBGRF_SetRx>
}
 801814e:	bf00      	nop
 8018150:	3708      	adds	r7, #8
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}
 8018156:	bf00      	nop
 8018158:	20001cac 	.word	0x20001cac
 801815c:	20001c38 	.word	0x20001c38

08018160 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8018168:	f002 fa9f 	bl	801a6aa <RFW_Is_Init>
 801816c:	4603      	mov	r3, r0
 801816e:	2b01      	cmp	r3, #1
 8018170:	d102      	bne.n	8018178 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8018172:	f002 fac2 	bl	801a6fa <RFW_ReceiveInit>
 8018176:	e007      	b.n	8018188 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018178:	2300      	movs	r3, #0
 801817a:	2200      	movs	r2, #0
 801817c:	f240 2162 	movw	r1, #610	@ 0x262
 8018180:	f240 2062 	movw	r0, #610	@ 0x262
 8018184:	f001 fbe0 	bl	8019948 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d006      	beq.n	801819c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801818e:	6879      	ldr	r1, [r7, #4]
 8018190:	4811      	ldr	r0, [pc, #68]	@ (80181d8 <RadioRxBoosted+0x78>)
 8018192:	f003 f9c1 	bl	801b518 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018196:	4810      	ldr	r0, [pc, #64]	@ (80181d8 <RadioRxBoosted+0x78>)
 8018198:	f003 f8e0 	bl	801b35c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801819c:	4b0f      	ldr	r3, [pc, #60]	@ (80181dc <RadioRxBoosted+0x7c>)
 801819e:	2200      	movs	r2, #0
 80181a0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80181a2:	4b0e      	ldr	r3, [pc, #56]	@ (80181dc <RadioRxBoosted+0x7c>)
 80181a4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80181a8:	2100      	movs	r1, #0
 80181aa:	4618      	mov	r0, r3
 80181ac:	f002 f884 	bl	801a2b8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80181b0:	4b0a      	ldr	r3, [pc, #40]	@ (80181dc <RadioRxBoosted+0x7c>)
 80181b2:	785b      	ldrb	r3, [r3, #1]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d004      	beq.n	80181c2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80181b8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80181bc:	f001 fa46 	bl	801964c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80181c0:	e005      	b.n	80181ce <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80181c2:	4b06      	ldr	r3, [pc, #24]	@ (80181dc <RadioRxBoosted+0x7c>)
 80181c4:	689b      	ldr	r3, [r3, #8]
 80181c6:	019b      	lsls	r3, r3, #6
 80181c8:	4618      	mov	r0, r3
 80181ca:	f001 fa3f 	bl	801964c <SUBGRF_SetRxBoosted>
}
 80181ce:	bf00      	nop
 80181d0:	3708      	adds	r7, #8
 80181d2:	46bd      	mov	sp, r7
 80181d4:	bd80      	pop	{r7, pc}
 80181d6:	bf00      	nop
 80181d8:	20001cac 	.word	0x20001cac
 80181dc:	20001c38 	.word	0x20001c38

080181e0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b082      	sub	sp, #8
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
 80181e8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	005a      	lsls	r2, r3, #1
 80181ee:	683b      	ldr	r3, [r7, #0]
 80181f0:	4413      	add	r3, r2
 80181f2:	4a0c      	ldr	r2, [pc, #48]	@ (8018224 <RadioSetRxDutyCycle+0x44>)
 80181f4:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80181f6:	2300      	movs	r3, #0
 80181f8:	2200      	movs	r2, #0
 80181fa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80181fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018202:	f001 fba1 	bl	8019948 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018206:	4b07      	ldr	r3, [pc, #28]	@ (8018224 <RadioSetRxDutyCycle+0x44>)
 8018208:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801820c:	2100      	movs	r1, #0
 801820e:	4618      	mov	r0, r3
 8018210:	f002 f852 	bl	801a2b8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018214:	6839      	ldr	r1, [r7, #0]
 8018216:	6878      	ldr	r0, [r7, #4]
 8018218:	f001 fa3c 	bl	8019694 <SUBGRF_SetRxDutyCycle>
}
 801821c:	bf00      	nop
 801821e:	3708      	adds	r7, #8
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}
 8018224:	20001c38 	.word	0x20001c38

08018228 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018228:	b580      	push	{r7, lr}
 801822a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801822c:	4b09      	ldr	r3, [pc, #36]	@ (8018254 <RadioStartCad+0x2c>)
 801822e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018232:	2100      	movs	r1, #0
 8018234:	4618      	mov	r0, r3
 8018236:	f002 f83f 	bl	801a2b8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801823a:	2300      	movs	r3, #0
 801823c:	2200      	movs	r2, #0
 801823e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8018242:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8018246:	f001 fb7f 	bl	8019948 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801824a:	f001 fa4f 	bl	80196ec <SUBGRF_SetCad>
}
 801824e:	bf00      	nop
 8018250:	bd80      	pop	{r7, pc}
 8018252:	bf00      	nop
 8018254:	20001c38 	.word	0x20001c38

08018258 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b084      	sub	sp, #16
 801825c:	af00      	add	r7, sp, #0
 801825e:	6078      	str	r0, [r7, #4]
 8018260:	460b      	mov	r3, r1
 8018262:	70fb      	strb	r3, [r7, #3]
 8018264:	4613      	mov	r3, r2
 8018266:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8018268:	883b      	ldrh	r3, [r7, #0]
 801826a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801826e:	fb02 f303 	mul.w	r3, r2, r3
 8018272:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018274:	6878      	ldr	r0, [r7, #4]
 8018276:	f001 fbc3 	bl	8019a00 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801827a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801827e:	4618      	mov	r0, r3
 8018280:	f002 f842 	bl	801a308 <SUBGRF_SetRfTxPower>
 8018284:	4603      	mov	r3, r0
 8018286:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018288:	210e      	movs	r1, #14
 801828a:	f640 101f 	movw	r0, #2335	@ 0x91f
 801828e:	f001 ff05 	bl	801a09c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8018292:	7afb      	ldrb	r3, [r7, #11]
 8018294:	2101      	movs	r1, #1
 8018296:	4618      	mov	r0, r3
 8018298:	f002 f80e 	bl	801a2b8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801829c:	f001 fa34 	bl	8019708 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80182a0:	68f9      	ldr	r1, [r7, #12]
 80182a2:	4805      	ldr	r0, [pc, #20]	@ (80182b8 <RadioSetTxContinuousWave+0x60>)
 80182a4:	f003 f938 	bl	801b518 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80182a8:	4803      	ldr	r0, [pc, #12]	@ (80182b8 <RadioSetTxContinuousWave+0x60>)
 80182aa:	f003 f857 	bl	801b35c <UTIL_TIMER_Start>
}
 80182ae:	bf00      	nop
 80182b0:	3710      	adds	r7, #16
 80182b2:	46bd      	mov	sp, r7
 80182b4:	bd80      	pop	{r7, pc}
 80182b6:	bf00      	nop
 80182b8:	20001c94 	.word	0x20001c94

080182bc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	4603      	mov	r3, r0
 80182c4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80182c6:	f001 fe56 	bl	8019f76 <SUBGRF_GetRssiInst>
 80182ca:	4603      	mov	r3, r0
}
 80182cc:	4618      	mov	r0, r3
 80182ce:	3708      	adds	r7, #8
 80182d0:	46bd      	mov	sp, r7
 80182d2:	bd80      	pop	{r7, pc}

080182d4 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b082      	sub	sp, #8
 80182d8:	af00      	add	r7, sp, #0
 80182da:	4603      	mov	r3, r0
 80182dc:	460a      	mov	r2, r1
 80182de:	80fb      	strh	r3, [r7, #6]
 80182e0:	4613      	mov	r3, r2
 80182e2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80182e4:	797a      	ldrb	r2, [r7, #5]
 80182e6:	88fb      	ldrh	r3, [r7, #6]
 80182e8:	4611      	mov	r1, r2
 80182ea:	4618      	mov	r0, r3
 80182ec:	f001 fed6 	bl	801a09c <SUBGRF_WriteRegister>
}
 80182f0:	bf00      	nop
 80182f2:	3708      	adds	r7, #8
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}

080182f8 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b082      	sub	sp, #8
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	4603      	mov	r3, r0
 8018300:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018302:	88fb      	ldrh	r3, [r7, #6]
 8018304:	4618      	mov	r0, r3
 8018306:	f001 feeb 	bl	801a0e0 <SUBGRF_ReadRegister>
 801830a:	4603      	mov	r3, r0
}
 801830c:	4618      	mov	r0, r3
 801830e:	3708      	adds	r7, #8
 8018310:	46bd      	mov	sp, r7
 8018312:	bd80      	pop	{r7, pc}

08018314 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b082      	sub	sp, #8
 8018318:	af00      	add	r7, sp, #0
 801831a:	4603      	mov	r3, r0
 801831c:	6039      	str	r1, [r7, #0]
 801831e:	80fb      	strh	r3, [r7, #6]
 8018320:	4613      	mov	r3, r2
 8018322:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018324:	797b      	ldrb	r3, [r7, #5]
 8018326:	b29a      	uxth	r2, r3
 8018328:	88fb      	ldrh	r3, [r7, #6]
 801832a:	6839      	ldr	r1, [r7, #0]
 801832c:	4618      	mov	r0, r3
 801832e:	f001 fef7 	bl	801a120 <SUBGRF_WriteRegisters>
}
 8018332:	bf00      	nop
 8018334:	3708      	adds	r7, #8
 8018336:	46bd      	mov	sp, r7
 8018338:	bd80      	pop	{r7, pc}

0801833a <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801833a:	b580      	push	{r7, lr}
 801833c:	b082      	sub	sp, #8
 801833e:	af00      	add	r7, sp, #0
 8018340:	4603      	mov	r3, r0
 8018342:	6039      	str	r1, [r7, #0]
 8018344:	80fb      	strh	r3, [r7, #6]
 8018346:	4613      	mov	r3, r2
 8018348:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801834a:	797b      	ldrb	r3, [r7, #5]
 801834c:	b29a      	uxth	r2, r3
 801834e:	88fb      	ldrh	r3, [r7, #6]
 8018350:	6839      	ldr	r1, [r7, #0]
 8018352:	4618      	mov	r0, r3
 8018354:	f001 ff06 	bl	801a164 <SUBGRF_ReadRegisters>
}
 8018358:	bf00      	nop
 801835a:	3708      	adds	r7, #8
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}

08018360 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b082      	sub	sp, #8
 8018364:	af00      	add	r7, sp, #0
 8018366:	4603      	mov	r3, r0
 8018368:	460a      	mov	r2, r1
 801836a:	71fb      	strb	r3, [r7, #7]
 801836c:	4613      	mov	r3, r2
 801836e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018370:	79fb      	ldrb	r3, [r7, #7]
 8018372:	2b01      	cmp	r3, #1
 8018374:	d10a      	bne.n	801838c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8018376:	4a0e      	ldr	r2, [pc, #56]	@ (80183b0 <RadioSetMaxPayloadLength+0x50>)
 8018378:	79bb      	ldrb	r3, [r7, #6]
 801837a:	7013      	strb	r3, [r2, #0]
 801837c:	4b0c      	ldr	r3, [pc, #48]	@ (80183b0 <RadioSetMaxPayloadLength+0x50>)
 801837e:	781a      	ldrb	r2, [r3, #0]
 8018380:	4b0c      	ldr	r3, [pc, #48]	@ (80183b4 <RadioSetMaxPayloadLength+0x54>)
 8018382:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018384:	480c      	ldr	r0, [pc, #48]	@ (80183b8 <RadioSetMaxPayloadLength+0x58>)
 8018386:	f001 fd43 	bl	8019e10 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801838a:	e00d      	b.n	80183a8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801838c:	4b09      	ldr	r3, [pc, #36]	@ (80183b4 <RadioSetMaxPayloadLength+0x54>)
 801838e:	7d5b      	ldrb	r3, [r3, #21]
 8018390:	2b01      	cmp	r3, #1
 8018392:	d109      	bne.n	80183a8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8018394:	4a06      	ldr	r2, [pc, #24]	@ (80183b0 <RadioSetMaxPayloadLength+0x50>)
 8018396:	79bb      	ldrb	r3, [r7, #6]
 8018398:	7013      	strb	r3, [r2, #0]
 801839a:	4b05      	ldr	r3, [pc, #20]	@ (80183b0 <RadioSetMaxPayloadLength+0x50>)
 801839c:	781a      	ldrb	r2, [r3, #0]
 801839e:	4b05      	ldr	r3, [pc, #20]	@ (80183b4 <RadioSetMaxPayloadLength+0x54>)
 80183a0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80183a2:	4805      	ldr	r0, [pc, #20]	@ (80183b8 <RadioSetMaxPayloadLength+0x58>)
 80183a4:	f001 fd34 	bl	8019e10 <SUBGRF_SetPacketParams>
}
 80183a8:	bf00      	nop
 80183aa:	3708      	adds	r7, #8
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}
 80183b0:	20000104 	.word	0x20000104
 80183b4:	20001c38 	.word	0x20001c38
 80183b8:	20001c46 	.word	0x20001c46

080183bc <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b082      	sub	sp, #8
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	4603      	mov	r3, r0
 80183c4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80183c6:	4a13      	ldr	r2, [pc, #76]	@ (8018414 <RadioSetPublicNetwork+0x58>)
 80183c8:	79fb      	ldrb	r3, [r7, #7]
 80183ca:	7313      	strb	r3, [r2, #12]
 80183cc:	4b11      	ldr	r3, [pc, #68]	@ (8018414 <RadioSetPublicNetwork+0x58>)
 80183ce:	7b1a      	ldrb	r2, [r3, #12]
 80183d0:	4b10      	ldr	r3, [pc, #64]	@ (8018414 <RadioSetPublicNetwork+0x58>)
 80183d2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80183d4:	2001      	movs	r0, #1
 80183d6:	f7ff f81b 	bl	8017410 <RadioSetModem>
    if( enable == true )
 80183da:	79fb      	ldrb	r3, [r7, #7]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d00a      	beq.n	80183f6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80183e0:	2134      	movs	r1, #52	@ 0x34
 80183e2:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80183e6:	f001 fe59 	bl	801a09c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80183ea:	2144      	movs	r1, #68	@ 0x44
 80183ec:	f240 7041 	movw	r0, #1857	@ 0x741
 80183f0:	f001 fe54 	bl	801a09c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80183f4:	e009      	b.n	801840a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80183f6:	2114      	movs	r1, #20
 80183f8:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80183fc:	f001 fe4e 	bl	801a09c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018400:	2124      	movs	r1, #36	@ 0x24
 8018402:	f240 7041 	movw	r0, #1857	@ 0x741
 8018406:	f001 fe49 	bl	801a09c <SUBGRF_WriteRegister>
}
 801840a:	bf00      	nop
 801840c:	3708      	adds	r7, #8
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}
 8018412:	bf00      	nop
 8018414:	20001c38 	.word	0x20001c38

08018418 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018418:	b580      	push	{r7, lr}
 801841a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801841c:	f001 ffa8 	bl	801a370 <SUBGRF_GetRadioWakeUpTime>
 8018420:	4603      	mov	r3, r0
 8018422:	3303      	adds	r3, #3
}
 8018424:	4618      	mov	r0, r3
 8018426:	bd80      	pop	{r7, pc}

08018428 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018430:	f000 f80e 	bl	8018450 <RadioOnTxTimeoutProcess>
}
 8018434:	bf00      	nop
 8018436:	3708      	adds	r7, #8
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}

0801843c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801843c:	b580      	push	{r7, lr}
 801843e:	b082      	sub	sp, #8
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018444:	f000 f818 	bl	8018478 <RadioOnRxTimeoutProcess>
}
 8018448:	bf00      	nop
 801844a:	3708      	adds	r7, #8
 801844c:	46bd      	mov	sp, r7
 801844e:	bd80      	pop	{r7, pc}

08018450 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018450:	b580      	push	{r7, lr}
 8018452:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018454:	4b07      	ldr	r3, [pc, #28]	@ (8018474 <RadioOnTxTimeoutProcess+0x24>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d008      	beq.n	801846e <RadioOnTxTimeoutProcess+0x1e>
 801845c:	4b05      	ldr	r3, [pc, #20]	@ (8018474 <RadioOnTxTimeoutProcess+0x24>)
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d003      	beq.n	801846e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8018466:	4b03      	ldr	r3, [pc, #12]	@ (8018474 <RadioOnTxTimeoutProcess+0x24>)
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	685b      	ldr	r3, [r3, #4]
 801846c:	4798      	blx	r3
    }
}
 801846e:	bf00      	nop
 8018470:	bd80      	pop	{r7, pc}
 8018472:	bf00      	nop
 8018474:	20001c34 	.word	0x20001c34

08018478 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018478:	b580      	push	{r7, lr}
 801847a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801847c:	4b07      	ldr	r3, [pc, #28]	@ (801849c <RadioOnRxTimeoutProcess+0x24>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d008      	beq.n	8018496 <RadioOnRxTimeoutProcess+0x1e>
 8018484:	4b05      	ldr	r3, [pc, #20]	@ (801849c <RadioOnRxTimeoutProcess+0x24>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	68db      	ldr	r3, [r3, #12]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d003      	beq.n	8018496 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801848e:	4b03      	ldr	r3, [pc, #12]	@ (801849c <RadioOnRxTimeoutProcess+0x24>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	68db      	ldr	r3, [r3, #12]
 8018494:	4798      	blx	r3
    }
}
 8018496:	bf00      	nop
 8018498:	bd80      	pop	{r7, pc}
 801849a:	bf00      	nop
 801849c:	20001c34 	.word	0x20001c34

080184a0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b082      	sub	sp, #8
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	4603      	mov	r3, r0
 80184a8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80184aa:	4a05      	ldr	r2, [pc, #20]	@ (80184c0 <RadioOnDioIrq+0x20>)
 80184ac:	88fb      	ldrh	r3, [r7, #6]
 80184ae:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80184b2:	f000 f807 	bl	80184c4 <RadioIrqProcess>
}
 80184b6:	bf00      	nop
 80184b8:	3708      	adds	r7, #8
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
 80184be:	bf00      	nop
 80184c0:	20001c38 	.word	0x20001c38

080184c4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80184c4:	b5b0      	push	{r4, r5, r7, lr}
 80184c6:	b082      	sub	sp, #8
 80184c8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80184ca:	2300      	movs	r3, #0
 80184cc:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80184ce:	2300      	movs	r3, #0
 80184d0:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80184d2:	4ba5      	ldr	r3, [pc, #660]	@ (8018768 <RadioIrqProcess+0x2a4>)
 80184d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80184d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80184dc:	f000 810d 	beq.w	80186fa <RadioIrqProcess+0x236>
 80184e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80184e4:	f300 81c0 	bgt.w	8018868 <RadioIrqProcess+0x3a4>
 80184e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80184ec:	f000 80f1 	beq.w	80186d2 <RadioIrqProcess+0x20e>
 80184f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80184f4:	f300 81b8 	bgt.w	8018868 <RadioIrqProcess+0x3a4>
 80184f8:	2b80      	cmp	r3, #128	@ 0x80
 80184fa:	f000 80d6 	beq.w	80186aa <RadioIrqProcess+0x1e6>
 80184fe:	2b80      	cmp	r3, #128	@ 0x80
 8018500:	f300 81b2 	bgt.w	8018868 <RadioIrqProcess+0x3a4>
 8018504:	2b20      	cmp	r3, #32
 8018506:	dc49      	bgt.n	801859c <RadioIrqProcess+0xd8>
 8018508:	2b00      	cmp	r3, #0
 801850a:	f340 81ad 	ble.w	8018868 <RadioIrqProcess+0x3a4>
 801850e:	3b01      	subs	r3, #1
 8018510:	2b1f      	cmp	r3, #31
 8018512:	f200 81a9 	bhi.w	8018868 <RadioIrqProcess+0x3a4>
 8018516:	a201      	add	r2, pc, #4	@ (adr r2, 801851c <RadioIrqProcess+0x58>)
 8018518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801851c:	080185a5 	.word	0x080185a5
 8018520:	080185df 	.word	0x080185df
 8018524:	08018869 	.word	0x08018869
 8018528:	08018785 	.word	0x08018785
 801852c:	08018869 	.word	0x08018869
 8018530:	08018869 	.word	0x08018869
 8018534:	08018869 	.word	0x08018869
 8018538:	080187f3 	.word	0x080187f3
 801853c:	08018869 	.word	0x08018869
 8018540:	08018869 	.word	0x08018869
 8018544:	08018869 	.word	0x08018869
 8018548:	08018869 	.word	0x08018869
 801854c:	08018869 	.word	0x08018869
 8018550:	08018869 	.word	0x08018869
 8018554:	08018869 	.word	0x08018869
 8018558:	08018869 	.word	0x08018869
 801855c:	08018869 	.word	0x08018869
 8018560:	08018869 	.word	0x08018869
 8018564:	08018869 	.word	0x08018869
 8018568:	08018869 	.word	0x08018869
 801856c:	08018869 	.word	0x08018869
 8018570:	08018869 	.word	0x08018869
 8018574:	08018869 	.word	0x08018869
 8018578:	08018869 	.word	0x08018869
 801857c:	08018869 	.word	0x08018869
 8018580:	08018869 	.word	0x08018869
 8018584:	08018869 	.word	0x08018869
 8018588:	08018869 	.word	0x08018869
 801858c:	08018869 	.word	0x08018869
 8018590:	08018869 	.word	0x08018869
 8018594:	08018869 	.word	0x08018869
 8018598:	08018803 	.word	0x08018803
 801859c:	2b40      	cmp	r3, #64	@ 0x40
 801859e:	f000 814b 	beq.w	8018838 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80185a2:	e161      	b.n	8018868 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80185a4:	4871      	ldr	r0, [pc, #452]	@ (801876c <RadioIrqProcess+0x2a8>)
 80185a6:	f002 ff47 	bl	801b438 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80185aa:	2000      	movs	r0, #0
 80185ac:	f000 fff2 	bl	8019594 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80185b0:	f002 f882 	bl	801a6b8 <RFW_Is_LongPacketModeEnabled>
 80185b4:	4603      	mov	r3, r0
 80185b6:	2b01      	cmp	r3, #1
 80185b8:	d101      	bne.n	80185be <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80185ba:	f002 f8a6 	bl	801a70a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80185be:	4b6c      	ldr	r3, [pc, #432]	@ (8018770 <RadioIrqProcess+0x2ac>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	f000 8152 	beq.w	801886c <RadioIrqProcess+0x3a8>
 80185c8:	4b69      	ldr	r3, [pc, #420]	@ (8018770 <RadioIrqProcess+0x2ac>)
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	f000 814c 	beq.w	801886c <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 80185d4:	4b66      	ldr	r3, [pc, #408]	@ (8018770 <RadioIrqProcess+0x2ac>)
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	4798      	blx	r3
        break;
 80185dc:	e146      	b.n	801886c <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 80185de:	4865      	ldr	r0, [pc, #404]	@ (8018774 <RadioIrqProcess+0x2b0>)
 80185e0:	f002 ff2a 	bl	801b438 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80185e4:	4b60      	ldr	r3, [pc, #384]	@ (8018768 <RadioIrqProcess+0x2a4>)
 80185e6:	785b      	ldrb	r3, [r3, #1]
 80185e8:	f083 0301 	eor.w	r3, r3, #1
 80185ec:	b2db      	uxtb	r3, r3
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d014      	beq.n	801861c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80185f2:	2000      	movs	r0, #0
 80185f4:	f000 ffce 	bl	8019594 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80185f8:	2100      	movs	r1, #0
 80185fa:	f640 1002 	movw	r0, #2306	@ 0x902
 80185fe:	f001 fd4d 	bl	801a09c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018602:	f640 1044 	movw	r0, #2372	@ 0x944
 8018606:	f001 fd6b 	bl	801a0e0 <SUBGRF_ReadRegister>
 801860a:	4603      	mov	r3, r0
 801860c:	f043 0302 	orr.w	r3, r3, #2
 8018610:	b2db      	uxtb	r3, r3
 8018612:	4619      	mov	r1, r3
 8018614:	f640 1044 	movw	r0, #2372	@ 0x944
 8018618:	f001 fd40 	bl	801a09c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801861c:	1dfb      	adds	r3, r7, #7
 801861e:	22ff      	movs	r2, #255	@ 0xff
 8018620:	4619      	mov	r1, r3
 8018622:	4855      	ldr	r0, [pc, #340]	@ (8018778 <RadioIrqProcess+0x2b4>)
 8018624:	f000 fe84 	bl	8019330 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018628:	4854      	ldr	r0, [pc, #336]	@ (801877c <RadioIrqProcess+0x2b8>)
 801862a:	f001 fce5 	bl	8019ff8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801862e:	4b50      	ldr	r3, [pc, #320]	@ (8018770 <RadioIrqProcess+0x2ac>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	f000 811c 	beq.w	8018870 <RadioIrqProcess+0x3ac>
 8018638:	4b4d      	ldr	r3, [pc, #308]	@ (8018770 <RadioIrqProcess+0x2ac>)
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	689b      	ldr	r3, [r3, #8]
 801863e:	2b00      	cmp	r3, #0
 8018640:	f000 8116 	beq.w	8018870 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8018644:	4b48      	ldr	r3, [pc, #288]	@ (8018768 <RadioIrqProcess+0x2a4>)
 8018646:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801864a:	2b01      	cmp	r3, #1
 801864c:	d10e      	bne.n	801866c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801864e:	4b48      	ldr	r3, [pc, #288]	@ (8018770 <RadioIrqProcess+0x2ac>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	689c      	ldr	r4, [r3, #8]
 8018654:	79fb      	ldrb	r3, [r7, #7]
 8018656:	4619      	mov	r1, r3
 8018658:	4b43      	ldr	r3, [pc, #268]	@ (8018768 <RadioIrqProcess+0x2a4>)
 801865a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 801865e:	461a      	mov	r2, r3
 8018660:	4b41      	ldr	r3, [pc, #260]	@ (8018768 <RadioIrqProcess+0x2a4>)
 8018662:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8018666:	4844      	ldr	r0, [pc, #272]	@ (8018778 <RadioIrqProcess+0x2b4>)
 8018668:	47a0      	blx	r4
                break;
 801866a:	e01d      	b.n	80186a8 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801866c:	4b3e      	ldr	r3, [pc, #248]	@ (8018768 <RadioIrqProcess+0x2a4>)
 801866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018670:	463a      	mov	r2, r7
 8018672:	4611      	mov	r1, r2
 8018674:	4618      	mov	r0, r3
 8018676:	f001 ff6d 	bl	801a554 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801867a:	4b3d      	ldr	r3, [pc, #244]	@ (8018770 <RadioIrqProcess+0x2ac>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	689c      	ldr	r4, [r3, #8]
 8018680:	79fb      	ldrb	r3, [r7, #7]
 8018682:	4619      	mov	r1, r3
 8018684:	4b38      	ldr	r3, [pc, #224]	@ (8018768 <RadioIrqProcess+0x2a4>)
 8018686:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 801868a:	4618      	mov	r0, r3
 801868c:	683b      	ldr	r3, [r7, #0]
 801868e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8018692:	4a3b      	ldr	r2, [pc, #236]	@ (8018780 <RadioIrqProcess+0x2bc>)
 8018694:	fb82 5203 	smull	r5, r2, r2, r3
 8018698:	1192      	asrs	r2, r2, #6
 801869a:	17db      	asrs	r3, r3, #31
 801869c:	1ad3      	subs	r3, r2, r3
 801869e:	b25b      	sxtb	r3, r3
 80186a0:	4602      	mov	r2, r0
 80186a2:	4835      	ldr	r0, [pc, #212]	@ (8018778 <RadioIrqProcess+0x2b4>)
 80186a4:	47a0      	blx	r4
                break;
 80186a6:	bf00      	nop
        break;
 80186a8:	e0e2      	b.n	8018870 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80186aa:	2000      	movs	r0, #0
 80186ac:	f000 ff72 	bl	8019594 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80186b0:	4b2f      	ldr	r3, [pc, #188]	@ (8018770 <RadioIrqProcess+0x2ac>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	f000 80dd 	beq.w	8018874 <RadioIrqProcess+0x3b0>
 80186ba:	4b2d      	ldr	r3, [pc, #180]	@ (8018770 <RadioIrqProcess+0x2ac>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	699b      	ldr	r3, [r3, #24]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	f000 80d7 	beq.w	8018874 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 80186c6:	4b2a      	ldr	r3, [pc, #168]	@ (8018770 <RadioIrqProcess+0x2ac>)
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	699b      	ldr	r3, [r3, #24]
 80186cc:	2000      	movs	r0, #0
 80186ce:	4798      	blx	r3
        break;
 80186d0:	e0d0      	b.n	8018874 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 80186d2:	2000      	movs	r0, #0
 80186d4:	f000 ff5e 	bl	8019594 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80186d8:	4b25      	ldr	r3, [pc, #148]	@ (8018770 <RadioIrqProcess+0x2ac>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	f000 80cb 	beq.w	8018878 <RadioIrqProcess+0x3b4>
 80186e2:	4b23      	ldr	r3, [pc, #140]	@ (8018770 <RadioIrqProcess+0x2ac>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	699b      	ldr	r3, [r3, #24]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	f000 80c5 	beq.w	8018878 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 80186ee:	4b20      	ldr	r3, [pc, #128]	@ (8018770 <RadioIrqProcess+0x2ac>)
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	699b      	ldr	r3, [r3, #24]
 80186f4:	2001      	movs	r0, #1
 80186f6:	4798      	blx	r3
        break;
 80186f8:	e0be      	b.n	8018878 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80186fa:	f000 fdff 	bl	80192fc <SUBGRF_GetOperatingMode>
 80186fe:	4603      	mov	r3, r0
 8018700:	2b04      	cmp	r3, #4
 8018702:	d115      	bne.n	8018730 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8018704:	4819      	ldr	r0, [pc, #100]	@ (801876c <RadioIrqProcess+0x2a8>)
 8018706:	f002 fe97 	bl	801b438 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801870a:	2000      	movs	r0, #0
 801870c:	f000 ff42 	bl	8019594 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018710:	4b17      	ldr	r3, [pc, #92]	@ (8018770 <RadioIrqProcess+0x2ac>)
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	2b00      	cmp	r3, #0
 8018716:	f000 80b1 	beq.w	801887c <RadioIrqProcess+0x3b8>
 801871a:	4b15      	ldr	r3, [pc, #84]	@ (8018770 <RadioIrqProcess+0x2ac>)
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	685b      	ldr	r3, [r3, #4]
 8018720:	2b00      	cmp	r3, #0
 8018722:	f000 80ab 	beq.w	801887c <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8018726:	4b12      	ldr	r3, [pc, #72]	@ (8018770 <RadioIrqProcess+0x2ac>)
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	685b      	ldr	r3, [r3, #4]
 801872c:	4798      	blx	r3
        break;
 801872e:	e0a5      	b.n	801887c <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018730:	f000 fde4 	bl	80192fc <SUBGRF_GetOperatingMode>
 8018734:	4603      	mov	r3, r0
 8018736:	2b05      	cmp	r3, #5
 8018738:	f040 80a0 	bne.w	801887c <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 801873c:	480d      	ldr	r0, [pc, #52]	@ (8018774 <RadioIrqProcess+0x2b0>)
 801873e:	f002 fe7b 	bl	801b438 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018742:	2000      	movs	r0, #0
 8018744:	f000 ff26 	bl	8019594 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018748:	4b09      	ldr	r3, [pc, #36]	@ (8018770 <RadioIrqProcess+0x2ac>)
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	2b00      	cmp	r3, #0
 801874e:	f000 8095 	beq.w	801887c <RadioIrqProcess+0x3b8>
 8018752:	4b07      	ldr	r3, [pc, #28]	@ (8018770 <RadioIrqProcess+0x2ac>)
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	68db      	ldr	r3, [r3, #12]
 8018758:	2b00      	cmp	r3, #0
 801875a:	f000 808f 	beq.w	801887c <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 801875e:	4b04      	ldr	r3, [pc, #16]	@ (8018770 <RadioIrqProcess+0x2ac>)
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	68db      	ldr	r3, [r3, #12]
 8018764:	4798      	blx	r3
        break;
 8018766:	e089      	b.n	801887c <RadioIrqProcess+0x3b8>
 8018768:	20001c38 	.word	0x20001c38
 801876c:	20001c94 	.word	0x20001c94
 8018770:	20001c34 	.word	0x20001c34
 8018774:	20001cac 	.word	0x20001cac
 8018778:	20001b34 	.word	0x20001b34
 801877c:	20001c5c 	.word	0x20001c5c
 8018780:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018784:	4b44      	ldr	r3, [pc, #272]	@ (8018898 <RadioIrqProcess+0x3d4>)
 8018786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018788:	2b00      	cmp	r3, #0
 801878a:	d079      	beq.n	8018880 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801878c:	4a43      	ldr	r2, [pc, #268]	@ (801889c <RadioIrqProcess+0x3d8>)
 801878e:	4b42      	ldr	r3, [pc, #264]	@ (8018898 <RadioIrqProcess+0x3d4>)
 8018790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018792:	0c1b      	lsrs	r3, r3, #16
 8018794:	b2db      	uxtb	r3, r3
 8018796:	4619      	mov	r1, r3
 8018798:	f640 1003 	movw	r0, #2307	@ 0x903
 801879c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801879e:	4a3f      	ldr	r2, [pc, #252]	@ (801889c <RadioIrqProcess+0x3d8>)
 80187a0:	4b3d      	ldr	r3, [pc, #244]	@ (8018898 <RadioIrqProcess+0x3d4>)
 80187a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80187a4:	0a1b      	lsrs	r3, r3, #8
 80187a6:	b2db      	uxtb	r3, r3
 80187a8:	4619      	mov	r1, r3
 80187aa:	f640 1004 	movw	r0, #2308	@ 0x904
 80187ae:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80187b0:	4a3a      	ldr	r2, [pc, #232]	@ (801889c <RadioIrqProcess+0x3d8>)
 80187b2:	4b39      	ldr	r3, [pc, #228]	@ (8018898 <RadioIrqProcess+0x3d4>)
 80187b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80187b6:	b2db      	uxtb	r3, r3
 80187b8:	4619      	mov	r1, r3
 80187ba:	f640 1005 	movw	r0, #2309	@ 0x905
 80187be:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80187c0:	4c36      	ldr	r4, [pc, #216]	@ (801889c <RadioIrqProcess+0x3d8>)
 80187c2:	4b37      	ldr	r3, [pc, #220]	@ (80188a0 <RadioIrqProcess+0x3dc>)
 80187c4:	f640 1002 	movw	r0, #2306	@ 0x902
 80187c8:	4798      	blx	r3
 80187ca:	4603      	mov	r3, r0
 80187cc:	f043 0301 	orr.w	r3, r3, #1
 80187d0:	b2db      	uxtb	r3, r3
 80187d2:	4619      	mov	r1, r3
 80187d4:	f640 1002 	movw	r0, #2306	@ 0x902
 80187d8:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80187da:	4b2f      	ldr	r3, [pc, #188]	@ (8018898 <RadioIrqProcess+0x3d4>)
 80187dc:	2200      	movs	r2, #0
 80187de:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80187e0:	2300      	movs	r3, #0
 80187e2:	2200      	movs	r2, #0
 80187e4:	f240 2162 	movw	r1, #610	@ 0x262
 80187e8:	f240 2062 	movw	r0, #610	@ 0x262
 80187ec:	f001 f8ac 	bl	8019948 <SUBGRF_SetDioIrqParams>
        break;
 80187f0:	e046      	b.n	8018880 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 80187f2:	f001 ff5a 	bl	801a6aa <RFW_Is_Init>
 80187f6:	4603      	mov	r3, r0
 80187f8:	2b01      	cmp	r3, #1
 80187fa:	d143      	bne.n	8018884 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 80187fc:	f001 ff8b 	bl	801a716 <RFW_ReceivePayload>
        break;
 8018800:	e040      	b.n	8018884 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8018802:	4828      	ldr	r0, [pc, #160]	@ (80188a4 <RadioIrqProcess+0x3e0>)
 8018804:	f002 fe18 	bl	801b438 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018808:	4b23      	ldr	r3, [pc, #140]	@ (8018898 <RadioIrqProcess+0x3d4>)
 801880a:	785b      	ldrb	r3, [r3, #1]
 801880c:	f083 0301 	eor.w	r3, r3, #1
 8018810:	b2db      	uxtb	r3, r3
 8018812:	2b00      	cmp	r3, #0
 8018814:	d002      	beq.n	801881c <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8018816:	2000      	movs	r0, #0
 8018818:	f000 febc 	bl	8019594 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801881c:	4b22      	ldr	r3, [pc, #136]	@ (80188a8 <RadioIrqProcess+0x3e4>)
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d031      	beq.n	8018888 <RadioIrqProcess+0x3c4>
 8018824:	4b20      	ldr	r3, [pc, #128]	@ (80188a8 <RadioIrqProcess+0x3e4>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	68db      	ldr	r3, [r3, #12]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d02c      	beq.n	8018888 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 801882e:	4b1e      	ldr	r3, [pc, #120]	@ (80188a8 <RadioIrqProcess+0x3e4>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	68db      	ldr	r3, [r3, #12]
 8018834:	4798      	blx	r3
        break;
 8018836:	e027      	b.n	8018888 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8018838:	4b17      	ldr	r3, [pc, #92]	@ (8018898 <RadioIrqProcess+0x3d4>)
 801883a:	785b      	ldrb	r3, [r3, #1]
 801883c:	f083 0301 	eor.w	r3, r3, #1
 8018840:	b2db      	uxtb	r3, r3
 8018842:	2b00      	cmp	r3, #0
 8018844:	d002      	beq.n	801884c <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8018846:	2000      	movs	r0, #0
 8018848:	f000 fea4 	bl	8019594 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801884c:	4b16      	ldr	r3, [pc, #88]	@ (80188a8 <RadioIrqProcess+0x3e4>)
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d01b      	beq.n	801888c <RadioIrqProcess+0x3c8>
 8018854:	4b14      	ldr	r3, [pc, #80]	@ (80188a8 <RadioIrqProcess+0x3e4>)
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	691b      	ldr	r3, [r3, #16]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d016      	beq.n	801888c <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 801885e:	4b12      	ldr	r3, [pc, #72]	@ (80188a8 <RadioIrqProcess+0x3e4>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	691b      	ldr	r3, [r3, #16]
 8018864:	4798      	blx	r3
        break;
 8018866:	e011      	b.n	801888c <RadioIrqProcess+0x3c8>
        break;
 8018868:	bf00      	nop
 801886a:	e010      	b.n	801888e <RadioIrqProcess+0x3ca>
        break;
 801886c:	bf00      	nop
 801886e:	e00e      	b.n	801888e <RadioIrqProcess+0x3ca>
        break;
 8018870:	bf00      	nop
 8018872:	e00c      	b.n	801888e <RadioIrqProcess+0x3ca>
        break;
 8018874:	bf00      	nop
 8018876:	e00a      	b.n	801888e <RadioIrqProcess+0x3ca>
        break;
 8018878:	bf00      	nop
 801887a:	e008      	b.n	801888e <RadioIrqProcess+0x3ca>
        break;
 801887c:	bf00      	nop
 801887e:	e006      	b.n	801888e <RadioIrqProcess+0x3ca>
        break;
 8018880:	bf00      	nop
 8018882:	e004      	b.n	801888e <RadioIrqProcess+0x3ca>
        break;
 8018884:	bf00      	nop
 8018886:	e002      	b.n	801888e <RadioIrqProcess+0x3ca>
        break;
 8018888:	bf00      	nop
 801888a:	e000      	b.n	801888e <RadioIrqProcess+0x3ca>
        break;
 801888c:	bf00      	nop
    }
}
 801888e:	bf00      	nop
 8018890:	3708      	adds	r7, #8
 8018892:	46bd      	mov	sp, r7
 8018894:	bdb0      	pop	{r4, r5, r7, pc}
 8018896:	bf00      	nop
 8018898:	20001c38 	.word	0x20001c38
 801889c:	080182d5 	.word	0x080182d5
 80188a0:	080182f9 	.word	0x080182f9
 80188a4:	20001cac 	.word	0x20001cac
 80188a8:	20001c34 	.word	0x20001c34

080188ac <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80188b0:	4b09      	ldr	r3, [pc, #36]	@ (80188d8 <RadioTxPrbs+0x2c>)
 80188b2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80188b6:	2101      	movs	r1, #1
 80188b8:	4618      	mov	r0, r3
 80188ba:	f001 fcfd 	bl	801a2b8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80188be:	4b07      	ldr	r3, [pc, #28]	@ (80188dc <RadioTxPrbs+0x30>)
 80188c0:	212d      	movs	r1, #45	@ 0x2d
 80188c2:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80188c6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80188c8:	f000 ff27 	bl	801971a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80188cc:	4804      	ldr	r0, [pc, #16]	@ (80188e0 <RadioTxPrbs+0x34>)
 80188ce:	f000 fe7d 	bl	80195cc <SUBGRF_SetTx>
}
 80188d2:	bf00      	nop
 80188d4:	bd80      	pop	{r7, pc}
 80188d6:	bf00      	nop
 80188d8:	20001c38 	.word	0x20001c38
 80188dc:	080182d5 	.word	0x080182d5
 80188e0:	000fffff 	.word	0x000fffff

080188e4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b084      	sub	sp, #16
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	4603      	mov	r3, r0
 80188ec:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80188ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188f2:	4618      	mov	r0, r3
 80188f4:	f001 fd08 	bl	801a308 <SUBGRF_SetRfTxPower>
 80188f8:	4603      	mov	r3, r0
 80188fa:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80188fc:	210e      	movs	r1, #14
 80188fe:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018902:	f001 fbcb 	bl	801a09c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018906:	7bfb      	ldrb	r3, [r7, #15]
 8018908:	2101      	movs	r1, #1
 801890a:	4618      	mov	r0, r3
 801890c:	f001 fcd4 	bl	801a2b8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018910:	f000 fefa 	bl	8019708 <SUBGRF_SetTxContinuousWave>
}
 8018914:	bf00      	nop
 8018916:	3710      	adds	r7, #16
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}

0801891c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801891c:	b480      	push	{r7}
 801891e:	b089      	sub	sp, #36	@ 0x24
 8018920:	af00      	add	r7, sp, #0
 8018922:	60f8      	str	r0, [r7, #12]
 8018924:	60b9      	str	r1, [r7, #8]
 8018926:	4613      	mov	r3, r2
 8018928:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801892a:	2300      	movs	r3, #0
 801892c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801892e:	2300      	movs	r3, #0
 8018930:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8018932:	2300      	movs	r3, #0
 8018934:	61bb      	str	r3, [r7, #24]
 8018936:	e011      	b.n	801895c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8018938:	69bb      	ldr	r3, [r7, #24]
 801893a:	68ba      	ldr	r2, [r7, #8]
 801893c:	4413      	add	r3, r2
 801893e:	781a      	ldrb	r2, [r3, #0]
 8018940:	69bb      	ldr	r3, [r7, #24]
 8018942:	68b9      	ldr	r1, [r7, #8]
 8018944:	440b      	add	r3, r1
 8018946:	43d2      	mvns	r2, r2
 8018948:	b2d2      	uxtb	r2, r2
 801894a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801894c:	69bb      	ldr	r3, [r7, #24]
 801894e:	68fa      	ldr	r2, [r7, #12]
 8018950:	4413      	add	r3, r2
 8018952:	2200      	movs	r2, #0
 8018954:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018956:	69bb      	ldr	r3, [r7, #24]
 8018958:	3301      	adds	r3, #1
 801895a:	61bb      	str	r3, [r7, #24]
 801895c:	79fb      	ldrb	r3, [r7, #7]
 801895e:	69ba      	ldr	r2, [r7, #24]
 8018960:	429a      	cmp	r2, r3
 8018962:	dbe9      	blt.n	8018938 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8018964:	2300      	movs	r3, #0
 8018966:	61bb      	str	r3, [r7, #24]
 8018968:	e049      	b.n	80189fe <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801896a:	69bb      	ldr	r3, [r7, #24]
 801896c:	425a      	negs	r2, r3
 801896e:	f003 0307 	and.w	r3, r3, #7
 8018972:	f002 0207 	and.w	r2, r2, #7
 8018976:	bf58      	it	pl
 8018978:	4253      	negpl	r3, r2
 801897a:	b2db      	uxtb	r3, r3
 801897c:	f1c3 0307 	rsb	r3, r3, #7
 8018980:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8018982:	69bb      	ldr	r3, [r7, #24]
 8018984:	2b00      	cmp	r3, #0
 8018986:	da00      	bge.n	801898a <payload_integration+0x6e>
 8018988:	3307      	adds	r3, #7
 801898a:	10db      	asrs	r3, r3, #3
 801898c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801898e:	69bb      	ldr	r3, [r7, #24]
 8018990:	3301      	adds	r3, #1
 8018992:	425a      	negs	r2, r3
 8018994:	f003 0307 	and.w	r3, r3, #7
 8018998:	f002 0207 	and.w	r2, r2, #7
 801899c:	bf58      	it	pl
 801899e:	4253      	negpl	r3, r2
 80189a0:	b2db      	uxtb	r3, r3
 80189a2:	f1c3 0307 	rsb	r3, r3, #7
 80189a6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80189a8:	69bb      	ldr	r3, [r7, #24]
 80189aa:	3301      	adds	r3, #1
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	da00      	bge.n	80189b2 <payload_integration+0x96>
 80189b0:	3307      	adds	r3, #7
 80189b2:	10db      	asrs	r3, r3, #3
 80189b4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80189b6:	7dbb      	ldrb	r3, [r7, #22]
 80189b8:	68ba      	ldr	r2, [r7, #8]
 80189ba:	4413      	add	r3, r2
 80189bc:	781b      	ldrb	r3, [r3, #0]
 80189be:	461a      	mov	r2, r3
 80189c0:	7dfb      	ldrb	r3, [r7, #23]
 80189c2:	fa42 f303 	asr.w	r3, r2, r3
 80189c6:	b2db      	uxtb	r3, r3
 80189c8:	f003 0301 	and.w	r3, r3, #1
 80189cc:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80189ce:	7ffa      	ldrb	r2, [r7, #31]
 80189d0:	7cfb      	ldrb	r3, [r7, #19]
 80189d2:	4053      	eors	r3, r2
 80189d4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80189d6:	7d3b      	ldrb	r3, [r7, #20]
 80189d8:	68fa      	ldr	r2, [r7, #12]
 80189da:	4413      	add	r3, r2
 80189dc:	781b      	ldrb	r3, [r3, #0]
 80189de:	b25a      	sxtb	r2, r3
 80189e0:	7ff9      	ldrb	r1, [r7, #31]
 80189e2:	7d7b      	ldrb	r3, [r7, #21]
 80189e4:	fa01 f303 	lsl.w	r3, r1, r3
 80189e8:	b25b      	sxtb	r3, r3
 80189ea:	4313      	orrs	r3, r2
 80189ec:	b259      	sxtb	r1, r3
 80189ee:	7d3b      	ldrb	r3, [r7, #20]
 80189f0:	68fa      	ldr	r2, [r7, #12]
 80189f2:	4413      	add	r3, r2
 80189f4:	b2ca      	uxtb	r2, r1
 80189f6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80189f8:	69bb      	ldr	r3, [r7, #24]
 80189fa:	3301      	adds	r3, #1
 80189fc:	61bb      	str	r3, [r7, #24]
 80189fe:	79fb      	ldrb	r3, [r7, #7]
 8018a00:	00db      	lsls	r3, r3, #3
 8018a02:	69ba      	ldr	r2, [r7, #24]
 8018a04:	429a      	cmp	r2, r3
 8018a06:	dbb0      	blt.n	801896a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018a08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018a0c:	01db      	lsls	r3, r3, #7
 8018a0e:	b25a      	sxtb	r2, r3
 8018a10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018a14:	019b      	lsls	r3, r3, #6
 8018a16:	b25b      	sxtb	r3, r3
 8018a18:	4313      	orrs	r3, r2
 8018a1a:	b25b      	sxtb	r3, r3
 8018a1c:	7ffa      	ldrb	r2, [r7, #31]
 8018a1e:	2a00      	cmp	r2, #0
 8018a20:	d101      	bne.n	8018a26 <payload_integration+0x10a>
 8018a22:	2220      	movs	r2, #32
 8018a24:	e000      	b.n	8018a28 <payload_integration+0x10c>
 8018a26:	2200      	movs	r2, #0
 8018a28:	4313      	orrs	r3, r2
 8018a2a:	b259      	sxtb	r1, r3
 8018a2c:	79fb      	ldrb	r3, [r7, #7]
 8018a2e:	68fa      	ldr	r2, [r7, #12]
 8018a30:	4413      	add	r3, r2
 8018a32:	b2ca      	uxtb	r2, r1
 8018a34:	701a      	strb	r2, [r3, #0]
}
 8018a36:	bf00      	nop
 8018a38:	3724      	adds	r7, #36	@ 0x24
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	bc80      	pop	{r7}
 8018a3e:	4770      	bx	lr

08018a40 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b08c      	sub	sp, #48	@ 0x30
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	60b9      	str	r1, [r7, #8]
 8018a48:	607a      	str	r2, [r7, #4]
 8018a4a:	603b      	str	r3, [r7, #0]
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8018a50:	2300      	movs	r3, #0
 8018a52:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8018a54:	f107 0320 	add.w	r3, r7, #32
 8018a58:	2200      	movs	r2, #0
 8018a5a:	601a      	str	r2, [r3, #0]
 8018a5c:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018a5e:	f001 fe1e 	bl	801a69e <RFW_DeInit>

    if( rxContinuous != 0 )
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d001      	beq.n	8018a6c <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	bf14      	ite	ne
 8018a72:	2301      	movne	r3, #1
 8018a74:	2300      	moveq	r3, #0
 8018a76:	b2da      	uxtb	r2, r3
 8018a78:	4ba3      	ldr	r3, [pc, #652]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018a7a:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8018a7c:	7bfb      	ldrb	r3, [r7, #15]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d003      	beq.n	8018a8a <RadioSetRxGenericConfig+0x4a>
 8018a82:	2b01      	cmp	r3, #1
 8018a84:	f000 80dc 	beq.w	8018c40 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8018a88:	e195      	b.n	8018db6 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	689b      	ldr	r3, [r3, #8]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d003      	beq.n	8018a9a <RadioSetRxGenericConfig+0x5a>
 8018a92:	68bb      	ldr	r3, [r7, #8]
 8018a94:	68db      	ldr	r3, [r3, #12]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d102      	bne.n	8018aa0 <RadioSetRxGenericConfig+0x60>
            return -1;
 8018a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8018a9e:	e18b      	b.n	8018db8 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	7f9b      	ldrb	r3, [r3, #30]
 8018aa4:	2b08      	cmp	r3, #8
 8018aa6:	d902      	bls.n	8018aae <RadioSetRxGenericConfig+0x6e>
            return -1;
 8018aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8018aac:	e184      	b.n	8018db8 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	6919      	ldr	r1, [r3, #16]
 8018ab2:	68bb      	ldr	r3, [r7, #8]
 8018ab4:	7f9b      	ldrb	r3, [r3, #30]
 8018ab6:	461a      	mov	r2, r3
 8018ab8:	f107 0320 	add.w	r3, r7, #32
 8018abc:	4618      	mov	r0, r3
 8018abe:	f001 fee1 	bl	801a884 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018ac2:	68bb      	ldr	r3, [r7, #8]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	bf14      	ite	ne
 8018aca:	2301      	movne	r3, #1
 8018acc:	2300      	moveq	r3, #0
 8018ace:	b2db      	uxtb	r3, r3
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f000 fe2b 	bl	801972c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018ad6:	4b8c      	ldr	r3, [pc, #560]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018ad8:	2200      	movs	r2, #0
 8018ada:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018ade:	68bb      	ldr	r3, [r7, #8]
 8018ae0:	689b      	ldr	r3, [r3, #8]
 8018ae2:	4a89      	ldr	r2, [pc, #548]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018ae4:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018ae6:	68bb      	ldr	r3, [r7, #8]
 8018ae8:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018aec:	4b86      	ldr	r3, [pc, #536]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	685b      	ldr	r3, [r3, #4]
 8018af6:	4618      	mov	r0, r3
 8018af8:	f001 fd04 	bl	801a504 <SUBGRF_GetFskBandwidthRegValue>
 8018afc:	4603      	mov	r3, r0
 8018afe:	461a      	mov	r2, r3
 8018b00:	4b81      	ldr	r3, [pc, #516]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018b02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018b06:	4b80      	ldr	r3, [pc, #512]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018b08:	2200      	movs	r2, #0
 8018b0a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018b0c:	68bb      	ldr	r3, [r7, #8]
 8018b0e:	68db      	ldr	r3, [r3, #12]
 8018b10:	b29b      	uxth	r3, r3
 8018b12:	00db      	lsls	r3, r3, #3
 8018b14:	b29a      	uxth	r2, r3
 8018b16:	4b7c      	ldr	r3, [pc, #496]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018b18:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018b1a:	68bb      	ldr	r3, [r7, #8]
 8018b1c:	7fda      	ldrb	r2, [r3, #31]
 8018b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018b20:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018b22:	68bb      	ldr	r3, [r7, #8]
 8018b24:	7f9b      	ldrb	r3, [r3, #30]
 8018b26:	00db      	lsls	r3, r3, #3
 8018b28:	b2da      	uxtb	r2, r3
 8018b2a:	4b77      	ldr	r3, [pc, #476]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018b2c:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8018b2e:	68bb      	ldr	r3, [r7, #8]
 8018b30:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8018b34:	4b74      	ldr	r3, [pc, #464]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018b36:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8018b38:	68bb      	ldr	r3, [r7, #8]
 8018b3a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d105      	bne.n	8018b4e <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8018b42:	68bb      	ldr	r3, [r7, #8]
 8018b44:	695b      	ldr	r3, [r3, #20]
 8018b46:	b2da      	uxtb	r2, r3
 8018b48:	4b6f      	ldr	r3, [pc, #444]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018b4a:	759a      	strb	r2, [r3, #22]
 8018b4c:	e00b      	b.n	8018b66 <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018b4e:	68bb      	ldr	r3, [r7, #8]
 8018b50:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018b54:	2b02      	cmp	r3, #2
 8018b56:	d103      	bne.n	8018b60 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018b58:	4b6b      	ldr	r3, [pc, #428]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018b5a:	22ff      	movs	r2, #255	@ 0xff
 8018b5c:	759a      	strb	r2, [r3, #22]
 8018b5e:	e002      	b.n	8018b66 <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018b60:	4b69      	ldr	r3, [pc, #420]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018b62:	22ff      	movs	r2, #255	@ 0xff
 8018b64:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018b66:	68bb      	ldr	r3, [r7, #8]
 8018b68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018b6c:	2b02      	cmp	r3, #2
 8018b6e:	d004      	beq.n	8018b7a <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018b76:	2b02      	cmp	r3, #2
 8018b78:	d12d      	bne.n	8018bd6 <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8018b7a:	68bb      	ldr	r3, [r7, #8]
 8018b7c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018b80:	2bf1      	cmp	r3, #241	@ 0xf1
 8018b82:	d00c      	beq.n	8018b9e <RadioSetRxGenericConfig+0x15e>
 8018b84:	68bb      	ldr	r3, [r7, #8]
 8018b86:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018b8a:	2bf2      	cmp	r3, #242	@ 0xf2
 8018b8c:	d007      	beq.n	8018b9e <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018b94:	2b01      	cmp	r3, #1
 8018b96:	d002      	beq.n	8018b9e <RadioSetRxGenericConfig+0x15e>
                return -1;
 8018b98:	f04f 33ff 	mov.w	r3, #4294967295
 8018b9c:	e10c      	b.n	8018db8 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018ba6:	4b59      	ldr	r3, [pc, #356]	@ (8018d0c <RadioSetRxGenericConfig+0x2cc>)
 8018ba8:	6819      	ldr	r1, [r3, #0]
 8018baa:	f107 0314 	add.w	r3, r7, #20
 8018bae:	4a58      	ldr	r2, [pc, #352]	@ (8018d10 <RadioSetRxGenericConfig+0x2d0>)
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f001 fd67 	bl	801a684 <RFW_Init>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d002      	beq.n	8018bc2 <RadioSetRxGenericConfig+0x182>
                return -1;
 8018bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8018bc0:	e0fa      	b.n	8018db8 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018bc2:	4b51      	ldr	r3, [pc, #324]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018bca:	2201      	movs	r2, #1
 8018bcc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018bce:	4b4e      	ldr	r3, [pc, #312]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	755a      	strb	r2, [r3, #21]
        {
 8018bd4:	e00e      	b.n	8018bf4 <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018bde:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018be6:	4b48      	ldr	r3, [pc, #288]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018be8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018bf0:	4b45      	ldr	r3, [pc, #276]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018bf2:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018bf4:	f7ff fa6d 	bl	80180d2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	f7fe fc09 	bl	8017410 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018bfe:	4845      	ldr	r0, [pc, #276]	@ (8018d14 <RadioSetRxGenericConfig+0x2d4>)
 8018c00:	f001 f838 	bl	8019c74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c04:	4844      	ldr	r0, [pc, #272]	@ (8018d18 <RadioSetRxGenericConfig+0x2d8>)
 8018c06:	f001 f903 	bl	8019e10 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018c0a:	f107 0320 	add.w	r3, r7, #32
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f000 fbc3 	bl	801939a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018c14:	68bb      	ldr	r3, [r7, #8]
 8018c16:	8b9b      	ldrh	r3, [r3, #28]
 8018c18:	4618      	mov	r0, r3
 8018c1a:	f000 fc0d 	bl	8019438 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	8b1b      	ldrh	r3, [r3, #24]
 8018c22:	4618      	mov	r0, r3
 8018c24:	f000 fbe8 	bl	80193f8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018c28:	683b      	ldr	r3, [r7, #0]
 8018c2a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018c2e:	fb03 f202 	mul.w	r2, r3, r2
 8018c32:	68bb      	ldr	r3, [r7, #8]
 8018c34:	689b      	ldr	r3, [r3, #8]
 8018c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c3a:	4a33      	ldr	r2, [pc, #204]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018c3c:	6093      	str	r3, [r2, #8]
        break;
 8018c3e:	e0ba      	b.n	8018db6 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8018c40:	68bb      	ldr	r3, [r7, #8]
 8018c42:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d102      	bne.n	8018c4e <RadioSetRxGenericConfig+0x20e>
            return -1;
 8018c48:	f04f 33ff 	mov.w	r3, #4294967295
 8018c4c:	e0b4      	b.n	8018db8 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018c4e:	68bb      	ldr	r3, [r7, #8]
 8018c50:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8018c54:	2b01      	cmp	r3, #1
 8018c56:	d105      	bne.n	8018c64 <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8018c58:	68bb      	ldr	r3, [r7, #8]
 8018c5a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8018c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018c62:	e002      	b.n	8018c6a <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 8018c64:	23ff      	movs	r3, #255	@ 0xff
 8018c66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	bf14      	ite	ne
 8018c72:	2301      	movne	r3, #1
 8018c74:	2300      	moveq	r3, #0
 8018c76:	b2db      	uxtb	r3, r3
 8018c78:	4618      	mov	r0, r3
 8018c7a:	f000 fd57 	bl	801972c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	b2db      	uxtb	r3, r3
 8018c82:	4618      	mov	r0, r3
 8018c84:	f000 fd61 	bl	801974a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018c88:	4b1f      	ldr	r3, [pc, #124]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018c8a:	2201      	movs	r2, #1
 8018c8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018c90:	68bb      	ldr	r3, [r7, #8]
 8018c92:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018c96:	4b1c      	ldr	r3, [pc, #112]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018c98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018c9c:	68bb      	ldr	r3, [r7, #8]
 8018c9e:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018ca2:	4b19      	ldr	r3, [pc, #100]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018ca8:	68bb      	ldr	r3, [r7, #8]
 8018caa:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018cae:	4b16      	ldr	r3, [pc, #88]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018cb0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018cb4:	68bb      	ldr	r3, [r7, #8]
 8018cb6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018cba:	2b02      	cmp	r3, #2
 8018cbc:	d010      	beq.n	8018ce0 <RadioSetRxGenericConfig+0x2a0>
 8018cbe:	2b02      	cmp	r3, #2
 8018cc0:	dc2c      	bgt.n	8018d1c <RadioSetRxGenericConfig+0x2dc>
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d002      	beq.n	8018ccc <RadioSetRxGenericConfig+0x28c>
 8018cc6:	2b01      	cmp	r3, #1
 8018cc8:	d005      	beq.n	8018cd6 <RadioSetRxGenericConfig+0x296>
            break;
 8018cca:	e027      	b.n	8018d1c <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018cce:	2200      	movs	r2, #0
 8018cd0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018cd4:	e023      	b.n	8018d1e <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018cd8:	2201      	movs	r2, #1
 8018cda:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018cde:	e01e      	b.n	8018d1e <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018ce0:	68bb      	ldr	r3, [r7, #8]
 8018ce2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018ce6:	2b0b      	cmp	r3, #11
 8018ce8:	d004      	beq.n	8018cf4 <RadioSetRxGenericConfig+0x2b4>
 8018cea:	68bb      	ldr	r3, [r7, #8]
 8018cec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018cf0:	2b0c      	cmp	r3, #12
 8018cf2:	d104      	bne.n	8018cfe <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018cf4:	4b04      	ldr	r3, [pc, #16]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018cf6:	2201      	movs	r2, #1
 8018cf8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018cfc:	e00f      	b.n	8018d1e <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018cfe:	4b02      	ldr	r3, [pc, #8]	@ (8018d08 <RadioSetRxGenericConfig+0x2c8>)
 8018d00:	2200      	movs	r2, #0
 8018d02:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018d06:	e00a      	b.n	8018d1e <RadioSetRxGenericConfig+0x2de>
 8018d08:	20001c38 	.word	0x20001c38
 8018d0c:	20001c34 	.word	0x20001c34
 8018d10:	20001cac 	.word	0x20001cac
 8018d14:	20001c70 	.word	0x20001c70
 8018d18:	20001c46 	.word	0x20001c46
            break;
 8018d1c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018d1e:	4b28      	ldr	r3, [pc, #160]	@ (8018dc0 <RadioSetRxGenericConfig+0x380>)
 8018d20:	2201      	movs	r2, #1
 8018d22:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8018d28:	4b25      	ldr	r3, [pc, #148]	@ (8018dc0 <RadioSetRxGenericConfig+0x380>)
 8018d2a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8018d32:	4b23      	ldr	r3, [pc, #140]	@ (8018dc0 <RadioSetRxGenericConfig+0x380>)
 8018d34:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018d36:	4a22      	ldr	r2, [pc, #136]	@ (8018dc0 <RadioSetRxGenericConfig+0x380>)
 8018d38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018d3c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018d3e:	68bb      	ldr	r3, [r7, #8]
 8018d40:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8018d44:	4b1e      	ldr	r3, [pc, #120]	@ (8018dc0 <RadioSetRxGenericConfig+0x380>)
 8018d46:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018d4a:	68bb      	ldr	r3, [r7, #8]
 8018d4c:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8018d50:	4b1b      	ldr	r3, [pc, #108]	@ (8018dc0 <RadioSetRxGenericConfig+0x380>)
 8018d52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8018d56:	f7ff f9bc 	bl	80180d2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018d5a:	2001      	movs	r0, #1
 8018d5c:	f7fe fb58 	bl	8017410 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018d60:	4818      	ldr	r0, [pc, #96]	@ (8018dc4 <RadioSetRxGenericConfig+0x384>)
 8018d62:	f000 ff87 	bl	8019c74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018d66:	4818      	ldr	r0, [pc, #96]	@ (8018dc8 <RadioSetRxGenericConfig+0x388>)
 8018d68:	f001 f852 	bl	8019e10 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018d6c:	4b14      	ldr	r3, [pc, #80]	@ (8018dc0 <RadioSetRxGenericConfig+0x380>)
 8018d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018d72:	2b01      	cmp	r3, #1
 8018d74:	d10d      	bne.n	8018d92 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018d76:	f240 7036 	movw	r0, #1846	@ 0x736
 8018d7a:	f001 f9b1 	bl	801a0e0 <SUBGRF_ReadRegister>
 8018d7e:	4603      	mov	r3, r0
 8018d80:	f023 0304 	bic.w	r3, r3, #4
 8018d84:	b2db      	uxtb	r3, r3
 8018d86:	4619      	mov	r1, r3
 8018d88:	f240 7036 	movw	r0, #1846	@ 0x736
 8018d8c:	f001 f986 	bl	801a09c <SUBGRF_WriteRegister>
 8018d90:	e00c      	b.n	8018dac <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018d92:	f240 7036 	movw	r0, #1846	@ 0x736
 8018d96:	f001 f9a3 	bl	801a0e0 <SUBGRF_ReadRegister>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	f043 0304 	orr.w	r3, r3, #4
 8018da0:	b2db      	uxtb	r3, r3
 8018da2:	4619      	mov	r1, r3
 8018da4:	f240 7036 	movw	r0, #1846	@ 0x736
 8018da8:	f001 f978 	bl	801a09c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018dac:	4b04      	ldr	r3, [pc, #16]	@ (8018dc0 <RadioSetRxGenericConfig+0x380>)
 8018dae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018db2:	609a      	str	r2, [r3, #8]
        break;
 8018db4:	bf00      	nop
    }
    return status;
 8018db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018db8:	4618      	mov	r0, r3
 8018dba:	3730      	adds	r7, #48	@ 0x30
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	bd80      	pop	{r7, pc}
 8018dc0:	20001c38 	.word	0x20001c38
 8018dc4:	20001c70 	.word	0x20001c70
 8018dc8:	20001c46 	.word	0x20001c46

08018dcc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b08e      	sub	sp, #56	@ 0x38
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	60b9      	str	r1, [r7, #8]
 8018dd4:	607b      	str	r3, [r7, #4]
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	73fb      	strb	r3, [r7, #15]
 8018dda:	4613      	mov	r3, r2
 8018ddc:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018dde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018de2:	2200      	movs	r2, #0
 8018de4:	601a      	str	r2, [r3, #0]
 8018de6:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018de8:	f001 fc59 	bl	801a69e <RFW_DeInit>
    switch( modem )
 8018dec:	7bfb      	ldrb	r3, [r7, #15]
 8018dee:	2b03      	cmp	r3, #3
 8018df0:	f200 8205 	bhi.w	80191fe <RadioSetTxGenericConfig+0x432>
 8018df4:	a201      	add	r2, pc, #4	@ (adr r2, 8018dfc <RadioSetTxGenericConfig+0x30>)
 8018df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dfa:	bf00      	nop
 8018dfc:	08018f81 	.word	0x08018f81
 8018e00:	080190c9 	.word	0x080190c9
 8018e04:	080191c1 	.word	0x080191c1
 8018e08:	08018e0d 	.word	0x08018e0d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8018e0c:	68bb      	ldr	r3, [r7, #8]
 8018e0e:	7c9b      	ldrb	r3, [r3, #18]
 8018e10:	2b08      	cmp	r3, #8
 8018e12:	d902      	bls.n	8018e1a <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8018e14:	f04f 33ff 	mov.w	r3, #4294967295
 8018e18:	e206      	b.n	8019228 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8018e1a:	68bb      	ldr	r3, [r7, #8]
 8018e1c:	6899      	ldr	r1, [r3, #8]
 8018e1e:	68bb      	ldr	r3, [r7, #8]
 8018e20:	7c9b      	ldrb	r3, [r3, #18]
 8018e22:	461a      	mov	r2, r3
 8018e24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f001 fd2b 	bl	801a884 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8018e2e:	68bb      	ldr	r3, [r7, #8]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d102      	bne.n	8018e3c <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 8018e36:	f04f 33ff 	mov.w	r3, #4294967295
 8018e3a:	e1f5      	b.n	8019228 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 8018e3c:	68bb      	ldr	r3, [r7, #8]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	f242 7210 	movw	r2, #10000	@ 0x2710
 8018e44:	4293      	cmp	r3, r2
 8018e46:	d813      	bhi.n	8018e70 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8018e48:	2302      	movs	r3, #2
 8018e4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8018e4e:	4b99      	ldr	r3, [pc, #612]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018e50:	2203      	movs	r2, #3
 8018e52:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018e54:	4b97      	ldr	r3, [pc, #604]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018e56:	2203      	movs	r2, #3
 8018e58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018e5c:	68bb      	ldr	r3, [r7, #8]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	4a94      	ldr	r2, [pc, #592]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018e62:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	7cda      	ldrb	r2, [r3, #19]
 8018e68:	4b92      	ldr	r3, [pc, #584]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018e6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018e6e:	e017      	b.n	8018ea0 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8018e70:	2300      	movs	r3, #0
 8018e72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018e76:	4b8f      	ldr	r3, [pc, #572]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018e78:	2200      	movs	r2, #0
 8018e7a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018e7c:	4b8d      	ldr	r3, [pc, #564]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018e7e:	2200      	movs	r2, #0
 8018e80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018e84:	68bb      	ldr	r3, [r7, #8]
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	4a8a      	ldr	r2, [pc, #552]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018e8a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018e8c:	68bb      	ldr	r3, [r7, #8]
 8018e8e:	7cda      	ldrb	r2, [r3, #19]
 8018e90:	4b88      	ldr	r3, [pc, #544]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018e92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8018e96:	68bb      	ldr	r3, [r7, #8]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	089b      	lsrs	r3, r3, #2
 8018e9c:	4a85      	ldr	r2, [pc, #532]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018e9e:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018ea0:	68bb      	ldr	r3, [r7, #8]
 8018ea2:	685b      	ldr	r3, [r3, #4]
 8018ea4:	b29b      	uxth	r3, r3
 8018ea6:	00db      	lsls	r3, r3, #3
 8018ea8:	b29a      	uxth	r2, r3
 8018eaa:	4b82      	ldr	r3, [pc, #520]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018eac:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018eae:	4b81      	ldr	r3, [pc, #516]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018eb0:	2204      	movs	r2, #4
 8018eb2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	7c9b      	ldrb	r3, [r3, #18]
 8018eb8:	00db      	lsls	r3, r3, #3
 8018eba:	b2da      	uxtb	r2, r3
 8018ebc:	4b7d      	ldr	r3, [pc, #500]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018ebe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018ec0:	4b7c      	ldr	r3, [pc, #496]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018ec6:	68bb      	ldr	r3, [r7, #8]
 8018ec8:	7d9b      	ldrb	r3, [r3, #22]
 8018eca:	2b02      	cmp	r3, #2
 8018ecc:	d003      	beq.n	8018ed6 <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018ece:	68bb      	ldr	r3, [r7, #8]
 8018ed0:	7d1b      	ldrb	r3, [r3, #20]
 8018ed2:	2b02      	cmp	r3, #2
 8018ed4:	d12b      	bne.n	8018f2e <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8018ed6:	68bb      	ldr	r3, [r7, #8]
 8018ed8:	7d5b      	ldrb	r3, [r3, #21]
 8018eda:	2bf1      	cmp	r3, #241	@ 0xf1
 8018edc:	d00a      	beq.n	8018ef4 <RadioSetTxGenericConfig+0x128>
 8018ede:	68bb      	ldr	r3, [r7, #8]
 8018ee0:	7d5b      	ldrb	r3, [r3, #21]
 8018ee2:	2bf2      	cmp	r3, #242	@ 0xf2
 8018ee4:	d006      	beq.n	8018ef4 <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	7d5b      	ldrb	r3, [r3, #21]
 8018eea:	2b01      	cmp	r3, #1
 8018eec:	d002      	beq.n	8018ef4 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 8018eee:	f04f 33ff 	mov.w	r3, #4294967295
 8018ef2:	e199      	b.n	8019228 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8018ef4:	68bb      	ldr	r3, [r7, #8]
 8018ef6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018ef8:	2301      	movs	r3, #1
 8018efa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018efe:	4b6e      	ldr	r3, [pc, #440]	@ (80190b8 <RadioSetTxGenericConfig+0x2ec>)
 8018f00:	6819      	ldr	r1, [r3, #0]
 8018f02:	f107 0320 	add.w	r3, r7, #32
 8018f06:	4a6d      	ldr	r2, [pc, #436]	@ (80190bc <RadioSetTxGenericConfig+0x2f0>)
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f001 fbbb 	bl	801a684 <RFW_Init>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d002      	beq.n	8018f1a <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 8018f14:	f04f 33ff 	mov.w	r3, #4294967295
 8018f18:	e186      	b.n	8019228 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018f1a:	4b66      	ldr	r3, [pc, #408]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018f1c:	2200      	movs	r2, #0
 8018f1e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018f20:	4b64      	ldr	r3, [pc, #400]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018f22:	2201      	movs	r2, #1
 8018f24:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018f26:	4b63      	ldr	r3, [pc, #396]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018f28:	2200      	movs	r2, #0
 8018f2a:	755a      	strb	r2, [r3, #21]
        {
 8018f2c:	e00b      	b.n	8018f46 <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8018f2e:	68bb      	ldr	r3, [r7, #8]
 8018f30:	7d5a      	ldrb	r2, [r3, #21]
 8018f32:	4b60      	ldr	r3, [pc, #384]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018f34:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	7d9a      	ldrb	r2, [r3, #22]
 8018f3a:	4b5e      	ldr	r3, [pc, #376]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018f3c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8018f3e:	68bb      	ldr	r3, [r7, #8]
 8018f40:	7d1a      	ldrb	r2, [r3, #20]
 8018f42:	4b5c      	ldr	r3, [pc, #368]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018f44:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018f46:	f7ff f8c4 	bl	80180d2 <RadioStandby>
        RadioSetModem( radio_modem );
 8018f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7fe fa5e 	bl	8017410 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f54:	485a      	ldr	r0, [pc, #360]	@ (80190c0 <RadioSetTxGenericConfig+0x2f4>)
 8018f56:	f000 fe8d 	bl	8019c74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f5a:	485a      	ldr	r0, [pc, #360]	@ (80190c4 <RadioSetTxGenericConfig+0x2f8>)
 8018f5c:	f000 ff58 	bl	8019e10 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018f60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018f64:	4618      	mov	r0, r3
 8018f66:	f000 fa18 	bl	801939a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8018f6a:	68bb      	ldr	r3, [r7, #8]
 8018f6c:	8a1b      	ldrh	r3, [r3, #16]
 8018f6e:	4618      	mov	r0, r3
 8018f70:	f000 fa62 	bl	8019438 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8018f74:	68bb      	ldr	r3, [r7, #8]
 8018f76:	899b      	ldrh	r3, [r3, #12]
 8018f78:	4618      	mov	r0, r3
 8018f7a:	f000 fa3d 	bl	80193f8 <SUBGRF_SetCrcPolynomial>
        break;
 8018f7e:	e13f      	b.n	8019200 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018f80:	68bb      	ldr	r3, [r7, #8]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d102      	bne.n	8018f8e <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8018f88:	f04f 33ff 	mov.w	r3, #4294967295
 8018f8c:	e14c      	b.n	8019228 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 8018f8e:	68bb      	ldr	r3, [r7, #8]
 8018f90:	7c9b      	ldrb	r3, [r3, #18]
 8018f92:	2b08      	cmp	r3, #8
 8018f94:	d902      	bls.n	8018f9c <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 8018f96:	f04f 33ff 	mov.w	r3, #4294967295
 8018f9a:	e145      	b.n	8019228 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018f9c:	68bb      	ldr	r3, [r7, #8]
 8018f9e:	6899      	ldr	r1, [r3, #8]
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	7c9b      	ldrb	r3, [r3, #18]
 8018fa4:	461a      	mov	r2, r3
 8018fa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018faa:	4618      	mov	r0, r3
 8018fac:	f001 fc6a 	bl	801a884 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018fb0:	4b40      	ldr	r3, [pc, #256]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	4a3d      	ldr	r2, [pc, #244]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018fbe:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018fc0:	68bb      	ldr	r3, [r7, #8]
 8018fc2:	7cda      	ldrb	r2, [r3, #19]
 8018fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018fc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018fca:	68bb      	ldr	r3, [r7, #8]
 8018fcc:	699b      	ldr	r3, [r3, #24]
 8018fce:	4a39      	ldr	r2, [pc, #228]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018fd0:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018fd2:	4b38      	ldr	r3, [pc, #224]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018fd8:	68bb      	ldr	r3, [r7, #8]
 8018fda:	685b      	ldr	r3, [r3, #4]
 8018fdc:	b29b      	uxth	r3, r3
 8018fde:	00db      	lsls	r3, r3, #3
 8018fe0:	b29a      	uxth	r2, r3
 8018fe2:	4b34      	ldr	r3, [pc, #208]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018fe4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018fe6:	4b33      	ldr	r3, [pc, #204]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018fe8:	2204      	movs	r2, #4
 8018fea:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018fec:	68bb      	ldr	r3, [r7, #8]
 8018fee:	7c9b      	ldrb	r3, [r3, #18]
 8018ff0:	00db      	lsls	r3, r3, #3
 8018ff2:	b2da      	uxtb	r2, r3
 8018ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018ff6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018ffe:	68bb      	ldr	r3, [r7, #8]
 8019000:	7d9b      	ldrb	r3, [r3, #22]
 8019002:	2b02      	cmp	r3, #2
 8019004:	d003      	beq.n	801900e <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019006:	68bb      	ldr	r3, [r7, #8]
 8019008:	7d1b      	ldrb	r3, [r3, #20]
 801900a:	2b02      	cmp	r3, #2
 801900c:	d12a      	bne.n	8019064 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	7d5b      	ldrb	r3, [r3, #21]
 8019012:	2bf1      	cmp	r3, #241	@ 0xf1
 8019014:	d00a      	beq.n	801902c <RadioSetTxGenericConfig+0x260>
 8019016:	68bb      	ldr	r3, [r7, #8]
 8019018:	7d5b      	ldrb	r3, [r3, #21]
 801901a:	2bf2      	cmp	r3, #242	@ 0xf2
 801901c:	d006      	beq.n	801902c <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801901e:	68bb      	ldr	r3, [r7, #8]
 8019020:	7d5b      	ldrb	r3, [r3, #21]
 8019022:	2b01      	cmp	r3, #1
 8019024:	d002      	beq.n	801902c <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 8019026:	f04f 33ff 	mov.w	r3, #4294967295
 801902a:	e0fd      	b.n	8019228 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801902c:	2301      	movs	r3, #1
 801902e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019034:	4b20      	ldr	r3, [pc, #128]	@ (80190b8 <RadioSetTxGenericConfig+0x2ec>)
 8019036:	6819      	ldr	r1, [r3, #0]
 8019038:	f107 0314 	add.w	r3, r7, #20
 801903c:	4a1f      	ldr	r2, [pc, #124]	@ (80190bc <RadioSetTxGenericConfig+0x2f0>)
 801903e:	4618      	mov	r0, r3
 8019040:	f001 fb20 	bl	801a684 <RFW_Init>
 8019044:	4603      	mov	r3, r0
 8019046:	2b00      	cmp	r3, #0
 8019048:	d002      	beq.n	8019050 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 801904a:	f04f 33ff 	mov.w	r3, #4294967295
 801904e:	e0eb      	b.n	8019228 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019050:	4b18      	ldr	r3, [pc, #96]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8019052:	2200      	movs	r2, #0
 8019054:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019056:	4b17      	ldr	r3, [pc, #92]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8019058:	2201      	movs	r2, #1
 801905a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801905c:	4b15      	ldr	r3, [pc, #84]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 801905e:	2200      	movs	r2, #0
 8019060:	755a      	strb	r2, [r3, #21]
        {
 8019062:	e00b      	b.n	801907c <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	7d5a      	ldrb	r2, [r3, #21]
 8019068:	4b12      	ldr	r3, [pc, #72]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 801906a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	7d9a      	ldrb	r2, [r3, #22]
 8019070:	4b10      	ldr	r3, [pc, #64]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 8019072:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	7d1a      	ldrb	r2, [r3, #20]
 8019078:	4b0e      	ldr	r3, [pc, #56]	@ (80190b4 <RadioSetTxGenericConfig+0x2e8>)
 801907a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801907c:	f7ff f829 	bl	80180d2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019080:	2000      	movs	r0, #0
 8019082:	f7fe f9c5 	bl	8017410 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019086:	480e      	ldr	r0, [pc, #56]	@ (80190c0 <RadioSetTxGenericConfig+0x2f4>)
 8019088:	f000 fdf4 	bl	8019c74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801908c:	480d      	ldr	r0, [pc, #52]	@ (80190c4 <RadioSetTxGenericConfig+0x2f8>)
 801908e:	f000 febf 	bl	8019e10 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019092:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019096:	4618      	mov	r0, r3
 8019098:	f000 f97f 	bl	801939a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801909c:	68bb      	ldr	r3, [r7, #8]
 801909e:	8a1b      	ldrh	r3, [r3, #16]
 80190a0:	4618      	mov	r0, r3
 80190a2:	f000 f9c9 	bl	8019438 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80190a6:	68bb      	ldr	r3, [r7, #8]
 80190a8:	899b      	ldrh	r3, [r3, #12]
 80190aa:	4618      	mov	r0, r3
 80190ac:	f000 f9a4 	bl	80193f8 <SUBGRF_SetCrcPolynomial>
        break;
 80190b0:	e0a6      	b.n	8019200 <RadioSetTxGenericConfig+0x434>
 80190b2:	bf00      	nop
 80190b4:	20001c38 	.word	0x20001c38
 80190b8:	20001c34 	.word	0x20001c34
 80190bc:	20001c94 	.word	0x20001c94
 80190c0:	20001c70 	.word	0x20001c70
 80190c4:	20001c46 	.word	0x20001c46
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80190c8:	4b59      	ldr	r3, [pc, #356]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 80190ca:	2201      	movs	r2, #1
 80190cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	781a      	ldrb	r2, [r3, #0]
 80190d4:	4b56      	ldr	r3, [pc, #344]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 80190d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80190da:	68bb      	ldr	r3, [r7, #8]
 80190dc:	785a      	ldrb	r2, [r3, #1]
 80190de:	4b54      	ldr	r3, [pc, #336]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 80190e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	789a      	ldrb	r2, [r3, #2]
 80190e8:	4b51      	ldr	r3, [pc, #324]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 80190ea:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80190ee:	68bb      	ldr	r3, [r7, #8]
 80190f0:	78db      	ldrb	r3, [r3, #3]
 80190f2:	2b02      	cmp	r3, #2
 80190f4:	d010      	beq.n	8019118 <RadioSetTxGenericConfig+0x34c>
 80190f6:	2b02      	cmp	r3, #2
 80190f8:	dc20      	bgt.n	801913c <RadioSetTxGenericConfig+0x370>
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d002      	beq.n	8019104 <RadioSetTxGenericConfig+0x338>
 80190fe:	2b01      	cmp	r3, #1
 8019100:	d005      	beq.n	801910e <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8019102:	e01b      	b.n	801913c <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019104:	4b4a      	ldr	r3, [pc, #296]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019106:	2200      	movs	r2, #0
 8019108:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801910c:	e017      	b.n	801913e <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801910e:	4b48      	ldr	r3, [pc, #288]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019110:	2201      	movs	r2, #1
 8019112:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019116:	e012      	b.n	801913e <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019118:	68bb      	ldr	r3, [r7, #8]
 801911a:	781b      	ldrb	r3, [r3, #0]
 801911c:	2b0b      	cmp	r3, #11
 801911e:	d003      	beq.n	8019128 <RadioSetTxGenericConfig+0x35c>
 8019120:	68bb      	ldr	r3, [r7, #8]
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	2b0c      	cmp	r3, #12
 8019126:	d104      	bne.n	8019132 <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019128:	4b41      	ldr	r3, [pc, #260]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 801912a:	2201      	movs	r2, #1
 801912c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019130:	e005      	b.n	801913e <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019132:	4b3f      	ldr	r3, [pc, #252]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019134:	2200      	movs	r2, #0
 8019136:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801913a:	e000      	b.n	801913e <RadioSetTxGenericConfig+0x372>
            break;
 801913c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801913e:	4b3c      	ldr	r3, [pc, #240]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019140:	2201      	movs	r2, #1
 8019142:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019144:	68bb      	ldr	r3, [r7, #8]
 8019146:	889a      	ldrh	r2, [r3, #4]
 8019148:	4b39      	ldr	r3, [pc, #228]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 801914a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801914c:	68bb      	ldr	r3, [r7, #8]
 801914e:	799a      	ldrb	r2, [r3, #6]
 8019150:	4b37      	ldr	r3, [pc, #220]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019152:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019154:	68bb      	ldr	r3, [r7, #8]
 8019156:	79da      	ldrb	r2, [r3, #7]
 8019158:	4b35      	ldr	r3, [pc, #212]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 801915a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801915e:	68bb      	ldr	r3, [r7, #8]
 8019160:	7a1a      	ldrb	r2, [r3, #8]
 8019162:	4b33      	ldr	r3, [pc, #204]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019164:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8019168:	f7fe ffb3 	bl	80180d2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801916c:	2001      	movs	r0, #1
 801916e:	f7fe f94f 	bl	8017410 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019172:	4830      	ldr	r0, [pc, #192]	@ (8019234 <RadioSetTxGenericConfig+0x468>)
 8019174:	f000 fd7e 	bl	8019c74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019178:	482f      	ldr	r0, [pc, #188]	@ (8019238 <RadioSetTxGenericConfig+0x46c>)
 801917a:	f000 fe49 	bl	8019e10 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801917e:	4b2c      	ldr	r3, [pc, #176]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019180:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019184:	2b06      	cmp	r3, #6
 8019186:	d10d      	bne.n	80191a4 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019188:	f640 0089 	movw	r0, #2185	@ 0x889
 801918c:	f000 ffa8 	bl	801a0e0 <SUBGRF_ReadRegister>
 8019190:	4603      	mov	r3, r0
 8019192:	f023 0304 	bic.w	r3, r3, #4
 8019196:	b2db      	uxtb	r3, r3
 8019198:	4619      	mov	r1, r3
 801919a:	f640 0089 	movw	r0, #2185	@ 0x889
 801919e:	f000 ff7d 	bl	801a09c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80191a2:	e02d      	b.n	8019200 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80191a4:	f640 0089 	movw	r0, #2185	@ 0x889
 80191a8:	f000 ff9a 	bl	801a0e0 <SUBGRF_ReadRegister>
 80191ac:	4603      	mov	r3, r0
 80191ae:	f043 0304 	orr.w	r3, r3, #4
 80191b2:	b2db      	uxtb	r3, r3
 80191b4:	4619      	mov	r1, r3
 80191b6:	f640 0089 	movw	r0, #2185	@ 0x889
 80191ba:	f000 ff6f 	bl	801a09c <SUBGRF_WriteRegister>
        break;
 80191be:	e01f      	b.n	8019200 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d004      	beq.n	80191d2 <RadioSetTxGenericConfig+0x406>
 80191c8:	68bb      	ldr	r3, [r7, #8]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80191d0:	d902      	bls.n	80191d8 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 80191d2:	f04f 33ff 	mov.w	r3, #4294967295
 80191d6:	e027      	b.n	8019228 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 80191d8:	2003      	movs	r0, #3
 80191da:	f7fe f919 	bl	8017410 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80191de:	4b14      	ldr	r3, [pc, #80]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 80191e0:	2202      	movs	r2, #2
 80191e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80191e6:	68bb      	ldr	r3, [r7, #8]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	4a11      	ldr	r2, [pc, #68]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 80191ec:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80191ee:	4b10      	ldr	r3, [pc, #64]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 80191f0:	2216      	movs	r2, #22
 80191f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80191f6:	480f      	ldr	r0, [pc, #60]	@ (8019234 <RadioSetTxGenericConfig+0x468>)
 80191f8:	f000 fd3c 	bl	8019c74 <SUBGRF_SetModulationParams>
        break;
 80191fc:	e000      	b.n	8019200 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 80191fe:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019204:	4618      	mov	r0, r3
 8019206:	f001 f87f 	bl	801a308 <SUBGRF_SetRfTxPower>
 801920a:	4603      	mov	r3, r0
 801920c:	461a      	mov	r2, r3
 801920e:	4b08      	ldr	r3, [pc, #32]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019210:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019214:	4b06      	ldr	r3, [pc, #24]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019216:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801921a:	4618      	mov	r0, r3
 801921c:	f001 fa53 	bl	801a6c6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019220:	4a03      	ldr	r2, [pc, #12]	@ (8019230 <RadioSetTxGenericConfig+0x464>)
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	6053      	str	r3, [r2, #4]
    return 0;
 8019226:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019228:	4618      	mov	r0, r3
 801922a:	3738      	adds	r7, #56	@ 0x38
 801922c:	46bd      	mov	sp, r7
 801922e:	bd80      	pop	{r7, pc}
 8019230:	20001c38 	.word	0x20001c38
 8019234:	20001c70 	.word	0x20001c70
 8019238:	20001c46 	.word	0x20001c46

0801923c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801923c:	b480      	push	{r7}
 801923e:	b085      	sub	sp, #20
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019244:	2301      	movs	r3, #1
 8019246:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8019248:	7bfb      	ldrb	r3, [r7, #15]
}
 801924a:	4618      	mov	r0, r3
 801924c:	3714      	adds	r7, #20
 801924e:	46bd      	mov	sp, r7
 8019250:	bc80      	pop	{r7}
 8019252:	4770      	bx	lr

08019254 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8019254:	b480      	push	{r7}
 8019256:	b083      	sub	sp, #12
 8019258:	af00      	add	r7, sp, #0
 801925a:	6078      	str	r0, [r7, #4]
 801925c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801925e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8019260:	4618      	mov	r0, r3
 8019262:	370c      	adds	r7, #12
 8019264:	46bd      	mov	sp, r7
 8019266:	bc80      	pop	{r7}
 8019268:	4770      	bx	lr
	...

0801926c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b084      	sub	sp, #16
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d002      	beq.n	8019280 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801927a:	4a1d      	ldr	r2, [pc, #116]	@ (80192f0 <SUBGRF_Init+0x84>)
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8019280:	f7e8 fe10 	bl	8001ea4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019284:	2002      	movs	r0, #2
 8019286:	f001 f91b 	bl	801a4c0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801928a:	4b1a      	ldr	r3, [pc, #104]	@ (80192f4 <SUBGRF_Init+0x88>)
 801928c:	2200      	movs	r2, #0
 801928e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8019290:	2000      	movs	r0, #0
 8019292:	f000 f97f 	bl	8019594 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8019296:	f7f1 fc01 	bl	800aa9c <RBI_IsTCXO>
 801929a:	4603      	mov	r3, r0
 801929c:	2b01      	cmp	r3, #1
 801929e:	d10e      	bne.n	80192be <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80192a0:	2140      	movs	r1, #64	@ 0x40
 80192a2:	2001      	movs	r0, #1
 80192a4:	f000 fb8a 	bl	80199bc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80192a8:	2100      	movs	r1, #0
 80192aa:	f640 1011 	movw	r0, #2321	@ 0x911
 80192ae:	f000 fef5 	bl	801a09c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80192b2:	237f      	movs	r3, #127	@ 0x7f
 80192b4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80192b6:	7b38      	ldrb	r0, [r7, #12]
 80192b8:	f000 fa8d 	bl	80197d6 <SUBGRF_Calibrate>
 80192bc:	e009      	b.n	80192d2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80192be:	2120      	movs	r1, #32
 80192c0:	f640 1011 	movw	r0, #2321	@ 0x911
 80192c4:	f000 feea 	bl	801a09c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80192c8:	2120      	movs	r1, #32
 80192ca:	f640 1012 	movw	r0, #2322	@ 0x912
 80192ce:	f000 fee5 	bl	801a09c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80192d2:	210e      	movs	r1, #14
 80192d4:	f640 101f 	movw	r0, #2335	@ 0x91f
 80192d8:	f000 fee0 	bl	801a09c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80192dc:	f7f1 fbc2 	bl	800aa64 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80192e0:	4b05      	ldr	r3, [pc, #20]	@ (80192f8 <SUBGRF_Init+0x8c>)
 80192e2:	2201      	movs	r2, #1
 80192e4:	701a      	strb	r2, [r3, #0]
}
 80192e6:	bf00      	nop
 80192e8:	3710      	adds	r7, #16
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	bf00      	nop
 80192f0:	20001cd0 	.word	0x20001cd0
 80192f4:	20001ccc 	.word	0x20001ccc
 80192f8:	20001cc4 	.word	0x20001cc4

080192fc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80192fc:	b480      	push	{r7}
 80192fe:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019300:	4b02      	ldr	r3, [pc, #8]	@ (801930c <SUBGRF_GetOperatingMode+0x10>)
 8019302:	781b      	ldrb	r3, [r3, #0]
}
 8019304:	4618      	mov	r0, r3
 8019306:	46bd      	mov	sp, r7
 8019308:	bc80      	pop	{r7}
 801930a:	4770      	bx	lr
 801930c:	20001cc4 	.word	0x20001cc4

08019310 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b082      	sub	sp, #8
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
 8019318:	460b      	mov	r3, r1
 801931a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801931c:	78fb      	ldrb	r3, [r7, #3]
 801931e:	461a      	mov	r2, r3
 8019320:	6879      	ldr	r1, [r7, #4]
 8019322:	2000      	movs	r0, #0
 8019324:	f000 ff40 	bl	801a1a8 <SUBGRF_WriteBuffer>
}
 8019328:	bf00      	nop
 801932a:	3708      	adds	r7, #8
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}

08019330 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b086      	sub	sp, #24
 8019334:	af00      	add	r7, sp, #0
 8019336:	60f8      	str	r0, [r7, #12]
 8019338:	60b9      	str	r1, [r7, #8]
 801933a:	4613      	mov	r3, r2
 801933c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801933e:	2300      	movs	r3, #0
 8019340:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019342:	f107 0317 	add.w	r3, r7, #23
 8019346:	4619      	mov	r1, r3
 8019348:	68b8      	ldr	r0, [r7, #8]
 801934a:	f000 fe29 	bl	8019fa0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801934e:	68bb      	ldr	r3, [r7, #8]
 8019350:	781b      	ldrb	r3, [r3, #0]
 8019352:	79fa      	ldrb	r2, [r7, #7]
 8019354:	429a      	cmp	r2, r3
 8019356:	d201      	bcs.n	801935c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8019358:	2301      	movs	r3, #1
 801935a:	e007      	b.n	801936c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801935c:	7df8      	ldrb	r0, [r7, #23]
 801935e:	68bb      	ldr	r3, [r7, #8]
 8019360:	781b      	ldrb	r3, [r3, #0]
 8019362:	461a      	mov	r2, r3
 8019364:	68f9      	ldr	r1, [r7, #12]
 8019366:	f000 ff41 	bl	801a1ec <SUBGRF_ReadBuffer>

    return 0;
 801936a:	2300      	movs	r3, #0
}
 801936c:	4618      	mov	r0, r3
 801936e:	3718      	adds	r7, #24
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}

08019374 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b084      	sub	sp, #16
 8019378:	af00      	add	r7, sp, #0
 801937a:	60f8      	str	r0, [r7, #12]
 801937c:	460b      	mov	r3, r1
 801937e:	607a      	str	r2, [r7, #4]
 8019380:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8019382:	7afb      	ldrb	r3, [r7, #11]
 8019384:	4619      	mov	r1, r3
 8019386:	68f8      	ldr	r0, [r7, #12]
 8019388:	f7ff ffc2 	bl	8019310 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801938c:	6878      	ldr	r0, [r7, #4]
 801938e:	f000 f91d 	bl	80195cc <SUBGRF_SetTx>
}
 8019392:	bf00      	nop
 8019394:	3710      	adds	r7, #16
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}

0801939a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801939a:	b580      	push	{r7, lr}
 801939c:	b082      	sub	sp, #8
 801939e:	af00      	add	r7, sp, #0
 80193a0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80193a2:	2208      	movs	r2, #8
 80193a4:	6879      	ldr	r1, [r7, #4]
 80193a6:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80193aa:	f000 feb9 	bl	801a120 <SUBGRF_WriteRegisters>
    return 0;
 80193ae:	2300      	movs	r3, #0
}
 80193b0:	4618      	mov	r0, r3
 80193b2:	3708      	adds	r7, #8
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}

080193b8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b084      	sub	sp, #16
 80193bc:	af00      	add	r7, sp, #0
 80193be:	4603      	mov	r3, r0
 80193c0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80193c2:	88fb      	ldrh	r3, [r7, #6]
 80193c4:	0a1b      	lsrs	r3, r3, #8
 80193c6:	b29b      	uxth	r3, r3
 80193c8:	b2db      	uxtb	r3, r3
 80193ca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80193cc:	88fb      	ldrh	r3, [r7, #6]
 80193ce:	b2db      	uxtb	r3, r3
 80193d0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80193d2:	f000 fb77 	bl	8019ac4 <SUBGRF_GetPacketType>
 80193d6:	4603      	mov	r3, r0
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d108      	bne.n	80193ee <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80193dc:	f107 030c 	add.w	r3, r7, #12
 80193e0:	2202      	movs	r2, #2
 80193e2:	4619      	mov	r1, r3
 80193e4:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80193e8:	f000 fe9a 	bl	801a120 <SUBGRF_WriteRegisters>
            break;
 80193ec:	e000      	b.n	80193f0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80193ee:	bf00      	nop
    }
}
 80193f0:	bf00      	nop
 80193f2:	3710      	adds	r7, #16
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd80      	pop	{r7, pc}

080193f8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b084      	sub	sp, #16
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	4603      	mov	r3, r0
 8019400:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019402:	88fb      	ldrh	r3, [r7, #6]
 8019404:	0a1b      	lsrs	r3, r3, #8
 8019406:	b29b      	uxth	r3, r3
 8019408:	b2db      	uxtb	r3, r3
 801940a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801940c:	88fb      	ldrh	r3, [r7, #6]
 801940e:	b2db      	uxtb	r3, r3
 8019410:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019412:	f000 fb57 	bl	8019ac4 <SUBGRF_GetPacketType>
 8019416:	4603      	mov	r3, r0
 8019418:	2b00      	cmp	r3, #0
 801941a:	d108      	bne.n	801942e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801941c:	f107 030c 	add.w	r3, r7, #12
 8019420:	2202      	movs	r2, #2
 8019422:	4619      	mov	r1, r3
 8019424:	f240 60be 	movw	r0, #1726	@ 0x6be
 8019428:	f000 fe7a 	bl	801a120 <SUBGRF_WriteRegisters>
            break;
 801942c:	e000      	b.n	8019430 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801942e:	bf00      	nop
    }
}
 8019430:	bf00      	nop
 8019432:	3710      	adds	r7, #16
 8019434:	46bd      	mov	sp, r7
 8019436:	bd80      	pop	{r7, pc}

08019438 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b084      	sub	sp, #16
 801943c:	af00      	add	r7, sp, #0
 801943e:	4603      	mov	r3, r0
 8019440:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019442:	2300      	movs	r3, #0
 8019444:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8019446:	f000 fb3d 	bl	8019ac4 <SUBGRF_GetPacketType>
 801944a:	4603      	mov	r3, r0
 801944c:	2b00      	cmp	r3, #0
 801944e:	d121      	bne.n	8019494 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019450:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019454:	f000 fe44 	bl	801a0e0 <SUBGRF_ReadRegister>
 8019458:	4603      	mov	r3, r0
 801945a:	f023 0301 	bic.w	r3, r3, #1
 801945e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019460:	88fb      	ldrh	r3, [r7, #6]
 8019462:	0a1b      	lsrs	r3, r3, #8
 8019464:	b29b      	uxth	r3, r3
 8019466:	b25b      	sxtb	r3, r3
 8019468:	f003 0301 	and.w	r3, r3, #1
 801946c:	b25a      	sxtb	r2, r3
 801946e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019472:	4313      	orrs	r3, r2
 8019474:	b25b      	sxtb	r3, r3
 8019476:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019478:	7bfb      	ldrb	r3, [r7, #15]
 801947a:	4619      	mov	r1, r3
 801947c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019480:	f000 fe0c 	bl	801a09c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8019484:	88fb      	ldrh	r3, [r7, #6]
 8019486:	b2db      	uxtb	r3, r3
 8019488:	4619      	mov	r1, r3
 801948a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801948e:	f000 fe05 	bl	801a09c <SUBGRF_WriteRegister>
            break;
 8019492:	e000      	b.n	8019496 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8019494:	bf00      	nop
    }
}
 8019496:	bf00      	nop
 8019498:	3710      	adds	r7, #16
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}

0801949e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801949e:	b580      	push	{r7, lr}
 80194a0:	b082      	sub	sp, #8
 80194a2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80194a4:	2300      	movs	r3, #0
 80194a6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80194a8:	2300      	movs	r3, #0
 80194aa:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80194ac:	2300      	movs	r3, #0
 80194ae:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80194b0:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80194b4:	f000 fe14 	bl	801a0e0 <SUBGRF_ReadRegister>
 80194b8:	4603      	mov	r3, r0
 80194ba:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80194bc:	79fb      	ldrb	r3, [r7, #7]
 80194be:	f023 0301 	bic.w	r3, r3, #1
 80194c2:	b2db      	uxtb	r3, r3
 80194c4:	4619      	mov	r1, r3
 80194c6:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80194ca:	f000 fde7 	bl	801a09c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80194ce:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80194d2:	f000 fe05 	bl	801a0e0 <SUBGRF_ReadRegister>
 80194d6:	4603      	mov	r3, r0
 80194d8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80194da:	79bb      	ldrb	r3, [r7, #6]
 80194dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80194e0:	b2db      	uxtb	r3, r3
 80194e2:	4619      	mov	r1, r3
 80194e4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80194e8:	f000 fdd8 	bl	801a09c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80194ec:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80194f0:	f000 f88c 	bl	801960c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80194f4:	463b      	mov	r3, r7
 80194f6:	2204      	movs	r2, #4
 80194f8:	4619      	mov	r1, r3
 80194fa:	f640 0019 	movw	r0, #2073	@ 0x819
 80194fe:	f000 fe31 	bl	801a164 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019502:	2000      	movs	r0, #0
 8019504:	f000 f846 	bl	8019594 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019508:	79fb      	ldrb	r3, [r7, #7]
 801950a:	4619      	mov	r1, r3
 801950c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019510:	f000 fdc4 	bl	801a09c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019514:	79bb      	ldrb	r3, [r7, #6]
 8019516:	4619      	mov	r1, r3
 8019518:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801951c:	f000 fdbe 	bl	801a09c <SUBGRF_WriteRegister>

    return number;
 8019520:	683b      	ldr	r3, [r7, #0]
}
 8019522:	4618      	mov	r0, r3
 8019524:	3708      	adds	r7, #8
 8019526:	46bd      	mov	sp, r7
 8019528:	bd80      	pop	{r7, pc}
	...

0801952c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b084      	sub	sp, #16
 8019530:	af00      	add	r7, sp, #0
 8019532:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019534:	2000      	movs	r0, #0
 8019536:	f7f1 fa9c 	bl	800aa72 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801953a:	2002      	movs	r0, #2
 801953c:	f000 ffc0 	bl	801a4c0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019540:	793b      	ldrb	r3, [r7, #4]
 8019542:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019546:	b2db      	uxtb	r3, r3
 8019548:	b25b      	sxtb	r3, r3
 801954a:	009b      	lsls	r3, r3, #2
 801954c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801954e:	793b      	ldrb	r3, [r7, #4]
 8019550:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019554:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019556:	b25b      	sxtb	r3, r3
 8019558:	005b      	lsls	r3, r3, #1
 801955a:	b25b      	sxtb	r3, r3
 801955c:	4313      	orrs	r3, r2
 801955e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019560:	793b      	ldrb	r3, [r7, #4]
 8019562:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019566:	b2db      	uxtb	r3, r3
 8019568:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801956a:	4313      	orrs	r3, r2
 801956c:	b25b      	sxtb	r3, r3
 801956e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019570:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019572:	f107 030f 	add.w	r3, r7, #15
 8019576:	2201      	movs	r2, #1
 8019578:	4619      	mov	r1, r3
 801957a:	2084      	movs	r0, #132	@ 0x84
 801957c:	f000 fe58 	bl	801a230 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019580:	4b03      	ldr	r3, [pc, #12]	@ (8019590 <SUBGRF_SetSleep+0x64>)
 8019582:	2200      	movs	r2, #0
 8019584:	701a      	strb	r2, [r3, #0]
}
 8019586:	bf00      	nop
 8019588:	3710      	adds	r7, #16
 801958a:	46bd      	mov	sp, r7
 801958c:	bd80      	pop	{r7, pc}
 801958e:	bf00      	nop
 8019590:	20001cc4 	.word	0x20001cc4

08019594 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b082      	sub	sp, #8
 8019598:	af00      	add	r7, sp, #0
 801959a:	4603      	mov	r3, r0
 801959c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801959e:	1dfb      	adds	r3, r7, #7
 80195a0:	2201      	movs	r2, #1
 80195a2:	4619      	mov	r1, r3
 80195a4:	2080      	movs	r0, #128	@ 0x80
 80195a6:	f000 fe43 	bl	801a230 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80195aa:	79fb      	ldrb	r3, [r7, #7]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d103      	bne.n	80195b8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80195b0:	4b05      	ldr	r3, [pc, #20]	@ (80195c8 <SUBGRF_SetStandby+0x34>)
 80195b2:	2201      	movs	r2, #1
 80195b4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80195b6:	e002      	b.n	80195be <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80195b8:	4b03      	ldr	r3, [pc, #12]	@ (80195c8 <SUBGRF_SetStandby+0x34>)
 80195ba:	2202      	movs	r2, #2
 80195bc:	701a      	strb	r2, [r3, #0]
}
 80195be:	bf00      	nop
 80195c0:	3708      	adds	r7, #8
 80195c2:	46bd      	mov	sp, r7
 80195c4:	bd80      	pop	{r7, pc}
 80195c6:	bf00      	nop
 80195c8:	20001cc4 	.word	0x20001cc4

080195cc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b084      	sub	sp, #16
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80195d4:	4b0c      	ldr	r3, [pc, #48]	@ (8019608 <SUBGRF_SetTx+0x3c>)
 80195d6:	2204      	movs	r2, #4
 80195d8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	0c1b      	lsrs	r3, r3, #16
 80195de:	b2db      	uxtb	r3, r3
 80195e0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	0a1b      	lsrs	r3, r3, #8
 80195e6:	b2db      	uxtb	r3, r3
 80195e8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	b2db      	uxtb	r3, r3
 80195ee:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80195f0:	f107 030c 	add.w	r3, r7, #12
 80195f4:	2203      	movs	r2, #3
 80195f6:	4619      	mov	r1, r3
 80195f8:	2083      	movs	r0, #131	@ 0x83
 80195fa:	f000 fe19 	bl	801a230 <SUBGRF_WriteCommand>
}
 80195fe:	bf00      	nop
 8019600:	3710      	adds	r7, #16
 8019602:	46bd      	mov	sp, r7
 8019604:	bd80      	pop	{r7, pc}
 8019606:	bf00      	nop
 8019608:	20001cc4 	.word	0x20001cc4

0801960c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b084      	sub	sp, #16
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019614:	4b0c      	ldr	r3, [pc, #48]	@ (8019648 <SUBGRF_SetRx+0x3c>)
 8019616:	2205      	movs	r2, #5
 8019618:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	0c1b      	lsrs	r3, r3, #16
 801961e:	b2db      	uxtb	r3, r3
 8019620:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	0a1b      	lsrs	r3, r3, #8
 8019626:	b2db      	uxtb	r3, r3
 8019628:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	b2db      	uxtb	r3, r3
 801962e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019630:	f107 030c 	add.w	r3, r7, #12
 8019634:	2203      	movs	r2, #3
 8019636:	4619      	mov	r1, r3
 8019638:	2082      	movs	r0, #130	@ 0x82
 801963a:	f000 fdf9 	bl	801a230 <SUBGRF_WriteCommand>
}
 801963e:	bf00      	nop
 8019640:	3710      	adds	r7, #16
 8019642:	46bd      	mov	sp, r7
 8019644:	bd80      	pop	{r7, pc}
 8019646:	bf00      	nop
 8019648:	20001cc4 	.word	0x20001cc4

0801964c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b084      	sub	sp, #16
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019654:	4b0e      	ldr	r3, [pc, #56]	@ (8019690 <SUBGRF_SetRxBoosted+0x44>)
 8019656:	2205      	movs	r2, #5
 8019658:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801965a:	2197      	movs	r1, #151	@ 0x97
 801965c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019660:	f000 fd1c 	bl	801a09c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	0c1b      	lsrs	r3, r3, #16
 8019668:	b2db      	uxtb	r3, r3
 801966a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	0a1b      	lsrs	r3, r3, #8
 8019670:	b2db      	uxtb	r3, r3
 8019672:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	b2db      	uxtb	r3, r3
 8019678:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801967a:	f107 030c 	add.w	r3, r7, #12
 801967e:	2203      	movs	r2, #3
 8019680:	4619      	mov	r1, r3
 8019682:	2082      	movs	r0, #130	@ 0x82
 8019684:	f000 fdd4 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019688:	bf00      	nop
 801968a:	3710      	adds	r7, #16
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}
 8019690:	20001cc4 	.word	0x20001cc4

08019694 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b084      	sub	sp, #16
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
 801969c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	0c1b      	lsrs	r3, r3, #16
 80196a2:	b2db      	uxtb	r3, r3
 80196a4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	0a1b      	lsrs	r3, r3, #8
 80196aa:	b2db      	uxtb	r3, r3
 80196ac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	b2db      	uxtb	r3, r3
 80196b2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80196b4:	683b      	ldr	r3, [r7, #0]
 80196b6:	0c1b      	lsrs	r3, r3, #16
 80196b8:	b2db      	uxtb	r3, r3
 80196ba:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80196bc:	683b      	ldr	r3, [r7, #0]
 80196be:	0a1b      	lsrs	r3, r3, #8
 80196c0:	b2db      	uxtb	r3, r3
 80196c2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80196c4:	683b      	ldr	r3, [r7, #0]
 80196c6:	b2db      	uxtb	r3, r3
 80196c8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80196ca:	f107 0308 	add.w	r3, r7, #8
 80196ce:	2206      	movs	r2, #6
 80196d0:	4619      	mov	r1, r3
 80196d2:	2094      	movs	r0, #148	@ 0x94
 80196d4:	f000 fdac 	bl	801a230 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80196d8:	4b03      	ldr	r3, [pc, #12]	@ (80196e8 <SUBGRF_SetRxDutyCycle+0x54>)
 80196da:	2206      	movs	r2, #6
 80196dc:	701a      	strb	r2, [r3, #0]
}
 80196de:	bf00      	nop
 80196e0:	3710      	adds	r7, #16
 80196e2:	46bd      	mov	sp, r7
 80196e4:	bd80      	pop	{r7, pc}
 80196e6:	bf00      	nop
 80196e8:	20001cc4 	.word	0x20001cc4

080196ec <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80196f0:	2200      	movs	r2, #0
 80196f2:	2100      	movs	r1, #0
 80196f4:	20c5      	movs	r0, #197	@ 0xc5
 80196f6:	f000 fd9b 	bl	801a230 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80196fa:	4b02      	ldr	r3, [pc, #8]	@ (8019704 <SUBGRF_SetCad+0x18>)
 80196fc:	2207      	movs	r2, #7
 80196fe:	701a      	strb	r2, [r3, #0]
}
 8019700:	bf00      	nop
 8019702:	bd80      	pop	{r7, pc}
 8019704:	20001cc4 	.word	0x20001cc4

08019708 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019708:	b580      	push	{r7, lr}
 801970a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801970c:	2200      	movs	r2, #0
 801970e:	2100      	movs	r1, #0
 8019710:	20d1      	movs	r0, #209	@ 0xd1
 8019712:	f000 fd8d 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019716:	bf00      	nop
 8019718:	bd80      	pop	{r7, pc}

0801971a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801971a:	b580      	push	{r7, lr}
 801971c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801971e:	2200      	movs	r2, #0
 8019720:	2100      	movs	r1, #0
 8019722:	20d2      	movs	r0, #210	@ 0xd2
 8019724:	f000 fd84 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019728:	bf00      	nop
 801972a:	bd80      	pop	{r7, pc}

0801972c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b082      	sub	sp, #8
 8019730:	af00      	add	r7, sp, #0
 8019732:	4603      	mov	r3, r0
 8019734:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8019736:	1dfb      	adds	r3, r7, #7
 8019738:	2201      	movs	r2, #1
 801973a:	4619      	mov	r1, r3
 801973c:	209f      	movs	r0, #159	@ 0x9f
 801973e:	f000 fd77 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019742:	bf00      	nop
 8019744:	3708      	adds	r7, #8
 8019746:	46bd      	mov	sp, r7
 8019748:	bd80      	pop	{r7, pc}

0801974a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801974a:	b580      	push	{r7, lr}
 801974c:	b084      	sub	sp, #16
 801974e:	af00      	add	r7, sp, #0
 8019750:	4603      	mov	r3, r0
 8019752:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019754:	1dfb      	adds	r3, r7, #7
 8019756:	2201      	movs	r2, #1
 8019758:	4619      	mov	r1, r3
 801975a:	20a0      	movs	r0, #160	@ 0xa0
 801975c:	f000 fd68 	bl	801a230 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019760:	79fb      	ldrb	r3, [r7, #7]
 8019762:	2b3f      	cmp	r3, #63	@ 0x3f
 8019764:	d91c      	bls.n	80197a0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019766:	79fb      	ldrb	r3, [r7, #7]
 8019768:	085b      	lsrs	r3, r3, #1
 801976a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801976c:	2300      	movs	r3, #0
 801976e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019770:	2300      	movs	r3, #0
 8019772:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019774:	e005      	b.n	8019782 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8019776:	7bfb      	ldrb	r3, [r7, #15]
 8019778:	089b      	lsrs	r3, r3, #2
 801977a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801977c:	7bbb      	ldrb	r3, [r7, #14]
 801977e:	3301      	adds	r3, #1
 8019780:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019782:	7bfb      	ldrb	r3, [r7, #15]
 8019784:	2b1f      	cmp	r3, #31
 8019786:	d8f6      	bhi.n	8019776 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019788:	7bfb      	ldrb	r3, [r7, #15]
 801978a:	00db      	lsls	r3, r3, #3
 801978c:	b2da      	uxtb	r2, r3
 801978e:	7bbb      	ldrb	r3, [r7, #14]
 8019790:	4413      	add	r3, r2
 8019792:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019794:	7b7b      	ldrb	r3, [r7, #13]
 8019796:	4619      	mov	r1, r3
 8019798:	f240 7006 	movw	r0, #1798	@ 0x706
 801979c:	f000 fc7e 	bl	801a09c <SUBGRF_WriteRegister>
    }
}
 80197a0:	bf00      	nop
 80197a2:	3710      	adds	r7, #16
 80197a4:	46bd      	mov	sp, r7
 80197a6:	bd80      	pop	{r7, pc}

080197a8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b082      	sub	sp, #8
 80197ac:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80197ae:	f7f1 f97c 	bl	800aaaa <RBI_IsDCDC>
 80197b2:	4603      	mov	r3, r0
 80197b4:	2b01      	cmp	r3, #1
 80197b6:	d102      	bne.n	80197be <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80197b8:	2301      	movs	r3, #1
 80197ba:	71fb      	strb	r3, [r7, #7]
 80197bc:	e001      	b.n	80197c2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80197be:	2300      	movs	r3, #0
 80197c0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80197c2:	1dfb      	adds	r3, r7, #7
 80197c4:	2201      	movs	r2, #1
 80197c6:	4619      	mov	r1, r3
 80197c8:	2096      	movs	r0, #150	@ 0x96
 80197ca:	f000 fd31 	bl	801a230 <SUBGRF_WriteCommand>
}
 80197ce:	bf00      	nop
 80197d0:	3708      	adds	r7, #8
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}

080197d6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80197d6:	b580      	push	{r7, lr}
 80197d8:	b084      	sub	sp, #16
 80197da:	af00      	add	r7, sp, #0
 80197dc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80197de:	793b      	ldrb	r3, [r7, #4]
 80197e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80197e4:	b2db      	uxtb	r3, r3
 80197e6:	b25b      	sxtb	r3, r3
 80197e8:	019b      	lsls	r3, r3, #6
 80197ea:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80197ec:	793b      	ldrb	r3, [r7, #4]
 80197ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80197f2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80197f4:	b25b      	sxtb	r3, r3
 80197f6:	015b      	lsls	r3, r3, #5
 80197f8:	b25b      	sxtb	r3, r3
 80197fa:	4313      	orrs	r3, r2
 80197fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80197fe:	793b      	ldrb	r3, [r7, #4]
 8019800:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019804:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019806:	b25b      	sxtb	r3, r3
 8019808:	011b      	lsls	r3, r3, #4
 801980a:	b25b      	sxtb	r3, r3
 801980c:	4313      	orrs	r3, r2
 801980e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019810:	793b      	ldrb	r3, [r7, #4]
 8019812:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019816:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019818:	b25b      	sxtb	r3, r3
 801981a:	00db      	lsls	r3, r3, #3
 801981c:	b25b      	sxtb	r3, r3
 801981e:	4313      	orrs	r3, r2
 8019820:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019822:	793b      	ldrb	r3, [r7, #4]
 8019824:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019828:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801982a:	b25b      	sxtb	r3, r3
 801982c:	009b      	lsls	r3, r3, #2
 801982e:	b25b      	sxtb	r3, r3
 8019830:	4313      	orrs	r3, r2
 8019832:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019834:	793b      	ldrb	r3, [r7, #4]
 8019836:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801983a:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801983c:	b25b      	sxtb	r3, r3
 801983e:	005b      	lsls	r3, r3, #1
 8019840:	b25b      	sxtb	r3, r3
 8019842:	4313      	orrs	r3, r2
 8019844:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8019846:	793b      	ldrb	r3, [r7, #4]
 8019848:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801984c:	b2db      	uxtb	r3, r3
 801984e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019850:	4313      	orrs	r3, r2
 8019852:	b25b      	sxtb	r3, r3
 8019854:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019856:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019858:	f107 030f 	add.w	r3, r7, #15
 801985c:	2201      	movs	r2, #1
 801985e:	4619      	mov	r1, r3
 8019860:	2089      	movs	r0, #137	@ 0x89
 8019862:	f000 fce5 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019866:	bf00      	nop
 8019868:	3710      	adds	r7, #16
 801986a:	46bd      	mov	sp, r7
 801986c:	bd80      	pop	{r7, pc}
	...

08019870 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b084      	sub	sp, #16
 8019874:	af00      	add	r7, sp, #0
 8019876:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	4a1d      	ldr	r2, [pc, #116]	@ (80198f0 <SUBGRF_CalibrateImage+0x80>)
 801987c:	4293      	cmp	r3, r2
 801987e:	d904      	bls.n	801988a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019880:	23e1      	movs	r3, #225	@ 0xe1
 8019882:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8019884:	23e9      	movs	r3, #233	@ 0xe9
 8019886:	737b      	strb	r3, [r7, #13]
 8019888:	e027      	b.n	80198da <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	4a19      	ldr	r2, [pc, #100]	@ (80198f4 <SUBGRF_CalibrateImage+0x84>)
 801988e:	4293      	cmp	r3, r2
 8019890:	d904      	bls.n	801989c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8019892:	23d7      	movs	r3, #215	@ 0xd7
 8019894:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8019896:	23db      	movs	r3, #219	@ 0xdb
 8019898:	737b      	strb	r3, [r7, #13]
 801989a:	e01e      	b.n	80198da <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	4a16      	ldr	r2, [pc, #88]	@ (80198f8 <SUBGRF_CalibrateImage+0x88>)
 80198a0:	4293      	cmp	r3, r2
 80198a2:	d904      	bls.n	80198ae <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80198a4:	23c1      	movs	r3, #193	@ 0xc1
 80198a6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80198a8:	23c5      	movs	r3, #197	@ 0xc5
 80198aa:	737b      	strb	r3, [r7, #13]
 80198ac:	e015      	b.n	80198da <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	4a12      	ldr	r2, [pc, #72]	@ (80198fc <SUBGRF_CalibrateImage+0x8c>)
 80198b2:	4293      	cmp	r3, r2
 80198b4:	d904      	bls.n	80198c0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80198b6:	2375      	movs	r3, #117	@ 0x75
 80198b8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80198ba:	2381      	movs	r3, #129	@ 0x81
 80198bc:	737b      	strb	r3, [r7, #13]
 80198be:	e00c      	b.n	80198da <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	4a0f      	ldr	r2, [pc, #60]	@ (8019900 <SUBGRF_CalibrateImage+0x90>)
 80198c4:	4293      	cmp	r3, r2
 80198c6:	d904      	bls.n	80198d2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80198c8:	236b      	movs	r3, #107	@ 0x6b
 80198ca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80198cc:	236f      	movs	r3, #111	@ 0x6f
 80198ce:	737b      	strb	r3, [r7, #13]
 80198d0:	e003      	b.n	80198da <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80198d2:	2329      	movs	r3, #41	@ 0x29
 80198d4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80198d6:	232b      	movs	r3, #43	@ 0x2b
 80198d8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80198da:	f107 030c 	add.w	r3, r7, #12
 80198de:	2202      	movs	r2, #2
 80198e0:	4619      	mov	r1, r3
 80198e2:	2098      	movs	r0, #152	@ 0x98
 80198e4:	f000 fca4 	bl	801a230 <SUBGRF_WriteCommand>
}
 80198e8:	bf00      	nop
 80198ea:	3710      	adds	r7, #16
 80198ec:	46bd      	mov	sp, r7
 80198ee:	bd80      	pop	{r7, pc}
 80198f0:	35a4e900 	.word	0x35a4e900
 80198f4:	32a9f880 	.word	0x32a9f880
 80198f8:	2de54480 	.word	0x2de54480
 80198fc:	1b6b0b00 	.word	0x1b6b0b00
 8019900:	1954fc40 	.word	0x1954fc40

08019904 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019904:	b590      	push	{r4, r7, lr}
 8019906:	b085      	sub	sp, #20
 8019908:	af00      	add	r7, sp, #0
 801990a:	4604      	mov	r4, r0
 801990c:	4608      	mov	r0, r1
 801990e:	4611      	mov	r1, r2
 8019910:	461a      	mov	r2, r3
 8019912:	4623      	mov	r3, r4
 8019914:	71fb      	strb	r3, [r7, #7]
 8019916:	4603      	mov	r3, r0
 8019918:	71bb      	strb	r3, [r7, #6]
 801991a:	460b      	mov	r3, r1
 801991c:	717b      	strb	r3, [r7, #5]
 801991e:	4613      	mov	r3, r2
 8019920:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8019922:	79fb      	ldrb	r3, [r7, #7]
 8019924:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019926:	79bb      	ldrb	r3, [r7, #6]
 8019928:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801992a:	797b      	ldrb	r3, [r7, #5]
 801992c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801992e:	793b      	ldrb	r3, [r7, #4]
 8019930:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019932:	f107 030c 	add.w	r3, r7, #12
 8019936:	2204      	movs	r2, #4
 8019938:	4619      	mov	r1, r3
 801993a:	2095      	movs	r0, #149	@ 0x95
 801993c:	f000 fc78 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019940:	bf00      	nop
 8019942:	3714      	adds	r7, #20
 8019944:	46bd      	mov	sp, r7
 8019946:	bd90      	pop	{r4, r7, pc}

08019948 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019948:	b590      	push	{r4, r7, lr}
 801994a:	b085      	sub	sp, #20
 801994c:	af00      	add	r7, sp, #0
 801994e:	4604      	mov	r4, r0
 8019950:	4608      	mov	r0, r1
 8019952:	4611      	mov	r1, r2
 8019954:	461a      	mov	r2, r3
 8019956:	4623      	mov	r3, r4
 8019958:	80fb      	strh	r3, [r7, #6]
 801995a:	4603      	mov	r3, r0
 801995c:	80bb      	strh	r3, [r7, #4]
 801995e:	460b      	mov	r3, r1
 8019960:	807b      	strh	r3, [r7, #2]
 8019962:	4613      	mov	r3, r2
 8019964:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019966:	88fb      	ldrh	r3, [r7, #6]
 8019968:	0a1b      	lsrs	r3, r3, #8
 801996a:	b29b      	uxth	r3, r3
 801996c:	b2db      	uxtb	r3, r3
 801996e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019970:	88fb      	ldrh	r3, [r7, #6]
 8019972:	b2db      	uxtb	r3, r3
 8019974:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019976:	88bb      	ldrh	r3, [r7, #4]
 8019978:	0a1b      	lsrs	r3, r3, #8
 801997a:	b29b      	uxth	r3, r3
 801997c:	b2db      	uxtb	r3, r3
 801997e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019980:	88bb      	ldrh	r3, [r7, #4]
 8019982:	b2db      	uxtb	r3, r3
 8019984:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019986:	887b      	ldrh	r3, [r7, #2]
 8019988:	0a1b      	lsrs	r3, r3, #8
 801998a:	b29b      	uxth	r3, r3
 801998c:	b2db      	uxtb	r3, r3
 801998e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8019990:	887b      	ldrh	r3, [r7, #2]
 8019992:	b2db      	uxtb	r3, r3
 8019994:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8019996:	883b      	ldrh	r3, [r7, #0]
 8019998:	0a1b      	lsrs	r3, r3, #8
 801999a:	b29b      	uxth	r3, r3
 801999c:	b2db      	uxtb	r3, r3
 801999e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80199a0:	883b      	ldrh	r3, [r7, #0]
 80199a2:	b2db      	uxtb	r3, r3
 80199a4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80199a6:	f107 0308 	add.w	r3, r7, #8
 80199aa:	2208      	movs	r2, #8
 80199ac:	4619      	mov	r1, r3
 80199ae:	2008      	movs	r0, #8
 80199b0:	f000 fc3e 	bl	801a230 <SUBGRF_WriteCommand>
}
 80199b4:	bf00      	nop
 80199b6:	3714      	adds	r7, #20
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd90      	pop	{r4, r7, pc}

080199bc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b084      	sub	sp, #16
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	4603      	mov	r3, r0
 80199c4:	6039      	str	r1, [r7, #0]
 80199c6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80199c8:	79fb      	ldrb	r3, [r7, #7]
 80199ca:	f003 0307 	and.w	r3, r3, #7
 80199ce:	b2db      	uxtb	r3, r3
 80199d0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80199d2:	683b      	ldr	r3, [r7, #0]
 80199d4:	0c1b      	lsrs	r3, r3, #16
 80199d6:	b2db      	uxtb	r3, r3
 80199d8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80199da:	683b      	ldr	r3, [r7, #0]
 80199dc:	0a1b      	lsrs	r3, r3, #8
 80199de:	b2db      	uxtb	r3, r3
 80199e0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80199e2:	683b      	ldr	r3, [r7, #0]
 80199e4:	b2db      	uxtb	r3, r3
 80199e6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80199e8:	f107 030c 	add.w	r3, r7, #12
 80199ec:	2204      	movs	r2, #4
 80199ee:	4619      	mov	r1, r3
 80199f0:	2097      	movs	r0, #151	@ 0x97
 80199f2:	f000 fc1d 	bl	801a230 <SUBGRF_WriteCommand>
}
 80199f6:	bf00      	nop
 80199f8:	3710      	adds	r7, #16
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}
	...

08019a00 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019a04:	b084      	sub	sp, #16
 8019a06:	af00      	add	r7, sp, #0
 8019a08:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8019a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8019a84 <SUBGRF_SetRfFrequency+0x84>)
 8019a10:	781b      	ldrb	r3, [r3, #0]
 8019a12:	f083 0301 	eor.w	r3, r3, #1
 8019a16:	b2db      	uxtb	r3, r3
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d005      	beq.n	8019a28 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019a1c:	6878      	ldr	r0, [r7, #4]
 8019a1e:	f7ff ff27 	bl	8019870 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8019a22:	4b18      	ldr	r3, [pc, #96]	@ (8019a84 <SUBGRF_SetRfFrequency+0x84>)
 8019a24:	2201      	movs	r2, #1
 8019a26:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	461c      	mov	r4, r3
 8019a2e:	4615      	mov	r5, r2
 8019a30:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019a34:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019a38:	4a13      	ldr	r2, [pc, #76]	@ (8019a88 <SUBGRF_SetRfFrequency+0x88>)
 8019a3a:	f04f 0300 	mov.w	r3, #0
 8019a3e:	4640      	mov	r0, r8
 8019a40:	4649      	mov	r1, r9
 8019a42:	f7e7 f8b1 	bl	8000ba8 <__aeabi_uldivmod>
 8019a46:	4602      	mov	r2, r0
 8019a48:	460b      	mov	r3, r1
 8019a4a:	4613      	mov	r3, r2
 8019a4c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	0e1b      	lsrs	r3, r3, #24
 8019a52:	b2db      	uxtb	r3, r3
 8019a54:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	0c1b      	lsrs	r3, r3, #16
 8019a5a:	b2db      	uxtb	r3, r3
 8019a5c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	0a1b      	lsrs	r3, r3, #8
 8019a62:	b2db      	uxtb	r3, r3
 8019a64:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	b2db      	uxtb	r3, r3
 8019a6a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019a6c:	f107 0308 	add.w	r3, r7, #8
 8019a70:	2204      	movs	r2, #4
 8019a72:	4619      	mov	r1, r3
 8019a74:	2086      	movs	r0, #134	@ 0x86
 8019a76:	f000 fbdb 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019a7a:	bf00      	nop
 8019a7c:	3710      	adds	r7, #16
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019a84:	20001ccc 	.word	0x20001ccc
 8019a88:	01e84800 	.word	0x01e84800

08019a8c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b082      	sub	sp, #8
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	4603      	mov	r3, r0
 8019a94:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8019a96:	79fa      	ldrb	r2, [r7, #7]
 8019a98:	4b09      	ldr	r3, [pc, #36]	@ (8019ac0 <SUBGRF_SetPacketType+0x34>)
 8019a9a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019a9c:	79fb      	ldrb	r3, [r7, #7]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d104      	bne.n	8019aac <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8019aa2:	2100      	movs	r1, #0
 8019aa4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019aa8:	f000 faf8 	bl	801a09c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019aac:	1dfb      	adds	r3, r7, #7
 8019aae:	2201      	movs	r2, #1
 8019ab0:	4619      	mov	r1, r3
 8019ab2:	208a      	movs	r0, #138	@ 0x8a
 8019ab4:	f000 fbbc 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019ab8:	bf00      	nop
 8019aba:	3708      	adds	r7, #8
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd80      	pop	{r7, pc}
 8019ac0:	20001cc5 	.word	0x20001cc5

08019ac4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8019ac4:	b480      	push	{r7}
 8019ac6:	af00      	add	r7, sp, #0
    return PacketType;
 8019ac8:	4b02      	ldr	r3, [pc, #8]	@ (8019ad4 <SUBGRF_GetPacketType+0x10>)
 8019aca:	781b      	ldrb	r3, [r3, #0]
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bc80      	pop	{r7}
 8019ad2:	4770      	bx	lr
 8019ad4:	20001cc5 	.word	0x20001cc5

08019ad8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b084      	sub	sp, #16
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	4603      	mov	r3, r0
 8019ae0:	71fb      	strb	r3, [r7, #7]
 8019ae2:	460b      	mov	r3, r1
 8019ae4:	71bb      	strb	r3, [r7, #6]
 8019ae6:	4613      	mov	r3, r2
 8019ae8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019aea:	79fb      	ldrb	r3, [r7, #7]
 8019aec:	2b01      	cmp	r3, #1
 8019aee:	d149      	bne.n	8019b84 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8019af0:	2000      	movs	r0, #0
 8019af2:	f7f0 ffe1 	bl	800aab8 <RBI_GetRFOMaxPowerConfig>
 8019af6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019af8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019afc:	68fa      	ldr	r2, [r7, #12]
 8019afe:	429a      	cmp	r2, r3
 8019b00:	da01      	bge.n	8019b06 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	2b0e      	cmp	r3, #14
 8019b0a:	d10e      	bne.n	8019b2a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019b0c:	2301      	movs	r3, #1
 8019b0e:	2201      	movs	r2, #1
 8019b10:	2100      	movs	r1, #0
 8019b12:	2004      	movs	r0, #4
 8019b14:	f7ff fef6 	bl	8019904 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019b18:	79ba      	ldrb	r2, [r7, #6]
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	b2db      	uxtb	r3, r3
 8019b1e:	1ad3      	subs	r3, r2, r3
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	330e      	adds	r3, #14
 8019b24:	b2db      	uxtb	r3, r3
 8019b26:	71bb      	strb	r3, [r7, #6]
 8019b28:	e01f      	b.n	8019b6a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	2b0a      	cmp	r3, #10
 8019b2e:	d10e      	bne.n	8019b4e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8019b30:	2301      	movs	r3, #1
 8019b32:	2201      	movs	r2, #1
 8019b34:	2100      	movs	r1, #0
 8019b36:	2001      	movs	r0, #1
 8019b38:	f7ff fee4 	bl	8019904 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019b3c:	79ba      	ldrb	r2, [r7, #6]
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	b2db      	uxtb	r3, r3
 8019b42:	1ad3      	subs	r3, r2, r3
 8019b44:	b2db      	uxtb	r3, r3
 8019b46:	330d      	adds	r3, #13
 8019b48:	b2db      	uxtb	r3, r3
 8019b4a:	71bb      	strb	r3, [r7, #6]
 8019b4c:	e00d      	b.n	8019b6a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8019b4e:	2301      	movs	r3, #1
 8019b50:	2201      	movs	r2, #1
 8019b52:	2100      	movs	r1, #0
 8019b54:	2007      	movs	r0, #7
 8019b56:	f7ff fed5 	bl	8019904 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019b5a:	79ba      	ldrb	r2, [r7, #6]
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	b2db      	uxtb	r3, r3
 8019b60:	1ad3      	subs	r3, r2, r3
 8019b62:	b2db      	uxtb	r3, r3
 8019b64:	330e      	adds	r3, #14
 8019b66:	b2db      	uxtb	r3, r3
 8019b68:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019b6a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019b6e:	f113 0f11 	cmn.w	r3, #17
 8019b72:	da01      	bge.n	8019b78 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019b74:	23ef      	movs	r3, #239	@ 0xef
 8019b76:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019b78:	2118      	movs	r1, #24
 8019b7a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019b7e:	f000 fa8d 	bl	801a09c <SUBGRF_WriteRegister>
 8019b82:	e067      	b.n	8019c54 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8019b84:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019b88:	f000 faaa 	bl	801a0e0 <SUBGRF_ReadRegister>
 8019b8c:	4603      	mov	r3, r0
 8019b8e:	f043 031e 	orr.w	r3, r3, #30
 8019b92:	b2db      	uxtb	r3, r3
 8019b94:	4619      	mov	r1, r3
 8019b96:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019b9a:	f000 fa7f 	bl	801a09c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8019b9e:	2001      	movs	r0, #1
 8019ba0:	f7f0 ff8a 	bl	800aab8 <RBI_GetRFOMaxPowerConfig>
 8019ba4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8019ba6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019baa:	68fa      	ldr	r2, [r7, #12]
 8019bac:	429a      	cmp	r2, r3
 8019bae:	da01      	bge.n	8019bb4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	2b14      	cmp	r3, #20
 8019bb8:	d10e      	bne.n	8019bd8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8019bba:	2301      	movs	r3, #1
 8019bbc:	2200      	movs	r2, #0
 8019bbe:	2105      	movs	r1, #5
 8019bc0:	2003      	movs	r0, #3
 8019bc2:	f7ff fe9f 	bl	8019904 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019bc6:	79ba      	ldrb	r2, [r7, #6]
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	b2db      	uxtb	r3, r3
 8019bcc:	1ad3      	subs	r3, r2, r3
 8019bce:	b2db      	uxtb	r3, r3
 8019bd0:	3316      	adds	r3, #22
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	71bb      	strb	r3, [r7, #6]
 8019bd6:	e031      	b.n	8019c3c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	2b11      	cmp	r3, #17
 8019bdc:	d10e      	bne.n	8019bfc <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8019bde:	2301      	movs	r3, #1
 8019be0:	2200      	movs	r2, #0
 8019be2:	2103      	movs	r1, #3
 8019be4:	2002      	movs	r0, #2
 8019be6:	f7ff fe8d 	bl	8019904 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019bea:	79ba      	ldrb	r2, [r7, #6]
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	b2db      	uxtb	r3, r3
 8019bf0:	1ad3      	subs	r3, r2, r3
 8019bf2:	b2db      	uxtb	r3, r3
 8019bf4:	3316      	adds	r3, #22
 8019bf6:	b2db      	uxtb	r3, r3
 8019bf8:	71bb      	strb	r3, [r7, #6]
 8019bfa:	e01f      	b.n	8019c3c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	2b0e      	cmp	r3, #14
 8019c00:	d10e      	bne.n	8019c20 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8019c02:	2301      	movs	r3, #1
 8019c04:	2200      	movs	r2, #0
 8019c06:	2102      	movs	r1, #2
 8019c08:	2002      	movs	r0, #2
 8019c0a:	f7ff fe7b 	bl	8019904 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019c0e:	79ba      	ldrb	r2, [r7, #6]
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	b2db      	uxtb	r3, r3
 8019c14:	1ad3      	subs	r3, r2, r3
 8019c16:	b2db      	uxtb	r3, r3
 8019c18:	330e      	adds	r3, #14
 8019c1a:	b2db      	uxtb	r3, r3
 8019c1c:	71bb      	strb	r3, [r7, #6]
 8019c1e:	e00d      	b.n	8019c3c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019c20:	2301      	movs	r3, #1
 8019c22:	2200      	movs	r2, #0
 8019c24:	2107      	movs	r1, #7
 8019c26:	2004      	movs	r0, #4
 8019c28:	f7ff fe6c 	bl	8019904 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019c2c:	79ba      	ldrb	r2, [r7, #6]
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	b2db      	uxtb	r3, r3
 8019c32:	1ad3      	subs	r3, r2, r3
 8019c34:	b2db      	uxtb	r3, r3
 8019c36:	3316      	adds	r3, #22
 8019c38:	b2db      	uxtb	r3, r3
 8019c3a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019c3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019c40:	f113 0f09 	cmn.w	r3, #9
 8019c44:	da01      	bge.n	8019c4a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019c46:	23f7      	movs	r3, #247	@ 0xf7
 8019c48:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019c4a:	2138      	movs	r1, #56	@ 0x38
 8019c4c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019c50:	f000 fa24 	bl	801a09c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019c54:	79bb      	ldrb	r3, [r7, #6]
 8019c56:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019c58:	797b      	ldrb	r3, [r7, #5]
 8019c5a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019c5c:	f107 0308 	add.w	r3, r7, #8
 8019c60:	2202      	movs	r2, #2
 8019c62:	4619      	mov	r1, r3
 8019c64:	208e      	movs	r0, #142	@ 0x8e
 8019c66:	f000 fae3 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019c6a:	bf00      	nop
 8019c6c:	3710      	adds	r7, #16
 8019c6e:	46bd      	mov	sp, r7
 8019c70:	bd80      	pop	{r7, pc}
	...

08019c74 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019c74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019c78:	b086      	sub	sp, #24
 8019c7a:	af00      	add	r7, sp, #0
 8019c7c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8019c7e:	2300      	movs	r3, #0
 8019c80:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019c82:	f107 0308 	add.w	r3, r7, #8
 8019c86:	2200      	movs	r2, #0
 8019c88:	601a      	str	r2, [r3, #0]
 8019c8a:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	781a      	ldrb	r2, [r3, #0]
 8019c90:	4b5c      	ldr	r3, [pc, #368]	@ (8019e04 <SUBGRF_SetModulationParams+0x190>)
 8019c92:	781b      	ldrb	r3, [r3, #0]
 8019c94:	429a      	cmp	r2, r3
 8019c96:	d004      	beq.n	8019ca2 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	781b      	ldrb	r3, [r3, #0]
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	f7ff fef5 	bl	8019a8c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	781b      	ldrb	r3, [r3, #0]
 8019ca6:	2b03      	cmp	r3, #3
 8019ca8:	f200 80a5 	bhi.w	8019df6 <SUBGRF_SetModulationParams+0x182>
 8019cac:	a201      	add	r2, pc, #4	@ (adr r2, 8019cb4 <SUBGRF_SetModulationParams+0x40>)
 8019cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cb2:	bf00      	nop
 8019cb4:	08019cc5 	.word	0x08019cc5
 8019cb8:	08019d85 	.word	0x08019d85
 8019cbc:	08019d47 	.word	0x08019d47
 8019cc0:	08019db3 	.word	0x08019db3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019cc4:	2308      	movs	r3, #8
 8019cc6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	685b      	ldr	r3, [r3, #4]
 8019ccc:	4a4e      	ldr	r2, [pc, #312]	@ (8019e08 <SUBGRF_SetModulationParams+0x194>)
 8019cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cd2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019cd4:	697b      	ldr	r3, [r7, #20]
 8019cd6:	0c1b      	lsrs	r3, r3, #16
 8019cd8:	b2db      	uxtb	r3, r3
 8019cda:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019cdc:	697b      	ldr	r3, [r7, #20]
 8019cde:	0a1b      	lsrs	r3, r3, #8
 8019ce0:	b2db      	uxtb	r3, r3
 8019ce2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	b2db      	uxtb	r3, r3
 8019ce8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	7b1b      	ldrb	r3, [r3, #12]
 8019cee:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	7b5b      	ldrb	r3, [r3, #13]
 8019cf4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	689b      	ldr	r3, [r3, #8]
 8019cfa:	2200      	movs	r2, #0
 8019cfc:	461c      	mov	r4, r3
 8019cfe:	4615      	mov	r5, r2
 8019d00:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019d04:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019d08:	4a40      	ldr	r2, [pc, #256]	@ (8019e0c <SUBGRF_SetModulationParams+0x198>)
 8019d0a:	f04f 0300 	mov.w	r3, #0
 8019d0e:	4640      	mov	r0, r8
 8019d10:	4649      	mov	r1, r9
 8019d12:	f7e6 ff49 	bl	8000ba8 <__aeabi_uldivmod>
 8019d16:	4602      	mov	r2, r0
 8019d18:	460b      	mov	r3, r1
 8019d1a:	4613      	mov	r3, r2
 8019d1c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019d1e:	697b      	ldr	r3, [r7, #20]
 8019d20:	0c1b      	lsrs	r3, r3, #16
 8019d22:	b2db      	uxtb	r3, r3
 8019d24:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	0a1b      	lsrs	r3, r3, #8
 8019d2a:	b2db      	uxtb	r3, r3
 8019d2c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019d2e:	697b      	ldr	r3, [r7, #20]
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019d34:	7cfb      	ldrb	r3, [r7, #19]
 8019d36:	b29a      	uxth	r2, r3
 8019d38:	f107 0308 	add.w	r3, r7, #8
 8019d3c:	4619      	mov	r1, r3
 8019d3e:	208b      	movs	r0, #139	@ 0x8b
 8019d40:	f000 fa76 	bl	801a230 <SUBGRF_WriteCommand>
        break;
 8019d44:	e058      	b.n	8019df8 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019d46:	2304      	movs	r3, #4
 8019d48:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	691b      	ldr	r3, [r3, #16]
 8019d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8019e08 <SUBGRF_SetModulationParams+0x194>)
 8019d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8019d54:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019d56:	697b      	ldr	r3, [r7, #20]
 8019d58:	0c1b      	lsrs	r3, r3, #16
 8019d5a:	b2db      	uxtb	r3, r3
 8019d5c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019d5e:	697b      	ldr	r3, [r7, #20]
 8019d60:	0a1b      	lsrs	r3, r3, #8
 8019d62:	b2db      	uxtb	r3, r3
 8019d64:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019d66:	697b      	ldr	r3, [r7, #20]
 8019d68:	b2db      	uxtb	r3, r3
 8019d6a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	7d1b      	ldrb	r3, [r3, #20]
 8019d70:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019d72:	7cfb      	ldrb	r3, [r7, #19]
 8019d74:	b29a      	uxth	r2, r3
 8019d76:	f107 0308 	add.w	r3, r7, #8
 8019d7a:	4619      	mov	r1, r3
 8019d7c:	208b      	movs	r0, #139	@ 0x8b
 8019d7e:	f000 fa57 	bl	801a230 <SUBGRF_WriteCommand>
        break;
 8019d82:	e039      	b.n	8019df8 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8019d84:	2304      	movs	r3, #4
 8019d86:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	7e1b      	ldrb	r3, [r3, #24]
 8019d8c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	7e5b      	ldrb	r3, [r3, #25]
 8019d92:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	7e9b      	ldrb	r3, [r3, #26]
 8019d98:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	7edb      	ldrb	r3, [r3, #27]
 8019d9e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019da0:	7cfb      	ldrb	r3, [r7, #19]
 8019da2:	b29a      	uxth	r2, r3
 8019da4:	f107 0308 	add.w	r3, r7, #8
 8019da8:	4619      	mov	r1, r3
 8019daa:	208b      	movs	r0, #139	@ 0x8b
 8019dac:	f000 fa40 	bl	801a230 <SUBGRF_WriteCommand>

        break;
 8019db0:	e022      	b.n	8019df8 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8019db2:	2305      	movs	r3, #5
 8019db4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	685b      	ldr	r3, [r3, #4]
 8019dba:	4a13      	ldr	r2, [pc, #76]	@ (8019e08 <SUBGRF_SetModulationParams+0x194>)
 8019dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8019dc0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	0c1b      	lsrs	r3, r3, #16
 8019dc6:	b2db      	uxtb	r3, r3
 8019dc8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019dca:	697b      	ldr	r3, [r7, #20]
 8019dcc:	0a1b      	lsrs	r3, r3, #8
 8019dce:	b2db      	uxtb	r3, r3
 8019dd0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019dd2:	697b      	ldr	r3, [r7, #20]
 8019dd4:	b2db      	uxtb	r3, r3
 8019dd6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	7b1b      	ldrb	r3, [r3, #12]
 8019ddc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	7b5b      	ldrb	r3, [r3, #13]
 8019de2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019de4:	7cfb      	ldrb	r3, [r7, #19]
 8019de6:	b29a      	uxth	r2, r3
 8019de8:	f107 0308 	add.w	r3, r7, #8
 8019dec:	4619      	mov	r1, r3
 8019dee:	208b      	movs	r0, #139	@ 0x8b
 8019df0:	f000 fa1e 	bl	801a230 <SUBGRF_WriteCommand>
        break;
 8019df4:	e000      	b.n	8019df8 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019df6:	bf00      	nop
    }
}
 8019df8:	bf00      	nop
 8019dfa:	3718      	adds	r7, #24
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019e02:	bf00      	nop
 8019e04:	20001cc5 	.word	0x20001cc5
 8019e08:	3d090000 	.word	0x3d090000
 8019e0c:	01e84800 	.word	0x01e84800

08019e10 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b086      	sub	sp, #24
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019e18:	2300      	movs	r3, #0
 8019e1a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019e1c:	f107 030c 	add.w	r3, r7, #12
 8019e20:	2200      	movs	r2, #0
 8019e22:	601a      	str	r2, [r3, #0]
 8019e24:	605a      	str	r2, [r3, #4]
 8019e26:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	781a      	ldrb	r2, [r3, #0]
 8019e2c:	4b44      	ldr	r3, [pc, #272]	@ (8019f40 <SUBGRF_SetPacketParams+0x130>)
 8019e2e:	781b      	ldrb	r3, [r3, #0]
 8019e30:	429a      	cmp	r2, r3
 8019e32:	d004      	beq.n	8019e3e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	781b      	ldrb	r3, [r3, #0]
 8019e38:	4618      	mov	r0, r3
 8019e3a:	f7ff fe27 	bl	8019a8c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	781b      	ldrb	r3, [r3, #0]
 8019e42:	2b03      	cmp	r3, #3
 8019e44:	d878      	bhi.n	8019f38 <SUBGRF_SetPacketParams+0x128>
 8019e46:	a201      	add	r2, pc, #4	@ (adr r2, 8019e4c <SUBGRF_SetPacketParams+0x3c>)
 8019e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e4c:	08019e5d 	.word	0x08019e5d
 8019e50:	08019eed 	.word	0x08019eed
 8019e54:	08019ee1 	.word	0x08019ee1
 8019e58:	08019e5d 	.word	0x08019e5d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	7a5b      	ldrb	r3, [r3, #9]
 8019e60:	2bf1      	cmp	r3, #241	@ 0xf1
 8019e62:	d10a      	bne.n	8019e7a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019e64:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019e68:	f7ff faa6 	bl	80193b8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019e6c:	f248 0005 	movw	r0, #32773	@ 0x8005
 8019e70:	f7ff fac2 	bl	80193f8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019e74:	2302      	movs	r3, #2
 8019e76:	75bb      	strb	r3, [r7, #22]
 8019e78:	e011      	b.n	8019e9e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	7a5b      	ldrb	r3, [r3, #9]
 8019e7e:	2bf2      	cmp	r3, #242	@ 0xf2
 8019e80:	d10a      	bne.n	8019e98 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019e82:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8019e86:	f7ff fa97 	bl	80193b8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019e8a:	f241 0021 	movw	r0, #4129	@ 0x1021
 8019e8e:	f7ff fab3 	bl	80193f8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019e92:	2306      	movs	r3, #6
 8019e94:	75bb      	strb	r3, [r7, #22]
 8019e96:	e002      	b.n	8019e9e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	7a5b      	ldrb	r3, [r3, #9]
 8019e9c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019e9e:	2309      	movs	r3, #9
 8019ea0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	885b      	ldrh	r3, [r3, #2]
 8019ea6:	0a1b      	lsrs	r3, r3, #8
 8019ea8:	b29b      	uxth	r3, r3
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	885b      	ldrh	r3, [r3, #2]
 8019eb2:	b2db      	uxtb	r3, r3
 8019eb4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	791b      	ldrb	r3, [r3, #4]
 8019eba:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	795b      	ldrb	r3, [r3, #5]
 8019ec0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	799b      	ldrb	r3, [r3, #6]
 8019ec6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	79db      	ldrb	r3, [r3, #7]
 8019ecc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	7a1b      	ldrb	r3, [r3, #8]
 8019ed2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019ed4:	7dbb      	ldrb	r3, [r7, #22]
 8019ed6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	7a9b      	ldrb	r3, [r3, #10]
 8019edc:	753b      	strb	r3, [r7, #20]
        break;
 8019ede:	e022      	b.n	8019f26 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019ee0:	2301      	movs	r3, #1
 8019ee2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	7b1b      	ldrb	r3, [r3, #12]
 8019ee8:	733b      	strb	r3, [r7, #12]
        break;
 8019eea:	e01c      	b.n	8019f26 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019eec:	2306      	movs	r3, #6
 8019eee:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	89db      	ldrh	r3, [r3, #14]
 8019ef4:	0a1b      	lsrs	r3, r3, #8
 8019ef6:	b29b      	uxth	r3, r3
 8019ef8:	b2db      	uxtb	r3, r3
 8019efa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	89db      	ldrh	r3, [r3, #14]
 8019f00:	b2db      	uxtb	r3, r3
 8019f02:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	7c1a      	ldrb	r2, [r3, #16]
 8019f08:	4b0e      	ldr	r3, [pc, #56]	@ (8019f44 <SUBGRF_SetPacketParams+0x134>)
 8019f0a:	4611      	mov	r1, r2
 8019f0c:	7019      	strb	r1, [r3, #0]
 8019f0e:	4613      	mov	r3, r2
 8019f10:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	7c5b      	ldrb	r3, [r3, #17]
 8019f16:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	7c9b      	ldrb	r3, [r3, #18]
 8019f1c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	7cdb      	ldrb	r3, [r3, #19]
 8019f22:	747b      	strb	r3, [r7, #17]
        break;
 8019f24:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019f26:	7dfb      	ldrb	r3, [r7, #23]
 8019f28:	b29a      	uxth	r2, r3
 8019f2a:	f107 030c 	add.w	r3, r7, #12
 8019f2e:	4619      	mov	r1, r3
 8019f30:	208c      	movs	r0, #140	@ 0x8c
 8019f32:	f000 f97d 	bl	801a230 <SUBGRF_WriteCommand>
 8019f36:	e000      	b.n	8019f3a <SUBGRF_SetPacketParams+0x12a>
        return;
 8019f38:	bf00      	nop
}
 8019f3a:	3718      	adds	r7, #24
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}
 8019f40:	20001cc5 	.word	0x20001cc5
 8019f44:	20001cc6 	.word	0x20001cc6

08019f48 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b084      	sub	sp, #16
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	4603      	mov	r3, r0
 8019f50:	460a      	mov	r2, r1
 8019f52:	71fb      	strb	r3, [r7, #7]
 8019f54:	4613      	mov	r3, r2
 8019f56:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019f58:	79fb      	ldrb	r3, [r7, #7]
 8019f5a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019f5c:	79bb      	ldrb	r3, [r7, #6]
 8019f5e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019f60:	f107 030c 	add.w	r3, r7, #12
 8019f64:	2202      	movs	r2, #2
 8019f66:	4619      	mov	r1, r3
 8019f68:	208f      	movs	r0, #143	@ 0x8f
 8019f6a:	f000 f961 	bl	801a230 <SUBGRF_WriteCommand>
}
 8019f6e:	bf00      	nop
 8019f70:	3710      	adds	r7, #16
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd80      	pop	{r7, pc}

08019f76 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019f76:	b580      	push	{r7, lr}
 8019f78:	b082      	sub	sp, #8
 8019f7a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019f80:	1d3b      	adds	r3, r7, #4
 8019f82:	2201      	movs	r2, #1
 8019f84:	4619      	mov	r1, r3
 8019f86:	2015      	movs	r0, #21
 8019f88:	f000 f974 	bl	801a274 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019f8c:	793b      	ldrb	r3, [r7, #4]
 8019f8e:	425b      	negs	r3, r3
 8019f90:	105b      	asrs	r3, r3, #1
 8019f92:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019f98:	4618      	mov	r0, r3
 8019f9a:	3708      	adds	r7, #8
 8019f9c:	46bd      	mov	sp, r7
 8019f9e:	bd80      	pop	{r7, pc}

08019fa0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b084      	sub	sp, #16
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	6078      	str	r0, [r7, #4]
 8019fa8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019faa:	f107 030c 	add.w	r3, r7, #12
 8019fae:	2202      	movs	r2, #2
 8019fb0:	4619      	mov	r1, r3
 8019fb2:	2013      	movs	r0, #19
 8019fb4:	f000 f95e 	bl	801a274 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019fb8:	f7ff fd84 	bl	8019ac4 <SUBGRF_GetPacketType>
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	2b01      	cmp	r3, #1
 8019fc0:	d10d      	bne.n	8019fde <SUBGRF_GetRxBufferStatus+0x3e>
 8019fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8019ff4 <SUBGRF_GetRxBufferStatus+0x54>)
 8019fc4:	781b      	ldrb	r3, [r3, #0]
 8019fc6:	b2db      	uxtb	r3, r3
 8019fc8:	2b01      	cmp	r3, #1
 8019fca:	d108      	bne.n	8019fde <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019fcc:	f240 7002 	movw	r0, #1794	@ 0x702
 8019fd0:	f000 f886 	bl	801a0e0 <SUBGRF_ReadRegister>
 8019fd4:	4603      	mov	r3, r0
 8019fd6:	461a      	mov	r2, r3
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	701a      	strb	r2, [r3, #0]
 8019fdc:	e002      	b.n	8019fe4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019fde:	7b3a      	ldrb	r2, [r7, #12]
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019fe4:	7b7a      	ldrb	r2, [r7, #13]
 8019fe6:	683b      	ldr	r3, [r7, #0]
 8019fe8:	701a      	strb	r2, [r3, #0]
}
 8019fea:	bf00      	nop
 8019fec:	3710      	adds	r7, #16
 8019fee:	46bd      	mov	sp, r7
 8019ff0:	bd80      	pop	{r7, pc}
 8019ff2:	bf00      	nop
 8019ff4:	20001cc6 	.word	0x20001cc6

08019ff8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b084      	sub	sp, #16
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a000:	f107 030c 	add.w	r3, r7, #12
 801a004:	2203      	movs	r2, #3
 801a006:	4619      	mov	r1, r3
 801a008:	2014      	movs	r0, #20
 801a00a:	f000 f933 	bl	801a274 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a00e:	f7ff fd59 	bl	8019ac4 <SUBGRF_GetPacketType>
 801a012:	4603      	mov	r3, r0
 801a014:	461a      	mov	r2, r3
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	781b      	ldrb	r3, [r3, #0]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d002      	beq.n	801a028 <SUBGRF_GetPacketStatus+0x30>
 801a022:	2b01      	cmp	r3, #1
 801a024:	d013      	beq.n	801a04e <SUBGRF_GetPacketStatus+0x56>
 801a026:	e02a      	b.n	801a07e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a028:	7b3a      	ldrb	r2, [r7, #12]
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a02e:	7b7b      	ldrb	r3, [r7, #13]
 801a030:	425b      	negs	r3, r3
 801a032:	105b      	asrs	r3, r3, #1
 801a034:	b25a      	sxtb	r2, r3
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a03a:	7bbb      	ldrb	r3, [r7, #14]
 801a03c:	425b      	negs	r3, r3
 801a03e:	105b      	asrs	r3, r3, #1
 801a040:	b25a      	sxtb	r2, r3
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	2200      	movs	r2, #0
 801a04a:	609a      	str	r2, [r3, #8]
            break;
 801a04c:	e020      	b.n	801a090 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a04e:	7b3b      	ldrb	r3, [r7, #12]
 801a050:	425b      	negs	r3, r3
 801a052:	105b      	asrs	r3, r3, #1
 801a054:	b25a      	sxtb	r2, r3
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a05a:	7b7b      	ldrb	r3, [r7, #13]
 801a05c:	b25b      	sxtb	r3, r3
 801a05e:	3302      	adds	r3, #2
 801a060:	109b      	asrs	r3, r3, #2
 801a062:	b25a      	sxtb	r2, r3
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801a068:	7bbb      	ldrb	r3, [r7, #14]
 801a06a:	425b      	negs	r3, r3
 801a06c:	105b      	asrs	r3, r3, #1
 801a06e:	b25a      	sxtb	r2, r3
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801a074:	4b08      	ldr	r3, [pc, #32]	@ (801a098 <SUBGRF_GetPacketStatus+0xa0>)
 801a076:	681a      	ldr	r2, [r3, #0]
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	611a      	str	r2, [r3, #16]
            break;
 801a07c:	e008      	b.n	801a090 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801a07e:	2214      	movs	r2, #20
 801a080:	2100      	movs	r1, #0
 801a082:	6878      	ldr	r0, [r7, #4]
 801a084:	f000 fc1d 	bl	801a8c2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	220f      	movs	r2, #15
 801a08c:	701a      	strb	r2, [r3, #0]
            break;
 801a08e:	bf00      	nop
    }
}
 801a090:	bf00      	nop
 801a092:	3710      	adds	r7, #16
 801a094:	46bd      	mov	sp, r7
 801a096:	bd80      	pop	{r7, pc}
 801a098:	20001cc8 	.word	0x20001cc8

0801a09c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b086      	sub	sp, #24
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	460a      	mov	r2, r1
 801a0a6:	80fb      	strh	r3, [r7, #6]
 801a0a8:	4613      	mov	r3, r2
 801a0aa:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0ac:	f3ef 8310 	mrs	r3, PRIMASK
 801a0b0:	60fb      	str	r3, [r7, #12]
  return(result);
 801a0b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a0b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0b6:	b672      	cpsid	i
}
 801a0b8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801a0ba:	1d7a      	adds	r2, r7, #5
 801a0bc:	88f9      	ldrh	r1, [r7, #6]
 801a0be:	2301      	movs	r3, #1
 801a0c0:	4806      	ldr	r0, [pc, #24]	@ (801a0dc <SUBGRF_WriteRegister+0x40>)
 801a0c2:	f7ed fabd 	bl	8007640 <HAL_SUBGHZ_WriteRegisters>
 801a0c6:	697b      	ldr	r3, [r7, #20]
 801a0c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0ca:	693b      	ldr	r3, [r7, #16]
 801a0cc:	f383 8810 	msr	PRIMASK, r3
}
 801a0d0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a0d2:	bf00      	nop
 801a0d4:	3718      	adds	r7, #24
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bd80      	pop	{r7, pc}
 801a0da:	bf00      	nop
 801a0dc:	20000228 	.word	0x20000228

0801a0e0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b086      	sub	sp, #24
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0ea:	f3ef 8310 	mrs	r3, PRIMASK
 801a0ee:	60fb      	str	r3, [r7, #12]
  return(result);
 801a0f0:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 801a0f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0f4:	b672      	cpsid	i
}
 801a0f6:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801a0f8:	f107 020b 	add.w	r2, r7, #11
 801a0fc:	88f9      	ldrh	r1, [r7, #6]
 801a0fe:	2301      	movs	r3, #1
 801a100:	4806      	ldr	r0, [pc, #24]	@ (801a11c <SUBGRF_ReadRegister+0x3c>)
 801a102:	f7ed fafc 	bl	80076fe <HAL_SUBGHZ_ReadRegisters>
 801a106:	697b      	ldr	r3, [r7, #20]
 801a108:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a10a:	693b      	ldr	r3, [r7, #16]
 801a10c:	f383 8810 	msr	PRIMASK, r3
}
 801a110:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 801a112:	7afb      	ldrb	r3, [r7, #11]
}
 801a114:	4618      	mov	r0, r3
 801a116:	3718      	adds	r7, #24
 801a118:	46bd      	mov	sp, r7
 801a11a:	bd80      	pop	{r7, pc}
 801a11c:	20000228 	.word	0x20000228

0801a120 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a120:	b580      	push	{r7, lr}
 801a122:	b086      	sub	sp, #24
 801a124:	af00      	add	r7, sp, #0
 801a126:	4603      	mov	r3, r0
 801a128:	6039      	str	r1, [r7, #0]
 801a12a:	80fb      	strh	r3, [r7, #6]
 801a12c:	4613      	mov	r3, r2
 801a12e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a130:	f3ef 8310 	mrs	r3, PRIMASK
 801a134:	60fb      	str	r3, [r7, #12]
  return(result);
 801a136:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a138:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a13a:	b672      	cpsid	i
}
 801a13c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a13e:	88bb      	ldrh	r3, [r7, #4]
 801a140:	88f9      	ldrh	r1, [r7, #6]
 801a142:	683a      	ldr	r2, [r7, #0]
 801a144:	4806      	ldr	r0, [pc, #24]	@ (801a160 <SUBGRF_WriteRegisters+0x40>)
 801a146:	f7ed fa7b 	bl	8007640 <HAL_SUBGHZ_WriteRegisters>
 801a14a:	697b      	ldr	r3, [r7, #20]
 801a14c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a14e:	693b      	ldr	r3, [r7, #16]
 801a150:	f383 8810 	msr	PRIMASK, r3
}
 801a154:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a156:	bf00      	nop
 801a158:	3718      	adds	r7, #24
 801a15a:	46bd      	mov	sp, r7
 801a15c:	bd80      	pop	{r7, pc}
 801a15e:	bf00      	nop
 801a160:	20000228 	.word	0x20000228

0801a164 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a164:	b580      	push	{r7, lr}
 801a166:	b086      	sub	sp, #24
 801a168:	af00      	add	r7, sp, #0
 801a16a:	4603      	mov	r3, r0
 801a16c:	6039      	str	r1, [r7, #0]
 801a16e:	80fb      	strh	r3, [r7, #6]
 801a170:	4613      	mov	r3, r2
 801a172:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a174:	f3ef 8310 	mrs	r3, PRIMASK
 801a178:	60fb      	str	r3, [r7, #12]
  return(result);
 801a17a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a17c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a17e:	b672      	cpsid	i
}
 801a180:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801a182:	88bb      	ldrh	r3, [r7, #4]
 801a184:	88f9      	ldrh	r1, [r7, #6]
 801a186:	683a      	ldr	r2, [r7, #0]
 801a188:	4806      	ldr	r0, [pc, #24]	@ (801a1a4 <SUBGRF_ReadRegisters+0x40>)
 801a18a:	f7ed fab8 	bl	80076fe <HAL_SUBGHZ_ReadRegisters>
 801a18e:	697b      	ldr	r3, [r7, #20]
 801a190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a192:	693b      	ldr	r3, [r7, #16]
 801a194:	f383 8810 	msr	PRIMASK, r3
}
 801a198:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a19a:	bf00      	nop
 801a19c:	3718      	adds	r7, #24
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}
 801a1a2:	bf00      	nop
 801a1a4:	20000228 	.word	0x20000228

0801a1a8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b086      	sub	sp, #24
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	4603      	mov	r3, r0
 801a1b0:	6039      	str	r1, [r7, #0]
 801a1b2:	71fb      	strb	r3, [r7, #7]
 801a1b4:	4613      	mov	r3, r2
 801a1b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1b8:	f3ef 8310 	mrs	r3, PRIMASK
 801a1bc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a1be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a1c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a1c2:	b672      	cpsid	i
}
 801a1c4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a1c6:	79bb      	ldrb	r3, [r7, #6]
 801a1c8:	b29b      	uxth	r3, r3
 801a1ca:	79f9      	ldrb	r1, [r7, #7]
 801a1cc:	683a      	ldr	r2, [r7, #0]
 801a1ce:	4806      	ldr	r0, [pc, #24]	@ (801a1e8 <SUBGRF_WriteBuffer+0x40>)
 801a1d0:	f7ed fba9 	bl	8007926 <HAL_SUBGHZ_WriteBuffer>
 801a1d4:	697b      	ldr	r3, [r7, #20]
 801a1d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1d8:	693b      	ldr	r3, [r7, #16]
 801a1da:	f383 8810 	msr	PRIMASK, r3
}
 801a1de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a1e0:	bf00      	nop
 801a1e2:	3718      	adds	r7, #24
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}
 801a1e8:	20000228 	.word	0x20000228

0801a1ec <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b086      	sub	sp, #24
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	4603      	mov	r3, r0
 801a1f4:	6039      	str	r1, [r7, #0]
 801a1f6:	71fb      	strb	r3, [r7, #7]
 801a1f8:	4613      	mov	r3, r2
 801a1fa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1fc:	f3ef 8310 	mrs	r3, PRIMASK
 801a200:	60fb      	str	r3, [r7, #12]
  return(result);
 801a202:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a206:	b672      	cpsid	i
}
 801a208:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a20a:	79bb      	ldrb	r3, [r7, #6]
 801a20c:	b29b      	uxth	r3, r3
 801a20e:	79f9      	ldrb	r1, [r7, #7]
 801a210:	683a      	ldr	r2, [r7, #0]
 801a212:	4806      	ldr	r0, [pc, #24]	@ (801a22c <SUBGRF_ReadBuffer+0x40>)
 801a214:	f7ed fbda 	bl	80079cc <HAL_SUBGHZ_ReadBuffer>
 801a218:	697b      	ldr	r3, [r7, #20]
 801a21a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a21c:	693b      	ldr	r3, [r7, #16]
 801a21e:	f383 8810 	msr	PRIMASK, r3
}
 801a222:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a224:	bf00      	nop
 801a226:	3718      	adds	r7, #24
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}
 801a22c:	20000228 	.word	0x20000228

0801a230 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b086      	sub	sp, #24
 801a234:	af00      	add	r7, sp, #0
 801a236:	4603      	mov	r3, r0
 801a238:	6039      	str	r1, [r7, #0]
 801a23a:	71fb      	strb	r3, [r7, #7]
 801a23c:	4613      	mov	r3, r2
 801a23e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a240:	f3ef 8310 	mrs	r3, PRIMASK
 801a244:	60fb      	str	r3, [r7, #12]
  return(result);
 801a246:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a248:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a24a:	b672      	cpsid	i
}
 801a24c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a24e:	88bb      	ldrh	r3, [r7, #4]
 801a250:	79f9      	ldrb	r1, [r7, #7]
 801a252:	683a      	ldr	r2, [r7, #0]
 801a254:	4806      	ldr	r0, [pc, #24]	@ (801a270 <SUBGRF_WriteCommand+0x40>)
 801a256:	f7ed fab3 	bl	80077c0 <HAL_SUBGHZ_ExecSetCmd>
 801a25a:	697b      	ldr	r3, [r7, #20]
 801a25c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a25e:	693b      	ldr	r3, [r7, #16]
 801a260:	f383 8810 	msr	PRIMASK, r3
}
 801a264:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a266:	bf00      	nop
 801a268:	3718      	adds	r7, #24
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bd80      	pop	{r7, pc}
 801a26e:	bf00      	nop
 801a270:	20000228 	.word	0x20000228

0801a274 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a274:	b580      	push	{r7, lr}
 801a276:	b086      	sub	sp, #24
 801a278:	af00      	add	r7, sp, #0
 801a27a:	4603      	mov	r3, r0
 801a27c:	6039      	str	r1, [r7, #0]
 801a27e:	71fb      	strb	r3, [r7, #7]
 801a280:	4613      	mov	r3, r2
 801a282:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a284:	f3ef 8310 	mrs	r3, PRIMASK
 801a288:	60fb      	str	r3, [r7, #12]
  return(result);
 801a28a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a28c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a28e:	b672      	cpsid	i
}
 801a290:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a292:	88bb      	ldrh	r3, [r7, #4]
 801a294:	79f9      	ldrb	r1, [r7, #7]
 801a296:	683a      	ldr	r2, [r7, #0]
 801a298:	4806      	ldr	r0, [pc, #24]	@ (801a2b4 <SUBGRF_ReadCommand+0x40>)
 801a29a:	f7ed faf0 	bl	800787e <HAL_SUBGHZ_ExecGetCmd>
 801a29e:	697b      	ldr	r3, [r7, #20]
 801a2a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2a2:	693b      	ldr	r3, [r7, #16]
 801a2a4:	f383 8810 	msr	PRIMASK, r3
}
 801a2a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a2aa:	bf00      	nop
 801a2ac:	3718      	adds	r7, #24
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	bd80      	pop	{r7, pc}
 801a2b2:	bf00      	nop
 801a2b4:	20000228 	.word	0x20000228

0801a2b8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b084      	sub	sp, #16
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	4603      	mov	r3, r0
 801a2c0:	460a      	mov	r2, r1
 801a2c2:	71fb      	strb	r3, [r7, #7]
 801a2c4:	4613      	mov	r3, r2
 801a2c6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a2c8:	2301      	movs	r3, #1
 801a2ca:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a2cc:	79bb      	ldrb	r3, [r7, #6]
 801a2ce:	2b01      	cmp	r3, #1
 801a2d0:	d10d      	bne.n	801a2ee <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a2d2:	79fb      	ldrb	r3, [r7, #7]
 801a2d4:	2b01      	cmp	r3, #1
 801a2d6:	d104      	bne.n	801a2e2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a2d8:	2302      	movs	r3, #2
 801a2da:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a2dc:	2004      	movs	r0, #4
 801a2de:	f000 f8ef 	bl	801a4c0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801a2e2:	79fb      	ldrb	r3, [r7, #7]
 801a2e4:	2b02      	cmp	r3, #2
 801a2e6:	d107      	bne.n	801a2f8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801a2e8:	2303      	movs	r3, #3
 801a2ea:	73fb      	strb	r3, [r7, #15]
 801a2ec:	e004      	b.n	801a2f8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801a2ee:	79bb      	ldrb	r3, [r7, #6]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d101      	bne.n	801a2f8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801a2f4:	2301      	movs	r3, #1
 801a2f6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801a2f8:	7bfb      	ldrb	r3, [r7, #15]
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	f7f0 fbb9 	bl	800aa72 <RBI_ConfigRFSwitch>
}
 801a300:	bf00      	nop
 801a302:	3710      	adds	r7, #16
 801a304:	46bd      	mov	sp, r7
 801a306:	bd80      	pop	{r7, pc}

0801a308 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	b084      	sub	sp, #16
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	4603      	mov	r3, r0
 801a310:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801a312:	2301      	movs	r3, #1
 801a314:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801a316:	f7f0 fbba 	bl	800aa8e <RBI_GetTxConfig>
 801a31a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a31c:	68bb      	ldr	r3, [r7, #8]
 801a31e:	2b02      	cmp	r3, #2
 801a320:	d016      	beq.n	801a350 <SUBGRF_SetRfTxPower+0x48>
 801a322:	68bb      	ldr	r3, [r7, #8]
 801a324:	2b02      	cmp	r3, #2
 801a326:	dc16      	bgt.n	801a356 <SUBGRF_SetRfTxPower+0x4e>
 801a328:	68bb      	ldr	r3, [r7, #8]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d003      	beq.n	801a336 <SUBGRF_SetRfTxPower+0x2e>
 801a32e:	68bb      	ldr	r3, [r7, #8]
 801a330:	2b01      	cmp	r3, #1
 801a332:	d00a      	beq.n	801a34a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a334:	e00f      	b.n	801a356 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a33a:	2b0f      	cmp	r3, #15
 801a33c:	dd02      	ble.n	801a344 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a33e:	2302      	movs	r3, #2
 801a340:	73fb      	strb	r3, [r7, #15]
            break;
 801a342:	e009      	b.n	801a358 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a344:	2301      	movs	r3, #1
 801a346:	73fb      	strb	r3, [r7, #15]
            break;
 801a348:	e006      	b.n	801a358 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a34a:	2301      	movs	r3, #1
 801a34c:	73fb      	strb	r3, [r7, #15]
            break;
 801a34e:	e003      	b.n	801a358 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a350:	2302      	movs	r3, #2
 801a352:	73fb      	strb	r3, [r7, #15]
            break;
 801a354:	e000      	b.n	801a358 <SUBGRF_SetRfTxPower+0x50>
            break;
 801a356:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a358:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a35c:	7bfb      	ldrb	r3, [r7, #15]
 801a35e:	2202      	movs	r2, #2
 801a360:	4618      	mov	r0, r3
 801a362:	f7ff fbb9 	bl	8019ad8 <SUBGRF_SetTxParams>

    return paSelect;
 801a366:	7bfb      	ldrb	r3, [r7, #15]
}
 801a368:	4618      	mov	r0, r3
 801a36a:	3710      	adds	r7, #16
 801a36c:	46bd      	mov	sp, r7
 801a36e:	bd80      	pop	{r7, pc}

0801a370 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a370:	b480      	push	{r7}
 801a372:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a374:	2301      	movs	r3, #1
}
 801a376:	4618      	mov	r0, r3
 801a378:	46bd      	mov	sp, r7
 801a37a:	bc80      	pop	{r7}
 801a37c:	4770      	bx	lr
	...

0801a380 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b082      	sub	sp, #8
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a388:	4b03      	ldr	r3, [pc, #12]	@ (801a398 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	2001      	movs	r0, #1
 801a38e:	4798      	blx	r3
}
 801a390:	bf00      	nop
 801a392:	3708      	adds	r7, #8
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}
 801a398:	20001cd0 	.word	0x20001cd0

0801a39c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a39c:	b580      	push	{r7, lr}
 801a39e:	b082      	sub	sp, #8
 801a3a0:	af00      	add	r7, sp, #0
 801a3a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a3a4:	4b03      	ldr	r3, [pc, #12]	@ (801a3b4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	2002      	movs	r0, #2
 801a3aa:	4798      	blx	r3
}
 801a3ac:	bf00      	nop
 801a3ae:	3708      	adds	r7, #8
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	bd80      	pop	{r7, pc}
 801a3b4:	20001cd0 	.word	0x20001cd0

0801a3b8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b082      	sub	sp, #8
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801a3c0:	4b03      	ldr	r3, [pc, #12]	@ (801a3d0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	2040      	movs	r0, #64	@ 0x40
 801a3c6:	4798      	blx	r3
}
 801a3c8:	bf00      	nop
 801a3ca:	3708      	adds	r7, #8
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	bd80      	pop	{r7, pc}
 801a3d0:	20001cd0 	.word	0x20001cd0

0801a3d4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801a3d4:	b580      	push	{r7, lr}
 801a3d6:	b082      	sub	sp, #8
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
 801a3dc:	460b      	mov	r3, r1
 801a3de:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801a3e0:	78fb      	ldrb	r3, [r7, #3]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d002      	beq.n	801a3ec <HAL_SUBGHZ_CADStatusCallback+0x18>
 801a3e6:	2b01      	cmp	r3, #1
 801a3e8:	d005      	beq.n	801a3f6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801a3ea:	e00a      	b.n	801a402 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801a3ec:	4b07      	ldr	r3, [pc, #28]	@ (801a40c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	2080      	movs	r0, #128	@ 0x80
 801a3f2:	4798      	blx	r3
            break;
 801a3f4:	e005      	b.n	801a402 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801a3f6:	4b05      	ldr	r3, [pc, #20]	@ (801a40c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a3fe:	4798      	blx	r3
            break;
 801a400:	bf00      	nop
    }
}
 801a402:	bf00      	nop
 801a404:	3708      	adds	r7, #8
 801a406:	46bd      	mov	sp, r7
 801a408:	bd80      	pop	{r7, pc}
 801a40a:	bf00      	nop
 801a40c:	20001cd0 	.word	0x20001cd0

0801a410 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b082      	sub	sp, #8
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801a418:	4b04      	ldr	r3, [pc, #16]	@ (801a42c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801a420:	4798      	blx	r3
}
 801a422:	bf00      	nop
 801a424:	3708      	adds	r7, #8
 801a426:	46bd      	mov	sp, r7
 801a428:	bd80      	pop	{r7, pc}
 801a42a:	bf00      	nop
 801a42c:	20001cd0 	.word	0x20001cd0

0801a430 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a438:	4b03      	ldr	r3, [pc, #12]	@ (801a448 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	2020      	movs	r0, #32
 801a43e:	4798      	blx	r3
}
 801a440:	bf00      	nop
 801a442:	3708      	adds	r7, #8
 801a444:	46bd      	mov	sp, r7
 801a446:	bd80      	pop	{r7, pc}
 801a448:	20001cd0 	.word	0x20001cd0

0801a44c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b082      	sub	sp, #8
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a454:	4b03      	ldr	r3, [pc, #12]	@ (801a464 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	2004      	movs	r0, #4
 801a45a:	4798      	blx	r3
}
 801a45c:	bf00      	nop
 801a45e:	3708      	adds	r7, #8
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}
 801a464:	20001cd0 	.word	0x20001cd0

0801a468 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b082      	sub	sp, #8
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a470:	4b03      	ldr	r3, [pc, #12]	@ (801a480 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	2008      	movs	r0, #8
 801a476:	4798      	blx	r3
}
 801a478:	bf00      	nop
 801a47a:	3708      	adds	r7, #8
 801a47c:	46bd      	mov	sp, r7
 801a47e:	bd80      	pop	{r7, pc}
 801a480:	20001cd0 	.word	0x20001cd0

0801a484 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b082      	sub	sp, #8
 801a488:	af00      	add	r7, sp, #0
 801a48a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a48c:	4b03      	ldr	r3, [pc, #12]	@ (801a49c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	2010      	movs	r0, #16
 801a492:	4798      	blx	r3
}
 801a494:	bf00      	nop
 801a496:	3708      	adds	r7, #8
 801a498:	46bd      	mov	sp, r7
 801a49a:	bd80      	pop	{r7, pc}
 801a49c:	20001cd0 	.word	0x20001cd0

0801a4a0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b082      	sub	sp, #8
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801a4a8:	4b04      	ldr	r3, [pc, #16]	@ (801a4bc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801a4b0:	4798      	blx	r3
}
 801a4b2:	bf00      	nop
 801a4b4:	3708      	adds	r7, #8
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	bd80      	pop	{r7, pc}
 801a4ba:	bf00      	nop
 801a4bc:	20001cd0 	.word	0x20001cd0

0801a4c0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b084      	sub	sp, #16
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a4ca:	f7f0 faee 	bl	800aaaa <RBI_IsDCDC>
 801a4ce:	4603      	mov	r3, r0
 801a4d0:	2b01      	cmp	r3, #1
 801a4d2:	d112      	bne.n	801a4fa <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a4d4:	f640 1023 	movw	r0, #2339	@ 0x923
 801a4d8:	f7ff fe02 	bl	801a0e0 <SUBGRF_ReadRegister>
 801a4dc:	4603      	mov	r3, r0
 801a4de:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a4e0:	7bfb      	ldrb	r3, [r7, #15]
 801a4e2:	f023 0306 	bic.w	r3, r3, #6
 801a4e6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a4e8:	7bfa      	ldrb	r2, [r7, #15]
 801a4ea:	79fb      	ldrb	r3, [r7, #7]
 801a4ec:	4313      	orrs	r3, r2
 801a4ee:	b2db      	uxtb	r3, r3
 801a4f0:	4619      	mov	r1, r3
 801a4f2:	f640 1023 	movw	r0, #2339	@ 0x923
 801a4f6:	f7ff fdd1 	bl	801a09c <SUBGRF_WriteRegister>
  }
}
 801a4fa:	bf00      	nop
 801a4fc:	3710      	adds	r7, #16
 801a4fe:	46bd      	mov	sp, r7
 801a500:	bd80      	pop	{r7, pc}
	...

0801a504 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801a504:	b480      	push	{r7}
 801a506:	b085      	sub	sp, #20
 801a508:	af00      	add	r7, sp, #0
 801a50a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d101      	bne.n	801a516 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801a512:	231f      	movs	r3, #31
 801a514:	e017      	b.n	801a546 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a516:	2300      	movs	r3, #0
 801a518:	73fb      	strb	r3, [r7, #15]
 801a51a:	e00f      	b.n	801a53c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801a51c:	7bfb      	ldrb	r3, [r7, #15]
 801a51e:	4a0c      	ldr	r2, [pc, #48]	@ (801a550 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a524:	687a      	ldr	r2, [r7, #4]
 801a526:	429a      	cmp	r2, r3
 801a528:	d205      	bcs.n	801a536 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801a52a:	7bfb      	ldrb	r3, [r7, #15]
 801a52c:	4a08      	ldr	r2, [pc, #32]	@ (801a550 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a52e:	00db      	lsls	r3, r3, #3
 801a530:	4413      	add	r3, r2
 801a532:	791b      	ldrb	r3, [r3, #4]
 801a534:	e007      	b.n	801a546 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a536:	7bfb      	ldrb	r3, [r7, #15]
 801a538:	3301      	adds	r3, #1
 801a53a:	73fb      	strb	r3, [r7, #15]
 801a53c:	7bfb      	ldrb	r3, [r7, #15]
 801a53e:	2b15      	cmp	r3, #21
 801a540:	d9ec      	bls.n	801a51c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801a542:	bf00      	nop
 801a544:	e7fd      	b.n	801a542 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801a546:	4618      	mov	r0, r3
 801a548:	3714      	adds	r7, #20
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bc80      	pop	{r7}
 801a54e:	4770      	bx	lr
 801a550:	0801c600 	.word	0x0801c600

0801a554 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801a554:	b580      	push	{r7, lr}
 801a556:	b08a      	sub	sp, #40	@ 0x28
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
 801a55c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801a55e:	4b35      	ldr	r3, [pc, #212]	@ (801a634 <SUBGRF_GetCFO+0xe0>)
 801a560:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801a562:	f640 0007 	movw	r0, #2055	@ 0x807
 801a566:	f7ff fdbb 	bl	801a0e0 <SUBGRF_ReadRegister>
 801a56a:	4603      	mov	r3, r0
 801a56c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801a56e:	7ffb      	ldrb	r3, [r7, #31]
 801a570:	08db      	lsrs	r3, r3, #3
 801a572:	b2db      	uxtb	r3, r3
 801a574:	f003 0303 	and.w	r3, r3, #3
 801a578:	3328      	adds	r3, #40	@ 0x28
 801a57a:	443b      	add	r3, r7
 801a57c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801a580:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801a582:	7ffb      	ldrb	r3, [r7, #31]
 801a584:	f003 0307 	and.w	r3, r3, #7
 801a588:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801a58a:	7fba      	ldrb	r2, [r7, #30]
 801a58c:	7f7b      	ldrb	r3, [r7, #29]
 801a58e:	3301      	adds	r3, #1
 801a590:	fa02 f303 	lsl.w	r3, r2, r3
 801a594:	461a      	mov	r2, r3
 801a596:	4b28      	ldr	r3, [pc, #160]	@ (801a638 <SUBGRF_GetCFO+0xe4>)
 801a598:	fbb3 f3f2 	udiv	r3, r3, r2
 801a59c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801a59e:	69ba      	ldr	r2, [r7, #24]
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	fbb2 f3f3 	udiv	r3, r2, r3
 801a5a6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801a5a8:	2301      	movs	r3, #1
 801a5aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801a5ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5b2:	697a      	ldr	r2, [r7, #20]
 801a5b4:	fb02 f303 	mul.w	r3, r2, r3
 801a5b8:	2b07      	cmp	r3, #7
 801a5ba:	d802      	bhi.n	801a5c2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801a5bc:	2302      	movs	r3, #2
 801a5be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801a5c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5c6:	697a      	ldr	r2, [r7, #20]
 801a5c8:	fb02 f303 	mul.w	r3, r2, r3
 801a5cc:	2b03      	cmp	r3, #3
 801a5ce:	d802      	bhi.n	801a5d6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801a5d0:	2304      	movs	r3, #4
 801a5d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801a5d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a5da:	69bb      	ldr	r3, [r7, #24]
 801a5dc:	fb02 f303 	mul.w	r3, r2, r3
 801a5e0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801a5e2:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801a5e6:	f7ff fd7b 	bl	801a0e0 <SUBGRF_ReadRegister>
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	021b      	lsls	r3, r3, #8
 801a5ee:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801a5f2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801a5f4:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801a5f8:	f7ff fd72 	bl	801a0e0 <SUBGRF_ReadRegister>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	461a      	mov	r2, r3
 801a600:	6a3b      	ldr	r3, [r7, #32]
 801a602:	4313      	orrs	r3, r2
 801a604:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801a606:	6a3b      	ldr	r3, [r7, #32]
 801a608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d005      	beq.n	801a61c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801a610:	6a3b      	ldr	r3, [r7, #32]
 801a612:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a616:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a61a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801a61c:	693b      	ldr	r3, [r7, #16]
 801a61e:	095b      	lsrs	r3, r3, #5
 801a620:	6a3a      	ldr	r2, [r7, #32]
 801a622:	fb02 f303 	mul.w	r3, r2, r3
 801a626:	11da      	asrs	r2, r3, #7
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	601a      	str	r2, [r3, #0]
}
 801a62c:	bf00      	nop
 801a62e:	3728      	adds	r7, #40	@ 0x28
 801a630:	46bd      	mov	sp, r7
 801a632:	bd80      	pop	{r7, pc}
 801a634:	0c0a0804 	.word	0x0c0a0804
 801a638:	01e84800 	.word	0x01e84800

0801a63c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801a63c:	b480      	push	{r7}
 801a63e:	b087      	sub	sp, #28
 801a640:	af00      	add	r7, sp, #0
 801a642:	4603      	mov	r3, r0
 801a644:	60b9      	str	r1, [r7, #8]
 801a646:	607a      	str	r2, [r7, #4]
 801a648:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801a64a:	2300      	movs	r3, #0
 801a64c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801a64e:	f04f 33ff 	mov.w	r3, #4294967295
 801a652:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801a654:	697b      	ldr	r3, [r7, #20]
}
 801a656:	4618      	mov	r0, r3
 801a658:	371c      	adds	r7, #28
 801a65a:	46bd      	mov	sp, r7
 801a65c:	bc80      	pop	{r7}
 801a65e:	4770      	bx	lr

0801a660 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801a660:	b480      	push	{r7}
 801a662:	b087      	sub	sp, #28
 801a664:	af00      	add	r7, sp, #0
 801a666:	4603      	mov	r3, r0
 801a668:	60b9      	str	r1, [r7, #8]
 801a66a:	607a      	str	r2, [r7, #4]
 801a66c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801a66e:	2300      	movs	r3, #0
 801a670:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801a672:	f04f 33ff 	mov.w	r3, #4294967295
 801a676:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801a678:	697b      	ldr	r3, [r7, #20]
}
 801a67a:	4618      	mov	r0, r3
 801a67c:	371c      	adds	r7, #28
 801a67e:	46bd      	mov	sp, r7
 801a680:	bc80      	pop	{r7}
 801a682:	4770      	bx	lr

0801a684 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801a684:	b480      	push	{r7}
 801a686:	b085      	sub	sp, #20
 801a688:	af00      	add	r7, sp, #0
 801a68a:	60f8      	str	r0, [r7, #12]
 801a68c:	60b9      	str	r1, [r7, #8]
 801a68e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801a690:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801a694:	4618      	mov	r0, r3
 801a696:	3714      	adds	r7, #20
 801a698:	46bd      	mov	sp, r7
 801a69a:	bc80      	pop	{r7}
 801a69c:	4770      	bx	lr

0801a69e <RFW_DeInit>:

void RFW_DeInit( void )
{
 801a69e:	b480      	push	{r7}
 801a6a0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801a6a2:	bf00      	nop
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	bc80      	pop	{r7}
 801a6a8:	4770      	bx	lr

0801a6aa <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801a6aa:	b480      	push	{r7}
 801a6ac:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801a6ae:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	46bd      	mov	sp, r7
 801a6b4:	bc80      	pop	{r7}
 801a6b6:	4770      	bx	lr

0801a6b8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801a6b8:	b480      	push	{r7}
 801a6ba:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801a6bc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801a6be:	4618      	mov	r0, r3
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	bc80      	pop	{r7}
 801a6c4:	4770      	bx	lr

0801a6c6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801a6c6:	b480      	push	{r7}
 801a6c8:	b083      	sub	sp, #12
 801a6ca:	af00      	add	r7, sp, #0
 801a6cc:	4603      	mov	r3, r0
 801a6ce:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801a6d0:	bf00      	nop
 801a6d2:	370c      	adds	r7, #12
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	bc80      	pop	{r7}
 801a6d8:	4770      	bx	lr

0801a6da <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801a6da:	b480      	push	{r7}
 801a6dc:	b087      	sub	sp, #28
 801a6de:	af00      	add	r7, sp, #0
 801a6e0:	60f8      	str	r0, [r7, #12]
 801a6e2:	460b      	mov	r3, r1
 801a6e4:	607a      	str	r2, [r7, #4]
 801a6e6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801a6e8:	f04f 33ff 	mov.w	r3, #4294967295
 801a6ec:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801a6ee:	697b      	ldr	r3, [r7, #20]
}
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	371c      	adds	r7, #28
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	bc80      	pop	{r7}
 801a6f8:	4770      	bx	lr

0801a6fa <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801a6fa:	b480      	push	{r7}
 801a6fc:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801a6fe:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801a702:	4618      	mov	r0, r3
 801a704:	46bd      	mov	sp, r7
 801a706:	bc80      	pop	{r7}
 801a708:	4770      	bx	lr

0801a70a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801a70a:	b480      	push	{r7}
 801a70c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801a70e:	bf00      	nop
 801a710:	46bd      	mov	sp, r7
 801a712:	bc80      	pop	{r7}
 801a714:	4770      	bx	lr

0801a716 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801a716:	b480      	push	{r7}
 801a718:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801a71a:	bf00      	nop
 801a71c:	46bd      	mov	sp, r7
 801a71e:	bc80      	pop	{r7}
 801a720:	4770      	bx	lr

0801a722 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801a722:	b480      	push	{r7}
 801a724:	b083      	sub	sp, #12
 801a726:	af00      	add	r7, sp, #0
 801a728:	4603      	mov	r3, r0
 801a72a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801a72c:	bf00      	nop
 801a72e:	370c      	adds	r7, #12
 801a730:	46bd      	mov	sp, r7
 801a732:	bc80      	pop	{r7}
 801a734:	4770      	bx	lr
	...

0801a738 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a738:	b480      	push	{r7}
 801a73a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a73c:	4b04      	ldr	r3, [pc, #16]	@ (801a750 <UTIL_LPM_Init+0x18>)
 801a73e:	2200      	movs	r2, #0
 801a740:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a742:	4b04      	ldr	r3, [pc, #16]	@ (801a754 <UTIL_LPM_Init+0x1c>)
 801a744:	2200      	movs	r2, #0
 801a746:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a748:	bf00      	nop
 801a74a:	46bd      	mov	sp, r7
 801a74c:	bc80      	pop	{r7}
 801a74e:	4770      	bx	lr
 801a750:	20001cd4 	.word	0x20001cd4
 801a754:	20001cd8 	.word	0x20001cd8

0801a758 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a758:	b480      	push	{r7}
 801a75a:	b087      	sub	sp, #28
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
 801a760:	460b      	mov	r3, r1
 801a762:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a764:	f3ef 8310 	mrs	r3, PRIMASK
 801a768:	613b      	str	r3, [r7, #16]
  return(result);
 801a76a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a76c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a76e:	b672      	cpsid	i
}
 801a770:	bf00      	nop
  
  switch( state )
 801a772:	78fb      	ldrb	r3, [r7, #3]
 801a774:	2b00      	cmp	r3, #0
 801a776:	d008      	beq.n	801a78a <UTIL_LPM_SetStopMode+0x32>
 801a778:	2b01      	cmp	r3, #1
 801a77a:	d10e      	bne.n	801a79a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a77c:	4b0d      	ldr	r3, [pc, #52]	@ (801a7b4 <UTIL_LPM_SetStopMode+0x5c>)
 801a77e:	681a      	ldr	r2, [r3, #0]
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	4313      	orrs	r3, r2
 801a784:	4a0b      	ldr	r2, [pc, #44]	@ (801a7b4 <UTIL_LPM_SetStopMode+0x5c>)
 801a786:	6013      	str	r3, [r2, #0]
      break;
 801a788:	e008      	b.n	801a79c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	43da      	mvns	r2, r3
 801a78e:	4b09      	ldr	r3, [pc, #36]	@ (801a7b4 <UTIL_LPM_SetStopMode+0x5c>)
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	4013      	ands	r3, r2
 801a794:	4a07      	ldr	r2, [pc, #28]	@ (801a7b4 <UTIL_LPM_SetStopMode+0x5c>)
 801a796:	6013      	str	r3, [r2, #0]
      break;
 801a798:	e000      	b.n	801a79c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a79a:	bf00      	nop
 801a79c:	697b      	ldr	r3, [r7, #20]
 801a79e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	f383 8810 	msr	PRIMASK, r3
}
 801a7a6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a7a8:	bf00      	nop
 801a7aa:	371c      	adds	r7, #28
 801a7ac:	46bd      	mov	sp, r7
 801a7ae:	bc80      	pop	{r7}
 801a7b0:	4770      	bx	lr
 801a7b2:	bf00      	nop
 801a7b4:	20001cd4 	.word	0x20001cd4

0801a7b8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a7b8:	b480      	push	{r7}
 801a7ba:	b087      	sub	sp, #28
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
 801a7c0:	460b      	mov	r3, r1
 801a7c2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7c4:	f3ef 8310 	mrs	r3, PRIMASK
 801a7c8:	613b      	str	r3, [r7, #16]
  return(result);
 801a7ca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a7cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7ce:	b672      	cpsid	i
}
 801a7d0:	bf00      	nop
  
  switch(state)
 801a7d2:	78fb      	ldrb	r3, [r7, #3]
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d008      	beq.n	801a7ea <UTIL_LPM_SetOffMode+0x32>
 801a7d8:	2b01      	cmp	r3, #1
 801a7da:	d10e      	bne.n	801a7fa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a7dc:	4b0d      	ldr	r3, [pc, #52]	@ (801a814 <UTIL_LPM_SetOffMode+0x5c>)
 801a7de:	681a      	ldr	r2, [r3, #0]
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	4313      	orrs	r3, r2
 801a7e4:	4a0b      	ldr	r2, [pc, #44]	@ (801a814 <UTIL_LPM_SetOffMode+0x5c>)
 801a7e6:	6013      	str	r3, [r2, #0]
      break;
 801a7e8:	e008      	b.n	801a7fc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	43da      	mvns	r2, r3
 801a7ee:	4b09      	ldr	r3, [pc, #36]	@ (801a814 <UTIL_LPM_SetOffMode+0x5c>)
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	4013      	ands	r3, r2
 801a7f4:	4a07      	ldr	r2, [pc, #28]	@ (801a814 <UTIL_LPM_SetOffMode+0x5c>)
 801a7f6:	6013      	str	r3, [r2, #0]
      break;
 801a7f8:	e000      	b.n	801a7fc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a7fa:	bf00      	nop
 801a7fc:	697b      	ldr	r3, [r7, #20]
 801a7fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	f383 8810 	msr	PRIMASK, r3
}
 801a806:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a808:	bf00      	nop
 801a80a:	371c      	adds	r7, #28
 801a80c:	46bd      	mov	sp, r7
 801a80e:	bc80      	pop	{r7}
 801a810:	4770      	bx	lr
 801a812:	bf00      	nop
 801a814:	20001cd8 	.word	0x20001cd8

0801a818 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b084      	sub	sp, #16
 801a81c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a81e:	f3ef 8310 	mrs	r3, PRIMASK
 801a822:	60bb      	str	r3, [r7, #8]
  return(result);
 801a824:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a826:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a828:	b672      	cpsid	i
}
 801a82a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a82c:	4b12      	ldr	r3, [pc, #72]	@ (801a878 <UTIL_LPM_EnterLowPower+0x60>)
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d006      	beq.n	801a842 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a834:	4b11      	ldr	r3, [pc, #68]	@ (801a87c <UTIL_LPM_EnterLowPower+0x64>)
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a83a:	4b10      	ldr	r3, [pc, #64]	@ (801a87c <UTIL_LPM_EnterLowPower+0x64>)
 801a83c:	685b      	ldr	r3, [r3, #4]
 801a83e:	4798      	blx	r3
 801a840:	e010      	b.n	801a864 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a842:	4b0f      	ldr	r3, [pc, #60]	@ (801a880 <UTIL_LPM_EnterLowPower+0x68>)
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d006      	beq.n	801a858 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a84a:	4b0c      	ldr	r3, [pc, #48]	@ (801a87c <UTIL_LPM_EnterLowPower+0x64>)
 801a84c:	689b      	ldr	r3, [r3, #8]
 801a84e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a850:	4b0a      	ldr	r3, [pc, #40]	@ (801a87c <UTIL_LPM_EnterLowPower+0x64>)
 801a852:	68db      	ldr	r3, [r3, #12]
 801a854:	4798      	blx	r3
 801a856:	e005      	b.n	801a864 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a858:	4b08      	ldr	r3, [pc, #32]	@ (801a87c <UTIL_LPM_EnterLowPower+0x64>)
 801a85a:	691b      	ldr	r3, [r3, #16]
 801a85c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a85e:	4b07      	ldr	r3, [pc, #28]	@ (801a87c <UTIL_LPM_EnterLowPower+0x64>)
 801a860:	695b      	ldr	r3, [r3, #20]
 801a862:	4798      	blx	r3
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	f383 8810 	msr	PRIMASK, r3
}
 801a86e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a870:	bf00      	nop
 801a872:	3710      	adds	r7, #16
 801a874:	46bd      	mov	sp, r7
 801a876:	bd80      	pop	{r7, pc}
 801a878:	20001cd4 	.word	0x20001cd4
 801a87c:	0801c074 	.word	0x0801c074
 801a880:	20001cd8 	.word	0x20001cd8

0801a884 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a884:	b480      	push	{r7}
 801a886:	b087      	sub	sp, #28
 801a888:	af00      	add	r7, sp, #0
 801a88a:	60f8      	str	r0, [r7, #12]
 801a88c:	60b9      	str	r1, [r7, #8]
 801a88e:	4613      	mov	r3, r2
 801a890:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a896:	68bb      	ldr	r3, [r7, #8]
 801a898:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a89a:	e007      	b.n	801a8ac <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a89c:	693a      	ldr	r2, [r7, #16]
 801a89e:	1c53      	adds	r3, r2, #1
 801a8a0:	613b      	str	r3, [r7, #16]
 801a8a2:	697b      	ldr	r3, [r7, #20]
 801a8a4:	1c59      	adds	r1, r3, #1
 801a8a6:	6179      	str	r1, [r7, #20]
 801a8a8:	7812      	ldrb	r2, [r2, #0]
 801a8aa:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a8ac:	88fb      	ldrh	r3, [r7, #6]
 801a8ae:	1e5a      	subs	r2, r3, #1
 801a8b0:	80fa      	strh	r2, [r7, #6]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d1f2      	bne.n	801a89c <UTIL_MEM_cpy_8+0x18>
    }
}
 801a8b6:	bf00      	nop
 801a8b8:	bf00      	nop
 801a8ba:	371c      	adds	r7, #28
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bc80      	pop	{r7}
 801a8c0:	4770      	bx	lr

0801a8c2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a8c2:	b480      	push	{r7}
 801a8c4:	b085      	sub	sp, #20
 801a8c6:	af00      	add	r7, sp, #0
 801a8c8:	6078      	str	r0, [r7, #4]
 801a8ca:	460b      	mov	r3, r1
 801a8cc:	70fb      	strb	r3, [r7, #3]
 801a8ce:	4613      	mov	r3, r2
 801a8d0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a8d6:	e004      	b.n	801a8e2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	1c5a      	adds	r2, r3, #1
 801a8dc:	60fa      	str	r2, [r7, #12]
 801a8de:	78fa      	ldrb	r2, [r7, #3]
 801a8e0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a8e2:	883b      	ldrh	r3, [r7, #0]
 801a8e4:	1e5a      	subs	r2, r3, #1
 801a8e6:	803a      	strh	r2, [r7, #0]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d1f5      	bne.n	801a8d8 <UTIL_MEM_set_8+0x16>
  }
}
 801a8ec:	bf00      	nop
 801a8ee:	bf00      	nop
 801a8f0:	3714      	adds	r7, #20
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bc80      	pop	{r7}
 801a8f6:	4770      	bx	lr

0801a8f8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a8f8:	b082      	sub	sp, #8
 801a8fa:	b480      	push	{r7}
 801a8fc:	b087      	sub	sp, #28
 801a8fe:	af00      	add	r7, sp, #0
 801a900:	60f8      	str	r0, [r7, #12]
 801a902:	1d38      	adds	r0, r7, #4
 801a904:	e880 0006 	stmia.w	r0, {r1, r2}
 801a908:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a90a:	2300      	movs	r3, #0
 801a90c:	613b      	str	r3, [r7, #16]
 801a90e:	2300      	movs	r3, #0
 801a910:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a912:	687a      	ldr	r2, [r7, #4]
 801a914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a916:	4413      	add	r3, r2
 801a918:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a91a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a91e:	b29a      	uxth	r2, r3
 801a920:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a924:	b29b      	uxth	r3, r3
 801a926:	4413      	add	r3, r2
 801a928:	b29b      	uxth	r3, r3
 801a92a:	b21b      	sxth	r3, r3
 801a92c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a92e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a932:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a936:	db0a      	blt.n	801a94e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a938:	693b      	ldr	r3, [r7, #16]
 801a93a:	3301      	adds	r3, #1
 801a93c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a93e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a942:	b29b      	uxth	r3, r3
 801a944:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a948:	b29b      	uxth	r3, r3
 801a94a:	b21b      	sxth	r3, r3
 801a94c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	461a      	mov	r2, r3
 801a952:	f107 0310 	add.w	r3, r7, #16
 801a956:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a95a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a95e:	68f8      	ldr	r0, [r7, #12]
 801a960:	371c      	adds	r7, #28
 801a962:	46bd      	mov	sp, r7
 801a964:	bc80      	pop	{r7}
 801a966:	b002      	add	sp, #8
 801a968:	4770      	bx	lr

0801a96a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a96a:	b082      	sub	sp, #8
 801a96c:	b480      	push	{r7}
 801a96e:	b087      	sub	sp, #28
 801a970:	af00      	add	r7, sp, #0
 801a972:	60f8      	str	r0, [r7, #12]
 801a974:	1d38      	adds	r0, r7, #4
 801a976:	e880 0006 	stmia.w	r0, {r1, r2}
 801a97a:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a97c:	2300      	movs	r3, #0
 801a97e:	613b      	str	r3, [r7, #16]
 801a980:	2300      	movs	r3, #0
 801a982:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a984:	687a      	ldr	r2, [r7, #4]
 801a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a988:	1ad3      	subs	r3, r2, r3
 801a98a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a98c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a990:	b29a      	uxth	r2, r3
 801a992:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a996:	b29b      	uxth	r3, r3
 801a998:	1ad3      	subs	r3, r2, r3
 801a99a:	b29b      	uxth	r3, r3
 801a99c:	b21b      	sxth	r3, r3
 801a99e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a9a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	da0a      	bge.n	801a9be <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a9a8:	693b      	ldr	r3, [r7, #16]
 801a9aa:	3b01      	subs	r3, #1
 801a9ac:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a9ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a9b8:	b29b      	uxth	r3, r3
 801a9ba:	b21b      	sxth	r3, r3
 801a9bc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	461a      	mov	r2, r3
 801a9c2:	f107 0310 	add.w	r3, r7, #16
 801a9c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a9ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a9ce:	68f8      	ldr	r0, [r7, #12]
 801a9d0:	371c      	adds	r7, #28
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	bc80      	pop	{r7}
 801a9d6:	b002      	add	sp, #8
 801a9d8:	4770      	bx	lr
	...

0801a9dc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b088      	sub	sp, #32
 801a9e0:	af02      	add	r7, sp, #8
 801a9e2:	463b      	mov	r3, r7
 801a9e4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	60bb      	str	r3, [r7, #8]
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a9f0:	4b10      	ldr	r3, [pc, #64]	@ (801aa34 <SysTimeSet+0x58>)
 801a9f2:	691b      	ldr	r3, [r3, #16]
 801a9f4:	f107 0208 	add.w	r2, r7, #8
 801a9f8:	3204      	adds	r2, #4
 801a9fa:	4610      	mov	r0, r2
 801a9fc:	4798      	blx	r3
 801a9fe:	4603      	mov	r3, r0
 801aa00:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801aa02:	f107 0010 	add.w	r0, r7, #16
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	9300      	str	r3, [sp, #0]
 801aa0a:	68bb      	ldr	r3, [r7, #8]
 801aa0c:	463a      	mov	r2, r7
 801aa0e:	ca06      	ldmia	r2, {r1, r2}
 801aa10:	f7ff ffab 	bl	801a96a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801aa14:	4b07      	ldr	r3, [pc, #28]	@ (801aa34 <SysTimeSet+0x58>)
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	693a      	ldr	r2, [r7, #16]
 801aa1a:	4610      	mov	r0, r2
 801aa1c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801aa1e:	4b05      	ldr	r3, [pc, #20]	@ (801aa34 <SysTimeSet+0x58>)
 801aa20:	689b      	ldr	r3, [r3, #8]
 801aa22:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801aa26:	4610      	mov	r0, r2
 801aa28:	4798      	blx	r3
}
 801aa2a:	bf00      	nop
 801aa2c:	3718      	adds	r7, #24
 801aa2e:	46bd      	mov	sp, r7
 801aa30:	bd80      	pop	{r7, pc}
 801aa32:	bf00      	nop
 801aa34:	0801c158 	.word	0x0801c158

0801aa38 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	b08a      	sub	sp, #40	@ 0x28
 801aa3c:	af02      	add	r7, sp, #8
 801aa3e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801aa40:	2300      	movs	r3, #0
 801aa42:	61bb      	str	r3, [r7, #24]
 801aa44:	2300      	movs	r3, #0
 801aa46:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801aa48:	2300      	movs	r3, #0
 801aa4a:	613b      	str	r3, [r7, #16]
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801aa50:	4b14      	ldr	r3, [pc, #80]	@ (801aaa4 <SysTimeGet+0x6c>)
 801aa52:	691b      	ldr	r3, [r3, #16]
 801aa54:	f107 0218 	add.w	r2, r7, #24
 801aa58:	3204      	adds	r2, #4
 801aa5a:	4610      	mov	r0, r2
 801aa5c:	4798      	blx	r3
 801aa5e:	4603      	mov	r3, r0
 801aa60:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801aa62:	4b10      	ldr	r3, [pc, #64]	@ (801aaa4 <SysTimeGet+0x6c>)
 801aa64:	68db      	ldr	r3, [r3, #12]
 801aa66:	4798      	blx	r3
 801aa68:	4603      	mov	r3, r0
 801aa6a:	b21b      	sxth	r3, r3
 801aa6c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801aa6e:	4b0d      	ldr	r3, [pc, #52]	@ (801aaa4 <SysTimeGet+0x6c>)
 801aa70:	685b      	ldr	r3, [r3, #4]
 801aa72:	4798      	blx	r3
 801aa74:	4603      	mov	r3, r0
 801aa76:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801aa78:	f107 0010 	add.w	r0, r7, #16
 801aa7c:	69fb      	ldr	r3, [r7, #28]
 801aa7e:	9300      	str	r3, [sp, #0]
 801aa80:	69bb      	ldr	r3, [r7, #24]
 801aa82:	f107 0208 	add.w	r2, r7, #8
 801aa86:	ca06      	ldmia	r2, {r1, r2}
 801aa88:	f7ff ff36 	bl	801a8f8 <SysTimeAdd>

  return sysTime;
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	461a      	mov	r2, r3
 801aa90:	f107 0310 	add.w	r3, r7, #16
 801aa94:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aa98:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801aa9c:	6878      	ldr	r0, [r7, #4]
 801aa9e:	3720      	adds	r7, #32
 801aaa0:	46bd      	mov	sp, r7
 801aaa2:	bd80      	pop	{r7, pc}
 801aaa4:	0801c158 	.word	0x0801c158

0801aaa8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b084      	sub	sp, #16
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801aab0:	2300      	movs	r3, #0
 801aab2:	60bb      	str	r3, [r7, #8]
 801aab4:	2300      	movs	r3, #0
 801aab6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801aab8:	4b0a      	ldr	r3, [pc, #40]	@ (801aae4 <SysTimeGetMcuTime+0x3c>)
 801aaba:	691b      	ldr	r3, [r3, #16]
 801aabc:	f107 0208 	add.w	r2, r7, #8
 801aac0:	3204      	adds	r2, #4
 801aac2:	4610      	mov	r0, r2
 801aac4:	4798      	blx	r3
 801aac6:	4603      	mov	r3, r0
 801aac8:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	461a      	mov	r2, r3
 801aace:	f107 0308 	add.w	r3, r7, #8
 801aad2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aad6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801aada:	6878      	ldr	r0, [r7, #4]
 801aadc:	3710      	adds	r7, #16
 801aade:	46bd      	mov	sp, r7
 801aae0:	bd80      	pop	{r7, pc}
 801aae2:	bf00      	nop
 801aae4:	0801c158 	.word	0x0801c158

0801aae8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801aae8:	b480      	push	{r7}
 801aaea:	b085      	sub	sp, #20
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
  int i = 0;
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801aaf4:	e00e      	b.n	801ab14 <ee_skip_atoi+0x2c>
 801aaf6:	68fa      	ldr	r2, [r7, #12]
 801aaf8:	4613      	mov	r3, r2
 801aafa:	009b      	lsls	r3, r3, #2
 801aafc:	4413      	add	r3, r2
 801aafe:	005b      	lsls	r3, r3, #1
 801ab00:	4618      	mov	r0, r3
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	1c59      	adds	r1, r3, #1
 801ab08:	687a      	ldr	r2, [r7, #4]
 801ab0a:	6011      	str	r1, [r2, #0]
 801ab0c:	781b      	ldrb	r3, [r3, #0]
 801ab0e:	4403      	add	r3, r0
 801ab10:	3b30      	subs	r3, #48	@ 0x30
 801ab12:	60fb      	str	r3, [r7, #12]
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	781b      	ldrb	r3, [r3, #0]
 801ab1a:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab1c:	d904      	bls.n	801ab28 <ee_skip_atoi+0x40>
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	2b39      	cmp	r3, #57	@ 0x39
 801ab26:	d9e6      	bls.n	801aaf6 <ee_skip_atoi+0xe>
  return i;
 801ab28:	68fb      	ldr	r3, [r7, #12]
}
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	3714      	adds	r7, #20
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bc80      	pop	{r7}
 801ab32:	4770      	bx	lr

0801ab34 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801ab34:	b480      	push	{r7}
 801ab36:	b099      	sub	sp, #100	@ 0x64
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	60f8      	str	r0, [r7, #12]
 801ab3c:	60b9      	str	r1, [r7, #8]
 801ab3e:	607a      	str	r2, [r7, #4]
 801ab40:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801ab42:	4b71      	ldr	r3, [pc, #452]	@ (801ad08 <ee_number+0x1d4>)
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ab48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ab4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d002      	beq.n	801ab58 <ee_number+0x24>
 801ab52:	4b6e      	ldr	r3, [pc, #440]	@ (801ad0c <ee_number+0x1d8>)
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ab58:	683b      	ldr	r3, [r7, #0]
 801ab5a:	2b01      	cmp	r3, #1
 801ab5c:	dd02      	ble.n	801ab64 <ee_number+0x30>
 801ab5e:	683b      	ldr	r3, [r7, #0]
 801ab60:	2b24      	cmp	r3, #36	@ 0x24
 801ab62:	dd01      	ble.n	801ab68 <ee_number+0x34>
 801ab64:	2300      	movs	r3, #0
 801ab66:	e0ca      	b.n	801acfe <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801ab68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ab6a:	f003 0301 	and.w	r3, r3, #1
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d001      	beq.n	801ab76 <ee_number+0x42>
 801ab72:	2330      	movs	r3, #48	@ 0x30
 801ab74:	e000      	b.n	801ab78 <ee_number+0x44>
 801ab76:	2320      	movs	r3, #32
 801ab78:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801ab82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ab84:	f003 0302 	and.w	r3, r3, #2
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d00b      	beq.n	801aba4 <ee_number+0x70>
  {
    if (num < 0)
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	da08      	bge.n	801aba4 <ee_number+0x70>
    {
      sign = '-';
 801ab92:	232d      	movs	r3, #45	@ 0x2d
 801ab94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	425b      	negs	r3, r3
 801ab9c:	607b      	str	r3, [r7, #4]
      size--;
 801ab9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aba0:	3b01      	subs	r3, #1
 801aba2:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801aba4:	2300      	movs	r3, #0
 801aba6:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d11e      	bne.n	801abec <ee_number+0xb8>
    tmp[i++] = '0';
 801abae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801abb0:	1c5a      	adds	r2, r3, #1
 801abb2:	657a      	str	r2, [r7, #84]	@ 0x54
 801abb4:	3360      	adds	r3, #96	@ 0x60
 801abb6:	443b      	add	r3, r7
 801abb8:	2230      	movs	r2, #48	@ 0x30
 801abba:	f803 2c50 	strb.w	r2, [r3, #-80]
 801abbe:	e018      	b.n	801abf2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	683a      	ldr	r2, [r7, #0]
 801abc4:	fbb3 f1f2 	udiv	r1, r3, r2
 801abc8:	fb01 f202 	mul.w	r2, r1, r2
 801abcc:	1a9b      	subs	r3, r3, r2
 801abce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801abd0:	441a      	add	r2, r3
 801abd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801abd4:	1c59      	adds	r1, r3, #1
 801abd6:	6579      	str	r1, [r7, #84]	@ 0x54
 801abd8:	7812      	ldrb	r2, [r2, #0]
 801abda:	3360      	adds	r3, #96	@ 0x60
 801abdc:	443b      	add	r3, r7
 801abde:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801abe2:	687a      	ldr	r2, [r7, #4]
 801abe4:	683b      	ldr	r3, [r7, #0]
 801abe6:	fbb2 f3f3 	udiv	r3, r2, r3
 801abea:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d1e6      	bne.n	801abc0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801abf2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801abf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801abf6:	429a      	cmp	r2, r3
 801abf8:	dd01      	ble.n	801abfe <ee_number+0xca>
 801abfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801abfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801abfe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ac00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac02:	1ad3      	subs	r3, r2, r3
 801ac04:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801ac06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ac08:	f003 0301 	and.w	r3, r3, #1
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d112      	bne.n	801ac36 <ee_number+0x102>
 801ac10:	e00c      	b.n	801ac2c <ee_number+0xf8>
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	1c5a      	adds	r2, r3, #1
 801ac16:	60fa      	str	r2, [r7, #12]
 801ac18:	2220      	movs	r2, #32
 801ac1a:	701a      	strb	r2, [r3, #0]
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	3b01      	subs	r3, #1
 801ac20:	60bb      	str	r3, [r7, #8]
 801ac22:	68bb      	ldr	r3, [r7, #8]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d101      	bne.n	801ac2c <ee_number+0xf8>
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	e068      	b.n	801acfe <ee_number+0x1ca>
 801ac2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ac2e:	1e5a      	subs	r2, r3, #1
 801ac30:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	dced      	bgt.n	801ac12 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801ac36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d01b      	beq.n	801ac76 <ee_number+0x142>
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	1c5a      	adds	r2, r3, #1
 801ac42:	60fa      	str	r2, [r7, #12]
 801ac44:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801ac48:	701a      	strb	r2, [r3, #0]
 801ac4a:	68bb      	ldr	r3, [r7, #8]
 801ac4c:	3b01      	subs	r3, #1
 801ac4e:	60bb      	str	r3, [r7, #8]
 801ac50:	68bb      	ldr	r3, [r7, #8]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d10f      	bne.n	801ac76 <ee_number+0x142>
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	e051      	b.n	801acfe <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	1c5a      	adds	r2, r3, #1
 801ac5e:	60fa      	str	r2, [r7, #12]
 801ac60:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801ac64:	701a      	strb	r2, [r3, #0]
 801ac66:	68bb      	ldr	r3, [r7, #8]
 801ac68:	3b01      	subs	r3, #1
 801ac6a:	60bb      	str	r3, [r7, #8]
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d101      	bne.n	801ac76 <ee_number+0x142>
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	e043      	b.n	801acfe <ee_number+0x1ca>
 801ac76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ac78:	1e5a      	subs	r2, r3, #1
 801ac7a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	dcec      	bgt.n	801ac5a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ac80:	e00c      	b.n	801ac9c <ee_number+0x168>
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	1c5a      	adds	r2, r3, #1
 801ac86:	60fa      	str	r2, [r7, #12]
 801ac88:	2230      	movs	r2, #48	@ 0x30
 801ac8a:	701a      	strb	r2, [r3, #0]
 801ac8c:	68bb      	ldr	r3, [r7, #8]
 801ac8e:	3b01      	subs	r3, #1
 801ac90:	60bb      	str	r3, [r7, #8]
 801ac92:	68bb      	ldr	r3, [r7, #8]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d101      	bne.n	801ac9c <ee_number+0x168>
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	e030      	b.n	801acfe <ee_number+0x1ca>
 801ac9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac9e:	1e5a      	subs	r2, r3, #1
 801aca0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801aca2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aca4:	429a      	cmp	r2, r3
 801aca6:	dbec      	blt.n	801ac82 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801aca8:	e010      	b.n	801accc <ee_number+0x198>
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	1c5a      	adds	r2, r3, #1
 801acae:	60fa      	str	r2, [r7, #12]
 801acb0:	f107 0110 	add.w	r1, r7, #16
 801acb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801acb6:	440a      	add	r2, r1
 801acb8:	7812      	ldrb	r2, [r2, #0]
 801acba:	701a      	strb	r2, [r3, #0]
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	3b01      	subs	r3, #1
 801acc0:	60bb      	str	r3, [r7, #8]
 801acc2:	68bb      	ldr	r3, [r7, #8]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d101      	bne.n	801accc <ee_number+0x198>
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	e018      	b.n	801acfe <ee_number+0x1ca>
 801accc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801acce:	1e5a      	subs	r2, r3, #1
 801acd0:	657a      	str	r2, [r7, #84]	@ 0x54
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	dce9      	bgt.n	801acaa <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801acd6:	e00c      	b.n	801acf2 <ee_number+0x1be>
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	1c5a      	adds	r2, r3, #1
 801acdc:	60fa      	str	r2, [r7, #12]
 801acde:	2220      	movs	r2, #32
 801ace0:	701a      	strb	r2, [r3, #0]
 801ace2:	68bb      	ldr	r3, [r7, #8]
 801ace4:	3b01      	subs	r3, #1
 801ace6:	60bb      	str	r3, [r7, #8]
 801ace8:	68bb      	ldr	r3, [r7, #8]
 801acea:	2b00      	cmp	r3, #0
 801acec:	d101      	bne.n	801acf2 <ee_number+0x1be>
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	e005      	b.n	801acfe <ee_number+0x1ca>
 801acf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801acf4:	1e5a      	subs	r2, r3, #1
 801acf6:	66ba      	str	r2, [r7, #104]	@ 0x68
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	dced      	bgt.n	801acd8 <ee_number+0x1a4>

  return str;
 801acfc:	68fb      	ldr	r3, [r7, #12]
}
 801acfe:	4618      	mov	r0, r3
 801ad00:	3764      	adds	r7, #100	@ 0x64
 801ad02:	46bd      	mov	sp, r7
 801ad04:	bc80      	pop	{r7}
 801ad06:	4770      	bx	lr
 801ad08:	20000108 	.word	0x20000108
 801ad0c:	2000010c 	.word	0x2000010c

0801ad10 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b092      	sub	sp, #72	@ 0x48
 801ad14:	af04      	add	r7, sp, #16
 801ad16:	60f8      	str	r0, [r7, #12]
 801ad18:	60b9      	str	r1, [r7, #8]
 801ad1a:	607a      	str	r2, [r7, #4]
 801ad1c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801ad1e:	68bb      	ldr	r3, [r7, #8]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	dc01      	bgt.n	801ad28 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801ad24:	2300      	movs	r3, #0
 801ad26:	e13e      	b.n	801afa6 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ad2c:	e128      	b.n	801af80 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801ad2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	1ad2      	subs	r2, r2, r3
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	3b01      	subs	r3, #1
 801ad38:	429a      	cmp	r2, r3
 801ad3a:	f280 812e 	bge.w	801af9a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	781b      	ldrb	r3, [r3, #0]
 801ad42:	2b25      	cmp	r3, #37	@ 0x25
 801ad44:	d006      	beq.n	801ad54 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801ad46:	687a      	ldr	r2, [r7, #4]
 801ad48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad4a:	1c59      	adds	r1, r3, #1
 801ad4c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ad4e:	7812      	ldrb	r2, [r2, #0]
 801ad50:	701a      	strb	r2, [r3, #0]
      continue;
 801ad52:	e112      	b.n	801af7a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801ad54:	2300      	movs	r3, #0
 801ad56:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	3301      	adds	r3, #1
 801ad5c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	781b      	ldrb	r3, [r3, #0]
 801ad62:	2b30      	cmp	r3, #48	@ 0x30
 801ad64:	d103      	bne.n	801ad6e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801ad66:	6a3b      	ldr	r3, [r7, #32]
 801ad68:	f043 0301 	orr.w	r3, r3, #1
 801ad6c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad72:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	781b      	ldrb	r3, [r3, #0]
 801ad78:	2b2f      	cmp	r3, #47	@ 0x2f
 801ad7a:	d908      	bls.n	801ad8e <tiny_vsnprintf_like+0x7e>
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	781b      	ldrb	r3, [r3, #0]
 801ad80:	2b39      	cmp	r3, #57	@ 0x39
 801ad82:	d804      	bhi.n	801ad8e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801ad84:	1d3b      	adds	r3, r7, #4
 801ad86:	4618      	mov	r0, r3
 801ad88:	f7ff feae 	bl	801aae8 <ee_skip_atoi>
 801ad8c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801ad8e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad92:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801ad94:	f04f 33ff 	mov.w	r3, #4294967295
 801ad98:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801ad9a:	230a      	movs	r3, #10
 801ad9c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	781b      	ldrb	r3, [r3, #0]
 801ada2:	3b58      	subs	r3, #88	@ 0x58
 801ada4:	2b20      	cmp	r3, #32
 801ada6:	f200 8094 	bhi.w	801aed2 <tiny_vsnprintf_like+0x1c2>
 801adaa:	a201      	add	r2, pc, #4	@ (adr r2, 801adb0 <tiny_vsnprintf_like+0xa0>)
 801adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801adb0:	0801aebb 	.word	0x0801aebb
 801adb4:	0801aed3 	.word	0x0801aed3
 801adb8:	0801aed3 	.word	0x0801aed3
 801adbc:	0801aed3 	.word	0x0801aed3
 801adc0:	0801aed3 	.word	0x0801aed3
 801adc4:	0801aed3 	.word	0x0801aed3
 801adc8:	0801aed3 	.word	0x0801aed3
 801adcc:	0801aed3 	.word	0x0801aed3
 801add0:	0801aed3 	.word	0x0801aed3
 801add4:	0801aed3 	.word	0x0801aed3
 801add8:	0801aed3 	.word	0x0801aed3
 801addc:	0801ae3f 	.word	0x0801ae3f
 801ade0:	0801aec9 	.word	0x0801aec9
 801ade4:	0801aed3 	.word	0x0801aed3
 801ade8:	0801aed3 	.word	0x0801aed3
 801adec:	0801aed3 	.word	0x0801aed3
 801adf0:	0801aed3 	.word	0x0801aed3
 801adf4:	0801aec9 	.word	0x0801aec9
 801adf8:	0801aed3 	.word	0x0801aed3
 801adfc:	0801aed3 	.word	0x0801aed3
 801ae00:	0801aed3 	.word	0x0801aed3
 801ae04:	0801aed3 	.word	0x0801aed3
 801ae08:	0801aed3 	.word	0x0801aed3
 801ae0c:	0801aed3 	.word	0x0801aed3
 801ae10:	0801aed3 	.word	0x0801aed3
 801ae14:	0801aed3 	.word	0x0801aed3
 801ae18:	0801aed3 	.word	0x0801aed3
 801ae1c:	0801ae5f 	.word	0x0801ae5f
 801ae20:	0801aed3 	.word	0x0801aed3
 801ae24:	0801af1f 	.word	0x0801af1f
 801ae28:	0801aed3 	.word	0x0801aed3
 801ae2c:	0801aed3 	.word	0x0801aed3
 801ae30:	0801aec3 	.word	0x0801aec3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ae34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae36:	1c5a      	adds	r2, r3, #1
 801ae38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ae3a:	2220      	movs	r2, #32
 801ae3c:	701a      	strb	r2, [r3, #0]
 801ae3e:	69fb      	ldr	r3, [r7, #28]
 801ae40:	3b01      	subs	r3, #1
 801ae42:	61fb      	str	r3, [r7, #28]
 801ae44:	69fb      	ldr	r3, [r7, #28]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	dcf4      	bgt.n	801ae34 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	1d1a      	adds	r2, r3, #4
 801ae4e:	603a      	str	r2, [r7, #0]
 801ae50:	6819      	ldr	r1, [r3, #0]
 801ae52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae54:	1c5a      	adds	r2, r3, #1
 801ae56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ae58:	b2ca      	uxtb	r2, r1
 801ae5a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801ae5c:	e08d      	b.n	801af7a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801ae5e:	683b      	ldr	r3, [r7, #0]
 801ae60:	1d1a      	adds	r2, r3, #4
 801ae62:	603a      	str	r2, [r7, #0]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801ae68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d101      	bne.n	801ae72 <tiny_vsnprintf_like+0x162>
 801ae6e:	4b50      	ldr	r3, [pc, #320]	@ (801afb0 <tiny_vsnprintf_like+0x2a0>)
 801ae70:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801ae72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ae74:	f7e5 f980 	bl	8000178 <strlen>
 801ae78:	4603      	mov	r3, r0
 801ae7a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801ae7c:	e004      	b.n	801ae88 <tiny_vsnprintf_like+0x178>
 801ae7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae80:	1c5a      	adds	r2, r3, #1
 801ae82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ae84:	2220      	movs	r2, #32
 801ae86:	701a      	strb	r2, [r3, #0]
 801ae88:	69fb      	ldr	r3, [r7, #28]
 801ae8a:	1e5a      	subs	r2, r3, #1
 801ae8c:	61fa      	str	r2, [r7, #28]
 801ae8e:	693a      	ldr	r2, [r7, #16]
 801ae90:	429a      	cmp	r2, r3
 801ae92:	dbf4      	blt.n	801ae7e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ae94:	2300      	movs	r3, #0
 801ae96:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ae98:	e00a      	b.n	801aeb0 <tiny_vsnprintf_like+0x1a0>
 801ae9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae9c:	1c53      	adds	r3, r2, #1
 801ae9e:	627b      	str	r3, [r7, #36]	@ 0x24
 801aea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aea2:	1c59      	adds	r1, r3, #1
 801aea4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801aea6:	7812      	ldrb	r2, [r2, #0]
 801aea8:	701a      	strb	r2, [r3, #0]
 801aeaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeac:	3301      	adds	r3, #1
 801aeae:	62bb      	str	r3, [r7, #40]	@ 0x28
 801aeb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aeb2:	693b      	ldr	r3, [r7, #16]
 801aeb4:	429a      	cmp	r2, r3
 801aeb6:	dbf0      	blt.n	801ae9a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801aeb8:	e05f      	b.n	801af7a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801aeba:	6a3b      	ldr	r3, [r7, #32]
 801aebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aec0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801aec2:	2310      	movs	r3, #16
 801aec4:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801aec6:	e02b      	b.n	801af20 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801aec8:	6a3b      	ldr	r3, [r7, #32]
 801aeca:	f043 0302 	orr.w	r3, r3, #2
 801aece:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801aed0:	e025      	b.n	801af1e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	781b      	ldrb	r3, [r3, #0]
 801aed6:	2b25      	cmp	r3, #37	@ 0x25
 801aed8:	d004      	beq.n	801aee4 <tiny_vsnprintf_like+0x1d4>
 801aeda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aedc:	1c5a      	adds	r2, r3, #1
 801aede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801aee0:	2225      	movs	r2, #37	@ 0x25
 801aee2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801aee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	1ad2      	subs	r2, r2, r3
 801aeea:	68bb      	ldr	r3, [r7, #8]
 801aeec:	3b01      	subs	r3, #1
 801aeee:	429a      	cmp	r2, r3
 801aef0:	da16      	bge.n	801af20 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	781b      	ldrb	r3, [r3, #0]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d006      	beq.n	801af08 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801aefa:	687a      	ldr	r2, [r7, #4]
 801aefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aefe:	1c59      	adds	r1, r3, #1
 801af00:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801af02:	7812      	ldrb	r2, [r2, #0]
 801af04:	701a      	strb	r2, [r3, #0]
 801af06:	e002      	b.n	801af0e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	3b01      	subs	r3, #1
 801af0c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801af0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	1ad2      	subs	r2, r2, r3
 801af14:	68bb      	ldr	r3, [r7, #8]
 801af16:	3b01      	subs	r3, #1
 801af18:	429a      	cmp	r2, r3
 801af1a:	db2d      	blt.n	801af78 <tiny_vsnprintf_like+0x268>
 801af1c:	e000      	b.n	801af20 <tiny_vsnprintf_like+0x210>
        break;
 801af1e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801af20:	697b      	ldr	r3, [r7, #20]
 801af22:	2b6c      	cmp	r3, #108	@ 0x6c
 801af24:	d105      	bne.n	801af32 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801af26:	683b      	ldr	r3, [r7, #0]
 801af28:	1d1a      	adds	r2, r3, #4
 801af2a:	603a      	str	r2, [r7, #0]
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	637b      	str	r3, [r7, #52]	@ 0x34
 801af30:	e00f      	b.n	801af52 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801af32:	6a3b      	ldr	r3, [r7, #32]
 801af34:	f003 0302 	and.w	r3, r3, #2
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d005      	beq.n	801af48 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801af3c:	683b      	ldr	r3, [r7, #0]
 801af3e:	1d1a      	adds	r2, r3, #4
 801af40:	603a      	str	r2, [r7, #0]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	637b      	str	r3, [r7, #52]	@ 0x34
 801af46:	e004      	b.n	801af52 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801af48:	683b      	ldr	r3, [r7, #0]
 801af4a:	1d1a      	adds	r2, r3, #4
 801af4c:	603a      	str	r2, [r7, #0]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801af52:	68bb      	ldr	r3, [r7, #8]
 801af54:	1e5a      	subs	r2, r3, #1
 801af56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	1acb      	subs	r3, r1, r3
 801af5c:	1ad1      	subs	r1, r2, r3
 801af5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801af60:	6a3b      	ldr	r3, [r7, #32]
 801af62:	9302      	str	r3, [sp, #8]
 801af64:	69bb      	ldr	r3, [r7, #24]
 801af66:	9301      	str	r3, [sp, #4]
 801af68:	69fb      	ldr	r3, [r7, #28]
 801af6a:	9300      	str	r3, [sp, #0]
 801af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801af70:	f7ff fde0 	bl	801ab34 <ee_number>
 801af74:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801af76:	e000      	b.n	801af7a <tiny_vsnprintf_like+0x26a>
        continue;
 801af78:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	3301      	adds	r3, #1
 801af7e:	607b      	str	r3, [r7, #4]
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	781b      	ldrb	r3, [r3, #0]
 801af84:	2b00      	cmp	r3, #0
 801af86:	f47f aed2 	bne.w	801ad2e <tiny_vsnprintf_like+0x1e>
 801af8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	1ad2      	subs	r2, r2, r3
 801af90:	68bb      	ldr	r3, [r7, #8]
 801af92:	3b01      	subs	r3, #1
 801af94:	429a      	cmp	r2, r3
 801af96:	f6bf aeca 	bge.w	801ad2e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801af9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af9c:	2200      	movs	r2, #0
 801af9e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801afa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	1ad3      	subs	r3, r2, r3
}
 801afa6:	4618      	mov	r0, r3
 801afa8:	3738      	adds	r7, #56	@ 0x38
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}
 801afae:	bf00      	nop
 801afb0:	0801c06c 	.word	0x0801c06c

0801afb4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b090      	sub	sp, #64	@ 0x40
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801afbc:	4b73      	ldr	r3, [pc, #460]	@ (801b18c <UTIL_SEQ_Run+0x1d8>)
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801afc2:	4b72      	ldr	r3, [pc, #456]	@ (801b18c <UTIL_SEQ_Run+0x1d8>)
 801afc4:	681a      	ldr	r2, [r3, #0]
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	4013      	ands	r3, r2
 801afca:	4a70      	ldr	r2, [pc, #448]	@ (801b18c <UTIL_SEQ_Run+0x1d8>)
 801afcc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801afce:	4b70      	ldr	r3, [pc, #448]	@ (801b190 <UTIL_SEQ_Run+0x1dc>)
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801afd4:	4b6f      	ldr	r3, [pc, #444]	@ (801b194 <UTIL_SEQ_Run+0x1e0>)
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801afda:	4b6f      	ldr	r3, [pc, #444]	@ (801b198 <UTIL_SEQ_Run+0x1e4>)
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801afe0:	4b6e      	ldr	r3, [pc, #440]	@ (801b19c <UTIL_SEQ_Run+0x1e8>)
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801afe6:	e08d      	b.n	801b104 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801afe8:	2300      	movs	r3, #0
 801afea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801afec:	e002      	b.n	801aff4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801afee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aff0:	3301      	adds	r3, #1
 801aff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801aff4:	4a6a      	ldr	r2, [pc, #424]	@ (801b1a0 <UTIL_SEQ_Run+0x1ec>)
 801aff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aff8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801affc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801affe:	401a      	ands	r2, r3
 801b000:	4b62      	ldr	r3, [pc, #392]	@ (801b18c <UTIL_SEQ_Run+0x1d8>)
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	4013      	ands	r3, r2
 801b006:	2b00      	cmp	r3, #0
 801b008:	d0f1      	beq.n	801afee <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801b00a:	4a65      	ldr	r2, [pc, #404]	@ (801b1a0 <UTIL_SEQ_Run+0x1ec>)
 801b00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b00e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b014:	401a      	ands	r2, r3
 801b016:	4b5d      	ldr	r3, [pc, #372]	@ (801b18c <UTIL_SEQ_Run+0x1d8>)
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	4013      	ands	r3, r2
 801b01c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b01e:	4a60      	ldr	r2, [pc, #384]	@ (801b1a0 <UTIL_SEQ_Run+0x1ec>)
 801b020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b022:	00db      	lsls	r3, r3, #3
 801b024:	4413      	add	r3, r2
 801b026:	685a      	ldr	r2, [r3, #4]
 801b028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b02a:	4013      	ands	r3, r2
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d106      	bne.n	801b03e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b030:	4a5b      	ldr	r2, [pc, #364]	@ (801b1a0 <UTIL_SEQ_Run+0x1ec>)
 801b032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b034:	00db      	lsls	r3, r3, #3
 801b036:	4413      	add	r3, r2
 801b038:	f04f 32ff 	mov.w	r2, #4294967295
 801b03c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b03e:	4a58      	ldr	r2, [pc, #352]	@ (801b1a0 <UTIL_SEQ_Run+0x1ec>)
 801b040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b042:	00db      	lsls	r3, r3, #3
 801b044:	4413      	add	r3, r2
 801b046:	685a      	ldr	r2, [r3, #4]
 801b048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b04a:	4013      	ands	r3, r2
 801b04c:	4618      	mov	r0, r3
 801b04e:	f000 f907 	bl	801b260 <SEQ_BitPosition>
 801b052:	4603      	mov	r3, r0
 801b054:	461a      	mov	r2, r3
 801b056:	4b53      	ldr	r3, [pc, #332]	@ (801b1a4 <UTIL_SEQ_Run+0x1f0>)
 801b058:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b05a:	4a51      	ldr	r2, [pc, #324]	@ (801b1a0 <UTIL_SEQ_Run+0x1ec>)
 801b05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b05e:	00db      	lsls	r3, r3, #3
 801b060:	4413      	add	r3, r2
 801b062:	685a      	ldr	r2, [r3, #4]
 801b064:	4b4f      	ldr	r3, [pc, #316]	@ (801b1a4 <UTIL_SEQ_Run+0x1f0>)
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	2101      	movs	r1, #1
 801b06a:	fa01 f303 	lsl.w	r3, r1, r3
 801b06e:	43db      	mvns	r3, r3
 801b070:	401a      	ands	r2, r3
 801b072:	494b      	ldr	r1, [pc, #300]	@ (801b1a0 <UTIL_SEQ_Run+0x1ec>)
 801b074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b076:	00db      	lsls	r3, r3, #3
 801b078:	440b      	add	r3, r1
 801b07a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b07c:	f3ef 8310 	mrs	r3, PRIMASK
 801b080:	61bb      	str	r3, [r7, #24]
  return(result);
 801b082:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b084:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b086:	b672      	cpsid	i
}
 801b088:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b08a:	4b46      	ldr	r3, [pc, #280]	@ (801b1a4 <UTIL_SEQ_Run+0x1f0>)
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	2201      	movs	r2, #1
 801b090:	fa02 f303 	lsl.w	r3, r2, r3
 801b094:	43da      	mvns	r2, r3
 801b096:	4b3e      	ldr	r3, [pc, #248]	@ (801b190 <UTIL_SEQ_Run+0x1dc>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	4013      	ands	r3, r2
 801b09c:	4a3c      	ldr	r2, [pc, #240]	@ (801b190 <UTIL_SEQ_Run+0x1dc>)
 801b09e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b0a0:	2301      	movs	r3, #1
 801b0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b0a4:	e013      	b.n	801b0ce <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b0a8:	3b01      	subs	r3, #1
 801b0aa:	4a3d      	ldr	r2, [pc, #244]	@ (801b1a0 <UTIL_SEQ_Run+0x1ec>)
 801b0ac:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b0b0:	4b3c      	ldr	r3, [pc, #240]	@ (801b1a4 <UTIL_SEQ_Run+0x1f0>)
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	2201      	movs	r2, #1
 801b0b6:	fa02 f303 	lsl.w	r3, r2, r3
 801b0ba:	43da      	mvns	r2, r3
 801b0bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b0be:	3b01      	subs	r3, #1
 801b0c0:	400a      	ands	r2, r1
 801b0c2:	4937      	ldr	r1, [pc, #220]	@ (801b1a0 <UTIL_SEQ_Run+0x1ec>)
 801b0c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b0c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b0ca:	3b01      	subs	r3, #1
 801b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d1e8      	bne.n	801b0a6 <UTIL_SEQ_Run+0xf2>
 801b0d4:	6a3b      	ldr	r3, [r7, #32]
 801b0d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0d8:	697b      	ldr	r3, [r7, #20]
 801b0da:	f383 8810 	msr	PRIMASK, r3
}
 801b0de:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b0e0:	4b30      	ldr	r3, [pc, #192]	@ (801b1a4 <UTIL_SEQ_Run+0x1f0>)
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	4a30      	ldr	r2, [pc, #192]	@ (801b1a8 <UTIL_SEQ_Run+0x1f4>)
 801b0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b0ea:	4798      	blx	r3

    local_taskset = TaskSet;
 801b0ec:	4b28      	ldr	r3, [pc, #160]	@ (801b190 <UTIL_SEQ_Run+0x1dc>)
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801b0f2:	4b28      	ldr	r3, [pc, #160]	@ (801b194 <UTIL_SEQ_Run+0x1e0>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801b0f8:	4b27      	ldr	r3, [pc, #156]	@ (801b198 <UTIL_SEQ_Run+0x1e4>)
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801b0fe:	4b27      	ldr	r3, [pc, #156]	@ (801b19c <UTIL_SEQ_Run+0x1e8>)
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b104:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b108:	401a      	ands	r2, r3
 801b10a:	4b20      	ldr	r3, [pc, #128]	@ (801b18c <UTIL_SEQ_Run+0x1d8>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	4013      	ands	r3, r2
 801b110:	2b00      	cmp	r3, #0
 801b112:	d005      	beq.n	801b120 <UTIL_SEQ_Run+0x16c>
 801b114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b118:	4013      	ands	r3, r2
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	f43f af64 	beq.w	801afe8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b120:	4b20      	ldr	r3, [pc, #128]	@ (801b1a4 <UTIL_SEQ_Run+0x1f0>)
 801b122:	f04f 32ff 	mov.w	r2, #4294967295
 801b126:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b128:	f000 f88e 	bl	801b248 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b12c:	f3ef 8310 	mrs	r3, PRIMASK
 801b130:	613b      	str	r3, [r7, #16]
  return(result);
 801b132:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b136:	b672      	cpsid	i
}
 801b138:	bf00      	nop
  local_taskset = TaskSet;
 801b13a:	4b15      	ldr	r3, [pc, #84]	@ (801b190 <UTIL_SEQ_Run+0x1dc>)
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b140:	4b14      	ldr	r3, [pc, #80]	@ (801b194 <UTIL_SEQ_Run+0x1e0>)
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b146:	4b14      	ldr	r3, [pc, #80]	@ (801b198 <UTIL_SEQ_Run+0x1e4>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b14c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b150:	401a      	ands	r2, r3
 801b152:	4b0e      	ldr	r3, [pc, #56]	@ (801b18c <UTIL_SEQ_Run+0x1d8>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	4013      	ands	r3, r2
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d107      	bne.n	801b16c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b15c:	4b0f      	ldr	r3, [pc, #60]	@ (801b19c <UTIL_SEQ_Run+0x1e8>)
 801b15e:	681a      	ldr	r2, [r3, #0]
 801b160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b162:	4013      	ands	r3, r2
 801b164:	2b00      	cmp	r3, #0
 801b166:	d101      	bne.n	801b16c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b168:	f7e6 ff20 	bl	8001fac <UTIL_SEQ_Idle>
 801b16c:	69fb      	ldr	r3, [r7, #28]
 801b16e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	f383 8810 	msr	PRIMASK, r3
}
 801b176:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b178:	f000 f86c 	bl	801b254 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b17c:	4a03      	ldr	r2, [pc, #12]	@ (801b18c <UTIL_SEQ_Run+0x1d8>)
 801b17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b180:	6013      	str	r3, [r2, #0]

  return;
 801b182:	bf00      	nop
}
 801b184:	3740      	adds	r7, #64	@ 0x40
 801b186:	46bd      	mov	sp, r7
 801b188:	bd80      	pop	{r7, pc}
 801b18a:	bf00      	nop
 801b18c:	20000114 	.word	0x20000114
 801b190:	20001cdc 	.word	0x20001cdc
 801b194:	20001ce0 	.word	0x20001ce0
 801b198:	20000110 	.word	0x20000110
 801b19c:	20001ce4 	.word	0x20001ce4
 801b1a0:	20001cfc 	.word	0x20001cfc
 801b1a4:	20001ce8 	.word	0x20001ce8
 801b1a8:	20001cec 	.word	0x20001cec

0801b1ac <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b1ac:	b580      	push	{r7, lr}
 801b1ae:	b088      	sub	sp, #32
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	60f8      	str	r0, [r7, #12]
 801b1b4:	60b9      	str	r1, [r7, #8]
 801b1b6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1b8:	f3ef 8310 	mrs	r3, PRIMASK
 801b1bc:	617b      	str	r3, [r7, #20]
  return(result);
 801b1be:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b1c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b1c2:	b672      	cpsid	i
}
 801b1c4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b1c6:	68f8      	ldr	r0, [r7, #12]
 801b1c8:	f000 f84a 	bl	801b260 <SEQ_BitPosition>
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	4619      	mov	r1, r3
 801b1d0:	4a06      	ldr	r2, [pc, #24]	@ (801b1ec <UTIL_SEQ_RegTask+0x40>)
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b1d8:	69fb      	ldr	r3, [r7, #28]
 801b1da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1dc:	69bb      	ldr	r3, [r7, #24]
 801b1de:	f383 8810 	msr	PRIMASK, r3
}
 801b1e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b1e4:	bf00      	nop
}
 801b1e6:	3720      	adds	r7, #32
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}
 801b1ec:	20001cec 	.word	0x20001cec

0801b1f0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b1f0:	b480      	push	{r7}
 801b1f2:	b087      	sub	sp, #28
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	6078      	str	r0, [r7, #4]
 801b1f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1fa:	f3ef 8310 	mrs	r3, PRIMASK
 801b1fe:	60fb      	str	r3, [r7, #12]
  return(result);
 801b200:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b204:	b672      	cpsid	i
}
 801b206:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b208:	4b0d      	ldr	r3, [pc, #52]	@ (801b240 <UTIL_SEQ_SetTask+0x50>)
 801b20a:	681a      	ldr	r2, [r3, #0]
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	4313      	orrs	r3, r2
 801b210:	4a0b      	ldr	r2, [pc, #44]	@ (801b240 <UTIL_SEQ_SetTask+0x50>)
 801b212:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b214:	4a0b      	ldr	r2, [pc, #44]	@ (801b244 <UTIL_SEQ_SetTask+0x54>)
 801b216:	683b      	ldr	r3, [r7, #0]
 801b218:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	431a      	orrs	r2, r3
 801b220:	4908      	ldr	r1, [pc, #32]	@ (801b244 <UTIL_SEQ_SetTask+0x54>)
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b228:	697b      	ldr	r3, [r7, #20]
 801b22a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b22c:	693b      	ldr	r3, [r7, #16]
 801b22e:	f383 8810 	msr	PRIMASK, r3
}
 801b232:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b234:	bf00      	nop
}
 801b236:	371c      	adds	r7, #28
 801b238:	46bd      	mov	sp, r7
 801b23a:	bc80      	pop	{r7}
 801b23c:	4770      	bx	lr
 801b23e:	bf00      	nop
 801b240:	20001cdc 	.word	0x20001cdc
 801b244:	20001cfc 	.word	0x20001cfc

0801b248 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801b248:	b480      	push	{r7}
 801b24a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b24c:	bf00      	nop
}
 801b24e:	46bd      	mov	sp, r7
 801b250:	bc80      	pop	{r7}
 801b252:	4770      	bx	lr

0801b254 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801b254:	b480      	push	{r7}
 801b256:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b258:	bf00      	nop
}
 801b25a:	46bd      	mov	sp, r7
 801b25c:	bc80      	pop	{r7}
 801b25e:	4770      	bx	lr

0801b260 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801b260:	b480      	push	{r7}
 801b262:	b085      	sub	sp, #20
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801b268:	2300      	movs	r3, #0
 801b26a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b270:	68bb      	ldr	r3, [r7, #8]
 801b272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b276:	d204      	bcs.n	801b282 <SEQ_BitPosition+0x22>
 801b278:	2310      	movs	r3, #16
 801b27a:	73fb      	strb	r3, [r7, #15]
 801b27c:	68bb      	ldr	r3, [r7, #8]
 801b27e:	041b      	lsls	r3, r3, #16
 801b280:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b282:	68bb      	ldr	r3, [r7, #8]
 801b284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b288:	d205      	bcs.n	801b296 <SEQ_BitPosition+0x36>
 801b28a:	7bfb      	ldrb	r3, [r7, #15]
 801b28c:	3308      	adds	r3, #8
 801b28e:	73fb      	strb	r3, [r7, #15]
 801b290:	68bb      	ldr	r3, [r7, #8]
 801b292:	021b      	lsls	r3, r3, #8
 801b294:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b296:	68bb      	ldr	r3, [r7, #8]
 801b298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b29c:	d205      	bcs.n	801b2aa <SEQ_BitPosition+0x4a>
 801b29e:	7bfb      	ldrb	r3, [r7, #15]
 801b2a0:	3304      	adds	r3, #4
 801b2a2:	73fb      	strb	r3, [r7, #15]
 801b2a4:	68bb      	ldr	r3, [r7, #8]
 801b2a6:	011b      	lsls	r3, r3, #4
 801b2a8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b2aa:	68bb      	ldr	r3, [r7, #8]
 801b2ac:	0f1b      	lsrs	r3, r3, #28
 801b2ae:	4a07      	ldr	r2, [pc, #28]	@ (801b2cc <SEQ_BitPosition+0x6c>)
 801b2b0:	5cd2      	ldrb	r2, [r2, r3]
 801b2b2:	7bfb      	ldrb	r3, [r7, #15]
 801b2b4:	4413      	add	r3, r2
 801b2b6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b2b8:	7bfb      	ldrb	r3, [r7, #15]
 801b2ba:	f1c3 031f 	rsb	r3, r3, #31
 801b2be:	b2db      	uxtb	r3, r3
}
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	3714      	adds	r7, #20
 801b2c4:	46bd      	mov	sp, r7
 801b2c6:	bc80      	pop	{r7}
 801b2c8:	4770      	bx	lr
 801b2ca:	bf00      	nop
 801b2cc:	0801c6b0 	.word	0x0801c6b0

0801b2d0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b2d0:	b580      	push	{r7, lr}
 801b2d2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b2d4:	4b04      	ldr	r3, [pc, #16]	@ (801b2e8 <UTIL_TIMER_Init+0x18>)
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b2da:	4b04      	ldr	r3, [pc, #16]	@ (801b2ec <UTIL_TIMER_Init+0x1c>)
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	4798      	blx	r3
 801b2e0:	4603      	mov	r3, r0
}
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	bd80      	pop	{r7, pc}
 801b2e6:	bf00      	nop
 801b2e8:	20001d04 	.word	0x20001d04
 801b2ec:	0801c12c 	.word	0x0801c12c

0801b2f0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b084      	sub	sp, #16
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	60f8      	str	r0, [r7, #12]
 801b2f8:	60b9      	str	r1, [r7, #8]
 801b2fa:	603b      	str	r3, [r7, #0]
 801b2fc:	4613      	mov	r3, r2
 801b2fe:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d023      	beq.n	801b34e <UTIL_TIMER_Create+0x5e>
 801b306:	683b      	ldr	r3, [r7, #0]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d020      	beq.n	801b34e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	2200      	movs	r2, #0
 801b310:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801b312:	4b11      	ldr	r3, [pc, #68]	@ (801b358 <UTIL_TIMER_Create+0x68>)
 801b314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b316:	68b8      	ldr	r0, [r7, #8]
 801b318:	4798      	blx	r3
 801b31a:	4602      	mov	r2, r0
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	2200      	movs	r2, #0
 801b324:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	2200      	movs	r2, #0
 801b32a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	2200      	movs	r2, #0
 801b330:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	683a      	ldr	r2, [r7, #0]
 801b336:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	69ba      	ldr	r2, [r7, #24]
 801b33c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	79fa      	ldrb	r2, [r7, #7]
 801b342:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	2200      	movs	r2, #0
 801b348:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b34a:	2300      	movs	r3, #0
 801b34c:	e000      	b.n	801b350 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b34e:	2301      	movs	r3, #1
  }
}
 801b350:	4618      	mov	r0, r3
 801b352:	3710      	adds	r7, #16
 801b354:	46bd      	mov	sp, r7
 801b356:	bd80      	pop	{r7, pc}
 801b358:	0801c12c 	.word	0x0801c12c

0801b35c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b08a      	sub	sp, #40	@ 0x28
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b364:	2300      	movs	r3, #0
 801b366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d056      	beq.n	801b41e <UTIL_TIMER_Start+0xc2>
 801b370:	6878      	ldr	r0, [r7, #4]
 801b372:	f000 f9a9 	bl	801b6c8 <TimerExists>
 801b376:	4603      	mov	r3, r0
 801b378:	f083 0301 	eor.w	r3, r3, #1
 801b37c:	b2db      	uxtb	r3, r3
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d04d      	beq.n	801b41e <UTIL_TIMER_Start+0xc2>
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	7a5b      	ldrb	r3, [r3, #9]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d149      	bne.n	801b41e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b38a:	f3ef 8310 	mrs	r3, PRIMASK
 801b38e:	613b      	str	r3, [r7, #16]
  return(result);
 801b390:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b392:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b394:	b672      	cpsid	i
}
 801b396:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	685b      	ldr	r3, [r3, #4]
 801b39c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b39e:	4b24      	ldr	r3, [pc, #144]	@ (801b430 <UTIL_TIMER_Start+0xd4>)
 801b3a0:	6a1b      	ldr	r3, [r3, #32]
 801b3a2:	4798      	blx	r3
 801b3a4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b3a6:	6a3a      	ldr	r2, [r7, #32]
 801b3a8:	69bb      	ldr	r3, [r7, #24]
 801b3aa:	429a      	cmp	r2, r3
 801b3ac:	d201      	bcs.n	801b3b2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b3ae:	69bb      	ldr	r3, [r7, #24]
 801b3b0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	6a3a      	ldr	r2, [r7, #32]
 801b3b6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	2201      	movs	r2, #1
 801b3c2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	2200      	movs	r2, #0
 801b3c8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b3ca:	4b1a      	ldr	r3, [pc, #104]	@ (801b434 <UTIL_TIMER_Start+0xd8>)
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d106      	bne.n	801b3e0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b3d2:	4b17      	ldr	r3, [pc, #92]	@ (801b430 <UTIL_TIMER_Start+0xd4>)
 801b3d4:	691b      	ldr	r3, [r3, #16]
 801b3d6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b3d8:	6878      	ldr	r0, [r7, #4]
 801b3da:	f000 f9eb 	bl	801b7b4 <TimerInsertNewHeadTimer>
 801b3de:	e017      	b.n	801b410 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b3e0:	4b13      	ldr	r3, [pc, #76]	@ (801b430 <UTIL_TIMER_Start+0xd4>)
 801b3e2:	699b      	ldr	r3, [r3, #24]
 801b3e4:	4798      	blx	r3
 801b3e6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	681a      	ldr	r2, [r3, #0]
 801b3ec:	697b      	ldr	r3, [r7, #20]
 801b3ee:	441a      	add	r2, r3
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681a      	ldr	r2, [r3, #0]
 801b3f8:	4b0e      	ldr	r3, [pc, #56]	@ (801b434 <UTIL_TIMER_Start+0xd8>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	429a      	cmp	r2, r3
 801b400:	d203      	bcs.n	801b40a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b402:	6878      	ldr	r0, [r7, #4]
 801b404:	f000 f9d6 	bl	801b7b4 <TimerInsertNewHeadTimer>
 801b408:	e002      	b.n	801b410 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b40a:	6878      	ldr	r0, [r7, #4]
 801b40c:	f000 f9a2 	bl	801b754 <TimerInsertTimer>
 801b410:	69fb      	ldr	r3, [r7, #28]
 801b412:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	f383 8810 	msr	PRIMASK, r3
}
 801b41a:	bf00      	nop
  {
 801b41c:	e002      	b.n	801b424 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b41e:	2301      	movs	r3, #1
 801b420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b428:	4618      	mov	r0, r3
 801b42a:	3728      	adds	r7, #40	@ 0x28
 801b42c:	46bd      	mov	sp, r7
 801b42e:	bd80      	pop	{r7, pc}
 801b430:	0801c12c 	.word	0x0801c12c
 801b434:	20001d04 	.word	0x20001d04

0801b438 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b088      	sub	sp, #32
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b440:	2300      	movs	r3, #0
 801b442:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d05b      	beq.n	801b502 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b44a:	f3ef 8310 	mrs	r3, PRIMASK
 801b44e:	60fb      	str	r3, [r7, #12]
  return(result);
 801b450:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b454:	b672      	cpsid	i
}
 801b456:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b458:	4b2d      	ldr	r3, [pc, #180]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b45e:	4b2c      	ldr	r3, [pc, #176]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	2201      	movs	r2, #1
 801b468:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b46a:	4b29      	ldr	r3, [pc, #164]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d041      	beq.n	801b4f6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	2200      	movs	r2, #0
 801b476:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b478:	4b25      	ldr	r3, [pc, #148]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	687a      	ldr	r2, [r7, #4]
 801b47e:	429a      	cmp	r2, r3
 801b480:	d134      	bne.n	801b4ec <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b482:	4b23      	ldr	r3, [pc, #140]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	2200      	movs	r2, #0
 801b488:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b48a:	4b21      	ldr	r3, [pc, #132]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	695b      	ldr	r3, [r3, #20]
 801b490:	2b00      	cmp	r3, #0
 801b492:	d00a      	beq.n	801b4aa <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b494:	4b1e      	ldr	r3, [pc, #120]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	695b      	ldr	r3, [r3, #20]
 801b49a:	4a1d      	ldr	r2, [pc, #116]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b49c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b49e:	4b1c      	ldr	r3, [pc, #112]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f000 f92c 	bl	801b700 <TimerSetTimeout>
 801b4a8:	e023      	b.n	801b4f2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b4aa:	4b1a      	ldr	r3, [pc, #104]	@ (801b514 <UTIL_TIMER_Stop+0xdc>)
 801b4ac:	68db      	ldr	r3, [r3, #12]
 801b4ae:	4798      	blx	r3
            TimerListHead = NULL;
 801b4b0:	4b17      	ldr	r3, [pc, #92]	@ (801b510 <UTIL_TIMER_Stop+0xd8>)
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	601a      	str	r2, [r3, #0]
 801b4b6:	e01c      	b.n	801b4f2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b4b8:	697a      	ldr	r2, [r7, #20]
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d110      	bne.n	801b4e2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b4c0:	697b      	ldr	r3, [r7, #20]
 801b4c2:	695b      	ldr	r3, [r3, #20]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d006      	beq.n	801b4d6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b4c8:	697b      	ldr	r3, [r7, #20]
 801b4ca:	695b      	ldr	r3, [r3, #20]
 801b4cc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b4ce:	69bb      	ldr	r3, [r7, #24]
 801b4d0:	697a      	ldr	r2, [r7, #20]
 801b4d2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b4d4:	e00d      	b.n	801b4f2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b4d6:	2300      	movs	r3, #0
 801b4d8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b4da:	69bb      	ldr	r3, [r7, #24]
 801b4dc:	697a      	ldr	r2, [r7, #20]
 801b4de:	615a      	str	r2, [r3, #20]
            break;
 801b4e0:	e007      	b.n	801b4f2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b4e2:	697b      	ldr	r3, [r7, #20]
 801b4e4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b4e6:	697b      	ldr	r3, [r7, #20]
 801b4e8:	695b      	ldr	r3, [r3, #20]
 801b4ea:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b4ec:	697b      	ldr	r3, [r7, #20]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d1e2      	bne.n	801b4b8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	77fb      	strb	r3, [r7, #31]
 801b4f6:	693b      	ldr	r3, [r7, #16]
 801b4f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	f383 8810 	msr	PRIMASK, r3
}
 801b500:	e001      	b.n	801b506 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b502:	2301      	movs	r3, #1
 801b504:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b506:	7ffb      	ldrb	r3, [r7, #31]
}
 801b508:	4618      	mov	r0, r3
 801b50a:	3720      	adds	r7, #32
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bd80      	pop	{r7, pc}
 801b510:	20001d04 	.word	0x20001d04
 801b514:	0801c12c 	.word	0x0801c12c

0801b518 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b518:	b580      	push	{r7, lr}
 801b51a:	b084      	sub	sp, #16
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
 801b520:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b522:	2300      	movs	r3, #0
 801b524:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d102      	bne.n	801b532 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b52c:	2301      	movs	r3, #1
 801b52e:	73fb      	strb	r3, [r7, #15]
 801b530:	e014      	b.n	801b55c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b532:	4b0d      	ldr	r3, [pc, #52]	@ (801b568 <UTIL_TIMER_SetPeriod+0x50>)
 801b534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b536:	6838      	ldr	r0, [r7, #0]
 801b538:	4798      	blx	r3
 801b53a:	4602      	mov	r2, r0
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f000 f8c1 	bl	801b6c8 <TimerExists>
 801b546:	4603      	mov	r3, r0
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d007      	beq.n	801b55c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b54c:	6878      	ldr	r0, [r7, #4]
 801b54e:	f7ff ff73 	bl	801b438 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b552:	6878      	ldr	r0, [r7, #4]
 801b554:	f7ff ff02 	bl	801b35c <UTIL_TIMER_Start>
 801b558:	4603      	mov	r3, r0
 801b55a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b55c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b55e:	4618      	mov	r0, r3
 801b560:	3710      	adds	r7, #16
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}
 801b566:	bf00      	nop
 801b568:	0801c12c 	.word	0x0801c12c

0801b56c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801b56c:	b590      	push	{r4, r7, lr}
 801b56e:	b089      	sub	sp, #36	@ 0x24
 801b570:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b572:	f3ef 8310 	mrs	r3, PRIMASK
 801b576:	60bb      	str	r3, [r7, #8]
  return(result);
 801b578:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b57a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b57c:	b672      	cpsid	i
}
 801b57e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801b580:	4b38      	ldr	r3, [pc, #224]	@ (801b664 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b582:	695b      	ldr	r3, [r3, #20]
 801b584:	4798      	blx	r3
 801b586:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801b588:	4b36      	ldr	r3, [pc, #216]	@ (801b664 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b58a:	691b      	ldr	r3, [r3, #16]
 801b58c:	4798      	blx	r3
 801b58e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801b590:	693a      	ldr	r2, [r7, #16]
 801b592:	697b      	ldr	r3, [r7, #20]
 801b594:	1ad3      	subs	r3, r2, r3
 801b596:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801b598:	4b33      	ldr	r3, [pc, #204]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d037      	beq.n	801b610 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801b5a0:	4b31      	ldr	r3, [pc, #196]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801b5a6:	69fb      	ldr	r3, [r7, #28]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	68fa      	ldr	r2, [r7, #12]
 801b5ac:	429a      	cmp	r2, r3
 801b5ae:	d206      	bcs.n	801b5be <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801b5b0:	69fb      	ldr	r3, [r7, #28]
 801b5b2:	681a      	ldr	r2, [r3, #0]
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	1ad2      	subs	r2, r2, r3
 801b5b8:	69fb      	ldr	r3, [r7, #28]
 801b5ba:	601a      	str	r2, [r3, #0]
 801b5bc:	e002      	b.n	801b5c4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801b5be:	69fb      	ldr	r3, [r7, #28]
 801b5c0:	2200      	movs	r2, #0
 801b5c2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801b5c4:	69fb      	ldr	r3, [r7, #28]
 801b5c6:	695b      	ldr	r3, [r3, #20]
 801b5c8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801b5ca:	69fb      	ldr	r3, [r7, #28]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d1ea      	bne.n	801b5a6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b5d0:	e01e      	b.n	801b610 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801b5d2:	4b25      	ldr	r3, [pc, #148]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801b5d8:	4b23      	ldr	r3, [pc, #140]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	695b      	ldr	r3, [r3, #20]
 801b5de:	4a22      	ldr	r2, [pc, #136]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b5e0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801b5e2:	69fb      	ldr	r3, [r7, #28]
 801b5e4:	2200      	movs	r2, #0
 801b5e6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801b5e8:	69fb      	ldr	r3, [r7, #28]
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801b5ee:	69fb      	ldr	r3, [r7, #28]
 801b5f0:	68db      	ldr	r3, [r3, #12]
 801b5f2:	69fa      	ldr	r2, [r7, #28]
 801b5f4:	6912      	ldr	r2, [r2, #16]
 801b5f6:	4610      	mov	r0, r2
 801b5f8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801b5fa:	69fb      	ldr	r3, [r7, #28]
 801b5fc:	7adb      	ldrb	r3, [r3, #11]
 801b5fe:	2b01      	cmp	r3, #1
 801b600:	d106      	bne.n	801b610 <UTIL_TIMER_IRQ_Handler+0xa4>
 801b602:	69fb      	ldr	r3, [r7, #28]
 801b604:	7a9b      	ldrb	r3, [r3, #10]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d102      	bne.n	801b610 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801b60a:	69f8      	ldr	r0, [r7, #28]
 801b60c:	f7ff fea6 	bl	801b35c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b610:	4b15      	ldr	r3, [pc, #84]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d00d      	beq.n	801b634 <UTIL_TIMER_IRQ_Handler+0xc8>
 801b618:	4b13      	ldr	r3, [pc, #76]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d0d7      	beq.n	801b5d2 <UTIL_TIMER_IRQ_Handler+0x66>
 801b622:	4b11      	ldr	r3, [pc, #68]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	681c      	ldr	r4, [r3, #0]
 801b628:	4b0e      	ldr	r3, [pc, #56]	@ (801b664 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b62a:	699b      	ldr	r3, [r3, #24]
 801b62c:	4798      	blx	r3
 801b62e:	4603      	mov	r3, r0
 801b630:	429c      	cmp	r4, r3
 801b632:	d3ce      	bcc.n	801b5d2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801b634:	4b0c      	ldr	r3, [pc, #48]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d009      	beq.n	801b650 <UTIL_TIMER_IRQ_Handler+0xe4>
 801b63c:	4b0a      	ldr	r3, [pc, #40]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	7a1b      	ldrb	r3, [r3, #8]
 801b642:	2b00      	cmp	r3, #0
 801b644:	d104      	bne.n	801b650 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801b646:	4b08      	ldr	r3, [pc, #32]	@ (801b668 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b648:	681b      	ldr	r3, [r3, #0]
 801b64a:	4618      	mov	r0, r3
 801b64c:	f000 f858 	bl	801b700 <TimerSetTimeout>
 801b650:	69bb      	ldr	r3, [r7, #24]
 801b652:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	f383 8810 	msr	PRIMASK, r3
}
 801b65a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801b65c:	bf00      	nop
 801b65e:	3724      	adds	r7, #36	@ 0x24
 801b660:	46bd      	mov	sp, r7
 801b662:	bd90      	pop	{r4, r7, pc}
 801b664:	0801c12c 	.word	0x0801c12c
 801b668:	20001d04 	.word	0x20001d04

0801b66c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b082      	sub	sp, #8
 801b670:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801b672:	4b06      	ldr	r3, [pc, #24]	@ (801b68c <UTIL_TIMER_GetCurrentTime+0x20>)
 801b674:	69db      	ldr	r3, [r3, #28]
 801b676:	4798      	blx	r3
 801b678:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801b67a:	4b04      	ldr	r3, [pc, #16]	@ (801b68c <UTIL_TIMER_GetCurrentTime+0x20>)
 801b67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b67e:	6878      	ldr	r0, [r7, #4]
 801b680:	4798      	blx	r3
 801b682:	4603      	mov	r3, r0
}
 801b684:	4618      	mov	r0, r3
 801b686:	3708      	adds	r7, #8
 801b688:	46bd      	mov	sp, r7
 801b68a:	bd80      	pop	{r7, pc}
 801b68c:	0801c12c 	.word	0x0801c12c

0801b690 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801b690:	b580      	push	{r7, lr}
 801b692:	b084      	sub	sp, #16
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801b698:	4b0a      	ldr	r3, [pc, #40]	@ (801b6c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b69a:	69db      	ldr	r3, [r3, #28]
 801b69c:	4798      	blx	r3
 801b69e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b6a0:	4b08      	ldr	r3, [pc, #32]	@ (801b6c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b6a4:	6878      	ldr	r0, [r7, #4]
 801b6a6:	4798      	blx	r3
 801b6a8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b6aa:	4b06      	ldr	r3, [pc, #24]	@ (801b6c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b6ae:	68f9      	ldr	r1, [r7, #12]
 801b6b0:	68ba      	ldr	r2, [r7, #8]
 801b6b2:	1a8a      	subs	r2, r1, r2
 801b6b4:	4610      	mov	r0, r2
 801b6b6:	4798      	blx	r3
 801b6b8:	4603      	mov	r3, r0
}
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	3710      	adds	r7, #16
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	bd80      	pop	{r7, pc}
 801b6c2:	bf00      	nop
 801b6c4:	0801c12c 	.word	0x0801c12c

0801b6c8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b6c8:	b480      	push	{r7}
 801b6ca:	b085      	sub	sp, #20
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b6d0:	4b0a      	ldr	r3, [pc, #40]	@ (801b6fc <TimerExists+0x34>)
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b6d6:	e008      	b.n	801b6ea <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b6d8:	68fa      	ldr	r2, [r7, #12]
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	429a      	cmp	r2, r3
 801b6de:	d101      	bne.n	801b6e4 <TimerExists+0x1c>
    {
      return true;
 801b6e0:	2301      	movs	r3, #1
 801b6e2:	e006      	b.n	801b6f2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	695b      	ldr	r3, [r3, #20]
 801b6e8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d1f3      	bne.n	801b6d8 <TimerExists+0x10>
  }
  return false;
 801b6f0:	2300      	movs	r3, #0
}
 801b6f2:	4618      	mov	r0, r3
 801b6f4:	3714      	adds	r7, #20
 801b6f6:	46bd      	mov	sp, r7
 801b6f8:	bc80      	pop	{r7}
 801b6fa:	4770      	bx	lr
 801b6fc:	20001d04 	.word	0x20001d04

0801b700 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b700:	b590      	push	{r4, r7, lr}
 801b702:	b085      	sub	sp, #20
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b708:	4b11      	ldr	r3, [pc, #68]	@ (801b750 <TimerSetTimeout+0x50>)
 801b70a:	6a1b      	ldr	r3, [r3, #32]
 801b70c:	4798      	blx	r3
 801b70e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	2201      	movs	r2, #1
 801b714:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	681c      	ldr	r4, [r3, #0]
 801b71a:	4b0d      	ldr	r3, [pc, #52]	@ (801b750 <TimerSetTimeout+0x50>)
 801b71c:	699b      	ldr	r3, [r3, #24]
 801b71e:	4798      	blx	r3
 801b720:	4602      	mov	r2, r0
 801b722:	68fb      	ldr	r3, [r7, #12]
 801b724:	4413      	add	r3, r2
 801b726:	429c      	cmp	r4, r3
 801b728:	d207      	bcs.n	801b73a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b72a:	4b09      	ldr	r3, [pc, #36]	@ (801b750 <TimerSetTimeout+0x50>)
 801b72c:	699b      	ldr	r3, [r3, #24]
 801b72e:	4798      	blx	r3
 801b730:	4602      	mov	r2, r0
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	441a      	add	r2, r3
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b73a:	4b05      	ldr	r3, [pc, #20]	@ (801b750 <TimerSetTimeout+0x50>)
 801b73c:	689b      	ldr	r3, [r3, #8]
 801b73e:	687a      	ldr	r2, [r7, #4]
 801b740:	6812      	ldr	r2, [r2, #0]
 801b742:	4610      	mov	r0, r2
 801b744:	4798      	blx	r3
}
 801b746:	bf00      	nop
 801b748:	3714      	adds	r7, #20
 801b74a:	46bd      	mov	sp, r7
 801b74c:	bd90      	pop	{r4, r7, pc}
 801b74e:	bf00      	nop
 801b750:	0801c12c 	.word	0x0801c12c

0801b754 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b754:	b480      	push	{r7}
 801b756:	b085      	sub	sp, #20
 801b758:	af00      	add	r7, sp, #0
 801b75a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b75c:	4b14      	ldr	r3, [pc, #80]	@ (801b7b0 <TimerInsertTimer+0x5c>)
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b762:	4b13      	ldr	r3, [pc, #76]	@ (801b7b0 <TimerInsertTimer+0x5c>)
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	695b      	ldr	r3, [r3, #20]
 801b768:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b76a:	e012      	b.n	801b792 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681a      	ldr	r2, [r3, #0]
 801b770:	68bb      	ldr	r3, [r7, #8]
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	429a      	cmp	r2, r3
 801b776:	d905      	bls.n	801b784 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b778:	68bb      	ldr	r3, [r7, #8]
 801b77a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	695b      	ldr	r3, [r3, #20]
 801b780:	60bb      	str	r3, [r7, #8]
 801b782:	e006      	b.n	801b792 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	687a      	ldr	r2, [r7, #4]
 801b788:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	68ba      	ldr	r2, [r7, #8]
 801b78e:	615a      	str	r2, [r3, #20]
        return;
 801b790:	e009      	b.n	801b7a6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	695b      	ldr	r3, [r3, #20]
 801b796:	2b00      	cmp	r3, #0
 801b798:	d1e8      	bne.n	801b76c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	687a      	ldr	r2, [r7, #4]
 801b79e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	2200      	movs	r2, #0
 801b7a4:	615a      	str	r2, [r3, #20]
}
 801b7a6:	3714      	adds	r7, #20
 801b7a8:	46bd      	mov	sp, r7
 801b7aa:	bc80      	pop	{r7}
 801b7ac:	4770      	bx	lr
 801b7ae:	bf00      	nop
 801b7b0:	20001d04 	.word	0x20001d04

0801b7b4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b084      	sub	sp, #16
 801b7b8:	af00      	add	r7, sp, #0
 801b7ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b7bc:	4b0b      	ldr	r3, [pc, #44]	@ (801b7ec <TimerInsertNewHeadTimer+0x38>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d002      	beq.n	801b7ce <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	68fa      	ldr	r2, [r7, #12]
 801b7d2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b7d4:	4a05      	ldr	r2, [pc, #20]	@ (801b7ec <TimerInsertNewHeadTimer+0x38>)
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b7da:	4b04      	ldr	r3, [pc, #16]	@ (801b7ec <TimerInsertNewHeadTimer+0x38>)
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	4618      	mov	r0, r3
 801b7e0:	f7ff ff8e 	bl	801b700 <TimerSetTimeout>
}
 801b7e4:	bf00      	nop
 801b7e6:	3710      	adds	r7, #16
 801b7e8:	46bd      	mov	sp, r7
 801b7ea:	bd80      	pop	{r7, pc}
 801b7ec:	20001d04 	.word	0x20001d04

0801b7f0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b7f0:	b580      	push	{r7, lr}
 801b7f2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b7f4:	2218      	movs	r2, #24
 801b7f6:	2100      	movs	r1, #0
 801b7f8:	4807      	ldr	r0, [pc, #28]	@ (801b818 <UTIL_ADV_TRACE_Init+0x28>)
 801b7fa:	f7ff f862 	bl	801a8c2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b7fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b802:	2100      	movs	r1, #0
 801b804:	4805      	ldr	r0, [pc, #20]	@ (801b81c <UTIL_ADV_TRACE_Init+0x2c>)
 801b806:	f7ff f85c 	bl	801a8c2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b80a:	4b05      	ldr	r3, [pc, #20]	@ (801b820 <UTIL_ADV_TRACE_Init+0x30>)
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	4805      	ldr	r0, [pc, #20]	@ (801b824 <UTIL_ADV_TRACE_Init+0x34>)
 801b810:	4798      	blx	r3
 801b812:	4603      	mov	r3, r0
}
 801b814:	4618      	mov	r0, r3
 801b816:	bd80      	pop	{r7, pc}
 801b818:	20001d08 	.word	0x20001d08
 801b81c:	20001d20 	.word	0x20001d20
 801b820:	0801c16c 	.word	0x0801c16c
 801b824:	0801ba91 	.word	0x0801ba91

0801b828 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b828:	b480      	push	{r7}
 801b82a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b82c:	4b06      	ldr	r3, [pc, #24]	@ (801b848 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b82e:	8a5a      	ldrh	r2, [r3, #18]
 801b830:	4b05      	ldr	r3, [pc, #20]	@ (801b848 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b832:	8a1b      	ldrh	r3, [r3, #16]
 801b834:	429a      	cmp	r2, r3
 801b836:	d101      	bne.n	801b83c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b838:	2301      	movs	r3, #1
 801b83a:	e000      	b.n	801b83e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b83c:	2300      	movs	r3, #0
}
 801b83e:	4618      	mov	r0, r3
 801b840:	46bd      	mov	sp, r7
 801b842:	bc80      	pop	{r7}
 801b844:	4770      	bx	lr
 801b846:	bf00      	nop
 801b848:	20001d08 	.word	0x20001d08

0801b84c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b84c:	b408      	push	{r3}
 801b84e:	b580      	push	{r7, lr}
 801b850:	b08d      	sub	sp, #52	@ 0x34
 801b852:	af00      	add	r7, sp, #0
 801b854:	60f8      	str	r0, [r7, #12]
 801b856:	60b9      	str	r1, [r7, #8]
 801b858:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b85a:	2300      	movs	r3, #0
 801b85c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b85e:	2300      	movs	r3, #0
 801b860:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b862:	4b37      	ldr	r3, [pc, #220]	@ (801b940 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b864:	7a1b      	ldrb	r3, [r3, #8]
 801b866:	461a      	mov	r2, r3
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	4293      	cmp	r3, r2
 801b86c:	d902      	bls.n	801b874 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b86e:	f06f 0304 	mvn.w	r3, #4
 801b872:	e05e      	b.n	801b932 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b874:	4b32      	ldr	r3, [pc, #200]	@ (801b940 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b876:	68da      	ldr	r2, [r3, #12]
 801b878:	68bb      	ldr	r3, [r7, #8]
 801b87a:	4013      	ands	r3, r2
 801b87c:	68ba      	ldr	r2, [r7, #8]
 801b87e:	429a      	cmp	r2, r3
 801b880:	d002      	beq.n	801b888 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b882:	f06f 0305 	mvn.w	r3, #5
 801b886:	e054      	b.n	801b932 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b888:	4b2d      	ldr	r3, [pc, #180]	@ (801b940 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b88a:	685b      	ldr	r3, [r3, #4]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d00a      	beq.n	801b8a6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	2b00      	cmp	r3, #0
 801b894:	d007      	beq.n	801b8a6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b896:	4b2a      	ldr	r3, [pc, #168]	@ (801b940 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b898:	685b      	ldr	r3, [r3, #4]
 801b89a:	f107 0116 	add.w	r1, r7, #22
 801b89e:	f107 0218 	add.w	r2, r7, #24
 801b8a2:	4610      	mov	r0, r2
 801b8a4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b8a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b8aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b8b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b8b4:	4823      	ldr	r0, [pc, #140]	@ (801b944 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b8b6:	f7ff fa2b 	bl	801ad10 <tiny_vsnprintf_like>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801b8be:	f000 f9f1 	bl	801bca4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b8c2:	8afa      	ldrh	r2, [r7, #22]
 801b8c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b8c6:	4413      	add	r3, r2
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	f107 0214 	add.w	r2, r7, #20
 801b8ce:	4611      	mov	r1, r2
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f000 f969 	bl	801bba8 <TRACE_AllocateBufer>
 801b8d6:	4603      	mov	r3, r0
 801b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8dc:	d025      	beq.n	801b92a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b8de:	2300      	movs	r3, #0
 801b8e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b8e2:	e00e      	b.n	801b902 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b8e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b8e6:	8aba      	ldrh	r2, [r7, #20]
 801b8e8:	3330      	adds	r3, #48	@ 0x30
 801b8ea:	443b      	add	r3, r7
 801b8ec:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b8f0:	4b15      	ldr	r3, [pc, #84]	@ (801b948 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b8f2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b8f4:	8abb      	ldrh	r3, [r7, #20]
 801b8f6:	3301      	adds	r3, #1
 801b8f8:	b29b      	uxth	r3, r3
 801b8fa:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b8fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b8fe:	3301      	adds	r3, #1
 801b900:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b902:	8afb      	ldrh	r3, [r7, #22]
 801b904:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b906:	429a      	cmp	r2, r3
 801b908:	d3ec      	bcc.n	801b8e4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b90a:	8abb      	ldrh	r3, [r7, #20]
 801b90c:	461a      	mov	r2, r3
 801b90e:	4b0e      	ldr	r3, [pc, #56]	@ (801b948 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b910:	18d0      	adds	r0, r2, r3
 801b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b914:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b916:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b91a:	f7ff f9f9 	bl	801ad10 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b91e:	f000 f9df 	bl	801bce0 <TRACE_UnLock>

    return TRACE_Send();
 801b922:	f000 f831 	bl	801b988 <TRACE_Send>
 801b926:	4603      	mov	r3, r0
 801b928:	e003      	b.n	801b932 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b92a:	f000 f9d9 	bl	801bce0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b92e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b932:	4618      	mov	r0, r3
 801b934:	3734      	adds	r7, #52	@ 0x34
 801b936:	46bd      	mov	sp, r7
 801b938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b93c:	b001      	add	sp, #4
 801b93e:	4770      	bx	lr
 801b940:	20001d08 	.word	0x20001d08
 801b944:	20002120 	.word	0x20002120
 801b948:	20001d20 	.word	0x20001d20

0801b94c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b94c:	b480      	push	{r7}
 801b94e:	b083      	sub	sp, #12
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b954:	4a03      	ldr	r2, [pc, #12]	@ (801b964 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	6053      	str	r3, [r2, #4]
}
 801b95a:	bf00      	nop
 801b95c:	370c      	adds	r7, #12
 801b95e:	46bd      	mov	sp, r7
 801b960:	bc80      	pop	{r7}
 801b962:	4770      	bx	lr
 801b964:	20001d08 	.word	0x20001d08

0801b968 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b968:	b480      	push	{r7}
 801b96a:	b083      	sub	sp, #12
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	4603      	mov	r3, r0
 801b970:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b972:	4a04      	ldr	r2, [pc, #16]	@ (801b984 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b974:	79fb      	ldrb	r3, [r7, #7]
 801b976:	7213      	strb	r3, [r2, #8]
}
 801b978:	bf00      	nop
 801b97a:	370c      	adds	r7, #12
 801b97c:	46bd      	mov	sp, r7
 801b97e:	bc80      	pop	{r7}
 801b980:	4770      	bx	lr
 801b982:	bf00      	nop
 801b984:	20001d08 	.word	0x20001d08

0801b988 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	b088      	sub	sp, #32
 801b98c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b98e:	2300      	movs	r3, #0
 801b990:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b992:	2300      	movs	r3, #0
 801b994:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b996:	f3ef 8310 	mrs	r3, PRIMASK
 801b99a:	613b      	str	r3, [r7, #16]
  return(result);
 801b99c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b99e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b9a0:	b672      	cpsid	i
}
 801b9a2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b9a4:	f000 f9ba 	bl	801bd1c <TRACE_IsLocked>
 801b9a8:	4603      	mov	r3, r0
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d15d      	bne.n	801ba6a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b9ae:	f000 f979 	bl	801bca4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b9b2:	4b34      	ldr	r3, [pc, #208]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9b4:	8a1a      	ldrh	r2, [r3, #16]
 801b9b6:	4b33      	ldr	r3, [pc, #204]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9b8:	8a5b      	ldrh	r3, [r3, #18]
 801b9ba:	429a      	cmp	r2, r3
 801b9bc:	d04d      	beq.n	801ba5a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b9be:	4b31      	ldr	r3, [pc, #196]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9c0:	789b      	ldrb	r3, [r3, #2]
 801b9c2:	2b01      	cmp	r3, #1
 801b9c4:	d117      	bne.n	801b9f6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b9c6:	4b2f      	ldr	r3, [pc, #188]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9c8:	881a      	ldrh	r2, [r3, #0]
 801b9ca:	4b2e      	ldr	r3, [pc, #184]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9cc:	8a1b      	ldrh	r3, [r3, #16]
 801b9ce:	1ad3      	subs	r3, r2, r3
 801b9d0:	b29a      	uxth	r2, r3
 801b9d2:	4b2c      	ldr	r3, [pc, #176]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9d4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b9d6:	4b2b      	ldr	r3, [pc, #172]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9d8:	2202      	movs	r2, #2
 801b9da:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b9dc:	4b29      	ldr	r3, [pc, #164]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9de:	2200      	movs	r2, #0
 801b9e0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b9e2:	4b28      	ldr	r3, [pc, #160]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9e4:	8a9b      	ldrh	r3, [r3, #20]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d105      	bne.n	801b9f6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b9ea:	4b26      	ldr	r3, [pc, #152]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9ec:	2200      	movs	r2, #0
 801b9ee:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b9f0:	4b24      	ldr	r3, [pc, #144]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b9f6:	4b23      	ldr	r3, [pc, #140]	@ (801ba84 <TRACE_Send+0xfc>)
 801b9f8:	789b      	ldrb	r3, [r3, #2]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d115      	bne.n	801ba2a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b9fe:	4b21      	ldr	r3, [pc, #132]	@ (801ba84 <TRACE_Send+0xfc>)
 801ba00:	8a5a      	ldrh	r2, [r3, #18]
 801ba02:	4b20      	ldr	r3, [pc, #128]	@ (801ba84 <TRACE_Send+0xfc>)
 801ba04:	8a1b      	ldrh	r3, [r3, #16]
 801ba06:	429a      	cmp	r2, r3
 801ba08:	d908      	bls.n	801ba1c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ba0a:	4b1e      	ldr	r3, [pc, #120]	@ (801ba84 <TRACE_Send+0xfc>)
 801ba0c:	8a5a      	ldrh	r2, [r3, #18]
 801ba0e:	4b1d      	ldr	r3, [pc, #116]	@ (801ba84 <TRACE_Send+0xfc>)
 801ba10:	8a1b      	ldrh	r3, [r3, #16]
 801ba12:	1ad3      	subs	r3, r2, r3
 801ba14:	b29a      	uxth	r2, r3
 801ba16:	4b1b      	ldr	r3, [pc, #108]	@ (801ba84 <TRACE_Send+0xfc>)
 801ba18:	829a      	strh	r2, [r3, #20]
 801ba1a:	e006      	b.n	801ba2a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ba1c:	4b19      	ldr	r3, [pc, #100]	@ (801ba84 <TRACE_Send+0xfc>)
 801ba1e:	8a1b      	ldrh	r3, [r3, #16]
 801ba20:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801ba24:	b29a      	uxth	r2, r3
 801ba26:	4b17      	ldr	r3, [pc, #92]	@ (801ba84 <TRACE_Send+0xfc>)
 801ba28:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ba2a:	4b16      	ldr	r3, [pc, #88]	@ (801ba84 <TRACE_Send+0xfc>)
 801ba2c:	8a1b      	ldrh	r3, [r3, #16]
 801ba2e:	461a      	mov	r2, r3
 801ba30:	4b15      	ldr	r3, [pc, #84]	@ (801ba88 <TRACE_Send+0x100>)
 801ba32:	4413      	add	r3, r2
 801ba34:	61bb      	str	r3, [r7, #24]
 801ba36:	697b      	ldr	r3, [r7, #20]
 801ba38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba3a:	68fb      	ldr	r3, [r7, #12]
 801ba3c:	f383 8810 	msr	PRIMASK, r3
}
 801ba40:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ba42:	f7e6 fbb9 	bl	80021b8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ba46:	4b11      	ldr	r3, [pc, #68]	@ (801ba8c <TRACE_Send+0x104>)
 801ba48:	68db      	ldr	r3, [r3, #12]
 801ba4a:	4a0e      	ldr	r2, [pc, #56]	@ (801ba84 <TRACE_Send+0xfc>)
 801ba4c:	8a92      	ldrh	r2, [r2, #20]
 801ba4e:	4611      	mov	r1, r2
 801ba50:	69b8      	ldr	r0, [r7, #24]
 801ba52:	4798      	blx	r3
 801ba54:	4603      	mov	r3, r0
 801ba56:	77fb      	strb	r3, [r7, #31]
 801ba58:	e00d      	b.n	801ba76 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ba5a:	f000 f941 	bl	801bce0 <TRACE_UnLock>
 801ba5e:	697b      	ldr	r3, [r7, #20]
 801ba60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba62:	68bb      	ldr	r3, [r7, #8]
 801ba64:	f383 8810 	msr	PRIMASK, r3
}
 801ba68:	e005      	b.n	801ba76 <TRACE_Send+0xee>
 801ba6a:	697b      	ldr	r3, [r7, #20]
 801ba6c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	f383 8810 	msr	PRIMASK, r3
}
 801ba74:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ba76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	3720      	adds	r7, #32
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	20001d08 	.word	0x20001d08
 801ba88:	20001d20 	.word	0x20001d20
 801ba8c:	0801c16c 	.word	0x0801c16c

0801ba90 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b088      	sub	sp, #32
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ba98:	2300      	movs	r3, #0
 801ba9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba9c:	f3ef 8310 	mrs	r3, PRIMASK
 801baa0:	617b      	str	r3, [r7, #20]
  return(result);
 801baa2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801baa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801baa6:	b672      	cpsid	i
}
 801baa8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801baaa:	4b3c      	ldr	r3, [pc, #240]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801baac:	789b      	ldrb	r3, [r3, #2]
 801baae:	2b02      	cmp	r3, #2
 801bab0:	d106      	bne.n	801bac0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bab2:	4b3a      	ldr	r3, [pc, #232]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bab4:	2200      	movs	r2, #0
 801bab6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bab8:	4b38      	ldr	r3, [pc, #224]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801baba:	2200      	movs	r2, #0
 801babc:	821a      	strh	r2, [r3, #16]
 801babe:	e00a      	b.n	801bad6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bac0:	4b36      	ldr	r3, [pc, #216]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bac2:	8a1a      	ldrh	r2, [r3, #16]
 801bac4:	4b35      	ldr	r3, [pc, #212]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bac6:	8a9b      	ldrh	r3, [r3, #20]
 801bac8:	4413      	add	r3, r2
 801baca:	b29b      	uxth	r3, r3
 801bacc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bad0:	b29a      	uxth	r2, r3
 801bad2:	4b32      	ldr	r3, [pc, #200]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bad4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801bad6:	4b31      	ldr	r3, [pc, #196]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bad8:	8a1a      	ldrh	r2, [r3, #16]
 801bada:	4b30      	ldr	r3, [pc, #192]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801badc:	8a5b      	ldrh	r3, [r3, #18]
 801bade:	429a      	cmp	r2, r3
 801bae0:	d04d      	beq.n	801bb7e <TRACE_TxCpltCallback+0xee>
 801bae2:	4b2e      	ldr	r3, [pc, #184]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bae4:	8adb      	ldrh	r3, [r3, #22]
 801bae6:	2b01      	cmp	r3, #1
 801bae8:	d149      	bne.n	801bb7e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801baea:	4b2c      	ldr	r3, [pc, #176]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801baec:	789b      	ldrb	r3, [r3, #2]
 801baee:	2b01      	cmp	r3, #1
 801baf0:	d117      	bne.n	801bb22 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801baf2:	4b2a      	ldr	r3, [pc, #168]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801baf4:	881a      	ldrh	r2, [r3, #0]
 801baf6:	4b29      	ldr	r3, [pc, #164]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801baf8:	8a1b      	ldrh	r3, [r3, #16]
 801bafa:	1ad3      	subs	r3, r2, r3
 801bafc:	b29a      	uxth	r2, r3
 801bafe:	4b27      	ldr	r3, [pc, #156]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb00:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bb02:	4b26      	ldr	r3, [pc, #152]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb04:	2202      	movs	r2, #2
 801bb06:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bb08:	4b24      	ldr	r3, [pc, #144]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801bb0e:	4b23      	ldr	r3, [pc, #140]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb10:	8a9b      	ldrh	r3, [r3, #20]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d105      	bne.n	801bb22 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bb16:	4b21      	ldr	r3, [pc, #132]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb18:	2200      	movs	r2, #0
 801bb1a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bb1c:	4b1f      	ldr	r3, [pc, #124]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb1e:	2200      	movs	r2, #0
 801bb20:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bb22:	4b1e      	ldr	r3, [pc, #120]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb24:	789b      	ldrb	r3, [r3, #2]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d115      	bne.n	801bb56 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bb2a:	4b1c      	ldr	r3, [pc, #112]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb2c:	8a5a      	ldrh	r2, [r3, #18]
 801bb2e:	4b1b      	ldr	r3, [pc, #108]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb30:	8a1b      	ldrh	r3, [r3, #16]
 801bb32:	429a      	cmp	r2, r3
 801bb34:	d908      	bls.n	801bb48 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bb36:	4b19      	ldr	r3, [pc, #100]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb38:	8a5a      	ldrh	r2, [r3, #18]
 801bb3a:	4b18      	ldr	r3, [pc, #96]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb3c:	8a1b      	ldrh	r3, [r3, #16]
 801bb3e:	1ad3      	subs	r3, r2, r3
 801bb40:	b29a      	uxth	r2, r3
 801bb42:	4b16      	ldr	r3, [pc, #88]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb44:	829a      	strh	r2, [r3, #20]
 801bb46:	e006      	b.n	801bb56 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bb48:	4b14      	ldr	r3, [pc, #80]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb4a:	8a1b      	ldrh	r3, [r3, #16]
 801bb4c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bb50:	b29a      	uxth	r2, r3
 801bb52:	4b12      	ldr	r3, [pc, #72]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb54:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bb56:	4b11      	ldr	r3, [pc, #68]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb58:	8a1b      	ldrh	r3, [r3, #16]
 801bb5a:	461a      	mov	r2, r3
 801bb5c:	4b10      	ldr	r3, [pc, #64]	@ (801bba0 <TRACE_TxCpltCallback+0x110>)
 801bb5e:	4413      	add	r3, r2
 801bb60:	61fb      	str	r3, [r7, #28]
 801bb62:	69bb      	ldr	r3, [r7, #24]
 801bb64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb66:	693b      	ldr	r3, [r7, #16]
 801bb68:	f383 8810 	msr	PRIMASK, r3
}
 801bb6c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801bb6e:	4b0d      	ldr	r3, [pc, #52]	@ (801bba4 <TRACE_TxCpltCallback+0x114>)
 801bb70:	68db      	ldr	r3, [r3, #12]
 801bb72:	4a0a      	ldr	r2, [pc, #40]	@ (801bb9c <TRACE_TxCpltCallback+0x10c>)
 801bb74:	8a92      	ldrh	r2, [r2, #20]
 801bb76:	4611      	mov	r1, r2
 801bb78:	69f8      	ldr	r0, [r7, #28]
 801bb7a:	4798      	blx	r3
 801bb7c:	e00a      	b.n	801bb94 <TRACE_TxCpltCallback+0x104>
 801bb7e:	69bb      	ldr	r3, [r7, #24]
 801bb80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	f383 8810 	msr	PRIMASK, r3
}
 801bb88:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801bb8a:	f7e6 fb1d 	bl	80021c8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801bb8e:	f000 f8a7 	bl	801bce0 <TRACE_UnLock>
  }
}
 801bb92:	bf00      	nop
 801bb94:	bf00      	nop
 801bb96:	3720      	adds	r7, #32
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	bd80      	pop	{r7, pc}
 801bb9c:	20001d08 	.word	0x20001d08
 801bba0:	20001d20 	.word	0x20001d20
 801bba4:	0801c16c 	.word	0x0801c16c

0801bba8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801bba8:	b480      	push	{r7}
 801bbaa:	b087      	sub	sp, #28
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	4603      	mov	r3, r0
 801bbb0:	6039      	str	r1, [r7, #0]
 801bbb2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801bbb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bbb8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbba:	f3ef 8310 	mrs	r3, PRIMASK
 801bbbe:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbc0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bbc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbc4:	b672      	cpsid	i
}
 801bbc6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bbc8:	4b35      	ldr	r3, [pc, #212]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bbca:	8a5a      	ldrh	r2, [r3, #18]
 801bbcc:	4b34      	ldr	r3, [pc, #208]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bbce:	8a1b      	ldrh	r3, [r3, #16]
 801bbd0:	429a      	cmp	r2, r3
 801bbd2:	d11b      	bne.n	801bc0c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bbd4:	4b32      	ldr	r3, [pc, #200]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bbd6:	8a5b      	ldrh	r3, [r3, #18]
 801bbd8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bbdc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bbde:	88fa      	ldrh	r2, [r7, #6]
 801bbe0:	8afb      	ldrh	r3, [r7, #22]
 801bbe2:	429a      	cmp	r2, r3
 801bbe4:	d33a      	bcc.n	801bc5c <TRACE_AllocateBufer+0xb4>
 801bbe6:	4b2e      	ldr	r3, [pc, #184]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bbe8:	8a1b      	ldrh	r3, [r3, #16]
 801bbea:	88fa      	ldrh	r2, [r7, #6]
 801bbec:	429a      	cmp	r2, r3
 801bbee:	d235      	bcs.n	801bc5c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bbf0:	4b2b      	ldr	r3, [pc, #172]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bbf2:	2201      	movs	r2, #1
 801bbf4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bbf6:	4b2a      	ldr	r3, [pc, #168]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bbf8:	8a5a      	ldrh	r2, [r3, #18]
 801bbfa:	4b29      	ldr	r3, [pc, #164]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bbfc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bbfe:	4b28      	ldr	r3, [pc, #160]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc00:	8a1b      	ldrh	r3, [r3, #16]
 801bc02:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bc04:	4b26      	ldr	r3, [pc, #152]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc06:	2200      	movs	r2, #0
 801bc08:	825a      	strh	r2, [r3, #18]
 801bc0a:	e027      	b.n	801bc5c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bc0c:	4b24      	ldr	r3, [pc, #144]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc0e:	8a5a      	ldrh	r2, [r3, #18]
 801bc10:	4b23      	ldr	r3, [pc, #140]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc12:	8a1b      	ldrh	r3, [r3, #16]
 801bc14:	429a      	cmp	r2, r3
 801bc16:	d91b      	bls.n	801bc50 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bc18:	4b21      	ldr	r3, [pc, #132]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc1a:	8a5b      	ldrh	r3, [r3, #18]
 801bc1c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bc20:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801bc22:	88fa      	ldrh	r2, [r7, #6]
 801bc24:	8afb      	ldrh	r3, [r7, #22]
 801bc26:	429a      	cmp	r2, r3
 801bc28:	d318      	bcc.n	801bc5c <TRACE_AllocateBufer+0xb4>
 801bc2a:	4b1d      	ldr	r3, [pc, #116]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc2c:	8a1b      	ldrh	r3, [r3, #16]
 801bc2e:	88fa      	ldrh	r2, [r7, #6]
 801bc30:	429a      	cmp	r2, r3
 801bc32:	d213      	bcs.n	801bc5c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bc34:	4b1a      	ldr	r3, [pc, #104]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc36:	2201      	movs	r2, #1
 801bc38:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bc3a:	4b19      	ldr	r3, [pc, #100]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc3c:	8a5a      	ldrh	r2, [r3, #18]
 801bc3e:	4b18      	ldr	r3, [pc, #96]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc40:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bc42:	4b17      	ldr	r3, [pc, #92]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc44:	8a1b      	ldrh	r3, [r3, #16]
 801bc46:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bc48:	4b15      	ldr	r3, [pc, #84]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc4a:	2200      	movs	r2, #0
 801bc4c:	825a      	strh	r2, [r3, #18]
 801bc4e:	e005      	b.n	801bc5c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801bc50:	4b13      	ldr	r3, [pc, #76]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc52:	8a1a      	ldrh	r2, [r3, #16]
 801bc54:	4b12      	ldr	r3, [pc, #72]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc56:	8a5b      	ldrh	r3, [r3, #18]
 801bc58:	1ad3      	subs	r3, r2, r3
 801bc5a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801bc5c:	8afa      	ldrh	r2, [r7, #22]
 801bc5e:	88fb      	ldrh	r3, [r7, #6]
 801bc60:	429a      	cmp	r2, r3
 801bc62:	d90f      	bls.n	801bc84 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801bc64:	4b0e      	ldr	r3, [pc, #56]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc66:	8a5a      	ldrh	r2, [r3, #18]
 801bc68:	683b      	ldr	r3, [r7, #0]
 801bc6a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bc6c:	4b0c      	ldr	r3, [pc, #48]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc6e:	8a5a      	ldrh	r2, [r3, #18]
 801bc70:	88fb      	ldrh	r3, [r7, #6]
 801bc72:	4413      	add	r3, r2
 801bc74:	b29b      	uxth	r3, r3
 801bc76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bc7a:	b29a      	uxth	r2, r3
 801bc7c:	4b08      	ldr	r3, [pc, #32]	@ (801bca0 <TRACE_AllocateBufer+0xf8>)
 801bc7e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801bc80:	2300      	movs	r3, #0
 801bc82:	82bb      	strh	r3, [r7, #20]
 801bc84:	693b      	ldr	r3, [r7, #16]
 801bc86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc88:	68bb      	ldr	r3, [r7, #8]
 801bc8a:	f383 8810 	msr	PRIMASK, r3
}
 801bc8e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801bc90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801bc94:	4618      	mov	r0, r3
 801bc96:	371c      	adds	r7, #28
 801bc98:	46bd      	mov	sp, r7
 801bc9a:	bc80      	pop	{r7}
 801bc9c:	4770      	bx	lr
 801bc9e:	bf00      	nop
 801bca0:	20001d08 	.word	0x20001d08

0801bca4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801bca4:	b480      	push	{r7}
 801bca6:	b085      	sub	sp, #20
 801bca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bcaa:	f3ef 8310 	mrs	r3, PRIMASK
 801bcae:	607b      	str	r3, [r7, #4]
  return(result);
 801bcb0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bcb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bcb4:	b672      	cpsid	i
}
 801bcb6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801bcb8:	4b08      	ldr	r3, [pc, #32]	@ (801bcdc <TRACE_Lock+0x38>)
 801bcba:	8adb      	ldrh	r3, [r3, #22]
 801bcbc:	3301      	adds	r3, #1
 801bcbe:	b29a      	uxth	r2, r3
 801bcc0:	4b06      	ldr	r3, [pc, #24]	@ (801bcdc <TRACE_Lock+0x38>)
 801bcc2:	82da      	strh	r2, [r3, #22]
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcc8:	68bb      	ldr	r3, [r7, #8]
 801bcca:	f383 8810 	msr	PRIMASK, r3
}
 801bcce:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bcd0:	bf00      	nop
 801bcd2:	3714      	adds	r7, #20
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bc80      	pop	{r7}
 801bcd8:	4770      	bx	lr
 801bcda:	bf00      	nop
 801bcdc:	20001d08 	.word	0x20001d08

0801bce0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801bce0:	b480      	push	{r7}
 801bce2:	b085      	sub	sp, #20
 801bce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bce6:	f3ef 8310 	mrs	r3, PRIMASK
 801bcea:	607b      	str	r3, [r7, #4]
  return(result);
 801bcec:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bcee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bcf0:	b672      	cpsid	i
}
 801bcf2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801bcf4:	4b08      	ldr	r3, [pc, #32]	@ (801bd18 <TRACE_UnLock+0x38>)
 801bcf6:	8adb      	ldrh	r3, [r3, #22]
 801bcf8:	3b01      	subs	r3, #1
 801bcfa:	b29a      	uxth	r2, r3
 801bcfc:	4b06      	ldr	r3, [pc, #24]	@ (801bd18 <TRACE_UnLock+0x38>)
 801bcfe:	82da      	strh	r2, [r3, #22]
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd04:	68bb      	ldr	r3, [r7, #8]
 801bd06:	f383 8810 	msr	PRIMASK, r3
}
 801bd0a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bd0c:	bf00      	nop
 801bd0e:	3714      	adds	r7, #20
 801bd10:	46bd      	mov	sp, r7
 801bd12:	bc80      	pop	{r7}
 801bd14:	4770      	bx	lr
 801bd16:	bf00      	nop
 801bd18:	20001d08 	.word	0x20001d08

0801bd1c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801bd1c:	b480      	push	{r7}
 801bd1e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801bd20:	4b05      	ldr	r3, [pc, #20]	@ (801bd38 <TRACE_IsLocked+0x1c>)
 801bd22:	8adb      	ldrh	r3, [r3, #22]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	bf14      	ite	ne
 801bd28:	2301      	movne	r3, #1
 801bd2a:	2300      	moveq	r3, #0
 801bd2c:	b2db      	uxtb	r3, r3
}
 801bd2e:	4618      	mov	r0, r3
 801bd30:	46bd      	mov	sp, r7
 801bd32:	bc80      	pop	{r7}
 801bd34:	4770      	bx	lr
 801bd36:	bf00      	nop
 801bd38:	20001d08 	.word	0x20001d08

0801bd3c <memset>:
 801bd3c:	4402      	add	r2, r0
 801bd3e:	4603      	mov	r3, r0
 801bd40:	4293      	cmp	r3, r2
 801bd42:	d100      	bne.n	801bd46 <memset+0xa>
 801bd44:	4770      	bx	lr
 801bd46:	f803 1b01 	strb.w	r1, [r3], #1
 801bd4a:	e7f9      	b.n	801bd40 <memset+0x4>

0801bd4c <__libc_init_array>:
 801bd4c:	b570      	push	{r4, r5, r6, lr}
 801bd4e:	4d0d      	ldr	r5, [pc, #52]	@ (801bd84 <__libc_init_array+0x38>)
 801bd50:	4c0d      	ldr	r4, [pc, #52]	@ (801bd88 <__libc_init_array+0x3c>)
 801bd52:	1b64      	subs	r4, r4, r5
 801bd54:	10a4      	asrs	r4, r4, #2
 801bd56:	2600      	movs	r6, #0
 801bd58:	42a6      	cmp	r6, r4
 801bd5a:	d109      	bne.n	801bd70 <__libc_init_array+0x24>
 801bd5c:	4d0b      	ldr	r5, [pc, #44]	@ (801bd8c <__libc_init_array+0x40>)
 801bd5e:	4c0c      	ldr	r4, [pc, #48]	@ (801bd90 <__libc_init_array+0x44>)
 801bd60:	f000 f89a 	bl	801be98 <_init>
 801bd64:	1b64      	subs	r4, r4, r5
 801bd66:	10a4      	asrs	r4, r4, #2
 801bd68:	2600      	movs	r6, #0
 801bd6a:	42a6      	cmp	r6, r4
 801bd6c:	d105      	bne.n	801bd7a <__libc_init_array+0x2e>
 801bd6e:	bd70      	pop	{r4, r5, r6, pc}
 801bd70:	f855 3b04 	ldr.w	r3, [r5], #4
 801bd74:	4798      	blx	r3
 801bd76:	3601      	adds	r6, #1
 801bd78:	e7ee      	b.n	801bd58 <__libc_init_array+0xc>
 801bd7a:	f855 3b04 	ldr.w	r3, [r5], #4
 801bd7e:	4798      	blx	r3
 801bd80:	3601      	adds	r6, #1
 801bd82:	e7f2      	b.n	801bd6a <__libc_init_array+0x1e>
 801bd84:	0801c7a0 	.word	0x0801c7a0
 801bd88:	0801c7a0 	.word	0x0801c7a0
 801bd8c:	0801c7a0 	.word	0x0801c7a0
 801bd90:	0801c7a4 	.word	0x0801c7a4
 801bd94:	00000000 	.word	0x00000000

0801bd98 <floor>:
 801bd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd9c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801bda0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801bda4:	2e13      	cmp	r6, #19
 801bda6:	4602      	mov	r2, r0
 801bda8:	460b      	mov	r3, r1
 801bdaa:	460c      	mov	r4, r1
 801bdac:	4605      	mov	r5, r0
 801bdae:	4680      	mov	r8, r0
 801bdb0:	dc35      	bgt.n	801be1e <floor+0x86>
 801bdb2:	2e00      	cmp	r6, #0
 801bdb4:	da17      	bge.n	801bde6 <floor+0x4e>
 801bdb6:	a334      	add	r3, pc, #208	@ (adr r3, 801be88 <floor+0xf0>)
 801bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdbc:	f7e4 f9ea 	bl	8000194 <__adddf3>
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	f7e4 fc1a 	bl	80005fc <__aeabi_dcmpgt>
 801bdc8:	b150      	cbz	r0, 801bde0 <floor+0x48>
 801bdca:	2c00      	cmp	r4, #0
 801bdcc:	da57      	bge.n	801be7e <floor+0xe6>
 801bdce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801bdd2:	432c      	orrs	r4, r5
 801bdd4:	2500      	movs	r5, #0
 801bdd6:	42ac      	cmp	r4, r5
 801bdd8:	4c2d      	ldr	r4, [pc, #180]	@ (801be90 <floor+0xf8>)
 801bdda:	bf08      	it	eq
 801bddc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801bde0:	4623      	mov	r3, r4
 801bde2:	462a      	mov	r2, r5
 801bde4:	e024      	b.n	801be30 <floor+0x98>
 801bde6:	4f2b      	ldr	r7, [pc, #172]	@ (801be94 <floor+0xfc>)
 801bde8:	4137      	asrs	r7, r6
 801bdea:	ea01 0c07 	and.w	ip, r1, r7
 801bdee:	ea5c 0c00 	orrs.w	ip, ip, r0
 801bdf2:	d01d      	beq.n	801be30 <floor+0x98>
 801bdf4:	a324      	add	r3, pc, #144	@ (adr r3, 801be88 <floor+0xf0>)
 801bdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdfa:	f7e4 f9cb 	bl	8000194 <__adddf3>
 801bdfe:	2200      	movs	r2, #0
 801be00:	2300      	movs	r3, #0
 801be02:	f7e4 fbfb 	bl	80005fc <__aeabi_dcmpgt>
 801be06:	2800      	cmp	r0, #0
 801be08:	d0ea      	beq.n	801bde0 <floor+0x48>
 801be0a:	2c00      	cmp	r4, #0
 801be0c:	bfbe      	ittt	lt
 801be0e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801be12:	4133      	asrlt	r3, r6
 801be14:	18e4      	addlt	r4, r4, r3
 801be16:	ea24 0407 	bic.w	r4, r4, r7
 801be1a:	2500      	movs	r5, #0
 801be1c:	e7e0      	b.n	801bde0 <floor+0x48>
 801be1e:	2e33      	cmp	r6, #51	@ 0x33
 801be20:	dd0a      	ble.n	801be38 <floor+0xa0>
 801be22:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801be26:	d103      	bne.n	801be30 <floor+0x98>
 801be28:	f7e4 f9b4 	bl	8000194 <__adddf3>
 801be2c:	4602      	mov	r2, r0
 801be2e:	460b      	mov	r3, r1
 801be30:	4610      	mov	r0, r2
 801be32:	4619      	mov	r1, r3
 801be34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be38:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801be3c:	f04f 3cff 	mov.w	ip, #4294967295
 801be40:	fa2c f707 	lsr.w	r7, ip, r7
 801be44:	4207      	tst	r7, r0
 801be46:	d0f3      	beq.n	801be30 <floor+0x98>
 801be48:	a30f      	add	r3, pc, #60	@ (adr r3, 801be88 <floor+0xf0>)
 801be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be4e:	f7e4 f9a1 	bl	8000194 <__adddf3>
 801be52:	2200      	movs	r2, #0
 801be54:	2300      	movs	r3, #0
 801be56:	f7e4 fbd1 	bl	80005fc <__aeabi_dcmpgt>
 801be5a:	2800      	cmp	r0, #0
 801be5c:	d0c0      	beq.n	801bde0 <floor+0x48>
 801be5e:	2c00      	cmp	r4, #0
 801be60:	da0a      	bge.n	801be78 <floor+0xe0>
 801be62:	2e14      	cmp	r6, #20
 801be64:	d101      	bne.n	801be6a <floor+0xd2>
 801be66:	3401      	adds	r4, #1
 801be68:	e006      	b.n	801be78 <floor+0xe0>
 801be6a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801be6e:	2301      	movs	r3, #1
 801be70:	40b3      	lsls	r3, r6
 801be72:	441d      	add	r5, r3
 801be74:	4545      	cmp	r5, r8
 801be76:	d3f6      	bcc.n	801be66 <floor+0xce>
 801be78:	ea25 0507 	bic.w	r5, r5, r7
 801be7c:	e7b0      	b.n	801bde0 <floor+0x48>
 801be7e:	2500      	movs	r5, #0
 801be80:	462c      	mov	r4, r5
 801be82:	e7ad      	b.n	801bde0 <floor+0x48>
 801be84:	f3af 8000 	nop.w
 801be88:	8800759c 	.word	0x8800759c
 801be8c:	7e37e43c 	.word	0x7e37e43c
 801be90:	bff00000 	.word	0xbff00000
 801be94:	000fffff 	.word	0x000fffff

0801be98 <_init>:
 801be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be9a:	bf00      	nop
 801be9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be9e:	bc08      	pop	{r3}
 801bea0:	469e      	mov	lr, r3
 801bea2:	4770      	bx	lr

0801bea4 <_fini>:
 801bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bea6:	bf00      	nop
 801bea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801beaa:	bc08      	pop	{r3}
 801beac:	469e      	mov	lr, r3
 801beae:	4770      	bx	lr
